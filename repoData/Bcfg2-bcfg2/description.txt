Getting started
===============

The first thing to do is to create the repository and SSL key, these
can be done by running "bcfg2-admin init" as root on the server. The
script will ask questions about the SSL key, and a few things about
the repository.

After that is done, you should be able to start the server with the init
script by running "/etc/init.d/bcfg2-server start"

You can look at /var/log/daemon.log to see what the server said while
starting up. If the server started without problems, you can run "bcfg2
-q -v -n" to see if the client and server are communicating properly.

The next step after that is to actually populate the repository (by
default in /var/lib/bcfg2/) with configuration files, see the Bcfg2
documentation at http://docs.bcfg2.org/ for information on how that
is done.

 -- Arto Jantunen <viiru@debian.org>, Sat, 24 Apr 2010 09:43:44 +0300

This directory contains example files for various Bcfg2 generators and
plugins. The documentation for the examples is available in the Bcfg2
wiki or the manual.

Those files may not work in your environment. Others can be obsolete.

The purpose is to give you a entry point for your own configuration.

Bcfg2 - A Configuration Management System
-----------------------------------------

Bcfg2 (bee-config two) helps system administrators produce a
consistent, reproducible, and verifiable description of their
environment, and offers visualization and reporting tools to aid
in day-to-day administrative tasks. It is the fifth generation of
configuration management tools developed in the Mathematics and
Computer Science Division of Argonne National Laboratory.

* Homepage: http://bcfg2.org

Bcfg2 is fairly portable. It has been successfully run on:

* AIX, FreeBSD, OpenBSD Mac OS X, OpenSolaris, Solaris
* Many GNU/Linux distributions, including ArchLinux, Blag, CentOS,
  Debian, Fedora, Gentoo, gNewSense, Mandriva, openSUSE, Red Hat/RHEL,
  SuSE/SLES, Trisquel, and Ubuntu.

Installation
------------

For details about the installation of Bcfg2 please refer to the
following pages in the Bcfg2 online documentation:

* Prerequisites: http://docs.bcfg2.org/installation/prerequisites.html
* Download:      http://bcfg2.org/download/
* Installation:  http://docs.bcfg2.org/installation/index.html

Need help
---------

A lot of documentation is available in the Bcfg2 manual and the Bcfg2 wiki.

* Documentation:   http://docs.bcfg2.org/
* Wiki:            http://bcfg2.org/wiki/
* FAQ:             http://bcfg2.org/wiki/FAQ
* IRC:             #bcfg2 on chat.freenode.net
* Mailing list:    https://lists.mcs.anl.gov/mailman/listinfo/bcfg-dev

Want to help
-------------

* Bug tracker:     http://bcfg2.org/report
* Development:     http://docs.bcfg2.org/development/
* Wiki:            http://bcfg2.org/wiki/Contribute


Bcfg2 is licensed under a Simplified (2-clause) BSD license. For more
details check LICENSE.

BUILDING
--------

Dependancies:
	gmake

Usage:
	gmake


PUBLISHING
----------

Modify MANIFEST.bcfg2 and MANIFEST.bcfg2-server to set your publisher name in the fmri, e.g.  Change
	set name=pkg.fmri value="pkg://bcfg2/bcfg2@1.2.4"	
to
	set name=pkg.fmri value="pkg://example.com/bcfg2@1.2.4"	


Then run the pkgsend publish, i.e.
	 pkgsend publish -s http://example.com/path/to/repo -d build MANIFEST.bcfg2
	 pkgsend publish -s http://example.com/path/to/repo -d build MANIFEST.bcfg2-server

This directory contains repository maintenance tools.

basebuilder.py <image directory>
    - builds v2 base.xml from bcfg1 repo

batchadd.py <filename>
    - Add records to Hostbase

bcfg2-completion.bash
    - Bash tab completion for bcfg2-admin

bcfg2-cron
    - Script to run bcfg2 with cron

bcfg2-import-config
    - Create tarball of changed files on a client for import into the
      specification

bcfg2_local.py
    - Perform a full Bcfg2 run against a local repository instead of
      against a remote server

bcfg2-profile-templates.py [<template>]
    - Benchmark template rendering times

bcfg2_svnlog.py
    - Send intelligent log messages about changes made to your Bcfg2
      repository from SVN postcommit

create-debian-pkglist-gp.py
    - Generate Pkgmgr XML files from etc/debian-pkglist.conf.  See
      http://trac.mcs.anl.gov/projects/bcfg2/wiki/Tools/DebianPkgmgrCreationScript

create-debian-pkglist.py
    - Generate Pkgmgr XML files for Debian packages

create-rpm-pkglist.py
    - Generate list of installed RPM packages

ctags.sh
    - Generate ctags (or etags) indexes for the Bcfg2 source

encap-util-count.sh
    - Produce a count of encap packages per directory

encap-util-expand.sh
    - Gets encaps out of a makeself .run file

encap-util-place.sh
    - Put encaps in the right directories

encap-util-xml.sh
    - Generate Pkgmgr XML files for encap packages

export.py
    - Export a tagged version of the Bcfg2 source

generate-manpages.bash
    - Generate man pages from the Sphinx source

git_commit.py
    - Trigger script to commit local changes back to a git repository

hostbasepush.py
    - Call the Hostbase.rebuildState XML-RPC method

hostbase.py {-l|-c} <hostname>
    - Display or create host information for Hostbase

hostinfo.py {-q <query>|--showfields}
    - Query the hostbase databse

pkgmgr_gen.py
    - Generate Pkgmgr XML files from a list of directories that
      contain RPMS

pkgmgr_update.py
    - Update Pkgmgr XML files from a list of directories that contain
      RPMS

posixusers_baseline.py
    - Create a Bundle with all base POSIXUser/POSIXGroup entries on a
      client.

rpmlisting.py
    - Generate Pkgmgr XML files for RPM packages

selinux_baseline.py
    - Create a Bundle with all base SELinux entries on a client.  This
      is useful because different versions of the SELinux libraries
      have different capabilities, and some clients may have very,
      very large baselines.  selinux_baseline.py can be used to ensure
      that there are no 'extra' SELinux entries on such a client.

upgrade
    - This directory contains scripts used to upgrade to the specified
      version.  E.g., upgrade/1.2 has scripts needed to upgrade to
      Bcfg2 1.2.x from bcfg2 1.1.x

yum-listpkgs-xml.py
    - Produces a list of all packages installed and available in a
      format suitable for use by Packages or Pkgmgr

This directory contains scripts to help upgrading from Bcfg2 1.0 to 1.1.

posixunified.py
    - Change all ConfigFile, Directory, Directory, Permissions, and
      Symlink entries in Base and Bundler to Path type="<type>"
      entries in Rules.

This directory contains scripts to help upgrading from Bcfg2 1.1 to 1.2.

nagiosgen-convert.py
    - Convert configuration from Properties/NagiosGen.xml to
      NagiosGen/config.xml and NagiosGen/parents.xml

packages-convert.py
    - Convert configuration from Packages/config.xml to
      Packages/packages.conf and Packages/sources.xml

This directory contains scripts to help with upgrading from Bcfg2 1.2
to 1.3.

migrate_info.py
    - Convert info and :info files to info.xml files

migrate_configs.py
    - Migrate configuration in Rules/rules.conf and
      Packages/packages.conf to bcfg2.conf; move database
      configuration from [statistics] to [database]

service_modes.py
    - Convert Service tags from "mode" attribute to separate "restart"
      and "install" attributes

migrate_dbstats.py
    - Convert old DBStats entries to the new Reporting system

migrate_perms_to_mode.py
    - Convert perms attribute to mode (note that if you have info/:info
      files, you should run migrate_info.py first)

migrate_probe_groups_to_db.py
    - Migrate Probe host and group data from XML to DB backend for Metadata 
      and Probe plugins. Does not migrate individual probe return data. Assumes 
      migration to BOTH Metadata and Probe to database backends. 

