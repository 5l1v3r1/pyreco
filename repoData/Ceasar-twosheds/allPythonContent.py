__FILENAME__ = conf
# -*- coding: utf-8 -*-
#
# twosheds documentation build configuration file, created by
# sphinx-quickstart on Sat Nov 30 21:42:38 2013.
#
# This file is execfile()d with the current directory set to its containing dir.
#
# Note that not all possible configuration values are present in this
# autogenerated file.
#
# All configuration values have a default; values that are commented out
# serve to show the default.

import sys, os

# If extensions (or modules to document with autodoc) are in another directory,
# add these directories to sys.path here. If the directory is relative to the
# documentation root, use os.path.abspath to make it absolute, like shown here.
#sys.path.insert(0, os.path.abspath('.'))
sys.path.insert(0, os.path.abspath('.'))

# -- General configuration -----------------------------------------------------

# If your documentation needs a minimal Sphinx version, state it here.
#needs_sphinx = '1.0'

# Add any Sphinx extension module names here, as strings. They can be extensions
# coming with Sphinx (named 'sphinx.ext.*') or your custom ones.
extensions = ['sphinx.ext.autodoc']

# Add any paths that contain templates here, relative to this directory.
templates_path = ['_templates']

# The suffix of source filenames.
source_suffix = '.rst'

# The encoding of source files.
#source_encoding = 'utf-8-sig'

# The master toctree document.
master_doc = 'index'

# General information about the project.
project = u'twosheds'
copyright = u'2013, Ceasar Bautista'

# The version info for the project you're documenting, acts as replacement for
# |version| and |release|, also used in various other places throughout the
# built documents.
#
# The short X.Y version.
import pkg_resources
version = pkg_resources.get_distribution("twosheds").version
# The full version, including alpha/beta/rc tags.
release = version

# The language for content autogenerated by Sphinx. Refer to documentation
# for a list of supported languages.
#language = None

# There are two options for replacing |today|: either, you set today to some
# non-false value, then it is used:
#today = ''
# Else, today_fmt is used as the format for a strftime call.
#today_fmt = '%B %d, %Y'

# List of patterns, relative to source directory, that match files and
# directories to ignore when looking for source files.
exclude_patterns = ['_build']

# The reST default role (used for this markup: `text`) to use for all documents.
#default_role = None

# If true, '()' will be appended to :func: etc. cross-reference text.
#add_function_parentheses = True

# If true, the current module name will be prepended to all description
# unit titles (such as .. function::).
#add_module_names = True

# If true, sectionauthor and moduleauthor directives will be shown in the
# output. They are ignored by default.
#show_authors = False

# The name of the Pygments (syntax highlighting) style to use.
pygments_style = 'sphinx'

# A list of ignored prefixes for module index sorting.
#modindex_common_prefix = []


# -- Options for HTML output ---------------------------------------------------

# The theme to use for HTML and HTML Help pages.  See the documentation for
# a list of builtin themes.
html_theme = 'default'

# Theme options are theme-specific and customize the look and feel of a theme
# further.  For a list of options available for each theme, see the
# documentation.
#html_theme_options = {}

# Add any paths that contain custom themes here, relative to this directory.
#html_theme_path = []

# The name for this set of Sphinx documents.  If None, it defaults to
# "<project> v<release> documentation".
#html_title = None

# A shorter title for the navigation bar.  Default is the same as html_title.
#html_short_title = None

# The name of an image file (relative to this directory) to place at the top
# of the sidebar.
#html_logo = None

# The name of an image file (within the static path) to use as favicon of the
# docs.  This file should be a Windows icon file (.ico) being 16x16 or 32x32
# pixels large.
#html_favicon = None

# Add any paths that contain custom static files (such as style sheets) here,
# relative to this directory. They are copied after the builtin static files,
# so a file named "default.css" will overwrite the builtin "default.css".
html_static_path = ['_static']

# If not '', a 'Last updated on:' timestamp is inserted at every page bottom,
# using the given strftime format.
#html_last_updated_fmt = '%b %d, %Y'

# If true, SmartyPants will be used to convert quotes and dashes to
# typographically correct entities.
#html_use_smartypants = True

# Custom sidebar templates, maps document names to template names.
#html_sidebars = {}

# Additional templates that should be rendered to pages, maps page names to
# template names.
#html_additional_pages = {}

# If false, no module index is generated.
#html_domain_indices = True

# If false, no index is generated.
#html_use_index = True

# If true, the index is split into individual pages for each letter.
#html_split_index = False

# If true, links to the reST sources are added to the pages.
#html_show_sourcelink = True

# If true, "Created using Sphinx" is shown in the HTML footer. Default is True.
#html_show_sphinx = True

# If true, "(C) Copyright ..." is shown in the HTML footer. Default is True.
#html_show_copyright = True

# If true, an OpenSearch description file will be output, and all pages will
# contain a <link> tag referring to it.  The value of this option must be the
# base URL from which the finished HTML is served.
#html_use_opensearch = ''

# This is the file name suffix for HTML files (e.g. ".xhtml").
#html_file_suffix = None

# Output file base name for HTML help builder.
htmlhelp_basename = 'twoshedsdoc'


# -- Options for LaTeX output --------------------------------------------------

latex_elements = {
# The paper size ('letterpaper' or 'a4paper').
#'papersize': 'letterpaper',

# The font size ('10pt', '11pt' or '12pt').
#'pointsize': '10pt',

# Additional stuff for the LaTeX preamble.
#'preamble': '',
}

# Grouping the document tree into LaTeX files. List of tuples
# (source start file, target name, title, author, documentclass [howto/manual]).
latex_documents = [
  ('index', 'twosheds.tex', u'twosheds Documentation',
   u'Ceasar Bautista', 'manual'),
]

# The name of an image file (relative to this directory) to place at the top of
# the title page.
#latex_logo = None

# For "manual" documents, if this is true, then toplevel headings are parts,
# not chapters.
#latex_use_parts = False

# If true, show page references after internal links.
#latex_show_pagerefs = False

# If true, show URL addresses after external links.
#latex_show_urls = False

# Documents to append as an appendix to all manuals.
#latex_appendices = []

# If false, no module index is generated.
#latex_domain_indices = True


# -- Options for manual page output --------------------------------------------

# One entry per manual page. List of tuples
# (source start file, name, description, authors, manual section).
man_pages = [
    ('index', 'twosheds', u'twosheds Documentation',
     [u'Ceasar Bautista'], 1)
]

# If true, show URL addresses after external links.
#man_show_urls = False


# -- Options for Texinfo output ------------------------------------------------

# Grouping the document tree into Texinfo files. List of tuples
# (source start file, target name, title, author,
#  dir menu entry, description, category)
texinfo_documents = [
  ('index', 'twosheds', u'twosheds Documentation',
   u'Ceasar Bautista', 'twosheds', 'One line description of project.',
   'Miscellaneous'),
]

# Documents to append as an appendix to all manuals.
#texinfo_appendices = []

# If false, no module index is generated.
#texinfo_domain_indices = True

# How to display URL addresses: 'footnote', 'no', or 'inline'.
#texinfo_show_urls = 'footnote'

########NEW FILE########
__FILENAME__ = test_twosheds
import os

import pytest

from twosheds import Shell
from twosheds.completer import Completer
from twosheds.transform import (transform,
                                AliasTransform,
                                VariableTransform,
                                TildeTransform,)

EDITOR = "vim"
HOME = os.environ['HOME']
LOGNAME = os.environ['LOGNAME']


@pytest.fixture
def aliases():
    return {
        "ls": "ls -G",
        "home": "cd ~",
    }


@pytest.fixture
def completer(transforms):
    return Completer(transforms)


@pytest.fixture
def environment():
    return {
        "EDITOR": EDITOR,
        "HOME": HOME,
        "LOGNAME": LOGNAME,
    }


@pytest.fixture
def alias_transform(aliases):
    return AliasTransform(aliases)


@pytest.fixture
def variable_transform(environment):
    return VariableTransform(environment)


@pytest.fixture
def tilde_transform(environment):
    return TildeTransform(environment['HOME'])


@pytest.fixture
def transforms(alias_transform, variable_transform, tilde_transform):
    return [alias_transform, variable_transform, tilde_transform]


@pytest.fixture
def shell():
    return Shell()


def test_shell(shell):
    assert shell.eval("echo") is None


def test_alias_substitution1(alias_transform):
    """Alias substitution should expand aliases."""
    text = "ls"
    assert alias_transform(text) == "ls -G"


def test_alias_substitution2(alias_transform):
    """Alias substitution should not expand arguments."""
    text = "echo ls"
    assert alias_transform(text) == text


def test_alias_substitution_inverse(alias_transform):
    """Alias substitution should have an inverse."""
    text = "ls"
    assert alias_transform(alias_transform(text), inverse=True) == text


def test_variable_substitution(variable_transform):
    text = "cd $HOME"
    assert variable_transform(text) == "cd %s" % HOME


def test_variable_substitution_inverse(variable_transform):
    text = "cd %s" % HOME
    assert variable_transform(text, inverse=True) == "cd $HOME"


def test_variable_substitution_only_at_start(variable_transform):
    """
    Expansion of variables should only happen if token starts with a variable.

    Thus, assuming "$EDITOR" is a variable, "$EDITOR" should be expanded, but "x$EDITOR" should not.
    
    Thus if "EDITOR=vim", expansion of "xvim" should do nothing,
    not replace with 'f$EDITOR'.
    """
    text = 'x$EDITOR'
    assert variable_transform(text) == text
    text = 'x%s' % EDITOR
    assert variable_transform(text, inverse=True) == text

def test_variable_substitution_order(variable_transform):
    """Variable substitution should substitute longer values first."""
    text = "cd %s" % HOME
    assert variable_transform(text, inverse=True) == "cd $HOME"


def test_variable_substitution_id(variable_transform):
    text = "$HOME"
    assert variable_transform(variable_transform(text), inverse=True) == text


def test_tilde_substitution1(tilde_transform, environment):
    """Tilde substitution should expand ``~`` as ``$HOME``."""
    text = "cd ~"
    assert tilde_transform(text) == "cd %s" % environment['HOME']
    text = "cd ~/Desktop"
    assert tilde_transform(text) == "cd %s/Desktop" % environment['HOME']


def test_tilde_substitution2(tilde_transform):
    """
    Tilde substitution should not expand a tilde unless it is the prefix
    of a token.
    """
    text = "git rebase -i HEAD~3"
    assert tilde_transform(text) == text


def test_tilde_substitution_inverse(tilde_transform):
    """Tilde substitution should have an inverse."""
    text = "~"
    assert tilde_transform(tilde_transform(text), inverse=True) == text


def test_transform(transforms):
    text = "home"
    assert transform(text, transforms) == "cd %s" % HOME


def test_transform_inverse(transforms):
    text = "cd %s" % HOME
    assert transform(text, transforms, inverse=True) == "home"


def test_transform_id(transforms):
    text = "home"
    actual = transform(transform(text, transforms), transforms, inverse=True)
    assert actual == text


@pytest.mark.skipif(reason="flaky")
def test_export(shell):
    assert "X" not in os.environ
    assert "Y" not in os.environ
    shell.interpret("export X=1 Y=2")
    assert os.environ.get("X") == "1"
    assert os.environ.get("Y") == "2"
    del os.environ["X"]
    del os.environ["Y"]


class TestCompleter():
    def test_gen_filename_completions(self, completer, tmpdir):
        os.chdir(str(tmpdir))
        tmpdir.join('README.rst').write('')
        tmpdir.mkdir('dev')
        tmpdir.mkdir('foo bar')
        matches = completer.get_matches('')
        assert ['dev/', 'foo\\ bar/', 'README.rst '] == matches
        matches = completer.get_matches('d')
        assert ['dev/'] == matches
        matches = completer.get_matches('bar')
        assert ['foo\\ bar/'] == matches
        matches = completer.get_matches('z')
        assert [] == matches

    def test_gen_variable_completions(self, completer, environment):
        # assuming $HOME is in environment
        word = "$H"
        matches = completer.get_matches(word)
        assert matches and all(m.startswith(word) for m in matches)

    def test_gen_variable_completions_generic(self, completer, environment):
        # assuming something is in environment
        word = "$"
        matches = completer.get_matches(word)
        assert matches and all(m.startswith(word) for m in matches)

    def test_gen_variable_completions_no_match(self, completer, environment):
        # assuming $QX.* is not in environment
        word = "$QX"
        matches = completer.get_matches(word)
        assert len(matches) == 0

########NEW FILE########
__FILENAME__ = builtins
import os


def cd(*args):
    os.chdir(*args)


def export(*args):
    for arg in args:
        k, v = arg.split("=", 1)
        os.environ[k] = v

########NEW FILE########
__FILENAME__ = cli
import os
import traceback

from program import Program
from builtins import cd, export
from .transform import TildeTransform, VariableTransform


class CommandLineInterface(object):
    """
    Basic read-eval-print loop.
    """
    commands = {
        'cd': cd,
        'export': export,
    }

    def __init__(self, aliases, terminal, echo=False):
        self.aliases = aliases
        self.terminal = terminal
        self.echo = echo
        self.transforms = [
            VariableTransform(os.environ),
            TildeTransform(os.environ['HOME']),
        ]

    def read(self):
        """
        The shell shall read its input in terms of lines from a file, from a
        terminal in the case of an interactive shell, or from a string in the
        case of sh -c or system(). The input lines can be of unlimited length.
        """
        for line in self.terminal:
            yield line

    def eval(self, text):
        """Respond to text entered by the user.

        :param text: the user's input
        """
        program = Program(text, echo=self.echo, transforms=self.transforms)
        tokens = program.gen_tokens()
        for sentence in program.gen_sentences(tokens, self.aliases):
            if self.echo:
                self.terminal.debug(str(sentence))
            program.interpret(sentence, self.commands)

    def interact(self):
        """Get a command from the user and respond to it."""
        lines = ""
        for line in self.read():
            lines += line
            try:
                self.eval(lines)
            except ValueError:
                pass
            except:
                self.terminal.error(traceback.format_exc())
                break
            else:
                break

    def serve_forever(self, banner=None):
        """Handle one interaction at a time until shutdown.

        :param banner: (optional) the banner to print before the first
                       interaction. Defaults to ``None``.
        """
        if banner:
            print(banner)
        while True:
            self.interact()

########NEW FILE########
__FILENAME__ = completer
"""
twosheds.completer
~~~~~~~~~~~~~~~~~~

This module implements command completion.
"""
import os
import re
import sys
import traceback

from transform import transform


class Completer(object):
    """A Completer completes words when given a unique abbreviation.
    
    Type part of a word (for example ``ls /usr/lost``) and hit the tab key to
    run the completer.
    
    The shell completes the filename ``/usr/lost`` to ``/usr/lost+found/``,
    replacing the incomplete word with the complete word in the input buffer.

    .. note::
    
        Completion adds a ``/`` to the end of completed directories and a
        space to the end of other completed words, to speed typing and provide
        a visual indicator of successful completion. Completer.use_suffix can be set ``False`` to prevent this.
    
    If no match is found (perhaps ``/usr/lost+found`` doesn't exist), then no
    matches will appear.
    
    If the word is already complete (perhaps there is a ``/usr/lost`` on your
    system, or perhaps you were thinking too far ahead and typed the whole
    thing) a ``/`` or space is added to the end if it isn't already there.

    The shell will list the remaining choices (if any) below the unfinished
    command line whenever completion fails, for example::

        $ ls /usr/l[tab]
        lbin/       lib/        local/      lost+found/

    Completion will always happen on the shortest possible unique match, even
    if more typing might result in a longer match. Therefore::

        $ ls
        fodder   foo      food     foonly
        $ rm fo[tab]

    just beeps, because ``fo`` could expand to ``fod`` or ``foo``, but if we
    type another ``o``::

        $ rm foo[tab]
        $ rm foo

    the completion completes on ``foo``, even though ``food`` and ``foonly``
    also match.

    .. note::
        
        ``excludes_patterns`` can be set to a list of regular expression
        patterns to be ignored by completion.
        
        Consider that the completer were initialized to ignore
        ``[r'.*~', r'.*.o']``::

            $ ls
            Makefile        condiments.h~   main.o          side.c
            README          main.c          meal            side.o
            condiments.h    main.c~
            $ emacs ma[tab]
            main.c

    :param use_suffix: add a ``/`` to completed directories and a space to the
                       end of other completed words, to speed typing and
                       provide a visual indicator of successful completion.
                       Defaults to ``True``.
    :param excludes: a list of regular expression patterns to be ignored by
                     completion. 
    """
    def __init__(self, transforms, use_suffix=True, exclude=None):
        self.transforms = transforms
        self.use_suffix = use_suffix
        self.exclude_patterns = exclude or []

    def complete(self, word, state):
        """Return the next possible completion for ``word``.

        This is called successively with ``state == 0, 1, 2, ...`` until it
        returns ``None``.
        
        The completion should begin with ``word``.

        :param word: the word to complete
        :param state: an int, used to iterate over the choices
        """
        try:
            import rl
            # TODO: doing this manually right now, but may make sense to exploit
            rl.completion.suppress_append = True
        except ImportError:
            pass
        word = transform(word, self.transforms, word=True)
        try:
            match = self.get_matches(word)[state]
            return transform(match, self.transforms, word=True, inverse=True)
        except IndexError:
            return None

    def exclude_matches(self, matches):
        """Filter any matches that match an exclude pattern.

        :param matches: a list of possible completions
        """
        for match in matches:
            for exclude_pattern in self.exclude_patterns:
                if re.match(exclude_pattern, match) is not None:
                    break
            else:
                yield match

    def _is_hidden_file(self, filename):
        return filename.startswith('.')

    def gen_filename_completions(self, word, filenames):
        """Generate a sequence of filenames that match ``word``.
        
        :param word: the word to complete
        """
        match_found = False
        if word:
            for filename in filenames:
                if filename.startswith(word):
                    match_found = True
                    yield filename
        else:
            for filename in filenames:
                if not self._is_hidden_file(filename):
                    match_found = True
                    yield filename
        # return results that match anywhere in the file if no results are
        # found
        if not match_found:
            for filename in filenames:
                if word in filename:
                    yield filename

    def gen_matches(self, word):
        """Generate a sequence of possible completions for ``word``.
        
        :param word: the word to complete
        """

        if word.startswith("$"):
            for match in self.gen_variable_completions(word, os.environ):
                yield match
        else:
            head, tail = os.path.split(word)
            filenames = os.listdir(head or '.')
            for match in self.gen_filename_completions(tail, filenames):
                yield os.path.join(head, match)

    def gen_variable_completions(self, word, env):
        """Generate a sequence of possible variable completions for ``word``.
        
        :param word: the word to complete
        :param env: the environment
        """ 
        # ignore dollar
        var = word[1:]
        for k in env:
            if k.startswith(var):
                yield "$" + k

    def get_matches(self, word):
        matches = self.gen_matches(word)
        # defend this against bad user input for regular expression patterns
        try:
            matches = self.exclude_matches(matches)
        except:
            sys.stderr.write(traceback.format_exc())
            return None
        else:
            if self.use_suffix:
                matches = [self.inflect(match) for match in matches]
            return list(matches)

    def inflect(self, filename):
        """Inflect a filename to indicate its type.

        If the file is a directory, the suffix "/" is appended, otherwise
        a space is appended.

        :param filename: the name of the file to inflect
        """
        suffix = ("/" if os.path.isdir(filename) else " ")
        return self._escape(filename) + suffix

    def _escape(self, path):
        return path.replace(" ", "\\ ")


def make_completer(transforms, use_suffix=True, exclude=None):
    try:
        import rl
    except ImportError:
        import warnings
        warnings.warn("rl unavailable")
        import pprint
        pprint.pprint(os.environ["PYTHONPATH"])
        return None
    else:
        completer = Completer(transforms, use_suffix, exclude)
        rl.completer.completer = completer.complete
        rl.completer.parse_and_bind('TAB: complete')
        # rl.completion.filename_completion_desired = True
        rl.completer.word_break_characters = (rl.completer
                                              .word_break_characters
                                              .replace("-", "")
                                              .replace("~", "")
                                              .replace("$", "")
                                              .replace("/", "")
                                              )
        return completer

########NEW FILE########
__FILENAME__ = kernel
import subprocess


class Kernel(object):
    def respond(self, text):
        process = subprocess.Popen(text, shell=True)
        process.communicate()

########NEW FILE########
__FILENAME__ = program
from .kernel import Kernel
from .sentence import Sentence
from .transform import transform


class Program(object):
    def __init__(self, text, transforms=None, echo=False):
        self.text = text

        # Token recognition variables
        self.escape_chars = {'\\'}
        self.quotes = {"'", '"'}
        self.separators = ";"
        self.whitespace = {' ', '\t', '\r', '\n'}

        self.transforms = transforms or []

        self.echo = echo

    def gen_tokens(self):
        """
        >>> list(Program("ls").gen_tokens())
        ['ls']
        >>> list(Program("ls -a").gen_tokens())
        ['ls', '-a']
        >>> list(Program("cd /; pwd").gen_tokens())
        ['cd', '/', None, 'pwd']
        >>> list(Program("'cd /; pwd'").gen_tokens())
        ['cd /; pwd']
        """
        current_token = []
        escape = False
        quote = None
        for char in self.text:
            if quote is None:
                if escape:
                    current_token.append(char)
                    escape = False
                elif char in self.escape_chars:
                    escape = True
                elif char in self.quotes:
                    quote = char
                elif char in self.whitespace:
                    if current_token:
                        yield ''.join(current_token)
                    current_token = []
                elif char in self.separators:
                    if current_token:
                        yield ''.join(current_token)
                    current_token = []
                    yield None
                else:
                    current_token.append(char)
            elif char == quote:
                if current_token:
                    yield ''.join(current_token)
                current_token = []
                quote = None
            else:
                current_token.append(char)
        if quote is not None:
            raise ValueError("No closing quotation")
        if escape:
            raise ValueError("No escaped character")
        if current_token:
            yield ''.join(current_token)

    def _gen_sentences(self, tokens):
        sentence = []
        for token in tokens:
            if token is None:
                yield sentence
                sentence = []
            else:
                sentence.append(token)
        yield sentence

    def gen_sentences(self, tokens, aliases=None):
        if aliases is None:
            aliases = {}
        for sentence in self._gen_sentences(tokens):
            if sentence[0] in aliases:
                new_tokens = Program(aliases[sentence[0]]).gen_tokens()
                sentence[0:1] = list(new_tokens)
            yield transform(Sentence(sentence), self.transforms)

    def interpret(self, sentence, environ=None):
        if environ is None:
            environ = {}
        try:
            return environ[sentence.command](*sentence.args)
        except KeyError:
            return Kernel().respond(str(sentence))

    def run(self, aliases=None, environ=None):
        tokens = self.gen_tokens()
        for sentence in self.gen_sentences(tokens, aliases):
            self.interpret(sentence, environ)

########NEW FILE########
__FILENAME__ = sentence


class Sentence(object):
    def __init__(self, tokens):
        self.tokens = tokens

    @property
    def command(self):
        return self.tokens[0]

    @property
    def args(self):
        return self.tokens[1:]

    def __str__(self):
        return " ".join(self.tokens)

    def __repr__(self):
        return "Sentence(%s)" % self.tokens

########NEW FILE########
__FILENAME__ = shell
"""
twosheds.shell
~~~~~~~~~~~~~~

This module implements the central user interface for access to an
operating system's kernel services.
"""
from __future__ import absolute_import

import atexit
import os
import readline

from .cli import CommandLineInterface
from .completer import make_completer
from .terminal import Terminal

DEFAULT_HISTFILE = os.path.expanduser("~/.console-history")


class Shell(CommandLineInterface):
    """
    A facade encapsulating the high-level logic of a command language
    interpreter.

    :param aliases: dictionary of aliases
    :param builtins: dictionary of builtins
    :param echo: set True to print commands immediately before execution
    :param environ:
        a dictionary containing environmental variables. This must include PS1
        and PS2, which are used to define the prompts.
    :param histfile: the location in which to look for a history file. if
                     unset, ``DEFAULT_HISTFILE`` is used. histfile is useful
                     when sharing the same home directory between different
                     machines, or when saving separate histories on different
                     terminals.
    :param use_suffix: add a ``/`` to completed directories and a space to the
                       end of other completed words, to speed typing and
                       provide a visual indicator of successful completion.
    :param exclude: list of regexes to be ignored by completion.

    Usage::

        >>> import twosheds
        >>> shell = twosheds.Shell()
        >>> shell.interact()  # doctest: +SKIP
    """

    def __init__(self,
                 environ,
                 aliases=None,
                 echo=False,
                 histfile=None,
                 use_suffix=True,
                 exclude=None,
                 ):
        super(Shell, self).__init__(aliases, Terminal(environ))
        self.completer = make_completer(
            transforms=self.transforms,
            use_suffix=use_suffix,
            exclude=exclude
        )
        self.echo = echo
        self.histfile = histfile or DEFAULT_HISTFILE
        self._before_interaction_funcs = []
        self._after_interaction_funcs = []

    def _save_history(self):
        readline.write_history_file(self.histfile)

    def serve_forever(self, banner=None):
        """Interact with the user.

        :param banner: (optional) the banner to print before the first
                       interaction. Defaults to ``None``.
        """
        if hasattr(readline, "read_history_file"):
            try:
                readline.read_history_file(self.histfile)
            except IOError:
                pass
            atexit.register(self._save_history)
        super(Shell, self).serve_forever(banner)

    def interact(self):
        for f in self._before_interaction_funcs:
            f()
        super(Shell, self).interact()
        for f in self._after_interaction_funcs:
            f()

    def add_command(self, command, func):
        self.commands[command] = func

    def command(self, command):
        def decoractor(f):
            self.add_command(command, f)
            return f
        return decoractor

    def before_interaction(self, f):
        """Register a function to be run before each interaction.

        :param f:
            The function to run after each interaction. This function must not
            take any parameters.

        """
        self._before_interaction_funcs.append(f)
        return f

    def after_interaction(self, f):
        """Register a function to be run after each interaction.

        :param f:
            The function to run after each interaction. This function must not
            take any parameters.

        """
        self._after_interaction_funcs.append(f)
        return f

########NEW FILE########
__FILENAME__ = terminal
import sys


class Terminal(object):
    """An interface for text entry and display."""
    def __init__(self, environ):
        self.environ = environ

    @property
    def primary_prompt_string(self):
        """The prompt first seen at the command line. Defaults to "$ "."""
        return self.environ.get("PS1", "$ ")

    @property
    def secondary_prompt_string(self):
        """The prompt seen for line continuations. Defaults to "> "."""
        return self.environ.get("PS2", "> ")

    @property
    def quaternary_prompt_string(self):
        """Printed before each command displayed during an execution trace"""
        return self.environ.get("PS4", "+ ")

    def readline(self, continuation=False):
        """Read a line from the terminal.

        A backslash followed by a <newline> is interpreted as a line
        continuation. The backslash and <newline>s are removed before return.

        For example::

            $ uname \
            > -m
            x86_64

        :param continuation:
            True if the line is a continuation. Defaults to False.
        """
        prompt = (self.secondary_prompt_string if continuation else
                  self.primary_prompt_string)
        try:
            line = raw_input(prompt)
            while line.endswith("\\"):
                line = line[:-1] + raw_input(self.secondary_prompt_string)
        except EOFError:
            raise SystemExit()
        else:
            return line

    def readlines(self):
        """Read a command from the terminal.

        Returns a list of tokens containing the user's input.
        """
        continuation = False
        while True:
            yield self.readline(continuation)
            continuation = True

    def __iter__(self):
        return self.readlines()

    def write(self, msg):
        """Output a message.

        :param msg: a string to print to standard out
        """
        sys.stdout.write(msg)

    def debug(self, msg):
        print self.quaternary_prompt_string + msg

    def error(self, msg):
        """Output an error.

        :param msg: a string to print to standard error
        """
        sys.stderr.write(msg)

########NEW FILE########
__FILENAME__ = transform
"""
twosheds.transform
~~~~~~~~~~~~~~~~~~

This module implements a number of grammatical transforms.

A grammatical transformation (or transformation) operates on a given
string with a given constituent structure and converts it into a new
string with a new derived constituent structure.
"""
from .sentence import Sentence


def transform(sentence, transforms, word=False, inverse=False):
    if word:
        sentence = Sentence([sentence])
    if inverse:
        transforms = reversed(transforms)
    for t in transforms:
        sentence = t(sentence, inverse)
    if word:
        return sentence.tokens[0]
    return sentence


class Transform(object):
    def __call__(self, sentence, inverse=False):
        raise NotImplementedError("Transformations must be callable.")


def is_variable(token):
    """Check if a token is a variable."""
    return token.startswith('$')


class VariableTransform(Transform):
    """Expands environmental variables.

    Variable substitutions are made in order of the length of the expansion.

    >>> env = {'HOME': '/Users/arthurjackson'}
    >>> t = VariableTransform(env)
    >>> t('cd $HOME')
    'cd /Users/arthurjackson'
    >>> t('cd /Users/arthurjackson', inverse=True)
    'cd $HOME'

    :param environment: dictionary of variables to expand
    """
    def __init__(self, environment=None):
        self.environment = environment or {}

    @property
    def _inverse_environment(self):
        # NOTE: This will be unreliable if two variables have the same value.
        return {v: k for k, v in self.environment.items()}

    def _transform(self, tokens, inverse=False):
        inverse_environment = self._inverse_environment
        if inverse:
            for token in tokens:
                try:
                    yield "$" + inverse_environment[token]
                except KeyError:
                    yield token
        else:
            for token in tokens:
                if is_variable(token):
                    yield self.environment.get(token[1:], token)
                else:
                    yield token

    def __call__(self, sentence, inverse=False):
        sentence.tokens = list(self._transform(sentence.tokens, inverse))
        return sentence


class TildeTransform(Transform):
    """
    Decorator for :class:`VariableTransform <VariableTransform>`.

    Expands ``~`` to ``$HOME``.

    >>> t = TildeTransform('/user/twosheds')
    >>> t("~")
    '/user/twosheds'
    >>> t("/user/twosheds", inverse=True)
    '~'

    """
    def __init__(self, home):
        self.home = home

    def _transform(self, sentence, inverse=False):
        TILDE = "~"
        source, target = (self.home, TILDE) if inverse else (TILDE, self.home)
        sentence.tokens = [
            token.replace(source, target) if token.startswith(source)
            else token
            for token in sentence.tokens
        ]
        return sentence

    def __call__(self, sentence, inverse=False):
        return self._transform(sentence, inverse)

########NEW FILE########
