**Changelog**

_Published by YYYY. If second or more updates in a year, YYYY-MM. Milestones noted with each publication date._


# Toner 2012

_[Preview Toner 2012 »](http://tile.stamen.com/toner-2012/)._

***About Toner v2 aka 2012, "Milestone 2" in Github***

![Toner changes animated thru time in San Francisco](https://github.com/Citytracking/toner/raw/master/images/toner_animated_gif_v1_2010_to_v2_gm_2012.gif)

## General

* **Easy-to-use tiles**: Stamen now hosts easy to embed Toner tiles with CC license from [maps.stamen.com](http://maps.stamen.com), thanks to the [Knight Foundation](http://newschallenge.tumblr.com/) and our [Citytracking.org](http://citytracking.org/) [grant](http://content.stamen.com/knight_news_challenge_update)! No server hardware or software setup needed, just start using the tiles in your favorite web mapping API client side. You can still roll your own tiles using the data and setup readme's in the Github repo. [Read more »](http://maps.stamen.com)

* **More international**: Plays better outside of the United States! Now displays local names in non-Latin writing scripts (like Japanese and Arabic) and better accent marks in Europe. We optimized the road symbology to more places world wide. [Issue 30](https://github.com/Citytracking/toner/issues/30)

* **More Toner flavors**: Introduces specific flavors of Toner optimized for [map sandwiches](http://blogs.esri.com/esri/arcgis/2009/07/13/the-map-sandwich/), easy to integrating with and promoting your custom map stories: toner-standard ([toner](tilefarm.stamen.com/toner-2012)), toner-hybrid-with-labels ([toner-hybrid](tilefarm.stamen.com/toner-hybrid-with-labels)), toner-hybrid-only-lines ([toner-lines](tilefarm.stamen.com/toner-lines)), toner-hybrid-only-labels ([toner-labels](tilefarm.stamen.com/toner-labels)), toner-no-labels ([toner-background](tilefarm.stamen.com/toner-no-labels)). [Issue 10](https://github.com/Citytracking/toner/issues/10).

* **Easy to read stylesheets**: General stylesheet cleanup, consolidation. Restructured all the OSM roads using [High Roads](http://github.com/migurski/high-roads/). Now uses Postgres views by zoom level, making it much easier to design what big, medium, and small roads should look like consistently between layers while abstracting the data part. Similar appraoch is taken for water bodies using [Imposm](http://imposm.org/) tables. [Issue 9](https://github.com/Citytracking/toner/issues/9)

* **More content**: Added reservoirs, state boundaries, and more. Map now zooms to 19+, important when you're inventory mapping stories at the city block level where locations along a street and buildings/venues are helpful. Before they stopped at zoom 18 but often when you're looking at street-level incidents (as in [Dotspotting.org](http://www.dotspotting.org)), you need more detail [Issue 18](https://github.com/Citytracking/toner/issues/18). Along with that, the transition between bold black roads and cased white roads now starts at zoom 18 and carries thru to zoom 19+ ([Issue 17](https://github.com/Citytracking/toner/issues/17)). This preserves the strong contrast of Toner, but also allows better use as a background map visually at these zooms so your story points stay the focus (and consumes much less ink if you print the maps using a service like Stamen's [Field Papers](http://www.fieldpapers.org). 

* **Urban wayfinding**: At these most detailed zooms building footprints help us orient to the build landscape so we start adding those progressively in starting around zoom 14 (big airport terminals and convention center sized buildings) but most noticeably at zoom 16+. We also show metro (subway) stations now, helping navigate by landmarks in big cities like New York, London, and Tokyo. [Issue 16](https://github.com/Citytracking/toner/issues/16),  [Issue 48](https://github.com/Citytracking/toner/issues/48), [Issue 40](https://github.com/Citytracking/toner/issues/40).

## Boundaries

* **Improved graphic styling of country boundary lines** at zooms 8 and 9. [Issue 27](https://github.com/Citytracking/toner/issues/27)

* **Added state boundary lines** at the city and regional zooms. Important for places like Washington DC where a metropolitan area sprawls across multiple admin-1 jurisdictions. Made sure they stack above the water and made upstream changes in OSM master data to allow for boudnaries in the water that aren't indicator level to be not shown in Toner when using newest OSM [Issue 11](https://github.com/Citytracking/toner/issues/11), [Issue 24](https://github.com/Citytracking/toner/issues/24), [Issue 7](https://github.com/Citytracking/toner/issues/7), [Issue 6](https://github.com/Citytracking/toner/issues/6), and [Issue 50](https://github.com/Citytracking/toner/issues/50).

## Map labels

* Added support for **international Unicode (UTF-8) labels** from OSM by re-authoring fonts. Primarily seen in street labels and park names. [Issue 30](https://github.com/Citytracking/toner/issues/30)

* **Removed map label overlap** by manually adjusting the Dymo output around other map features like bodies of waters, country labels, and state labels. [Issue 34](https://github.com/Citytracking/toner/issues/34), [Issue 35](https://github.com/Citytracking/toner/issues/35). Version 3 will address remaining occational placement funk and overlap of marine labels.

* Added in **more city labels** in zooms 9, 10, and 11 from Dymo [Issue 15](https://github.com/Citytracking/toner/issues/15), [Issue 1](https://github.com/Citytracking/toner/issues/1), [Issue 51](https://github.com/Citytracking/toner/issues/51), [Issue 29](https://github.com/Citytracking/toner/issues/51), [Issue 27](https://github.com/Citytracking/toner/issues/27)

* Added **new park labels progressively** per the zoom. [Issue 13](https://github.com/Citytracking/toner/issues/13), [Issue 42](https://github.com/Citytracking/toner/issues/42).

* **Easier to read street labels** at zooms 17+. [Issue 25](https://github.com/Citytracking/toner/issues/25)

## Clean-up

* **Parks** are now tucked under the water in the street-level maps. This is a OSM pecularity where some parks are mapped to the shoreline and others extend out into the water. As these are black-and-white maps, we take a shortcut by making a transparent pattern with the black stipples. When it's over the water, the black park is still drawn, but the water is also black so win-win. MapBox Streets uses a transparency on the polygon-color instead. [Issue 12](https://github.com/Citytracking/toner/issues/12)

* **Added reservoirs** to the "inland water" aka "lakes" symbolization. Removed smaller lakes at zoms 8 to 12. Since the water is solid black, these tiny lakes attracted undue attention. Instead, they are now progressively added on each zoom in. This reduces the visual noise in the map. [Issue 23](https://github.com/Citytracking/toner/issues/23), [Issue 45](https://github.com/Citytracking/toner/issues/45), [Issue 39](https://github.com/Citytracking/toner/issues/39)

* For **lake labels**, similar progressive approach but with a slight zoom delay. [Issue 44](https://github.com/Citytracking/toner/issues/44)

* Similar approach to **adding parks progressively**. Added full set of "green areas" in OSM, this captures cemeteries such as Arlington National Cemetary in Washington, DC. [Issue 42](https://github.com/Citytracking/toner/issues/42), [Issue 43](https://github.com/Citytracking/toner/issues/43), [Issue 45](https://github.com/Citytracking/toner/issues/45)

## Transportation

* Now uses **[High Roads](https://github.com/migurski/HighRoad)** for all OSM roads in the midzooms and street-level zooms. [Issue 9](https://github.com/Citytracking/toner/issues/9), [Issue 35](https://github.com/Citytracking/toner/issues/35)

* Now uses new Natural Earth 1.5 **global roads** in the world zooms. [Issue 2](https://github.com/Citytracking/toner/issues/2), [Issue 3](https://github.com/Citytracking/toner/issues/3) [Issue 5](https://github.com/Citytracking/toner/issues/5), and  [Issue 6](https://github.com/Citytracking/toner/issues/6), [Issue 52](https://github.com/Citytracking/toner/issues/52) Caveat, these are an early beta release from NE now.

* **Tunnel stret labels** are now grey to match their grey linework. [Issue 22](https://github.com/Citytracking/toner/issues/22)

* Where Tunnels pass under land, not just water, we introduce an additional grey outline as **visual trim**. [Issue 21](https://github.com/Citytracking/toner/issues/21), [Issue 49](https://github.com/Citytracking/toner/issues/49)

* Added **airports**! Symbolized and labeled using combination of [Mile High Club](http://github.com/nvkelso/mile-high-club/) and OSM. [Issue 41](https://github.com/Citytracking/toner/issues/41)

* Added **metro (subway) icons** at zooms 18 and 19, helpful for city wayfinding. [Issue 26](https://github.com/Citytracking/toner/issues/26)

## Setup

* Added data import scripts to PostGIS, still rough.

* Include explicate MML and MSS for the project, including label shapefiles, so it's immediately deployable [Issue 38](https://github.com/Citytracking/toner/issues/38), [Issue 37](https://github.com/Citytracking/toner/issues/37)

* Updated the Readme.md [Issue 36](https://github.com/Citytracking/toner/issues/36)

## &etc

A beta version of Toner v2 was released in late 2011. The final release mostly focuses on airport icons and making map labels more legibile (less overlap).

##Visual changelog for Toner 2012:

Toner v2 (2012 and 2011) uses [High Road](https://github.com/migurski/HighRoad) for more sophisticated roads and tucks San Francisco's punky park mohock under the water.

![Toner changes thru time](https://github.com/Citytracking/toner/raw/master/images/sf_mohack_high_roads.gif)

There is now a "lite" version that is less high contrast, better for printing out analog style or overlaying polygons client-side.

![Toner changes thru time](https://github.com/Citytracking/toner/raw/master/images/sf_toner_lite.gif)

We added reservoirs!

![Toner changes thru time](https://github.com/Citytracking/toner/raw/master/images/dc_md_va_reservoirs_roads_state_lines.gif)

And better about showing walking and biking paths thru the meadows and woods:

![Toner changes thru time](https://github.com/Citytracking/toner/raw/master/images/sf_reservoirs_roads.gif)

Back in the urban grid, we've added subways and building footprints to help wayfind:

![Toner changes thru time](https://github.com/Citytracking/toner/raw/master/images/nyc_subway_building_wayfinding.gif)

Speaking of buildings, big ones get added first, then all on the most detailed zooms:

![Toner changes thru time](https://github.com/Citytracking/toner/raw/master/images/dc_buildings_v2.gif)

We cleaned up labels so they don't overlap as much:

![Toner changes thru time](https://github.com/Citytracking/toner/raw/master/images/east_coast_label_overlap.gif)

And added city labels world wide:

![Toner changes thru time](https://github.com/Citytracking/toner/raw/master/images/london_paris_everywhere.gif)

And now draw kanji and other non-Latin scripts right:

![Toner changes thru time](https://github.com/Citytracking/toner/raw/master/images/tokyo_everywhere.gif)


# Toner 2011

_[Preview Toner 2011 »](http://tile.stamen.com/toner-2011/)._

Beta version of Toner v2. See above for details.


# Toner 2010

_[Preview Toner 2010 »](http://tile.stamen.com/toner-2010/)._

Initial release.

Dymo
====

Dymo is a placement script for map labels, isolated from the purpose-built code in
[GeoIQ’s Acetate](https://github.com/fortiusone/acetate). Dymo resolves positions for
densely-packed point labels, and results in layouts make your maps look like they’ve been
[touched by a cartographer](http://www.flickr.com/photos/mmigurski/5194528400/sizes/l/in/photostream/).

Dymo uses [Simulated Annealing](http://en.wikipedia.org/wiki/Simulated_annealing)
to derive an acceptable global label set, described in Steven Wouderberg’s
[October 2007 presentation](http://www.cs.uu.nl/docs/vakken/gd/steven2.pdf)
at Utrecht University. See an animation of the process over time in these two
videos of U.S. and European place names:

<p>
    <a href="http://vimeo.com/migurski/dymo-n-america"><img src="https://github.com/migurski/Dymo/raw/master/images/us-video-still.jpg" width="440" height="219">
    <a href="http://vimeo.com/migurski/dymo-europe"><img src="https://github.com/migurski/Dymo/raw/master/images/europe-video-still.jpg" width="440" height="219">
</p>

Using Dymo
----------

```dymo-label.py``` is a script that converts lists of cities with included font
information to GeoJSON point and label files suitable for use in geographic
rendering.

Place U.S. city labels at zoom 6 for two minutes:

    python dymo-label.py -z 6 --minutes 2 --labels-file labels.json --places-file points.json data/US-z6.csv.gz

Place U.S. city labels at zoom 5 over a 10000-iteration 10.0 - 0.01 temperature range:

    python dymo-label.py -z 5 --steps 10000 --max-temp 10 --min-temp 0.01 -l labels.json -p points.json data/US-z5.csv

Both examples will result in a pair of GeoJSON files, ```labels.json``` and
```points.json.``` The first will contain rectangular label areas, the second
will contain center points of places successfully positioned by Dymo. Because
labels will collide in different ways depending on map scale, labels must be
placed separately for each zoom level:

![U.S. Labels](http://farm5.static.flickr.com/4123/5413923643_be14a6b13b_b.jpg)

A trick for determining the right temperature range for a given data input is to
run ```dymo-label.py``` once for a short time, e.g. ```--minutes 0.1```, noting
the temperature ranges reported in the output. You can then vary the number of
steps up and down to arrive at a good-looking label set without waiting for the
first “Exploring temperature landscape” step each time.

Data Included
-------------

Look in ```data/``` for a list of zoom-by-zoom city locations, organized by
continent and selected by Justin O’Bierne. Data is distributed separately from
code, see [downloads](https://github.com/migurski/Dymo/downloads) for a link.

To prepare your own city lists or modify fonts and font sizes in input lists,
Use ```dymo-prepare-places.py``` to apply population-specific font choices to
an in-bound list:

    python dymo-prepare-places.py --font 0 fonts/Arial.ttf 10 --font 1000000 fonts/Arial.ttf 12 --zoom 5 data/North-America-all.txt.gz data/North-America-z5.txt

Sample Output
-------------

These sample images were created during the development of Acetate, and show
the results of town placement.

[Central Japan](http://www.flickr.com/photos/mmigurski/5194528400/):

![Central Japan](http://farm5.static.flickr.com/4148/5194528400_abf78d0c09_b.jpg)

[Western Europe](http://www.flickr.com/photos/mmigurski/5193928891/):

![Western Europe](http://farm5.static.flickr.com/4111/5193928891_25ae4e213c_b.jpg)

[Northen Appalachians](http://www.flickr.com/photos/mmigurski/5194532290/):

![Northen Appalachians](http://farm5.static.flickr.com/4092/5194532290_96776a8241_b.jpg)

Who
---

Copyright 2010-2011 Michal Migurski and GeoIQ, offered under the [BSD license](http://www.opensource.org/licenses/bsd-license.php). Uses Richard J. Wagner’s [Python annealing library](http://www-personal.umich.edu/~wagnerr/PythonAnneal.html).

We’re not affiliated with [Dymo Corporation](http://dymo.com).

Dymo
====

Dymo is a placement script for map labels, isolated from the purpose-built code in
[GeoIQ’s Acetate](https://github.com/fortiusone/acetate). Dymo resolves positions for
densely-packed point labels, and results in layouts make your maps look like they’ve been
[touched by a cartographer](http://www.flickr.com/photos/mmigurski/5194528400/sizes/l/in/photostream/).

Dymo uses [Simulated Annealing](http://en.wikipedia.org/wiki/Simulated_annealing)
to derive an acceptable global label set, described in Steven Wouderberg’s
[October 2007 presentation](http://www.cs.uu.nl/docs/vakken/gd/steven2.pdf)
at Utrecht University. See an animation of the process over time in these two
videos of U.S. and European place names:

<p>
    <a href="http://vimeo.com/migurski/dymo-n-america"><img src="https://github.com/migurski/Dymo/raw/master/images/us-video-still.jpg" width="440" height="219">
    <a href="http://vimeo.com/migurski/dymo-europe"><img src="https://github.com/migurski/Dymo/raw/master/images/europe-video-still.jpg" width="440" height="219">
</p>

Using Dymo
----------

```dymo-label.py``` is a script that converts lists of cities with included font
information to GeoJSON point and label files suitable for use in geographic
rendering.

Place U.S. city labels at zoom 6 for two minutes:

    python dymo-label.py -z 6 --minutes 2 --labels-file labels.json --places-file points.json data/US-z6.csv.gz

Place U.S. city labels at zoom 5 over a 10000-iteration 10.0 - 0.01 temperature range:

    python dymo-label.py -z 5 --steps 10000 --max-temp 10 --min-temp 0.01 -l labels.json -p points.json data/US-z5.csv

Both examples will result in a pair of GeoJSON files, ```labels.json``` and
```points.json.``` The first will contain rectangular label areas, the second
will contain center points of places successfully positioned by Dymo. Because
labels will collide in different ways depending on map scale, labels must be
placed separately for each zoom level:

![U.S. Labels](http://farm5.static.flickr.com/4123/5413923643_be14a6b13b_b.jpg)

A trick for determining the right temperature range for a given data input is to
run ```dymo-label.py``` once for a short time, e.g. ```--minutes 0.1```, noting
the temperature ranges reported in the output. You can then vary the number of
steps up and down to arrive at a good-looking label set without waiting for the
first “Exploring temperature landscape” step each time.

Data Included
-------------

Look in ```data/``` for a list of zoom-by-zoom city locations, organized by
continent and selected by Justin O’Bierne. Data is distributed separately from
code, see [downloads](https://github.com/migurski/Dymo/downloads) for a link.

To prepare your own city lists or modify fonts and font sizes in input lists,
Use ```dymo-prepare-places.py``` to apply population-specific font choices to
an in-bound list:

    python dymo-prepare-places.py --font 0 fonts/Arial.ttf 10 --font 1000000 fonts/Arial.ttf 12 --zoom 5 data/North-America-all.txt.gz data/North-America-z5.txt

Sample Output
-------------

These sample images were created during the development of Acetate, and show
the results of town placement.

[Central Japan](http://www.flickr.com/photos/mmigurski/5194528400/):

![Central Japan](http://farm5.static.flickr.com/4148/5194528400_abf78d0c09_b.jpg)

[Western Europe](http://www.flickr.com/photos/mmigurski/5193928891/):

![Western Europe](http://farm5.static.flickr.com/4111/5193928891_25ae4e213c_b.jpg)

[Northen Appalachians](http://www.flickr.com/photos/mmigurski/5194532290/):

![Northen Appalachians](http://farm5.static.flickr.com/4092/5194532290_96776a8241_b.jpg)

Who
---

Copyright 2010-2011 Michal Migurski and GeoIQ, offered under the [BSD license](http://www.opensource.org/licenses/bsd-license.php). Uses Richard J. Wagner’s [Python annealing library](http://www-personal.umich.edu/~wagnerr/PythonAnneal.html).

We’re not affiliated with [Dymo Corporation](http://dymo.com).

This is the place where are the non-database-y things required to generate the
"Toner" Mapnik stylesheets are kept.

The style.mml and related .mss files control the look and feel of the Toner 
cartography. These files are writen in a preprocessor language called Cascadenik. 
If you make changes to the stylesheets, you will need to convert this to the native
XML format that Mapnik supports to render the map tiles. Use the following command:

	make style.xml

Which is really just a shortcut for typing this:

	cascadenik-compile.py style.mml > style.xml

This will take your 'style.mml' and all the '.mss' files (the instructions that
define the look and feel of the Toner maps) and smush them together to create a
new file called 'style.xml'. This new file is what Mapnik uses to render maps.

There are also other Make commands for testing changes to the stylesheet by
generating images of cities all over the world at different zoom levels. To test
your Toner stylesheet for low (zoomed out) levels you would type:

	$> make low-zoom-world.html
	cascadenik-compile.py style.mml > style.xml
	python mapnik-render.py -f fonts -s style.xml -l 0 0 -z 1 -d 1024 600 -o low-zoom-world-1.png
	python mapnik-render.py -f fonts -s style.xml -l 0 0 -z 2 -d 1024 600 -o low-zoom-world-2.png
	python mapnik-render.py -f fonts -s style.xml -l 38 -90 -z 3 -d 1024 600 -o low-zoom-world-usa-3.png
	...and so on...

(If you're not sure what the "Make" program is, don't worry. It is a very old
tool that was written to automate a series of discrete tasks and give them
labels so that they can be invoked (repeated) with a minimum of fuss.

Toner comes in 3 flavors!
--

Option 1:
---
Normally we want to show the labels with the basemap. 

    The MML file would then read:
     
    <Stylesheet src="naturalearth-lowzooms.mss"/>
    <Stylesheet src="stylesheet.mss"/> 
    <Stylesheet src="labels.mss"/>
    <!-- 
          <Stylesheet src="labels_only.mss"/>  
    -->
     
Option 2: 
---
For map-only (no label) render
    
    The MML file would then read:
     
    <Stylesheet src="naturalearth-lowzooms.mss"/>
    <Stylesheet src="stylesheet.mss"/> 
    <!-- 
          <Stylesheet src="labels.mss"/>
          <Stylesheet src="labels_only.mss"/>  
    -->
     
Option 3:
---
For labels-only render, we want the map background to be transparent, not black.

    The MML file would then read:
         
    <!--  <Stylesheet src="naturalearth-lowzooms.mss"/>
          <Stylesheet src="stylesheet.mss"/> 
    -->
    <Stylesheet src="labels.mss"/>
    <Stylesheet src="labels_only.mss"/>

motorways.pgsql
--

This is a series of Postgres commands for creating a new table called
'planet_osm_motorways' derived from the 'planet_osm_line' table.

For example:

	psql -U osm planet_osm < motorways.pgsql

Remember: This means you will need to have finished setting up a local
planet_osm database before you do this.

Toner
=====

"Toner" is the name of the B+W (black and white) map tiles, and Mapnik stylesheets, used for the
Dotspotting project. Toner was designed by [Geraldine Sarmiento](http://stamen.com/studio/geraldine).

Examples
--

https://github.com/Citytracking/toner/tree/master/examples

How to use Toner
--

At the end of the day Toner generates a stylesheet that can be used by a program
called Mapnik to draw maps. Those maps might be a single large image for print
or a lot of small images for map tiles but as far as Mapnik is concerned there
is an image of a set size that covers a specific geographic area and a bunch of
rules (styles) for how to draw the stuff inside those boxes.

Toner relies on a tool called Cascadenik so that map styles can be defined using
a CSS-like syntax that is a little more friendly than the XML-based markup
language that Mapnik uses by default. With Cascadenik you define two kinds of
files: Things ending in '.mss' are where the actual look and feel for a map;
Things ending in '.mml' are where you define administrative bits like database
passwords and queries for things to show on the map.

This is the place where are the non-database-y things required to generate the
"Toner" Mapnik stylesheets are kept.

The style.mml and related .mss files control the look and feel of the Toner 
cartography. These files are writen in a preprocessor language called Cascadenik. 
If you make changes to the stylesheets, you will need to convert this to the native
XML format that Mapnik supports to render the map tiles. 

Use the following command (from inside the 'mapnik' directory):

	make style.xml

Which is really just a shortcut for typing this:

	cascadenik-compile.py style.mml > style.xml

This will take your 'style.mml' and all the '.mss' files (the things that define
the look and feel of the Toner maps) and smush them together to create a new
file called 'style.xml'. This new file is what Mapnik uses to render maps.

For example, once you've created your new 'style.xml' file you could use the
'nik2img' program that is included with Mapnik to render a map of the USA like
this:

	nik2img.py -b -126 24 -66 49 -s 900913 -d 1024 768 \
		--fonts=fonts/Arial.ttf,fonts/Arial\ Bold.ttf,fonts/Arial\ Italic.ttf \
		style.xml usa.png

A sample 'usa.png' rendering is included in the 'examples' directory.

If you wanted to use the TileStache server libraries to draw map tiles using
Mapnik, you would create a new layer (in your TileStache config file) like this:

	"toner": {
		"provider": {
			"name": "mapnik",
			"mapfile": "/path/to/mapnik/style.xml",
			"fonts": "/path/to/mapnik/fonts"
		},
		"projection": "spherical mercator",
		"metatile": { "rows": 4, "columns": 4 }
	}

Take a look in the 'tilestache' directory for more details about using the
Toner stylesheets with TileStache.


Make map sandwitches
--

* **More Toner flavors**: Introduces specific flavors of Toner optimized for [map sandwiches](http://blogs.esri.com/esri/arcgis/2009/07/13/the-map-sandwich/), easy to integrating with and promoting your custom map stories: toner-standard ([toner](tilefarm.stamen.com/toner-2012)), toner-hybrid-with-labels ([toner-hybrid](tilefarm.stamen.com/toner-hybrid-with-labels)), toner-hybrid-only-lines ([toner-lines](tilefarm.stamen.com/toner-lines)), toner-hybrid-only-labels ([toner-labels](tilefarm.stamen.com/toner-labels)), toner-no-labels ([toner-background](tilefarm.stamen.com/toner-no-labels)).

Dependencies
--

The short version is: There are a lot.

The long version is: The gritty details of installing some of the tools that
Toner uses are outside the scope of this document. We've tried to give you the
shape of what you need to do and linked to the available documentation elsewhere.

Software Dependencies (required)
--

* A PostGIS database (http://postgis.refractions.net/)

* The osm2pgsql application for importing OpenStreetMap in to PostGIS (http://wiki.openstreetmap.org/wiki/Osm2pgsql)

* Python 2.6 or higher (http://www.python.org/)

* The GDAL libraries and utlities (http://www.gdal.org/)

* Mapnik and the Mapnik Python bindings (http://mapnik.org/)

* The ModestMaps Python libraries (http://pypi.python.org/pypi/ModestMaps/)

* The Cascadenik Python libraries (http://pypi.python.org/pypi/cascadenik/)

Software Dependencies (optional)
--

* The TileStache Python libraries (http://pypi.python.org/pypi/TileStache/)

* The gunicorn WSGI web server framework (http://www.gunicorn.org/)

* The pyproj Python libraries, required for using using the 'mapnik-render.py' script (http://pypi.python.org/pypi/pyproj)

* The Python Imaging Libraries, required for using the 'mapnik-render.py' script (http://pypi.python.org/pypi/PIL/)

Data Dependencies (required)
--

* PostGIS database tables for OpenStreetMap in EPSG:900913 (http://wiki.openstreetmap.org/wiki/PostGIS/)

* PostGIS database tables for the OpenStreetMap coastline in EPSG 90091 (http://tile.openstreetmap.org/processed_p.tar.bz2)

* PostGIS database tables for Natural Earth in EPSG:900913 (http://www.naturalearthdata.com/)

* NEW! PostGIS database tables for beta 1.5 Natural Earth roads in EPSG:900913 (included here). Use the included import script.

* NEW! PostGIS database tables for City labels and townspots in EPSG:900913 (included here). Use the included import script.


Database Tables
--

The Toner stylesheets need access to a pair of PostGIS databases:

* A database containing PlanetOSM data (as created by the osm2pgsql script) and
  coastline using the spherical mercator projection (EPSG:900913). See below for
  details.

* A database containing NaturalEarth data, as created by the shp2pgsql script
  (this is installed with PostGIS), using the spherical mercator projection
  (EPSG:900913). See below for details.

OpenStreetMap (OSM)
--

OSM publishes freely available downloads of their entire dataset at
http://planet.openstreetmap.org. Instructions for installing and setting up OSM
are outside the scope of this document but the OSM site has thorough
documentation available at: http://wiki.openstreetmap.org/wiki/PostGIS

If you don't want to install the entire OSM planet database but want to render
tiles for a smaller area you can also use the MirrorOSM tile provider in
TileStache to retrieve and store OSM data in PostGIS. Details are available over
here:

http://www.tilestache.org/doc/TileStache.Goodies.Providers.MirrorOSM.html

You will also need to add a copy of the OSM coastline to your planet_osm
database. The OSM coastline is distributed as a shapefile that you will need to
import using the 'shp2pgsql' program:

http://tile.openstreetmap.org/processed_p.tar.bz2

OSM-related
--

Toner uses a table containing OSM-derived data called
'planet_osm_motorways'. There's a handy PGSQL script called 'motorways.pgsql' in
the 'osm' table that you can run (once you've set up your planet_osm tables) to
create the new table.

Natural Earth
--

NaturalEarth is a public domain map dataset of various cultural and vector
datasets. It is available for download at: http://www.naturalearthdata.com/

Toner uses many, but not all of the datasets in NaturalEarth so the easiest
thing is just to grab the shapefiles we use as a single compressed file over
here:

http://citytracking.s3.amazonaws.com/toner/toner-naturalearth-1.1-epsg900913.zip

This file contains the 13 NaturalEarth datasets Toner uses as shapefiles
projected using EPGS:900913 (sometimes known as "spherical mercator" which
really just means "good for making map tiles"). They also correct a known issue
with the NaturalEarth shapefiles where polygons crossing the 180° meridian start
to behave badly.

You will still need to use the 'shp2pgsql' program to import them in to your
PostGIS database.

If you want to install of all NaturalEarth from scratch there are a few things
you should be aware of first.

The various datasets are available as separate downloads but here's a simple
shell script that will download them all, one at a time:

https://github.com/straup/naturalearth-tools/blob/master/fetchall-vector.sh

NaturalEarth is distributed using the WGS84 map projection so you will need to
reproject all the various shapefiles (in to the spherical mercator projection)
before importing them in to your database.

Here's another simple shell script that wraps up the entire process of
converting the NaturalEarth shapefiles and then importing them in to a PostGIS
database. It assumes that you have installed all the dependencies listed above:

https://github.com/straup/naturalearth-tools/blob/master/shp2pgmerc.sh

Included data
--

https://github.com/citytracking/toner/blob/master/import_included_map_data_to_postgis.sh

We've prepped city labels with [Dymo](https://github.com/migurski/dymo) at several
zoom levels so you don't have to (it takes weeks). The resulting shapefiles (SHP and
related extensions) should be imported into PostGIS for optimal performance and we 
include a script for that. The MML file assumes this step has been accomplished.

Also included are a dump of beta 1.5 Natural Earth roads for the mid-zooms. The import
script pushes those into PostGIS, too.

Other Stuff
--

https://github.com/straup/postgis-tools

These are mostly just a bunch of vanilla shell scripts that handle the multi-step
process of setting up a PostGIS database.

Toner is really just a big Mapnik file and there are a varierty of tools for
generating and serving map tiles available. We like to serve tiles using
TileStache (http://tilestache.org/).

Here's an example of how to run a bare-bones TileStache server (on port 8080)
from the command-line:

	tilestache-server.py -c tilestache.cfg

Here's an example of how to run TileStache (on port 4110 or port 81) under gunicorn:

    gunicorn -b 192.168.1.5:4110 "TileStache:WSGITileServer('tilestache.cfg')"
    
Or more complicated:

	/usr/local/bin/gunicorn -n tilespotting -w 4 -u www-data -k egg:gunicorn#gevent_wsgi -b localhost:81 -D "TileStache:WSGITileServer('tilestache.cfg')"

There's also an example init.d script in the gunicorn directory that will make
sure gunicorn + tilestache are started automatically when you (re)boot your
server.

