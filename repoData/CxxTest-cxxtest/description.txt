Tests if the 'default environment' defaults are sane and work out of the box.
by: Gašper Ažman

Tests if cxxtest behaves correctly if no sources are given.
by: Gašper Ažman

Tests whether expanding '#' to the top-level directory works as intended in
scons.
by: Gašper Ažman

Tests whether we can swallow file nodes as sources as well as strings.
by: Gašper Ažman

Test for various things cxxtest failed to do, but now does.
by: Edmundo López B.

Tests:
  - if CXXTEST_CXXFLAGS_REMOVE and CXXTEST_CCFLAGS_REMOVE flags work,
  - if CCFLAGS and CXXFLAGS vars work.

This test tests whether variables that are put into the environment after it has
been initialised work as expected.

If they do not, -pedantic-errors will appear in the gcc commandline and the
compilation WILL FAIL, failing the test.

Tests whether we can swallow recursively supplied sources - a list of lists, for
instance.

/*
-------------------------------------------------------------------------
 CxxTest: A lightweight C++ unit testing library.
 Copyright (c) 2008 Sandia Corporation.
 This software is distributed under the LGPL License v3
 For more information, see the COPYING file in the top CxxTest directory.
 Under the terms of Contract DE-AC04-94AL85000 with Sandia Corporation,
 the U.S. Government retains certain rights in this software.
-------------------------------------------------------------------------
*/

#ifndef __cxxtest__Descriptions_cpp__
#define __cxxtest__Descriptions_cpp__

#include <cxxtest/Descriptions.h>

namespace CxxTest
{
TestDescription::~TestDescription() {}
SuiteDescription::~SuiteDescription() {}
WorldDescription::~WorldDescription() {}

//
// Convert total tests to string
//
#ifndef _CXXTEST_FACTOR
char *WorldDescription::strTotalTests(char *s) const
{
    numberToString(numTotalTests(), s);
    return s;
}
#else // _CXXTEST_FACTOR
char *WorldDescription::strTotalTests(char *s) const
{
    char *p = numberToString(numTotalTests(), s);

    if (numTotalTests() <= 1)
    {
        return s;
    }

    unsigned n = numTotalTests();
    unsigned numFactors = 0;

    for (unsigned factor = 2; (factor * factor) <= n; factor += (factor == 2) ? 1 : 2)
    {
        unsigned power;

        for (power = 0; (n % factor) == 0; n /= factor)
        {
            ++ power;
        }

        if (!power)
        {
            continue;
        }

        p = numberToString(factor, copyString(p, (numFactors == 0) ? " = " : " * "));
        if (power > 1)
        {
            p = numberToString(power, copyString(p, "^"));
        }
        ++ numFactors;
    }

    if (n > 1)
    {
        if (!numFactors)
        {
            copyString(p, tracker().failedTests() ? " :(" : tracker().warnings() ? " :|" : " :)");
        }
        else
        {
            numberToString(n, copyString(p, " * "));
        }
    }
    return s;
}
#endif // _CXXTEST_FACTOR
}

#endif // __cxxtest__Descriptions_cpp__

/*
-------------------------------------------------------------------------
 CxxTest: A lightweight C++ unit testing library.
 Copyright (c) 2008 Sandia Corporation.
 This software is distributed under the LGPL License v3
 For more information, see the COPYING file in the top CxxTest directory.
 Under the terms of Contract DE-AC04-94AL85000 with Sandia Corporation,
 the U.S. Government retains certain rights in this software.
-------------------------------------------------------------------------
*/

#ifndef __cxxtest__Descriptions_h__
#define __cxxtest__Descriptions_h__

//
// TestDescription, SuiteDescription and WorldDescription
// hold information about tests so they can be run and reported.
//

#include <cxxtest/LinkedList.h>

namespace CxxTest
{
class TestSuite;

class TestDescription : public Link
{
public:
    virtual ~TestDescription();

    virtual const char *file() const = 0;
    virtual int line() const = 0;
    virtual const char *testName() const = 0;
    virtual const char *suiteName() const = 0;

    virtual void run() = 0;
    virtual bool setUp() = 0;
    virtual bool tearDown() = 0;

    virtual const TestDescription *next() const = 0;
    virtual TestDescription *next() = 0;
};

class SuiteDescription : public Link
{
public:
    virtual ~SuiteDescription();

    virtual const char *file() const = 0;
    virtual int line() const = 0;
    virtual const char *suiteName() const = 0;
    virtual TestSuite *suite() const = 0;

    virtual unsigned numTests() const = 0;
    virtual const TestDescription &testDescription(unsigned /*i*/) const = 0;

    virtual TestDescription *firstTest() = 0;
    virtual const TestDescription *firstTest() const = 0;
    virtual SuiteDescription *next() = 0;
    virtual const SuiteDescription *next() const = 0;

    virtual void activateAllTests() = 0;
    virtual bool leaveOnly(const char * /*testName*/) = 0;

    virtual bool setUp() = 0;
    virtual bool tearDown() = 0;
};

class WorldDescription : public Link
{
public:
    virtual ~WorldDescription();

    virtual const char *worldName() const { return "cxxtest"; }
    virtual unsigned numSuites(void) const = 0;
    virtual unsigned numTotalTests(void) const = 0;
    virtual const SuiteDescription &suiteDescription(unsigned /*i*/) const = 0;

    enum { MAX_STRLEN_TOTAL_TESTS = 32 };
    char *strTotalTests(char * /*buffer*/) const;

    virtual SuiteDescription *firstSuite() = 0;
    virtual const SuiteDescription *firstSuite() const = 0;

    virtual void activateAllTests() = 0;
    virtual bool leaveOnly(const char * /*suiteName*/, const char * /*testName*/ = 0) = 0;
};
}

#endif // __cxxtest__Descriptions_h__


/*
-------------------------------------------------------------------------
 CxxTest: A lightweight C++ unit testing library.
 Copyright (c) 2008 Sandia Corporation.
 This software is distributed under the LGPL License v3
 For more information, see the COPYING file in the top CxxTest directory.
 Under the terms of Contract DE-AC04-94AL85000 with Sandia Corporation,
 the U.S. Government retains certain rights in this software.
-------------------------------------------------------------------------
*/

#include <cxxtest/DummyDescriptions.h>

namespace CxxTest
{
DummyTestDescription::DummyTestDescription() {}

const char *DummyTestDescription::file() const { return "<no file>"; }
int DummyTestDescription::line() const { return 0; }
const char *DummyTestDescription::testName() const { return "<no test>"; }
const char *DummyTestDescription::suiteName() const { return "<no suite>"; }
bool DummyTestDescription::setUp() { return true;}
void DummyTestDescription::run() {}
bool DummyTestDescription::tearDown() { return true;}

TestDescription *DummyTestDescription::next() { return 0; }
const TestDescription *DummyTestDescription::next() const { return 0; }

DummySuiteDescription::DummySuiteDescription() : _test() {}

const char *DummySuiteDescription::file() const { return "<no file>"; }
int DummySuiteDescription::line() const { return 0; }
const char *DummySuiteDescription::suiteName() const { return "<no suite>"; }
TestSuite *DummySuiteDescription::suite() const { return 0; }
unsigned DummySuiteDescription::numTests() const { return 0; }
const TestDescription &DummySuiteDescription::testDescription(unsigned) const { return _test; }
SuiteDescription *DummySuiteDescription::next() { return 0; }
TestDescription *DummySuiteDescription::firstTest() { return 0; }
const SuiteDescription *DummySuiteDescription::next() const { return 0; }
const TestDescription *DummySuiteDescription::firstTest() const { return 0; }
void DummySuiteDescription::activateAllTests() {}
bool DummySuiteDescription::leaveOnly(const char * /*testName*/) { return false; }

bool DummySuiteDescription::setUp() { return true;}
bool DummySuiteDescription::tearDown() { return true;}

DummyWorldDescription::DummyWorldDescription() : _suite() {}

unsigned DummyWorldDescription::numSuites(void) const { return 0; }
unsigned DummyWorldDescription::numTotalTests(void) const { return 0; }
const SuiteDescription &DummyWorldDescription::suiteDescription(unsigned) const { return _suite; }
SuiteDescription *DummyWorldDescription::firstSuite() { return 0; }
const SuiteDescription *DummyWorldDescription::firstSuite() const { return 0; }
void DummyWorldDescription::activateAllTests() {}
bool DummyWorldDescription::leaveOnly(const char * /*suiteName*/, const char * /*testName*/) { return false; }

bool DummyWorldDescription::setUp() { return true;}
bool DummyWorldDescription::tearDown() { return true;}
}


/*
-------------------------------------------------------------------------
 CxxTest: A lightweight C++ unit testing library.
 Copyright (c) 2008 Sandia Corporation.
 This software is distributed under the LGPL License v3
 For more information, see the COPYING file in the top CxxTest directory.
 Under the terms of Contract DE-AC04-94AL85000 with Sandia Corporation,
 the U.S. Government retains certain rights in this software.
-------------------------------------------------------------------------
*/

#ifndef __cxxtest__DummyDescriptions_h__
#define __cxxtest__DummyDescriptions_h__

//
// DummyTestDescription, DummySuiteDescription and DummyWorldDescription
//

#include <cxxtest/Descriptions.h>

namespace CxxTest
{
class DummyTestDescription : public TestDescription
{
public:
    DummyTestDescription();

    const char *file() const;
    int line() const;
    const char *testName() const;
    const char *suiteName() const;
    bool setUp();
    void run();
    bool tearDown();

    TestDescription *next();
    const TestDescription *next() const;
};

class DummySuiteDescription : public SuiteDescription
{
public:
    DummySuiteDescription();

    const char *file() const;
    int line() const;
    const char *suiteName() const;
    TestSuite *suite() const;
    unsigned numTests() const;
    const TestDescription &testDescription(unsigned) const;
    SuiteDescription *next();
    TestDescription *firstTest();
    const SuiteDescription *next() const;
    const TestDescription *firstTest() const;
    void activateAllTests();
    bool leaveOnly(const char * /*testName*/);

    bool setUp();
    bool tearDown();

private:
    DummyTestDescription _test;
};

class DummyWorldDescription : public WorldDescription
{
public:
    DummyWorldDescription();

    unsigned numSuites(void) const;
    unsigned numTotalTests(void) const;
    const SuiteDescription &suiteDescription(unsigned) const;
    SuiteDescription *firstSuite();
    const SuiteDescription *firstSuite() const;
    void activateAllTests();
    bool leaveOnly(const char * /*suiteName*/, const char * /*testName*/ = 0);

    bool setUp();
    bool tearDown();

private:
    DummySuiteDescription _suite;
};
}

#endif // __cxxtest__DummyDescriptions_h__


/*
-------------------------------------------------------------------------
 CxxTest: A lightweight C++ unit testing library.
 Copyright (c) 2008 Sandia Corporation.
 This software is distributed under the LGPL License v3
 For more information, see the COPYING file in the top CxxTest directory.
 Under the terms of Contract DE-AC04-94AL85000 with Sandia Corporation,
 the U.S. Government retains certain rights in this software.
-------------------------------------------------------------------------
*/

#ifndef __cxxtest__RealDescriptions_cpp__
#define __cxxtest__RealDescriptions_cpp__

//
// NOTE: If an error occur during world construction/deletion, CxxTest cannot
//       know where the error originated.
//

#include <cxxtest/RealDescriptions.h>

namespace CxxTest
{
RealTestDescription::RealTestDescription()
{
}

RealTestDescription::RealTestDescription(List &argList,
        SuiteDescription &argSuite,
        unsigned argLine,
        const char *argTestName)
{
    initialize(argList, argSuite, argLine, argTestName);
}

void RealTestDescription::initialize(List &argList,
                                     SuiteDescription &argSuite,
                                     unsigned argLine,
                                     const char *argTestName)
{
    _suite = &argSuite;
    _line = argLine;
    _testName = argTestName;
    attach(argList);
}

bool RealTestDescription::setUp()
{
    if (!suite())
    {
        return false;
    }

    for (GlobalFixture *gf = GlobalFixture::firstGlobalFixture(); gf != 0; gf = gf->nextGlobalFixture())
    {
        bool ok;
        _TS_TRY { ok = gf->setUp(); }
        _TS_LAST_CATCH( { ok = false; });

        if (!ok)
        {
            doFailTest(file(), line(), "Error in GlobalFixture::setUp()");
            return false;
        }
    }

    _TS_TRY
    {
        bool ok = false;
        _TSM_ASSERT_THROWS_NOTHING(file(), line(), "Exception thrown from setUp()", suite()->setUp(); ok = true);
        if (ok == false) { return ok; }
    }
    _TS_CATCH_ABORT( { return false; })
    _TS_CATCH_SKIPPED( { return false; });

    return true;
}

bool RealTestDescription::tearDown()
{
    if (!suite())
    {
        return false;
    }

    _TS_TRY
    {
        _TSM_ASSERT_THROWS_NOTHING(file(), line(), "Exception thrown from tearDown()", suite()->tearDown());
    }
    _TS_CATCH_ABORT( { return false; })
    _TS_CATCH_SKIPPED( { return false; });

    for (GlobalFixture *gf = GlobalFixture::lastGlobalFixture(); gf != 0; gf = gf->prevGlobalFixture())
    {
        bool ok;
        _TS_TRY { ok = gf->tearDown(); }
        _TS_LAST_CATCH( { ok = false; });

        if (!ok)
        {
            doFailTest(file(), line(), "Error in GlobalFixture::tearDown()");
            return false;
        }
    }

    return true;
}

const char *RealTestDescription::file() const { return _suite->file(); }
int RealTestDescription::line() const { return _line; }
const char *RealTestDescription::testName() const { return _testName; }
const char *RealTestDescription::suiteName() const { return _suite->suiteName(); }

TestDescription *RealTestDescription::next() { return (RealTestDescription *)Link::next(); }
const TestDescription *RealTestDescription::next() const { return (const RealTestDescription *)Link::next(); }

TestSuite *RealTestDescription::suite() const { return _suite->suite(); }

void RealTestDescription::run()
{
    _TS_TRY { runTest(); }
    _TS_CATCH_ABORT( {})
    _TS_CATCH_SKIPPED( {})
    ___TSM_CATCH(file(), line(), "Exception thrown from test");
}

RealSuiteDescription::RealSuiteDescription() {}
RealSuiteDescription::RealSuiteDescription(const char *argFile,
        unsigned argLine,
        const char *argSuiteName,
        List &argTests)
{
    initialize(argFile, argLine, argSuiteName, argTests);
}

void RealSuiteDescription::initialize(const char *argFile,
                                      unsigned argLine,
                                      const char *argSuiteName,
                                      List &argTests)
{
    _file = argFile;
    _line = argLine;
    _suiteName = argSuiteName;
    _tests = &argTests;

    attach(_suites);
}

const char *RealSuiteDescription::file() const { return _file; }
int RealSuiteDescription::line() const { return _line; }
const char *RealSuiteDescription::suiteName() const { return _suiteName; }

TestDescription *RealSuiteDescription::firstTest() { return (RealTestDescription *)_tests->head(); }
const TestDescription *RealSuiteDescription::firstTest() const { return (const RealTestDescription *)_tests->head(); }
SuiteDescription *RealSuiteDescription::next() { return (RealSuiteDescription *)Link::next(); }
const SuiteDescription *RealSuiteDescription::next() const { return (const RealSuiteDescription *)Link::next(); }

unsigned RealSuiteDescription::numTests() const { return _tests->size(); }

const TestDescription &RealSuiteDescription::testDescription(unsigned i) const
{
    return *(RealTestDescription *)_tests->nth(i);
}

void RealSuiteDescription::activateAllTests()
{
    _tests->activateAll();
}

bool RealSuiteDescription::leaveOnly(const char *testName)
{
    for (TestDescription *td = firstTest(); td != 0; td = td->next())
    {
        if (stringsEqual(td->testName(), testName))
        {
            _tests->leaveOnly(*td);
            return true;
        }
    }
    return false;
}

StaticSuiteDescription::StaticSuiteDescription() {}
StaticSuiteDescription::StaticSuiteDescription(const char *argFile, unsigned argLine,
        const char *argSuiteName, TestSuite &argSuite,
        List &argTests) :
    RealSuiteDescription(argFile, argLine, argSuiteName, argTests)
{
    doInitialize(argSuite);
}

void StaticSuiteDescription::initialize(const char *argFile, unsigned argLine,
                                        const char *argSuiteName, TestSuite &argSuite,
                                        List &argTests)
{
    RealSuiteDescription::initialize(argFile, argLine, argSuiteName, argTests);
    doInitialize(argSuite);
}

void StaticSuiteDescription::doInitialize(TestSuite &argSuite)
{
    _suite = &argSuite;
}

TestSuite *StaticSuiteDescription::suite() const
{
    return _suite;
}

bool StaticSuiteDescription::setUp() { return true; }
bool StaticSuiteDescription::tearDown() { return true; }

CommonDynamicSuiteDescription::CommonDynamicSuiteDescription() {}
CommonDynamicSuiteDescription::CommonDynamicSuiteDescription(const char *argFile, unsigned argLine,
        const char *argSuiteName, List &argTests,
        unsigned argCreateLine, unsigned argDestroyLine) :
    RealSuiteDescription(argFile, argLine, argSuiteName, argTests)
{
    doInitialize(argCreateLine, argDestroyLine);
}

void CommonDynamicSuiteDescription::initialize(const char *argFile, unsigned argLine,
        const char *argSuiteName, List &argTests,
        unsigned argCreateLine, unsigned argDestroyLine)
{
    RealSuiteDescription::initialize(argFile, argLine, argSuiteName, argTests);
    doInitialize(argCreateLine, argDestroyLine);
}

void CommonDynamicSuiteDescription::doInitialize(unsigned argCreateLine, unsigned argDestroyLine)
{
    _createLine = argCreateLine;
    _destroyLine = argDestroyLine;
}

List &RealWorldDescription::suites()
{
    return RealSuiteDescription::_suites;
}

unsigned RealWorldDescription::numSuites(void) const
{
    return suites().size();
}

unsigned RealWorldDescription::numTotalTests(void) const
{
    unsigned count = 0;
    for (const SuiteDescription *sd = firstSuite(); sd != 0; sd = sd->next())
    {
        count += sd->numTests();
    }
    return count;
}

SuiteDescription *RealWorldDescription::firstSuite()
{
    return (RealSuiteDescription *)suites().head();
}

const SuiteDescription *RealWorldDescription::firstSuite() const
{
    return (const RealSuiteDescription *)suites().head();
}

const SuiteDescription &RealWorldDescription::suiteDescription(unsigned i) const
{
    return *(const RealSuiteDescription *)suites().nth(i);
}

void RealWorldDescription::activateAllTests()
{
    suites().activateAll();
    for (SuiteDescription *sd = firstSuite(); sd != 0; sd = sd->next())
    {
        sd->activateAllTests();
    }
}

bool RealWorldDescription::leaveOnly(const char *suiteName, const char *testName)
{
    for (SuiteDescription *sd = firstSuite(); sd != 0; sd = sd->next())
    {
        if (stringsEqual(sd->suiteName(), suiteName))
        {
            if (testName)
            {
                if (!sd->leaveOnly(testName))
                {
                    return false;
                }
            }
            suites().leaveOnly(*sd);
            return true;
        }
    }
    return false;
}

bool RealWorldDescription::setUp()
{
    for (GlobalFixture *gf = GlobalFixture::firstGlobalFixture(); gf != 0; gf = gf->nextGlobalFixture())
    {
        bool ok;
        _TS_TRY
        {
            ok = gf->setUpWorld();
            if (tracker().testFailed())
            {
                tracker().initialize();
                ok = false;
            }
        }
        _TS_LAST_CATCH( { ok = false; });

        if (!ok)
        {
            reportError("Error setting up world");
            return false;
        }
    }

    return true;
}

bool RealWorldDescription::tearDown()
{
    for (GlobalFixture *gf = GlobalFixture::lastGlobalFixture(); gf != 0; gf = gf->prevGlobalFixture())
    {
        bool ok;
        _TS_TRY { ok = gf->tearDownWorld(); }
        _TS_LAST_CATCH( { ok = false; });

        if (!ok)
        {
            reportError("Error tearing down world");
            return false;
        }
    }

    return true;
}

void RealWorldDescription::reportError(const char *message)
{
    doWarn(__FILE__, 5, message);
}

void activateAllTests()
{
    RealWorldDescription().activateAllTests();
}

bool leaveOnly(const char *suiteName, const char *testName)
{
    return RealWorldDescription().leaveOnly(suiteName, testName);
}
}

#endif // __cxxtest__RealDescriptions_cpp__


/*
-------------------------------------------------------------------------
 CxxTest: A lightweight C++ unit testing library.
 Copyright (c) 2008 Sandia Corporation.
 This software is distributed under the LGPL License v3
 For more information, see the COPYING file in the top CxxTest directory.
 Under the terms of Contract DE-AC04-94AL85000 with Sandia Corporation,
 the U.S. Government retains certain rights in this software.
-------------------------------------------------------------------------
*/

#ifndef __cxxtest__RealDescriptions_h__
#define __cxxtest__RealDescriptions_h__

//
// The "real" description classes
//

#include <cxxtest/Descriptions.h>
#include <cxxtest/TestSuite.h>
#include <cxxtest/GlobalFixture.h>

namespace CxxTest
{
class RealTestDescription : public TestDescription
{
public:
    RealTestDescription();
    RealTestDescription(List &argList, SuiteDescription &argSuite, unsigned argLine, const char *argTestName);
    void initialize(List &argList, SuiteDescription &argSuite, unsigned argLine, const char *argTestName);

    const char *file() const;
    int line() const;
    const char *testName() const;
    const char *suiteName() const;

    TestDescription *next();
    const TestDescription *next() const;

    TestSuite *suite() const;

    bool setUp();
    void run();
    bool tearDown();

private:
    RealTestDescription(const RealTestDescription &);
    RealTestDescription &operator=(const RealTestDescription &);

    virtual void runTest() = 0;

    SuiteDescription *_suite;
    int _line;
    const char *_testName;
};

class RealSuiteDescription : public SuiteDescription
{
public:
    RealSuiteDescription();
    RealSuiteDescription(const char *argFile, unsigned argLine, const char *argSuiteName, List &argTests);

    void initialize(const char *argFile, unsigned argLine, const char *argSuiteName, List &argTests);

    const char *file() const;
    int line() const;
    const char *suiteName() const;

    TestDescription *firstTest();
    const TestDescription *firstTest() const;
    SuiteDescription *next();
    const SuiteDescription *next() const;

    unsigned numTests() const;
    const TestDescription &testDescription(unsigned i) const;

    void activateAllTests();
    bool leaveOnly(const char *testName);

private:
    RealSuiteDescription(const RealSuiteDescription &);
    RealSuiteDescription &operator=(const RealSuiteDescription &);

    const char *_file;
    int _line;
    const char *_suiteName;
    List *_tests;

    static List _suites;
    friend class RealWorldDescription;
};

class StaticSuiteDescription : public RealSuiteDescription
{
public:
    StaticSuiteDescription();
    StaticSuiteDescription(const char *argFile, unsigned argLine,
                           const char *argSuiteName, TestSuite &argSuite,
                           List &argTests);

    void initialize(const char *argFile, unsigned argLine,
                    const char *argSuiteName, TestSuite &argSuite,
                    List &argTests);
    TestSuite *suite() const;

    bool setUp();
    bool tearDown();

private:
    StaticSuiteDescription(const StaticSuiteDescription &);
    StaticSuiteDescription &operator=(const StaticSuiteDescription &);

    void doInitialize(TestSuite &argSuite);

    TestSuite *_suite;
};

class CommonDynamicSuiteDescription : public RealSuiteDescription
{
public:
    CommonDynamicSuiteDescription();
    CommonDynamicSuiteDescription(const char *argFile, unsigned argLine,
                                  const char *argSuiteName, List &argTests,
                                  unsigned argCreateLine, unsigned argDestroyLine);

    void initialize(const char *argFile, unsigned argLine,
                    const char *argSuiteName, List &argTests,
                    unsigned argCreateLine, unsigned argDestroyLine);

protected:
    unsigned _createLine, _destroyLine;

private:
    void doInitialize(unsigned argCreateLine, unsigned argDestroyLine);
};

template<class S>
class DynamicSuiteDescription : public CommonDynamicSuiteDescription
{
public:
    DynamicSuiteDescription() {}
    DynamicSuiteDescription(const char *argFile, unsigned argLine,
                            const char *argSuiteName, List &argTests,
                            S *&argSuite, unsigned argCreateLine,
                            unsigned argDestroyLine) :
        CommonDynamicSuiteDescription(argFile, argLine, argSuiteName, argTests, argCreateLine, argDestroyLine)
    {
        _suite = &argSuite;
    }

    void initialize(const char *argFile, unsigned argLine,
                    const char *argSuiteName, List &argTests,
                    S *&argSuite, unsigned argCreateLine,
                    unsigned argDestroyLine)
    {
        CommonDynamicSuiteDescription::initialize(argFile, argLine,
                argSuiteName, argTests,
                argCreateLine, argDestroyLine);
        _suite = &argSuite;
    }

    TestSuite *suite() const { return realSuite(); }

    bool setUp();
    bool tearDown();

private:
    S *realSuite() const { return *_suite; }
    void setSuite(S *s) { *_suite = s; }

    void createSuite()
    {
        setSuite(S::createSuite());
    }

    void destroySuite()
    {
        S *s = realSuite();
        setSuite(0);
        S::destroySuite(s);
    }

    S **_suite;
};

template<class S>
bool DynamicSuiteDescription<S>::setUp()
{
    _TS_TRY
    {
        _TSM_ASSERT_THROWS_NOTHING(file(), _createLine, "Exception thrown from createSuite()", createSuite());
        _TSM_ASSERT(file(), _createLine, "createSuite() failed", suite() != 0);
    }
    _TS_CATCH_ABORT( { return false; })
    _TS_CATCH_SKIPPED( { return false; });

    return (suite() != 0);
}

template<class S>
bool DynamicSuiteDescription<S>::tearDown()
{
    if (!_suite)
    {
        return true;
    }

    _TS_TRY
    {
        _TSM_ASSERT_THROWS_NOTHING(file(), _destroyLine, "destroySuite() failed", destroySuite());
    }
    _TS_CATCH_ABORT( { return false; })
    _TS_CATCH_SKIPPED( { return false; });

    return true;
}

class RealWorldDescription : public WorldDescription
{
public:
    static List &suites();
    const char *worldName() const { return _worldName;}
    unsigned numSuites(void) const;
    unsigned numTotalTests(void) const;
    SuiteDescription *firstSuite();
    const SuiteDescription *firstSuite() const;
    const SuiteDescription &suiteDescription(unsigned i) const;
    void activateAllTests();
    bool leaveOnly(const char *suiteName, const char *testName = 0);

    bool setUp();
    bool tearDown();
    static void reportError(const char *message);

    static const char *_worldName;
};

void activateAllTests();
bool leaveOnly(const char *suiteName, const char *testName = 0);
}

#endif // __cxxtest__RealDescriptions_h__


----------------------------------------------------------------------
              README file for the DocBook XSL Stylesheets
----------------------------------------------------------------------

These are XSL stylesheets for transforming DocBook XML document
instances into .epub format.

.epub is an open standard of the The International Digital Publishing Forum (IDPF), 
a the trade and standards association for the digital publishing industry. 

An alpha-quality reference implementation (dbtoepub) for a DocBook to .epub 
converter (written in Ruby) is available under bin/. 

From http://idpf.org
  What is EPUB, .epub, OPS/OCF & OEB?

  ".epub" is the file extension of an XML format for reflowable digital 
  books and publications.  ".epub" is composed of three open standards, 
  the Open Publication Structure (OPS), Open Packaging Format (OPF) and 
  Open Container Format (OCF), produced by the IDPF. "EPUB" allows 
  publishers to produce and send a single digital publication file 
  through distribution and offers consumers interoperability between 
  software/hardware for unencrypted reflowable digital books and other 
  publications. The Open eBook Publication Structure or "OEB", 
  originally produced in 1999, is the precursor to OPS. 

----------------------------------------------------------------------
.epub Constraints 
----------------------------------------------------------------------

.epub does not support all of the image formats that DocBook supports.
When an image is available in an accepted format, it will be used. The
accepted @formats are: 'GIF','GIF87a','GIF89a','JPEG','JPG','PNG','SVG'
A mime-type for the image will be guessed from the file extension, 
which may not work if your file extensions are non-standard.

Non-supported elements:
  * <mediaobjectco> 
  * <inlinegraphic>, <graphic>, <textdata>, <imagedata> with text/XML 
    @filerefs
  * <olink>
  * <cmdsynopsis> in lists (generic XHTML rendering inability)
  * <footnote><para><programlisting> (just make your programlistings 
    siblings, rather than descendents of paras)

----------------------------------------------------------------------
dbtoepub Reference Implementation
----------------------------------------------------------------------

An alpha-quality DocBook to .epub conversion program, dbtoepub, is provided
in bin/dbtoepub. 

This tool requires:
 - 'xsltproc' in your PATH
 - 'zip' in your PATH
 - Ruby 1.8.4+

Windows compatibility has not been extensively tested; bug reports encouraged.
[See http://www.zlatkovic.com/libxml.en.html and http://unxutils.sourceforge.net/]

$ dbtoepub --help
  Usage: dbtoepub [OPTIONS] [DocBook Files]

  dbtoepub converts DocBook <book> and <article>s into to .epub files.

  .epub is defined by the IDPF at www.idpf.org and is made up of 3 standards:
  - Open Publication Structure (OPS)
  - Open Packaging Format (OPF) 
  - Open Container Format (OCF)

  Specific options:
      -d, --debug                      Show debugging output.
      -h, --help                       Display usage info
      -v, --verbose                    Make output verbose


----------------------------------------------------------------------
Validation
----------------------------------------------------------------------

The epubcheck project provides limited validation for .epub documents. 
See http://code.google.com/p/epubcheck/ for details.

----------------------------------------------------------------------
Copyright information
----------------------------------------------------------------------
See the accompanying file named COPYING.


Replaced the plain DocBook XSL admonition icons with Jimmac's DocBook
icons (http://jimmac.musichall.cz/ikony.php3). I dropped transparency
from the Jimmac icons to get round MS IE and FOP PNG incompatibilies.

Stuart Rackham

This directory supports the creation of the CxxTest User Guide using
asciidoc and a2x commands.

HTML

The command

    make html

creates the guide.html file.


PDF

The command

    make pdf

creates the guide.tex file, which generates the guide.pdf file using
dblatex.



EPUB

The command

    make epub

creates the file make.epub.  Note that the `catalog.xml` file is
used, which configures asciidoc to use the docbook XML data in the
`epub` directory.  This is a bit of a hack.  It apparently works
around a limitation of the MacPorts installation of asciidoc.


MANPAGES

The command

    make manpages

creates CxxTest man pages in the doc/man directory.


CxxTest Python Package
======================

The CxxTest Python package includes utilities that are used by the
CxxTest unit testing framework.  Specifically, this Python package
supports C++ parsing and code generation done in the cxxtestgen 
script.


Overview
--------

CxxTest is a unit testing framework for C++ that is similar in
spirit to JUnit, CppUnit, and xUnit. CxxTest is easy to use because
it does not require precompiling a CxxTest testing library, it
employs no advanced features of C++ (e.g. RTTI) and it supports a
very flexible form of test discovery.

CxxTest is available under the GNU Lesser General Public Licence (LGPL).

A user guide can be downloaded from http://cxxtest.com.


A Simple Example
----------------

1. Create a test suite header file:

MyTestSuite.h:

  #include <cxxtest/TestSuite.h>

  class MyTestSuite : public CxxTest::TestSuite 
  {
  public:
      void testAddition( void )
      {
          TS_ASSERT( 1 + 1 > 1 );
          TS_ASSERT_EQUALS( 1 + 1, 2 );
      }
  };


2. Generate the tests file:

 # cxxtestgen --error-printer -o tests.cpp MyTestSuite.h

3. Compile and run!

  # g++ -o main tests.cpp
  # ./main
  Running cxxtest tests (1 test).OK!


Sample files for Visual Studio
==============================

There are three projects in this workspace:

 - CxxTest_3_Generate runs cxxtestgen to create runner.cpp
 - CxxTest_2_Build compiles the generated file
 - CxxTest_1_Run runs the compiled binary

Whenever you build this workspace, the tests are run, and any failed assertions
are displayed as compilation errors (you can browse them using F4).

Note that to run this sample, you need first to create an environment
variable PYTHON, e.g. Python=c:\Python25\bin\python.exe


To use these .dsp and .dsw files in your own project, run FixFiles.bat
to adjust them to where you've placed CxxTest and your own tests.

If you want to use just the .dsp files in your own workspace, don't
forget to:

 - Set up the dependencies (CxxTest_3_Generate depends on
   CxxTest_2_Build which depends on CxxTest_1_Run)

 - Add your own include paths, libraries etc. to the CxxTest_2_Build project


NOTE: I haven't used "Post-Build Step" to run the tests because I
wanted the tests to be executed even if nothing has changed.

