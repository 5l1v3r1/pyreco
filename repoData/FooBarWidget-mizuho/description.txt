AsciiDoc dblatex README
=======================

Customization
-------------
The `./dblatex` directory contains:

`./dblatex/asciidoc-dblatex.xsl`:: Optional dblatex XSL parameter
customization.

`./dblatex/asciidoc-dblatex.sty`:: Optional customized LaTeX styles.

Use these files with dblatex(1) `-p` and `-s` options, for example:

  dblatex -p ../dblatex/asciidoc-dblatex.xsl \
          -s ../dblatex/asciidoc-dblatex.sty article.xml


Limitations
-----------
Observed in dblatex 0.2.8.

- dblatex doesn't seem to process the DocBook 'literallayout' element
  correctly: it is rendered in a monospaced font and no inline
  elements are processed. By default the normal font should be used
  and almost all DocBook inline elements should be processed
  (http://www.docbook.org/tdg/en/html/literallayout.html).  I almost
  fixed this by overriding the default dblatex literallayout template
  (in `./dblatex/asciidoc-dblatex.xsl`) and using the LaTeX 'alltt'
  package, but there are remaining problems:

  * Blank lines are replaced by a single space.
  * The 'literallayout' element incorrectly wraps text when rendered
    inside a table.

- Callouts do not work inside DocBook 'literallayout' elements which
  means callouts are not displayed inside AsciiDoc literal blocks.  A
  workaround is to change the AsciiDoc literal block to a listing
  block.

AsciiDoc Website
================

The AsciiDoc website source is included in the AsciiDoc distribution
(in `./examples/website/`) as an example of using AsciiDoc to build a
website.

A simple shell script (`./examples/website/build-website.sh`) will
build the site's web pages -- just set the `LAYOUT` variable to the
desired layout.

Website Layouts
---------------
The website layout is determined by the layout configuration file
(`layout1.conf` or `layout2.conf`) and corresponding layout CSS file
(`layout1.css` or `layout2.css`). The example website comes with the
following layouts:

[width="80%",cols="1,4",options="header"]
|====================================================================
|Layout   |  Description
|layout1  |  Table based layout
|layout2  |  CSS based layout (this is the default layout)
|====================================================================

The default tables based layout (layout1) works with most modern
browsers.

NOTE: The simulated frames layout (layout2) does not work with IE6.

../../README.txt
AsciiDoc Code Filter
====================

This simple minded filter highlights source code keywords and
comments.

NOTE: The filter is to demonstrate how to write a filter -- it's much
to simplistic to be passed off as a code syntax highlighter. If you
want a full featured highlighter use the 'source highlighter filter.


Files
-----
code-filter.py::
        The filter Python script.
code-filter.conf::
        The AsciiDoc filter configuration file.
code-filter-test.txt::
        Short AsciiDoc document to test the filter.


Installation
------------
The code filter is installed in the distribution `filters` directory
as part of the standard AsciiDoc install.

Test it on the `code-filter-test.txt` file:

  $ asciidoc -v code-filter-test.txt
  $ firefox code-filter-test.txt &


Help
----
Execute the filter with the help option:

  $ ./code-filter.py --help

Replaced the plain DocBook XSL admonition icons with Jimmac's DocBook
icons (http://jimmac.musichall.cz/ikony.php3). I dropped transparency
from the Jimmac icons to get round MS IE and FOP PNG incompatibilies.

Stuart Rackham

                              AsciiDoc README File

   version 8.6.7, 17 March 2012
     __________________________________________________________________

1. Prerequisites

   AsciiDoc is written in Python so you need a Python interpreter (version
   2.4 or later) to execute asciidoc(1). Python is installed by default in
   most Linux distributions. You can download Python from the official
   Python website [1]http://www.python.org.
     __________________________________________________________________

2. Obtaining AsciiDoc

   Documentation and installation instructions are on the AsciiDoc website
   [2]http://www.methods.co.nz/asciidoc/
     __________________________________________________________________

3. Tools

   Current AsciiDoc version tested on Xubuntu Linux 10.04 with:
     * Python 2.6.5
     * DocBook XSL Stylesheets 1.76.1
     * xsltproc (libxml 20706, libxslt 10126 and libexslt 815).
     * w3m 0.5.2
     * dblatex 0.3
     * FOP 0.95
     * A-A-P 1.091
     __________________________________________________________________

4. Copying

   Copyright Â© 2002-2011 Stuart Rackham. Free use of this software is
   granted under the terms of the GNU General Public License version 2
   (GPLv2).
     __________________________________________________________________

   Version 8.6.7
   Last updated 2011-05-04 18:47:58 NZST

References

   1. http://www.python.org/
   2. http://www.methods.co.nz/asciidoc/

AsciiDoc README File
====================

Prerequisites
-------------
AsciiDoc is written in Python so you need a Python interpreter
(version 2.4 or later) to execute asciidoc(1). Python is installed by
default in most Linux distributions.  You can download Python from the
official Python website http://www.python.org.


Obtaining AsciiDoc
------------------
Documentation and installation instructions are on the AsciiDoc
website http://www.methods.co.nz/asciidoc/


Tools
-----
Current AsciiDoc version tested on Xubuntu Linux 10.04 with:

- Python 2.6.5
- DocBook XSL Stylesheets 1.76.1
- xsltproc (libxml 20706, libxslt 10126 and libexslt 815).
- w3m 0.5.2
- dblatex 0.3
- FOP 0.95
- A-A-P 1.091


Copying
-------
Copyright (C) 2002-2011 Stuart Rackham. Free use of this software is
granted under the terms of the GNU General Public License version 2
(GPLv2).

# Mizuho documentation formatting tool

Mizuho is a documentation formatting tool, best suited for small to
medium-sized documentation. One writes documentation in plain text
files, which Mizuho then converts to nicely formatted HTML.

Mizuho wraps [Asciidoc](http://www.methods.co.nz/asciidoc/), the text
formatting tool used by e.g. Git and Phusion Passenger for its manuals.
Mizuho adds the following functionality on top of Asciidoc:

 * A top bar that gives quick access to the table of contents.
 * Commenting via [Juvia](https://github.com/FooBarWidget/juvia).

Mizuho bundles Asciidoc so you don't have to install it yourself. Mizuho
should Just Work(tm) out-of-the-box. Asciidoc uses GNU source-highlight
for highlighting source code. GNU source-highlight depends on Boost and
so is notorious for being difficult to install on systems without a
decent package manager (e.g. OS X). Mizuho comes prebundled with an OS
X binary for GNU source-highlight so that you don't have to worry about
that.

## Requirements

 * Nokogiri (`gem install nokogiri`)
 * Python (because Asciidoc is written in Python)
 * [GNU Source-highlight](http://www.gnu.org/software/src-highlite/), if you
   want syntax highlighting support. If you're on OS X then it's not necessary
   to install this yourself; we've bundled a precompiled source-highlight
   binary for OS X for your convenience.

## Installation with RubyGems

Run:

    gem install mizuho

This gem is signed using PGP with the [Phusion Software Signing key](http://www.phusion.nl/about/gpg). That key in turn is signed by [the rubygems-openpgp Certificate Authority](http://www.rubygems-openpgp-ca.org/).

You can verify the authenticity of the gem by following [The Complete Guide to Verifying Gems with rubygems-openpgp](http://www.rubygems-openpgp-ca.org/blog/the-complete-guide-to-verifying-gems-with-rubygems-openpgp.html).

## Installation on Ubuntu

Use our [PPA](https://launchpad.net/~phusion.nl/+archive/misc):

    sudo add-apt-repository ppa:phusion.nl/misc
    sudo apt-get update
    sudo apt-get install mizuho

## Installation on Debian

Our Ubuntu Lucid packages are compatible with Debian 6.

    sudo sh -c 'echo deb http://ppa.launchpad.net/phusion.nl/misc/ubuntu lucid main > /etc/apt/sources.list.d/phusion-misc.list'
    sudo sh -c 'echo deb-src http://ppa.launchpad.net/phusion.nl/misc/ubuntu lucid main >> /etc/apt/sources.list.d/phusion-misc.list'
    sudo apt-key adv --keyserver keyserver.ubuntu.com --recv-keys 2AC745A50A212A8C
    sudo apt-get update
    sudo apt-get install mizuho

## Installation on RHEL, CentOS and Amazon Linux

 1. Enable EPEL: [RHEL](https://fedoraproject.org/wiki/EPEL), [CentOS](http://www.centosblog.com/enable-epel-repo-on-centos-5-and-centos-6/), [Amazon Linux](http://aws.amazon.com/amazon-linux-ami/faqs/#epel).
 2. Enable our YUM repository:

        # RHEL 6, CentOS 6
        curl -L https://oss-binaries.phusionpassenger.com/yumgems/phusion-misc/el.repo | \
          sudo tee /etc/yum.repos.d/phusion-misc.repo
        
        # Amazon Linux
        curl -L https://oss-binaries.phusionpassenger.com/yumgems/phusion-misc/amazon.repo | \
          sudo tee /etc/yum.repos.d/phusion-misc.repo

 3. Install our package:

        sudo yum install rubygem-mizuho

## Usage

First, read [the Asciidoc manual](http://www.methods.co.nz/asciidoc/userguide.html)
to learn the input file format:

Next, write an input file and save it in a .txt file.

Finally, convert the .txt file to a single HTML file with Mizuho, with the
default template:

    mizuho input.txt

This will generate 'input.html'.

### Commenting via Juvia

To enable commenting via Juvia, pass `-c juvia` and the `--juvia-url` and
`--juvia-site-key` arguments with appropriate values. Mizuho will generate a
so-called *ID map file* if there isn't already one. This file maps section
titles to Juvia topic IDs. This way you can preserve a section's comments
even when you rename that section's title. Note that the section's number is
considered part of the title, so renaming can happen implicitly.

When a section title has been renamed, Mizuho will look for a Juvia topic ID
for which the previous title is similar to the new title, and assign that ID
to the section. The entry in the ID map file is then marked 'fuzzy' in order to
warn you about this. You have to remove the `# fuzzy` comment in the ID map
file, or Mizuho will keep complaining about this in subsequent runs.

## Credits

This tool is named after Kazami Mizuho from the 2003 anime 'Onegai Teacher'.

