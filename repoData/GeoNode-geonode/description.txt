# To run the integration tests, do:
paver test_integration

# To run the csw tests, do:
paver test_integration -n geonode.tests.csw

To run these tests, make sure a test db is setup:
  python manage.py syncdb --all

Create the admin user as per the above account credentials

Run geoserver. Make sure that geonode.upload is in INSTALLED_APPS:

  paver start_geoserver

While geoserver is running, run tests:

  REUSE_DB=1 python manage.py test geonode.upload.tests.integration

These tests will internally run a django server and modify the settings as
needed to adjust differences in configuration.

The upload tests will load a settings module to allow specification of a postgres
database other than what you might use for other local purposes. This module is:

  geonode.upload.tests.local_settings

If the `local_settings` or standard django settings do not set the name of the OGC_SERVER DATASTORE option,
the importer tests that import into the database will not run.

The `test_settings` module must also be supplied when launching the tests to run
the full suite including the DATASTORE tests:

  DJANGO_SETTINGS_MODULE=geonode.upload.tests.test_settings python manage.py test geonode.upload.tests.integration

If there are existing layers in the test database, the tests will not run unless
the environment variable `DELETE_LAYERS` is present. For example:

  DELETE_LAYERS= python manage.py test geonode.upload.integrationtests


The Debian Package geonode
----------------------------

Comments regarding the Package

 -- root <root@thatserver.ca>  Thu, 04 Nov 2010 14:49:39 -0700

Debian packaging scripts for GeoNode
====================================

This repository contains the scripts used to build the .deb (Ubuntu) package
for GeoNode.  If you are interested in modifying GeoNode itself you may find
http://github.com/GeoNode/geonode more relevant.

Building
--------

To produce a .deb package which can be redistributed:

* Install the debian packaging tools::

    apt-get install debhelper devscripts

* Acquire a GeoNode tar.gz archive (by either building it from sources, or from
  http://dev.geonode.org/release/ ) and unpack it, so that you have a
  directory structure like so::
 
    geonode-deb/
       + debian/
       + GeoNode-{version}

* Run the debuild tool to build the package::

    debuild -uc -us -A

* geonode-{version}.deb will be produced in the parent directory (one level
  above the directory where you cloned this project).

Installation
------------

As described in the GeoNode manual, you can access OpenGeo's APT repository to
get pre-built GeoNode packages.  However, if you want to build a package and
install that instead, you can avoid the need for a repository of your own by
using the following command::

    dpkg -i geonode-{version}.deb

If dpkg reports an error about unmet dependencies, you can issue the following
command to fetch dependencies and re-attempt the installation::

    apt-get install -f


Installing GeoNode
==================

The easiest way to install GeoNode is using the official packages for one of the supported Operating Systems.
Please be advised that GeoNode requires at least 4GB of RAM (6GB including swap).

Ubuntu 12.04 
-----------------------------

Open a terminal and run the following commands::

    sudo add-apt-repository ppa:ingenieroariel/unstable
    sudo apt-get update
    sudo apt-get install geonode


OSX, Windows and other operating systems
----------------------------------------

Our recommendation is to use a Virtual Machine with one of the supported Operating Systems.
If that is not an option then you could try to follow manually the steps of the install script
adjusting for paths and commands in your OS.

Manual installation
-------------------

This is mostly targeted to Linux based distributions,
it has only been tested in Ubuntu Linux but should work with minimal changes to the config file.

# First you need to install the OS specific dependencies,
here is the complete list (the actual package name may vary)::

    geoserver, python, python-support, python-dev, sun-java6-jre | openjdk-6-jre, tomcat6, postgresql-8.4, gcc, patch, zip,  python-imaging, gdal-bin, libgeos-dev, python-urlgrabber, python-pastescript, gettext, postgresql-contrib, postgresql-8.4-postgis,libpq-dev, unzip, libjpeg-dev, libpng-dev, python-gdal, libproj-dev, python-psycopg2, apache2, libapache2-mod-wsgi, libxml2-dev, libxslt1-dev

# Then you have to edit the config file that is in the support directory with the appropiate paths,
sample config files for Ubuntu and CentOS are distributed with the release packages.

# After that, open a terminal and run the following command as a super user::

    ./install.sh support/config.sh

# To test your GeoNode installation simply type the following in your terminal::

    geonode help

  You should also navigate to your browser window and type `http://localhost/`

# After you have installing your GeoNode we recommend you to read the following guide to learn how to create users,
serve the site on a DNS or IP address and optimize your GeoNode.
    http://docs.geonode.org/deploy/production.html 

Note for packagers
~~~~~~~~~~~~~~~~~~

There is an advanced flag for the install script called 'step'.
There are two main steps to install GeoNode,
the first one is to place the required files in the right places (referred to as pre-install) and
the other to create the postgis database and edit the required Django, GeoServer and Geonetwork config files (referred to as post-install).

By default the install script does both, but usually it is appropriate to perform the first of these steps during package creation and the second one at install time.

The step flag supports three values: 'pre', 'post' and 'all'. Default is 'all'. Here is usage example::

    # in debian/rules#install
    ./install.sh -s pre support/config.sh

    # in debian/postinst
    ./install.sh -s post support/config.sh


GPL License
===========

GeoNode is Copyright 2010 OpenPlans.

GeoNode is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

GeoNode is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with GeoNode.  If not, see <http://www.gnu.org/licenses/>.

CentOS packaging scripts for GeoNode
====================================

This repository contains the scripts used to build the .rpm (CentOS) package
for GeoNode.  If you are interested in modifying GeoNode itself you may find
http://github.com/GeoNode/geonode more relevant.

Building
--------

To produce a .rpm package which can be redistributed:

* Install the rpm packaging tools::

    yum install rpmbuild rpm-devtools

* Run the rpmdev-setuptree tool to set up your user account for building RPMs::

    rpmdev-setuptree

* Point the BUILD and SPECS subdirectories of the RPM build tree at your
  checkout of this project::

    rmdir ~/rpmbuild/{BUILD,SPECS} &&
    ln -s ~/geonode-rpm/{BUILD,SPECS} ~/rpmbuild/

* Acquire a GeoNode tar.gz archive (by either building it from sources, or from
  http://dev.geonode.org/release/ ) and unpack it into
  :file:`geonode-rpm/BUILD/`.

* Fetch the psycopg2 sources from http://initd.org/psycopg/download/ and place
  the tarball in :file:`geonode-rpm/BUILD/deps`.

* You should now have a directory structure like so::

    geonode-rpm/
      + BUILD/
        + GeoNode-{version}/
        + deps/
          - psycopg2-2.3.1.tar.gz
        + scripts/
      + SPECS/
        - geonode.spec
        - opengeo.repo

* Now you can build the GeoNode RPM by using the ``rpmbuild`` command::

    rpmbuild -bb ~/rpmbuild/SPECS/geonode.spec

.. note::

    Currently, building on CentOS machines requires specifying the --buildroot
    option to rpmbuild, like so::

        rpmbuild -bb ~/rpmbuild/SPECS/geonode.spec \
          --buildroot=/home/rpmbuild/rpmbuild/BUILDROOT/

After running ``rpmbuild`` you should have the RPM package one directory level
in the :file:`rpmbuild` directory.

Installation
------------

As described in the GeoNode manual, you can access OpenGeo's YUM repository to
get pre-built GeoNode packages.  However, if you want to build a package and
install that instead, you can avoid the need for a repository of your own by
using the following command::

    yum localinstall geonode-{version}.rpm --nogpgcheck

As GeoNode depends on software not provided by the main CentOS distribution,
you will still need to enable some third-party repositories.  OpenGeo's
repository will mirror all GeoNode dependencies, or you can use
`EPEL<http://fedoraproject.org/wiki/EPEL>`_ and
`ELGIS<http://wiki.osgeo.org/wiki/Enterprise_Linux_GIS>`_ together.

.. image:: https://secure.travis-ci.org/GeoNode/geonode.png
    :alt: Build Status
    :target: http://travis-ci.org/GeoNode/geonode

=========
 GeoNode
=========

If you just want to try GeoNode, it is recommended to use Ubuntu 12.04 and install the latest stable release::

    sudo add-apt-repository ppa:geonode/release
    sudo apt-get update
    sudo apt-get install geonode

If instead, you are interested in doing development on the source code, here are the instructions for Ubuntu 14.04::

    # retrieve latest apt-get list
    sudo apt-get update

    # Essential build tools and libraries
    sudo apt-get install -y build-essential libxml2-dev libxslt1-dev libjpeg-dev gettext git python-dev python-pip

    # Python and Django dependencies with official packages
    sudo apt-get install python-pillow python-lxml python-psycopg2 python-django python-bs4 python-multipartposthandler transifex-client python-paver python-nose python-django-nose python-gdal python-django-pagination python-django-jsonfield python-django-extensions python-django-taggit python-httplib2
    
    # Java dependencies
    sudo apt-get install -y --force-yes openjdk-6-jdk ant maven2 --no-install-recommends

    # Clone GeoNode
    git clone https://github.com/GeoNode/geonode.git

    # Install GeoNode in editable mode
    sudo pip install -e geonode
    cd geonode

    # Compile GeoServer
    paver setup

    # Start the development servers
    paver start

    # Visit the development geonode site
    http://localhost:8000


openSUSE Development Build Instructions::

    # Add Application:Geo and Python repositories
    zypper -ar http://download.opensuse.org/repositories/Application:/Geo/openSUSE_12.2/ GEO
    zypper -ar http://download.opensuse.org/repositories/devel:/languages:/python/openSUSE_12.1/ python
    zypper refresh

    # Basic build packages
    zypper install gcc gcc-c++ python-devel libgeos-devel libproj-devel

    # Python native dependencies
    zypper install python-pip python-virtualenv python-imaging python-lxml python-gdal

    # Java dependencies
    zypper install java-1_7_0_openjdk-devel ant maven

    # Supporting tools
    zypper install git gettext-runtime

    # Create virtualenv and activate it
    virtualenv venv --system-site-packages
    source venv/bin/activate
    cd venv

    # Clone GeoNode
    git clone https://github.com/GeoNode/geonode.git

    # Install GeoNode in the local virtualenv
    pip install -e geonode --use-mirrors

    cd geonode

    # Compile GeoServer
    paver setup
    
    # Start the servers
    paver start

Windows Development Build Instructions::


    Prerequisites:
    # Java JDK
    # Python 2.6+
    # ant (bin directory must be on system PATH)
    # maven2 (bin directory must be on system PATH)
    # Python distutils (easy_install)
    # git

    # Install and configure from the windows command prompt
    If you don't already have python virtualenv installed, then do it now:
         easy_install virtualenv

    # Create virtualenv and activate it
    cd <Directory to install the virtualenv & geonode into>
    virtualenv venv
    venv\scripts\activate

    # Install Python native dependencies
    easy_install PIL lxml==2.3
    # this command will look for and install binary distributions (pip install will attempt to build and fail)

    # Clone GeoNode
    git clone https://github.com/GeoNode/geonode.git
    
    # Install GeoNode in the local virtualenv
    pip install -e geonode --use-mirrors

    cd geonode

    # Compile GeoServer
    paver setup
    
    # Start the servers
    # This WON'T work on windows without changes to pavement.py 
    # and a windows batch script for starting jetty    
    paver start

Mac OSX Development Build Instructions::
    
    # you may need brew install various dependencies 

    mkdir -p ~/pyenv
    virtualenv ~/pyenv/geonode    
    source ~/pyenv/geonode/bin/activate
    git clone https://github.com/GeoNode/geonode
    cd geonode
    pip install lxml
    pip install pyproj
    pip install nose
    pip install httplib2
    pip install shapely
    pip install pillow
    pip install paver

    # Node and tools required for static development
    brew install node
    npm install -g bower
    npm install -g grunt-cli

    #Install pip dependencies
    pip install -e .

    #Paver handles dependencies for Geonode, first setup (this will download and update your python dependencies - ensure you're in a virtualenv)
    paver setup
    paver start
    
    # Optional: To generate document thumbnails for PDFs and other ghostscripts file types
    # Then download ghostscript: https://www.macupdate.com/app/mac/9980/gpl-ghostscript
    brew install imagemagick
    pip install Wand==0.3.5

Once fully started, you should see a message indicating the address of your geonode.
The default username and password are ``admin`` and ``admin``::
  
  Development GeoNode is running at http://localhost:8000/
  The GeoNode is an unstoppable machine
  Press CTRL-C to shut down

Before starting GeoNode (paver start), you could test your installation by running tests::

    paver test
    paver test_integration
    
In case you want to build yourself the documentation, you need to install Sphinx and the run 'make html' from within the docs directory::

    pip install Sphinx
    cd docs
    make html
    
You can eventually generate a pdf containing the whole documentation set. For this purpose, if using Ubuntu 12.4 you will need to install the texlive-full package::

    sudo apt-get install texlive-full
    make latexpdf

.. note:: 

  When running ``virtualenv venv`` the ``--system-site-packages`` option is
  not required.  If not enabled, the bootstrap script will sandbox your virtual
  environment from any packages that are installed in the system, useful if
  you have incompatible versions of libraries such as Django installed
  system-wide.  On the other hand, most of the times it is useful to use a version of
  the Python Imaging Library provided by your operating system
  vendor, or packaged other than on PyPI.  When in doubt, however, just leave
  this option out.

Development Roadmap
===================

Geonode's development roadmap is documented in a series of Geonode Improvement Projects (GNIPS). 
They are documented here: https://github.com/GeoNode/geonode/wiki/GeoNode-Improvement-Proposals.
GNIPS are considered to be large undertakings which will add a large amount of features to the project. 
As such they are the topic of community dicussion and guidance.
The community discusses these on the developer mailing list: https://groups.google.com/a/opengeo.org/forum/#!forum/geonode-dev
Github issues tracks features and bugs, for new developers the tag 'easy-pick' indicates an 
issue that should be relatively easy for new developers to understand and complete. Once you have completed an issue
a pull request should be submitted. This will then be reviewed by the community.

GPL License
===========

GeoNode is Copyright 2010 OpenPlans.

GeoNode is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

GeoNode is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with GeoNode.  If not, see <http://www.gnu.org/licenses/>.

README
=========
GeoNode Cloud Scripts
=========

Summary
==================
GeoNode Admin is a set of scripts for launching GeoNode instances on ec2 or other cloud infrastructure.

Requirements
==================
* aws (http://aws.amazon.com/)
 - download geonode.pem from web interface
 - export AWS_ACCESS_KEY_ID='blahblah'
 - export AWS_SECRET_ACCESS_KEY='blebleble'
* boto (http://code.google.com/p/boto/)
 - easy_install boto 
* fabric (http://docs.fabfile.org/0.9.3/)
 - easy_install fabric

Usage 
==================
* ec2.py launch
* fab -i geonode.pem -H user@host geonode_dev
* fab -i geonode.pem -H user@host geonode_prod
* fab -i geonode.pem -H user@host update 

