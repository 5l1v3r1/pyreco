__FILENAME__ = conf
# -*- coding: utf-8 -*-
#
# OpenOB documentation build configuration file, created by
# sphinx-quickstart on Tue Jul 16 13:36:09 2013.
#
# This file is execfile()d with the current directory set to its containing dir.
#
# Note that not all possible configuration values are present in this
# autogenerated file.
#
# All configuration values have a default; values that are commented out
# serve to show the default.

import sys, os

# If extensions (or modules to document with autodoc) are in another directory,
# add these directories to sys.path here. If the directory is relative to the
# documentation root, use os.path.abspath to make it absolute, like shown here.
sys.path.insert(0, os.path.abspath('..'))

# -- General configuration -----------------------------------------------------

# If your documentation needs a minimal Sphinx version, state it here.
#needs_sphinx = '1.0'

# Add any Sphinx extension module names here, as strings. They can be extensions
# coming with Sphinx (named 'sphinx.ext.*') or your custom ones.
extensions = ['sphinx.ext.autodoc', 'sphinx.ext.todo', 'sphinx.ext.coverage', 'sphinx.ext.pngmath', 'sphinx.ext.viewcode']

# Add any paths that contain templates here, relative to this directory.
templates_path = ['_templates']

# The suffix of source filenames.
source_suffix = '.rst'

# The encoding of source files.
#source_encoding = 'utf-8-sig'

# The master toctree document.
master_doc = 'index'

# General information about the project.
project = u'OpenOB'
copyright = u'2014, James Harrison'

# The version info for the project you're documenting, acts as replacement for
# |version| and |release|, also used in various other places throughout the
# built documents.
#
# The short X.Y version.
version = '3.0'
# The full version, including alpha/beta/rc tags.
release = '3.0 alpha2'

# The language for content autogenerated by Sphinx. Refer to documentation
# for a list of supported languages.
#language = None

# There are two options for replacing |today|: either, you set today to some
# non-false value, then it is used:
#today = ''
# Else, today_fmt is used as the format for a strftime call.
#today_fmt = '%B %d, %Y'

# List of patterns, relative to source directory, that match files and
# directories to ignore when looking for source files.
exclude_patterns = []

# The reST default role (used for this markup: `text`) to use for all documents.
#default_role = None

# If true, '()' will be appended to :func: etc. cross-reference text.
#add_function_parentheses = True

# If true, the current module name will be prepended to all description
# unit titles (such as .. function::).
#add_module_names = True

# If true, sectionauthor and moduleauthor directives will be shown in the
# output. They are ignored by default.
#show_authors = False

# The name of the Pygments (syntax highlighting) style to use.
pygments_style = 'sphinx'

# A list of ignored prefixes for module index sorting.
#modindex_common_prefix = []


# -- Options for HTML output ---------------------------------------------------

# The theme to use for HTML and HTML Help pages.  See the documentation for
# a list of builtin themes.
html_theme = 'haiku'

# Theme options are theme-specific and customize the look and feel of a theme
# further.  For a list of options available for each theme, see the
# documentation.
#html_theme_options = {}

# Add any paths that contain custom themes here, relative to this directory.
#html_theme_path = []

# The name for this set of Sphinx documents.  If None, it defaults to
# "<project> v<release> documentation".
#html_title = None

# A shorter title for the navigation bar.  Default is the same as html_title.
#html_short_title = None

# The name of an image file (relative to this directory) to place at the top
# of the sidebar.
#html_logo = None

# The name of an image file (within the static path) to use as favicon of the
# docs.  This file should be a Windows icon file (.ico) being 16x16 or 32x32
# pixels large.
#html_favicon = None

# Add any paths that contain custom static files (such as style sheets) here,
# relative to this directory. They are copied after the builtin static files,
# so a file named "default.css" will overwrite the builtin "default.css".
html_static_path = ['_static']

# If not '', a 'Last updated on:' timestamp is inserted at every page bottom,
# using the given strftime format.
html_last_updated_fmt = '%b %d, %Y'

# If true, SmartyPants will be used to convert quotes and dashes to
# typographically correct entities.
html_use_smartypants = True

# Custom sidebar templates, maps document names to template names.
#html_sidebars = {}

# Additional templates that should be rendered to pages, maps page names to
# template names.
#html_additional_pages = {}

# If false, no module index is generated.
#html_domain_indices = True

# If false, no index is generated.
#html_use_index = True

# If true, the index is split into individual pages for each letter.
#html_split_index = False

# If true, links to the reST sources are added to the pages.
#html_show_sourcelink = True

# If true, "Created using Sphinx" is shown in the HTML footer. Default is True.
#html_show_sphinx = True

# If true, "(C) Copyright ..." is shown in the HTML footer. Default is True.
#html_show_copyright = True

# If true, an OpenSearch description file will be output, and all pages will
# contain a <link> tag referring to it.  The value of this option must be the
# base URL from which the finished HTML is served.
#html_use_opensearch = ''

# This is the file name suffix for HTML files (e.g. ".xhtml").
#html_file_suffix = None

# Output file base name for HTML help builder.
htmlhelp_basename = 'OpenOBdoc'


# -- Options for LaTeX output --------------------------------------------------

latex_elements = {
# The paper size ('letterpaper' or 'a4paper').
#'papersize': 'letterpaper',

# The font size ('10pt', '11pt' or '12pt').
#'pointsize': '10pt',

# Additional stuff for the LaTeX preamble.
#'preamble': '',
}

# Grouping the document tree into LaTeX files. List of tuples
# (source start file, target name, title, author, documentclass [howto/manual]).
latex_documents = [
  ('index', 'OpenOB.tex', u'OpenOB Documentation',
   u'James Harrison', 'manual'),
]

# The name of an image file (relative to this directory) to place at the top of
# the title page.
#latex_logo = None

# For "manual" documents, if this is true, then toplevel headings are parts,
# not chapters.
#latex_use_parts = False

# If true, show page references after internal links.
#latex_show_pagerefs = False

# If true, show URL addresses after external links.
#latex_show_urls = False

# Documents to append as an appendix to all manuals.
#latex_appendices = []

# If false, no module index is generated.
#latex_domain_indices = True


# -- Options for manual page output --------------------------------------------

# One entry per manual page. List of tuples
# (source start file, name, description, authors, manual section).
man_pages = [
    ('index', 'openob', u'OpenOB Documentation',
     [u'James Harrison'], 1)
]

# If true, show URL addresses after external links.
#man_show_urls = False


# -- Options for Texinfo output ------------------------------------------------

# Grouping the document tree into Texinfo files. List of tuples
# (source start file, target name, title, author,
#  dir menu entry, description, category)
texinfo_documents = [
  ('index', 'OpenOB', u'OpenOB Documentation',
   u'James Harrison', 'OpenOB', 'One line description of project.',
   'Miscellaneous'),
]

# Documents to append as an appendix to all manuals.
#texinfo_appendices = []

# If false, no module index is generated.
#texinfo_domain_indices = True

# How to display URL addresses: 'footnote', 'no', or 'inline'.
#texinfo_show_urls = 'footnote'

########NEW FILE########
__FILENAME__ = audio_interface
from openob.logger import LoggerFactory


class AudioInterface(object):

    """
        The AudioInterface class describes an audio interface on a Node.
        The configuration is not shared across the network. The type property of
        an AudioInterface should define the mode of link operation.
    """

    def __init__(self, node_name, interface_name='default'):
        self.interface_name = interface_name
        self.node_name = node_name
        self.logger_factory = LoggerFactory()
        self.logger = self.logger_factory.getLogger('node.%s.audio_interface.%s' 
                                                    % (self.node_name, self.interface_name))
        self.config = dict()

    def set(self, key, value):
        """Set a config value"""
        self.logger.debug("Set %s to %s" % (key, value))
        self.config[key] = value

    def get(self, key):
        """Get a config value"""
        value = self.config[key]
        self.logger.debug("Fetched %s, got %s" % (key, value))
        return value

    def __getattr__(self, key):
        """Convenience method to access get"""
        return self.get(key)

    def set_from_argparse(self, opts):
        """Set up the audio interface from argparse options"""
        self.set("mode", opts.mode)

        if opts.mode == "tx":
            self.set("type", opts.audio_input)
            self.set("samplerate", opts.samplerate)
        elif opts.mode == "rx":
            self.set("type", opts.audio_output)

        if self.get("type") == "alsa":
            self.set("alsa_device", opts.alsa_device)
        elif self.get("type") == "jack":
            if opts.jack_auto is not False:
                self.set("jack_auto", opts.jack_auto)
            if opts.jack_name is not None:
                self.set("jack_name", opts.jack_name)
            else:
                self.set("jack_name", "openob")

########NEW FILE########
__FILENAME__ = link_config
import redis
import time
from openob.logger import LoggerFactory


class LinkConfig(object):

    """
        The LinkConfig class encapsulates link configuration. It's genderless;
        a TX node should be able to set up a new link and an RX node should be
        able (once the TX node has specified the port caps) to configure itself
        to receive the stream using the data and methods in this config.
    """

    def __init__(self, link_name, redis_host):
        """
            Set up a new LinkConfig instance - needs to know the link name and
            configuration host.
        """
        self.link_name = link_name
        self.redis_host = redis_host
        self.logger_factory = LoggerFactory()
        self.logger = self.logger_factory.getLogger('link.%s.config' % self.link_name)
        self.logger.info("Connecting to configuration host %s" % self.redis_host)
        self.redis = None
        while True:
            try:
                self.redis = redis.StrictRedis(self.redis_host)
                break
            except Exception, e:
                self.logger.error(
                    "Unable to connect to configuration host! Retrying. (%s)"
                    % e
                )
                time.sleep(0.1)

    def blocking_get(self, key):
        """Get a value, blocking until it's not None if needed"""
        while True:
            value = self.get(key)
            if value is not None:
                self.logger.debug("Fetched (blocking) %s, got %s" % (key, value))
                return value
            time.sleep(0.1)

    def set(self, key, value):
        """Set a value in the config store"""
        scoped_key = self.scoped_key(key)
        self.redis.set(scoped_key, value)
        self.logger.debug("Set %s to %s" % (scoped_key, value))
        return value

    def get(self, key):
        """Get a value from the config store"""
        scoped_key = self.scoped_key(key)
        value = self.redis.get(scoped_key)
        # Do some typecasting
        if key == 'port' or key == 'jitter_buffer':
            value = int(value)
        self.logger.debug("Fetched %s, got %s" % (scoped_key, value))
        return value

    def unset(self, key):
        scoped_key = self.scoped_key(key)
        self.redis.delete(scoped_key)
        self.logger.debug("Unset %s" % scoped_key)

    def __getattr__(self, key):
        """Convenience method to access get"""
        return self.get(key)

    def scoped_key(self, key):
        """Return an appropriate key name scoped to a link"""
        return ("openob:%s:%s" % (self.link_name, key))

    def set_from_argparse(self, opts):
        """Given an optparse object from bin/openob, configure this link"""
        self.set("name", opts.link_name)
        if opts.mode == "tx":
            self.set("port", opts.port)
            self.set("jitter_buffer", opts.jitter_buffer)
            self.set("encoding", opts.encoding)
            self.set("bitrate", opts.bitrate)
            self.set("multicast", opts.multicast)
            self.set("input_samplerate", opts.samplerate)
            self.set("receiver_host", opts.receiver_host)
            self.set("opus_framesize", opts.framesize)
            self.set("opus_complexity", opts.complexity)
            self.set("opus_fec", opts.fec)
            self.set("opus_loss_expectation", opts.loss)
            self.set("opus_dtx", opts.dtx)

    def commit_changes(self, restart=False):
        """
            To be called after calls to set() on a running link to signal
            a reconfiguration event for that link. If restart is True, the link
            should simply terminate itself so it can be restarted with the new
            parameters. If restart is False, the link should set all parameters
            it can which do not involve a restart.
        """
        raise(NotImplementedError, "Link reconfiguration is not yet implemented")

########NEW FILE########
__FILENAME__ = logger
import logging


class LoggerFactory(object):
    _isSetup = False

    def __init__(self, level=logging.DEBUG):
        # Set up the top level logger ONCE
        if LoggerFactory._isSetup is False:
            logger = logging.getLogger("openob")
            logger.setLevel(level)
            formatter = logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s')
            ch = logging.StreamHandler()
            ch.setLevel(level)
            ch.setFormatter(formatter)
            logger.addHandler(ch)
            LoggerFactory._isSetup = True

    def getLogger(self, name, level=logging.DEBUG):
        logger = logging.getLogger("openob.%s" % name)
        logger.setLevel(level)
        return logger

########NEW FILE########
__FILENAME__ = node
import sys
import time
from openob.logger import LoggerFactory
from openob.rtp.tx import RTPTransmitter
from openob.rtp.rx import RTPReceiver
from openob.link_config import LinkConfig
from gst import ElementNotFoundError


class Node(object):

    """
        OpenOB node instance.

        Nodes run links. Each Node looks after its end of a link, ensuring
        that it remains running and tries to recover from failures, as well as
        responding to configuration changes.

        Nodes have a name; everything else is link specific.

        For instance, a node might be the 'studio' node, which would run a
        'tx' end for the 'stl' link.

        Nodes have a config host which is where they store their inter-Node
        data and communicate with other Nodes.
    """

    def __init__(self, node_name):
        """Set up a new node."""
        self.node_name = node_name
        self.logger_factory = LoggerFactory()
        self.logger = self.logger_factory.getLogger('node.%s' % self.node_name)

    def run_link(self, link_config, audio_interface):
        """
          Run a new TX or RX node.
        """
        # We're now entering the realm where we should desperately try and
        # maintain a link under all circumstances forever.
        self.logger.info("Link %s initial setup start on %s" % (link_config.name, self.node_name))
        link_logger = self.logger_factory.getLogger('node.%s.link.%s.%s' % (self.node_name, link_config.name, audio_interface.mode))
        while True:
            try:
                if audio_interface.mode == 'tx':
                    try:
                        transmitter = RTPTransmitter(self.node_name, link_config, audio_interface)
                        link_logger.info("Starting up transmitter")
                        transmitter.run()
                        caps = transmitter.get_caps()
                        link_logger.info("Got caps, setting config - %s" % caps)
                        link_config.set("caps", caps)
                        transmitter.loop()
                    except ElementNotFoundError, e:
                        link_logger.critical("GStreamer element missing: %s - will now exit" % e)
                        sys.exit(1)
                    except Exception, e:
                        link_logger.exception("Transmitter crashed for some reason! Restarting...")
                        time.sleep(0.5)
                elif audio_interface.mode == 'rx':
                    link_logger.info("Waiting for transmitter capabilities...")
                    caps = link_config.blocking_get("caps")
                    link_logger.info("Got caps from transmitters - %s" % caps)
                    try:
                        link_logger.info("Starting up receiver")
                        receiver = RTPReceiver(self.node_name, link_config, audio_interface)
                        receiver.run()
                        receiver.loop()
                    except ElementNotFoundError, e:
                        link_logger.critical("GStreamer element missing: %s - will now exit" % e)
                        sys.exit(1)
                    except Exception, e:
                        link_logger.exception("Receiver crashed for some reason! Restarting...")
                        time.sleep(0.1)
                else:
                    link_logger.critical("Unknown audio interface mode (%s)!" % audio_interface.mode)
                    sys.exit(1)
            except Exception, e:
                link_logger.exception("Unknown exception thrown - please report this as a bug! %s" % e)
                raise

########NEW FILE########
__FILENAME__ = rx
import gobject
import pygst
pygst.require("0.10")
import gst
import re
from openob.logger import LoggerFactory


class RTPReceiver(object):

    def __init__(self, node_name, link_config, audio_interface):
        """Sets up a new RTP receiver"""
        self.started = False
        self.pipeline = gst.Pipeline("rx")
        self.bus = self.pipeline.get_bus()
        self.bus.connect("message", self.on_message)
        self.link_config = link_config
        self.audio_interface = audio_interface
        self.logger_factory = LoggerFactory()
        self.logger = self.logger_factory.getLogger('node.%s.link.%s.%s' % (node_name, self.link_config.name, self.audio_interface.mode))
        caps = self.link_config.get("caps")
        # Audio output
        if self.audio_interface.type == 'auto':
            self.sink = gst.element_factory_make("autoaudiosink")
        elif self.audio_interface.type == 'alsa':
            self.sink = gst.element_factory_make("alsasink")
            self.sink.set_property('device', self.audio_interface.alsa_device)
        elif self.audio_interface.type == 'jack':
            self.sink = gst.element_factory_make("jackaudiosink")
            if self.audio_interface.jack_auto:
                self.sink.set_property('connect', 'auto')
            else:
                self.sink.set_property('connect', 'none')
            self.sink.set_property('name', self.audio_interface.jack_name)
        # Audio conversion and resampling
        self.audioconvert = gst.element_factory_make("audioconvert")
        self.audioresample = gst.element_factory_make("audioresample")
        self.audioresample.set_property('quality', 9)
        self.audiorate = gst.element_factory_make("audiorate")

        # Decoding and depayloading
        if self.link_config.encoding == 'opus':
            self.decoder = gst.element_factory_make("opusdec", "decoder")
            self.decoder.set_property('use-inband-fec', True)  # FEC
            self.decoder.set_property('plc', True)  # Packet loss concealment
            self.depayloader = gst.element_factory_make(
                "rtpopusdepay", "depayloader")
        elif self.link_config.encoding == 'pcm':
            self.depayloader = gst.element_factory_make(
                "rtpL16depay", "depayloader")

        # RTP stuff
        self.rtpbin = gst.element_factory_make('gstrtpbin')
        self.rtpbin.set_property('latency', self.link_config.jitter_buffer)
        self.rtpbin.set_property('autoremove', True)
        self.rtpbin.set_property('do-lost', True)
        # Where audio comes in
        self.udpsrc_rtpin = gst.element_factory_make('udpsrc')
        self.udpsrc_rtpin.set_property('port', self.link_config.port)
        if self.link_config.multicast:
            self.udpsrc_rtpin.set_property('auto_multicast', True)
            self.udpsrc_rtpin.set_property('multicast_group', self.link_config.receiver_host)
        caps = caps.replace('\\', '')
        # Fix for gstreamer bug in rtpopuspay fixed in GST-plugins-bad
        # 50140388d2b62d32dd9d0c071e3051ebc5b4083b, bug 686547
        if self.link_config.encoding == 'opus':
            caps = re.sub(r'(caps=.+ )', '', caps)
        udpsrc_caps = gst.caps_from_string(caps)
        self.udpsrc_rtpin.set_property('caps', udpsrc_caps)
        self.udpsrc_rtpin.set_property('timeout', 3000000)

        # Our level monitor, also used for continuous audio
        self.level = gst.element_factory_make("level")
        self.level.set_property('message', True)
        self.level.set_property('interval', 1000000000)

        # And now we've got it all set up we need to add the elements
        self.pipeline.add(
            self.audiorate, self.audioresample, self.audioconvert, self.sink,
            self.level, self.depayloader, self.rtpbin, self.udpsrc_rtpin)
        if self.link_config.encoding != 'pcm':
            self.pipeline.add(self.decoder)
            gst.element_link_many(
                self.depayloader, self.decoder, self.audioconvert)
        else:
            gst.element_link_many(self.depayloader, self.audioconvert)
        gst.element_link_many(
            self.audioconvert, self.audioresample, self.audiorate, self.level,
            self.sink)
        # Now the RTP pads
        self.udpsrc_rtpin.link_pads('src', self.rtpbin, 'recv_rtp_sink_0')

        # Attach callbacks for dynamic pads (RTP output) and busses
        self.rtpbin.connect('pad-added', self.rtpbin_pad_added)
        self.bus.add_signal_watch()

    # Our RTPbin won't give us an audio pad till it receives, so we need to
    # attach it here
    def rtpbin_pad_added(self, obj, pad):
        # Unlink first.
        self.rtpbin.unlink(self.depayloader)
        # Relink
        self.rtpbin.link(self.depayloader)

    def on_message(self, bus, message):
        if message.type == gst.MESSAGE_ELEMENT:
            if message.structure.get_name() == 'level':
                if self.started is False:
                    self.started = True
                    if len(message.structure['peak']) == 1:
                        self.logger.info("Receiving mono audio transmission")
                    else:
                        self.logger.info("Receiving stereo audio transmission")

            if message.structure.get_name() == 'GstUDPSrcTimeout':
                # Only UDP source configured to emit timeouts is the audio
                # input
                self.logger.critical("No data received for 3 seconds!")
                if self.started:
                    self.logger.critical("Shutting down receiver for restart")
                    self.pipeline.set_state(gst.STATE_NULL)
                    self.loop.quit()
        return True

    def run(self):
        self.pipeline.set_state(gst.STATE_PLAYING)

    def loop(self):
        self.loop = gobject.MainLoop()
        self.loop.run()

########NEW FILE########
__FILENAME__ = tx
import gobject
import pygst
pygst.require("0.10")
import gst
import time
import re
from openob.logger import LoggerFactory


class RTPTransmitter(object):

    def __init__(self, node_name, link_config, audio_interface):
        """Sets up a new RTP transmitter"""
        self.started = False
        self.caps = 'None'
        self.pipeline = gst.Pipeline("tx")
        self.bus = self.pipeline.get_bus()
        self.bus.connect("message", self.on_message)
        self.link_config = link_config
        self.audio_interface = audio_interface
        self.logger_factory = LoggerFactory()
        self.logger = self.logger_factory.getLogger('node.%s.link.%s.%s' % (node_name, self.link_config.name, self.audio_interface.mode))
        self.logger.info("Starting up RTP transmitter")
        # Audio input
        if self.audio_interface.type == 'auto':
            self.source = gst.element_factory_make('autoaudiosrc')
        elif self.audio_interface.type == 'alsa':
            self.source = gst.element_factory_make('alsasrc')
            self.source.set_property('device', self.audio_interface.alsa_device)
        elif self.audio_interface.type == 'jack':
            self.source = gst.element_factory_make("jackaudiosrc")
            if self.audio_interface.jack_auto:
                self.source.set_property('connect', 'auto')
            else:
                self.source.set_property('connect', 'none')
            self.source.set_property('name', self.audio_interface.jack_name)
        # Audio conversion and resampling
        self.audioconvert = gst.element_factory_make("audioconvert")
        self.audioresample = gst.element_factory_make("audioresample")
        self.audioresample.set_property('quality', 9)  # SRC
        self.audiorate = gst.element_factory_make("audiorate")

        # Encoding and payloading
        if self.link_config.encoding == 'opus':
            self.encoder = gst.element_factory_make("opusenc", "encoder")
            self.encoder.set_property('bitrate', int(self.link_config.bitrate) * 1000)
            self.encoder.set_property('frame-size', self.link_config.opus_framesize)
            self.encoder.set_property('complexity', int(self.link_config.opus_complexity))
            self.encoder.set_property('inband-fec', self.link_config.opus_fec)
            self.encoder.set_property('packet-loss-percentage', int(self.link_config.opus_loss_expectation))
            self.encoder.set_property('dtx', self.link_config.opus_dtx)
            self.payloader = gst.element_factory_make("rtpopuspay", "payloader")
        elif self.link_config.encoding == 'pcm':
            # we have no encoder for PCM operation
            self.payloader = gst.element_factory_make("rtpL16pay", "payloader")
        else:
            self.logger.critical("Unknown encoding type %s" % self.link_config.encoding)
        # TODO: Add a tee here, and sort out creating multiple UDP sinks for multipath
        # Now the RTP bits
        # We'll send audio out on this
        self.udpsink_rtpout = gst.element_factory_make(
            "udpsink", "udpsink_rtp")
        self.udpsink_rtpout.set_property('host', self.link_config.receiver_host)
        self.udpsink_rtpout.set_property('port', self.link_config.port)
        if self.link_config.multicast:
            self.udpsink_rtpout.set_property('auto_multicast', True)

        # Our RTP manager
        self.rtpbin = gst.element_factory_make("gstrtpbin", "gstrtpbin")

        # Our level monitor
        self.level = gst.element_factory_make("level")
        self.level.set_property('message', True)
        self.level.set_property('interval', 1000000000)

        # Add a capsfilter to allow specification of input sample rate
        self.capsfilter = gst.element_factory_make("capsfilter")

        # Add to the pipeline
        self.pipeline.add(
            self.source, self.capsfilter, self.audioconvert, self.audioresample,
            self.audiorate, self.payloader, self.udpsink_rtpout, self.rtpbin,
            self.level)

        if self.link_config.encoding != 'pcm':
            # Only add the encoder if we're not in PCM mode
            self.pipeline.add(self.encoder)

        # Decide which format to apply to the capsfilter (Jack uses float)
        if self.audio_interface.type == 'jack':
            type = 'audio/x-raw-float'
        else:
            type = 'audio/x-raw-int'

        # if audio_rate has been specified, then add that to the capsfilter
        if self.audio_interface.samplerate != 0:
            self.capsfilter.set_property(
                "caps", gst.Caps('%s, channels=2, rate=%d' % (type, self.audio_interface.samplerate)))
        else:
            self.capsfilter.set_property(
                "caps", gst.Caps('%s, channels=2' % type))

        # Then continue linking the pipeline together
        gst.element_link_many(
            self.source, self.capsfilter, self.level, self.audioresample,
            self.audiorate, self.audioconvert)

        # Now we get to link this up to our encoder/payloader
        if self.link_config.encoding != 'pcm':
            gst.element_link_many(
                self.audioconvert, self.encoder, self.payloader)
        else:
            gst.element_link_many(self.audioconvert, self.payloader)

        # And now the RTP bits
        self.payloader.link_pads('src', self.rtpbin, 'send_rtp_sink_0')
        self.rtpbin.link_pads('send_rtp_src_0', self.udpsink_rtpout, 'sink')
        # self.udpsrc_rtcpin.link_pads('src', self.rtpbin, 'recv_rtcp_sink_0')
        # # RTCP SRs
        # self.rtpbin.link_pads('send_rtcp_src_0', self.udpsink_rtcpout, 'sink')
        # Connect our bus up
        self.bus.add_signal_watch()
        self.bus.connect('message', self.on_message)

    def run(self):
        self.pipeline.set_state(gst.STATE_PLAYING)
        while self.caps == 'None':
            self.logger.warn("Waiting for audio interface/caps")
            self.logger.debug(self.udpsink_rtpout.get_state())
            self.caps = str(
                self.udpsink_rtpout.get_pad('sink').get_property('caps'))
            # Fix for gstreamer bug in rtpopuspay fixed in GST-plugins-bad
            # 50140388d2b62d32dd9d0c071e3051ebc5b4083b, bug 686547
            if self.link_config.encoding == 'opus':
                self.caps = re.sub(r'(caps=.+ )', '', self.caps)
            time.sleep(0.1)

    def loop(self):
        try:
            self.loop = gobject.MainLoop()
            self.loop.run()
        except Exception, e:
            self.logger.exception("Encountered a problem in the MainLoop, tearing down the pipeline")
            self.pipeline.set_state(gst.STATE_NULL)

    def on_message(self, bus, message):
        if message.type == gst.MESSAGE_ELEMENT:
            if message.structure.get_name() == 'level':
                if self.started is False:
                    self.started = True
                    if len(message.structure['peak']) == 1:
                        self.logger.info("Started mono audio transmission")
                    else:
                        self.logger.info("Started stereo audio transmission")
        return True

    def get_caps(self):
        return self.caps

########NEW FILE########
