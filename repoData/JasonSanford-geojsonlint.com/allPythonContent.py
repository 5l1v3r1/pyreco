__FILENAME__ = cors_middleware
import re

from django.utils.text import compress_string
from django.utils.cache import patch_vary_headers

from django import http

try:
    import settings 
    XS_SHARING_ALLOWED_ORIGINS = settings.XS_SHARING_ALLOWED_ORIGINS
    XS_SHARING_ALLOWED_METHODS = settings.XS_SHARING_ALLOWED_METHODS
    XS_SHARING_ALLOWED_HEADERS = settings.XS_SHARING_ALLOWED_HEADERS
except:
    XS_SHARING_ALLOWED_ORIGINS = '*'
    XS_SHARING_ALLOWED_METHODS = ['POST','GET','OPTIONS', 'PUT', 'DELETE']
    XS_SHARING_ALLOWED_HEADERS = ['Origin', 'Content-Type', 'Accept']


class XsSharing(object):
    """
        This middleware allows cross-domain XHR using the html5 postMessage API.
         

        Access-Control-Allow-Origin: http://foo.example
        Access-Control-Allow-Methods: POST, GET, OPTIONS, PUT, DELETE
    """
    def process_request(self, request):

        if 'HTTP_ACCESS_CONTROL_REQUEST_METHOD' in request.META:
            response = http.HttpResponse()
            response['Access-Control-Allow-Origin']  = XS_SHARING_ALLOWED_ORIGINS 
            response['Access-Control-Allow-Methods'] = ",".join( XS_SHARING_ALLOWED_METHODS ) 
            response['Access-Control-Allow-Headers'] = ",".join( XS_SHARING_ALLOWED_HEADERS ) 
            
            return response

        return None

    def process_response(self, request, response):
        # Avoid unnecessary work
        if response.has_header('Access-Control-Allow-Origin'):
            return response

        response['Access-Control-Allow-Origin']  = XS_SHARING_ALLOWED_ORIGINS 
        response['Access-Control-Allow-Methods'] = ",".join( XS_SHARING_ALLOWED_METHODS )
        response['Access-Control-Allow-Headers'] = ",".join( XS_SHARING_ALLOWED_HEADERS ) 

        return response
########NEW FILE########
__FILENAME__ = exc
class GeoJSONValidationException(Exception):
    pass


class NonFetchableURLException(Exception):
    pass

########NEW FILE########
__FILENAME__ = models

########NEW FILE########
__FILENAME__ = sample_geojson
point = {
    "type": "Point",
    "coordinates": [
        -105.01621,
        39.57422
    ]
}

point_three = {
    "type": "Point",
    "coordinates": [
        -105.01621,
        39.57422,
        3
    ]
}

point_with_strings = {
    "type": "Point",
    "coordinates": [
        "cat",
        "dog",
        "lobster"
    ]
}

multipoint = {
    "type": "MultiPoint",
    "coordinates": [
        [-105.01621, 39.57422],
        [-80.6665134, 35.0539943]
    ]
}

linestring = {
    "type": "LineString",
    "coordinates": [
        [-101.744384765625, 39.32155002466662],
        [-101.5521240234375, 39.330048552942415],
        [-101.40380859375, 39.330048552942415],
        [-101.33239746093749, 39.364032338047984],
        [-101.041259765625, 39.36827914916011],
        [-100.975341796875, 39.30454987014581],
        [-100.9149169921875, 39.24501680713314],
        [-100.843505859375, 39.16414104768742],
        [-100.8050537109375, 39.104488809440475],
        [-100.491943359375, 39.10022600175347],
        [-100.43701171875, 39.095962936305476],
        [-100.338134765625, 39.095962936305476],
        [-100.1953125, 39.027718840211605],
        [-100.008544921875, 39.01064750994083],
        [-99.86572265625, 39.00211029922512],
        [-99.6844482421875, 38.97222194853654],
        [-99.51416015625, 38.929502416386605],
        [-99.38232421875, 38.92095542046727],
        [-99.3218994140625, 38.89530825492018],
        [-99.1131591796875, 38.86965182408357],
        [-99.0802001953125, 38.85682013474361],
        [-98.82202148437499, 38.85682013474361],
        [-98.44848632812499, 38.84826438869913],
        [-98.20678710937499, 38.84826438869913],
        [-98.02001953125, 38.8782049970615],
        [-97.635498046875, 38.87392853923629]
    ]
}

multilinestring = {
    "type": "MultiLineString",
    "coordinates": [
        [
            [-105.0214433670044, 39.57805759162015],
            [-105.02150774002075, 39.57780951131517],
            [-105.02157211303711, 39.57749527498758],
            [-105.02157211303711, 39.57716449836683],
            [-105.02157211303711, 39.57703218727656],
            [-105.02152919769287, 39.57678410330158]
        ],
        [
            [-105.01989841461182, 39.574997872470774],
            [-105.01959800720215, 39.57489863607502],
            [-105.01906156539916, 39.57478286010041]
        ],
        [
            [-105.01717329025269, 39.5744024519653],
            [-105.01698017120361, 39.574385912433804],
            [-105.0166368484497, 39.574385912433804],
            [-105.01650810241699, 39.5744024519653],
            [-105.0159502029419, 39.574270135602866]
        ],
        [
            [-105.0142765045166, 39.57397242286402],
            [-105.01412630081175, 39.57403858136094],
            [-105.0138258934021, 39.57417089816531],
            [-105.01331090927124, 39.57445207053608]
        ]
    ]
}

polygon = {
    "type": "Polygon",
    "coordinates": [
        [
            [-84.32281494140625, 34.9895035675793],
            [-84.29122924804688, 35.21981940793435],
            [-84.24041748046875, 35.25459097465022],
            [-84.22531127929688, 35.266925688950074],
            [-84.20745849609375, 35.26580442886754],
            [-84.19921875, 35.24674063355999],
            [-84.16213989257812, 35.24113278166642],
            [-84.12368774414062, 35.24898366572645],
            [-84.09072875976562, 35.24898366572645],
            [-84.08798217773438, 35.264683153268116],
            [-84.04266357421875, 35.27701633139884],
            [-84.03030395507812, 35.291589484566124],
            [-84.0234375, 35.306160014550784],
            [-84.03305053710936, 35.32745068492882],
            [-84.03579711914062, 35.34313496028189],
            [-84.03579711914062, 35.348735749472546],
            [-84.01657104492188, 35.35545618392078],
            [-84.01107788085938, 35.37337460834958],
            [-84.00970458984374, 35.39128905521763],
            [-84.01931762695312, 35.41479572901859],
            [-84.00283813476562, 35.429344044107154],
            [-83.93692016601562, 35.47409160773029],
            [-83.91220092773438, 35.47632833265728],
            [-83.88885498046875, 35.504282143299655],
            [-83.88473510742186, 35.516578738902936],
            [-83.8751220703125, 35.52104976129943],
            [-83.85314941406249, 35.52104976129943],
            [-83.82843017578125, 35.52104976129943],
            [-83.8092041015625, 35.53446133418443],
            [-83.80233764648438, 35.54116627999813],
            [-83.76800537109374, 35.56239491058853],
            [-83.7432861328125, 35.56239491058853],
            [-83.71994018554688, 35.56239491058853],
            [-83.67050170898438, 35.569097520776054],
            [-83.6334228515625, 35.570214567965984],
            [-83.61007690429688, 35.576916524038616],
            [-83.59634399414061, 35.574682600980914],
            [-83.5894775390625, 35.55904339525896],
            [-83.55239868164062, 35.56574628576276],
            [-83.49746704101562, 35.563512051219696],
            [-83.47000122070312, 35.586968406786475],
            [-83.4466552734375, 35.60818490437746],
            [-83.37936401367188, 35.63609277863135],
            [-83.35739135742188, 35.65618041632016],
            [-83.32305908203124, 35.66622234103479],
            [-83.3148193359375, 35.65394870599763],
            [-83.29971313476561, 35.660643649881614],
            [-83.28598022460938, 35.67180064238771],
            [-83.26126098632811, 35.6907639509368],
            [-83.25714111328125, 35.69968630125201],
            [-83.25576782226562, 35.715298012125295],
            [-83.23516845703125, 35.72310272092263],
            [-83.19808959960936, 35.72756221127198],
            [-83.16238403320312, 35.753199435570316],
            [-83.15826416015625, 35.76322914549896],
            [-83.10333251953125, 35.76991491635478],
            [-83.08685302734375, 35.7843988251953],
            [-83.0511474609375, 35.787740890986576],
            [-83.01681518554688, 35.78328477203738],
            [-83.001708984375, 35.77882840327371],
            [-82.96737670898438, 35.793310688351724],
            [-82.94540405273438, 35.820040281161],
            [-82.9193115234375, 35.85121343450061],
            [-82.9083251953125, 35.86902116501695],
            [-82.90557861328125, 35.87792352995116],
            [-82.91244506835938, 35.92353244718235],
            [-82.88360595703125, 35.94688293218141],
            [-82.85614013671875, 35.951329861522666],
            [-82.8424072265625, 35.94243575255426],
            [-82.825927734375, 35.92464453144099],
            [-82.80670166015625, 35.927980690382704],
            [-82.80532836914062, 35.94243575255426],
            [-82.77923583984375, 35.97356075349624],
            [-82.78060913085938, 35.99245209055831],
            [-82.76138305664062, 36.00356252895066],
            [-82.69546508789062, 36.04465753921525],
            [-82.64465332031249, 36.060201412392914],
            [-82.61306762695312, 36.060201412392914],
            [-82.60620117187499, 36.033552893400376],
            [-82.60620117187499, 35.991340960635405],
            [-82.60620117187499, 35.97911749857497],
            [-82.5787353515625, 35.96133453736691],
            [-82.5677490234375, 35.951329861522666],
            [-82.53067016601562, 35.97244935753683],
            [-82.46475219726562, 36.006895355244666],
            [-82.41668701171875, 36.070192281208456],
            [-82.37960815429686, 36.10126686921446],
            [-82.35488891601562, 36.117908916563685],
            [-82.34115600585936, 36.113471382052175],
            [-82.29583740234375, 36.13343831245866],
            [-82.26287841796874, 36.13565654678543],
            [-82.23403930664062, 36.13565654678543],
            [-82.2216796875, 36.154509006695],
            [-82.20382690429688, 36.15561783381855],
            [-82.19009399414062, 36.144528857027744],
            [-82.15438842773438, 36.15007354140755],
            [-82.14065551757812, 36.134547437460064],
            [-82.1337890625, 36.116799556445024],
            [-82.12142944335938, 36.10570509327921],
            [-82.08984375, 36.10792411128649],
            [-82.05276489257811, 36.12678323326429],
            [-82.03628540039062, 36.12900165569652],
            [-81.91268920898438, 36.29409768373033],
            [-81.89071655273438, 36.30959215409138],
            [-81.86325073242188, 36.33504067209607],
            [-81.83029174804688, 36.34499652561904],
            [-81.80145263671875, 36.35605709240176],
            [-81.77947998046874, 36.34610265300638],
            [-81.76162719726562, 36.33835943134047],
            [-81.73690795898438, 36.33835943134047],
            [-81.71905517578125, 36.33835943134047],
            [-81.70669555664062, 36.33504067209607],
            [-81.70669555664062, 36.342784223707234],
            [-81.72317504882812, 36.357163062654365],
            [-81.73278808593749, 36.379279167407965],
            [-81.73690795898438, 36.40028364332352],
            [-81.73690795898438, 36.41354670392876],
            [-81.72454833984374, 36.423492513472326],
            [-81.71768188476562, 36.445589751779174],
            [-81.69845581054688, 36.47541104282962],
            [-81.69845581054688, 36.51073994146672],
            [-81.705322265625, 36.53060536411363],
            [-81.69158935546875, 36.55929085774001],
            [-81.68060302734375, 36.56480607840351],
            [-81.68197631835938, 36.58686302344181],
            [-81.04202270507812, 36.56370306576917],
            [-80.74264526367186, 36.561496993252575],
            [-79.89120483398438, 36.54053616262899],
            [-78.68408203124999, 36.53943280355122],
            [-77.88345336914062, 36.54053616262899],
            [-76.91665649414062, 36.54163950596125],
            [-76.91665649414062, 36.55046568575947],
            [-76.31103515625, 36.551568887374],
            [-75.79605102539062, 36.54936246839778],
            [-75.6298828125, 36.07574221562703],
            [-75.4925537109375, 35.82226734114509],
            [-75.3936767578125, 35.639441068973916],
            [-75.41015624999999, 35.43829554739668],
            [-75.43212890625, 35.263561862152095],
            [-75.487060546875, 35.18727767598896],
            [-75.5914306640625, 35.17380831799959],
            [-75.9210205078125, 35.04798673426734],
            [-76.17919921875, 34.867904962568744],
            [-76.41540527343749, 34.62868797377061],
            [-76.4593505859375, 34.57442951865274],
            [-76.53076171875, 34.53371242139567],
            [-76.5911865234375, 34.551811369170494],
            [-76.651611328125, 34.615126683462194],
            [-76.761474609375, 34.63320791137959],
            [-77.069091796875, 34.59704151614417],
            [-77.376708984375, 34.45674800347809],
            [-77.5909423828125, 34.3207552752374],
            [-77.8326416015625, 33.97980872872457],
            [-77.9150390625, 33.80197351806589],
            [-77.9754638671875, 33.73804486328907],
            [-78.11279296875, 33.8521697014074],
            [-78.2830810546875, 33.8521697014074],
            [-78.4808349609375, 33.815666308702774],
            [-79.6728515625, 34.8047829195724],
            [-80.782470703125, 34.836349990763864],
            [-80.782470703125, 34.91746688928252],
            [-80.9307861328125, 35.092945313732635],
            [-81.0516357421875, 35.02999636902566],
            [-81.0516357421875, 35.05248370662468],
            [-81.0516357421875, 35.137879119634185],
            [-82.3150634765625, 35.19625600786368],
            [-82.3590087890625, 35.19625600786368],
            [-82.40295410156249, 35.22318504970181],
            [-82.4688720703125, 35.16931803601131],
            [-82.6885986328125, 35.1154153142536],
            [-82.781982421875, 35.06147690849717],
            [-83.1060791015625, 35.003003395276714],
            [-83.616943359375, 34.99850370014629],
            [-84.05639648437499, 34.985003130171066],
            [-84.22119140625, 34.985003130171066],
            [-84.32281494140625, 34.9895035675793]
        ],
        [
            [-75.69030761718749, 35.74205383068037],
            [-75.5914306640625, 35.74205383068037],
            [-75.5419921875, 35.585851593232356],
            [-75.56396484375, 35.32633026307483],
            [-75.69030761718749, 35.285984736065735],
            [-75.970458984375, 35.16482750605027],
            [-76.2066650390625, 34.994003757575776],
            [-76.300048828125, 35.02999636902566],
            [-76.409912109375, 35.07946034047981],
            [-76.5252685546875, 35.10642805736423],
            [-76.4208984375, 35.25907654252574],
            [-76.3385009765625, 35.294952147406576],
            [-76.0858154296875, 35.29943548054543],
            [-75.948486328125, 35.44277092585766],
            [-75.8660888671875, 35.53669637839501],
            [-75.772705078125, 35.567980458012094],
            [-75.706787109375, 35.634976650677295],
            [-75.706787109375, 35.74205383068037],
            [-75.69030761718749, 35.74205383068037]
        ]
    ]
}

polygon_non_coincident_first_last = {
    "type": "Polygon",
    "coordinates": [
        [
            [22.5, 31.952162238025],
            [33.75, 31.952162238025],
            [33.75, 40.97989806962],
            [22.5, 40.97989806962]
      ]
    ]
}

multipolygon = {
    "type": "MultiPolygon",
    "coordinates": [
        [
            [
                [-84.32281494140625, 34.9895035675793],
                [-84.29122924804688, 35.21981940793435],
                [-84.24041748046875, 35.25459097465022],
                [-84.22531127929688, 35.266925688950074],
                [-84.20745849609375, 35.26580442886754],
                [-84.19921875, 35.24674063355999],
                [-84.16213989257812, 35.24113278166642],
                [-84.12368774414062, 35.24898366572645],
                [-84.09072875976562, 35.24898366572645],
                [-84.08798217773438, 35.264683153268116],
                [-84.04266357421875, 35.27701633139884],
                [-84.03030395507812, 35.291589484566124],
                [-84.0234375, 35.306160014550784],
                [-84.03305053710936, 35.32745068492882],
                [-84.03579711914062, 35.34313496028189],
                [-84.03579711914062, 35.348735749472546],
                [-84.01657104492188, 35.35545618392078],
                [-84.01107788085938, 35.37337460834958],
                [-84.00970458984374, 35.39128905521763],
                [-84.01931762695312, 35.41479572901859],
                [-84.00283813476562, 35.429344044107154],
                [-83.93692016601562, 35.47409160773029],
                [-83.91220092773438, 35.47632833265728],
                [-83.88885498046875, 35.504282143299655],
                [-83.88473510742186, 35.516578738902936],
                [-83.8751220703125, 35.52104976129943],
                [-83.85314941406249, 35.52104976129943],
                [-83.82843017578125, 35.52104976129943],
                [-83.8092041015625, 35.53446133418443],
                [-83.80233764648438, 35.54116627999813],
                [-83.76800537109374, 35.56239491058853],
                [-83.7432861328125, 35.56239491058853],
                [-83.71994018554688, 35.56239491058853],
                [-83.67050170898438, 35.569097520776054],
                [-83.6334228515625, 35.570214567965984],
                [-83.61007690429688, 35.576916524038616],
                [-83.59634399414061, 35.574682600980914],
                [-83.5894775390625, 35.55904339525896],
                [-83.55239868164062, 35.56574628576276],
                [-83.49746704101562, 35.563512051219696],
                [-83.47000122070312, 35.586968406786475],
                [-83.4466552734375, 35.60818490437746],
                [-83.37936401367188, 35.63609277863135],
                [-83.35739135742188, 35.65618041632016],
                [-83.32305908203124, 35.66622234103479],
                [-83.3148193359375, 35.65394870599763],
                [-83.29971313476561, 35.660643649881614],
                [-83.28598022460938, 35.67180064238771],
                [-83.26126098632811, 35.6907639509368],
                [-83.25714111328125, 35.69968630125201],
                [-83.25576782226562, 35.715298012125295],
                [-83.23516845703125, 35.72310272092263],
                [-83.19808959960936, 35.72756221127198],
                [-83.16238403320312, 35.753199435570316],
                [-83.15826416015625, 35.76322914549896],
                [-83.10333251953125, 35.76991491635478],
                [-83.08685302734375, 35.7843988251953],
                [-83.0511474609375, 35.787740890986576],
                [-83.01681518554688, 35.78328477203738],
                [-83.001708984375, 35.77882840327371],
                [-82.96737670898438, 35.793310688351724],
                [-82.94540405273438, 35.820040281161],
                [-82.9193115234375, 35.85121343450061],
                [-82.9083251953125, 35.86902116501695],
                [-82.90557861328125, 35.87792352995116],
                [-82.91244506835938, 35.92353244718235],
                [-82.88360595703125, 35.94688293218141],
                [-82.85614013671875, 35.951329861522666],
                [-82.8424072265625, 35.94243575255426],
                [-82.825927734375, 35.92464453144099],
                [-82.80670166015625, 35.927980690382704],
                [-82.80532836914062, 35.94243575255426],
                [-82.77923583984375, 35.97356075349624],
                [-82.78060913085938, 35.99245209055831],
                [-82.76138305664062, 36.00356252895066],
                [-82.69546508789062, 36.04465753921525],
                [-82.64465332031249, 36.060201412392914],
                [-82.61306762695312, 36.060201412392914],
                [-82.60620117187499, 36.033552893400376],
                [-82.60620117187499, 35.991340960635405],
                [-82.60620117187499, 35.97911749857497],
                [-82.5787353515625, 35.96133453736691],
                [-82.5677490234375, 35.951329861522666],
                [-82.53067016601562, 35.97244935753683],
                [-82.46475219726562, 36.006895355244666],
                [-82.41668701171875, 36.070192281208456],
                [-82.37960815429686, 36.10126686921446],
                [-82.35488891601562, 36.117908916563685],
                [-82.34115600585936, 36.113471382052175],
                [-82.29583740234375, 36.13343831245866],
                [-82.26287841796874, 36.13565654678543],
                [-82.23403930664062, 36.13565654678543],
                [-82.2216796875, 36.154509006695],
                [-82.20382690429688, 36.15561783381855],
                [-82.19009399414062, 36.144528857027744],
                [-82.15438842773438, 36.15007354140755],
                [-82.14065551757812, 36.134547437460064],
                [-82.1337890625, 36.116799556445024],
                [-82.12142944335938, 36.10570509327921],
                [-82.08984375, 36.10792411128649],
                [-82.05276489257811, 36.12678323326429],
                [-82.03628540039062, 36.12900165569652],
                [-81.91268920898438, 36.29409768373033],
                [-81.89071655273438, 36.30959215409138],
                [-81.86325073242188, 36.33504067209607],
                [-81.83029174804688, 36.34499652561904],
                [-81.80145263671875, 36.35605709240176],
                [-81.77947998046874, 36.34610265300638],
                [-81.76162719726562, 36.33835943134047],
                [-81.73690795898438, 36.33835943134047],
                [-81.71905517578125, 36.33835943134047],
                [-81.70669555664062, 36.33504067209607],
                [-81.70669555664062, 36.342784223707234],
                [-81.72317504882812, 36.357163062654365],
                [-81.73278808593749, 36.379279167407965],
                [-81.73690795898438, 36.40028364332352],
                [-81.73690795898438, 36.41354670392876],
                [-81.72454833984374, 36.423492513472326],
                [-81.71768188476562, 36.445589751779174],
                [-81.69845581054688, 36.47541104282962],
                [-81.69845581054688, 36.51073994146672],
                [-81.705322265625, 36.53060536411363],
                [-81.69158935546875, 36.55929085774001],
                [-81.68060302734375, 36.56480607840351],
                [-81.68197631835938, 36.58686302344181],
                [-81.04202270507812, 36.56370306576917],
                [-80.74264526367186, 36.561496993252575],
                [-79.89120483398438, 36.54053616262899],
                [-78.68408203124999, 36.53943280355122],
                [-77.88345336914062, 36.54053616262899],
                [-76.91665649414062, 36.54163950596125],
                [-76.91665649414062, 36.55046568575947],
                [-76.31103515625, 36.551568887374],
                [-75.79605102539062, 36.54936246839778],
                [-75.6298828125, 36.07574221562703],
                [-75.4925537109375, 35.82226734114509],
                [-75.3936767578125, 35.639441068973916],
                [-75.41015624999999, 35.43829554739668],
                [-75.43212890625, 35.263561862152095],
                [-75.487060546875, 35.18727767598896],
                [-75.5914306640625, 35.17380831799959],
                [-75.9210205078125, 35.04798673426734],
                [-76.17919921875, 34.867904962568744],
                [-76.41540527343749, 34.62868797377061],
                [-76.4593505859375, 34.57442951865274],
                [-76.53076171875, 34.53371242139567],
                [-76.5911865234375, 34.551811369170494],
                [-76.651611328125, 34.615126683462194],
                [-76.761474609375, 34.63320791137959],
                [-77.069091796875, 34.59704151614417],
                [-77.376708984375, 34.45674800347809],
                [-77.5909423828125, 34.3207552752374],
                [-77.8326416015625, 33.97980872872457],
                [-77.9150390625, 33.80197351806589],
                [-77.9754638671875, 33.73804486328907],
                [-78.11279296875, 33.8521697014074],
                [-78.2830810546875, 33.8521697014074],
                [-78.4808349609375, 33.815666308702774],
                [-79.6728515625, 34.8047829195724],
                [-80.782470703125, 34.836349990763864],
                [-80.782470703125, 34.91746688928252],
                [-80.9307861328125, 35.092945313732635],
                [-81.0516357421875, 35.02999636902566],
                [-81.0516357421875, 35.05248370662468],
                [-81.0516357421875, 35.137879119634185],
                [-82.3150634765625, 35.19625600786368],
                [-82.3590087890625, 35.19625600786368],
                [-82.40295410156249, 35.22318504970181],
                [-82.4688720703125, 35.16931803601131],
                [-82.6885986328125, 35.1154153142536],
                [-82.781982421875, 35.06147690849717],
                [-83.1060791015625, 35.003003395276714],
                [-83.616943359375, 34.99850370014629],
                [-84.05639648437499, 34.985003130171066],
                [-84.22119140625, 34.985003130171066],
                [-84.32281494140625, 34.9895035675793]
            ],
            [
                [-75.69030761718749, 35.74205383068037],
                [-75.5914306640625, 35.74205383068037],
                [-75.5419921875, 35.585851593232356],
                [-75.56396484375, 35.32633026307483],
                [-75.69030761718749, 35.285984736065735],
                [-75.970458984375, 35.16482750605027],
                [-76.2066650390625, 34.994003757575776],
                [-76.300048828125, 35.02999636902566],
                [-76.409912109375, 35.07946034047981],
                [-76.5252685546875, 35.10642805736423],
                [-76.4208984375, 35.25907654252574],
                [-76.3385009765625, 35.294952147406576],
                [-76.0858154296875, 35.29943548054543],
                [-75.948486328125, 35.44277092585766],
                [-75.8660888671875, 35.53669637839501],
                [-75.772705078125, 35.567980458012094],
                [-75.706787109375, 35.634976650677295],
                [-75.706787109375, 35.74205383068037],
                [-75.69030761718749, 35.74205383068037]
            ]
        ],
        [
            [
                [-109.0283203125, 36.98500309285596],
                [-109.0283203125, 40.97989806962013],
                [-102.06298828125, 40.97989806962013],
                [-102.06298828125, 37.00255267215955],
                [-109.0283203125, 36.98500309285596]
            ]
        ]
    ]
}

feature = {
    "type": "Feature",
    "geometry": {
        "type": "Polygon",
        "coordinates": [
            [
                [-80.72487831115721, 35.26545403190955],
                [-80.72135925292969, 35.26727607954368],
                [-80.71517944335938, 35.26769654625573],
                [-80.7125186920166, 35.27035945142482],
                [-80.70857048034668, 35.268257165144064],
                [-80.70479393005371, 35.268397319259996],
                [-80.70324897766113, 35.26503355355979],
                [-80.71088790893555, 35.2553619492954],
                [-80.71681022644043, 35.2553619492954],
                [-80.7150936126709, 35.26054831539319],
                [-80.71869850158691, 35.26026797976481],
                [-80.72032928466797, 35.26061839914875],
                [-80.72264671325684, 35.26033806376283],
                [-80.72487831115721, 35.26545403190955]
            ]
        ]
    },
    "properties": {
        "name": "Plaza Road Park"
    }
}

feature_bad_geom = {
    "geometry": {
        "type": "BROKEN"
    },
    "properties": {},
    "type": "Feature"
}

featurecollection = {
    "type": "FeatureCollection",
    "features": [
        {
            "type": "Feature",
            "geometry": {
                "type": "Point",
                "coordinates": [
                    -80.87088507656375,
                    35.21515162500578
                ]
            },
            "properties": {
                "name": "ABBOTT NEIGHBORHOOD PARK",
                "address": "1300  SPRUCE ST"
            }
        },
        {
            "type": "Feature",
            "geometry": {
                "type": "Point",
                "coordinates": [
                    -80.83775386582222,
                    35.24980190252168
                ]
            },
            "properties": {
                "name": "DOUBLE OAKS CENTER",
                "address": "1326 WOODWARD AV"
            }
        },
        {
            "type": "Feature",
            "geometry": {
                "type": "Point",
                "coordinates": [
                    -80.83827000459532,
                    35.25674709224663
                ]
            },
            "properties": {
                "name": "DOUBLE OAKS NEIGHBORHOOD PARK",
                "address": "2605  DOUBLE OAKS RD"
            }
        },
        {
            "type": "Feature",
            "geometry": {
                "type": "Point",
                "coordinates": [
                    -80.83697759172735,
                    35.25751734669229
                ]
            },
            "properties": {
                "name": "DOUBLE OAKS POOL",
                "address": "1200 NEWLAND RD"
            }
        },
        {
            "type": "Feature",
            "geometry": {
                "type": "Point",
                "coordinates": [
                    -80.81647652154736,
                    35.40148708491418
                ]
            },
            "properties": {
                "name": "DAVID B. WAYMER FLYING REGIONAL PARK",
                "address": "15401 HOLBROOKS RD"
            }
        },
        {
            "type": "Feature",
            "geometry": {
                "type": "Point",
                "coordinates": [
                    -80.83556459443902,
                    35.39917224760999
                ]
            },
            "properties": {
                "name": "DAVID B. WAYMER COMMUNITY PARK",
                "address": "302 HOLBROOKS RD"
            }
        },
        {
            "type": "Feature",
            "geometry": {
                "type": "Polygon",
                "coordinates": [
                    [
                        [-80.72487831115721, 35.26545403190955],
                        [-80.72135925292969, 35.26727607954368],
                        [-80.71517944335938, 35.26769654625573],
                        [-80.7125186920166, 35.27035945142482],
                        [-80.70857048034668, 35.268257165144064],
                        [-80.70479393005371, 35.268397319259996],
                        [-80.70324897766113, 35.26503355355979],
                        [-80.71088790893555, 35.2553619492954],
                        [-80.71681022644043, 35.2553619492954],
                        [-80.7150936126709, 35.26054831539319],
                        [-80.71869850158691, 35.26026797976481],
                        [-80.72032928466797, 35.26061839914875],
                        [-80.72264671325684, 35.26033806376283],
                        [-80.72487831115721, 35.26545403190955]
                    ]
                ]
            },
            "properties": {
                "name": "Plaza Road Park"
            }
        }
    ]
}

featurecollection_bad_geom = {
    "features": [
        {
            "geometry": {
                "type": "BROKEN"
            },
            "properties": {},
            "type": "Feature"
        }
    ],
    "type": "FeatureCollection"
}

featurecollection_missing_feature_types = {
    "type": "FeatureCollection",
    "features": [
        {
            "id": "1",
            "properties": {
                "displacement": 2.3,
                "color": "black"
            },
            "geometry": {
                "type": "GeometryCollection",
                "geometries": [
                    {
                        "type": "Point",
                        "coordinates": [200, 400]
                    },
                    {
                        "type": "LineString",
                        "coordinates": [
                            [200, 400],
                            [230, 440]
                        ]
                    }
                ]
            }
        },
        {
            "id": "2",
            "properties": {
                "displacement": 3.7,
                "color": "red"
            },
            "geometry": {
                "type": "GeometryCollection",
                "geometries": [
                    {
                        "type": "Point",
                        "coordinates": [1442, 888]
                    },
                    {
                        "type": "LineString",
                        "coordinates": [
                            [1442,888],
                            [1450, 825]
                        ]
                    }
                ]
            }
        }
    ]
}

geometrycollection = {
    "type": "GeometryCollection",
    "geometries": [
        {
            "type": "Point",
            "coordinates": [-80.66080570220947, 35.04939206472683]
        },
        {
            "type": "Polygon",
            "coordinates": [
                [
                    [-80.66458225250244, 35.04496519190309],
                    [-80.66344499588013, 35.04603679820616],
                    [-80.66258668899536, 35.045580049697556],
                    [-80.66387414932251, 35.044280059194946],
                    [-80.66458225250244, 35.04496519190309]
                ]
            ]
        },
        {
            "type": "LineString",
            "coordinates": [
                [-80.66237211227417, 35.05950973022538],
                [-80.66269397735596, 35.0592638296087],
                [-80.66284418106079, 35.05893010615862],
                [-80.66308021545409, 35.05833291342246],
                [-80.66359519958496, 35.057753281001425],
                [-80.66387414932251, 35.05740198662245],
                [-80.66441059112549, 35.05703312589789],
                [-80.66486120223999, 35.056787217822475],
                [-80.66541910171509, 35.05650617911516],
                [-80.66563367843628, 35.05631296444281],
                [-80.66601991653441, 35.055891403570705],
                [-80.66619157791138, 35.05545227534804],
                [-80.66619157791138, 35.05517123204622],
                [-80.66625595092773, 35.05489018777713],
                [-80.6662130355835, 35.054222703761525],
                [-80.6662130355835, 35.05392409072499],
                [-80.66595554351807, 35.05290528508858],
                [-80.66569805145262, 35.052044560077285],
                [-80.66550493240356, 35.0514824490509],
                [-80.665762424469, 35.05048117920187],
                [-80.66617012023926, 35.04972582715769],
                [-80.66651344299316, 35.049286665781096],
                [-80.66692113876343, 35.0485313026898],
                [-80.66700696945189, 35.048215102112344],
                [-80.66707134246826, 35.04777593261294],
                [-80.66704988479614, 35.04738946150025],
                [-80.66696405410767, 35.04698542156371],
                [-80.66681385040283, 35.046353007216055],
                [-80.66659927368164, 35.04596652937105],
                [-80.66640615463257, 35.04561518428889],
                [-80.6659984588623, 35.045193568195565],
                [-80.66552639007568, 35.044877354697526],
                [-80.6649899482727, 35.04454357245502],
                [-80.66449642181396, 35.04417465365292],
                [-80.66385269165039, 35.04387600387859],
                [-80.66303730010986, 35.043717894732545]
            ]
        }
    ]
}

bad_type = {
    "type": "Rhombus",
    "coordinates": [1, 2, 3, 4, 5]
}

########NEW FILE########
__FILENAME__ = schemas
position = {
    "type": "array",
    "minItems": 2,
    "maxItems": 3,
    "items": {
        "type": "number"
    }
}

point = {
    "type": "object",
    "properties": {
        "type": {
            "pattern": "^Point$"
        },
        "coordinates": {
            "type": position
        }
    }
}

multipoint = {
    "type": "object",
    "properties": {
        "type": {
            "pattern": "^MultiPoint$"
        },
        "coordinates": {
            "type": "array",
            "minItems": 2,
            "items": position
        }
    }
}

linestring = {
    "type": "object",
    "properties": {
        "type": {
            "pattern": "^LineString$"
        },
        "coordinates": {
            "type": "array",
            "minItems": 2,
            "items": position
        }
    }
}

multilinestring = {
    "type": "object",
    "properties": {
        "type": {
            "pattern": "^MultiLineString$"
        },
        "coordinates": {
            "type": "array",
            "items": {
                "type": "array",
                "minItems": 2,
                "items": position
            }
        }
    }
}

polygon = {
    "type": "object",
    "properties": {
        "type": {
            "pattern": "^Polygon$"
        },
        "coordinates": {
            "type": "array",
            "items": {
                "type": "array",
                "minItems": 4,
                "items": position
            }
        }
    }
}

multipolygon = {
    "type": "object",
    "properties": {
        "type": {
            "pattern": "^MultiPolygon$"
        },
        "coordinates": {
            "type": "array",
            "items": {
                "type": "array",
                "items": {
                    "type": "array",
                    "minItems": 4,
                    "items": position
                }
            }
        }
    }
}

geometrycollection = {
    "type": "object",
    "properties": {
        "type": {
            "pattern": "^GeometryCollection$"
        },
        "geometries": {
            "type": "array",
            "items": {
                "type": [
                    point,
                    multipoint,
                    linestring,
                    multilinestring,
                    polygon,
                    multipolygon
                ]
            }
        }
    }
}

feature = {
    "type": "object",
    "properties": {
        "type": {
            "pattern": "^Feature$"
        },
        "properties": {
            "type": [
                "object",
                None
            ]
        },
        "geometry": {
            "type": [
                point,
                multipoint,
                linestring,
                multilinestring,
                polygon,
                multipolygon,
                geometrycollection,
                None
            ]
        }
    }
}

featurecollection = {
    "type": "object",
    "properties": {
        "type": {
            "pattern": "^FeatureCollection$"
        },
        "features": {
            "type": "array",
            "items": feature
        }
    }
}
########NEW FILE########
__FILENAME__ = settings
import os
# Django settings for geojsonlint project.

DEBUG = True
TEMPLATE_DEBUG = DEBUG

ADMINS = (
    # ('Your Name', 'your_email@example.com'),
)

MANAGERS = ADMINS

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.', # Add 'postgresql_psycopg2', 'mysql', 'sqlite3' or 'oracle'.
        'NAME': '',                      # Or path to database file if using sqlite3.
        'USER': '',                      # Not used with sqlite3.
        'PASSWORD': '',                  # Not used with sqlite3.
        'HOST': '',                      # Set to empty string for localhost. Not used with sqlite3.
        'PORT': '',                      # Set to empty string for default. Not used with sqlite3.
    }
}

# Local time zone for this installation. Choices can be found here:
# http://en.wikipedia.org/wiki/List_of_tz_zones_by_name
# although not all choices may be available on all operating systems.
# In a Windows environment this must be set to your system time zone.
TIME_ZONE = 'America/Chicago'

# Language code for this installation. All choices can be found here:
# http://www.i18nguy.com/unicode/language-identifiers.html
LANGUAGE_CODE = 'en-us'

SITE_ID = 1

# If you set this to False, Django will make some optimizations so as not
# to load the internationalization machinery.
USE_I18N = True

# If you set this to False, Django will not format dates, numbers and
# calendars according to the current locale.
USE_L10N = True

# If you set this to False, Django will not use timezone-aware datetimes.
USE_TZ = True

# Absolute filesystem path to the directory that will hold user-uploaded files.
# Example: "/home/media/media.lawrence.com/media/"
MEDIA_ROOT = ''

# URL that handles the media served from MEDIA_ROOT. Make sure to use a
# trailing slash.
# Examples: "http://media.lawrence.com/media/", "http://example.com/media/"
MEDIA_URL = ''

# Absolute path to the directory static files should be collected to.
# Don't put anything in this directory yourself; store your static files
# in apps' "static/" subdirectories and in STATICFILES_DIRS.
# Example: "/home/media/media.lawrence.com/static/"
STATIC_ROOT = 'static/'

# URL prefix for static files.
# Example: "http://media.lawrence.com/static/"
STATIC_URL = '/static/'

# Additional locations of static files
STATICFILES_DIRS = (
    # Put strings here, like "/home/html/static" or "C:/www/django/static".
    # Always use forward slashes, even on Windows.
    # Don't forget to use absolute paths, not relative paths.
    os.path.join('geojsonlint', 'static'),
)

# List of finder classes that know how to find static files in
# various locations.
STATICFILES_FINDERS = (
    'django.contrib.staticfiles.finders.FileSystemFinder',
    'django.contrib.staticfiles.finders.AppDirectoriesFinder',
#    'django.contrib.staticfiles.finders.DefaultStorageFinder',
)

# Make this unique, and don't share it with anybody.
SECRET_KEY = 'pwlkb)i(7l%&amp;*yjh+v96rxqdp@_c)9v*ey799=e@7tqy9v-k(3'

# List of callables that know how to import templates from various sources.
TEMPLATE_LOADERS = (
    'django.template.loaders.filesystem.Loader',
    'django.template.loaders.app_directories.Loader',
#     'django.template.loaders.eggs.Loader',
)

MIDDLEWARE_CLASSES = (
    'django.middleware.common.CommonMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    #'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    # Uncomment the next line for simple clickjacking protection:
    # 'django.middleware.clickjacking.XFrameOptionsMiddleware',
    'geojsonlint.cors_middleware.XsSharing',
    # For proper error handling Rollbar should remain last here
    'rollbar.contrib.django.middleware.RollbarNotifierMiddleware',
)

ROOT_URLCONF = 'geojsonlint.urls'

# Python dotted path to the WSGI application used by Django's runserver.
WSGI_APPLICATION = 'geojsonlint.wsgi.application'

TEMPLATE_DIRS = (
    # Put strings here, like "/home/html/django_templates" or "C:/www/django/templates".
    # Always use forward slashes, even on Windows.
    # Don't forget to use absolute paths, not relative paths.
    os.path.join('geojsonlint', 'templates')
)

INSTALLED_APPS = (
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.sites',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    # Uncomment the next line to enable the admin:
    # 'django.contrib.admin',
    # Uncomment the next line to enable admin documentation:
    # 'django.contrib.admindocs',
    'geojsonlint',
)

# A sample logging configuration. The only tangible logging
# performed by this configuration is to send an email to
# the site admins on every HTTP 500 error when DEBUG=False.
# See http://docs.djangoproject.com/en/dev/topics/logging for
# more details on how to customize your logging configuration.
LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'filters': {
        'require_debug_false': {
            '()': 'django.utils.log.RequireDebugFalse'
        }
    },
    'handlers': {
        'mail_admins': {
            'level': 'ERROR',
            'filters': ['require_debug_false'],
            'class': 'django.utils.log.AdminEmailHandler'
        }
    },
    'loggers': {
        'django.request': {
            'handlers': ['mail_admins'],
            'level': 'ERROR',
            'propagate': True,
        },
    }
}

TEST_RUNNER = 'testrunner.NoDbTestRunner'

ROLLBAR = {
    'access_token': '42b2abfd9da944edb33a38ce62269d16',
    'environment': 'development' if DEBUG else 'production',
    'branch': 'master',
    'root': os.path.realpath(os.path.join(os.getcwd(), '..')),
}

########NEW FILE########
__FILENAME__ = tests
import json
from urllib import urlencode

from django.utils import unittest
from django.test.client import Client

import sample_geojson as samples
from utils import validate_geojson
from exc import GeoJSONValidationException

GOOD_RESPONSE = {
    'status': 'ok'
}
JSON = 'application/json'
validate_url = '/validate'

#
# Functional Tests
#

class RequestTestCase(unittest.TestCase):
    def setUp(self):
        self.geojson_url = 'http://gitspatial.com/api/v1/JasonSanford/mecklenburg-gis-opendata/parks?lat=35.255&lon=-80.855&distance=1750'
        self.geojson_url_bad1 = 'http://www.lobsterscatsdogsotheranimals.com'
        self.geojson_url_bad2 = 'http://gitspatial.com/api/v1/JasonSanford/mecklenburg-gis-opendata/lobsters?lat=35.255&lon=-80.855&distance=1750'
        self.client = Client()

class TestHome(RequestTestCase):

    def test_home(self):
        response = self.client.get('/')

        self.assertEqual(response.status_code, 200)


class TestValidateBadType(RequestTestCase):

    def test_bad_type(self):
        bad_type = {
            "type": "Rhombus",
            "coordinates": [1, 2, 3, 4, 5]
        }
        bad_type_message = {
            'status': 'error',
            'message': '"Rhombus" is not a valid GeoJSON type.'
        }

        response = self.client.post(validate_url, data=json.dumps(bad_type),
                                    content_type=JSON)

        self.assertEqual(json.loads(response.content), bad_type_message)


class TestValidateGoodType(RequestTestCase):

    def test_good_type(self):
        response = self.client.post(validate_url,
                                    data=json.dumps(samples.point),
                                    content_type=JSON)

        self.assertEqual(json.loads(response.content), GOOD_RESPONSE)


class TestValidateBadPosition(RequestTestCase):

    def test_bad_position(self):
        response = self.client.post(validate_url,
                                    data=json.dumps(samples.point_with_strings),
                                    content_type=JSON)
        response_json = json.loads(response.content)
        self.assertEqual(response_json['status'], 'error')


class TestValidateNullProperties(RequestTestCase):

    def test_null_properties(self):
        null_properties_feature = {
            "type": "Feature",
            "geometry": {
                "type": "Point",
                "coordinates": [-100, 80]
            },
            "properties": None
        }

        response = self.client.post(validate_url,
                                    data=json.dumps(null_properties_feature),
                                    content_type=JSON)

        self.assertEqual(json.loads(response.content), GOOD_RESPONSE)


class TestValidateNullGeometry(RequestTestCase):

    def test_null_geometry(self):
        null_properties_feature = {
            "type": "Feature",
            "geometry": None,
            "properties": {
                "city": "Littleton"
            }
        }

        response = self.client.post(validate_url,
                                    data=json.dumps(null_properties_feature),
                                    content_type=JSON)

        self.assertEqual(json.loads(response.content), GOOD_RESPONSE)


class TestValidateFeatureBadGeometry(RequestTestCase):

    def test_bad_feature_collection_geom(self):
        bad_geom = {
            "features": [
                {
                    "geometry": {
                        "type": "BROKEN"
                    },
                    "properties": {},
                    "type": "Feature"
                }
            ],
            "type": "FeatureCollection"
        }

        response = self.client.post(validate_url,
                                    data=json.dumps(bad_geom),
                                    content_type=JSON)
        self.assertEqual(json.loads(response.content), {'status': 'error', 'message': '"BROKEN" is not a valid GeoJSON type.'})

    def test_bad_feature_geom(self):
        bad_geom = {
            "geometry": {
                "type": "BROKEN"
            },
            "properties": {},
            "type": "Feature"
        }

        response = self.client.post(validate_url,
                                    data=json.dumps(bad_geom),
                                    content_type=JSON)
        response_json = json.loads(response.content)
        self.assertEqual(response_json['status'], 'error')

    def test_no_geom(self):
        no_geom = {
            "properties": {},
            "type": "Feature"
        }

        response = self.client.post(validate_url,
                                    data=json.dumps(no_geom),
                                    content_type=JSON)
        response_json = json.loads(response.content)
        self.assertEqual(response_json['status'], 'error')
        self.assertEqual(response_json['message'], 'A Feature must have a "geometry" property.')

    def test_no_properties(self):
        no_props = {
            "geometry": None,
            "type": "Feature"
        }

        response = self.client.post(validate_url,
                                    data=json.dumps(no_props),
                                    content_type=JSON)
        response_json = json.loads(response.content)
        self.assertEqual(response_json['status'], 'error')
        self.assertEqual(response_json['message'], 'A Feature must have a "properties" property.')

class TestFeatureCollectionBadFeatures(RequestTestCase):

    def test_is_not_list_or_tuple(self):
        bad_fc = {
            "type": "FeatureCollection",
            "features": 'lobster'
        }
        response = self.client.post(validate_url,
                                    data=json.dumps(bad_fc),
                                    content_type=JSON)
        response_json = json.loads(response.content)
        self.assertEqual(response_json['status'], 'error')
        self.assertEqual(response_json['message'], 'A FeatureCollection\'s "features" property must be an array.')

    def test_no_features(self):
        bad_fc = {
            "type": "FeatureCollection",
        }
        response = self.client.post(validate_url,
                                    data=json.dumps(bad_fc),
                                    content_type=JSON)
        response_json = json.loads(response.content)
        self.assertEqual(response_json['status'], 'error')
        self.assertEqual(response_json['message'], 'A FeatureCollection must have a "features" property.')


class TestGeometryCollectionBadGeometries(RequestTestCase):

    def test_is_not_list_or_tuple(self):
        bad_gc = {
            "type": "GeometryCollection",
            "geometries": 'lobster'
        }
        response = self.client.post(validate_url,
                                    data=json.dumps(bad_gc),
                                    content_type=JSON)
        response_json = json.loads(response.content)
        self.assertEqual(response_json['status'], 'error')
        self.assertEqual(response_json['message'], 'A GeometryCollection\'s "geometries" property must be an array.')

    def test_no_geometries(self):
        bad_gc = {
            "type": "GeometryCollection",
        }
        response = self.client.post(validate_url,
                                    data=json.dumps(bad_gc),
                                    content_type=JSON)
        response_json = json.loads(response.content)
        self.assertEqual(response_json['status'], 'error')
        self.assertEqual(response_json['message'], 'A GeometryCollection must have a "geometries" property.')


class TestValidateBadJSON(RequestTestCase):

    def test_bad_json(self):
        # Missing ending curly brace
        bad_json = """
        {
            "type": "LineString",
            "coordinates": [
                [1, 2],
                [3, 4],
                [5, 6]
            ]
        """
        bad_json_message = {
            'status': 'error',
            'message': 'Data was not JSON serializeable.'
        }

        response = self.client.post(validate_url, data=bad_json,
                                    content_type=JSON)

        self.assertEqual(json.loads(response.content), bad_json_message)


class TestValidateNoType(RequestTestCase):

    def test_bad_json(self):
        # Missing ending curly brace
        no_type_json = {
            'coordinates': [56, 79]
        }
        no_type_message = {
            'status': 'error',
            'message': 'The "type" member is required and was not found.'
        }

        response = self.client.post(validate_url, data=json.dumps(no_type_json),
                                    content_type=JSON)

        self.assertEqual(json.loads(response.content), no_type_message)


class TestValidateNotAnObject(RequestTestCase):

    def test_not_an_object(self):
        not_an_object = [1, 2, 3, 'cat', 'house']
        not_an_object_message = {
            'status': 'error',
            'message': 'Data was not a JSON object.'
        }

        response = self.client.post(validate_url,
                                    data=json.dumps(not_an_object),
                                    content_type=JSON)

        self.assertEqual(json.loads(response.content), not_an_object_message)


class TestValidateHTTPMethods(RequestTestCase):

    def test_post(self):
        post_response = self.client.post(validate_url,
                                         data=json.dumps(samples.point),
                                         content_type=JSON)
        self.assertEqual(post_response.status_code, 200)

    def test_get(self):
        encoded = urlencode({'url': self.geojson_url})
        get_response = self.client.get(validate_url + ('?%s' % encoded))
        self.assertEqual(get_response.status_code, 200)

    def test_put(self):
        put_response = self.client.put(validate_url,
                                       data=json.dumps(samples.point),
                                       content_type=JSON)
        self.assertEqual(put_response.status_code, 405)

    def test_delete(self):
        delete_response = self.client.delete(validate_url)
        self.assertEqual(delete_response.status_code, 405)


class TestValidateValidThings(RequestTestCase):

    def test_point(self):
        resp_point = self.client.post(validate_url,
                                      data=json.dumps(samples.point),
                                      content_type=JSON)
        self.assertEqual(json.loads(resp_point.content), GOOD_RESPONSE)

    def test_point_three(self):
        resp_point_three = self.client.post(validate_url,
                                            data=json.dumps(samples.point_three),
                                            content_type=JSON)
        self.assertEqual(json.loads(resp_point_three.content), GOOD_RESPONSE)

    def test_multipoint(self):
        resp_multipoint = self.client.post(validate_url,
                                           data=json.dumps(samples.multipoint),
                                           content_type=JSON)
        self.assertEqual(json.loads(resp_multipoint.content), GOOD_RESPONSE)

    def test_linestring(self):
        resp_linestring = self.client.post(validate_url,
                                           data=json.dumps(samples.linestring),
                                           content_type=JSON)
        self.assertEqual(json.loads(resp_linestring.content), GOOD_RESPONSE)

    def test_multilinestring(self):
        resp_multilinestring = self.client.post(validate_url,
                                                data=json.dumps(samples.multilinestring),
                                                content_type=JSON)
        self.assertEqual(json.loads(resp_multilinestring.content), GOOD_RESPONSE)

    def test_polygon(self):
        resp_polygon = self.client.post(validate_url,
                                        data=json.dumps(samples.polygon),
                                        content_type=JSON)
        self.assertEqual(json.loads(resp_polygon.content), GOOD_RESPONSE)

    def test_multipolygon(self):
        resp_multipolygon = self.client.post(validate_url,
                                             data=json.dumps(samples.multipolygon),
                                             content_type=JSON)
        self.assertEqual(json.loads(resp_multipolygon.content), GOOD_RESPONSE)

    def test_feature(self):
        resp_feature = self.client.post(validate_url,
                                        data=json.dumps(samples.feature),
                                        content_type=JSON)
        self.assertEqual(json.loads(resp_feature.content), GOOD_RESPONSE)

    def test_featurecollection(self):
        resp_featurecollection = self.client.post(validate_url,
                                                  data=json.dumps(samples.featurecollection),
                                                  content_type=JSON)
        self.assertEqual(json.loads(resp_featurecollection.content), GOOD_RESPONSE)

    def test_geometrycollection(self):
        resp_geometrycollection = self.client.post(validate_url,
                                                   data=json.dumps(samples.geometrycollection),
                                                   content_type=JSON)
        self.assertEqual(json.loads(resp_geometrycollection.content), GOOD_RESPONSE)

class TestURLParameters(RequestTestCase):

    def test_url(self):
        encoded = urlencode({'url': self.geojson_url})
        resp = self.client.get(validate_url + ('?%s' % encoded))
        json_content = json.loads(resp.content)
        expected = {'status': 'ok'}
        self.assertEqual(resp.status_code, 200)
        self.assertEqual(json_content, expected)

    def test_bad_url_parameter(self):
        encoded = urlencode({'urlzzz': self.geojson_url})
        resp = self.client.get(validate_url + ('?%s' % encoded))
        json_content = json.loads(resp.content)
        expected = {'status': 'error', 'message': 'When validating via GET, a "url" URL parameter is required.'}
        self.assertEqual(resp.status_code, 400)
        self.assertEqual(json_content, expected)

    def test_could_not_be_fetched(self):
        # A valid domain, but should get a 404 for the requested URL
        encoded = urlencode({'url': self.geojson_url_bad2})
        resp = self.client.get(validate_url + ('?%s' % encoded))
        json_content = json.loads(resp.content)
        expected = {'status': 'error', 'message': 'The URL passed could not be fetched.'}
        self.assertEqual(resp.status_code, 200)
        self.assertEqual(json_content, expected)
#
# Unit Tests
#
class UnitTestValidGeoJSON(unittest.TestCase):
    s = samples
    valids = [
        s.point,
        s.point_three,
        s.multipoint,
        s.linestring,
        s.multilinestring,
        s.polygon,
        s.multipolygon,
        s.feature,
        s.featurecollection,
        s.geometrycollection,
    ]
    for valid in valids:
        # A GeoJSONValidationException will be raised if something is invalid, so just looping is fine.
        validate_geojson(valid)


class UnitTestInvalidGeoJSON(unittest.TestCase):
    def test_invalid_geojson(self):
        s = samples
        invalids = [
            s.point_with_strings,
            s.featurecollection_bad_geom,
            s.bad_type,
            s.polygon_non_coincident_first_last,
            s.featurecollection_missing_feature_types
        ]
        valids = 0
        for invalid in invalids:
            try:
                validate_geojson(invalid)
                valids += 1
            except GeoJSONValidationException:
                pass
        self.assertEqual(valids, 0)
########NEW FILE########
__FILENAME__ = urls
from django.conf.urls import patterns, include, url
from django.conf import settings

# Uncomment the next two lines to enable the admin:
# from django.contrib import admin
# admin.autodiscover()

urlpatterns = patterns('',
    # Examples:
    url(r'^$', 'geojsonlint.views.home', name='home'),
    url(r'^validate$', 'geojsonlint.views.validate', name='validate'),
    # url(r'^geojsonlint/', include('geojsonlint.foo.urls')),

    # Uncomment the admin/doc line below to enable admin documentation:
    # url(r'^admin/doc/', include('django.contrib.admindocs.urls')),

    # Uncomment the next line to enable the admin:
    # url(r'^admin/', include(admin.site.urls)),
)
########NEW FILE########
__FILENAME__ = utils
from pyga.requests import Tracker
from pyga.entities import Event, Session, Visitor
import requests
import validictory

from .exc import GeoJSONValidationException, NonFetchableURLException
from .schemas import point, multipoint, linestring, multilinestring, polygon, multipolygon, geometrycollection, feature, featurecollection


def track_validate(valid=True):
    try:
        #
        # This is just a nice-to-have. Do not fail tests or bail on the request
        # for anything that goes wrong here.
        #
        value = 1 if valid else 0
        tracker = Tracker(account_id='UA-7385360-18', domain_name='geojsonlint.com')
        event = Event(category='server', action='validate', value=value)
        session = Session()
        visitor = Visitor()
        tracker.track_event(event, session, visitor)
    except:
        pass


def validate_geojson(test_geojson):
    geojson_types = {
        'Point': point,
        'MultiPoint': multipoint,
        'LineString': linestring,
        'MultiLineString': multilinestring,
        'Polygon': polygon,
        'MultiPolygon': multipolygon,
        'GeometryCollection': geometrycollection,
        'Feature': feature,
        'FeatureCollection': featurecollection,
    }

    if not test_geojson['type'] in geojson_types:
        raise GeoJSONValidationException('"%s" is not a valid GeoJSON type.' % test_geojson['type'])

    if test_geojson['type'] in ('Feature', 'FeatureCollection', 'GeometryCollection'):
        #
        # These are special cases that every JSON schema library
        # I've tried doesn't seem to handle properly.
        #
        _validate_special_case(test_geojson)
    else:
        try:
            validictory.validate(test_geojson, geojson_types[test_geojson['type']])
        except validictory.validator.ValidationError as error:
            raise GeoJSONValidationException(str(error))

    if test_geojson['type'] == 'Polygon':
        # First and last coordinates must be coincident
        _validate_polygon(test_geojson)

    return

def _validate_special_case(test_geojson):
    def _validate_feature_ish_thing(test_geojson):
        if 'geometry' not in test_geojson:
            raise GeoJSONValidationException('A Feature must have a "geometry" property.')
        if 'properties' not in test_geojson:
            raise GeoJSONValidationException('A Feature must have a "properties" property.')
        if 'type' not in test_geojson:
            raise GeoJSONValidationException('A Feature must have a "type" property.')
        if test_geojson['geometry'] is not None:
            validate_geojson(test_geojson['geometry'])

    if test_geojson['type'] == 'Feature':
        _validate_feature_ish_thing(test_geojson)
    elif test_geojson['type'] == 'FeatureCollection':
        if 'features' not in test_geojson:
            raise GeoJSONValidationException('A FeatureCollection must have a "features" property.')
        elif not isinstance(test_geojson['features'], (list, tuple,)):
            raise GeoJSONValidationException('A FeatureCollection\'s "features" property must be an array.')
        for feature in test_geojson['features']:
            _validate_feature_ish_thing(feature)
    elif test_geojson['type'] == 'GeometryCollection':
        if 'geometries' not in test_geojson:
            raise GeoJSONValidationException('A GeometryCollection must have a "geometries" property.')
        elif not isinstance(test_geojson['geometries'], (list, tuple,)):
            raise GeoJSONValidationException('A GeometryCollection\'s "geometries" property must be an array.')
        for geometry in test_geojson['geometries']:
            if geometry is not None:
                validate_geojson(geometry)

def _validate_polygon(polygon):
    for ring in polygon['coordinates']:
        if ring[0] != ring[-1]:
            raise GeoJSONValidationException('A Polygon\'s first and last points must be equivalent.')

def get_remote_json(url):
    try:
        resp = requests.get(url)
    except requests.exceptions.ConnectionError:
        raise NonFetchableURLException
    if resp.status_code != 200:
        raise NonFetchableURLException
    return resp.content

########NEW FILE########
__FILENAME__ = views
import json

from django.http import HttpResponse
from django.views.decorators.http import require_http_methods
from django.shortcuts import render_to_response

from utils import track_validate, validate_geojson, get_remote_json
from exc import GeoJSONValidationException, NonFetchableURLException


def home(request):
    """
    GET /

    Show the home page
    """
    return render_to_response('index.html')


@require_http_methods(['GET', 'POST'])
def validate(request):
    """
    POST /validate

    Validate GeoJSON data in POST body
    """

    testing = request.GET.get('testing')

    if request.method == 'POST':
        stringy_json = request.raw_post_data
    else:  # GET
        try:
            remote_url = request.GET['url']
            stringy_json = get_remote_json(remote_url)
        except KeyError:  # The "url" URL parameter was missing
            return _geojson_error('When validating via GET, a "url" URL parameter is required.', status=400)
        except NonFetchableURLException:
            return _geojson_error('The URL passed could not be fetched.')

    try:
        test_geojson = json.loads(stringy_json)
        if not isinstance(test_geojson, dict):
            return _geojson_error('Data was not a JSON object.', testing)
    except:
        return _geojson_error('Data was not JSON serializeable.', testing)

    if not 'type' in test_geojson:
        return _geojson_error('The "type" member is required and was not found.', testing)

    try:
        validate_geojson(test_geojson)
    except GeoJSONValidationException as e:
        return _geojson_error(str(e), testing)

    # Everything checked out. Return 'ok'.
    track_validate()
    resp = {
        'status': 'ok',
    }
    return HttpResponse(json.dumps(resp), mimetype='application/json')


def _geojson_error(message, testing=False, status=200):
    track_validate(valid=False)
    resp = {
        'status': 'error',
        'message': message,
    }
    return HttpResponse(json.dumps(resp), mimetype='application/json', status=status)

########NEW FILE########
__FILENAME__ = wsgi
"""
WSGI config for geojsonlint project.

This module contains the WSGI application used by Django's development server
and any production WSGI deployments. It should expose a module-level variable
named ``application``. Django's ``runserver`` and ``runfcgi`` commands discover
this application via the ``WSGI_APPLICATION`` setting.

Usually you will have the standard Django WSGI application here, but it also
might make sense to replace the whole Django WSGI application with a custom one
that later delegates to the Django one. For example, you could introduce WSGI
middleware here, or combine a Django application with an application of another
framework.

"""
import os

os.environ.setdefault("DJANGO_SETTINGS_MODULE", "geojsonlint.settings")

# This application object is used by any WSGI server configured to use this
# file. This includes Django's development server, if the WSGI_APPLICATION
# setting points here.
from django.core.wsgi import get_wsgi_application
application = get_wsgi_application()

# Apply WSGI middleware here.
# from helloworld.wsgi import HelloWorldApplication
# application = HelloWorldApplication(application)

########NEW FILE########
__FILENAME__ = manage
#!/usr/bin/env python
import os
import sys

if __name__ == "__main__":
    os.environ.setdefault("DJANGO_SETTINGS_MODULE", "geojsonlint.settings")

    from django.core.management import execute_from_command_line

    execute_from_command_line(sys.argv)

########NEW FILE########
__FILENAME__ = testrunner
from django.test.simple import DjangoTestSuiteRunner


class NoDbTestRunner(DjangoTestSuiteRunner):
    """ A test runner to test without database creation """

    def setup_databases(self, **kwargs):
        """ Override the database creation defined in parent class """
        pass

    def teardown_databases(self, old_config, **kwargs):
        """ Override the database teardown defined in parent class """
        pass

########NEW FILE########
