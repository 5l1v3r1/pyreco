### Installation on stock Fedora

The following are instructions for setting up a system starting from a stock system images.

These instructions were tested on a 64-bit systems from https://github.com/opscode/bento, and using the _Junos PyEZ_ library version 0.0.5.

Operating Systems
---------------
- Fedora 19
- Fedora 20

#### Step 1: Install packages for Junos PyEZ

    sudo yum install -y python-pip python-devel libxml2-devel libxslt-devel gcc openssl
	
#### Step 2: Install Junos PyEZ

    sudo pip install junos-eznc
    
#### Step 3: Verify 

Once you've completed the above step, you should be able to create a `Device` instance, connect to a Junos system, and display the "facts", as illustrated in the README.md file.

Enjoy!


#### Installing from GitHub

Development code can be installed directly from GitHub based on any branch, commit, or tag.

***Packages from Step 1 are required.***

    sudo yum install -y git
	sudo pip install git+https://github.com/Juniper/py-junos-eznc.git
	
	or
	
	sudo pip install git+https://github.com/Juniper/py-junos-eznc.git@<branch,tag,commit>

### Installation on stock FreeBSD

The following are instructions for setting up a system starting from a stock system images.

These instructions were tested on a 64-bit systems from https://github.com/opscode/bento, and using the _Junos PyEZ_ library version 0.0.5.

Operating Systems
---------------
- FreeBSD 9.2

#### Step 1: Install packages for Junos PyEZ

    sudo pkg_add -r py27-pip libxml2 libxslt
	
#### Step 2: Install Junos PyEZ

    sudo pip install junos-eznc
    
#### Step 3: Verify 

Once you've completed the above step, you should be able to create a `Device` instance, connect to a Junos system, and display the "facts", as illustrated in the README.md file.

Enjoy!


#### Installing from GitHub

Development code can be installed directly from GitHub based on any branch, commit, or tag.

***Packages from Step 1 are required.***

    sudo pkg_add -r git
	sudo pip install git+https://github.com/Juniper/py-junos-eznc.git
	
	or
	
	sudo pip install git+https://github.com/Juniper/py-junos-eznc.git@<branch,tag,commit>

Installation on OS X Mavericks
---------------
These instructions are community provided, tested with Python 2.7.5 and using the _Junos PyEZ_ library version 0.1.2.

### Operating Systems
- OS X Mavericks


When you upgrade your Mac to OS X Mavericks, Apple deletes your X11 and any addons under /Library/Python/2.7/site-packages.  There are plenty of posts on the Internet that describe how to restore your Python development environment, but this post will focus on the Juniper Junos PyEZ framework.
 
Github has Mac client available that includes command line tools and a native GUI app. - https://help.github.com/articles/set-up-git.

Install Homebrew - http://brew.sh.

#### Installation:
 
If you have never used Python on your Mac, you will want to install X11 & Xcode.  Some Python packages have dependencies that rely on these packages.
1. Install X11 – The latest image can be found here.
2. Install Xcode - https://developer.apple.com/xcode/ - you may have to register as a developer, but there is no charge to get access to Xcode.
3. After Xcode is installed, install the command line tools.
  1. Open a Terminal window.
  2. Type: ```xcode-select –install```
4. Install Git or the GitHub client.
5. Create a symbolic link so that the tools we are about to install will compile without issues.
  1. Open a Terminal Window.
  2. Type: ```sudo ln -s /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX10.9.sdk/usr/include/libxml2/libxml/ /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX10.9.sdk/usr/include/libxml```
  3. NOTE: this is a single, long string.
6. Install lxml with easy_install
  1. In a terminal window, type: ```sudo easy_install lxml```
  2. Easy_install works the best to install lxml
7. Download the ncclient repository from Github.
  1. From a terminal window, navigate to the ncclient download directory. I save to a GitHub directory under ~/Documents.
``` 
cd Documents/GitHub/ncclient
sudo python setup.py install
``` 
8.  Download the  py-junos-eznc repository from Github
  1. In the same terminal window, navigate to the py-junos-eznc directory
```
cd ../py-junos-eznc/
sudo python setup.py install
```
9.  Finally, I would install getpass, which is used in some scripts, using easy_install.
  1. sudo easy_install getpass
### Installation on stock Ubuntu and Debian

The following are instructions for setting up a system starting from a stock system images.

These instructions were tested on a 64-bit systems from https://github.com/opscode/bento, and using the _Junos PyEZ_ library version 0.0.5.

Operating Systems
---------------
- Ubuntu 12.04
- Ubuntu 12.10
- Ubuntu 13.10
- Debian 7.4


#### Step 1: Update package list

	sudo apt-get update

#### Step 2: Install packages for Junos PyEZ

    sudo apt-get install -y python-pip python-dev libxml2-dev libxslt-dev
	
#### Step 3: Install Junos PyEZ

    sudo pip install junos-eznc
    
#### Step 4: Verify 

Once you've completed the above step, you should be able to create a `Device` instance, connect to a Junos system, and display the "facts", as illustrated in the README.md file.

Enjoy!


#### Installing from GitHub

Development code can be installed directly from GitHub based on any branch, commit, or tag.

***Packages from Step 2 are required.***

    sudo apt-get install -y git
	sudo pip install git+https://github.com/Juniper/py-junos-eznc.git
	
	or
	
	sudo pip install git+https://github.com/Juniper/py-junos-eznc.git@<branch,tag,commit>

[![PyPI version](https://badge.fury.io/py/junos-eznc.png)](http://badge.fury.io/py/junos-eznc)

Unit-Tests (WIP)

[![Build Status](https://travis-ci.org/Juniper/py-junos-eznc.svg?branch=master)](https://travis-ci.org/Juniper/py-junos-eznc)

The repo is under active development.  If you take a clone, you are getting the latest, and perhaps not entirely stable code.  

## NOTICE

As of release 0.5.0, _Junos PyEZ_ requires [ncclient](https://pypi.python.org/pypi/ncclient) version 0.4.1 or later.  

## ABOUT

_Junos PyEZ_ is a Python library to remotely manage/automate Junos devices.  The user is ***NOT*** required: (a) to be a "Software Programmer™", (b) have sophisticated knowledge of Junos, or (b) have a complex understanding of the Junos XML API.  

This library was built for two types of users:

### For "Non-Programmers" - Python as a Power Shell

This means that "non-programmers", for example the _Network Engineer_, can use the native Python shell on their management server (laptop, tablet, phone, etc.) as their point-of-control for remotely managing Junos devices. The Python shell is an interactive environment that provides the necessary means to perform common automation tasks, such as conditional testing, for-loops, macros, and templates.  These building blocks are similar enough to other "shell" enviornments, like Bash, to enable the non-programmer to use the Python shell as a power-tool, rather than a programming language.  From the Python shell a user can manage Junos devices using native hash tables, arrays, etc. rather than device-specific Junos XML or resorting to 'screen scraping' the actual Junos CLI.

### For "Programmers" - Open and Extensible

There is a growing interest and need to automate the network infrastructure into larger IT systems.  To do so, traditional software programmers, DevOps, "hackers", etc. need an abstraction library of code to further those activities.  _Junos PyEZ_ is designed for extensibility so that the programmer can quickly and easily add new widgets to the library in support of their specific project requirements.  There is no need to "wait on the vendor" to provide new functionality.   _Junos PyEZ_ is not specifically tied to any version of Junos or any Junos product family. 

### Support

For questions and general support, please visit our [Google Group](https://groups.google.com/forum/#!forum/junos-python-ez)

For documentation and more usage examples, please visit the _Junos PyEZ_ project page, [here](https://techwiki.juniper.net/Projects/Junos_PyEZ).

Issues and bugs can be opened in the repository.

## FEATURES

_Junos PyEZ_ is designed to provide the same capabilties as a user would have on the Junos CLI, but in an environment built for automation tasks.  These capabiltieis include, but are not limited to:

* Remote connectivty and management of Junos devices via NETCONF
* Provide "facts" about the device such as software-version, serial-number, etc.
* Retrieve "operational" or "run-state" information as Tables/Views
* Retrieve configuration information as Tables/Views
* Make configuration changes in unstructured and structured ways
* Provide common utilities for tasks such as secure copy of files and software updates

## INSTALLATION

Installation requires Python 2.7 and associate `pip` tool

    pip install junos-eznc
	
Installing from Git is also supported (OS must have git installed).

	To install the latest MASTER code
	pip install git+https://github.com/Juniper/py-junos-eznc.git
	-or-
	To install a specific version, brach, tag, etc.
	pip install git+https://github.com/Juniper/py-junos-eznc.git@<branch,tag,commit>
	
## UPGRADE

Upgrading has the same requirements as installation and has the same format with the addition of -UPGRADE

	pip install -U junos-eznc

## INSTALLATION PRIOR TO 0.0.5

Prior to release 0.0.5, _Junos PyEZ_ used a fork of ncclient

    pip install git+https://github.com/Juniper/ncclient.git
    pip install junos-eznc

## HELLO, WORLD

The following is a quick "hello, world" example to ensure that the softare was installed correctly.  This code will simply connect to a device and display the known facts of the device, like serial-number, model, etc.

````python
from pprint import pprint
from jnpr.junos import Device

dev = Device(host='my_host_or_ipaddr', user='jeremy', password='jeremy123' )
dev.open()

pprint( dev.facts )

dev.close()
````
Example output for an SRX-210 device:
````python
>>> pprint(dev.facts)
{'2RE': False,
 'RE0': {'last_reboot_reason': '0x20:power-button soft power off',
         'model': 'RE-SRX210H',
         'status': 'OK',
         'up_time': '10 minutes, 3 seconds'},
 'domain': 'workflowsherpas.com'         
 'fqdn': 'srx210.workflowsherpas.com',
 'hostname': 'srx210',
 'ifd_style': 'CLASSIC',
 'model': 'SRX210H',
 'personality': 'SRX_BRANCH',
 'serialnumber': 'AD2909AA0096',
 'switch_style': 'VLAN',
 'version': '12.1X44-D10.4',
 'version_info': junos.versino_info(major=(12, 1), type=X, minor=(44, 'D', 10), build=4)}
````
## DOCUMENTATION

Please refer to the _Junos PyEZ_ project page, [here](https://techwiki.juniper.net/Projects/Junos_PyEZ).

## LICENSE

Apache 2.0
  
# CONTRIBUTORS

  - Jeremy Schulman (@nwkautomaniac), Core developer
  - Rick Sherman (@shermdog)
  - Nitin Kumar (@vnitinv)

==========
junos-eznc
==========

Vagrant/Puppet
=======

This example uses Puppet to install PyEz with PIP using either PyPi or Git.

----------


Prerequisites
---------


- **[vagrant](http://www.vagrantup.com) 1.5**
- **[virtualbox](http://www.virtualbox.org) 4.3**
- rsync on host
 

Once Vagrant brings up the guest OS, two provisioners are executed in the following order:

1. Shell
  1. Install Puppet
2. Execute Puppet manifest
  1. Install dependencies with system package manager
  2. Install PyEZ with pip


For the script provisioner to install Puppet the required shell script must be present (as defined in the Vagrantfile). 

These are provided at https://github.com/hashicorp/puppet-bootstrap/

Some editing of the files is necessary.  

For example, centos_6_x.sh can be changed to fedora-20.sh with the following update:
```
REPO_URL="https://yum.puppetlabs.com/fedora/f20/products/x86_64/puppetlabs-release-20-10.noarch.rpm"
```


In testing the Debian script had to be modified.  A diff is provided below.

debian.sh
```
5a6,10
> if [ "$(id -u)" != "0" ]; then
>   echo "This script must be run as root." >&2
>   exit 1
> fi
> 
22,25d26
< if [ "$EUID" -ne "0" ]; then
<   echo "This script must be run as root." >&2
<   exit 1
< fi
```

Guest Operating Systems
---------------
- Ubuntu 12.04
- Ubuntu 12.10
- Ubuntu 13.10
- Fedora 19
- Fedora 20
- CentOS 6.5
- Debian 7.4
- FreeBSD 9.2


Usage
---------------
The Puppet module is initialized from manifests/default.pp.

PyEZ can be installed either via PyPi or Git.

PyPi
```
class{'pyez':
    mode => 'pypi',
	version => 'present', # Can be any version published to PyPi
  }
```

Git
```
class{'pyez':
    mode => 'git',
	version => 'present', # present for HEAD or any commit, tag, or branch.
  }
 ```

Vagrant
=======

The intent of the Vagrant directory is to provide multiple examples of installing PyEZ using tools such as Ansible, Puppet, and Chef.    The host and guest operating systems will vary based on capability of each provisioner, and updates are provided as best effort.

----------


Prerequisites
---------


- **[vagrant](http://www.vagrantup.com) 1.5**
- **[virtualbox](http://www.virtualbox.org) 4.3**

#### `vagrant status`

Display status of configured machines.

#### <i class="icon-up"></i> `vagrant up` or `vagrant up <boxname>`

This will bring up a new virtual machine, after downloading the image from [Opscode's Bento project](https://github.com/opscode/bento).

#### `vagrant ssh <boxname>`

Creates an SSH session to the VM

#### `vagrant halt` or `vagrant halt <boxname>`

Stop the VM(s).  Leaving the machine name out will perform the action on all created VMs.  This doesn't work with all commands.

#### `vagrant destroy` or `vagrant destory <boxname>`

Delete the virtual machines from your system.  The actual base box files will remain in `.vagrant.d` in your home directory, and can be listed with `vagrant box list`, and removed with `vagrant box delete <boxname>`.

#### `vagrant provision <boxname>`

Provisions a VM, e.g. installs prerequisites and builds/installs py-junos-eznc.  *(Runs automatically after vagrant up.  Only needed when something fails.  Safe to run multiple times (idempotent))*


> **NOTE:** See [<i class="icon-share"></i> the official Vagrant documentation](http://docs.vagrantup.com/v2/) for a more detailed information


----------


Usage
---------------

 - Manually testing the build against different host platforms
 - Creating builders that can be called from [jenkins-ci](http://jenkins-ci.org/)
 - Determining the best practices for prerequisite and Python installs, e.g. CentOS 6 only supports Python up to 2.6 with [EPEL](http://fedoraproject.org/wiki/EPEL), so Python should be installed from source, with [pyenv](https://github.com/yyuu/pyenv) (as the local user, not system-wide), etc.
 - The Vagrantfile can be very easily modified to use cloud environments or VMware, as opposed to virtualbox

