__FILENAME__ = conf
# -*- coding: utf-8 -*-
#
# flask_nicely documentation build configuration file, created by
# sphinx-quickstart on Sat Sep 21 10:14:00 2013.
#
# This file is execfile()d with the current directory set to its
# containing dir.
#
# Note that not all possible configuration values are present in this
# autogenerated file.
#
# All configuration values have a default; values that are commented out
# serve to show the default.

import sys
import os

# If extensions (or modules to document with autodoc) are in another directory,
# add these directories to sys.path here. If the directory is relative to the
# documentation root, use os.path.abspath to make it absolute, like shown here.
#sys.path.insert(0, os.path.abspath('.'))

# -- General configuration ------------------------------------------------

# If your documentation needs a minimal Sphinx version, state it here.
#needs_sphinx = '1.0'

# Add any Sphinx extension module names here, as strings. They can be
# extensions coming with Sphinx (named 'sphinx.ext.*') or your custom
# ones.
extensions = [
    'sphinx.ext.autodoc',
    'sphinx.ext.viewcode',
]

# Add any paths that contain templates here, relative to this directory.
templates_path = ['_templates']

# The suffix of source filenames.
source_suffix = '.rst'

# The encoding of source files.
#source_encoding = 'utf-8-sig'

# The master toctree document.
master_doc = 'index'

# General information about the project.
project = u'Flask-Nicely'
copyright = u'2014, Jonathan Evans'

# The version info for the project you're documenting, acts as replacement for
# |version| and |release|, also used in various other places throughout the
# built documents.
#
import pkg_resources
try:
    release = pkg_resources.get_distribution('flask_nicely').version
except pkg_resources.DistributionNotFound:
    print 'To build the documentation, The distribution information of '
    print 'Flask-Nicely has to be available. Either install the package into your'
    print 'development environment or run "setup.py develop" to setup the'
    print 'metadata. A virtualenv is recommended!'
    sys.exit(1)
del pkg_resources

version = '.'.join(release.split('.')[:2])

# The language for content autogenerated by Sphinx. Refer to documentation
# for a list of supported languages.
#language = None

# There are two options for replacing |today|: either, you set today to some
# non-false value, then it is used:
#today = ''
# Else, today_fmt is used as the format for a strftime call.
#today_fmt = '%B %d, %Y'

# List of patterns, relative to source directory, that match files and
# directories to ignore when looking for source files.
exclude_patterns = ['_build']

# The reST default role (used for this markup: `text`) to use for all
# documents.
#default_role = None

# If true, '()' will be appended to :func: etc. cross-reference text.
#add_function_parentheses = True

# If true, the current module name will be prepended to all description
# unit titles (such as .. function::).
#add_module_names = True

# If true, sectionauthor and moduleauthor directives will be shown in the
# output. They are ignored by default.
#show_authors = False

# The name of the Pygments (syntax highlighting) style to use.
pygments_style = 'sphinx'

# A list of ignored prefixes for module index sorting.
#modindex_common_prefix = []

# If true, keep warnings as "system message" paragraphs in the built documents.
#keep_warnings = False


# -- Options for HTML output ----------------------------------------------

# The theme to use for HTML and HTML Help pages.  See the documentation for
# a list of builtin themes.
html_theme_path = ['_themes']
html_theme = 'flask'

# The name for this set of Sphinx documents.  If None, it defaults to
# "<project> v<release> documentation".
#html_title = None

# A shorter title for the navigation bar.  Default is the same as html_title.
#html_short_title = None

# The name of an image file (relative to this directory) to place at the top
# of the sidebar.
#html_logo = None

# The name of an image file (within the static path) to use as favicon of the
# docs.  This file should be a Windows icon file (.ico) being 16x16 or 32x32
# pixels large.
#html_favicon = None

#HTML theme options
html_theme_options = {
  'index_logo': ''
}
# Add any paths that contain custom static files (such as style sheets) here,
# relative to this directory. They are copied after the builtin static files,
# so a file named "default.css" will overwrite the builtin "default.css".
html_static_path = ['_static']

# Add any extra paths that contain custom files (such as robots.txt or
# .htaccess) here, relative to this directory. These files are copied
# directly to the root of the documentation.
#html_extra_path = []

# If not '', a 'Last updated on:' timestamp is inserted at every page bottom,
# using the given strftime format.
#html_last_updated_fmt = '%b %d, %Y'

# If true, SmartyPants will be used to convert quotes and dashes to
# typographically correct entities.
#html_use_smartypants = True

# Custom sidebar templates, maps document names to template names.
html_sidebars = {'**': ['forkme.html', 'localtoc.html']}

# Additional templates that should be rendered to pages, maps page names to
# template names.
#html_additional_pages = {}

# If false, no module index is generated.
#html_domain_indices = True

# If false, no index is generated.
#html_use_index = True

# If true, the index is split into individual pages for each letter.
#html_split_index = False

# If true, links to the reST sources are added to the pages.
#html_show_sourcelink = True

# If true, "Created using Sphinx" is shown in the HTML footer. Default is True.
#html_show_sphinx = True

# If true, "(C) Copyright ..." is shown in the HTML footer. Default is True.
#html_show_copyright = True

# If true, an OpenSearch description file will be output, and all pages will
# contain a <link> tag referring to it.  The value of this option must be the
# base URL from which the finished HTML is served.
#html_use_opensearch = ''

# This is the file name suffix for HTML files (e.g. ".xhtml").
#html_file_suffix = None

# Output file base name for HTML help builder.
htmlhelp_basename = 'flask_nicelydoc'


# -- Options for LaTeX output ---------------------------------------------

latex_elements = {
# The paper size ('letterpaper' or 'a4paper').
#'papersize': 'letterpaper',

# The font size ('10pt', '11pt' or '12pt').
#'pointsize': '10pt',

# Additional stuff for the LaTeX preamble.
#'preamble': '',
}

# Grouping the document tree into LaTeX files. List of tuples
# (source start file, target name, title,
#  author, documentclass [howto/manual]).
latex_documents = [
  ('index', 'flask_nicely.tex', u'Flask-Nicely Documentation',
   u'Jonathan Evans', 'manual'),
]

# The name of an image file (relative to this directory) to place at the top of
# the title page.
#latex_logo = None

# For "manual" documents, if this is true, then toplevel headings are parts,
# not chapters.
#latex_use_parts = False

# If true, show page references after internal links.
#latex_show_pagerefs = False

# If true, show URL addresses after external links.
#latex_show_urls = False

# Documents to append as an appendix to all manuals.
#latex_appendices = []

# If false, no module index is generated.
#latex_domain_indices = True


# -- Options for manual page output ---------------------------------------

# One entry per manual page. List of tuples
# (source start file, name, description, authors, manual section).
man_pages = [
    ('index', 'flask_nicely', u'flask_nicely Documentation',
     [u'Jonathan Evans'], 1)
]

# If true, show URL addresses after external links.
#man_show_urls = False


# -- Options for Texinfo output -------------------------------------------

# Grouping the document tree into Texinfo files. List of tuples
# (source start file, target name, title, author,
#  dir menu entry, description, category)
texinfo_documents = [
  ('index', 'flask_nicely', u'flask_nicely Documentation',
   u'Jonathan Evans', 'flask_nicely', 'Pretty JSON responses for API building.',
   'Web'),
]

# Documents to append as an appendix to all manuals.
#texinfo_appendices = []

# If false, no module index is generated.
#texinfo_domain_indices = True

# How to display URL addresses: 'footnote', 'no', or 'inline'.
#texinfo_show_urls = 'footnote'

# If true, do not generate a @detailmenu in the "Top" node's menu.
#texinfo_no_detailmenu = False


# -- Options for Epub output ----------------------------------------------

# Bibliographic Dublin Core info.
epub_title = u'flask_nicely'
epub_author = u'Jonathan Evas'
epub_publisher = u'Jonathan Evas'
epub_copyright = u'2014, Jonathan Evas'

# The language of the text. It defaults to the language option
# or en if the language is not set.
#epub_language = ''

# The scheme of the identifier. Typical schemes are ISBN or URL.
#epub_scheme = ''

# The unique identifier of the text. This can be a ISBN number
# or the project homepage.
#epub_identifier = ''

# A unique identification for the text.
#epub_uid = ''

# A tuple containing the cover image and cover page html template filenames.
#epub_cover = ()

# A sequence of (type, uri, title) tuples for the guide element of content.opf.
#epub_guide = ()

# HTML files that should be inserted before the pages created by sphinx.
# The format is a list of tuples containing the path and title.
#epub_pre_files = []

# HTML files shat should be inserted after the pages created by sphinx.
# The format is a list of tuples containing the path and title.
#epub_post_files = []

# A list of files that should not be packed into the epub file.
#epub_exclude_files = []

# The depth of the table of contents in toc.ncx.
#epub_tocdepth = 3

# Allow duplicate toc entries.
#epub_tocdup = True

# Choose between 'default' and 'includehidden'.
#epub_tocscope = 'default'

# Fix unsupported image types using the PIL.
#epub_fix_images = False

# Scale large images.
#epub_max_image_width = 0

# How to display URL addresses: 'footnote', 'no', or 'inline'.
#epub_show_urls = 'inline'

# If false, no index is generated.
#epub_use_index = True

########NEW FILE########
__FILENAME__ = app
from flask import Flask

import flask_nicely
from flask_nicely.errors import NotFound

app = Flask(__name__)

@app.route('/hello/<name>')
@flask_nicely.nice_json
def hello(name):

    data = {
        "Name": name,
        "Message": "Hello, {}!".format(name)
    }

    return data

@app.route('/error/404')
@flask_nicely.nice_json
def throw_404():

    raise NotFound("Could not find the grail!")

@app.route('/error/exception')
@flask_nicely.nice_json
def throw_exception():
    """
    This view will produce a normal traceback with the app in DEBUG mode,
    or a pretty 500 JSON response when app.config['DEBUG'] is False.
    """
    raise Exception("I am an exception")

if __name__ == '__main__':

    app.run(host='0.0.0.0', port=5000, debug=True)


########NEW FILE########
__FILENAME__ = decorators
from flask import jsonify, current_app
from functools import wraps

from .errors import HTTPError, ServerError

def nice_json(func):

    """A decorator which returns a pretty jsonified response when wrapped
    around a Flask view function.

    :param func: the Flask view function to be wrapped
    :rtype: :class:`flask.Response`
    """


    @wraps(func)
    def json_data_or_error(*args, **kwargs):

        try:
            data = func(*args, **kwargs)

        except HTTPError as e:
            return e.get_response()

        except Exception as e:

            if current_app.config['DEBUG']:
                raise e
            else:
                return ServerError().get_response()

        return jsonify(status=200, error=None, data=data)

    return json_data_or_error
########NEW FILE########
__FILENAME__ = errors
try:
    from httplib import responses # Python 2.x
except ImportError:
    from http.client import responses # Python 3.x

from flask import jsonify

class HTTPError(Exception):

    """A generic error mixin from which the HTTP error responses inherit."""

    status_code = None

    def __init__(self, error_message='', payload=None, *args, **kwargs):

        """
        :param error_message: An optional custom error message that will be
        returned in an HTTP response. If not specified, the generic httplib
        response will be returned.
        :param payload: An optional dictionary of additional information
        to include in the JSON response.
        """

        super(HTTPError, self).__init__(*args, **kwargs)
        self.error_message = error_message or responses[self.status_code]
        self.payload = payload or {}

    def get_response(self):

        self.payload.update(status=self.status_code)
        self.payload.update(error=self.error_message)
        self.payload.update(data=None)

        response = jsonify(self.payload)
        response.status_code = self.status_code

        return response


class Unauthorized(HTTPError):
    """A 401 Unauthorized HTTP error."""
    status_code = 401

class Forbidden(HTTPError):
    """A 403 Forbidden HTTP error."""
    status_code = 403

class NotFound(HTTPError):
    """A 404 Not Found HTTP error."""
    status_code = 404

class ServerError(HTTPError):
    """A 500 Internal Server Error HTTP error."""
    status_code = 500

class GatewayTimeout(HTTPError):
    """A 504 Gateway Timeout HTTP error."""
    status_code = 504
########NEW FILE########
__FILENAME__ = test_flask_nicely
from flask import Flask
from flask.ext.testing import TestCase

from flask_nicely import nice_json
from flask_nicely.errors import NotFound

class TestFlaskNicely(TestCase):

    def create_app(self):

        app = Flask(__name__)
        app.config['TESTING'] = True
        return app


    def test_success(self):
        """
        Test that if the decorated function does not throw an exception,
        a correctly-formed JSON response is returned containing data returned
        by the function.
        """

        data = {
            "name": "Arthur, King of the Britons",
            "quest": "To seek the Holy Grail",
            "air-speed velocity of unladen swallow": "An African or a European swallow?",
            }

        @nice_json
        def success_function():
            return data

        response = success_function()

        self.assertEqual(
            {'data': data, 'status': 200, 'error': None},
            response.json)

        self.assertEqual(200, response.status_code)

    def test_404(self):
        """
        Test that if the decorated function throws a NotFound error, a JSON
        response of status 404 is returned with a generic error message.
        """

        @nice_json
        def error_function():
            raise NotFound()

        response = error_function()

        self.assertEqual(
            {'data': None, 'status': 404, 'error': "Not Found"},
            response.json)

        self.assertEqual(404, response.status_code)

    def test_404_custom_message(self):
        """
        Test that if the decorated function throws a NotFound error with a
        specified message, a JSON response of status 404 is returned with
        'error' set to the custom message.
        """

        @nice_json
        def error_function():
            raise NotFound("Could not find the Grail!")

        response = error_function()

        self.assertEqual(
            {'data': None, 'status': 404, 'error': "Could not find the Grail!"},
            response.json)

        self.assertEqual(404, response.status_code)

    def test_404_custom_payload(self):
        """
        Test that if the decorated function throws a NotFound error with an
        additional payload, a JSON response of status 404 is returned with
        extra keys from the payload included.
        """

        test_payload = {
            'error_detail': "The resource that you requested was not found on the server",
            'documentation': "http://www.flask-nicely.readthedocs.org",
        }

        @nice_json
        def error_function():
            raise NotFound(payload=test_payload)

        response = error_function()

        self.assertEqual({
            'data': None, 'status': 404, 'error': "Not Found",
            'error_detail': "The resource that you requested was not found on the server",
            'documentation': "http://www.flask-nicely.readthedocs.org",
            },
            response.json)

        self.assertEqual(404, response.status_code)



    def test_exception_debug(self):
        """
        Test that if the decorated function throws an unspecified exception,
        then the decorator will raise it if the app is in debug mode.
        """
        self.app.config['DEBUG'] = True

        @nice_json
        def error_function():
            raise Exception("I am an exception")

        with self.assertRaises(Exception):
            response = error_function()

    def test_exception_live(self):
        """
        Test that if the decorated function throws an unspecified exception,
        then the decorator will return a JSON response of status 500 if the app
        is not in debug mode.
        """
        self.app.config['DEBUG'] = False

        @nice_json
        def error_function():
            raise Exception("I am an exception")

        response = error_function()

        self.assertEqual(
            {'data': None, 'status': 500, 'error': "Internal Server Error"},
            response.json)

        self.assertEqual(500, response.status_code)

########NEW FILE########
