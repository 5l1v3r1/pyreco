#######################
:mod:`hvad.descriptors`
#######################

.. module:: hvad.descriptors


**************
BaseDescriptor
**************

.. class:: BaseDescriptor

    Base class for the descriptors, should not be used directly.
        
    .. attribute:: opts
    
        The options (meta) of the model.

    .. method:: translation(self, instance)
    
        Get the cached translation object on an instance. If no translation is
        cached yet, use the :func:`~django.utils.translation.get_language` function
        to get the current language, load it from the database and cache it on the
        instance.

        If no translation is cached, and no translation exists for current language,
        raise an :exc:`~exceptions.AttributeError`.


*******************
TranslatedAttribute
*******************

.. class:: TranslatedAttribute

    Standard descriptor for translated fields on the :term:`Shared Model`.

    .. attribute:: name
        
        The name of this attribute
        
    .. attribute:: opts
    
        The options (meta) of the model.

    .. method:: __get__(self, instance, instance_type=None)
    
        Gets the attribute from the translation object using
        :meth:`BaseDescriptor.translation`. If no instance is given (used from
        the model instead of an instance) it returns the field object itself,
        allowing introspection of the model.

        Starting from Django 1.7, calling :func:`getattr` on a translated field
        before the App Registry is initialized raises an
        :exc:`~exceptions.AttributeError`.

    .. method:: __set__(self, instance, value)
    
        Sets the value on the attribute on the translation object using
        :meth:`BaseDescriptor.translation` if an instance is given, if no 
        instance is given, raises an :exc:`~exceptions.AttributeError`.

    .. method:: __delete__(self, instance)
    
        Deletes the attribute on the translation object using
        :meth:`BaseDescriptor.translation` if an instance is given, if no 
        instance is given, raises an :exc:`~exceptions.AttributeError`.


*********************
LanguageCodeAttribute
*********************

.. class:: LanguageCodeAttribute

    The language code descriptor is different than the other fields, since it's
    readonly. The getter is inherited from :class:`TranslatedAttribute`.

    .. method:: __set__(self, instance, value)
    
        Raises an attribute error.

    .. method:: __delete__(self, instance)
    
        Raises an attribute error.
============
django-hvad
============

This project is yet another attempt at making model translations suck less in
Django. It uses an automatically created `Translations Model` to store
translatable fields in arbitrary languages with a foreign key to the main model.

Documentation for django-hvad can be found at http://django-hvad.readthedocs.org/.

This project replaces the obsolete django-nani package. It provides the same
functionality, but does not affect the default queries: translated fields have
to be activated by calling a specific method on the `TranslationManager`.

.. warning:: django-hvad is still in beta, please use it with
             caution and report any bug you might encounter on
             https://github.com/KristianOellegaard/django-hvad/issues

**Feel free to join us at #django-hvad on irc.freenode.net for a chat**

.. image:: https://secure.travis-ci.org/KristianOellegaard/django-hvad.png?branch=master


Example
-------

             Normal.objects.all()

Returns all objects, but without any translated fields attached - this query is
just the default django queryset and can therefore be used as usual.

             Normal.objects.language().all()

Returns all objects as translated instances, but only the ones that are translated
into the currect language. You can also specify which language to get, using e.g.

             Normal.objects.language("en").all()


Features
--------

* Simple API 
* Predictable
* Reliable
* Versatile (can manipulate arbitrary languages without changing the DB layout)
* Fast (few and simple queries)
* High level (no custom SQL Compiler or other scary things)


Thanks to
---------

Jonas Obrist (https://github.com/ojii) for making django-nani and for helping me with this project.

