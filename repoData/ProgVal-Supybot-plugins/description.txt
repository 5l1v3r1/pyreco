This plugin aims to provide a highly configurable protection against flood
and spam.

AttackProtector
===============

Detection types
---------------

There are two kind of detections:

**individual**: they are the most common flood, so there name in configuration
   is the name of the flood type

**groupped**: it's a flood from several nicks. There name in the configuration
   is the flood type, prepended by 'group'.

Of course, detection value of group flood should be greater than the
individual flood's.

Punishment types
----------------

For each flood type, you can define a punishment. More common are 'ban',
'kick', 'kban'. You also can define modes, such as the default punishment
for group joins: 'mode+i' (it defines the mode +i). You also can remove
a mode, with the syntax 'mode-i', or set/unset modes to the user, with
'mode-v' or 'mode+v'.
For a complete list of available modes, checkout the network's help pages.

Insert a description of your plugin here, with any notes, etc. about using it.

Insert a description of your plugin here, with any notes, etc. about using it.

Brainfuck interpreter. See Wikipedia page for more informations.

This plugin supports the standard Brainfuck specifications.

Notes about this implementation:
* The size of a memory cell is mostly unlimited (see Python limits of integers
  for more informations)
* The number of memory cells is mostly unlimited (see Python maximum list size
  for more informations)
* As user can input characters in the console, he must give them as the
  --input parameter when calling the command.

Insert a description of your plugin here, with any notes, etc. about using it.

Cleverbot Plugin for Supybots
==============================
Author: Albert Huang (alberthrocks)

This is a plugin that uses the Cleverbot AI bot service to generate somewhat
coherent AI responses to humans. As indicated, it is designed to be loaded
into Supybot.

The plugin responds by using an invalid command callback/hook to get the
question and send back the response.

This is only a proof of concept - under no circumstances should it be used in
a production environment. Cleverbot may ban you for using their service this
way, so beware.

This plugin was forked from a similar project, supybot-pandorabots, which uses
the Pandorabots AI API to generate responses. You can find that project here:
https://launchpad.net/supybot-pandorabots 

By using this software, you comply to the GPL v3, especially the NO WARRANTY
part. See LICENSE.txt for more information. I do not provide support - you
should not expect any fixes made. (Maybe I'll fix code under rare
circumstances... and maybe if there's demand!)

To install, just copy this folder into your supybot plugins folder and load it.
Note that if you are running any existing AIs, like Pandorabots, you need to
disable them before using this AI.

If you find any bugs, or have just something to say, feel free to join
#talkingbots on EFNet or Freenode, file a bug report, or email me!

This plugin uses PyCleverbot (the reason this was all possible), which can be
found here:
http://code.google.com/p/pycleverbot/

Makes coffee using the  Hyper Text Coffee Pot Control Protocol
(HTCPCP/1.0). More info at http://www.ietf.org/rfc/rfc2324.txt
Warning: this command has side effect if no compatible device
is found on the channel.

Insert a description of your plugin here, with any notes, etc. about using it.

Insert a description of your plugin here, with any notes, etc. about using it.

Insert a description of your plugin here, with any notes, etc. about using it.

Advanced trivia plugin.

Config file format
==================

P QUESTION
---
X RESPONSE 1
X RESPONSE 2
---
Y CLUE 1
Y CLUE 2
Y CLUE 3
=== Z

Where P, X, Y, and Z are integers. P is the number of points the question
is worth of, X the type of response (a single char: 'r' for raw answer, and
'm' for a match (regexp)), Y is the time waited before giving a clue,
and Z is the time waited before the question timeout.

Y and Z are relative to the time of the previous clue.

Example config file
===================

2 Who wrote this plugin?
---
r ProgVal
---
5 P***V**
5 Pr**Va*
2 Pro*Val
=== 5

4 What is the name of this bot?
---
r Limnoria
r Supybot
---
5 L******a
2 Li****ia
2 Lim**ria
=== 5

3 Who is the original author of Supybot?
---
r jemfinch
---
1 j*******
1 jem*****
=== 1

1 Give a number.
---
r 42
m [0-9]+
---
=== 2

1 Give another number.
---
r 42
m [0-9]+
---
=== 2

This plugin announces events GitHub repositories to IRC.

To use this plugin you must forward/open the port which is specified by 
the configuration variable `supybot.servers.http.port` (8080 is the 
default value).

To add announces use the command `github announce add <owner> <repo>` 
`Owner` means the owner of the repository (GitHub username) 
and repo what git repository the bot should announce. When you want to 
remove announce, use the command `github announce remove <owner> <repo>`.

Please note that the names are case-sensitive. If you use mis-spelled 
repository names, the bot will not announce commits to that repository.

To get the bot notified about events, you must tell GitHub to post to your 
bot. [GitHub explanation](http://help.github.com/post-receive-hooks/)
In order to do that, you must go admin page of repo, tab webhooks 
(direct link: ` https://github.com/<owner>/<repo>/settings/hooks ` ) and 
click `Add webhook` and add the URL of your bot there. The URL is 
` http://<IP or dynamicdns-service>:<port>/github `.
Set the `Content type` to `application/x-www-form-urlencoded`!

**NOTE:** The default has been changed to `application/json` !


Fill the other fields of the form according to what you want.

To announce other events type, you have to set config variables 
`supybot.plugins.GitHub.format.<type>` (where `type` is a type referenced 
at http://developer.github.com/webhooks/#events ) to a template.
A template is a command, where you can use @echo to print variable content.
Variable names are prefixed with a $.
Replacements will be made using the data sent by GitHub. As this data 
contains lists and dictionnaries, it is “flattened”, ie. 
`data['foo']['bar']['baz']` can be accessed with `$foo__bar__baz` (note the douple underscores).
There are also special variables:
* if `$foo` is an url, `$foo__tiny` will be the tinyfied version of the URL
* if `$foo` is a git ref, `$foo__branch` will be the matching branch
* if `$foo` is a string, `$foo__firstline` will contain the first line of 
`$foo`

Concerning push events, one line is formatted per commit; it is given extra
 variables: `$__commit__foo` for each `data['commits'][X]['foo']`.

=========
pycountry
=========

pycountry provides the ISO databases for the standards:

639
  Languages

3166
  Countries

3166-2
  Subdivisions of countries

4217
  Currencies

15924
  Scripts

The package includes a copy from Debian's `pkg-isocodes` and makes the data
accessible through a Python API.

Translation files for the various strings are included as well.


Countries (ISO 3166)
====================

Countries are accessible through a database object that is already configured
upon import of pycountry and works as an iterable:

  >>> import pycountry
  >>> len(pycountry.countries)
  249
  >>> list(pycountry.countries)[0]
  <pycountry.db.Country object at 0x...>

Specific countries can be looked up by their various codes and provide the
information included in the standard as attributes:

  >>> germany = pycountry.countries.get(alpha2='DE')
  >>> germany
  <pycountry.db.Country object at 0x...>
  >>> germany.alpha2
  u'DE'
  >>> germany.alpha3
  u'DEU'
  >>> germany.numeric
  u'276'
  >>> germany.name
  u'Germany'
  >>> germany.official_name
  u'Federal Republic of Germany'

Note that historic countries, defined by the ISO 3166-3 sub-standard are not
included in this list.

Country subdivisions (ISO 3166-2)
=================================

The country subdivisions are a little more complex than the countries itself
because they provide a nested and typed structure.

All subdivisons can be accessed directly:

  >>> len(pycountry.subdivisions)
  4847
  >>> list(pycountry.subdivisions)[0]
  <pycountry.db.Subdivision object at 0x...>

Subdivisions can be accessed using their unique code and provide at least
their code, name and type:

  >>> de_st= pycountry.subdivisions.get(code='DE-ST')
  >>> de_st.code
  u'DE-ST'
  >>> de_st.name
  u'Sachsen-Anhalt'
  >>> de_st.type
  u'State'
  >>> de_st.country
  <pycountry.db.Country object at 0x...>

Some subdivisions specify another subdivision as a parent:

  >>> al_br = pycountry.subdivisions.get(code='AL-BU')
  >>> al_br.code
  u'AL-BU'
  >>> al_br.name
  u'Bulqiz\xeb'
  >>> al_br.type
  u'District'
  >>> al_br.parent_code
  u'AL-09'
  >>> al_br.parent
  <pycountry.db.Subdivision object at 0x...>
  >>> al_br.parent.name
  u'Dib\xebr'

The divisions of a single country can be queried using the country_code index:

  >>> len(pycountry.subdivisions.get(country_code='DE'))
  16

  >>> len(pycountry.subdivisions.get(country_code='US'))
  57


Scripts (ISO 15924)
===================

Scripts are available from a database similar to the countries:

  >>> len(pycountry.scripts)
  163
  >>> list(pycountry.scripts)[0]
  <pycountry.db.Script object at 0x...>

  >>> latin = pycountry.scripts.get(name='Latin')
  >>> latin
  <pycountry.db.Script object at 0x...>
  >>> latin.alpha4
  u'Latn'
  >>> latin.name
  u'Latin'
  >>> latin.numeric
  u'215'


Currencies (ISO 4217)
=====================

The currencies database is, again, similar to the ones before:

  >>> len(pycountry.currencies)
  182
  >>> list(pycountry.currencies)[0]
  <pycountry.db.Currency object at 0x...>

  >>> argentine_peso = pycountry.currencies.get(letter='ARS')
  >>> argentine_peso
  <pycountry.db.Currency object at 0x...>
  >>> argentine_peso.letter
  u'ARS'
  >>> argentine_peso.name
  u'Argentine Peso'
  >>> argentine_peso.numeric
  u'032'


Languages (ISO 639)
===================

The languages database is similar too:

  >>> len(pycountry.languages)
  487
  >>> list(pycountry.languages)[0]
  <pycountry.db.Language object at 0x...>

  >>> aragonese = pycountry.languages.get(alpha2='an')
  >>> aragonese.alpha2
  u'an'
  >>> aragonese.bibliographic
  u'arg'
  >>> aragonese.terminology
  u'arg'
  >>> aragonese.name
  u'Aragonese'

  >>> bengali = pycountry.languages.get(alpha2='bn')
  >>> bengali.name
  u'Bengali'
  >>> bengali.common_name
  u'Bangla'

Locales
=======

Locales are available in the `pycountry.LOCALES_DIR` subdirectory of this
package. The translation domains are called `isoXXX` according to the standard
they provide translations for. The directory is structured in a way compatible
to Python's gettext module.

Here is an example translating language names:

  >>> import gettext
  >>> german = gettext.translation('iso3166', pycountry.LOCALES_DIR,
  ...                              languages=['de'])
  >>> german.install()
  >>> _('Germany')
  'Deutschland'

This plugin is designed for the channel #glob2 @ OFTC, which deals with
the Globulation 2 real-time strategy game. Check out http://globulation2.org/
for more informations.

There is no reason to use this plugin for other usage, but I publish it
anyway, because libre software is the Good.

Insert a description of your plugin here, with any notes, etc. about using it.

Insert a description of your plugin here, with any notes, etc. about using it.

Insert a description of your plugin here, with any notes, etc. about using it.

Insert a description of your plugin here, with any notes, etc. about using it.

Insert a description of your plugin here, with any notes, etc. about using it.

Insert a description of your plugin here, with any notes, etc. about using it.

LimnoriaChan - #Limnoria factoids, Limnoria issues linker etc.

# LimnoriaChan

LimnoriaChan is meant for use on [#Limnoria] and is loaded on Limnoria there.

# Usage

LimnoriaChan has two commands called "issue" and "issuepl". Issue opens an issue to [Limnorias issue tracker] and issuepl to [issue tracker of ProgVals Supybot-plugins].

[#Limnoria]:irc://irc.freenode.net/#Limnoria
[Limnorias issue tracker]:https://github.com/ProgVal/Limnoria/issues
[issue tracker of ProgVals Supybot-plugins]:https://github.com/ProgVal/Supybot-plugins

LimnoriaChan also includes factoids and ability to get issue links. They can be get by saying e.g %%issue#123 on channel, which returns https://github.com/ProgVal/Limnoria/pull/123 , or e.g %%git , which returns the git clone URL for Limnoria, git://github.com/ProgVal/Limnoria.git .

LinkRelay is an alternative to the official Relay plugin. As Relay can
relay only between channels with the same name, LinkRelay is highly
configurable, and can be used to relay from any channel to any channel.

More over, LinkRelay offers unique features, such as coloring the
non-PRIVMSG messages (i.e. joins, parts, quits, kicks, nick changes, ...),
non-reciprocal relays, or messages filtering (by regexp).

This plugin lists channels with a few users.

Insert a description of your plugin here, with any notes, etc. about using it.

Please note that this plugin is *unstable*.
It may introduce bugs into your Supybot, and you'll have to restart it in
order to solve them.
It makes *the whole bot* upper case all s, r, and p (it decides randomly what
it want to upper case), and doesn't care whether they are incoming or
outgoing.
For example, if your password has the letter "s" and the bot "decided" to
capitalize the s, you won't be able to identify.

Insert a description of your plugin here, with any notes, etc. about using it.

Insert a description of your plugin here, with any notes, etc. about using it.

Insert a description of your plugin here, with any notes, etc. about using it.

Insert a description of your plugin here, with any notes, etc. about using it.

Insert a description of your plugin here, with any notes, etc. about using it.

Insert a description of your plugin here, with any notes, etc. about using it.

Insert a description of your plugin here, with any notes, etc. about using it.

Insert a description of your plugin here, with any notes, etc. about using it.

A bunch of plugins for Supybot / Limnoria I wrote myself or found on the
net and improved.

To install depedencies for these plugins, run

```
pip install -r requirements.txt
```

[![Build Status](https://travis-ci.org/ProgVal/Supybot-plugins.svg?branch=master)](https://travis-ci.org/ProgVal/Supybot-plugins)

## AttackProtector

Provides configurable flood protection for channels.

##Brainfuck

Brainfuck (a turing-complete programming language) interpreter.

##Coffee

Makes coffee for the channel.

##Debian

Grabs data from Debian website.

##ERepublik

Graps data from e-republik.

##Eureka

Trivia plugin, with a new take on file design.

##GeekQuote

Grabs quotes from web services.

##GitHub

Plugin using the GitHub API & repo web hooks.

##GoodFrench

French typo/spelling checker.

##Iwant

Wishlist.

##Kickme

Utility plugin, useful in nested commands.

##LinkRelay

Highly configurable relay plugin.

##ListEmpty

List empty channels (or with few people) the bot is on.

##Listener

Run a telnet server and announce messages to a channel.

##Pinglist

Keeps a list of people attending a meeting/game, and provides a `pingall`
command to ping them all.

##Seeks

Plugin for the Seeks search engine.

##SupyML

Markup-based Supybot language supporting variables and loops.

##Trigger

Utility plugin that runs commands when a join/part/whatever occurs.

##Trivia

Trivia plugin.

##Twitter

Advanced Twitter plugin, with multiple account support.

##Untiny

URL unshortener plugin.

##WebLogs

Display channel logs on the web (experimental!).

##WebStats

Display channel stats on the web.

##WikiTrans

Translates words/expressions using Wikipedia inter-language links.

##Wikipedia

Wikipedia plugin.

Insert a description of your plugin here, with any notes, etc. about using it.

Insert a description of your plugin here, with any notes, etc. about using it.

This is a basic but highly configurable plugin that allows to call
a Seeks node (ie. a search engine).

Insert a description of your plugin here, with any notes, etc. about using it.

This plugin allows to run command as someone else, according to the rules
the owner added.

Be careful, this plugin can be *DANGEROUS* (at least as dangerous as the owner
is), use it at your *OWN RISKS*.
If you don't know how to use it, DON'T USE IT.
If you don't know what you do, DON'T DO IT.
If you don't know what the frak you are doing is, DON'T DO IT.

This is a document that describe the SupyML language

Global syntax
=============

SupyML is a language based on the XML syntax. The official SupyML interpreter
uses the xml.dom.minidom parser. Minidom handles the format error; the
exceptions it raises are not handled by the SupyML parser.

Commands
========

SupyML is based on call to SupyBot commands. A command is call like that:
 <commandName>arg1 arg2 arg3</commandName>
If you want to call a command in a specific plugin, use this syntax:
 <pluginName>commandName arg1 arg2 arg3</pluginName>

Variables
=========

To get the value of a variable, type:
 <var name="variableName" />

To set the value, type:
 <set name="variableName">newValue</set>

Note that all variable are strings, because SupyML and SupyBot commands
processing both use only strings.
Some plugins, like Conditional provides different handlings for strings and
numerics, but it is their own problems.

Variable lifetime
-----------------

When creating/setting/editing a variable or its value, the changes are
available everywhere in the source code.

About the names
---------------

Because of/thanks to the syntax of the language, names can easily be anything,
even if things other language doesn't like, for example: special chars,
spaces, starting with a number, empty, etc.
But, this is highly deprecated, and it raises a warning.

Conditions
==========

SupyML has not (yet) conditions. Use the Conditional plugin to do that.

Loops
=====

Loops are the main feature provided by SupyML. Here is the global syntax:
 <loop><loopType>boolean</loopType>command arg1 arg2 arg3</loop>
Use conditions to have changing booleans ;)

While loop
----------

The syntax of the while loop is:
 <loop><while>boolean</while>command arg1 arg2 arg3</loop>
The command is run while the boolean is true.

SupySandbox is currently deprecated, do not use this plugin.

# SupySandbox

SupySandbox provides a safe way to allow everybody to run Python code from IRC
thanks to haypo's [pysandbox].

SupySandbox also aims to provide a powerful safe (i.e. anyone can run code
without lateral effect on the bot or the host computer) scripting language,
but it is blocked by technical problems.

[pysandbox]:https://github.com/haypo/pysandbox

Trigger is a very basic plugin, that allows channel ops to trigger commands
by an event on there channel (join, part, quit, ...), through the
configuration.

Insert a description of your plugin here, with any notes, etc. about using it.

Advanced Twitter plugin for Supybot, with capabilities handling, and
per-channel user account.

Configuration
=============

Ever noticed a text "sent from web" or "sent via Android" under a tweet?
This is called the consumer. You have two choices:
* Keep the default consumer. This is the easier way; and the text will
  be "sent via Supybot // Limnoria".
* Create your own consumer at https://dev.twitter.com/ . If you choosed
  this way, you will have to set supybot.plugins.Twitter.consumer.key
  and supybot.plugins.Twitter.consumer.secret with the consumer
  key/secret given by Twitter.


Now, you have to set the accounts credentials (called access token)
for every channel you want to associate with a Twitter account.

If you use the default consumer, it is easy : just run the get_access_token.py
script provided with this plugin.
Otherwise, you will have either to edit the script with your own consumer
key/secret and run it, or get the token from dev.twitter.com.



Once you got the token key/secret, set it _as a channel-specific variable_
to supybot.plugins.Twitter.accounts.channel.key and 
supybot.plugins.Twitter.accounts.channel.secret.


Capabilities
============

All users are allowed to use all commands by default! Use this command to
disable account administration (follow, unfollow, ...) by default:
@defaultcapability add -twitteradmin

To disable posts and retweets by default, use this one:
@defaultcapability add -twitterpost

Extra features
==============

If the Untiny plugin is loaded, this plugin will automaticaly extract original
links from t.co ones.

Insert a description of your plugin here, with any notes, etc. about using it.

This plugin has a list of triggers that cause the bot to say "Thats what she
said."

If you wish to add or remove triggers they can be found in:
/proc/<PID_OF_THE_BOT>/cwd/conf/TWSS.txt

Insert a description of your plugin here, with any notes, etc. about using it.

Insert a description of your plugin here, with any notes, etc. about using it.

This plugins displays help of Supybot commands via the HTTP server.


Insert a description of your plugin here, with any notes, etc. about using it.

Insert a description of your plugin here, with any notes, etc. about using it.

WebStats is a plugin that provide a web access to channel based statistics.

It is designed to be used on active channels, so it implements a cache system.
Don't worry if you have enabled statistics and nothing happens on the Web
interface in the following hour.

You need pygraphviz (python-pygraphviz in Debian) for the "links" graph.

If you want to use Apache as a proxy for your WebStats instance, you can use
this sample configuration:
<VirtualHost 0.0.0.0:80>
        ServerName stats.supybot.fr.cr
        ServerAlias stats.supybot-fr.tk
        <Location />
                ProxyPass http://localhost:8080/
                SetEnv force-proxy-request-1.0 1
                SetEnv proxy-nokeepalive 1
        </Location>
</VirtualHost>

Insert a description of your plugin here, with any notes, etc. about using it.

Insert a description of your plugin here, with any notes, etc. about using it.

Plugin which allows users to query weather conditions from Wunderground
using their XML API.

To use:
	Download WunderWeather source
	Place source files in your supybot plugins folder
	Call "load WunderWeather" on your supybot

Configurable options:
	supybot.plugins.WunderWeather.metric
	supybot.plugins.WunderWeather.imperial
	supybot.plugins.WunderWeather.showPressure
	supybot.plugins.WunderWeather.forecastDays

Dependencies:
	None


