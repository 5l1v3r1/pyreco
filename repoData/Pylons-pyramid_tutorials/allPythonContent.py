__FILENAME__ = conf
# -*- coding: utf-8 -*-
#
# Pyramid Tutorials documentation build configuration file, created by
# sphinx-quickstart on Thu Nov 11 23:40:28 2010.
#
# This file is execfile()d with the current directory set to its containing dir.
#
# Note that not all possible configuration values are present in this
# autogenerated file.
#
# All configuration values have a default; values that are commented out
# serve to show the default.

import sys
import os
import datetime

from docutils import nodes
from docutils import utils

# If extensions (or modules to document with autodoc) are in another directory,
# add these directories to sys.path here. If the directory is relative to the
# documentation root, use os.path.abspath to make it absolute, like shown here.

# -- General configuration -----------------------------------------------------

# If your documentation needs a minimal Sphinx version, state it here.
#needs_sphinx = '1.0'

# Add any Sphinx extension module names here, as strings. They can be extensions
# coming with Sphinx (named 'sphinx.ext.*') or your custom ones.

extensions = [
    'sphinx.ext.autodoc',
    'sphinx.ext.intersphinx'
]

intersphinx_mapping = {
    'python': ('http://docs.python.org', None),
    'python3': ('http://docs.python.org/3', None),
    'pyramid':
        ('http://docs.pylonsproject.org/projects/pyramid/en/master/',
         None)
}

# Add any paths that contain templates here, relative to this directory.
templates_path = ['_templates']

# The suffix of source filenames.
source_suffix = '.rst'

# The encoding of source files.
#source_encoding = 'utf-8-sig'

# The master toctree document.
master_doc = 'index'

# General information about the project.
project = u'Pyramid Tutorials'
thisyear = datetime.datetime.now().year
copyright = u'2011-{0}, Pylons Project Contributors'.format(thisyear)

# The version info for the project you're documenting, acts as replacement for
# |version| and |release|, also used in various other places throughout the
# built documents.
#
# The short X.Y version.
version = '0.1'
# The full version, including alpha/beta/rc tags.
release = '0.1'

# The language for content autogenerated by Sphinx. Refer to documentation
# for a list of supported languages.
#language = None

# There are two options for replacing |today|: either, you set today to some
# non-false value, then it is used:
#today = ''
# Else, today_fmt is used as the format for a strftime call.
#today_fmt = '%B %d, %Y'

# List of patterns, relative to source directory, that match files and
# directories to ignore when looking for source files.
exclude_patterns = ['_build', 'env2*', 'env3*']

# The reST default role (used for this markup: `text`) to use for all documents.
#default_role = None

# If true, '()' will be appended to :func: etc. cross-reference text.
#add_function_parentheses = True

# If true, the current module name will be prepended to all description
# unit titles (such as .. function::).
#add_module_names = True

# If true, sectionauthor and moduleauthor directives will be shown in the
# output. They are ignored by default.
#show_authors = False

# The name of the Pygments (syntax highlighting) style to use.
#pygments_style = 'sphinx'

# A list of ignored prefixes for module index sorting.
#modindex_common_prefix = []


# -- Options for HTML output ---------------------------------------------------

# Add and use Pylons theme
from subprocess import call, Popen, PIPE

p = Popen('which git', shell=True, stdout=PIPE)
git = p.stdout.read().strip()
cwd = os.getcwd()
_themes = os.path.join(cwd, '_themes')

if not os.path.isdir(_themes):
    call([git, 'clone', 'git://github.com/Pylons/pylons_sphinx_theme.git',
          '_themes'])
else:
    os.chdir(_themes)
    call([git, 'checkout', 'master'])
    call([git, 'pull'])
    os.chdir(cwd)

sys.path.append(os.path.abspath('_themes'))
html_theme_path = ['_themes']
html_theme = 'pyramid'
html_theme_options = dict(
    github_url='https://github.com/Pylons/pyramid_tutorials'
)

# The theme to use for HTML and HTML Help pages.  See the documentation for
# a list of builtin themes.
#html_theme = 'pylons'

# Theme options are theme-specific and customize the look and feel of a theme
# further.  For a list of options available for each theme, see the
# documentation.
#html_theme_options = {}

# Add any paths that contain custom themes here, relative to this directory.
#html_theme_path = ['_themes']

# The name for this set of Sphinx documents.  If None, it defaults to
# "<project> v<release> documentation".
html_title = 'The Pyramid Tutorials v%s' % release

# A shorter title for the navigation bar.  Default is the same as html_title.
#html_short_title = None

# The name of an image file (relative to this directory) to place at the top
# of the sidebar.
#html_logo = None

# The name of an image file (within the static path) to use as favicon of the
# docs.  This file should be a Windows icon file (.ico) being 16x16 or 32x32
# pixels large.
#html_favicon = None

# Add any paths that contain custom static files (such as style sheets) here,
# relative to this directory. They are copied after the builtin static files,
# so a file named "default.css" will overwrite the builtin "default.css".
#html_static_path = ['_static']

# If not '', a 'Last updated on:' timestamp is inserted at every page bottom,
# using the given strftime format.
html_last_updated_fmt = '%b %d, %Y'

# If true, SmartyPants will be used to convert quotes and dashes to
# typographically correct entities.
#html_use_smartypants = True

# Custom sidebar templates, maps document names to template names.
#html_sidebars = {}

# Additional templates that should be rendered to pages, maps page names to
# template names.
#html_additional_pages = {}

# If false, no module index is generated.
#html_domain_indices = True

# If false, no index is generated.
#html_use_index = True

# If true, the index is split into individual pages for each letter.
#html_split_index = False

# If true, links to the reST sources are added to the pages.
#html_show_sourcelink = True

# If true, "Created using Sphinx" is shown in the HTML footer. Default is True.
#html_show_sphinx = True

# If true, "(C) Copyright ..." is shown in the HTML footer. Default is True.
#html_show_copyright = True

# If true, an OpenSearch description file will be output, and all pages will
# contain a <link> tag referring to it.  The value of this option must be the
# base URL from which the finished HTML is served.
#html_use_opensearch = ''

# This is the file name suffix for HTML files (e.g. ".xhtml").
#html_file_suffix = None

# Output file base name for HTML help builder.
htmlhelp_basename = 'PyramidTutorialsdoc'


# -- Options for LaTeX output --------------------------------------------------

# The paper size ('letter' or 'a4').
#latex_paper_size = 'letter'

# The font size ('10pt', '11pt' or '12pt').
#latex_font_size = '10pt'

# Grouping the document tree into LaTeX files. List of tuples
# (source start file, target name, title, author, documentclass [howto/manual]).
latex_documents = [
    ('index', 'PyramidTutorials.tex', u'Pyramid Tutorials Documentation',
     u'Pylons Project Contributors', 'manual'),
]

# The name of an image file (relative to this directory) to place at the top of
# the title page.
#latex_logo = None

# For "manual" documents, if this is true, then toplevel headings are parts,
# not chapters.
#latex_use_parts = False

# If true, show page references after internal links.
#latex_show_pagerefs = False

# If true, show URL addresses after external links.
#latex_show_urls = False

# Additional stuff for the LaTeX preamble.
#latex_preamble = ''

# Documents to append as an appendix to all manuals.
#latex_appendices = []

# If false, no module index is generated.
#latex_domain_indices = True


# -- Options for manual page output --------------------------------------------

# One entry per manual page. List of tuples
# (source start file, name, description, authors, manual section).
man_pages = [
    ('index', 'pyramidtutorials', u'Pyramid Tutorials Documentation',
     [u'Pylons Project Contributors'], 1)
]


def app_role(role, rawtext, text, lineno, inliner, options={},
             content=[]):
    """custom role for :app: marker, does nothing in particular except allow
    :app:`Pyramid` to work (for later search and replace)."""
    if 'class' in options:
        assert 'classes' not in options
        options['classes'] = options['class']
        del options['class']
    return [nodes.inline(rawtext, utils.unescape(text), **options)], []


def setup(app):
    app.add_role('app', app_role)

########NEW FILE########
__FILENAME__ = helloworld
from wsgiref.simple_server import make_server
from pyramid.config import Configurator
from pyramid.response import Response

def hello_world(request):
    return Response('Hello')

def main():
    config = Configurator()
    config.add_route('hello', '/')
    config.add_view(hello_world, route_name='hello')
    app = config.make_wsgi_app()
    return app

if __name__ == '__main__':
    app = main()
    server = make_server('0.0.0.0', 6547, app)
    print ('Starting up server on http://localhost:6547')
    server.serve_forever()
########NEW FILE########
__FILENAME__ = views
from pyramid.response import Response
from pyramid.view import view_config

@view_config(route_name='hello')
def hello_world(request):
    return Response('Hello')

########NEW FILE########
__FILENAME__ = wikiapp
from wsgiref.simple_server import make_server
from pyramid.config import Configurator

def main():
    config = Configurator()
    config.add_route('hello', '/')
    config.scan('views')
    app = config.make_wsgi_app()
    return app

if __name__ == '__main__':
    app = main()
    server = make_server('0.0.0.0', 6547, app)
    print ('Starting up server on http://localhost:6547')
    server.serve_forever()
########NEW FILE########
__FILENAME__ = tests
import unittest

from pyramid import testing


class ViewTests(unittest.TestCase):
    def setUp(self):
        self.config = testing.setUp()

    def tearDown(self):
        testing.tearDown()

    def test_my_view(self):
        from tutorial.views import hello_world
        request = testing.DummyRequest()
        response = hello_world(request)
        self.assertEqual(response.status, '200 OK')

class FunctionalTests(unittest.TestCase):
    def setUp(self):
        from tutorial import main
        settings = {}
        app = main(settings)
        from webtest import TestApp
        self.testapp = TestApp(app)

    def test_it(self):
        res = self.testapp.get('/', status=200)
        self.assertIn(b'Hello', res.body)

########NEW FILE########
__FILENAME__ = views
from pyramid.response import Response
from pyramid.view import view_config

@view_config(route_name='hello')
def hello_world(request):
    return Response('Hello')

########NEW FILE########
__FILENAME__ = tests
import unittest

from pyramid import testing


class ViewTests(unittest.TestCase):
    def setUp(self):
        self.config = testing.setUp()

    def tearDown(self):
        testing.tearDown()

    def test_my_view(self):
        from tutorial.views import hello_world
        request = testing.DummyRequest()
        response = hello_world(request)
        self.assertEqual(response.status, '200 OK')


class FunctionalTests(unittest.TestCase):
    def setUp(self):
        from tutorial import main
        settings = {}
        app = main(settings)
        from webtest import TestApp
        self.testapp = TestApp(app)

    def test_it(self):
        res = self.testapp.get('/', status=200)
        self.assertIn(b'Hello', res.body)

########NEW FILE########
__FILENAME__ = views
from pyramid.response import Response
from pyramid.view import view_config

@view_config(route_name='hello')
def hello_world(request):
    return Response('Hello')

########NEW FILE########
__FILENAME__ = tests
import unittest

from pyramid import testing


class ViewTests(unittest.TestCase):
    def setUp(self):
        self.config = testing.setUp()

    def tearDown(self):
        testing.tearDown()

    def test_my_view(self):
        from tutorial.views import hello_world
        request = testing.DummyRequest()
        response = hello_world(request)
        self.assertEqual(response['title'], 'Hello World')


class FunctionalTests(unittest.TestCase):
    def setUp(self):
        from tutorial import main
        settings = {}
        app = main(settings)
        from webtest import TestApp
        self.testapp = TestApp(app)

    def test_it(self):
        res = self.testapp.get('/', status=200)
        self.assertIn(b'Hello', res.body)

########NEW FILE########
__FILENAME__ = views
from pyramid.view import view_config

@view_config(route_name='hello', renderer='templates/wiki_view.pt')
def hello_world(request):
    return dict(title='Hello World')

########NEW FILE########
__FILENAME__ = tests
import unittest

from pyramid import testing


class WikiViewTests(unittest.TestCase):
    def setUp(self):
        self.config = testing.setUp()

    def tearDown(self):
        testing.tearDown()

    def test_wiki_view(self):
        from tutorial.views import WikiViews

        request = testing.DummyRequest()
        inst = WikiViews(request)
        response = inst.wiki_view()
        self.assertEqual(response['title'], 'Welcome to the Wiki')


class WikiFunctionalTests(unittest.TestCase):
    def setUp(self):
        from tutorial import main

        settings = {}
        app = main(settings)
        from webtest import TestApp

        self.testapp = TestApp(app)

    def test_it(self):
        res = self.testapp.get('/', status=200)
        self.assertIn(b'Welcome', res.body)
        res = self.testapp.get('/add', status=200)
        self.assertIn(b'Add Wiki Page', res.body)
        res = self.testapp.get('/100', status=200)
        self.assertIn(b'100', res.body)
        res = self.testapp.get('/100/edit', status=200)
        self.assertIn(b'Edit', res.body)
        res = self.testapp.get('/100/delete', status=302)
        self.assertIn(b'Found', res.body)

########NEW FILE########
__FILENAME__ = views
from pyramid.httpexceptions import HTTPFound
from pyramid.renderers import get_renderer
from pyramid.view import view_config


class WikiViews(object):
    def __init__(self, request):
        self.request = request
        renderer = get_renderer("templates/layout.pt")
        self.layout = renderer.implementation().macros['layout']

    @view_config(route_name='wiki_view',
                 renderer='templates/wiki_view.pt')
    def wiki_view(self):
        return dict(title='Welcome to the Wiki')

    @view_config(route_name='wikipage_add',
                 renderer='templates/wikipage_addedit.pt')
    def wikipage_add(self):
        return dict(title='Add Wiki Page')

    @view_config(route_name='wikipage_view',
                 renderer='templates/wikipage_view.pt')
    def wikipage_view(self):
        uid = self.request.matchdict['uid']
        return dict(title='View Wiki Page', uid=uid)

    @view_config(route_name='wikipage_edit',
                 renderer='templates/wikipage_addedit.pt')
    def wikipage_edit(self):
        return dict(title='Edit Wiki Page')

    @view_config(route_name='wikipage_delete')
    def wikipage_delete(self):
        return HTTPFound('/')


########NEW FILE########
__FILENAME__ = tests
import unittest

from pyramid import testing


class WikiViewTests(unittest.TestCase):
    def setUp(self):
        self.config = testing.setUp()

    def tearDown(self):
        testing.tearDown()

    def test_wiki_view(self):
        from tutorial.views import WikiViews

        request = testing.DummyRequest()
        inst = WikiViews(request)
        response = inst.wiki_view()
        self.assertEqual(response['title'], 'Welcome to the Wiki')


class WikiFunctionalTests(unittest.TestCase):
    def setUp(self):
        from tutorial import main

        settings = {}
        app = main(settings)
        from webtest import TestApp

        self.testapp = TestApp(app)

    def test_it(self):
        res = self.testapp.get('/', status=200)
        self.assertIn(b'Welcome', res.body)
        res = self.testapp.get('/add', status=200)
        self.assertIn(b'Add Wiki Page', res.body)
        res = self.testapp.get('/100', status=200)
        self.assertIn(b'100', res.body)
        res = self.testapp.get('/100/edit', status=200)
        self.assertIn(b'Edit', res.body)
        res = self.testapp.get('/100/delete', status=302)
        self.assertIn(b'Found', res.body)

########NEW FILE########
__FILENAME__ = views
from pyramid.httpexceptions import HTTPFound
from pyramid.renderers import get_renderer
from pyramid.view import view_config

pages = [
    dict(uid='100', title='Page 100', body='<em>100</em>'),
    dict(uid='101', title='Page 101', body='<em>101</em>'),
    dict(uid='102', title='Page 102', body='<em>102</em>'),
]


class WikiViews(object):
    def __init__(self, request):
        self.request = request
        renderer = get_renderer("templates/layout.pt")
        self.layout = renderer.implementation().macros['layout']

    @view_config(route_name='wiki_view',
                 renderer='templates/wiki_view.pt')
    def wiki_view(self):
        return dict(title='Welcome to the Wiki', pages=pages)

    @view_config(route_name='wikipage_add',
                 renderer='templates/wikipage_addedit.pt')
    def wikipage_add(self):
        return dict(title='Add Wiki Page')

    @view_config(route_name='wikipage_view',
                 renderer='templates/wikipage_view.pt')
    def wikipage_view(self):
        uid = self.request.matchdict['uid']
        page = [page for page in pages if page['uid'] == uid][0]
        title = page['title']
        return dict(page=page, title=title)

    @view_config(route_name='wikipage_edit',
                 renderer='templates/wikipage_addedit.pt')
    def wikipage_edit(self):
        uid = self.request.matchdict['uid']
        page = [page for page in pages if page['uid'] == uid][0]
        title = 'Edit ' + page['title']
        return dict(title=title)

    @view_config(route_name='wikipage_delete')
    def wikipage_delete(self):
        url = self.request.route_url('wiki_view')
        return HTTPFound(url)

########NEW FILE########
__FILENAME__ = models
pages = {
    '100': dict(uid='100', title='Page 100', body='<em>100</em>'),
    '101': dict(uid='101', title='Page 101', body='<em>101</em>'),
    '102': dict(uid='102', title='Page 102', body='<em>102</em>')
}
########NEW FILE########
__FILENAME__ = tests
import unittest

from pyramid import testing


class WikiViewTests(unittest.TestCase):
    def setUp(self):
        self.config = testing.setUp()

    def tearDown(self):
        testing.tearDown()

    def test_wiki_view(self):
        from tutorial.views import WikiViews

        request = testing.DummyRequest()
        inst = WikiViews(request)
        response = inst.wiki_view()
        self.assertEqual(response['title'], 'Welcome to the Wiki')


class WikiFunctionalTests(unittest.TestCase):
    def setUp(self):
        from tutorial import main

        settings = {}
        app = main(settings)
        from webtest import TestApp

        self.testapp = TestApp(app)

    def test_it(self):
        res = self.testapp.get('/', status=200)
        self.assertIn(b'Welcome', res.body)
        res = self.testapp.get('/add', status=200)
        self.assertIn(b'Add Wiki Page', res.body)
        res = self.testapp.get('/100', status=200)
        self.assertIn(b'100', res.body)
        res = self.testapp.get('/100/edit', status=200)
        self.assertIn(b'Edit', res.body)
        res = self.testapp.get('/100/delete', status=302)
        self.assertIn(b'Found', res.body)

########NEW FILE########
__FILENAME__ = views
import colander
import deform.widget

from pyramid.decorator import reify
from pyramid.httpexceptions import HTTPFound
from pyramid.renderers import get_renderer
from pyramid.view import view_config

from .models import pages


class WikiPage(colander.MappingSchema):
    title = colander.SchemaNode(colander.String())
    body = colander.SchemaNode(
        colander.String(),
        widget=deform.widget.RichTextWidget()
    )


class WikiViews(object):
    def __init__(self, request):
        self.request = request
        renderer = get_renderer("templates/layout.pt")
        self.layout = renderer.implementation().macros['layout']

    @reify
    def wiki_form(self):
        schema = WikiPage()
        return deform.Form(schema, buttons=('submit',))

    @reify
    def reqts(self):
        return self.wiki_form.get_widget_resources()

    @view_config(route_name='wiki_view',
                 renderer='templates/wiki_view.pt')
    def wiki_view(self):
        return dict(title='Welcome to the Wiki',
                    pages=pages.values())

    @view_config(route_name='wikipage_add',
                 renderer='templates/wikipage_addedit.pt')
    def wikipage_add(self):
        form = self.wiki_form.render()

        if 'submit' in self.request.params:
            controls = self.request.POST.items()
            try:
                appstruct = self.wiki_form.validate(controls)
            except deform.ValidationFailure as e:
                # Form is NOT valid
                return dict(title='Add Wiki Page', form=e.render())

            # Form is valid, make a new identifier and add to list
            last_uid = int(sorted(pages.keys())[-1])
            new_uid = str(last_uid + 1)
            pages[new_uid] = dict(
                uid=new_uid, title=appstruct['title'],
                body=appstruct['body']
            )

            # Now visit new page
            url = self.request.route_url('wikipage_view', uid=new_uid)
            return HTTPFound(url)

        return dict(title='Add Wiki Page', form=form)

    @view_config(route_name='wikipage_view',
                 renderer='templates/wikipage_view.pt')
    def wikipage_view(self):
        uid = self.request.matchdict['uid']
        page = pages[uid]
        return dict(page=page, title=page['title'])

    @view_config(route_name='wikipage_edit',
                 renderer='templates/wikipage_addedit.pt')
    def wikipage_edit(self):
        uid = self.request.matchdict['uid']
        page = pages[uid]
        title = 'Edit ' + page['title']

        wiki_form = self.wiki_form

        if 'submit' in self.request.params:
            controls = self.request.POST.items()
            try:
                appstruct = wiki_form.validate(controls)
            except deform.ValidationFailure as e:
                return dict(title=title, page=page, form=e.render())

            # Change the content and redirect to the view
            page['title'] = appstruct['title']
            page['body'] = appstruct['body']

            url = self.request.route_url('wikipage_view',
                                         uid=page['uid'])
            return HTTPFound(url)

        form = wiki_form.render(page)

        return dict(page=page, title=title, form=form)

    @view_config(route_name='wikipage_delete')
    def wikipage_delete(self):
        uid = self.request.matchdict['uid']
        del pages[uid]

        url = self.request.route_url('wiki_view')
        return HTTPFound(url)
########NEW FILE########
__FILENAME__ = models
from pyramid.security import Allow, Everyone

pages = {
    '100': dict(uid='100', title='Page 100', body='<em>100</em>'),
    '101': dict(uid='101', title='Page 101', body='<em>101</em>'),
    '102': dict(uid='102', title='Page 102', body='<em>102</em>')
}


class Root(object):
    __acl__ = [(Allow, Everyone, 'view'),
               (Allow, 'group:editors', 'edit')]

    def __init__(self, request):
        pass
########NEW FILE########
__FILENAME__ = security
USERS = {'editor': 'editor',
         'viewer': 'viewer'}
GROUPS = {'editor': ['group:editors']}


def groupfinder(userid, request):
    if userid in USERS:
        return GROUPS.get(userid, [])
########NEW FILE########
__FILENAME__ = tests
import unittest

from pyramid import testing


class WikiViewTests(unittest.TestCase):
    def setUp(self):
        self.config = testing.setUp()

    def tearDown(self):
        testing.tearDown()

    def test_wiki_view(self):
        from tutorial.views import WikiViews

        request = testing.DummyRequest()
        inst = WikiViews(request)
        response = inst.wiki_view()
        self.assertEqual(response['title'], 'Welcome to the Wiki')


class WikiFunctionalTests(unittest.TestCase):
    def setUp(self):
        from tutorial import main

        settings = {}
        app = main(settings)
        from webtest import TestApp

        self.testapp = TestApp(app)

    def test_it(self):
        res = self.testapp.get('/', status=200)
        self.assertIn(b'Welcome', res.body)
        res = self.testapp.get('/add', status=200)
        self.assertIn(b'Log', res.body)
        res = self.testapp.get('/100', status=200)
        self.assertIn(b'100', res.body)
        res = self.testapp.get('/100/edit', status=200)
        self.assertIn(b'Log', res.body)
        res = self.testapp.get('/100/delete', status=200)
        self.assertIn(b'Log', res.body)

########NEW FILE########
__FILENAME__ = views
import colander
import deform.widget

from pyramid.decorator import reify
from pyramid.httpexceptions import HTTPFound
from pyramid.renderers import get_renderer
from pyramid.security import remember, forget, authenticated_userid
from pyramid.view import view_config, forbidden_view_config

from .models import pages
from .security import USERS


class WikiPage(colander.MappingSchema):
    title = colander.SchemaNode(colander.String())
    body = colander.SchemaNode(
        colander.String(),
        widget=deform.widget.RichTextWidget()
    )


class WikiViews(object):
    def __init__(self, request):
        self.request = request
        renderer = get_renderer("templates/layout.pt")
        self.layout = renderer.implementation().macros['layout']
        self.logged_in = authenticated_userid(request)

    @reify
    def wiki_form(self):
        schema = WikiPage()
        return deform.Form(schema, buttons=('submit',))

    @reify
    def reqts(self):
        return self.wiki_form.get_widget_resources()

    @view_config(route_name='wiki_view',
                 renderer='templates/wiki_view.pt')
    def wiki_view(self):
        return dict(title='Welcome to the Wiki',
                    pages=pages.values())

    @view_config(route_name='wikipage_add',
                 permission='edit',
                 renderer='templates/wikipage_addedit.pt')
    def wikipage_add(self):

        if 'submit' in self.request.params:
            controls = self.request.POST.items()
            try:
                appstruct = self.wiki_form.validate(controls)
            except deform.ValidationFailure as e:
                # Form is NOT valid
                return dict(title='Add Wiki Page', form=e.render())

            # Form is valid, make a new identifier and add to list
            last_uid = int(sorted(pages.keys())[-1])
            new_uid = str(last_uid + 1)
            pages[new_uid] = dict(
                uid=new_uid, title=appstruct['title'],
                body=appstruct['body']
            )

            # Now visit new page
            url = self.request.route_url('wikipage_view', uid=new_uid)
            return HTTPFound(url)

        return dict(title='Add Wiki Page', form=self.wiki_form.render())

    @view_config(route_name='wikipage_view',
                 renderer='templates/wikipage_view.pt')
    def wikipage_view(self):
        uid = self.request.matchdict['uid']
        page = pages[uid]
        return dict(page=page, title=page['title'])

    @view_config(route_name='wikipage_edit',
                 permission='edit',
                 renderer='templates/wikipage_addedit.pt')
    def wikipage_edit(self):
        uid = self.request.matchdict['uid']
        page = pages[uid]
        title = 'Edit ' + page['title']

        if 'submit' in self.request.params:
            controls = self.request.POST.items()
            try:
                appstruct = self.wiki_form.validate(controls)
            except deform.ValidationFailure as e:
                return dict(title=title, page=page, form=e.render())

            # Change the content and redirect to the view
            page['title'] = appstruct['title']
            page['body'] = appstruct['body']

            url = self.request.route_url('wikipage_view',
                                         uid=page['uid'])
            return HTTPFound(url)

        form = self.wiki_form.render(page)

        return dict(page=page, title=title, form=form)

    @view_config(route_name='wikipage_delete', permission='edit')
    def wikipage_delete(self):
        uid = self.request.matchdict['uid']
        del pages[uid]

        url = self.request.route_url('wiki_view')
        return HTTPFound(url)

    @view_config(route_name='login', renderer='templates/login.pt')
    @forbidden_view_config(renderer='templates/login.pt')
    def login(self):
        request = self.request
        login_url = request.route_url('login')
        referrer = request.url
        if referrer == login_url:
            referrer = '/'  # never use login form itself as came_from
        came_from = request.params.get('came_from', referrer)
        message = ''
        login = ''
        password = ''
        if 'form.submitted' in request.params:
            login = request.params['login']
            password = request.params['password']
            if USERS.get(login) == password:
                headers = remember(request, login)
                return HTTPFound(location=came_from,
                                 headers=headers)
            message = 'Failed login'

        return dict(
            title='Login',
            message=message,
            url=request.application_url + '/login',
            came_from=came_from,
            login=login,
            password=password,
        )

    @view_config(route_name='logout')
    def logout(self):
        request = self.request
        headers = forget(request)
        url = request.route_url('wiki_view')
        return HTTPFound(location=url,
                         headers=headers)

########NEW FILE########
__FILENAME__ = models
from pyramid.security import Allow, Everyone

from sqlalchemy import (
    Column,
    Integer,
    Text,
    )

from sqlalchemy.ext.declarative import declarative_base

from sqlalchemy.orm import (
    scoped_session,
    sessionmaker,
    )

from zope.sqlalchemy import ZopeTransactionExtension

DBSession = scoped_session(
    sessionmaker(extension=ZopeTransactionExtension()))
Base = declarative_base()


class Page(Base):
    __tablename__ = 'wikipages'
    uid = Column(Integer, primary_key=True)
    title = Column(Text, unique=True)
    body = Column(Text)

    def __init__(self, title, body):
        self.title = title
        self.body = body


class Root(object):
    __acl__ = [(Allow, Everyone, 'view'),
               (Allow, 'group:editors', 'edit')]

    def __init__(self, request):
        pass
########NEW FILE########
__FILENAME__ = initializedb
import os
import sys
import transaction

from sqlalchemy import engine_from_config

from pyramid.paster import (
    get_appsettings,
    setup_logging,
    )

from ..models import (
    DBSession,
    Page,
    Base,
    )


def usage(argv):
    cmd = os.path.basename(argv[0])
    print('usage: %s <config_uri>\n'
          '(example: "%s development.ini")' % (cmd, cmd))
    sys.exit(1)


def main(argv=sys.argv):
    if len(argv) != 2:
        usage(argv)
    config_uri = argv[1]
    setup_logging(config_uri)
    settings = get_appsettings(config_uri)
    engine = engine_from_config(settings, 'sqlalchemy.')
    DBSession.configure(bind=engine)
    Base.metadata.create_all(engine)
    with transaction.manager:
        model = Page(title='Root', body='<p>Root</p>')
        DBSession.add(model)

########NEW FILE########
__FILENAME__ = security
USERS = {'editor': 'editor',
         'viewer': 'viewer'}
GROUPS = {'editor': ['group:editors']}


def groupfinder(userid, request):
    if userid in USERS:
        return GROUPS.get(userid, [])
########NEW FILE########
__FILENAME__ = tests
import unittest
import transaction

from pyramid import testing


def _initTestingDB():
    from sqlalchemy import create_engine
    from tutorial.models import (
        DBSession,
        Page,
        Base
        )
    engine = create_engine('sqlite://')
    Base.metadata.create_all(engine)
    DBSession.configure(bind=engine)
    with transaction.manager:
        model = Page('FrontPage', 'This is the front page')
        DBSession.add(model)
    return DBSession


class WikiViewTests(unittest.TestCase):
    def setUp(self):
        self.session = _initTestingDB()
        self.config = testing.setUp()

    def tearDown(self):
        self.session.remove()
        testing.tearDown()

    def test_wiki_view(self):
        from tutorial.views import WikiViews

        request = testing.DummyRequest()
        inst = WikiViews(request)
        response = inst.wiki_view()
        self.assertEqual(response['title'], 'Welcome to the Wiki')


class WikiFunctionalTests(unittest.TestCase):
    def setUp(self):
        self.session = _initTestingDB()
        self.config = testing.setUp()
        from pyramid.paster import get_app
        app = get_app('development.ini')
        from webtest import TestApp
        self.testapp = TestApp(app)

    def tearDown(self):
        self.session.remove()
        testing.tearDown()

    def test_it(self):
        res = self.testapp.get('/', status=200)
        self.assertIn(b'Welcome', res.body)
        res = self.testapp.get('/add', status=200)
        self.assertIn(b'Log', res.body)

########NEW FILE########
__FILENAME__ = views
import colander
import deform.widget

from pyramid.decorator import reify
from pyramid.httpexceptions import HTTPFound
from pyramid.renderers import get_renderer
from pyramid.security import remember, forget, authenticated_userid
from pyramid.view import view_config, forbidden_view_config

from .models import DBSession, Page
from .security import USERS


class WikiPage(colander.MappingSchema):
    title = colander.SchemaNode(colander.String())
    body = colander.SchemaNode(
        colander.String(),
        widget=deform.widget.RichTextWidget()
    )


class WikiViews(object):
    def __init__(self, request):
        self.request = request
        renderer = get_renderer("templates/layout.pt")
        self.layout = renderer.implementation().macros['layout']
        self.logged_in = authenticated_userid(request)

    @reify
    def wiki_form(self):
        schema = WikiPage()
        return deform.Form(schema, buttons=('submit',))

    @reify
    def reqts(self):
        return self.wiki_form.get_widget_resources()

    @view_config(route_name='wiki_view',
                 renderer='templates/wiki_view.pt')
    def wiki_view(self):
        pages = DBSession.query(Page).order_by(Page.title)
        return dict(title='Welcome to the Wiki', pages=pages)

    @view_config(route_name='wikipage_add',
                 permission='edit',
                 renderer='templates/wikipage_addedit.pt')
    def wikipage_add(self):

        if 'submit' in self.request.params:
            controls = self.request.POST.items()
            try:
                appstruct = self.wiki_form.validate(controls)
            except deform.ValidationFailure as e:
                # Form is NOT valid
                return dict(title='Add Wiki Page', form=e.render())

            # Add a new page to the database
            new_title = appstruct['title']
            new_body = appstruct['body']
            DBSession.add(Page(new_title, new_body))

            # Get the new ID and redirect
            page = DBSession.query(Page).filter_by(title=new_title).one()
            new_uid = page.uid

            url = self.request.route_url('wikipage_view', uid=new_uid)
            return HTTPFound(url)

        return dict(title='Add Wiki Page', form=self.wiki_form.render())

    @view_config(route_name='wikipage_view',
                 renderer='templates/wikipage_view.pt')
    def wikipage_view(self):
        uid = int(self.request.matchdict['uid'])
        page = DBSession.query(Page).filter_by(uid=uid).one()

        return dict(page=page, title=page.title)

    @view_config(route_name='wikipage_edit',
                 permission='edit',
                 renderer='templates/wikipage_addedit.pt')
    def wikipage_edit(self):
        uid = int(self.request.matchdict['uid'])
        page = DBSession.query(Page).filter_by(uid=uid).one()
        title = 'Edit ' + page.title

        if 'submit' in self.request.params:
            controls = self.request.POST.items()
            try:
                appstruct = self.wiki_form.validate(controls)
            except deform.ValidationFailure as e:
                return dict(title=title, page=page, form=e.render())

            # Change the content and redirect to the view
            page.title = appstruct['title']
            page.body = appstruct['body']

            url = self.request.route_url('wikipage_view', uid=uid)
            return HTTPFound(url)

        form = self.wiki_form.render(dict(
            uid=page.uid, title=page.title, body=page.body)
        )

        return dict(page=page, title=title, form=form)

    @view_config(route_name='wikipage_delete', permission='edit')
    def wikipage_delete(self):
        uid = int(self.request.matchdict['uid'])
        page = DBSession.query(Page).filter_by(uid=uid).one()
        DBSession.delete(page)

        url = self.request.route_url('wiki_view')
        return HTTPFound(url)

    @view_config(route_name='login', renderer='templates/login.pt')
    @forbidden_view_config(renderer='templates/login.pt')
    def login(self):
        request = self.request
        login_url = request.route_url('login')
        referrer = request.url
        if referrer == login_url:
            referrer = '/'  # never use login form itself as came_from
        came_from = request.params.get('came_from', referrer)
        message = ''
        login = ''
        password = ''
        if 'form.submitted' in request.params:
            login = request.params['login']
            password = request.params['password']
            if USERS.get(login) == password:
                headers = remember(request, login)
                return HTTPFound(location=came_from,
                                 headers=headers)
            message = 'Failed login'

        return dict(
            title='Login',
            message=message,
            url=request.application_url + '/login',
            came_from=came_from,
            login=login,
            password=password,
        )

    @view_config(route_name='logout')
    def logout(self):
        request = self.request
        headers = forget(request)
        url = request.route_url('wiki_view')
        return HTTPFound(location=url,
                         headers=headers)
########NEW FILE########
__FILENAME__ = application
from wsgiref.simple_server import make_server

from pyramid.config import Configurator
from pyramid_zodbconn import get_connection

from resources import bootstrap


def root_factory(request):
    conn = get_connection(request)
    return bootstrap(conn.root())


def main():
    settings = {"zodbconn.uri": "file://Data.fs"}
    config = Configurator(root_factory=root_factory, settings=settings)
    config.include("pyramid_zodbconn")
    config.include("pyramid_tm")
    config.add_static_view('static', 'deform:static')
    config.scan("views")
    app = config.make_wsgi_app()
    return app


if __name__ == '__main__':
    app = main()
    server = make_server(host='0.0.0.0', port=8080, app=app)
    server.serve_forever()

########NEW FILE########
__FILENAME__ = resources
from persistent import Persistent
from persistent.mapping import PersistentMapping

from repoze.catalog.indexes.text import CatalogTextIndex
from repoze.catalog.catalog import Catalog
from repoze.catalog.document import DocumentMap


class Folder(PersistentMapping):
    def __init__(self, title):
        super(Folder, self).__init__()
        self.title = title


class SiteFolder(Folder):
    __name__ = None
    __parent__ = None


class Document(Persistent):
    def __init__(self, title, content):
        self.title = title
        self.content = content


def bootstrap(zodb_root):
    if not 'projector' in zodb_root:
        # add site folder
        root = SiteFolder('Projector Site')
        zodb_root['projector'] = root
        # add catalog and document map
        catalog = Catalog()
        catalog['title'] = CatalogTextIndex('title')
        catalog['content'] = CatalogTextIndex('content')
        root.catalog = catalog
        document_map = DocumentMap()
        root.document_map = document_map
    return zodb_root['projector']

########NEW FILE########
__FILENAME__ = views
from pyramid.httpexceptions import HTTPFound
from pyramid.view import view_config
from pyramid.traversal import resource_path
from pyramid.traversal import find_resource
from pyramid.renderers import render_to_response

import colander
from deform import Form
from deform.widget import TextAreaWidget

from resources import Folder
from resources import Document


class FolderSchema(colander.Schema):
    title = colander.SchemaNode(colander.String())


class DocumentSchema(colander.Schema):
    title = colander.SchemaNode(colander.String())
    content = colander.SchemaNode(colander.String(), widget=TextAreaWidget())

class SearchSchema(colander.Schema):
    term = colander.SchemaNode(colander.String())

class ProjectorViews(object):
    def __init__(self, context, request):
        self.context = context
        self.request = request
        self.root = self.request.root
        self.catalog = self.root.catalog
        self.document_map = self.root.document_map

    @view_config(renderer="templates/folder_view.pt")
    def folder_view(self):
        schema = SearchSchema()
        form = Form(schema, buttons=('submit',))
        if 'submit' in self.request.POST:
            term = self.request.POST['term']
            query = "'%s' in title or '%s' in content" % (term, term)
            num, results = self.catalog.query(query)
            results = [self.document_map.address_for_docid(result)
                       for result in results]
            results = [find_resource(self.root, result)
                      for result in results]
            values = {'num': num,
                      'results':results,
                      'request':self.request,
                      'context':self.context,
                      'term':term}
            return render_to_response('templates/search.pt', values)
        return {"search_form": form.render()}

    @view_config(name="add_folder", context=Folder, renderer="templates/form.pt")
    def add_folder(self):
        schema = FolderSchema()
        form = Form(schema, buttons=('submit',))
        if 'submit' in self.request.POST:
            # Make a new Folder
            title = self.request.POST['title']
            doc_id = self.document_map.new_docid()
            name = "folder%s" % doc_id
            new_folder = Folder(title)
            new_folder.__name__ = name
            new_folder.__parent__ = self.context
            self.context[name] = new_folder
            # map object path to catalog id
            path = resource_path(new_folder)
            self.document_map.add(path, doc_id) 
            # index new folder
            self.catalog.index_doc(doc_id, new_folder)
            # Redirect to the new folder
            url = self.request.resource_url(new_folder)
            return HTTPFound(location=url)
        return {"form": form.render()}

    @view_config(name="add_document", context=Folder, renderer="templates/form.pt")
    def add_document(self):
        schema = DocumentSchema()
        form = Form(schema, buttons=('submit',))
        if 'submit' in self.request.POST:
            # Make a new Document
            title = self.request.POST['title']
            content = self.request.POST['content']
            doc_id = self.document_map.new_docid()
            name = "document%s" % doc_id
            new_document = Document(title, content)
            new_document.__name__ = name
            new_document.__parent__ = self.context
            self.context[name] = new_document
            # map object path to catalog id
            path = resource_path(new_document)
            self.document_map.add(path, doc_id) 
            # index new folder
            self.catalog.index_doc(doc_id, new_document)
            # Redirect to the new document
            url = self.request.resource_url(new_document)
            return HTTPFound(location=url)
        return {"form": form.render()}

    @view_config(renderer="templates/document_view.pt",
                 context=Document)
    def document_view(self):
        return {}

########NEW FILE########
__FILENAME__ = application
from wsgiref.simple_server import make_server

from pyramid.config import Configurator
from pyramid.response import Response

# This acts as the view function
def hello_world(request):
    return Response('hello!')

def main():
    # Grab the config, add a view, and make a WSGI app
    config = Configurator()
    config.add_view(hello_world)
    app = config.make_wsgi_app()
    return app

if __name__ == '__main__':
    # When run from command line, launch a WSGI server and app
    app = main()
    server = make_server('0.0.0.0', 8080, app)
    server.serve_forever()

########NEW FILE########
__FILENAME__ = application
from wsgiref.simple_server import make_server

from pyramid.config import Configurator
from pyramid.response import Response

def hello_world(request):
    return Response('hello!')

def main():
    config = Configurator()
    config.add_view(hello_world)
    app = config.make_wsgi_app()
    return app

if __name__ == '__main__':
    app = main()
    server = make_server('0.0.0.0', 8080, app)
    server.serve_forever()

########NEW FILE########
__FILENAME__ = tests
import unittest

class ProjectorViewsUnitTests(unittest.TestCase):
    def test_hello_world(self):
        from application import hello_world
        result = hello_world({})
        self.assertEqual(result.body, b'hello!')

class ProjectorFunctionalTests(unittest.TestCase):
    def setUp(self):
        from application import main
        app = main()
        from webtest import TestApp
        self.testapp = TestApp(app)

    def test_it(self):
        res = self.testapp.get('/', status=200)
        self.assertTrue(b'hello' in res.body)

########NEW FILE########
__FILENAME__ = application
from wsgiref.simple_server import make_server

from pyramid.config import Configurator

def main():
    config = Configurator()
    config.include('pyramid_chameleon')
    config.scan("views")
    app = config.make_wsgi_app()
    return app

if __name__ == '__main__':
    app = main()
    server = make_server('0.0.0.0', 8080, app)
    server.serve_forever()

########NEW FILE########
__FILENAME__ = tests
import unittest

class ProjectorViewsUnitTests(unittest.TestCase):
    def test_hello_view(self):
        from views import hello_view
        result = hello_view({})
        self.assertEqual(result['tutorial'], 'Little Dummy')

class ProjectorFunctionalTests(unittest.TestCase):
    def setUp(self):
        from application import main
        app = main()
        from webtest import TestApp
        self.testapp = TestApp(app)

    def test_it(self):
        res = self.testapp.get('/', status=200)
        self.assertTrue(b'Hello' in res.body)

########NEW FILE########
__FILENAME__ = views
from pyramid.view import view_config

@view_config(renderer="hello.pt")
def hello_view(request):
    return {"tutorial": "Little Dummy"}

########NEW FILE########
__FILENAME__ = application
from wsgiref.simple_server import make_server

from pyramid.config import Configurator

def main():
    config = Configurator()
    config.include('pyramid_chameleon')
    config.scan("views")
    app = config.make_wsgi_app()
    return app

if __name__ == '__main__':
    app = main()
    server = make_server('0.0.0.0', 8080, app)
    server.serve_forever()

########NEW FILE########
__FILENAME__ = tests
import unittest

class ProjectorViewsUnitTests(unittest.TestCase):
    def test_hello_view(self):
        from views import index_view
        result = index_view({})
        self.assertEqual(len(result.keys()), 0)

    def test_about_view(self):
        from views import about_view
        result = about_view({})
        self.assertEqual(len(result.keys()), 0)

    def test_company_view(self):
        from views import company_view
        result = company_view({})
        self.assertEqual(result["company"], "ACME, Inc.")
        self.assertEqual(len(result["projects"]), 2)

    def test_people_view(self):
        from views import people_view
        result = people_view({})
        self.assertEqual(result["company"], "ACME, Inc.")
        self.assertEqual(len(result["people"]), 2)

class ProjectorFunctionalTests(unittest.TestCase):
    def setUp(self):
        from application import main
        app = main()
        from webtest import TestApp
        self.testapp = TestApp(app)

    def test_home(self):
        res = self.testapp.get('/', status=200)
        self.assertTrue(b'Home' in res.body)

    def test_it(self):
        res = self.testapp.get('/', status=200)
        self.assertTrue(b'Home' in res.body)
        res = self.testapp.get('/about.html', status=200)
        self.assertTrue(b'autonomous' in res.body)
        res = self.testapp.get('/people', status=200)
        self.assertTrue(b'Susan' in res.body)
        res = self.testapp.get('/acme', status=200)
        self.assertTrue(b'Silly Slogans' in res.body)

########NEW FILE########
__FILENAME__ = views
from pyramid.view import view_config

@view_config(renderer="index.pt")
def index_view(request):
    return {}


@view_config(renderer="about.pt", name="about.html")
def about_view(request):
    return {}


@view_config(renderer="company.pt", name="acme")
def company_view(request):
    return {"company": COMPANY, "projects": PROJECTS}


@view_config(renderer="people.pt", name="people")
def people_view(request):
    return {"company": COMPANY, "people": PEOPLE}

# Dummy data
COMPANY = "ACME, Inc."

PEOPLE = [
        {'name': 'sstanton', 'title': 'Susan Stanton'},
        {'name': 'bbarker', 'title': 'Bob Barker'},
]

PROJECTS = [
        {'name': 'sillyslogans', 'title': 'Silly Slogans'},
        {'name': 'meaninglessmissions', 'title': 'Meaningless Missions'},
]
########NEW FILE########
__FILENAME__ = application
from wsgiref.simple_server import make_server

from pyramid.config import Configurator

def main():
    config = Configurator()
    config.include('pyramid_chameleon')
    config.scan("views")
    app = config.make_wsgi_app()
    return app

if __name__ == '__main__':
    app = main()
    server = make_server('0.0.0.0', 8080, app)
    server.serve_forever()

########NEW FILE########
__FILENAME__ = tests
import unittest

from pyramid.testing import DummyRequest
from pyramid.testing import setUp
from pyramid.testing import tearDown

class ProjectorViewsUnitTests(unittest.TestCase):
    def setUp(self):
        request = DummyRequest()
        self.config = setUp(request=request)
        self.config.include('pyramid_chameleon')

    def tearDown(self):
        tearDown()

    def test_hello_view(self):
        from views import index_view

        result = index_view({})
        self.assertEqual(result['page_title'], 'Home')

    def test_about_view(self):
        from views import about_view

        result = about_view({})
        self.assertEqual(result['page_title'], 'About')

    def test_company_view(self):
        from views import company_view

        result = company_view({})
        self.assertEqual(result["company"], "ACME, Inc.")
        self.assertEqual(len(result["projects"]), 2)

    def test_people_view(self):
        from views import people_view

        result = people_view({})
        self.assertEqual(result["company"], "ACME, Inc.")
        self.assertEqual(len(result["people"]), 2)


class ProjectorFunctionalTests(unittest.TestCase):
    def setUp(self):
        from application import main

        app = main()
        from webtest import TestApp

        self.testapp = TestApp(app)

    def test_it(self):
        res = self.testapp.get('/', status=200)
        self.assertTrue(b'Home' in res.body)
        res = self.testapp.get('/about.html', status=200)
        self.assertTrue(b'autonomous' in res.body)
        res = self.testapp.get('/people', status=200)
        self.assertTrue(b'Susan' in res.body)
        res = self.testapp.get('/acme', status=200)
        self.assertTrue(b'Silly Slogans' in res.body)

########NEW FILE########
__FILENAME__ = views
from pyramid.renderers import get_renderer
from pyramid.view import view_config

def site_layout():
    renderer = get_renderer("templates/global_layout.pt")
    layout = renderer.implementation().macros['layout']
    return layout


@view_config(renderer="templates/index.pt")
def index_view(request):
    return {"layout": site_layout(),
            "page_title": "Home"}


@view_config(renderer="templates/about.pt", name="about.html")
def about_view(request):
    return {"layout": site_layout(),
            "page_title": "About"}


@view_config(renderer="templates/company.pt", name="acme")
def company_view(request):
    return {"layout": site_layout(),
            "page_title": COMPANY + " Projects",
            "company": COMPANY,
            "projects": PROJECTS}


@view_config(renderer="templates/people.pt", name="people")
def people_view(request):
    return {"layout": site_layout(),
            "page_title": "People", "company": COMPANY, "people": PEOPLE}

# Dummy data
COMPANY = "ACME, Inc."

PEOPLE = [
        {'name': 'sstanton', 'title': 'Susan Stanton'},
        {'name': 'bbarker', 'title': 'Bob Barker'},
]

PROJECTS = [
        {'name': 'sillyslogans', 'title': 'Silly Slogans'},
        {'name': 'meaninglessmissions', 'title': 'Meaningless Missions'},
]
########NEW FILE########
__FILENAME__ = application
from wsgiref.simple_server import make_server

from pyramid.config import Configurator

def main():
    config = Configurator()
    config.include('pyramid_chameleon')
    config.scan("views")
    app = config.make_wsgi_app()
    return app

if __name__ == '__main__':
    app = main()
    server = make_server('0.0.0.0', 8080, app)
    server.serve_forever()

########NEW FILE########
__FILENAME__ = dummy_data
# Dummy data
COMPANY = "ACME, Inc."

PEOPLE = [
        {'name': 'sstanton', 'title': 'Susan Stanton'},
        {'name': 'bbarker', 'title': 'Bob Barker'},
]

PROJECTS = [
        {'name': 'sillyslogans', 'title': 'Silly Slogans'},
        {'name': 'meaninglessmissions', 'title': 'Meaningless Missions'},
]

SITE_MENU = [
        {'href': '', 'title': 'Home'},
        {'href': 'about.html', 'title': 'About Projector'},
        {'href': 'acme', 'title': COMPANY},
        {'href': 'people', 'title': 'People'},
]

########NEW FILE########
__FILENAME__ = tests
import unittest

from pyramid.testing import DummyRequest
from pyramid.testing import setUp
from pyramid.testing import tearDown

class ProjectorViewsUnitTests(unittest.TestCase):
    def setUp(self):
        request = DummyRequest()
        self.config = setUp(request=request)
        self.config.include('pyramid_chameleon')
        
    def tearDown(self):
        tearDown()

    def _makeOne(self, request):
        from views import ProjectorViews

        inst = ProjectorViews(request)
        return inst

    def test_index_view(self):
        request = DummyRequest()
        inst = self._makeOne(request)
        result = inst.index_view()
        self.assertEqual(result['page_title'], 'Home')

    def test_about_view(self):
        request = DummyRequest()
        inst = self._makeOne(request)
        result = inst.about_view()
        self.assertEqual(result['page_title'], 'About')

    def test_company_view(self):
        request = DummyRequest()
        inst = self._makeOne(request)
        result = inst.company_view()
        self.assertEqual(result["page_title"], "ACME, Inc. Projects")
        self.assertEqual(len(result["projects"]), 2)

    def test_people_view(self):
        request = DummyRequest()
        inst = self._makeOne(request)
        result = inst.people_view()
        self.assertEqual(result["page_title"], "People")
        self.assertEqual(len(result["people"]), 2)


class ProjectorFunctionalTests(unittest.TestCase):
    def setUp(self):
        from application import main

        app = main()
        from webtest import TestApp

        self.testapp = TestApp(app)

    def test_it(self):
        res = self.testapp.get('/', status=200)
        self.assertTrue(b'Home' in res.body)
        res = self.testapp.get('/about.html', status=200)
        self.assertTrue(b'autonomous' in res.body)
        res = self.testapp.get('/people', status=200)
        self.assertTrue(b'Susan' in res.body)
        res = self.testapp.get('/acme', status=200)
        self.assertTrue(b'Silly Slogans' in res.body)

########NEW FILE########
__FILENAME__ = views
from pyramid.renderers import get_renderer
from pyramid.decorator import reify
from pyramid.view import view_config

from dummy_data import COMPANY
from dummy_data import PEOPLE
from dummy_data import PROJECTS
from dummy_data import SITE_MENU

class ProjectorViews(object):

    def __init__(self, request):
        self.request = request
        renderer = get_renderer("templates/global_layout.pt")
        self.global_template = renderer.implementation().macros['layout']

    @reify
    def company_name(self):
        return COMPANY

    @reify
    def site_menu(self):
        new_menu = SITE_MENU[:]
        url = self.request.url
        for menu in new_menu:
            if menu['title'] == 'Home':
                menu['current'] = url.endswith('/')
            else:
                menu['current'] = url.endswith(menu['href'])
        return new_menu

    @view_config(renderer="templates/index.pt")
    def index_view(self):
        return {"page_title": "Home"}

    @view_config(renderer="templates/about.pt", name="about.html")
    def about_view(self):
        return {"page_title": "About"}

    @view_config(renderer="templates/company.pt",
                 name="acme")
    def company_view(self):
        return {"page_title": COMPANY + " Projects",
                "projects": PROJECTS}

    @view_config(renderer="templates/people.pt", name="people")
    def people_view(self):
        return {"page_title": "People", "people": PEOPLE}



########NEW FILE########
__FILENAME__ = application
from wsgiref.simple_server import make_server

from pyramid.config import Configurator

def main():
    config = Configurator()
    config.include('pyramid_chameleon')
    config.scan("views")
    app = config.make_wsgi_app()
    return app

if __name__ == '__main__':
    app = main()
    server = make_server('0.0.0.0', 8080, app)
    server.serve_forever()

########NEW FILE########
__FILENAME__ = dummy_data
# Dummy data
COMPANY = "ACME, Inc."

PEOPLE = [
        {'name': 'sstanton', 'title': 'Susan Stanton'},
        {'name': 'bbarker', 'title': 'Bob Barker'},
]

PROJECTS = [
        {'name': 'sillyslogans', 'title': 'Silly Slogans'},
        {'name': 'meaninglessmissions', 'title': 'Meaningless Missions'},
]

SITE_MENU = [
        {'href': '', 'title': 'Home'},
        {'href': 'about.html', 'title': 'About Projector'},
        {'href': 'acme', 'title': COMPANY},
        {'href': 'people', 'title': 'People'},
]

########NEW FILE########
__FILENAME__ = layouts
from pyramid.renderers import get_renderer
from pyramid.decorator import reify

from dummy_data import COMPANY
from dummy_data import SITE_MENU

class Layouts(object):

    @reify
    def global_template(self):
        renderer = get_renderer("templates/global_layout.pt")
        return renderer.implementation().macros['layout']

    @reify
    def company_name(self):
        return COMPANY

    @reify
    def site_menu(self):
        new_menu = SITE_MENU[:]
        url = self.request.url
        for menu in new_menu:
            if menu['title'] == 'Home':
                menu['current'] = url.endswith('/')
            else:
                menu['current'] = url.endswith(menu['href'])
        return new_menu



########NEW FILE########
__FILENAME__ = test_layout
import unittest

from pyramid.testing import DummyRequest
from pyramid.testing import setUp
from pyramid.testing import tearDown

class LayoutUnitTests(unittest.TestCase):
    def setUp(self):
        request = DummyRequest()
        self.config = setUp(request=request)
        self.config.include('pyramid_chameleon')
        
    def tearDown(self):
        tearDown()

    def _makeOne(self):
        from layouts import Layouts

        inst = Layouts()
        return inst

    def test_global_template(self):
        from chameleon.zpt.template import Macro

        inst = self._makeOne()
        self.assertEqual(inst.global_template.__class__, Macro)

    def test_company_name(self):
        from dummy_data import COMPANY

        inst = self._makeOne()
        self.assertEqual(inst.company_name, COMPANY)

    def test_site_menu(self):
        from dummy_data import SITE_MENU

        inst = self._makeOne()
        inst.request = DummyRequest()
        self.assertEqual(len(inst.site_menu), len(SITE_MENU))

########NEW FILE########
__FILENAME__ = test_views
import unittest

from pyramid.testing import DummyRequest
from pyramid.testing import setUp
from pyramid.testing import tearDown

class ProjectorViewsUnitTests(unittest.TestCase):
    def setUp(self):
        request = DummyRequest()
        self.config = setUp(request=request)

    def tearDown(self):
        tearDown()

    def _makeOne(self, request):
        from views import ProjectorViews

        inst = ProjectorViews(request)
        return inst

    def test_index_view(self):
        request = DummyRequest()
        inst = self._makeOne(request)
        result = inst.index_view()
        self.assertEqual(result['page_title'], 'Home')

    def test_about_view(self):
        request = DummyRequest()
        inst = self._makeOne(request)
        result = inst.about_view()
        self.assertEqual(result['page_title'], 'About')

    def test_company_view(self):
        request = DummyRequest()
        inst = self._makeOne(request)
        result = inst.company_view()
        self.assertEqual(result["page_title"], "ACME, Inc. Projects")
        self.assertEqual(len(result["projects"]), 2)

    def test_people_view(self):
        request = DummyRequest()
        inst = self._makeOne(request)
        result = inst.people_view()
        self.assertEqual(result["page_title"], "People")
        self.assertEqual(len(result["people"]), 2)

class ProjectorFunctionalTests(unittest.TestCase):
    def setUp(self):
        from application import main
        app = main()
        from webtest import TestApp
        self.testapp = TestApp(app)

    def test_it(self):
        res = self.testapp.get('/', status=200)
        self.assertTrue(b'Home' in res.body)
        res = self.testapp.get('/about.html', status=200)
        self.assertTrue(b'autonomous' in res.body)
        res = self.testapp.get('/people', status=200)
        self.assertTrue(b'Susan' in res.body)
        res = self.testapp.get('/acme', status=200)
        self.assertTrue(b'Silly Slogans' in res.body)

########NEW FILE########
__FILENAME__ = views
from pyramid.view import view_config

from dummy_data import COMPANY
from dummy_data import PEOPLE
from dummy_data import PROJECTS

from layouts import Layouts

class ProjectorViews(Layouts):

    def __init__(self, request):
        self.request = request

    @view_config(renderer="templates/index.pt")
    def index_view(self):
        return {"page_title": "Home"}

    @view_config(renderer="templates/about.pt", name="about.html")
    def about_view(self):
        return {"page_title": "About"}

    @view_config(renderer="templates/company.pt",
                 name="acme")
    def company_view(self):
        return {"page_title": COMPANY + " Projects",
                "projects": PROJECTS}

    @view_config(renderer="templates/people.pt", name="people")
    def people_view(self):
        return {"page_title": "People", "people": PEOPLE}



########NEW FILE########
__FILENAME__ = application
from wsgiref.simple_server import make_server

from pyramid.config import Configurator

def main():
    config = Configurator()
    config.include('pyramid_chameleon')
    config.scan("views")
    config.add_static_view('static', 'static/',
                           cache_max_age=86400)
    app = config.make_wsgi_app()
    return app

if __name__ == '__main__':
    app = main()
    server = make_server('0.0.0.0', 8080, app)
    server.serve_forever()

########NEW FILE########
__FILENAME__ = dummy_data
# Dummy data
COMPANY = "ACME, Inc."

PEOPLE = [
        {'name': 'sstanton', 'title': 'Susan Stanton'},
        {'name': 'bbarker', 'title': 'Bob Barker'},
]

PROJECTS = [
        {'name': 'sillyslogans', 'title': 'Silly Slogans'},
        {'name': 'meaninglessmissions', 'title': 'Meaningless Missions'},
]

SITE_MENU = [
        {'href': '', 'title': 'Home'},
        {'href': 'about.html', 'title': 'About Projector'},
        {'href': 'acme', 'title': COMPANY},
        {'href': 'people', 'title': 'People'},
]

########NEW FILE########
__FILENAME__ = layouts
from pyramid.renderers import get_renderer
from pyramid.decorator import reify

from dummy_data import COMPANY
from dummy_data import SITE_MENU

class Layouts(object):

    @reify
    def global_template(self):
        renderer = get_renderer("templates/global_layout.pt")
        return renderer.implementation().macros['layout']

    @reify
    def company_name(self):
        return COMPANY

    @reify
    def site_menu(self):
        new_menu = SITE_MENU[:]
        url = self.request.url
        for menu in new_menu:
            if menu['title'] == 'Home':
                menu['current'] = url.endswith('/')
            else:
                menu['current'] = url.endswith(menu['href'])
        return new_menu



########NEW FILE########
__FILENAME__ = test_layout
import unittest

from pyramid.testing import DummyRequest
from pyramid.testing import setUp
from pyramid.testing import tearDown

class LayoutUnitTests(unittest.TestCase):
    def setUp(self):
        request = DummyRequest()
        self.config = setUp(request=request)
        self.config.include('pyramid_chameleon')

    def tearDown(self):
        tearDown()

    def _makeOne(self):
        from layouts import Layouts

        inst = Layouts()
        return inst

    def test_global_template(self):
        from chameleon.zpt.template import Macro

        inst = self._makeOne()
        self.assertEqual(inst.global_template.__class__, Macro)

    def test_company_name(self):
        from dummy_data import COMPANY

        inst = self._makeOne()
        self.assertEqual(inst.company_name, COMPANY)

    def test_site_menu(self):
        from dummy_data import SITE_MENU

        inst = self._makeOne()
        inst.request = DummyRequest()
        self.assertEqual(len(inst.site_menu), len(SITE_MENU))

########NEW FILE########
__FILENAME__ = test_views
import unittest

from pyramid.testing import DummyRequest
from pyramid.testing import setUp
from pyramid.testing import tearDown

class ProjectorViewsUnitTests(unittest.TestCase):
    def setUp(self):
        request = DummyRequest()
        self.config = setUp(request=request)
        self.config.include('pyramid_chameleon')

    def tearDown(self):
        tearDown()

    def _makeOne(self, request):
        from views import ProjectorViews

        inst = ProjectorViews(request)
        return inst

    def test_index_view(self):
        request = DummyRequest()
        inst = self._makeOne(request)
        result = inst.index_view()
        self.assertEqual(result['page_title'], 'Home')

    def test_about_view(self):
        request = DummyRequest()
        inst = self._makeOne(request)
        result = inst.about_view()
        self.assertEqual(result['page_title'], 'About')

    def test_company_view(self):
        request = DummyRequest()
        inst = self._makeOne(request)
        result = inst.company_view()
        self.assertEqual(result["page_title"], "ACME, Inc. Projects")
        self.assertEqual(len(result["projects"]), 2)

    def test_people_view(self):
        request = DummyRequest()
        inst = self._makeOne(request)
        result = inst.people_view()
        self.assertEqual(result["page_title"], "People")
        self.assertEqual(len(result["people"]), 2)

class ProjectorFunctionalTests(unittest.TestCase):
    def setUp(self):
        from application import main
        app = main()
        from webtest import TestApp
        self.testapp = TestApp(app)

    def test_it(self):
        res = self.testapp.get('/', status=200)
        self.assertTrue(b'Home' in res.body)
        res = self.testapp.get('/about.html', status=200)
        self.assertTrue(b'autonomous' in res.body)
        res = self.testapp.get('/people', status=200)
        self.assertTrue(b'Susan' in res.body)
        res = self.testapp.get('/acme', status=200)
        self.assertTrue(b'Silly Slogans' in res.body)

########NEW FILE########
__FILENAME__ = views
from pyramid.view import view_config

from dummy_data import COMPANY
from dummy_data import PEOPLE
from dummy_data import PROJECTS

from layouts import Layouts

class ProjectorViews(Layouts):

    def __init__(self, request):
        self.request = request
        
    @view_config(renderer="templates/index.pt")
    def index_view(self):
        return {"page_title": "Home"}

    @view_config(renderer="templates/about.pt", name="about.html")
    def about_view(self):
        return {"page_title": "About"}

    @view_config(renderer="templates/company.pt",
                 name="acme")
    def company_view(self):
        return {"page_title": COMPANY + " Projects",
                "projects": PROJECTS}

    @view_config(renderer="templates/people.pt", name="people")
    def people_view(self):
        return {"page_title": "People", "people": PEOPLE}


########NEW FILE########
__FILENAME__ = application
from wsgiref.simple_server import make_server

from pyramid.config import Configurator

def main():
    config = Configurator()
    config.include('pyramid_chameleon')
    config.scan("views")
    config.add_static_view('static', 'static/',
                           cache_max_age=86400)
    app = config.make_wsgi_app()
    return app

if __name__ == '__main__':
    app = main()
    server = make_server('0.0.0.0', 8080, app)
    server.serve_forever()

########NEW FILE########
__FILENAME__ = dummy_data
# Dummy data
COMPANY = "ACME, Inc."

PEOPLE = [
        {'name': 'sstanton', 'title': 'Susan Stanton'},
        {'name': 'bbarker', 'title': 'Bob Barker'},
]

PROJECTS = [
        {'name': 'sillyslogans', 'title': 'Silly Slogans'},
        {'name': 'meaninglessmissions', 'title': 'Meaningless Missions'},
]

SITE_MENU = [
        {'href': '', 'title': 'Home'},
        {'href': 'about.html', 'title': 'About Projector'},
        {'href': 'acme', 'title': COMPANY},
        {'href': 'people', 'title': 'People'},
]

########NEW FILE########
__FILENAME__ = layouts
from pyramid.renderers import get_renderer
from pyramid.decorator import reify

from dummy_data import COMPANY
from dummy_data import SITE_MENU

class Layouts(object):

    @reify
    def global_template(self):
        renderer = get_renderer("templates/global_layout.pt")
        return renderer.implementation().macros['layout']

    @reify
    def company_name(self):
        return COMPANY

    @reify
    def site_menu(self):
        new_menu = SITE_MENU[:]
        url = self.request.url
        for menu in new_menu:
            if menu['title'] == 'Home':
                menu['current'] = url.endswith('/')
            else:
                menu['current'] = url.endswith(menu['href'])
        return new_menu



########NEW FILE########
__FILENAME__ = test_layout
import unittest

from pyramid.testing import DummyRequest
from pyramid.testing import setUp
from pyramid.testing import tearDown

class LayoutUnitTests(unittest.TestCase):
    def setUp(self):
        request = DummyRequest()
        self.config = setUp(request=request)
        self.config.include('pyramid_chameleon')

    def tearDown(self):
        tearDown()

    def _makeOne(self):
        from layouts import Layouts

        inst = Layouts()
        return inst

    def test_global_template(self):
        from chameleon.zpt.template import Macro

        inst = self._makeOne()
        self.assertEqual(inst.global_template.__class__, Macro)

    def test_company_name(self):
        from dummy_data import COMPANY

        inst = self._makeOne()
        self.assertEqual(inst.company_name, COMPANY)

    def test_site_menu(self):
        from dummy_data import SITE_MENU

        inst = self._makeOne()
        inst.request = DummyRequest()
        self.assertEqual(len(inst.site_menu), len(SITE_MENU))

########NEW FILE########
__FILENAME__ = test_views
import unittest

from pyramid.testing import DummyRequest
from pyramid.testing import setUp
from pyramid.testing import tearDown

class ProjectorViewsUnitTests(unittest.TestCase):
    def setUp(self):
        request = DummyRequest()
        self.config = setUp(request=request)
        self.config.include('pyramid_chameleon')

    def tearDown(self):
        tearDown()

    def _makeOne(self, request):
        from views import ProjectorViews

        inst = ProjectorViews(request)
        return inst

    def test_index_view(self):
        request = DummyRequest()
        inst = self._makeOne(request)
        result = inst.index_view()
        self.assertEqual(result['page_title'], 'Home')

    def test_about_view(self):
        request = DummyRequest()
        inst = self._makeOne(request)
        result = inst.about_view()
        self.assertEqual(result['page_title'], 'About')

    def test_company_view(self):
        request = DummyRequest()
        inst = self._makeOne(request)
        result = inst.company_view()
        self.assertEqual(result["page_title"], "ACME, Inc. Projects")
        self.assertEqual(len(result["projects"]), 2)

    def test_people_view(self):
        request = DummyRequest()
        inst = self._makeOne(request)
        result = inst.people_view()
        self.assertEqual(result["page_title"], "People")
        self.assertEqual(len(result["people"]), 2)

    def test_updates_view(self):
        request = DummyRequest()
        inst = self._makeOne(request)
        result = inst.updates_view()
        self.assertEqual(len(result), 5)

class ProjectorFunctionalTests(unittest.TestCase):
    def setUp(self):
        from application import main
        app = main()
        from webtest import TestApp
        self.testapp = TestApp(app)

    def test_it(self):
        res = self.testapp.get('/', status=200)
        self.assertTrue(b'Home' in res.body)
        res = self.testapp.get('/about.html', status=200)
        self.assertTrue(b'autonomous' in res.body)
        res = self.testapp.get('/people', status=200)
        self.assertTrue(b'Susan' in res.body)
        res = self.testapp.get('/acme', status=200)
        self.assertTrue(b'Silly Slogans' in res.body)
        res = self.testapp.get('/updates.json', status=200)
        self.assertTrue(b'888' in res.body)

########NEW FILE########
__FILENAME__ = views
from random import randint

from pyramid.view import view_config

from dummy_data import COMPANY
from dummy_data import PEOPLE
from dummy_data import PROJECTS

from layouts import Layouts

class ProjectorViews(Layouts):

    def __init__(self, request):
        self.request = request
        
    @view_config(renderer="templates/index.pt")
    def index_view(self):
        return {"page_title": "Home"}

    @view_config(renderer="templates/about.pt", name="about.html")
    def about_view(self):
        return {"page_title": "About"}

    @view_config(renderer="templates/company.pt",
                 name="acme")
    def company_view(self):
        return {"page_title": COMPANY + " Projects",
                "projects": PROJECTS}

    @view_config(renderer="templates/people.pt", name="people")
    def people_view(self):
        return {"page_title": "People", "people": PEOPLE}

    @view_config(renderer="json", name="updates.json")
    def updates_view(self):
        return [
            randint(0,100),
            randint(0,100),
            randint(0,100),
            randint(0,100),
            888,
        ]



########NEW FILE########
__FILENAME__ = application
from wsgiref.simple_server import make_server

from pyramid.config import Configurator

def main():
    config = Configurator()
    config.include('pyramid_chameleon')
    config.scan("views")
    config.add_static_view('static', 'static/',
                           cache_max_age=86400)
    app = config.make_wsgi_app()
    return app

if __name__ == '__main__':
    app = main()
    server = make_server('0.0.0.0', 8080, app)
    server.serve_forever()

########NEW FILE########
__FILENAME__ = dummy_data
# Dummy data
COMPANY = "ACME, Inc."

PEOPLE = [
        {'name': 'sstanton', 'title': 'Susan Stanton'},
        {'name': 'bbarker', 'title': 'Bob Barker'},
]

PROJECTS = [
        {'name': 'sillyslogans', 'title': 'Silly Slogans'},
        {'name': 'meaninglessmissions', 'title': 'Meaningless Missions'},
]

SITE_MENU = [
        {'href': '', 'title': 'Home'},
        {'href': 'about.html', 'title': 'About Projector'},
        {'href': 'acme', 'title': COMPANY},
        {'href': 'people', 'title': 'People'},
]

########NEW FILE########
__FILENAME__ = layouts
from pyramid.renderers import get_renderer
from pyramid.decorator import reify

from dummy_data import COMPANY
from dummy_data import SITE_MENU

class Layouts(object):

    @reify
    def global_template(self):
        renderer = get_renderer("templates/global_layout.pt")
        return renderer.implementation().macros['layout']

    @reify
    def company_name(self):
        return COMPANY

    @reify
    def global_macros(self):
        renderer = get_renderer("templates/macros.pt")
        return renderer.implementation().macros

    @reify
    def site_menu(self):
        new_menu = SITE_MENU[:]
        url = self.request.url
        for menu in new_menu:
            if menu['title'] == 'Home':
                menu['current'] = url.endswith('/')
            else:
                menu['current'] = url.endswith(menu['href'])
        return new_menu



########NEW FILE########
__FILENAME__ = test_layout
import unittest

from pyramid.testing import DummyRequest
from pyramid.testing import setUp
from pyramid.testing import tearDown

class LayoutUnitTests(unittest.TestCase):
    def setUp(self):
        request = DummyRequest()
        self.config = setUp(request=request)
        self.config.include('pyramid_chameleon')

    def tearDown(self):
        tearDown()

    def _makeOne(self):
        from layouts import Layouts

        inst = Layouts()
        return inst

    def test_global_template(self):
        from chameleon.zpt.template import Macro

        inst = self._makeOne()
        self.assertEqual(inst.global_template.__class__, Macro)

    def test_global_macros(self):
        from chameleon.zpt.template import Macros

        inst = self._makeOne()
        self.assertEqual(inst.global_macros.__class__, Macros)


    def test_company_name(self):
        from dummy_data import COMPANY

        inst = self._makeOne()
        self.assertEqual(inst.company_name, COMPANY)

    def test_site_menu(self):
        from dummy_data import SITE_MENU

        inst = self._makeOne()
        inst.request = DummyRequest()
        self.assertEqual(len(inst.site_menu), len(SITE_MENU))

########NEW FILE########
__FILENAME__ = test_views
import unittest

from pyramid.testing import DummyRequest
from pyramid.testing import setUp
from pyramid.testing import tearDown

class ProjectorViewsUnitTests(unittest.TestCase):
    def setUp(self):
        request = DummyRequest()
        self.config = setUp(request=request)
        self.config.include('pyramid_chameleon')

    def tearDown(self):
        tearDown()

    def _makeOne(self, request):
        from views import ProjectorViews

        inst = ProjectorViews(request)
        return inst

    def test_index_view(self):
        request = DummyRequest()
        inst = self._makeOne(request)
        result = inst.index_view()
        self.assertEqual(result['page_title'], 'Home')

    def test_about_view(self):
        request = DummyRequest()
        inst = self._makeOne(request)
        result = inst.about_view()
        self.assertEqual(result['page_title'], 'About')

    def test_company_view(self):
        request = DummyRequest()
        inst = self._makeOne(request)
        result = inst.company_view()
        self.assertEqual(result["page_title"], "ACME, Inc. Projects")
        self.assertEqual(len(result["projects"]), 2)

    def test_people_view(self):
        request = DummyRequest()
        inst = self._makeOne(request)
        result = inst.people_view()
        self.assertEqual(result["page_title"], "People")
        self.assertEqual(len(result["people"]), 2)

    def test_updates_view(self):
        request = DummyRequest()
        inst = self._makeOne(request)
        result = inst.updates_view()
        self.assertEqual(len(result), 5)

class ProjectorFunctionalTests(unittest.TestCase):
    def setUp(self):
        from application import main
        app = main()
        from webtest import TestApp
        self.testapp = TestApp(app)

    def test_it(self):
        res = self.testapp.get('/', status=200)
        self.assertTrue(b'Home' in res.body)
        res = self.testapp.get('/about.html', status=200)
        self.assertTrue(b'autonomous' in res.body)
        res = self.testapp.get('/people', status=200)
        self.assertTrue(b'Susan' in res.body)
        res = self.testapp.get('/acme', status=200)
        self.assertTrue(b'Silly Slogans' in res.body)
        res = self.testapp.get('/updates.json', status=200)
        self.assertTrue(b'888' in res.body)

########NEW FILE########
__FILENAME__ = views
from random import randint

from pyramid.view import view_config

from dummy_data import COMPANY
from dummy_data import PEOPLE
from dummy_data import PROJECTS

from layouts import Layouts

class ProjectorViews(Layouts):

    def __init__(self, request):
        self.request = request

    @view_config(renderer="templates/index.pt")
    def index_view(self):
        return {"page_title": "Home"}

    @view_config(renderer="templates/about.pt", name="about.html")
    def about_view(self):
        return {"page_title": "About"}

    @view_config(renderer="templates/company.pt",
                 name="acme")
    def company_view(self):
        return {"page_title": COMPANY + " Projects",
                "projects": PROJECTS}

    @view_config(renderer="templates/people.pt", name="people")
    def people_view(self):
        return {"page_title": "People", "people": PEOPLE}

    @view_config(renderer="json", name="updates.json")
    def updates_view(self):
        return [
            randint(0,100),
            randint(0,100),
            randint(0,100),
            randint(0,100),
            888,
        ]



########NEW FILE########
__FILENAME__ = application
from wsgiref.simple_server import make_server

from pyramid.config import Configurator


def main():
    config = Configurator()
    config.scan("views")
    config.add_static_view('deform_static', 'deform:static')
    app = config.make_wsgi_app()
    return app


if __name__ == '__main__':
    app = main()
    server = make_server(host='0.0.0.0', port=8080, app=app)
    server.serve_forever()

########NEW FILE########
__FILENAME__ = tests
import unittest

from pyramid.testing import DummyRequest

class ProjectorViewsUnitTests(unittest.TestCase):

    def _makeOne(self, request):
        from views import ProjectorViews
        inst = ProjectorViews(request)
        return inst

    def test_site_view(self):
        request = DummyRequest()
        inst = self._makeOne(request)
        result = inst.site_view()
        self.assertTrue('form' in result.keys())

class ProjectorFunctionalTests(unittest.TestCase):
    def setUp(self):
        from application import main
        app = main()
        from webtest import TestApp
        self.testapp = TestApp(app)

    def test_it(self):
        res = self.testapp.get('/', status=200)
        self.assertTrue('Hello Form' in res.body)

########NEW FILE########
__FILENAME__ = views
import colander
from deform import Form
from pyramid.view import view_config

class Person(colander.MappingSchema):
    name = colander.SchemaNode(colander.String())

class ProjectorViews(object):
    def __init__(self, request):
        self.request = request

    @view_config(renderer="templates/site_view.pt")
    def site_view(self):
        schema = Person()
        myform = Form(schema, buttons=('submit',))

        return {"form": myform.render()}


########NEW FILE########
__FILENAME__ = application
from wsgiref.simple_server import make_server

from pyramid.config import Configurator


def main():
    config = Configurator()
    config.scan("views")
    config.add_static_view('deform_static', 'deform:static')
    app = config.make_wsgi_app()
    return app


if __name__ == '__main__':
    app = main()
    server = make_server(host='0.0.0.0', port=8080, app=app)
    server.serve_forever()

########NEW FILE########
__FILENAME__ = tests
import unittest

from pyramid.testing import DummyRequest

class ProjectorViewsUnitTests(unittest.TestCase):

    def _makeOne(self, request):
        from views import ProjectorViews
        inst = ProjectorViews(request)
        return inst

    def test_site_view(self):
        request = DummyRequest()
        inst = self._makeOne(request)
        result = inst.site_view()
        self.assertTrue('form' in result.keys())

class ProjectorFunctionalTests(unittest.TestCase):
    def setUp(self):
        from application import main
        app = main()
        from webtest import TestApp
        self.testapp = TestApp(app)

    def test_GET(self):
        # Get the form
        res = self.testapp.get('/', status=200)
        self.assertTrue('Hello Form' in res.body)


########NEW FILE########
__FILENAME__ = views
from pyramid.view import view_config

import colander
from deform import Form
from deform import ValidationFailure

class Person(colander.MappingSchema):
    name = colander.SchemaNode(colander.String())
    shoe_size = colander.SchemaNode(
        colander.Integer(),
        missing = 0,
    )

class ProjectorViews(object):
    def __init__(self, request):
        self.request = request

    @view_config(renderer="templates/site_view.pt")
    def site_view(self):
        schema = Person()
        myform = Form(schema, buttons=('submit',))

        if 'submit' in self.request.POST:
            controls = self.request.POST.items()
            try:
                appstruct = myform.validate(controls)
            except ValidationFailure, e:
                return {'form':e.render(), 'values': False}
            # Process the valid form data, do some work
            values = {
                "name": appstruct['name'],
                "shoe_size": appstruct['shoe_size'],
                }
            return {"form": myform.render(), "values": values}

        # We are a GET not a POST
        return {"form": myform.render(), "values": None}


########NEW FILE########
__FILENAME__ = application
from wsgiref.simple_server import make_server

from pyramid.config import Configurator

from resources import bootstrap


def main():
    config = Configurator(root_factory=bootstrap)
    config.scan("views")
    app = config.make_wsgi_app()
    return app


if __name__ == '__main__':
    app = main()
    server = make_server(host='0.0.0.0', port=8080, app=app)
    server.serve_forever()

########NEW FILE########
__FILENAME__ = resources
class SiteFolder(dict):
    __name__ = ''
    __parent__ = None

    def __init__(self, title):
        self.title = title

def bootstrap(request):
    root = SiteFolder('Projector Site')

    return root

########NEW FILE########
__FILENAME__ = tests
import unittest

from pyramid.testing import DummyRequest
from pyramid.testing import DummyResource

class ProjectorViewsUnitTests(unittest.TestCase):
    def test_default_view(self):
        from views import ProjectorViews

        request = DummyRequest()
        title = "Dummy Context"
        context = DummyResource(title=title)
        inst = ProjectorViews(context, request)
        result = inst.default_view()
        self.failUnless('SiteFolder' in result.body)
        self.failUnless(title in result.body)


class ProjectorFunctionalTests(unittest.TestCase):
    def setUp(self):
        from application import main

        app = main()
        from webtest import TestApp

        self.testapp = TestApp(app)

    def test_it(self):
        res = self.testapp.get('/', status=200)
        self.assertTrue('SiteFolder' in res.body)
        self.assertTrue('Projector Site' in res.body)

########NEW FILE########
__FILENAME__ = views
from pyramid.response import Response
from pyramid.view import view_config

class ProjectorViews(object):
    def __init__(self, context, request):
        self.context = context
        self.request = request

    @view_config()
    def default_view(self):
        body = "This SiteFolder is named: " + self.context.title
        return Response(body)


########NEW FILE########
__FILENAME__ = application
from wsgiref.simple_server import make_server

from pyramid.config import Configurator
from resources import bootstrap


def main():
    config = Configurator(root_factory=bootstrap)
    config.scan("views")
    app = config.make_wsgi_app()
    return app


if __name__ == '__main__':
    app = main()
    server = make_server(host='0.0.0.0', port=8080, app=app)
    server.serve_forever()

########NEW FILE########
__FILENAME__ = resources
class Folder(dict):
    def __init__(self, name, parent, title):
        self.__name__ = name
        self.__parent__ = parent
        self.title = title


class SiteFolder(Folder):
    pass


class Document(object):
    def __init__(self, name, parent, title):
        self.__name__ = name
        self.__parent__ = parent
        self.title = title

root = SiteFolder('', None, 'Projector Site')

def bootstrap(request):
    # Let's make:
    # /
    #   doc1
    #   doc2
    #   folder1/
    #      doc1
    doc1 = Document('doc1', root, 'Document 01')
    root['doc1'] = doc1
    doc2 = Document('doc2', root, 'Document 02')
    root['doc2'] = doc2
    folder1 = Folder('folder1', root, 'Folder 01')
    root['folder1'] = folder1

    # Only has to be unique in folder
    doc11 = Document('doc1', folder1, 'Document 01')
    folder1['doc1'] = doc11

    return root

########NEW FILE########
__FILENAME__ = tests
import unittest

from pyramid.testing import DummyRequest
from pyramid.testing import DummyResource

class ProjectorViewsUnitTests(unittest.TestCase):
    def test_default_view(self):
        from views import ProjectorViews

        request = DummyRequest()
        title = "Dummy Context"
        context = DummyResource(title=title, __name__='dummy')
        inst = ProjectorViews(context, request)
        result = inst.default_view()
        self.assertEqual(result['page_title'], 'Dummy Context')
        self.assertEqual(result['parent_title'], 'None')
        self.assertEqual(result['name'], 'dummy')

class ProjectorFunctionalTests(unittest.TestCase):
    def setUp(self):
        from application import main

        app = main()
        from webtest import TestApp

        self.testapp = TestApp(app)

    def test_it(self):
        res = self.testapp.get('/', status=200)
        self.assertTrue('Site Folder' in res.body)
        self.assertTrue('Projector Site' in res.body)

########NEW FILE########
__FILENAME__ = views
from pyramid.view import view_config

class ProjectorViews(object):
    def __init__(self, context, request):
        self.context = context
        self.request = request

    @view_config(renderer="templates/default_view.pt")
    def default_view(self):
        # XXX Might be done more cleanly
        parent = self.context.__parent__
        if parent:
            parent_title = parent.title
        else:
            parent_title = "None"
        return {
            "page_title": self.context.title,
            "name": self.context.__name__,
            "parent_title": parent_title,
            }


########NEW FILE########
__FILENAME__ = application
from wsgiref.simple_server import make_server

from pyramid.config import Configurator

from resources import bootstrap


def main():
    config = Configurator(root_factory=bootstrap)
    config.scan("views")
    app = config.make_wsgi_app()
    return app


if __name__ == '__main__':
    app = main()
    server = make_server(host='0.0.0.0', port=8080, app=app)
    server.serve_forever()

########NEW FILE########
__FILENAME__ = resources
class Folder(dict):
    def __init__(self, name, parent, title):
        self.__name__ = name
        self.__parent__ = parent
        self.title = title


class SiteFolder(Folder):
    pass


class Document(object):
    def __init__(self, name, parent, title):
        self.__name__ = name
        self.__parent__ = parent
        self.title = title


root = SiteFolder('', None, 'Projector Site')

def bootstrap(request):
    # Let's make:
    # /
    #   doc1
    #   doc2
    #   folder1/
    #      doc1
    doc1 = Document('doc1', root, 'Document 01')
    root['doc1'] = doc1
    doc2 = Document('doc2', root, 'Document 02')
    root['doc2'] = doc2
    folder1 = Folder('folder1', root, 'Folder 01')
    root['folder1'] = folder1

    # Only has to be unique in folder
    doc11 = Document('doc1', folder1, 'Document 01')
    folder1['doc1'] = doc11

    return root

########NEW FILE########
__FILENAME__ = tests
import unittest

from pyramid.testing import DummyRequest
from pyramid.testing import DummyResource

class DummySite(object):
    title = "Dummy Title"
    __name__ = "dummy"
    __parent__ = None

    def values(self):
        return [1,2,3,4,5]
    
class ProjectorViewsUnitTests(unittest.TestCase):

    def _makeOne(self, context, request):
        from views import ProjectorViews
        inst = ProjectorViews(context, request)
        return inst

    def test_site_view(self):
        request = DummyRequest()
        context = DummySite()
        inst = self._makeOne(context, request)
        result = inst.site_view()
        self.assertEqual(len(result['children']), 5)

    def test_folder_view(self):
        request = DummyRequest()
        context = DummySite()
        inst = self._makeOne(context, request)
        result = inst.folder_view()
        self.assertEqual(len(result['children']), 5)

    def test_document_view(self):
        request = DummyRequest()
        context = DummyResource()
        inst = self._makeOne(context, request)
        result = inst.document_view()
        self.assertEqual(result, {})

class ProjectorFunctionalTests(unittest.TestCase):
    def setUp(self):
        from application import main
        app = main()
        from webtest import TestApp
        self.testapp = TestApp(app)

    def test_it(self):
        res = self.testapp.get('/', status=200)
        self.assertTrue('SiteFolder' in res.body)
        res = self.testapp.get('/folder1', status=200)
        self.assertTrue('Folder' in res.body)
        res = self.testapp.get('/doc1', status=200)
        self.assertTrue('Document' in res.body)
        res = self.testapp.get('/doc2', status=200)
        self.assertTrue('Document' in res.body)
        res = self.testapp.get('/folder1/doc1', status=200)
        self.assertTrue('Document' in res.body)

########NEW FILE########
__FILENAME__ = views
from pyramid.view import view_config

from resources import SiteFolder
from resources import Folder
from resources import Document

class ProjectorViews(object):
    def __init__(self, context, request):
        self.context = context
        self.request = request

    @view_config(renderer="templates/site_view.pt",
                 context=SiteFolder)
    def site_view(self):
        return {"children": self.context.values()}

    @view_config(renderer="templates/folder_view.pt",
                 context=Folder)
    def folder_view(self):
        return {"children": self.context.values()}


    @view_config(renderer="templates/document_view.pt",
                 context=Document)
    def document_view(self):
        return {}

########NEW FILE########
__FILENAME__ = application
from wsgiref.simple_server import make_server

from pyramid.config import Configurator

from resources import bootstrap


def main():
    config = Configurator(root_factory=bootstrap)
    config.scan("views")
    app = config.make_wsgi_app()
    return app


if __name__ == '__main__':
    app = main()
    server = make_server(host='0.0.0.0', port=8080, app=app)
    server.serve_forever()

########NEW FILE########
__FILENAME__ = resources
class Folder(dict):
    def __init__(self, name, parent, title):
        self.__name__ = name
        self.__parent__ = parent
        self.title = title


class SiteFolder(Folder):
    pass


class Document(object):
    def __init__(self, name, parent, title):
        self.__name__ = name
        self.__parent__ = parent
        self.title = title

root = SiteFolder('', None, 'Projector Site')

def bootstrap(request):
    # Let's make:
    # /
    #   doc1
    #   doc2
    #   folder1/
    #      doc1
    doc1 = Document('doc1', root, 'Document 01')
    root['doc1'] = doc1
    doc2 = Document('doc2', root, 'Document 02')
    root['doc2'] = doc2
    folder1 = Folder('folder1', root, 'Folder 01')
    root['folder1'] = folder1

    # Only has to be unique in folder
    doc11 = Document('doc1', folder1, 'Document 01')
    folder1['doc1'] = doc11

    return root

########NEW FILE########
__FILENAME__ = tests
import unittest

from pyramid.testing import DummyRequest
from pyramid.testing import DummyResource

class DummySite(DummyResource):
    title = "Dummy Title"
    __name__ = "dummy"
    __parent__ = None

    def values(self):
        v = DummyResource(title="Dummy Item")
        return [v, v, v, v, v]
    
class ProjectorViewsUnitTests(unittest.TestCase):

    def _makeOne(self, context, request):
        from views import ProjectorViews
        inst = ProjectorViews(context, request)
        return inst

    def test_site_view(self):
        request = DummyRequest()
        context = DummySite()
        inst = self._makeOne(context, request)
        result = inst.site_view()
        self.assertEqual(len(result['children']), 5)

    def test_folder_view(self):
        request = DummyRequest()
        context = DummySite()
        inst = self._makeOne(context, request)
        result = inst.folder_view()
        self.assertEqual(len(result['children']), 5)

    def test_document_view(self):
        request = DummyRequest()
        context = DummyResource()
        inst = self._makeOne(context, request)
        result = inst.document_view()
        self.assertEqual(result, {})

    def test_add_folder_view(self):
        from pyramid.httpexceptions import HTTPFound
        t = 'New Folder'
        request=DummyRequest(params={'folder_title': t})
        context = DummySite()
        inst = self._makeOne(context, request)
        result = inst.add_folder_view()
        # XXX Need a test that the item actually went in the folder
        self.assertEqual(HTTPFound, result.__class__)

    def test_add_document_view(self):
        from pyramid.httpexceptions import HTTPFound
        request=DummyRequest(folder_title='New Document')
        context = DummySite()
        inst = self._makeOne(context, request)
        result = inst.site_view()
        #self.assertEqual(HTTPFound, result.__class__)
        # XXX Need tests that the doc was actually added

class ProjectorFunctionalTests(unittest.TestCase):
    def setUp(self):
        from application import main
        app = main()
        from webtest import TestApp
        self.testapp = TestApp(app)

    def test_it(self):
        res = self.testapp.get('/', status=200)
        self.assertTrue('SiteFolder' in res.body)
        res = self.testapp.get('/folder1', status=200)
        self.assertTrue('Folder' in res.body)
        res = self.testapp.get('/doc1', status=200)
        self.assertTrue('Document' in res.body)
        res = self.testapp.get('/doc2', status=200)
        self.assertTrue('Document' in res.body)
        res = self.testapp.get('/folder1/doc1', status=200)
        self.assertTrue('Document' in res.body)

########NEW FILE########
__FILENAME__ = views
from random import randint

from pyramid.decorator import reify
from pyramid.httpexceptions import HTTPFound
from pyramid.view import view_config

from resources import SiteFolder
from resources import Folder
from resources import Document


class ProjectorViews(object):
    def __init__(self, context, request):
        self.context = context
        self.request = request

    @view_config(renderer="templates/site_view.pt",
                 context=SiteFolder)
    def site_view(self):
        return {"children": self.context.values()}

    @reify
    def parent_info(self):
        parent = self.context.__parent__
        parent_url = self.request.resource_url(parent)
        return {
            'title': parent.title,
            'url': parent_url}

    @view_config(renderer="templates/folder_view.pt",
                 context=Folder)
    def folder_view(self):
        return {"children": self.context.values()}

    @view_config(name="add_folder", context=Folder)
    def add_folder_view(self):
        # Make a new Folder
        title = self.request.POST['folder_title']
        name = str(randint(0, 999999))
        new_folder = Folder(name, self.context, title)
        self.context[name] = new_folder

        # Redirect to the new folder
        url = self.request.resource_url(new_folder)
        return HTTPFound(location=url)

    @view_config(name="add_document", context=Folder)
    def add_document_view(self):
        # Make a new Document
        title = self.request.POST['document_title']
        name = str(randint(0, 999999))
        new_document = Document(name, self.context, title)
        self.context[name] = new_document

        # Redirect to the new document
        url = self.request.resource_url(new_document)
        return HTTPFound(location=url)

    @view_config(renderer="templates/document_view.pt",
                 context=Document)
    def document_view(self):
        return {}

########NEW FILE########
__FILENAME__ = application
from pyramid.config import Configurator

from wsgiref.simple_server import make_server

from resources import bootstrap


def main():
    config = Configurator(root_factory=bootstrap)
    config.scan("views")
    config.add_static_view('static', 'static/',
                           cache_max_age=86400)
    app = config.make_wsgi_app()
    return app


if __name__ == '__main__':
    app = main()
    server = make_server(host='0.0.0.0', port=8080, app=app)
    server.serve_forever()

########NEW FILE########
__FILENAME__ = layouts
from pyramid.decorator import reify
from pyramid.location import lineage
from pyramid.renderers import get_renderer

from resources import Company
from resources import Site

class Layouts(object):
    @reify
    def global_template(self):
        renderer = get_renderer("templates/global_layout.pt")
        return renderer.implementation().macros['layout']

    @reify
    def global_macros(self):
        renderer = get_renderer("templates/macros.pt")
        return renderer.implementation().macros

    @reify
    def site(self):
        # From somewhere deep in hierarchy, reach up and grab site
        for l in lineage(self.context):
            if isinstance(l, Site):
                return l
        return None

    @reify
    def company(self):
        # From somewhere deep in hierarchy, reach up and grab company
        for l in lineage(self.context):
            if isinstance(l, Company):
                return l
        return None

    @reify
    def message(self):
        return self.request.GET.get('msg', None)

    @reify
    def site_menu(self):
        new_menu = []
        for c in [self.site,] + self.site.values():
            url = self.request.resource_url(c)
            new_menu.append({'href': url, 'title': c.title})
        return new_menu


########NEW FILE########
__FILENAME__ = resources
class Folder(dict):
    def __init__(self, name, parent, title):
        self.__name__ = name
        self.__parent__ = parent
        self.title = title


class Document(object):
    def __init__(self, name, parent, title, body):
        self.__name__ = name
        self.__parent__ = parent
        self.title = title
        self.body = body


class Site(Folder):
    def bootstrap(self):

        # Document
        body = "<p>Project is a <em>project management system.</p>"
        root['about'] = Document('about', root, 'About Projector', body)

        # Some people
        people = People('people', root, 'People')
        root['people'] = people
        people['sstanton'] = Person('sstanton', people, 'Susan Stanton',
                                    '<p>Hello <em>Susan bio<em></p>')
        people['bbarker'] = Person('bbarker', people, 'Bob Barker',
                                   '<p>The <em>Bob bio</em> goes here</p>')

        # Some companies and projects and docs
        acme = Company('acme', root, 'ACME, Inc.')
        root['acme'] = acme
        project01 = Project('project01', acme, 'Project 01')
        acme['project01'] = project01
        project02 = Project('project02', acme, 'Project 02')
        acme['project02'] = project02
        project01['doc1'] = Document('doc1', project01, 'Document 01',
                                     '<p>Some doc of <em>stuff</em></p>')
        project01['doc2'] = Document('doc2', project01, 'Document 02',
                                     '<p>More <em>stuff</em></p>')
        folder1 = Folder('folder1', project01, 'Folder 1')
        project01['folder1'] = folder1
        folder1['doc3'] = Document('doc3', folder1, 'Document 3',
                                   '<p>A <em>really</em> deep down doc')



class People(Folder):
    pass


class Person(Document):
    pass


class Company(Folder):
    pass


class Project(Folder):
    pass

root = Site('', None, 'Home')
root.bootstrap()

def bootstrap(request):
    return root
########NEW FILE########
__FILENAME__ = test_views
import unittest

from pyramid.testing import DummyRequest
from pyramid.testing import setUp
from pyramid.testing import tearDown

class DummyContext(object):
    title = "Dummy Context"


class ProjectorViewsUnitTests(unittest.TestCase):
    def setUp(self):
        request = DummyRequest()
        self.config = setUp(request=request)

    def tearDown(self):
        tearDown()

    def _makeOne(self, request):
        from views import ProjectorViews

        context = DummyContext()
        inst = ProjectorViews(context, request)
        return inst

    def test_site_view(self):
        request = DummyRequest()
        inst = self._makeOne(request)
        result = inst.site_view()
        self.assertEqual(result['page_title'], 'Home')

    def test_company_view(self):
        request = DummyRequest()
        inst = self._makeOne(request)
        result = inst.company_view()
        self.assertEqual(result["page_title"], "Dummy Context")

    def test_project_view(self):
        request = DummyRequest()
        inst = self._makeOne(request)
        result = inst.project_view()
        self.assertEqual(result["page_title"], "Dummy Context")

    def test_folder_view(self):
        request = DummyRequest()
        inst = self._makeOne(request)
        result = inst.folder_view()
        self.assertEqual(result["page_title"], "Dummy Context")

    def test_document_view(self):
        request = DummyRequest()
        inst = self._makeOne(request)
        result = inst.document_view()
        self.assertEqual(result["page_title"], "Dummy Context")

    def test_people_view(self):
        request = DummyRequest()
        inst = self._makeOne(request)
        result = inst.people_view()
        self.assertEqual(result["page_title"], "Dummy Context")

    def test_person_view(self):
        request = DummyRequest()
        inst = self._makeOne(request)
        result = inst.person_view()
        self.assertEqual(result["page_title"], "Dummy Context")


class ProjectorFunctionalTests(unittest.TestCase):
    def setUp(self):
        from application import main

        app = main()
        from webtest import TestApp

        self.testapp = TestApp(app)

    def test_it(self):
        res = self.testapp.get('/', status=200)
        self.assertTrue('Home page content' in res.body)
        res = self.testapp.get('/about', status=200)
        self.assertTrue('project management system' in res.body)
        res = self.testapp.get('/acme', status=200)
        self.assertTrue('our company' in res.body)
        res = self.testapp.get('/acme/project01', status=200)
        self.assertTrue('Project Content' in res.body)
        res = self.testapp.get('/acme/project01/folder1', status=200)
        self.assertTrue('Folder Contents' in res.body)
        res = self.testapp.get('/acme/project01/folder1/doc3',
                               status=200)
        self.assertTrue('deep down' in res.body)
        res = self.testapp.get('/people', status=200)
        self.assertTrue('Add Person' in res.body)
        res = self.testapp.get('/people/bbarker', status=200)
        self.assertTrue('goes here' in res.body)
        res = self.testapp.get('/updates.json', status=200)
        self.assertTrue('888' in res.body)

########NEW FILE########
__FILENAME__ = views
from random import randint

from pyramid.httpexceptions import HTTPFound
from pyramid.view import view_config

from layouts import Layouts
from resources import Company
from resources import Document
from resources import Folder
from resources import People
from resources import Person
from resources import Project
from resources import Site

class ProjectorViews(Layouts):
    def __init__(self, context, request):
        self.context = context
        self.request = request

    def _add_container(self, klass):
        title = self.request.params['title']
        name = str(randint(0, 10000))
        self.context[name] = klass(name, self.context, title)
        url = self.request.resource_url(self.context,
                                        query={'msg': 'Added'})
        return HTTPFound(location=url)

    def _add_document(self, klass=Document):
        title = self.request.params['title']
        name = str(randint(0, 10000))
        self.context[name] = klass(name, self.context, title,
                                   '<p>Default</p>')
        url = self.request.resource_url(self.context,
                                        query={'msg': 'Added'})
        return HTTPFound(location=url)

    @view_config(renderer="templates/site.pt", context=Site)
    def site_view(self):
        if 'submit' in self.request.POST:
            return self._add_container(Company)
        return {"page_title": "Home"}

    @view_config(renderer="templates/company.pt", context=Company)
    def company_view(self):
        if 'submit' in self.request.POST:
            return self._add_container(Project)
        return {"page_title": self.context.title}

    @view_config(renderer="templates/project.pt", context=Project)
    def project_view(self):
        if 'folder' in self.request.POST:
            return self._add_container(Folder)
        if 'document' in self.request.POST:
            return self._add_document()
        return {"page_title": self.context.title}

    @view_config(renderer="templates/folder.pt", context=Folder)
    def folder_view(self):
        if 'folder' in self.request.POST:
            return self._add_container(Folder)
        if 'document' in self.request.POST:
            return self._add_document()
        return {"page_title": self.context.title}

    @view_config(renderer="templates/document.pt", context=Document)
    def document_view(self):
        return {"page_title": self.context.title}


    @view_config(renderer="templates/people.pt", context=People)
    def people_view(self):
        if 'submit' in self.request.POST:
            return self._add_document(Person)
        return {"page_title": self.context.title}

    @view_config(renderer="templates/person.pt", context=Person)
    def person_view(self):
        return {"page_title": self.context.title}


    @view_config(renderer="json", name="updates.json")
    def updates_view(self):
        return [
            randint(0, 100),
            randint(0, 100),
            randint(0, 100),
            randint(0, 100),
            888,
            ]



########NEW FILE########
__FILENAME__ = application
from wsgiref.simple_server import make_server

from pyramid.config import Configurator
from pyramid.authentication import AuthTktAuthenticationPolicy

from resources import bootstrap


def main():
    config = Configurator(
        root_factory=bootstrap,
        authentication_policy=AuthTktAuthenticationPolicy('seekr1t'),
    )

    config.scan("views")
    app = config.make_wsgi_app()
    return app


if __name__ == '__main__':
    app = main()
    server = make_server(host='0.0.0.0', port=8080, app=app)
    server.serve_forever()

########NEW FILE########
__FILENAME__ = resources
from pyramid.security import Allow
from pyramid.security import Everyone

class Folder(dict):
    def __init__(self, name, parent, title):
        self.__name__ = name
        self.__parent__ = parent
        self.title = title


class SiteFolder(Folder):
    __acl__ = [(Allow, Everyone, 'view')]

class Document(object):
    def __init__(self, name, parent, title):
        self.__name__ = name
        self.__parent__ = parent
        self.title = title

root = SiteFolder('', None, 'Projector Site')

def bootstrap(request):
    # Let's make:
    # /
    #   doc1
    #   doc2
    #   folder1/
    #      doc1
    doc1 = Document('doc1', root, 'Document 01')
    root['doc1'] = doc1
    doc2 = Document('doc2', root, 'Document 02')
    root['doc2'] = doc2
    folder1 = Folder('folder1', root, 'Folder 01')
    root['folder1'] = folder1

    return root

########NEW FILE########
__FILENAME__ = views
from pyramid.view import view_config

class ProjectorViews(object):
    def __init__(self, context, request):
        self.context = context
        self.request = request

    @view_config(renderer="templates/default_view.pt",
                 permission='view')
    def default_view(self):
        return dict(page_title="View Site")

    @view_config(renderer="templates/default_view.pt",
                 permission='edit',
                 name="edit")
    def edit_view(self):
        return dict(page_title="Edit Site")

########NEW FILE########
__FILENAME__ = application
from wsgiref.simple_server import make_server

from pyramid.config import Configurator
from pyramid.authentication import AuthTktAuthenticationPolicy

from resources import bootstrap

from usersdb import groupfinder


def main():
    config = Configurator(
        root_factory=bootstrap,
        authentication_policy=AuthTktAuthenticationPolicy(
            'seekr1t',
            callback=groupfinder)
    )
    config.scan("views")
    app = config.make_wsgi_app()
    return app


if __name__ == '__main__':
    app = main()
    server = make_server(host='0.0.0.0', port=8080, app=app)
    server.serve_forever()

########NEW FILE########
__FILENAME__ = resources
from pyramid.security import Allow
from pyramid.security import Everyone

class Folder(dict):
    def __init__(self, name, parent, title):
        self.__name__ = name
        self.__parent__ = parent
        self.title = title


class SiteFolder(Folder):
    __acl__ = [
        (Allow, Everyone, 'view'),
        (Allow, 'group:editors', 'edit')
    ]


class Document(object):
    def __init__(self, name, parent, title):
        self.__name__ = name
        self.__parent__ = parent
        self.title = title

root = SiteFolder('', None, 'Projector Site')

from pyramid.security import DENY_ALL

def bootstrap(request):
    # Let's make:
    # /
    #   doc1
    #   doc2
    #   folder1/
    #      doc1
    doc1 = Document('doc1', root, 'Document 01')
    root['doc1'] = doc1
    doc2 = Document('doc2', root, 'Document 02')
    doc2.__acl__ = [
        (Allow, Everyone, 'view'),
        (Allow, 'group:admin', 'edit'),
        DENY_ALL
    ]
    root['doc2'] = doc2
    folder1 = Folder('folder1', root, 'Folder 01')
    root['folder1'] = folder1

    return root

########NEW FILE########
__FILENAME__ = usersdb
USERS = {'editor': 'editor',
         'viewer': 'viewer'}
GROUPS = {'editor': ['group:editors']}

def groupfinder(userid, request):
    # Has 3 potential returns:
    #   - None, meaning userid doesn't exist in our database
    #   - An empty list, meaning existing user but no groups
    #   - Or a list of groups for that userid
    if userid in USERS:
        return GROUPS.get(userid, [])

########NEW FILE########
__FILENAME__ = views
from pyramid.view import view_config

from pyramid.httpexceptions import HTTPFound
from pyramid.httpexceptions import HTTPForbidden
from pyramid.security import remember
from pyramid.security import forget

# Get our database that manages users
from usersdb import USERS
from pyramid.security import has_permission

class ProjectorViews(object):
    def __init__(self, context, request):
        self.context = context
        self.request = request

    @view_config(renderer="templates/default_view.pt",
                 permission='view')
    def default_view(self):
        can_i_edit = has_permission("edit", self.context,
                                    self.request)
        return dict(page_title="Site View",
                    can_i_edit=can_i_edit)

    @view_config(renderer="templates/default_view.pt",
                 permission='edit',
                 name="edit")
    def edit_view(self):
        return dict(page_title="Edit Site")

    @view_config(renderer="templates/login.pt", context=HTTPForbidden)
    @view_config(renderer="templates/login.pt", name="login.html")
    def login(self):
        request = self.request
        login_url = request.resource_url(request.context, 'login.html')
        referrer = request.url
        if referrer == login_url:
            referrer = '/' # never use the login form itself as came_from
        came_from = request.params.get('came_from', referrer)
        message = ''
        login = ''
        password = ''
        if 'form.submitted' in request.params:
            login = request.params['login']
            password = request.params['password']
            if USERS.get(login) == password:
                headers = remember(request, login)
                return HTTPFound(location=came_from,
                                 headers=headers)
            message = 'Failed login'

        return dict(
            page_title="Login",
            message=message,
            url=request.application_url + '/login.html',
            came_from=came_from,
            login=login,
            password=password,
            )

    @view_config(name="logout.html")
    def logout(self):
        headers = forget(self.request)
        url = self.request.resource_url(self.context, 'login.html')
        return HTTPFound(location=url, headers=headers)



########NEW FILE########
__FILENAME__ = application
from wsgiref.simple_server import make_server

from pyramid.config import Configurator
from pyramid_zodbconn import get_connection

from resources import bootstrap


def root_factory(request):
    conn = get_connection(request)
    return bootstrap(conn.root())


def main():
    settings = {"zodbconn.uri": "file://Data.fs"}
    config = Configurator(root_factory=root_factory, settings=settings)
    config.include("pyramid_zodbconn")
    config.include("pyramid_tm")
    config.add_static_view('static', 'deform:static')
    config.scan("views")
    app = config.make_wsgi_app()
    return app


if __name__ == '__main__':
    app = main()
    server = make_server(host='0.0.0.0', port=8080, app=app)
    server.serve_forever()

########NEW FILE########
__FILENAME__ = resources
from persistent import Persistent
from persistent.mapping import PersistentMapping
import transaction

class Folder(PersistentMapping):
    def __init__(self, title):
        super(Folder, self).__init__()
        self.title = title


class SiteFolder(Folder):
    __name__ = None
    __parent__ = None


class Document(Persistent):
    def __init__(self, title, content):
        self.title = title
        self.content = content


def bootstrap(zodb_root):
    if not 'projector' in zodb_root:
        root = SiteFolder('Projector Site')
        zodb_root['projector'] = root
        transaction.commit()
    return zodb_root['projector']

########NEW FILE########
__FILENAME__ = views
from random import randint

from pyramid.httpexceptions import HTTPFound
from pyramid.view import view_config

import colander
from deform import Form
from deform.widget import TextAreaWidget

from resources import Folder
from resources import Document


class FolderSchema(colander.Schema):
    title = colander.SchemaNode(colander.String())


class DocumentSchema(colander.Schema):
    title = colander.SchemaNode(colander.String())
    content = colander.SchemaNode(colander.String(), widget=TextAreaWidget())


class ProjectorViews(object):
    def __init__(self, context, request):
        self.context = context
        self.request = request

    @view_config(renderer="templates/folder_view.pt", context=Folder)
    def folder_view(self):
        return {}

    @view_config(name="add_folder", context=Folder, renderer="templates/form.pt")
    def add_folder(self):
        schema = FolderSchema()
        form = Form(schema, buttons=('submit',))
        if 'submit' in self.request.POST:
            # Make a new Folder
            title = self.request.POST['title']
            name = str(randint(0,999999))
            new_folder = Folder(title)
            new_folder.__name__ = name
            new_folder.__parent__ = self.context
            self.context[name] = new_folder
            # Redirect to the new folder
            url = self.request.resource_url(new_folder)
            return HTTPFound(location=url)
        return {"form": form.render()}

    @view_config(name="add_document", context=Folder, renderer="templates/form.pt")
    def add_document(self):
        schema = DocumentSchema()
        form = Form(schema, buttons=('submit',))
        if 'submit' in self.request.POST:
            # Make a new Document
            title = self.request.POST['title']
            content = self.request.POST['content']
            name = str(randint(0,999999))
            new_document = Document(title, content)
            new_document.__name__ = name
            new_document.__parent__ = self.context
            self.context[name] = new_document
            # Redirect to the new document
            url = self.request.resource_url(new_document)
            return HTTPFound(location=url)
        return {"form": form.render()}

    @view_config(renderer="templates/document_view.pt",
                 context=Document)
    def document_view(self):
        return {}

########NEW FILE########
__FILENAME__ = views
from pyramid.view import (
    view_config,
    view_defaults
    )

@view_defaults(renderer='templates/home.jinja2')
class PyramidDemoViews:
    def __init__(self, request):
        self.request = request

    @view_config(name='home')
    def home(self):
        page_title = "Home View"
        return dict(page_title=page_title)

########NEW FILE########
__FILENAME__ = views
from pyramid.view import (
    view_config,
    view_defaults
    )

@view_defaults(renderer='templates/home.jinja2')
class PyramidDemoViews:
    def __init__(self, request):
        self.request = request

    @view_config(name='home')
    def home(self):
        page_title = "Home View"
        return dict(page_title=page_title)

########NEW FILE########
__FILENAME__ = views
from pyramid.view import (
    view_config,
    view_defaults
    )


@view_defaults(renderer='templates/home.jinja2')
class PyramidDemoViews:
    def __init__(self, request):
        self.request = request
        s = request.registry.settings
        self.copyright = s.get('pyramid_demo.copyright', 'No Copyright')

    @view_config(name='home')
    def home(self):
        page_title = "Home View"
        return dict(page_title=page_title)

########NEW FILE########
__FILENAME__ = resources
class Folder(dict):
    def __init__(self, name, parent, title):
        self.__name__ = name
        self.__parent__ = parent
        self.title = title


class Root(Folder):
    pass


class Document(object):
    def __init__(self, name, parent, title):
        self.__name__ = name
        self.__parent__ = parent
        self.title = title

# Done outside bootstrap to persist from request to request
root = Root('', None, 'My Site')


def bootstrap(request):
    if not root.values():
        # No values yet, let's make:
        # /
        #   doc1
        #   doc2
        #   folder1/
        #      doc1
        doc1 = Document('doc1', root, 'Document 01')
        root['doc1'] = doc1
        doc2 = Document('doc2', root, 'Document 02')
        root['doc2'] = doc2
        folder1 = Folder('folder1', root, 'Folder 01')
        root['folder1'] = folder1

        # Only has to be unique in folder
        doc11 = Document('doc1', folder1, 'Document 01')
        folder1['doc1'] = doc11

    return root
########NEW FILE########
__FILENAME__ = tests
import unittest

from pyramid.testing import DummyRequest
from pyramid.testing import DummyResource


class TutorialViewsUnitTests(unittest.TestCase):
    def _makeOne(self, context, request):
        from .views import TutorialViews

        inst = TutorialViews(context, request)
        return inst

    def test_site(self):
        request = DummyRequest()
        context = DummyResource()
        inst = self._makeOne(context, request)
        result = inst.root()
        self.assertIn('Root', result['page_title'])

    def test_folder_view(self):
        request = DummyRequest()
        context = DummyResource()
        inst = self._makeOne(context, request)
        result = inst.folder()
        self.assertIn('Folder', result['page_title'])

    def test_document_view(self):
        request = DummyRequest()
        context = DummyResource()
        inst = self._makeOne(context, request)
        result = inst.document()
        self.assertIn('Document', result['page_title'])


class TutorialFunctionalTests(unittest.TestCase):
    def setUp(self):
        from tutorial import main

        app = main({})
        from webtest import TestApp

        self.testapp = TestApp(app)

    def test_it(self):
        res = self.testapp.get('/', status=200)
        self.assertIn(b'Root', res.body)
        res = self.testapp.get('/folder1', status=200)
        self.assertIn(b'Folder', res.body)
        res = self.testapp.get('/doc1', status=200)
        self.assertIn(b'Document', res.body)
        res = self.testapp.get('/doc2', status=200)
        self.assertIn(b'Document', res.body)
        res = self.testapp.get('/folder1/doc1', status=200)
        self.assertIn(b'Document', res.body)
########NEW FILE########
__FILENAME__ = views
from random import randint

from pyramid.httpexceptions import HTTPFound
from pyramid.location import lineage
from pyramid.view import view_config

from .resources import (
    Root,
    Folder,
    Document
    )


class TutorialViews(object):
    def __init__(self, context, request):
        self.context = context
        self.request = request
        self.parents = reversed(list(lineage(context)))

    @view_config(renderer="templates/root.jinja2",
                 context=Root)
    def root(self):
        page_title = 'Quick Tutorial: Root'
        return dict(page_title=page_title)

    @view_config(renderer="templates/folder.jinja2",
                 context=Folder)
    def folder(self):
        page_title = 'Quick Tutorial: Folder'
        return dict(page_title=page_title)

    @view_config(name="add_folder", context=Folder)
    def add_folder(self):
        # Make a new Folder
        title = self.request.POST['folder_title']
        name = str(randint(0, 999999))
        new_folder = Folder(name, self.context, title)
        self.context[name] = new_folder

        # Redirect to the new folder
        url = self.request.resource_url(new_folder)
        return HTTPFound(location=url)

    @view_config(name="add_document", context=Folder)
    def add_document(self):
        # Make a new Document
        title = self.request.POST['document_title']
        name = str(randint(0, 999999))
        new_document = Document(name, self.context, title)
        self.context[name] = new_document

        # Redirect to the new document
        url = self.request.resource_url(new_document)
        return HTTPFound(location=url)

    @view_config(renderer="templates/document.jinja2",
                 context=Document)
    def document(self):
        page_title = 'Quick Tutorial: Document'
        return dict(page_title=page_title)

########NEW FILE########
__FILENAME__ = resources
class Folder(dict):
    def __init__(self, name, parent, title):
        self.__name__ = name
        self.__parent__ = parent
        self.title = title


class Root(Folder):
    pass


class Document(object):
    def __init__(self, name, parent, title):
        self.__name__ = name
        self.__parent__ = parent
        self.title = title

# Done outside bootstrap to persist from request to request
root = Root('', None, 'My Site')


def bootstrap(request):
    if not root.values():
        # No values yet, let's make:
        # /
        #   doc1
        #   doc2
        #   folder1/
        #      doc1
        doc1 = Document('doc1', root, 'Document 01')
        root['doc1'] = doc1
        doc2 = Document('doc2', root, 'Document 02')
        root['doc2'] = doc2
        folder1 = Folder('folder1', root, 'Folder 01')
        root['folder1'] = folder1

        # Only has to be unique in folder
        doc11 = Document('doc1', folder1, 'Document 01')
        folder1['doc1'] = doc11

    return root
########NEW FILE########
__FILENAME__ = tests
import unittest

from pyramid.testing import DummyRequest
from pyramid.testing import DummyResource

class TutorialViewsUnitTests(unittest.TestCase):
    def test_home_view(self):
        from .views import TutorialViews

        request = DummyRequest()
        title = "Dummy Context"
        context = DummyResource(title=title, __name__='dummy')
        inst = TutorialViews(context, request)
        result = inst.home()
        self.assertIn('Home', result['page_title'])

class TutorialFunctionalTests(unittest.TestCase):
    def setUp(self):
        from tutorial import main
        app = main({})
        from webtest import TestApp
        self.testapp = TestApp(app)

    def test_home(self):
        res = self.testapp.get('/', status=200)
        self.assertIn(b'Site Folder', res.body)

########NEW FILE########
__FILENAME__ = views
from pyramid.location import lineage
from pyramid.view import view_config


class TutorialViews:
    def __init__(self, context, request):
        self.context = context
        self.request = request
        self.parents = reversed(list(lineage(context)))

    @view_config(renderer='templates/home.jinja2')
    def home(self):
        page_title = 'Quick Tutorial: Home'
        return dict(page_title=page_title)

    @view_config(name='hello', renderer='templates/hello.jinja2')
    def hello(self):
        page_title = 'Quick Tutorial: Hello'
        return dict(page_title=page_title)

########NEW FILE########
__FILENAME__ = tests
import unittest

from pyramid.testing import DummyRequest
from pyramid.testing import DummyResource

class TutorialViewsUnitTests(unittest.TestCase):

    def _makeOne(self, request):
        from .views import TutorialViews
        inst = TutorialViews(request)
        return inst

    def test_site_view(self):
        request = DummyRequest()
        inst = self._makeOne(request)
        result = inst.site()
        self.assertIn('Site View', result['page_title'])

class TutorialFunctionalTests(unittest.TestCase):
    def setUp(self):
        from tutorial import main
        app = main({})
        from webtest import TestApp
        self.testapp = TestApp(app)

    def test_it(self):
        result = self.testapp.get('/hello', status=200)
        self.assertIn(b'Site View', result.body)

########NEW FILE########
__FILENAME__ = views
from pyramid.view import view_config


class TutorialViews(object):
    def __init__(self, request):
        self.request = request

    @view_config(name='hello', renderer='templates/site.jinja2')
    def site(self):
        page_title = 'Quick Tutorial: Site View'
        return dict(page_title=page_title)

########NEW FILE########
__FILENAME__ = resources
class Root(dict):
    __name__ = ''
    __parent__ = None
    def __init__(self, title):
        self.title = title


def bootstrap(request):
    root = Root('My Site')

    return root

########NEW FILE########
__FILENAME__ = tests
import unittest

from pyramid.testing import DummyRequest
from pyramid.testing import DummyResource

class TutorialViewsUnitTests(unittest.TestCase):
    def test_home(self):
        from .views import TutorialViews

        request = DummyRequest()
        title = 'Dummy Context'
        context = DummyResource(title=title)
        inst = TutorialViews(context, request)
        result = inst.home()
        self.assertIn('Home', result['page_title'])

class TutorialFunctionalTests(unittest.TestCase):
    def setUp(self):
        from tutorial import main
        app = main({})
        from webtest import TestApp
        self.testapp = TestApp(app)

    def test_home(self):
        res = self.testapp.get('/hello', status=200)
        self.assertIn(b'My Site', res.body)


########NEW FILE########
__FILENAME__ = views
from pyramid.view import view_config


class TutorialViews:
    def __init__(self, context, request):
        self.context = context
        self.request = request

    @view_config(renderer='templates/home.jinja2')
    def home(self):
        page_title = 'Quick Tutorial: Home'
        return dict(page_title=page_title)

    @view_config(name='hello', renderer='templates/hello.jinja2')
    def hello(self):
        page_title = 'Quick Tutorial: Hello'
        return dict(page_title=page_title)

########NEW FILE########
__FILENAME__ = initialize_db
import os
import sys
import transaction

from sqlalchemy import engine_from_config

from pyramid.paster import (
    get_appsettings,
    setup_logging,
    )

from .sqltraversal import (
    DBSession,
    Node,
    Base,
    )

from .models import (
    Document,
    Folder,
    )


def usage(argv):
    cmd = os.path.basename(argv[0])
    print('usage: %s <config_uri>\n'
          '(example: "%s development.ini")' % (cmd, cmd))
    sys.exit(1)


def main(argv=sys.argv):
    if len(argv) != 2:
        usage(argv)
    config_uri = argv[1]
    setup_logging(config_uri)
    settings = get_appsettings(config_uri)
    engine = engine_from_config(settings, 'sqlalchemy.')
    DBSession.configure(bind=engine)
    Base.metadata.create_all(engine)

    with transaction.manager:
        root = Folder(name='', title='My SQLTraversal Root')
        DBSession.add(root)
        f1 = root['f1'] = Folder(title='Folder 1')
        f1['da'] = Document(title='Document A')

########NEW FILE########
__FILENAME__ = models
from sqlalchemy import (
    Column,
    Integer,
    Text,
    ForeignKey,
    )

from .sqltraversal import Node


class Folder(Node):
    __tablename__ = 'folder'
    id = Column(Integer, ForeignKey('node.id'), primary_key=True)
    title = Column(Text)


class Document(Node):
    __tablename__ = 'document'
    id = Column(Integer, ForeignKey('node.id'), primary_key=True)
    title = Column(Text)

########NEW FILE########
__FILENAME__ = sqltraversal
from sqlalchemy import (
    Column,
    Integer,
    Unicode,
    ForeignKey,
    String
    )
from sqlalchemy.ext.declarative import declarative_base
from sqlalchemy.orm import (
    scoped_session,
    sessionmaker,
    relationship,
    backref
    )
from sqlalchemy.orm.exc import NoResultFound
from sqlalchemy.util import classproperty
from zope.sqlalchemy import ZopeTransactionExtension

DBSession = scoped_session(
    sessionmaker(extension=ZopeTransactionExtension()))
Base = declarative_base()


def u(s):
    # Backwards compatibility for Python 3 not having unicode()
    try:
        return unicode(s)
    except NameError:
        return str(s)


def root_factory(request):
    return DBSession.query(Node).filter_by(parent_id=None).one()


class Node(Base):
    __tablename__ = 'node'
    id = Column(Integer, primary_key=True)
    name = Column(Unicode(50), nullable=False)
    parent_id = Column(Integer, ForeignKey('node.id'))
    children = relationship("Node",
                            backref=backref('parent', remote_side=[id])
    )
    type = Column(String(50))

    @classproperty
    def __mapper_args__(cls):
        return dict(
            polymorphic_on='type',
            polymorphic_identity=cls.__name__.lower(),
            with_polymorphic='*',
        )

    def __setitem__(self, key, node):
        node.name = u(key)
        if self.id is None:
            DBSession.flush()
        node.parent_id = self.id
        DBSession.add(node)
        DBSession.flush()

    def __getitem__(self, key):
        try:
            return DBSession.query(Node).filter_by(
                name=key, parent=self).one()
        except NoResultFound:
            raise KeyError(key)

    def values(self):
        return DBSession.query(Node).filter_by(parent=self)

    @property
    def __name__(self):
        return self.name

    @property
    def __parent__(self):
        return self.parent

########NEW FILE########
__FILENAME__ = views
from random import randint

from pyramid.httpexceptions import HTTPFound
from pyramid.location import lineage
from pyramid.view import view_config

from .models import (
    Folder,
    Document
    )


class TutorialViews(object):
    def __init__(self, context, request):
        self.context = context
        self.request = request
        self.parents = reversed(list(lineage(context)))

    @view_config(renderer="templates/root.jinja2",
                 context=Folder, custom_predicates=[lambda c, r: c is r.root])
    def root(self):
        page_title = 'Quick Tutorial: Root'
        return dict(page_title=page_title)

    @view_config(renderer="templates/folder.jinja2",
                 context=Folder)
    def folder(self):
        page_title = 'Quick Tutorial: Folder'
        return dict(page_title=page_title)

    @view_config(name="add_folder", context=Folder)
    def add_folder(self):
        # Make a new Folder
        title = self.request.POST['folder_title']
        name = str(randint(0, 999999))
        new_folder = self.context[name] = Folder(title=title)

        # Redirect to the new folder
        url = self.request.resource_url(new_folder)
        return HTTPFound(location=url)

    @view_config(name="add_document", context=Folder)
    def add_document(self):
        # Make a new Document
        title = self.request.POST['document_title']
        name = str(randint(0, 999999))
        new_document = self.context[name] = Document(title=title)

        # Redirect to the new document
        url = self.request.resource_url(new_document)
        return HTTPFound(location=url)

    @view_config(renderer="templates/document.jinja2",
                 context=Document)
    def document(self):
        page_title = 'Quick Tutorial: Document'
        return dict(page_title=page_title)

########NEW FILE########
__FILENAME__ = initialize_db
import os
import sys
import transaction

from sqlalchemy import engine_from_config

from pyramid.paster import (
    get_appsettings,
    setup_logging,
    )

from .models import (
    DBSession,
    Document,
    Node,
    Folder,
    Root,
    Base,
    )


def usage(argv):
    cmd = os.path.basename(argv[0])
    print('usage: %s <config_uri>\n'
          '(example: "%s development.ini")' % (cmd, cmd))
    sys.exit(1)


def main(argv=sys.argv):
    if len(argv) != 2:
        usage(argv)
    config_uri = argv[1]
    setup_logging(config_uri)
    settings = get_appsettings(config_uri)
    engine = engine_from_config(settings, 'sqlalchemy.')
    DBSession.configure(bind=engine)
    Base.metadata.create_all(engine)

    with transaction.manager:
        root = Root(name='', title='My SQLTraversal Root')
        DBSession.add(root)
        DBSession.flush()
        root = DBSession.query(Node).filter_by(name=u'').one()
        f1 = Folder(title='Folder 1')
        DBSession.add(f1)
        root['f1'] = f1
        da = Document(title='Document A')
        DBSession.add(da)
        f1['da'] = da
########NEW FILE########
__FILENAME__ = models
from sqlalchemy import (
    Column,
    Integer,
    Text,
    Unicode,
    ForeignKey,
    String
    )

from sqlalchemy.ext.declarative import declarative_base

from sqlalchemy.orm import (
    scoped_session,
    sessionmaker,
    relationship,
    backref
    )

from sqlalchemy.orm.exc import NoResultFound

from zope.sqlalchemy import ZopeTransactionExtension

DBSession = scoped_session(
    sessionmaker(extension=ZopeTransactionExtension()))
Base = declarative_base()

def u(s):
    # Backwards compatibility for Python 3 not having unicode()
    try:
        return unicode(s)
    except NameError:
        return str(s)

class Node(Base):
    __tablename__ = 'node'
    id = Column(Integer, primary_key=True)
    name = Column(Unicode(50), nullable=False)
    parent_id = Column(Integer, ForeignKey('node.id'))
    children = relationship("Node",
                            backref=backref('parent', remote_side=[id])
    )
    type = Column(String(50))
    __mapper_args__ = dict(
        polymorphic_on=type,
        polymorphic_identity='node',
        with_polymorphic='*'
    )


    def __setitem__(self, key, node):
        node.name = u(key)
        DBSession.add(node)
        DBSession.flush()
        node.parent_id = self.id

    def __getitem__(self, key):
        try:
            return DBSession.query(Node).filter_by(
                name=key, parent=self).one()
        except NoResultFound:
            raise KeyError(key)

    def values(self):
        return DBSession.query(Node).filter_by(parent=self)

    @property
    def __name__(self):
        return self.name

    @property
    def __parent__(self):
        return self.parent

    @property
    def is_empty(self):
        return self.values().count() == 0


class Root(Node):
    __tablename__ = 'root'
    __mapper_args__ = dict(
        polymorphic_identity='root',
        with_polymorphic='*',
    )
    id = Column(Integer, ForeignKey('node.id'), primary_key=True)
    title = Column(Text)


class Folder(Node):
    __tablename__ = 'folder'
    __mapper_args__ = dict(
        polymorphic_identity='folder',
        with_polymorphic='*',
    )
    id = Column(Integer, ForeignKey('node.id'), primary_key=True)
    title = Column(Text)


class Document(Node):
    __tablename__ = 'document'
    id = Column(Integer, ForeignKey('node.id'), primary_key=True)
    __mapper_args__ = dict(
        polymorphic_identity='document',
        with_polymorphic='*',
    )
    title = Column(Text)


def root_factory(request):
    return DBSession.query(Root).one()

########NEW FILE########
__FILENAME__ = security
USERS = {'editor': 'editor',
         'viewer': 'viewer'}
GROUPS = {'editor': ['group:editors']}


def groupfinder(userid, request):
    if userid in USERS:
        return GROUPS.get(userid, [])
########NEW FILE########
__FILENAME__ = views
from random import randint

from pyramid.httpexceptions import HTTPFound
from pyramid.location import lineage
from pyramid.security import (
    remember,
    forget,
    authenticated_userid
    )
from pyramid.view import view_config

from .models import (
    Root,
    Folder,
    Document
    )
from .security import USERS


class TutorialViews(object):
    def __init__(self, context, request):
        self.context = context
        self.request = request
        self.parents = reversed(list(lineage(context)))
        self.logged_in = authenticated_userid(request)

    @view_config(renderer="templates/root.jinja2",
                 context=Root)
    def root(self):
        page_title = 'Quick Tutorial: Root'
        return dict(page_title=page_title)

    @view_config(renderer="templates/folder.jinja2",
                 context=Folder)
    def folder(self):
        page_title = 'Quick Tutorial: Folder'
        return dict(page_title=page_title)

    @view_config(name="add_folder", context=Root)
    @view_config(name="add_folder", context=Folder)
    def add_folder(self):
        # Make a new Folder
        title = self.request.POST['folder_title']
        name = str(randint(0, 999999))
        new_folder = Folder(title=title)
        self.context[name] = new_folder

        # Redirect to the new folder
        url = self.request.resource_url(new_folder)
        return HTTPFound(location=url)

    @view_config(name="add_document", context=Root)
    @view_config(name="add_document", context=Folder)
    def add_document(self):
        # Make a new Document
        title = self.request.POST['document_title']
        name = str(randint(0, 999999))
        new_document = Document(title=title)
        self.context[name] = new_document

        # Redirect to the new document
        url = self.request.resource_url(new_document)
        return HTTPFound(location=url)

    @view_config(renderer="templates/document.jinja2",
                 context=Document)
    def document(self):
        page_title = 'Quick Tutorial: Document'
        return dict(page_title=page_title)

    @view_config(name='login', renderer='templates/login.jinja2')
    def login(self):
        request = self.request
        referrer = request.url
        message = ''
        login = ''
        password = ''
        if 'form.submitted' in request.params:
            login = request.params['login']
            password = request.params['password']
            if USERS.get(login) == password:
                headers = remember(request, login)
                return HTTPFound(location='/',
                                 headers=headers)
            message = 'Failed login'

        return dict(
            page_title='Login',
            message=message,
            url=request.application_url + '/login',
            login=login,
            password=password,
        )

    @view_config(name='logout')
    def logout(self):
        request = self.request
        headers = forget(request)
        url = request.resource_url(request.root)
        return HTTPFound(location=url,
                         headers=headers)
########NEW FILE########
__FILENAME__ = initialize_db
import os
import sys
import transaction

from sqlalchemy import engine_from_config

from pyramid.paster import (
    get_appsettings,
    setup_logging,
    )

from .models import (
    DBSession,
    Root,
    Base,
    )


def usage(argv):
    cmd = os.path.basename(argv[0])
    print('usage: %s <config_uri>\n'
          '(example: "%s development.ini")' % (cmd, cmd))
    sys.exit(1)


def main(argv=sys.argv):
    if len(argv) != 2:
        usage(argv)
    config_uri = argv[1]
    setup_logging(config_uri)
    settings = get_appsettings(config_uri)
    engine = engine_from_config(settings, 'sqlalchemy.')
    DBSession.configure(bind=engine)
    Base.metadata.create_all(engine)

    with transaction.manager:
        root = Root(title='My SQLTraversal Root')
        DBSession.add(root)
########NEW FILE########
__FILENAME__ = models
from sqlalchemy import (
    Column,
    Integer,
    Text,
    )

from sqlalchemy.ext.declarative import declarative_base

from sqlalchemy.orm import (
    scoped_session,
    sessionmaker,
    )

from zope.sqlalchemy import ZopeTransactionExtension

DBSession = scoped_session(
    sessionmaker(extension=ZopeTransactionExtension()))
Base = declarative_base()


class Root(Base):
    __name__ = ''
    __parent__ = None
    __tablename__ = 'root'
    uid = Column(Integer, primary_key=True)
    title = Column(Text, unique=True)


def root_factory(request):
    return DBSession.query(Root).one()
########NEW FILE########
__FILENAME__ = views
from pyramid.view import view_config


class TutorialViews:
    def __init__(self, context, request):
        self.context = context
        self.request = request

    @view_config(renderer='templates/home.jinja2')
    def home(self):
        page_title = 'Quick Tutorial: Home'
        return dict(page_title=page_title)

    @view_config(name='hello', renderer='templates/hello.jinja2')
    def hello(self):
        page_title = 'Quick Tutorial: Hello'
        return dict(page_title=page_title)

########NEW FILE########
__FILENAME__ = resources
class Folder(dict):
    def __init__(self, name, parent, title):
        self.__name__ = name
        self.__parent__ = parent
        self.title = title


class Root(Folder):
    pass


class Document(object):
    def __init__(self, name, parent, title):
        self.__name__ = name
        self.__parent__ = parent
        self.title = title

# Done outside bootstrap to persist from request to request
root = Root('', None, 'My Site')


def bootstrap(request):
    if not root.values():
        # No values yet, let's make:
        # /
        #   doc1
        #   doc2
        #   folder1/
        #      doc1
        doc1 = Document('doc1', root, 'Document 01')
        root['doc1'] = doc1
        doc2 = Document('doc2', root, 'Document 02')
        root['doc2'] = doc2
        folder1 = Folder('folder1', root, 'Folder 01')
        root['folder1'] = folder1

        # Only has to be unique in folder
        doc11 = Document('doc1', folder1, 'Document 01')
        folder1['doc1'] = doc11

    return root
########NEW FILE########
__FILENAME__ = tests
import unittest

from pyramid.testing import DummyRequest
from pyramid.testing import DummyResource


class TutorialViewsUnitTests(unittest.TestCase):
    def _makeOne(self, context, request):
        from .views import TutorialViews

        inst = TutorialViews(context, request)
        return inst

    def test_site(self):
        request = DummyRequest()
        context = DummyResource()
        inst = self._makeOne(context, request)
        result = inst.root()
        self.assertIn('Root', result['page_title'])

    def test_folder_view(self):
        request = DummyRequest()
        context = DummyResource()
        inst = self._makeOne(context, request)
        result = inst.folder()
        self.assertIn('Folder', result['page_title'])

    def test_document_view(self):
        request = DummyRequest()
        context = DummyResource()
        inst = self._makeOne(context, request)
        result = inst.document()
        self.assertIn('Document', result['page_title'])


class TutorialFunctionalTests(unittest.TestCase):
    def setUp(self):
        from tutorial import main

        app = main({})
        from webtest import TestApp

        self.testapp = TestApp(app)

    def test_it(self):
        res = self.testapp.get('/', status=200)
        self.assertIn(b'Root', res.body)
        res = self.testapp.get('/folder1', status=200)
        self.assertIn(b'Folder', res.body)
        res = self.testapp.get('/doc1', status=200)
        self.assertIn(b'Document', res.body)
        res = self.testapp.get('/doc2', status=200)
        self.assertIn(b'Document', res.body)
        res = self.testapp.get('/folder1/doc1', status=200)
        self.assertIn(b'Document', res.body)
########NEW FILE########
__FILENAME__ = views
from pyramid.location import lineage
from pyramid.view import view_config

from .resources import (
    Root,
    Folder,
    Document
    )


class TutorialViews:
    def __init__(self, context, request):
        self.context = context
        self.request = request
        self.parents = reversed(list(lineage(context)))

    @view_config(renderer="templates/root.jinja2",
                 context=Root)
    def root(self):
        page_title = 'Quick Tutorial: Root'
        return dict(page_title=page_title)

    @view_config(renderer="templates/folder.jinja2",
                 context=Folder)
    def folder(self):
        page_title = 'Quick Tutorial: Folder'
        return dict(page_title=page_title)


    @view_config(renderer="templates/document.jinja2",
                 context=Document)
    def document(self):
        page_title = 'Quick Tutorial: Document'
        return dict(page_title=page_title)

########NEW FILE########
__FILENAME__ = resources
from persistent import Persistent
from persistent.mapping import PersistentMapping
import transaction


class Folder(PersistentMapping):
    def __init__(self, title):
        PersistentMapping.__init__(self)
        self.title = title


class Root(Folder):
    __name__ = None
    __parent__ = None


class Document(Persistent):
    def __init__(self, title):
        Persistent.__init__(self)
        self.title = title


def bootstrap(zodb_root):
    if not 'tutorial' in zodb_root:
        root = Root('My Site')
        zodb_root['tutorial'] = root
        transaction.commit()
    return zodb_root['tutorial']

########NEW FILE########
__FILENAME__ = views
from random import randint

from pyramid.httpexceptions import HTTPFound
from pyramid.location import lineage
from pyramid.view import view_config

from .resources import (
    Root,
    Folder,
    Document
    )


class TutorialViews(object):
    def __init__(self, context, request):
        self.context = context
        self.request = request
        self.parents = reversed(list(lineage(context)))

    @view_config(renderer="templates/root.jinja2",
                 context=Root)
    def root(self):
        page_title = 'Quick Tutorial: Root'
        return dict(page_title=page_title)

    @view_config(renderer="templates/folder.jinja2",
                 context=Folder)
    def folder(self):
        page_title = 'Quick Tutorial: Folder'
        return dict(page_title=page_title)

    @view_config(name="add_folder", context=Folder)
    def add_folder(self):
        # Make a new Folder
        title = self.request.POST['folder_title']
        name = str(randint(0, 999999))
        new_folder = Folder(title)
        new_folder.__name__ = name
        new_folder.__parent__ = self.context
        self.context[name] = new_folder

        # Redirect to the new folder
        url = self.request.resource_url(new_folder)
        return HTTPFound(location=url)

    @view_config(name="add_document", context=Folder)
    def add_document(self):
        # Make a new Document
        title = self.request.POST['document_title']
        name = str(randint(0, 999999))
        new_document = Document(title)
        new_document.__name__ = name
        new_document.__parent__ = self.context
        self.context[name] = new_document

        # Redirect to the new document
        url = self.request.resource_url(new_document)
        return HTTPFound(location=url)

    @view_config(renderer="templates/document.jinja2",
                 context=Document)
    def document(self):
        page_title = 'Quick Tutorial: Document'
        return dict(page_title=page_title)

########NEW FILE########
__FILENAME__ = tasks
import os
import logging
import sqlite3

from pyramid.config import Configurator
from pyramid.events import NewRequest
from pyramid.events import subscriber
from pyramid.events import ApplicationCreated
from pyramid.httpexceptions import HTTPFound
from pyramid.session import UnencryptedCookieSessionFactoryConfig
from pyramid.view import view_config

from wsgiref.simple_server import make_server


logging.basicConfig()
log = logging.getLogger(__file__)

here = os.path.dirname(os.path.abspath(__file__))


# views
@view_config(route_name='list', renderer='list.mako')
def list_view(request):
    rs = request.db.execute("select id, name from tasks where closed = 0")
    tasks = [dict(id=row[0], name=row[1]) for row in rs.fetchall()]
    return {'tasks': tasks}


@view_config(route_name='new', renderer='new.mako')
def new_view(request):
    if request.method == 'POST':
        if request.POST.get('name'):
            request.db.execute(
                'insert into tasks (name, closed) values (?, ?)',
                [request.POST['name'], 0])
            request.db.commit()
            request.session.flash('New task was successfully added!')
            return HTTPFound(location=request.route_url('list'))
        else:
            request.session.flash('Please enter a name for the task!')
    return {}


@view_config(route_name='close')
def close_view(request):
    task_id = int(request.matchdict['id'])
    request.db.execute("update tasks set closed = ? where id = ?",
                       (1, task_id))
    request.db.commit()
    request.session.flash('Task was successfully closed!')
    return HTTPFound(location=request.route_url('list'))


@view_config(context='pyramid.exceptions.NotFound', renderer='notfound.mako')
def notfound_view(request):
    request.response.status = '404 Not Found'
    return {}


# subscribers
@subscriber(NewRequest)
def new_request_subscriber(event):
    request = event.request
    settings = request.registry.settings
    request.db = sqlite3.connect(settings['db'])
    request.add_finished_callback(close_db_connection)

def close_db_connection(request):
    request.db.close()


@subscriber(ApplicationCreated)
def application_created_subscriber(event):
    log.warn('Initializing database...')
    with open(os.path.join(here, 'schema.sql')) as f:
        stmt = f.read()
        settings = event.app.registry.settings
        db = sqlite3.connect(settings['db'])
        db.executescript(stmt)
        db.commit()


if __name__ == '__main__':
    # configuration settings
    settings = {}
    settings['reload_all'] = True
    settings['debug_all'] = True
    settings['mako.directories'] = os.path.join(here, 'templates')
    settings['db'] = os.path.join(here, 'tasks.db')
    # session factory
    session_factory = UnencryptedCookieSessionFactoryConfig('itsaseekreet')
    # configuration setup
    config = Configurator(settings=settings, session_factory=session_factory)
    # add mako templating
    config.include('pyramid_mako')
    # routes setup
    config.add_route('list', '/')
    config.add_route('new', '/new')
    config.add_route('close', '/close/{id}')
    # static view setup
    config.add_static_view('static', os.path.join(here, 'static'))
    # scan for @view_config and @subscriber decorators
    config.scan()
    # serve app
    app = config.make_wsgi_app()
    server = make_server('0.0.0.0', 8080, app)
    server.serve_forever()

########NEW FILE########
