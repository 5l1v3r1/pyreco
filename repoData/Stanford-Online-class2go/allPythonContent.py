__FILENAME__ = dev_settings_example
ADMIN_USER='vagrant'
ADMIN_HOME='/home/vagrant'

EC2_REGION = "ap-southeast-2"
EC2_AMI = "ami-e2ba2cd8"
EC2_SECURITY = "prod"
EC2_INSTANCE_TYPE = "m1.small"
EC2_KEY_PAIR = "KeyPair"
EC2_TAG = "app2.dev"
EC2_ELB = "UWAC2GDev"

# "c2g_fab_web" => {
# AWS GLOBAL
AWS_ACCESS_KEY_ID = 'ABCDEFGHIJK'
AWS_SECRET_ACCESS_KEY = 'abcsklsdfjasjf+sdf+asfsd'


# RDS - Main Database
DATABASE_HOST = "env.cccccccccccc.us-west-2.rds.amazonaws.com"
DATABASE_INSTANCE = "class2go"
DATABASE_USER = "xxxxxxxxxxxx"
DATABASE_PASSWORD = "dddddddddd"

# RDS - Readonly Database Instance

READONLY_DATABASE_HOST = "env.cccccccccccc.us-west-2.rds.amazonaws.com"
READONLY_DATABASE_INSTANCE = "class2go"
READONLY_DATABASE_USER = "xxxxxxxxxxxx"
READONLY_DATABASE_PASSWORD = "dddddddddd"


# s3 - storage buckets
STORAGE_BUCKET = "stage-c2g"         # class assets
SECURE_BUCKET = "stage-c2g"          # reports
RELEASE_BUCKET = "qqqqqqqqqqqqqqqq",  # private info

# ses - bulk email service
SMTP_USER = "eeeeeeeeeeeeeeeeeeee"
SMTP_PASSWORD = "ffffffffffffffffffffffffffffffffffffffffffff"


PRODUCTION = False
INSTANCE = "stage"
MAINT = False
ADMIN_NAME = "class2go example"
ADMIN_EMAIL = "crash@class.stanford.edu"
SNIPPET_EMAIL = "c2g-dev@cs.stanford.edu"
DJANGO_SECRET = "class2go"


# APPS

APPS =  ({
    "class2go": {
    "SERVER_NAME": "https://example.class.university.edu",
    "SERVER_ALIAS": "*.example.class.university.edu",
    "GIT_BRANCH": "origin/master",
    "USE_SHIB":  False,
    "SHIB_ID": "1234567890",
    "GIT_REPO": "https://github.com/Stanford-Online/class2go.git"
}}
)

#REDIRECTS
REDIRECTS = (
    { "class2go": {'FROM':  "db-class.org", 'TO': 'class2go.stanford.edu/db'} }
)
# DBCLASSCOM
FROM = "db-class.com"
TO = "class2go.stanford.edu/db"

#UTIL
CELERY_DATABASE = "/opt/class2go/celery/celerydb.sqlite"
CELERY_TIMEOUT = "7200"
CELERY_CONCURRENCY = "8"
CELERY_CPU_TOTAL = 1

# DNS_EDITOR
ZONE = "c2gops.com"
TTL = 300

GRADER_ENDPOINT = "http://xxxxxxxxxxxxxxxxxxxxx/yyyyyyyyyyyy"

# PIAZZA
PIAZZA_ENDPOINT = "https://piazza.com/basic_lti"
PIAZZA_KEY = "hhhhhhhhhhhh"
PIAZZA_SECRET = "ggggggggggggggg"

SCALYR_WRITE_KEY = "1234567890"

# GOOGLE
YT_SERVICE_DEVELOPER_KEY = "xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx"
GOOGLE_CLIENT_ID = "nnnnnnnnnnnn.apps.googleusercontent.com"
GOOGLE_CLIENT_SECRET = "sssssssssssssssssssss"


USE_SHIB = False
SHIB_ID = "1234567890"


########NEW FILE########
__FILENAME__ = fabfile


from fabric.api import *
from fabric.colors import green as _green, yellow as _yellow
from cuisine import *
import boto
import boto.ec2
from django.template import loader, Context
import time
from django.conf import settings


if settings.VM_TYPE == "VAGRANT":
    env.use_ssh_config = True
env.user = settings.ADMIN_USER

class AppSettings:

    def __init__(self, app_key='', app_value={}):
        self.server_alias = app_value['SERVER_ALIAS']
        self.server_name =  app_value['SERVER_NAME']
        self.git_branch =  app_value['GIT_BRANCH']
        self.app_name = app_key
        self.use_shib = app_value['USE_SHIB']
        self.shib_id = app_value['SHIB_ID']
        self.git_repo = app_value['GIT_REPO']

def setup_dev_vagrant_mysql():

    if not is_sudo():
        mode_sudo()

    package_ensure('mysql-server')
    package_ensure('mysql-client')


def init_dev_vagrant_db():

    run('cd class2go/main; ./manage.py syncdb')
    run('cd class2go/main; ./manage.py migrate')
    run('cd class2go/main; ./manage.py syncdb --database=celery')
    run('cd class2go/main; ./manage.py migrate --database=celery')

def setup_dev_vagrant():

    if not is_sudo():
        mode_sudo()

    run('uname -a')

    run('apt-get update')
    package_ensure('git-core')
    package_ensure('python-pip')
    python_package_ensure('django')
    package_ensure('libmysqlclient-dev')
    package_ensure('python-dev')

    if not dir_exists('/home/vagrant/class2go'):
        run('git clone https://github.com/Stanford-Online/class2go.git')

    # Following are needed for Ubuntu dev env
    run('pip install distribute --upgrade')
    package_ensure('libsqlite3-dev')
    package_ensure('libxml2-dev')
    package_ensure('libxslt-dev')
    package_ensure('python-dateutil')



    run('cd class2go; pip install -r requirements.txt')



    #currently bombs with dateutil?
    run('cd class2go; pip install -r suggested_requirements.txt')


def update_ubuntu():

    """
    updates ubuntu packages
    """
    print(_yellow("...Updating Ubuntu..."))

    with mode_sudo():
        run('apt-get update -q -y')
        #run('apt-get upgrade')


def test_file():
    if not is_sudo():
        mode_sudo()

    # run('rm /home/ubuntu/testfile')
    # file_upload("/home/ubuntu/testfile","./files/gdata-2.0.17-c2g.tar.gz")


    # return
    if file_exists('/home/ubuntu/testfile'):
        print 'removing file'
        run('rm /home/ubuntu/testfile')

    file_upload("/home/testfile","./files/gdata-2.0.17-c2g.tar.gz", scp=True)

    return

    contents = file_local_read("./files/gdata-2.0.17-c2g.tar.gz")
    file_write("/home/ubuntu/testfile",contents,scp=True)
    file_ensure("/home/ubuntu/testfile")

def init_base_ubuntu():

    """
    Installs all basic packages for Ubuntu
    """



    print(_yellow("...Initialising Base Ubuntu..."))

    if not is_sudo():
        mode_sudo()

    file_write('hostname',settings.EC2_TAG, scp=True)
    run('mv hostname /etc/hostname; start hostname')

    # need to change hosts file to avoid warnings on sudo

    file_upload('/home/'+settings.ADMIN_HOME+'/update-hosts.sh', './files/update-hosts.sh', scp=True)
    file_ensure("/home/"+settings.ADMIN_HOME+"/update-hosts.sh", mode = "00755",
                owner = settings.ADMIN_USER,
                group=settings.ADMIN_GROUP)

    run('cd /home/'+settings.ADMIN_HOME+'; ./update-hosts.sh remove ' + settings.EC2_TAG + '; ./update-hosts.sh add ' + settings.EC2_TAG)

    run('cd /home/'+settings.ADMIN_HOME+'; rm ./update-hosts.sh')


    t =  loader.get_template('bash_aliases.txt')

    node_type = settings.EC2_TAG.upper()
    node_type = node_type[node_type.find('.')+1:]

    c = Context({ "node_type": node_type })

    file_write("/home/"+settings.ADMIN_HOME+"/.bash_aliases", t.render(c),mode = "00644",
               owner = settings.ADMIN_USER,
               group=settings.ADMIN_GROUP, scp=True)

    file_upload("/home/"+settings.ADMIN_HOME+"/.bashrc", "./files/dot-bashrc", scp=True)

    file_ensure("/home/"+settings.ADMIN_HOME+"/.bashrc", mode = "00644",
               owner = settings.ADMIN_USER,
               group=settings.ADMIN_GROUP)


    run('apt-get update')
    package_ensure('mosh')
    package_ensure('git')
    package_ensure('emacs')
    package_ensure('python-dev')
    package_ensure('mysql-client')
    package_ensure('python-setuptools')
    package_ensure('python-pip')
    package_ensure('python-mysqldb')
    python_package_ensure('django')
    python_package_ensure('South')
    run('apt-get install libjpeg-dev -y')
    file_link('/usr/lib/x86_64-linux-gnu/libjpeg.so','/usr/lib/libjpeg.so',owner='root',group='root')

    python_package_ensure('PIL')
    python_package_ensure('djangorestframework')
    python_package_ensure('pysimplesoap')
    package_ensure('lynx-cur')

    file_ensure('/etc/init.d/update-mnt-perms',mode='00755',owner='root',group='root')
    file_link('/etc/init.d/update-mnt-perms', '/etc/rc2.d/S80update-mnt-perms', owner="root",group="root")
    run('/etc/init.d/update-mnt-perms')




def init_apache():
    """
    Installs Apache
    """
    print(_yellow("...Initialising Apache..."))

    # for each app
    if not is_sudo():
        mode_sudo()

    for key,value in settings.APPS.items():
        app_settings = AppSettings(key,value)

        t =  loader.get_template('apache_app.txt')
        c = Context({ "server_name":app_settings.server_name, "server_alias": app_settings.server_alias,
                   "app_name":app_settings.app_name, "use_shib":app_settings.use_shib, "shib_id":app_settings.shib_id,
                   "admin_home":settings.ADMIN_HOME
                   })


        package_ensure('libapache2-mod-wsgi')




        file_write(app_settings.app_name+"apache", t.render(c), scp=True)

        run('mv ' + app_settings.app_name+"apache " + "/etc/apache2/sites-available/"+app_settings.app_name)

        file_ensure("/etc/apache2/sites-available/"+app_settings.app_name, mode = "00644", owner ="root", group="root")

        # not sure why this didn't work as run as sudo
        run("a2ensite " + app_settings.app_name)

        # redirectors

        for key,value in settings.REDIRECTS.items():

            t =  loader.get_template('apache_redirect.txt')
            c = Context({ "hostname_from": value['FROM'], "hostname_to": value['TO'] })

            file_write(app_settings.app_name+"-redirect", t.render(c), scp=True)
            run("mv " + app_settings.app_name+"-redirect /etc/apache2/sites-available/"+app_settings.app_name+"-redirect")
            file_ensure("/etc/apache2/sites-available/"+app_settings.app_name+"-redirect",mode = "00644", owner ="root", group="root")
            run("a2ensite " + app_settings.app_name+"-redirect")

        run('a2dissite default')

    return

def init_python():
    """
    Installs all basic packages for Ubuntu
    """
    print(_yellow("...Initialising Python Packages..."))

    if not is_sudo():
        mode_sudo()

    python_package_ensure('django-storages')
    python_package_ensure('boto')
    python_package_ensure('django-celery')
    python_package_ensure('django-celery-email')
    python_package_ensure('pytz')
    package_ensure('python-numpy')
    python_package_ensure('ipython')
    python_package_ensure('ipdb')
    python_package_ensure('django_nose')
    python_package_ensure('django_coverage')
    python_package_ensure('xhtml2pdf')
    python_package_ensure('markdown')



def init_celery():
    """
    Installs Celery
    """

    if (not is_sudo()):
        mode_sudo()

    print(_yellow("...Initialising Celery..."))

    python_package_ensure('django-celery')

    if file_exists("/etc/init.d/celeryd"):
        run("service celeryd stop")
        run("rm /etc/init.d/celeryd")

    if file_exists("/etc/default/celeryd"):
        run("rm /etc/default/celeryd")

    for key,value in settings.APPS.items():
        app_settings = AppSettings(key,value)

        dir_ensure("/opt/"+app_settings.app_name, mode='00777',owner='root',group='root')
        dir_ensure("/opt/"+app_settings.app_name+"/celery", mode='00777',owner='root',group='root')

        # migrate celery db
        cwd = "cd /home/"+settings.ADMIN_USER+"/"+app_settings.app_name+"/main"
        cmd = "./manage.py syncdb --migrate --noinput --database=celery"
        run(cwd+";"+cmd)

        file_ensure("/opt/"+app_settings.app_name+"/celery/celerydb.sqlite",mode='0077',owner='root',group='root')

        # configure celery init script

        num_cpu = run('cat /proc/cpuinfo | grep processor | wc -l')

        t =  loader.get_template('celeryd-init-script.txt')
        c = Context({ "app_name":app_settings.app_name, "admin_home": settings.ADMIN_HOME,
                      "celery_cpu_total": num_cpu, "celery_timeout": settings.CELERY_TIMEOUT,
                      "celery_concurrency": settings.CELERY_CONCURRENCY})

        file_write("/tmp/celeryd-"+app_settings.app_name, t.render(c),mode = "00755", owner ="root", group="root", scp=True)
        run("mv /tmp/celeryd-"+app_settings.app_name + ' /etc/init.d/celeryd-'+app_settings.app_name)

        # configure celery config

        t =  loader.get_template('celeryd-init-config.txt')
        file_write("/tmp/celeryd-"+app_settings.app_name, t.render(c),mode = "00644", owner ="root", group="root", scp=True)
        run("mv /tmp/celeryd-"+app_settings.app_name + ' /etc/default/celeryd-'+app_settings.app_name)

        # run celery

        run("/etc/init.d/celeryd-"+app_settings.app_name+" start")


def class2go_deploy():
    """
    Deploys Application
    """

    if (not is_sudo()):
        mode_sudo()

    print(_yellow("...Deploying Application..."))

    # for dev

    for key,value in settings.APPS.items():
        app_settings = AppSettings(key,value)

        dir_ensure("/opt/"+app_settings.app_name, mode='00777',owner='root',group='root')
        dir_ensure("/opt/"+app_settings.app_name+"/static", mode='00777',owner='root',group='root')

        # clone git
        # only do this on creation

        if not dir_exists("/home/"+settings.ADMIN_USER+"/"+app_settings.app_name):
            cwd = "cd /home/"+settings.ADMIN_USER+"/"
            cmd = "git clone "+app_settings.git_repo+" "+ app_settings.app_name
            run(cwd+";"+cmd)
            run('chown -R '+ settings.ADMIN_USER + ' ' + app_settings.app_name)

        dir_ensure(app_settings.app_name + "/main/static", mode='00777')
        cwd = "cd /home/"+settings.ADMIN_USER+"/"+app_settings.app_name
        cmd = "git remote prune origin"
        run(cwd+";"+cmd)

        cmd = "git remote update"
        run(cwd+";"+cmd)

        cmd = "git checkout -f "+ app_settings.git_branch
        run(cwd+";"+cmd)

        cmd = "git reset --hard "+ app_settings.git_branch
        run(cwd+";"+cmd)

        cmd = "find . -name \\*.pyc -exec rm {} \\; -print"
        run(cwd+";"+cmd)

def init_dbdump():
    """
    Installs Cron job to dump database daily
    """

    if (not is_sudo()):
        mode_sudo()

    print(_yellow("...Initialising DB Dump..."))

    # noting changes so read?
    t =  loader.get_template('proddump-daily-script.txt')

    c = Context({ "readonly_database":settings.READONLY_DATABASE_INSTANCE, "readonly_database_user": settings.READONLY_DATABASE_USER,
                  "readonly_database_password": settings.READONLY_DATABASE_PASSWORD, "readonly_database_instance": settings.READONLY_DATABASE_INSTANCE })

    file_write("/etc/cron/daily.d/proddump-daily", t.render(c),mode = "00755", owner =settings.ADMIN_USER,
                group=settings.ADMIN_GROUP, scp=True)

def init_database():
    """
    Installs Cron job to dump database daily
    """

    if (not is_sudo()):
        mode_sudo()

    print(_yellow("...Initialising Database Python..."))

    # noting changes so read?
    t =  loader.get_template('database.py.txt')

    for key,value in settings.APPS.items():
        app_settings = AppSettings(key,value)

        c = Context({ "readonly_database":settings.READONLY_DATABASE_INSTANCE,
                  "readonly_database_user": settings.READONLY_DATABASE_USER,
                  "readonly_database_password": settings.READONLY_DATABASE_PASSWORD,
                  "readonly_database_instance": settings.READONLY_DATABASE_INSTANCE,
                  "database_instance": settings.DATABASE_INSTANCE,
                  "database_user": settings.DATABASE_USER,
                  "database_password": settings.DATABASE_PASSWORD,
                  "database_host": settings.DATABASE_HOST,
                  "production": settings.PRODUCTION,
                  "maintenance_landing_page": settings.MAINT,
                  "instance": settings.INSTANCE,
                  "app_name": app_settings.app_name,
                  "admin_name": settings.ADMIN_NAME,
                  "admin_email": settings.ADMIN_EMAIL,
                  "snippet_email": settings.SNIPPET_EMAIL,
                  "aws_access_key": settings.AWS_ACCESS_KEY_ID,
                  "aws_access_secret": settings.AWS_SECRET_ACCESS_KEY,
                  "aws_storage_bucket": settings.STORAGE_BUCKET,
                  "django_secret": settings.DJANGO_SECRET,
                  "piazza_endpoint": settings.PIAZZA_ENDPOINT,
                  "piazza_secret": settings.PIAZZA_SECRET,
                  "piazza_key": settings.PIAZZA_KEY,
                  "smtp_user": settings.SMTP_USER,
                  "smtp_password": settings.SMTP_PASSWORD,
                  "yt_service_developer_key": settings.YT_SERVICE_DEVELOPER_KEY,
                  "google_client_id": settings.GOOGLE_CLIENT_ID,
                  "google_client_secret": settings.GOOGLE_CLIENT_SECRET,
                  "grader_endpoint": settings.GRADER_ENDPOINT
        })

        print settings.ADMIN_USER
        file_write("/home/"+settings.ADMIN_USER+"/"+app_settings.app_name+"/main/database.py", t.render(c),
                    mode = "00644", owner =settings.ADMIN_USER, group=settings.ADMIN_GROUP,scp=True)


    dir_ensure("/opt/assets",mode="00777",owner="root",group="root")


def init_logging():
    """
    Sets up logging
    """
    if (not is_sudo()):
        mode_sudo()

    print(_yellow("...Initialising Logging..."))

    # if dev then logging is in the home directory?

    dir_ensure("class2go/main/logs",mode="00777")
    dir_ensure("/var/log/django",mode="00777",owner="root",group="root")

    for key,value in settings.APPS.items():
        app_settings = AppSettings(key,value)

        file_ensure("class2go/main/logs/"+app_settings.app_name+"-django.log",mode='00666')
        file_ensure("/var/log/django/"+app_settings.app_name+"-django.log",mode='00666',owner='root',group='root')


def init_dns():
    """
    Sets up scripts that will register the machine in DNS
    """

    if (not is_sudo()):
        mode_sudo()

    print(_yellow("...Initialising DNS..."))

    python_package_ensure('boto')
    python_package_ensure('dnspython')

    file_upload('/usr/local/bin/cli53', './files/cli53', scp=True)
    file_ensure('/usr/local/bin/cli53',  mode="00755",owner="root",group="root")

    dir_ensure("/etc/route53",mode="00755",owner="root",group="root")

    t =  loader.get_template('route53-config.txt')

    for key,value in settings.APPS.items():
        app_settings = AppSettings(key,value)

    c = Context({ "aws_access_key": settings.AWS_ACCESS_KEY_ID,
                  "aws_access_secret": settings.AWS_SECRET_ACCESS_KEY,
                  "dns_zone": settings.ZONE,
                  "dns_ttl": settings.TTL
    })

    file_write("config", t.render(c), scp=True)
    run('mv config /etc/route53/config')
    file_ensure("/etc/route53/config", mode='00644', owner ="root", group="root")

    file_upload('update-route53-dns.sh', './files/update-route53-dns.sh')
    run('mv update-route53-dns.sh /usr/sbin/update-route53-dns.sh')
    file_ensure('/usr/sbin/update-route53-dns.sh', mode="00755",owner="root",group="root")

    file_upload('update-route53-dns.conf', './files/update-route53-dns.conf')
    run('mv update-route53-dns.conf /etc/init/update-route53-dns.conf')
    file_ensure('/etc/init/update-route53-dns.conf', mode="00644",owner="root",group="root")


    run('start update-route53-dns')

def run_reports():

    run('cd ./class2go/reports; ./users_by_class.sh')
    cmd = 'scp '+settings.ADMIN_USER+'@'+fabric.api.env.host_string+':~/class2go/reports/users_by_class.png .'
    run_local(cmd)
    sendmail_cmd = 'python ./files/sendmail.py -u ' + settings.REPORT_SMTP_USERNAME + ' -p '+ settings.REPORT_SMTP_PASSWORD +\
                   ' -f ' + settings.REPORT_SMTP_FROM + ' -t ' + settings.REPORT_SMTP_TO + ' -a users_by_class.png ' + \
                   ' -s "Daily report" -m "Daily report"'
    print(sendmail_cmd)
    run_local(sendmail_cmd)

    run('cd ./class2go/reports; ./users_by_day.sh')
    cmd = 'scp '+settings.ADMIN_USER+'@'+fabric.api.env.host_string+':~/class2go/reports/users_by_day.png .'
    run_local(cmd)
    sendmail_cmd = 'python ./files/sendmail.py -u ' + settings.REPORT_SMTP_USERNAME + ' -p '+ settings.REPORT_SMTP_PASSWORD + \
                   ' -f ' + settings.REPORT_SMTP_FROM + ' -t ' + settings.REPORT_SMTP_TO + ' -a users_by_day.png ' + \
                   ' -s "Daily report" -m "Daily report"'
    print(sendmail_cmd)
    run_local(sendmail_cmd)



def init_reporting():

    if (not is_sudo()):
        mode_sudo()

    print(_yellow("...Initialising Reporting..."))

    package_ensure('gnuplot')

    # noting changes so read?
    t =  loader.get_template('my.cnf.txt')

    c = Context({ "readonly_database":settings.READONLY_DATABASE_INSTANCE,
                  "readonly_database_user": settings.READONLY_DATABASE_USER,
                  "readonly_database_password": settings.READONLY_DATABASE_PASSWORD,
                  "readonly_database_instance": settings.READONLY_DATABASE_INSTANCE })

    file_write("/home/"+settings.ADMIN_USER+"/.my.cnf", t.render(c),mode = "00644",
                owner =settings.ADMIN_USER, group=settings.ADMIN_GROUP, scp=True)

    cmd = '* 10 * * 0,7 (cd /home/'+settings.ADMIN_USER+'/class2go/reports; ./users_by_class.sh ' + settings.REPORT_EMAIL + ')'

    run("{ crontab -l -u user; echo" + cmd + "; } | crontab -u user ")

    cmd = '* 10 10 * 0,7 (cd /home/'+settings.ADMIN_USER+'/class2go/reports; ./users_by_day.sh  ' + settings.REPORT_EMAIL + ')'

    run("{ crontab -l -u user; echo" + cmd + "; } | crontab -u user ")

    cmd = '* 10 20 * 0,7 (cd /home/'+settings.ADMIN_USER+'/class2go/main; ./manage.py gen_active_course_reports)'

    run("{ crontab -l -u user; echo" + cmd + "; } | crontab -u user ")


def init_util_kelvinator():

    if (not is_sudo()):
        mode_sudo()

    print(_yellow("...Initialising Util Kelvinator..."))

    package_ensure('libx264-dev')

    run_upload('./files/ffmpeg','/usr/local/bin/ffmpeg')

    file_ensure('/usr/local/bin/ffmpeg', mode="00777",owner="root",group="root")


def init_gdata():

    if (not is_sudo()):
        mode_sudo()

    print(_yellow("...Initialising GData..."))

    package_ensure('libx264-dev')

    file_upload('/tmp/gdata-2.0.17-c2g.tar.gz', './files/gdata-2.0.17-c2g.tar.gz', scp=True)

    file_ensure('/tmp/gdata-2.0.17-c2g.tar.gz', mode="00644",owner="root",group="root")

    # install
    run('cd /tmp; tar zxf gdata-2.0.17-c2g.tar.gz; cd /tmp/gdata-2.0.17; python setup.py install')

    # cleanup
    run('cd /tmp; rm -r gdata-2.0.17; rm gdata-2.0.17-c2g.tar.gz ')


def init_shib():
    """
    Sets up Shibboleth for Apache
    """
    if (not is_sudo()):
        mode_sudo()


    package_ensure("shibboleth-sp2-schemas")
    package_ensure("libshibsp-dev")
    package_ensure("libshibsp-doc")
    package_ensure("libapache2-mod-shib2")

    run("a2enmod shib2")
    package_ensure("opensaml2-tools")

    # "remove shib.conf" do
    run("F=/etc/apache2/conf.d/shib.conf; if [ -e $F ]; then rm $F; fi")

    t =  loader.get_template('shibboleth2.xml.txt')

    c = Context({ "shib_entity_id":settings.SHIB_ID, "shib_sp_key": settings.SHIB_SP_KEY, "shib_sp_cert": settings.SHIB_SP_CERT })

    file_write("/etc/shibboleth/shibboleth2.xml", t.render(c), mode="00644", owner ="root", group="root", scp=True)

    t =  loader.get_template('attribute-map.xml.txt')
    file_write("/etc/shibboleth/attribute-map.xml", t.render(c), mode = "00644", owner ="root", group="root", scp=True)

    t =  loader.get_template('class.pem.txt')
    file_write("/etc/shibboleth/class.pem", t.render(c),mode = "00644", owner ="_shibd", group="_shibd", scp=True)

    t =  loader.get_template('class.key.txt')
    file_write("/etc/shibboleth/class.key", t.render(c),mode = "00600", owner ="_shibd", group="_shibd", scp=True)

    dir_ensure("/etc/shibboleth/metadata",mode='00755', owner='_shibd', group='_shibd')

    contents = file_local_read('./files/Stanford-metadata.xml')
    file_write('/etc/shibboleth/metadata/Stanford-metadata.xml', contents, mode="00644",owner="root",group="root", scp=True)


def init_scalyr():
    """
    Sets up Shibboleth for Apache
    """
    if (not is_sudo()):
        mode_sudo()


    package_ensure("openjdk-6-jre")

    if not dir_exists("/opt/scalyrAgent"):
        if file_exists('/opt/scalyrAgentInstaller.sh'):
            run('rm /opt/scalyrAgentInstaller.sh')
        run('cd /opt; wget https://log.scalyr.com/binaries/scalyrAgentInstaller.sh')
        run('cd /opt; bash ./scalyrAgentInstaller.sh')

    # the Scalyr installer leaves this directory owned by 501:staff for some reason,
    # this is the workaround.

    run('chown -R root:root /opt/scalyrAgent')

    t =  loader.get_template('agentConfig.json.txt')

    c = Context({ })

    file_write("/opt/scalyrAgent/configs/agentConfig.json", t.render(c), owner ="root", group="root",check=False, scp=True)

    t =  loader.get_template('events.properties.txt')

    c = Context({'scalyr_write_key':settings.SCALYR_WRITE_KEY })

    file_write("/opt/scalyrAgent/configs/events.properties", t.render(c), owner ="root", group="root", scp=True)

    run('cd /opt/scalyrAgent; bash agent.sh install_rcinit')


    # Two workarounds here:
    # 1. the Scalyr "rcinit" script doesn't create a runlevel 2 startup entry
    # 2. typically rcX.d scripts should just be symlinks to init.d scripts, so
    #    linking to a script elsewhere is really weird. But this was the only
    #    way to get their init script to survive a reboot.

    file_link( '/opt/scalyrAgent/agent.sh', '/etc/rc2.d/S98scalyr-agent')

    if file_exists('/etc/rc2.d/K55scalyr-agent'):
        run('rm /etc/rc2.d/K55scalyr-agent')

    run('service scalyr-agent --no-interactive start')


def init_collectstatic():
    """
    Runs python job to collectstatic
    """

    if (not is_sudo()):
        mode_sudo()

    print(_yellow("...Initialising Python Collectstatic..."))


    for key,value in settings.APPS.items():
        app_settings = AppSettings(key,value)

        cwd = '/home/'+settings.ADMIN_USER+'/'+app_settings.app_name+'/main'
        cmd = 'python manage.py collectstatic --noinput --clear > /tmp/class2go-collectstatic-'+app_settings.app_name+'.log'

        run('cd '+cwd+';'+cmd);


def apache_restart():
    """
    Restart Apache and Shib if necessary
    """

    if (not is_sudo()):
        mode_sudo()

    print(_yellow("...Restarting Apache & Shib..."))

    run('service apache2 restart')

    if settings.USE_SHIB:
        run('service shibd restart')


def init_s3cmd():
    """
    Sets up AWS S3
    """
    if (not is_sudo()):
        mode_sudo()


    package_ensure("s3cmd")

    dir_ensure("/opt/class2go",mode='00777',owner='ubuntu',group='ubuntu')

    t =  loader.get_template('s3cmd_conf.txt')

    c = Context({ "aws_access_key": settings.AWS_ACCESS_KEY_ID,
                  "aws_access_secret": settings.AWS_SECRET_ACCESS_KEY
                                   })

    file_write("/opt/class2go/s3cmd.conf", t.render(c), mode='00644', owner =settings.ADMIN_USER, group=settings.ADMIN_GROUP, scp=True)





########NEW FILE########
__FILENAME__ = fabfile_aws


from fabric.api import *
from fabric.colors import green as _green, yellow as _yellow
from cuisine import *
import boto
import boto.ec2
import boto.ec2.elb
from django.template import loader, Context
import time
from django.conf import settings


env.user = settings.ADMIN_USER

def create_server():
    """
    Creates EC2 Instance
    """
    print(_green("Started..."))
    print(_yellow("...Creating EC2 instance..."))

    conn = boto.ec2.connect_to_region(settings.EC2_REGION, aws_access_key_id=settings.AWS_ACCESS_KEY_ID,
                                      aws_secret_access_key=settings.AWS_SECRET_ACCESS_KEY)


    image = conn.get_image(settings.EC2_AMI)

    reservation = image.run(1, 1, key_name=settings.EC2_KEY_PAIR, security_groups={settings.EC2_SECURITY},
                            instance_type=settings.EC2_INSTANCE_TYPE)

    instance = reservation.instances[0]
    conn.create_tags([instance.id], {"Name":settings.EC2_TAG})
    while instance.state == u'pending':
        print(_yellow("Instance state: %s" % instance.state))
        time.sleep(10)
        instance.update()

    print(_green("Instance state: %s" % instance.state))
    print(_green("Public dns: %s" % instance.public_dns_name))

    return instance.public_dns_name


class ELB:

    def __init__(self):
        self.ec2_connection = boto.ec2.connect_to_region(settings.EC2_REGION,
                                                         aws_access_key_id=settings.AWS_ACCESS_KEY_ID,
                                                         aws_secret_access_key=settings.AWS_SECRET_ACCESS_KEY)
        elb_region = boto.regioninfo.RegionInfo(name=settings.EC2_REGION,  endpoint=settings.EC2_ELB_ENDPOINT)

        self.elb_connection = boto.ec2.elb.ELBConnection(aws_access_key_id=settings.AWS_ACCESS_KEY_ID,
                                                         aws_secret_access_key=settings.AWS_SECRET_ACCESS_KEY,
                                                         region=elb_region)


    def get_instance_id(self, instance_name):
        reservations = self.ec2_connection.get_all_instances()

        instance_id = ''

        for r in reservations:
            for i in r.instances:
                if i.tags['Name'] == instance_name:
                    instance_id = i.id

        if len(instance_id) == 0:
            print 'Instance ID not found'
            return None

        return instance_id

def elb_info():

    # get ELB information

    elb = ELB()

    # lb = boto.ec2.elb.loadbalancer.LoadBalancer(connection=elb_connection, name='UWAC2GProd')
    # lb = elb_connection.create_load_balancer('UWAC2GDev','ap-southeast-2a',[(80, 8080, 'http'), (443, 8443, 'tcp')])

    # get instances asssociated with ELB
    lbs = elb.elb_connection.get_all_load_balancers(load_balancer_names=[settings.EC2_ELB])
    # print lbs[0].instances

    # get health
    instance_health = elb.elb_connection.describe_instance_health(settings.EC2_ELB)
    for instance_state in instance_health:
        print

        reservations = elb.ec2_connection.get_all_instances(instance_ids=[instance_state.instance_id])
        # translate

        print instance_state.instance_id + ' ' + reservations[0].instances[0].tags['Name'] + ' ' +  \
              instance_state.state


    # instance_addresses = [ i.tags for r in reservations for i in r.instances ]

def elb_remove_instance(instance_name):

    # check instance_name
    if instance_name is None or len(instance_name) == 0:
        print('instance_name: not specified')
        return

    # get ELB information

    elb = ELB()

    # get instance id from instance_name

    instance_id = elb.get_instance_id(instance_name)

    print('Deregistering ' + instance_id)

    elb.elb_connection.deregister_instances(settings.EC2_ELB,[instance_id])

    print('Deregistered')

def elb_add_instance(instance_name):

    # check instance_name
    if instance_name is None or len(instance_name) == 0:
        print('instance_name: not specified')
        return

    # get ELB information

    elb = ELB()

    # get instance id from instance_name

    instance_id = elb.get_instance_id(instance_name)

    print('Registering ' + instance_id)

    elb.elb_connection.register_instances(settings.EC2_ELB,[instance_id])

    print('Registered')


########NEW FILE########
__FILENAME__ = fabfile_manage
from fabric.api import *
from fabric.colors import green as _green, yellow as _yellow
from cuisine import *
import boto
import boto.ec2
from django.template import loader, Context
import time
from django.conf import settings
from fabfile import *
from fabfile_aws import *
import datetime


def deploy_update():

    if not is_sudo():
        mode_sudo()
    # remove from ELB

    elb_remove_instance(settings.EC2_TAG)

    run('/etc/init.d/apache2 stop')

    new_dir = 'class2go' + datetime.datetime.now().strftime("%Y-%m-%d")
    run('mv class2go ' + new_dir)

    run('git clone https://github.com/uwacsp/class2go.git')

    run('chown -R ubuntu class2go')

    run('cd class2go/main; cp ../../'+ new_dir + '/main/settings.py .;' + ' cp ../../'+ new_dir + '/main/database.py .')

    run('cd class2go/main; sudo python manage.py collectstatic --noinput')

    run('/etc/init.d/apache2 start')

    elb_add_instance(settings.EC2_TAG)

########NEW FILE########
__FILENAME__ = fabfile_roles


from fabric.api import *
from fabric.colors import green as _green, yellow as _yellow
from cuisine import *
import boto
import boto.ec2
from django.template import loader, Context
import time
from django.conf import settings
from fabfile import *

def setup_app():
    update_ubuntu()
    init_gdata()
    init_base_ubuntu()
    init_python()
    init_apache()
    if settings.USE_SHIB:
        init_shib()

    class2go_deploy()
    init_logging()
    init_dns()
    init_database()
    init_collectstatic()
    apache_restart()


def setup_maint():
    update_ubuntu()
    init_gdata()
    init_base_ubuntu()
    init_python()
    init_apache()
    class2go_deploy()
    init_logging()
    init_dns()
    init_database()
    init_collectstatic()
    apache_restart()


def setup_report():
    update_ubuntu()
    init_gdata()
    init_base_ubuntu()
    init_python()
    class2go_deploy()
    init_logging()
    init_database()
    init_s3cmd()
    init_reporting()

def setup_util():
    update_ubuntu()
    init_gdata()
    init_base_ubuntu()
    init_python()
    class2go_deploy()
    init_logging()
    init_dns()
    init_database()
    init_s3cmd()
    init_util_kelvinator()
    init_certificate()
    init_celery()

def setup_scalyr():
    init_scalyr()



########NEW FILE########
__FILENAME__ = sendmail
# settings

SMTP_SERVER = 'smtp.gmail.com'
SMTP_PORT = 587


# now construct the message
import smtplib, email
from email import encoders
import os
import argparse
from email.MIMEImage import MIMEImage

parser = argparse.ArgumentParser(description='Send an attachment via gmail')
parser.add_argument('-u','--username', dest='smtp_username', help='SMTP Username')
parser.add_argument('-p','--password', dest='smtp_password', help='SMTP Password')
parser.add_argument('-f','--from', dest='smtp_from', help='SMTP From Address')
parser.add_argument('-t', '--to', dest='smtp_to', help='SMTP To Address')
parser.add_argument('-a', '--attachment', dest='smtp_attachment', help='File to send')
parser.add_argument('-s', '--subject', dest='smtp_subject', help='Subject of Message')
parser.add_argument('-m', '--message', dest='smtp_message', help='Body of Message')


args = parser.parse_args()


msg = email.MIMEMultipart.MIMEMultipart()
body = email.MIMEText.MIMEText(args.smtp_message)

fp = open(args.smtp_attachment, 'rb')
attachment = MIMEImage(fp.read())
fp.close()
attachment.add_header('Content-ID', args.smtp_attachment)
# attachment.add_header('Content-Disposition', 'attachment', filename=os.path.basename(args.smtp_attachment))
# encoders.encode_base64(attachment)

# msg.attach(args.smtp_message)
msg.attach(attachment)
msg.add_header('From',args.smtp_from)
msg.add_header('To', args.smtp_to)
msg.add_header('Subject', args.smtp_subject)

# now send the message
mailer = smtplib.SMTP(SMTP_SERVER, SMTP_PORT)
# EDIT: mailer is already connected
# mailer.connect()
mailer.ehlo()
mailer.starttls()
mailer.ehlo
mailer.login(args.smtp_username, args.smtp_password)

mailer.sendmail(args.smtp_from, [args.smtp_to], msg.as_string())
mailer.quit()

########NEW FILE########
__FILENAME__ = manage
#!/usr/bin/env python
import os
import sys

if __name__ == "__main__":
    os.environ.setdefault("DJANGO_SETTINGS_MODULE", "class2go_fabric.settings")

    from django.core.management import execute_from_command_line

    execute_from_command_line(sys.argv)

########NEW FILE########
__FILENAME__ = settings
# Django settings for botofab project.
from os import path

DEBUG = True
# TEMPLATE_DEBUG = DEBUG

ADMINS = (
    # ('Your Name', 'your_email@example.com'),
)

MANAGERS = ADMINS

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.', # Add 'postgresql_psycopg2', 'mysql', 'sqlite3' or 'oracle'.
        'NAME': '',                      # Or path to database file if using sqlite3.
        'USER': '',                      # Not used with sqlite3.
        'PASSWORD': '',                  # Not used with sqlite3.
        'HOST': '',                      # Set to empty string for localhost. Not used with sqlite3.
        'PORT': '',                      # Set to empty string for default. Not used with sqlite3.
    }
}

APP_TYPE = "dev"
VM_TYPE = "VAGRANT"                      # EC2, VAGRANT, LOCALHOST

if APP_TYPE == "dev":
    from dev_settings import *
elif APP_TYPE == "dev_vagrant":
    from dev_vagrant_settings import *
elif APP_TYPE == "prod":
    from prod_settings import *
elif APP_TYPE == "staging":
    from staging_settings import *


# Local time zone for this installation. Choices can be found here:
# http://en.wikipedia.org/wiki/List_of_tz_zones_by_name
# although not all choices may be available on all operating systems.
# In a Windows environment this must be set to your system time zone.
TIME_ZONE = 'America/Chicago'

# Language code for this installation. All choices can be found here:
# http://www.i18nguy.com/unicode/language-identifiers.html
LANGUAGE_CODE = 'en-us'

SITE_ID = 1


# If you set this to False, Django will make some optimizations so as not
# to load the internationalization machinery.
USE_I18N = True

# If you set this to False, Django will not format dates, numbers and
# calendars according to the current locale.
USE_L10N = True

# If you set this to False, Django will not use timezone-aware datetimes.
USE_TZ = True

# Absolute filesystem path to the directory that will hold user-uploaded files.
# Example: "/home/media/media.lawrence.com/media/"
MEDIA_ROOT = ''

# URL that handles the media served from MEDIA_ROOT. Make sure to use a
# trailing slash.
# Examples: "http://media.lawrence.com/media/", "http://example.com/media/"
MEDIA_URL = ''

# Absolute path to the directory static files should be collected to.
# Don't put anything in this directory yourself; store your static files
# in apps' "static/" subdirectories and in STATICFILES_DIRS.
# Example: "/home/media/media.lawrence.com/static/"
STATIC_ROOT = ''

# URL prefix for static files.
# Example: "http://media.lawrence.com/static/"
STATIC_URL = '/static/'

# Additional locations of static files
STATICFILES_DIRS = (
    # Put strings here, like "/home/html/static" or "C:/www/django/static".
    # Always use forward slashes, even on Windows.
    # Don't forget to use absolute paths, not relative paths.
)

# List of finder classes that know how to find static files in
# various locations.
STATICFILES_FINDERS = (
    'django.contrib.staticfiles.finders.FileSystemFinder',
    'django.contrib.staticfiles.finders.AppDirectoriesFinder',
#    'django.contrib.staticfiles.finders.DefaultStorageFinder',
)

# Make this unique, and don't share it with anybody.
SECRET_KEY = 'b6bt9e!ktzeg^&amp;$k(kn5wz-9lf!o%d@%idy4-&amp;yfmmf)y*^c$7'

# List of callables that know how to import templates from various sources.
TEMPLATE_LOADERS = (
    'django.template.loaders.filesystem.Loader',
    'django.template.loaders.app_directories.Loader',
#     'django.template.loaders.eggs.Loader',
)

MIDDLEWARE_CLASSES = (
    'django.middleware.common.CommonMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    # Uncomment the next line for simple clickjacking protection:
    # 'django.middleware.clickjacking.XFrameOptionsMiddleware',
)


ROOT_URLCONF = 'urls'

# Python dotted path to the WSGI application used by Django's runserver.
WSGI_APPLICATION = 'wsgi.application'

thispath = path.dirname(path.realpath(__file__))
TEMPLATE_DIRS = (
    thispath+'/templates'

    # Put strings here, like "/home/html/django_templates" or "C:/www/django/templates".
    # Always use forward slashes, even on Windows.
    # Don't forget to use absolute paths, not relative paths.
)


INSTALLED_APPS = (
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.sites',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    # Uncomment the next line to enable the admin:
    # 'django.contrib.admin',
    # Uncomment the next line to enable admin documentation:
    # 'django.contrib.admindocs',
    #'c2g_fab_web',
)

# A sample logging configuration. The only tangible logging
# performed by this configuration is to send an email to
# the site admins on every HTTP 500 error when DEBUG=False.
# See http://docs.djangoproject.com/en/dev/topics/logging for
# more details on how to customize your logging configuration.
LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'filters': {
        'require_debug_false': {
            '()': 'django.utils.log.RequireDebugFalse'
        }
    },
    'handlers': {
        'mail_admins': {
            'level': 'ERROR',
            'filters': ['require_debug_false'],
            'class': 'django.utils.log.AdminEmailHandler'
        }
    },
    'loggers': {
        'django.request': {
            'handlers': ['mail_admins'],
            'level': 'ERROR',
            'propagate': True,
        },
    }
}

########NEW FILE########
__FILENAME__ = urls
from django.conf.urls import patterns, include, url

# Uncomment the next two lines to enable the admin:
# from django.contrib import admin
# admin.autodiscover()

urlpatterns = patterns('',
    # Examples:
    # url(r'^$', 'class2go_fabric.views.home', name='home'),
    # url(r'^class2go_fabric/', include('class2go_fabric.foo.urls')),

    # Uncomment the admin/doc line below to enable admin documentation:
    # url(r'^admin/doc/', include('django.contrib.admindocs.urls')),

    # Uncomment the next line to enable the admin:
    # url(r'^admin/', include(admin.site.urls)),
)

########NEW FILE########
__FILENAME__ = wsgi
"""
WSGI config for class2go_fabric project.

This module contains the WSGI application used by Django's development server
and any production WSGI deployments. It should expose a module-level variable
named ``application``. Django's ``runserver`` and ``runfcgi`` commands discover
this application via the ``WSGI_APPLICATION`` setting.

Usually you will have the standard Django WSGI application here, but it also
might make sense to replace the whole Django WSGI application with a custom one
that later delegates to the Django one. For example, you could introduce WSGI
middleware here, or combine a Django application with an application of another
framework.

"""
import os

os.environ.setdefault("DJANGO_SETTINGS_MODULE", "settings")

# This application object is used by any WSGI server configured to use this
# file. This includes Django's development server, if the WSGI_APPLICATION
# setting points here.
from django.core.wsgi import get_wsgi_application
application = get_wsgi_application()

# Apply WSGI middleware here.
# from helloworld.wsgi import HelloWorldApplication
# application = HelloWorldApplication(application)

########NEW FILE########
__FILENAME__ = forms
from django.contrib.auth.models import User
from c2g.models import UserProfile
from django import forms
from django.utils.translation import ugettext_lazy as _
import datetime

class EditUserForm(forms.ModelForm):
    email = forms.EmailField(label=_("E-mail"), max_length=75)
    first_name = forms.RegexField(regex=r'^[\w\' -]+$',
                                  max_length=30,
                                  label=_("First Name"),
                                  error_messages={'invalid': _("This value may contain only letters, dashes, spaces and apostrophes")})
    last_name = forms.RegexField(regex=r'^[\w\' -]+$',
                                  max_length=30,
                                  label=_("Last Name"),
                                  error_messages={'invalid': _("This value may contain only letters, dashes, spaces and apostrophes")})

    class Meta:
        model = User
        fields = ('first_name', 'last_name', 'email')

class EditProfileForm(forms.ModelForm):
    max_age=110
    min_age=10
    first_year=datetime.date.today().year-max_age
    last_year=datetime.date.today().year-min_age
    YEARS=map(lambda y: (str(y),str(y)), range(last_year, first_year, -1))
    YEARS.insert(0,('decline',''))
    birth_year = forms.ChoiceField(choices=YEARS,label=_("Year of birth"))
    gender = forms.ChoiceField(label=_("Gender"), choices=(('decline',''),
                                                           ("Female","Female"),
                                                           ("Male","Male"),
                                                           ("Non-Traditional","Non-Traditional")))
    education = forms.ChoiceField(label=_("Highest degree received"), choices=(('decline',''),
                                                                               ('Doctorate','Doctorate'),
                                                                               ('MastersOrProfessional','Masters or Professional'),
                                                                               ('Bachelors','Bachelors'),
                                                                               ('Associate','Associate'),
                                                                               ('HighSchool','Secondary/High School'),
                                                                               ('Middle','Middle school/Jr. High'),
                                                                               ('Elementary','Elementary'),
                                                                               ('None','None'),
                                                                               ('Other','Other'),))
    work = forms.ChoiceField(label=_("I am currently"), choices=(  ('decline',''),
                                                                   ('undergrad','An undergraduate'),
                                                                   ('gradStudent','A graduate student'),
                                                                   ('HSStudent','A high school (or younger) student'),
                                                                   ('Unemployed','Unemployed'),
                                                                   ('Retired','Retired'),
                                                                   ('----','-------------------'),
                                                                   ('Software','In the software industry'),
                                                                   ('Hardware','In the hardware industry'),
                                                                   ('Legal','In the legal industry'),
                                                                   ('K12','In K-12 education'),
                                                                   ('PostSecondary','In post-secondary education'),
                                                                   ('ArtsDesignArchEntertainment','In the arts, design, architecture or entertainment industries'),
                                                                   ('LifePhysSci','In the life or physical sciences'),
                                                                   ('Healthcare','In the healthcare industry'),
                                                                   ('SocialServices','In social services'),
                                                                   ('RetailServicesTransportationFood','In the retail service, transportation or food industries'),
                                                                   ('ManufacturingConstruction','In manufacturing or construction'),
                                                                   ('AnotherIndustry','In another industry'),
                                                                   ('Other','Other'),))
 
    email_me = forms.BooleanField(label=_("Receive emails from courses"), required=False)

    piazza_name  = forms.RegexField(regex=r'^[\w\' -]+$',
                                    required=False,
                                    max_length=50,
                                    label=_("Piazza handle"),
                                    error_messages={'invalid': _("This value may contain only letters, numbers, underscores, spaces, and dashes")})
    piazza_email = forms.EmailField(required=False,
                                    label=_("Piazza email"), max_length=75)

    class Meta:
        model = UserProfile
        fields = ('birth_year', 'gender', 'education', 'work', 'piazza_name', 'piazza_email', 'email_me')

########NEW FILE########
__FILENAME__ = models
from django.db import models

# Create your models here.

########NEW FILE########
__FILENAME__ = tests
"""
This file demonstrates writing tests using the unittest module. These will pass
when you run "manage.py test".

Replace this with more appropriate tests for your application.
"""

#from django.test import TestCase
#
#
#class SimpleTest(TestCase):
#    def test_basic_addition(self):
#        """
#        Tests that 1 + 1 always equals 2.
#        """
#        self.assertEqual(1 + 1, 2)


########NEW FILE########
__FILENAME__ = urls
from django.conf.urls import patterns, include, url
from django.conf.urls.defaults import *

#import django.contrib.auth.views

urlpatterns = patterns('',
    url(r'^$', 'accounts.views.index'),
    url(r'^register/$','accounts.views.register'),
    url(r'^login/$', 'django.contrib.auth.views.login', {'template_name':'accounts/login.html'}, name="login-form"),
    url(r'^profile/$', 'accounts.views.profile'),
)

########NEW FILE########
__FILENAME__ = views
import json
import random
import string
import urlparse
import os
import re

from django.conf import settings
from django.http import HttpResponse, HttpResponseRedirect
from django.core.urlresolvers import reverse
from django.template import Context, loader, RequestContext
from django.views.decorators.debug import sensitive_post_parameters
from django.views.decorators.cache import never_cache
from django.views.decorators.csrf import csrf_protect
from django.contrib.auth.forms import AuthenticationForm
from django.shortcuts import redirect, render_to_response
from django.contrib.auth import logout
from django.views.decorators.http import require_POST
from django.contrib.auth import login as auth_login, logout as auth_logout, authenticate as auth_authenticate
from django.contrib import messages
from django.contrib.auth.models import User
from c2g.models import Course, Institution, Video, CourseInstructor, CourseStudentScore
from accounts.forms import *
from registration import signals
from registration.login_wrapper import login as auth_login_view
from registration.forms import RegistrationFormUniqueEmail
from django.core.validators import validate_email, RegexValidator
from django.core.exceptions import ValidationError
from django.http import HttpResponseBadRequest
from c2g.util import upgrade_to_https_and_downgrade_upon_redirect
from django.db.models import Q
from pysimplesoap.client import SoapClient
from datetime import date


def index(request):
    return HttpResponse("Hello, world. You're at the user index.")

def profile(request):
    
    user = request.user
    group_list = user.groups.all()
    courses = Course.objects.filter(Q(student_group_id__in=group_list, mode='ready') | Q(instructor_group_id__in=group_list, mode='ready') | Q(tas_group_id__in=group_list, mode='ready') | Q(readonly_tas_group_id__in=group_list, mode='ready'))
    course_completions = {}
    score_dict = {}
    today = date.today()
    
    user_profile = None
    is_student_list = []
    certs_list = {}
    longest_certlist = 0
    if user.is_authenticated():
        user_profile = user.get_profile()
        is_student_list = user_profile.is_student_list(group_list, courses)

        for cert in user_profile.certificates.all():
            certinfo = (cert.type, cert.dl_link(user))
            if certs_list.has_key(cert.course_id):
                certs_list[cert.course_id].append(certinfo)
                this_certlist = len(certs_list[cert.course_id])
                if longest_certlist < this_certlist:
                    longest_certlist = this_certlist
            else:
                certs_list[cert.course_id] = [certinfo]
                if longest_certlist == 0: longest_certlist = 1
        
        for course in courses:
            if course.calendar_start != None and course.calendar_end != None and course.calendar_start != course.calendar_end:
                duration = course.calendar_end - course.calendar_start
                progress = min(today, course.calendar_end) - course.calendar_start
                course_completion = int((float(progress.days) / float(duration.days)) * 100)
                course_completions[course.id] = course_completion
                
                if course.calendar_end < date.today():
                    score_list = CourseStudentScore.objects.filter(
                        course=course,
                        student=user,
                    ).values_list('tag', 'score', 'total')
                    score_dict[course.id] = score_list

    has_webauth = False
    if user.is_authenticated() and (user_profile.institutions.filter(title='Stanford').exists()):
        has_webauth = True

    return render_to_response('accounts/profile.html',
                              {
                                  'request': request,
                                  'courses': courses,
                                  'course_completions': course_completions,
                                  'is_student_list': is_student_list,
                                  'has_webauth': has_webauth,
                                  'user_profile': user_profile,
                                  'certifications': certs_list,
                                  'today': today,
                                  'scores': score_dict,
                                  'longest_certs': range(longest_certlist),
                              },
                              context_instance=RequestContext(request))

def edit(request):
    uform = None
    pform = None
    if request.user.is_authenticated():
        uform = EditUserForm(instance=request.user)
        pform = EditProfileForm(instance=request.user.get_profile())
    
    has_webauth = False
    if request.user.is_authenticated() and (request.user.get_profile().institutions.filter(title='Stanford').exists()):
        has_webauth = True

    return render_to_response('accounts/edit.html', {'request':request, 'uform':uform, 'pform':pform, 'has_webauth': has_webauth,}, context_instance=RequestContext(request))

@csrf_protect
def save_edits(request):
    uform = EditUserForm(request.POST, instance=request.user)
    pform = EditProfileForm(request.POST, instance=request.user.get_profile())
    if uform.is_valid() and pform.is_valid():
        uform.save()
        pform.save()
        return HttpResponseRedirect(reverse('accounts.views.profile'))
    
    return render_to_response('accounts/edit.html', {'request':request, 'uform':uform, 'pform':pform}, context_instance=RequestContext(request))

@csrf_protect
@require_POST
def save_piazza_opts(request):
    email = request.POST.get('email')
    name = request.POST.get('name')
    str_id = request.POST.get('id')
    try:
        validate_email(email)
    except ValidationError:
        return HttpResponseBadRequest('You did not enter a valid email address.')
    try:
        regex = re.compile(r'^[\w -]+$', re.U)
        nameValidator = RegexValidator(regex=regex)
        nameValidator(name.strip())
    except ValidationError:
        return HttpResponseBadRequest('Names on Piazza should only contain letters, numbers, underscores, hyphens, and spaces.')
    try:
        int_id = int(str_id)
    except ValueError:
        return HttpResponseBadRequest('Not a integer id')
    try:
        user = User.objects.get(id=str_id)
    except User.DoesNotExist:
        return HttpResponseBadRequest('User not found')

    profile=user.get_profile()
    profile.piazza_name=name
    profile.piazza_email=email
    profile.save()
    return HttpResponse("Successfully Saved Piazza Options")


def logout(request):
    logout(request)
    return redirect('c2g.views.home')

@sensitive_post_parameters()
@csrf_protect
@never_cache
def register(request, template_name='accounts/register.html'):
    form=AuthenticationForm(request)
    t=loader.get_template(template_name)
    c=Context({
        'test': 'test',       
        'form': form,
    });
    return HttpResponse(t.render(c))

def impersonate(request,username):
    if not request.user.is_superuser:
        return HttpResponse('Permission denied')
    try:
        u1 = User.objects.get(username=username)
        u1.backend = 'django.contrib.auth.backends.ModelBackend'
    except User.DoesNotExist:
        return HttpResponse('User not found')
    auth_logout(request)
    auth_login(request,u1)
    return HttpResponse('You are now logged in as ' + username)

@never_cache
def default_preview_login(request, course_prefix, course_suffix):
    if settings.SITE_NAME_SHORT == "Stanford":
        return standard_preview_login(request, course_prefix, course_suffix)
    else:
        return ldap_preview_login(request, course_prefix, course_suffix)
    
@never_cache
def default_login(request):
 
    if request.method == 'GET':
        extra_context = {}
        context = RequestContext(request)
        for key, value in extra_context.items():
            context[key] = callable(value) and value() or value
        return render_to_response('registration/login.html',
                            {'form': AuthenticationForm, 'next': request.GET.get('next', '/')},
                            context_instance=context)
    else:
        if settings.SITE_NAME_SHORT == "Stanford":
            return auth_login_view(request)
        else:
            return ldap_login(request, '', '')


@never_cache
def shib_login(request):
    
    #check if there is valid remote user.
    #if one exists, try to match them
    #if one does not exist, create it and assign to proper institution
    #then redirect
    
    #setup the redirect first: code borrowed from django contrib library
    redir_to = request.GET.get('next', '/accounts/profile')
    netloc = urlparse.urlparse(redir_to)[1]
       
    # Heavier security check -- don't allow redirection to a different
    # host.
    if netloc and netloc != request.get_host():
        redir_to = '/accounts/profile'
                
    #Use EduPersonPrincipalName http://www.incommonfederation.org/attributesummary.html#eduPersonPrincipal
    #as username in our system.  We could support other persistent identifiers later, but it will take some
    #work
    if ('REMOTE_USER' in request.META) and ('eppn' in request.META) and (request.META['REMOTE_USER']==request.META['eppn']) and request.META['eppn']:
        
        #if we get here, the user has authenticated properly
        
        shib = {'givenName':'',
                'sn':'',
                'mail':'',
                'affiliation':'',
                'Shib-Identity-Provider':'',}
        
        shib.update(request.META)
        #Clean up first name, last name, and email address
        shib['sn'] = string.split(shib['sn'],";")[0]
        shib['givenName'] = string.split(shib['givenName'],";")[0]
        if not shib['mail']:
            shib['mail'] = shib['eppn']

        if not User.objects.filter(username=shib['REMOTE_USER']).exists():
            #here, we need to create the new user
            ALPHABET = "0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ"
            rg = random.SystemRandom(random.randint(0,100000))
            password = (''.join(rg.choice(ALPHABET) for i in range(16))) + '1' #create a random password, which they will never use
            User.objects.create_user(shib['REMOTE_USER'], shib['mail'], password)
            # authenticate() always has to be called before login(), and
            # will return the user we just created.
            new_user = auth_authenticate(username=shib['REMOTE_USER'], password=password)

            new_user.first_name, new_user.last_name = shib['givenName'].capitalize(), shib['sn'].capitalize()
            new_user.save()
                
            profile = new_user.get_profile()
            profile.site_data = shib['affiliation']
            
            if 'stanford.edu' in shib['affiliation']:
                profile.institutions.add(Institution.objects.get(title='Stanford'))
                profile.save()
        
            auth_login(request, new_user)

            signals.user_registered.send(sender=__file__,
                             user=new_user,
                             request=request)

        else:
            #User already exists, so log him/her in
            user = User.objects.get(username=shib['REMOTE_USER'])
            user.backend = 'django.contrib.auth.backends.ModelBackend'
            auth_login(request, user)

        #determine whether to clear any "you must log in" messages
        clear_msgs = False
        storage = messages.get_messages(request)
        for message in storage:
            if "You must be logged-in" in message.message:
                clear_msgs = True
        storage.used = clear_msgs

        messages.add_message(request,messages.SUCCESS, 'You have successfully logged in!')

    else:
        messages.add_message(request,messages.ERROR, 'WebAuth did not return your identity to us!  Please try logging in again.  If the problem continues please contact c2g-techsupport@class.stanford.edu')
        return HttpResponseRedirect(request.META['HTTP_REFERER'])

    return HttpResponseRedirect(redir_to) 

# login for public courses
# @jbau here (1/25/2013).  I've removed the call to this since it was buggy.
# Now default_login just uses django.contrib.auth.views.login
def standard_login(request):
    
    #setup the redirect first: code borrowed from django contrib library
    redir_to = request.GET.get('next', '/')
    netloc = urlparse.urlparse(redir_to)[1]
       
    # Heavier security check -- don't allow redirection to a different
    # host.
    if netloc and netloc != request.get_host():
        redir_to = '/'
            
    form = AuthenticationForm(data=request.POST)
    if form.is_valid():
        auth_login(request, form.get_user())
        return HttpResponseRedirect(redir_to)

    else:                
        messages.add_message(request,messages.ERROR, 'WebAuth did not return your identity to us!  Please try logging in again.  If the problem continues please contact c2g-techsupport@class.stanford.edu')
        extra_context = {}
        context = RequestContext(request)
        for key, value in extra_context.items():
            context[key] = callable(value) and value() or value
        layout = {'m': 800}
        
        return render_to_response('registration/login.html',
                              {'form': form, 'layout': json.dumps(layout)},
                              context_instance=context)

@upgrade_to_https_and_downgrade_upon_redirect
def standard_preview_login(request, course_prefix, course_suffix):
    
    # check if username exists to find out what type of user 
    # this ensures that we don't unecessarily do the ldap auth
    
    login_form = AuthenticationForm(data=request.POST)
    if login_form.is_valid():
        auth_login(request, login_form.get_user())
            
        if not request.common_page_data['course'].preview_only_mode and \
            date.today() >= request.common_page_data['course'].calendar_start :
            redirect_to = 'courses.views.main'
        else:
            redirect_to = 'courses.preview.views.preview'
   
        return redirect(reverse(redirect_to, args=[course_prefix, course_suffix]))
       
    else:
        form_class = RegistrationFormUniqueEmail
        form = form_class(initial={'course_prefix':course_prefix,'course_suffix':course_suffix})
        context = RequestContext(request)                
       
        try:
            video = Video.objects.getByCourse(course=request.common_page_data['course']).get(slug='intro')
        except Video.DoesNotExist:
            video = None
   
        course_instructors = CourseInstructor.objects.getByCourse(course=request.common_page_data['course'])
        
        instructors = []
    
        for ci in course_instructors:
            instructors.append(ci.instructor)
        
        # default template, unless there is one in the soruce tree, then use that
        template_name='previews/default.html'
        class_template='previews/'+request.common_page_data['course'].handle+'.html'
        dirs = getattr(settings,'TEMPLATE_DIRS', [])
        for dir in dirs:
            if os.path.isfile(dir+'/'+class_template):
                template_name=class_template
                
        
        return render_to_response(template_name,
                         {'form': form,
                          'login_form': login_form,
                          'video':video,
                          'instructors':instructors,
                          'common_page_data': request.common_page_data,
                          'course': request.common_page_data['course'],
                          'display_login': True},
                          context_instance=context)


def is_number(s):
    """
       Check if the string is likely to be a student/staff number
    :param s: username
    :return: True if numeric
    """
    try:
        float(s)
        return True
    except ValueError:
        return False

@never_cache
def ldap_login(request, course_prefix, course_suffix):
    
    #check if there is valid remote user.
    #if one exists, try to match them
    #if one does not exist, create it and assign to proper institution
    #then redirect

    #setup the redirect first: code borrowed from django contrib library
    redir_to = request.GET.get('next', '/')
    netloc = urlparse.urlparse(redir_to)[1]
       
    # Heavier security check -- don't allow redirection to a different
    # host.
    if netloc and netloc != request.get_host():
        redir_to = '/'
        
    
    # check if username exists to find out what type of user 
    # this ensures that we don't unecessarily do the ldap auth
    
    is_institution_logon = False
    user_exists = False
    
    username = request.POST['username']
    password = request.POST['password'] 
    
    user_exists = User.objects.filter(username=username).exists()
    
    if user_exists:
        user = User.objects.get(username=username)
        is_institution_logon = user.get_profile().site_data == "UWA"

    result = 'error'

   # Check if can be internal i.e. numeric
    if is_number(request.POST['username']):
        client = SoapClient(wsdl="https://www.socrates.uwa.edu.au/tisi/commonws.asmx?wsdl", trace=True)
        response = client.UserAuth(userName=request.POST['username'],password=request.POST['password'])
        result = response['UserAuthResult']
    
    if 'error' in result:
        ''' Now try and do regular auth
        '''
        form = AuthenticationForm(data=request.POST)
        if form.is_valid():
            auth_login(request, form.get_user())
            return HttpResponseRedirect(redir_to)

        else:                
            # messages.add_message(request,messages.ERROR, 'Error with Username or Password')
            extra_context = {}
            context = RequestContext(request)
            for key, value in extra_context.items():
                context[key] = callable(value) and value() or value
            layout = {'m': 800}

            return render_to_response('registration/login.html',
                       {'form': form, 'next': request.GET.get('next', '/')},
                         context_instance=context)
            #return render_to_response('registration/login.html',
            #                  {'form': form, 'layout': json.dumps(layout)},
            #                  context_instance=context)

    
    ldapUser = json.loads(result) 
 
    if not User.objects.filter(username=request.POST['username']).exists():
            #here, we need to create the new user
        ALPHABET = "0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ"
        rg = random.SystemRandom(random.randint(0,100000))
        password = (''.join(rg.choice(ALPHABET) for i in range(16))) + '1' #create a random password, which they will never use
        
        User.objects.create_user(username, ldapUser[0]['mail'], password)
        User.objects.create_user    
        # authenticate() always has to be called before login(), and
        # will return the user we just created.
        new_user = auth_authenticate(username=username, password=password)

        new_user.first_name, new_user.last_name = ldapUser[0]['givenname'].capitalize(), ldapUser[0]['sn'].capitalize()
        new_user.save()
        
        print new_user         
        profile = new_user.get_profile()
        profile.site_data = 'UWA'
            
        profile.institutions.add(Institution.objects.get(title='UWA'))
        profile.save()
        
        auth_login(request, new_user)

        signals.user_registered.send(sender=__file__,
                             user=new_user,
                             request=request)

        return HttpResponseRedirect(request.GET.get('next', '/accounts/profile'))
    
    else:
            #User already exists, so log him/her in
        user = User.objects.get(username=username)
        user.backend = 'django.contrib.auth.backends.ModelBackend'
        auth_login(request, user)
        messages.add_message(request,messages.SUCCESS, 'You have successfully logged in!')


    return HttpResponseRedirect(redir_to)


@never_cache
def ldap_preview_login(request, course_prefix, course_suffix):
    
    # check if username exists to find out what type of user 
    # this ensures that we don't unecessarily do the ldap auth
    
    is_institution_logon = False
    user_exists = False
    
    username = request.POST['username']
    password = request.POST['password'] 
    
    user_exists = User.objects.filter(username=username).exists()
    
    if user_exists:
        user = User.objects.get(username=username)
        is_institution_logon = user.get_profile().site_data == "UWA"

    result = 'error'

    if is_number(request.POST['username']):
        client = SoapClient(wsdl="https://www.socrates.uwa.edu.au/tisi/commonws.asmx?wsdl", trace=True)
        response = client.UserAuth(userName=request.POST['username'],password=request.POST['password'])
        result = response['UserAuthResult']
    
    if 'error' in result:
        ''' Now try and do regular auth
        '''
        login_form = AuthenticationForm(data=request.POST)
        if login_form.is_valid():
            auth_login(request, login_form.get_user())
            
            if not request.common_page_data['course'].preview_only_mode and \
                date.today() >= request.common_page_data['course'].calendar_start :
                redirect_to = 'courses.views.main'
            else:
                redirect_to = 'courses.preview.views.preview'
        
            return redirect(reverse(redirect_to, args=[course_prefix, course_suffix]))
            
        else:
            form_class = RegistrationFormUniqueEmail
            form = form_class(initial={'course_prefix':course_prefix,'course_suffix':course_suffix})
            context = RequestContext(request)                
            
            try:
                video = Video.objects.getByCourse(course=request.common_page_data['course']).get(slug='intro')
            except Video.DoesNotExist:
                video = None
        
            course_instructors = CourseInstructor.objects.getByCourse(course=request.common_page_data['course'])
            instructors = []
    
            for ci in course_instructors:
                instructors.append(ci.instructor)
            
            template_name='previews/default.html'

            return render_to_response(template_name,
                              {'form': form,
                               'login_form': login_form,
                               'video':video,
                               'instructors':instructors,
                               'common_page_data': request.common_page_data,
                               'course': request.common_page_data['course'],
                               'display_login': True},
                               context_instance=context)
            
 
    
    ldapUser = json.loads(result)
 
    if not User.objects.filter(username=request.POST['username']).exists():
            #here, we need to create the new user
        ALPHABET = "0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ"
        rg = random.SystemRandom(random.randint(0,100000))
        password = (''.join(rg.choice(ALPHABET) for i in range(16))) + '1' #create a random password, which they will never use
        
        User.objects.create_user(username, ldapUser[0]['mail'], password)
        User.objects.create_user    
        # authenticate() always has to be called before login(), and
        # will return the user we just created.
        new_user = auth_authenticate(username=username, password=password)

        new_user.first_name, new_user.last_name = ldapUser[0]['givenname'].capitalize(), ldapUser[0]['sn'].capitalize()
        new_user.save()
        
        print new_user         
        profile = new_user.get_profile()
        profile.site_data = 'UWA'
            
        profile.institutions.add(Institution.objects.get(title='UWA'))
        profile.save()
        
        auth_login(request, new_user)

        signals.user_registered.send(sender=__file__,
                             user=new_user,
                             request=request)

#        return HttpResponseRedirect(request.GET.get('next', '/accounts/profile'))
    
    else:
            #User already exists, so log him/her in
        user = User.objects.get(username=username)
        user.backend = 'django.contrib.auth.backends.ModelBackend'
        auth_login(request, user)
#        messages.add_message(request,messages.SUCCESS, 'You have successfully logged in!')


    if not request.common_page_data['course'].preview_only_mode and \
                date.today() >= request.common_page_data['course'].calendar_start :
        redirect_to = 'courses.views.main'
    else:
        redirect_to = 'courses.preview.views.preview'
        
    return redirect(reverse(redirect_to, args=[course_prefix, course_suffix]))


########NEW FILE########
__FILENAME__ = admin
#import reversion
from django.contrib import admin
from c2g.models import *
from django.contrib.auth.models import Group

admin.site.register(Institution)
admin.site.register(Course)
admin.site.register(Video)
admin.site.register(AdditionalPage)
admin.site.register(Announcement)
admin.site.register(ProblemSet)
admin.site.register(EmailAddr)
admin.site.register(ContentSection)
admin.site.register(File)
admin.site.register(ProblemSetToExercise)
admin.site.register(Exercise)
admin.site.register(VideoToExercise)
admin.site.register(Exam)
admin.site.register(CurrentTermMap)
admin.site.register(Instructor)
admin.site.register(CourseInstructor)
admin.site.register(ContentGroup)
admin.site.register(CourseCertificate)
admin.site.register(CourseStudentList)


class ProfileAdmin(admin.ModelAdmin):
    list_display = ('user', 'gender', 'birth_year', 'education', 'work', 'client_ip_first', 'user_agent_first', 'referrer_first', 'accept_language_first')
    readonly_fields = ('user',)
    search_fields = ('user__username',)

class GroupProxy(Group):
    class Meta:
        proxy = True

class ExamRecordAdmin(admin.ModelAdmin):
    list_display = ('__unicode__','time_created','mode')
    readonly_fields = ('course','exam','student')
    #fields=['json_data']
    
    def mode(self, obj):
        return obj.course.mode

class ExamRecordScoreAdmin(admin.ModelAdmin):
    readonly_fields = ('record',)

class ExamRecordScoreFieldAdmin(admin.ModelAdmin):
    readonly_fields = ('parent',)

class ExamRecordScoreFieldChoiceAdmin(admin.ModelAdmin):
    readonly_fields = ('parent',)


class GroupAdmin(admin.ModelAdmin):
    list_display = ('name', 'count')
    def count(self, obj):
        return obj.user_set.count()

class MailingListAdmin(admin.ModelAdmin):
    readonly_fields = ('members',)

class ListEmailAdmin(admin.ModelAdmin):
    readonly_fields = ('sender',)

class CourseEmailAdmin(admin.ModelAdmin):
    readonly_fields = ('sender',)

class StudentExamStartAdmin(admin.ModelAdmin):
    search_fields = ('student__username',)
    list_display = ('__unicode__', 'time_created','last_updated')
    readonly_fields = ('student','exam')


#class ExamAdmin(reversion.VersionAdmin):
#    pass


#admin.site.register(Exam, ExamAdmin)

admin.site.register(StudentExamStart, StudentExamStartAdmin)
admin.site.register(UserProfile, ProfileAdmin)
admin.site.register(GroupProxy, GroupAdmin)
admin.site.register(ExamRecord, ExamRecordAdmin)
admin.site.register(ExamRecordScore, ExamRecordScoreAdmin)
admin.site.register(ExamRecordScoreField, ExamRecordScoreFieldAdmin)
admin.site.register(ExamRecordScoreFieldChoice, ExamRecordScoreFieldChoiceAdmin)
admin.site.register(MailingList, MailingListAdmin)
admin.site.register(ListEmail, CourseEmailAdmin)
admin.site.register(CourseEmail, ListEmailAdmin)

########NEW FILE########
__FILENAME__ = page_factory
from django.contrib.sites.models import Siteimport jsonimport settingsSITE_URL = Site.objects.get_current().domainSTATIC_URL = settings.STATIC_URLtry:    basestring    import stringexcept:    # python 3    basestring = str    string = str        def GenPageHTML(head, body_arg):    head = GenHead(head)        body = GenBody(body_arg['topbar'], body_arg['content'])    html = {'tag': 'html', 'content': [head, body]};    return "<!DOCTYPE HTML>"+GenTagHTML(html);    #return 'ABC'def GenHead(head_arg):    # Sanitize input    if not('title' in head_arg):        head_arg['title'] = 'Class2Go'    if not('meta' in head_arg):        head_arg['meta'] = {}    if not('script_inline' in head_arg):        head_arg['script_inline'] = ''    if not('script_srcs' in head_arg):        head_arg['script_srcs'] = {}        head = {'tag': 'head', 'content': []}        # Title    head['content'].append({'tag': 'title', 'content': head_arg['title']})        # Metatags    for k,c in head_arg['meta'].iteritems():        head['content'].append({'tag': 'meta', 'attributes': {'name': k, 'content': c}, 'single': True})        # CSS links. Stylesheets that go on every page are appended by this module. No need to supply them from outside    head_arg['css'].append(STATIC_URL + 'css/core/body.css')    head_arg['css'].append(STATIC_URL + 'css/core/buttons.css')    head_arg['css'].append(STATIC_URL + 'css/core/layout.css')    head_arg['css'].append(STATIC_URL + 'css/core/topbar.css')    head_arg['css'].append(STATIC_URL + 'css/core/loginreg.css')        for css_path in head_arg['css']:        head['content'].append({'tag': 'link', 'attributes': {'rel': 'stylesheet', 'type': 'text/css', 'href': css_path}, 'single': True})        # JS sources. Sources that go on every page are appended by this module. No need to supply them from outside    head_arg['script_srcs'].append('http://ajax.googleapis.com/ajax/libs/jquery/1.7.2/jquery.min.js')    head_arg['script_srcs'].append(STATIC_URL + 'js/core/resize.js')        for js_path in head_arg['script_srcs']:        head['content'].append({'tag': 'script', 'attributes': {'type': 'text/javascript', 'src': js_path}})        # Inline JS        if len(head_arg['script_inline']) > 0:        head['content'].append({'tag': 'script', 'content': head_arg['script_inline']})        return head        def GenBody(topbar, content):        body = {'tag': 'body', 'content': [{'tag': 'div', 'attributes': {'id': 'viewport'}, 'content': []}]}    viewport = body['content'][0]        # Topbar    viewport['content'].append(topbar)        # Content    if 'l' in content:        try:            viewport['content'].append({'tag': 'div', 'attributes': {'id': 'c2g_layout_l_column'}, 'content': content['l']['content']})        except KeyError:            return {'tag': 'body', 'content': 'A missing key was detected in left-column content dict. Please verify that the left column content dict specifies content and width keys'}        try:        viewport['content'].append({'tag': 'div', 'attributes': {'id': 'c2g_layout_m_column'}, 'content': content['m']['content']})    except KeyError:            return {'tag': 'body', 'content': 'A missing key was detected in middle-column content dict. Please verify that the middle column content dict specifies content and width keys'}                            if 'r' in content:        try:            viewport['content'].append({'tag': 'div', 'attributes': {'id': 'c2g_layout_r_column'}, 'content': content['r']['content']})        except KeyError:            return {'tag': 'body', 'content': 'A missing key was detected in right-column content dict. Please verify that the right column content dict specifies content and width keys'}        # Login/Reg form    # @todo: Show this only if logged-out    loginreg_canvas = {'tag': 'div', 'attributes': {'id': 'loginreg_canvas'}, 'content':[]}    loginreg_background = {'tag': 'div', 'attributes': {'id': 'loginreg_background', 'onclick': "$('#loginreg_canvas').hide()"}, 'content':[]}    loginreg_container = {'tag': 'div', 'attributes': {'id': 'loginreg_container'}, 'content':[]}    loginreg_canvas['content'].extend([loginreg_background,loginreg_container])        login_container = {'tag': 'div', 'attributes': {'id': 'login_container'}, 'content':[]}    reg_container = {'tag': 'div', 'attributes': {'id': 'reg_container'}, 'content':[]}    loginreg_separator = {'tag': 'div', 'attributes': {'id': 'loginreg_separator'}, 'content':[]}        loginreg_container['content'].extend([reg_container,loginreg_separator,login_container])        reg_form_content = """    <h2 style='color:#800000;'>Registration</h2>    <table>        <tr>            <td><label for='reg_first_name'>First name:</label></td>            <td><input name='first_name' id='reg_first_name' style='width:180px;'></td>        </tr>        <tr>            <td><label for='reg_last_name'>Last name:</label></td>            <td><input name='last_name' id='reg_last_name' style='width:180px;'></td>        </tr>        <tr>            <td><label for='reg_email'>Email:</label></td>            <td><input name='email' id='reg_email' style='width:180px;'></td>        </tr>        <tr>            <td><label for='reg_username'>Username:</label></td>            <td><input name='username' id='reg_username' style='width:180px;'></td>        </tr>        <tr>            <td><label for='reg_password'>Password:</label></td>            <td><input type='password' name='password' id='reg_password' style='width:180px;'></td>        </tr>        <tr>            <td><label for='reg_password2'>Re-enter password:</label></td>            <td><input type='password' id='reg_password2' style='width:180px;'></td>        </tr>    </table>    <input type='submit' class='cw_button' value='Register' style='margin: 10px; float: right;'/>    """    reg_container['content'].append({'tag': 'form', 'attributes': {'action': SITE_URL + 'accounts/', 'method': 'PUT'}, 'content': reg_form_content})        login_form_content = """    <h2 style='color:#800000;'>Login</h2>    <table>        <tr>            <td><label for='login_username'>Username:</label></td>            <td><input name='username' id='login_username' style='width:180px;'></td>        </tr>        <tr>            <td><label for='login_password'>Password:</label></td>            <td><input type='password' name='password' id='login_password' style='width:180px;'></td>        </tr>    </table>    <input type='submit' class='cw_button' value='Login' style='margin: 10px; float: right;'/>    """    login_container['content'].append({'tag': 'form', 'attributes': {'action': SITE_URL + 'accounts/login/', 'method': 'POST'}, 'content': login_form_content})            viewport['content'].append(loginreg_canvas)        # Make the layout div widths available to JS    widths = {}    if 'width' in content['m']:        widths['m'] = content['m']['width']    if 'min-width' in content['m']:        widths['m_min'] = content['m']['min-width']    if 'max-width' in content['m']:        widths['m_max'] = content['m']['max-width']    if 'l' in content:        widths['l'] = content['l']['width']    if 'r' in content:        widths['r'] = content['r']['width']        body['content'].append({'tag': 'script', 'attributes': {'type': 'text/javascript'}, 'content': ('layout_widths = %s;' % json.dumps(widths))+'resize_page_contents();'})        return body            def GenTagHTML(tag_dict):    """ Takes a dict specifying a tag and its attributes and inner content (which may be a list of tag dicts) and produces the corresponding markup"""        """        tag_dict keys:        tag: The name of the tag        attributes: A dictionary of attributes. Attributes without values may be passed in as attributes with a value of None        content: A string or a list of tag_dicts        single: Optional and defaults to false. If true, the tag is closed like <..... />    """        if not('tag' in tag_dict):        return ''        out = "<%s" % tag_dict['tag']        if ('attributes' in tag_dict) and (tag_dict['attributes'] is not None):        for key, value in tag_dict['attributes'].iteritems():            if value is not None:               # when value is None that means stuff like <... checked>                out = "%s %s=\"%s\"" % ( out, key, value  )            else:                out = "%s %s" % ( out, key )        if ('content' in tag_dict) and (tag_dict['content'] is not None):        if type(tag_dict['content']) is list:            inner_content_string = ''            for i in tag_dict['content']:                inner_content_string += GenTagHTML(i)                            out = "%s>%s</%s>" % ( out, inner_content_string, tag_dict['tag'] )        elif type(tag_dict['content']) is dict:            out = "%s>%s</%s>" % ( out, GenTagHTML(tag_dict['content']), tag_dict['tag'] )        else:            out = "%s>%s</%s>" % ( out, tag_dict['content'], tag_dict['tag'] )    else:        if ('single' in tag_dict) and (tag_dict['single']):            out = "%s />" % out        else:            out = "%s></%s>" % (out, tag_dict['tag'])        return out
########NEW FILE########
__FILENAME__ = 0001_initial
# -*- coding: utf-8 -*-
import datetime
from south.db import db
from south.v2 import SchemaMigration
from django.db import models


class Migration(SchemaMigration):

    def forwards(self, orm):
        # Adding model 'Institution'
        db.create_table(u'c2g_institutions', (
            ('id', self.gf('django.db.models.fields.AutoField')(primary_key=True)),
            ('time_created', self.gf('django.db.models.fields.DateTimeField')(auto_now_add=True, blank=True)),
            ('last_updated', self.gf('django.db.models.fields.DateTimeField')(auto_now=True, auto_now_add=True, blank=True)),
            ('title', self.gf('django.db.models.fields.TextField')()),
            ('country', self.gf('django.db.models.fields.TextField')(blank=True)),
            ('city', self.gf('django.db.models.fields.TextField')(blank=True)),
            ('domains', self.gf('django.db.models.fields.TextField')(blank=True)),
        ))
        db.send_create_signal('c2g', ['Institution'])

        # Adding model 'Course'
        db.create_table(u'c2g_courses', (
            ('id', self.gf('django.db.models.fields.AutoField')(primary_key=True)),
            ('time_created', self.gf('django.db.models.fields.DateTimeField')(auto_now_add=True, blank=True)),
            ('last_updated', self.gf('django.db.models.fields.DateTimeField')(auto_now=True, auto_now_add=True, blank=True)),
            ('mode', self.gf('django.db.models.fields.TextField')(blank=True)),
            ('image', self.gf('django.db.models.fields.related.ForeignKey')(blank=True, related_name='+', null=True, to=orm['c2g.Course'])),
            ('live_datetime', self.gf('django.db.models.fields.DateTimeField')(null=True, blank=True)),
            ('is_deleted', self.gf('django.db.models.fields.IntegerField')(default=0)),
            ('institution', self.gf('django.db.models.fields.related.ForeignKey')(to=orm['c2g.Institution'], null=True)),
            ('student_group', self.gf('django.db.models.fields.related.ForeignKey')(related_name='student_group', to=orm['auth.Group'])),
            ('instructor_group', self.gf('django.db.models.fields.related.ForeignKey')(related_name='instructor_group', to=orm['auth.Group'])),
            ('tas_group', self.gf('django.db.models.fields.related.ForeignKey')(related_name='tas_group', to=orm['auth.Group'])),
            ('readonly_tas_group', self.gf('django.db.models.fields.related.ForeignKey')(related_name='readonly_tas_group', to=orm['auth.Group'])),
            ('title', self.gf('django.db.models.fields.CharField')(max_length=255, null=True, blank=True)),
            ('description', self.gf('django.db.models.fields.TextField')(blank=True)),
            ('syllabus', self.gf('django.db.models.fields.TextField')(blank=True)),
            ('term', self.gf('django.db.models.fields.TextField')(blank=True)),
            ('year', self.gf('django.db.models.fields.IntegerField')(null=True, blank=True)),
            ('calendar_start', self.gf('django.db.models.fields.DateField')(null=True, blank=True)),
            ('calendar_end', self.gf('django.db.models.fields.DateField')(null=True, blank=True)),
            ('contact', self.gf('django.db.models.fields.CharField')(max_length=255, null=True, blank=True)),
            ('list_publicly', self.gf('django.db.models.fields.IntegerField')(null=True, blank=True)),
            ('handle', self.gf('django.db.models.fields.CharField')(max_length=255, null=True, db_index=True)),
            ('preview_only_mode', self.gf('django.db.models.fields.BooleanField')(default=True)),
            ('institution_only', self.gf('django.db.models.fields.BooleanField')(default=False)),
            ('piazza_id', self.gf('django.db.models.fields.IntegerField')(null=True, blank=True)),
        ))
        db.send_create_signal('c2g', ['Course'])

        # Adding M2M table for field share_to on 'Course'
        db.create_table(u'c2g_courses_share_to', (
            ('id', models.AutoField(verbose_name='ID', primary_key=True, auto_created=True)),
            ('from_course', models.ForeignKey(orm['c2g.course'], null=False)),
            ('to_course', models.ForeignKey(orm['c2g.course'], null=False))
        ))
        db.create_unique(u'c2g_courses_share_to', ['from_course_id', 'to_course_id'])

        # Adding model 'ContentSection'
        db.create_table(u'c2g_content_sections', (
            ('id', self.gf('django.db.models.fields.AutoField')(primary_key=True)),
            ('time_created', self.gf('django.db.models.fields.DateTimeField')(auto_now_add=True, blank=True)),
            ('last_updated', self.gf('django.db.models.fields.DateTimeField')(auto_now=True, auto_now_add=True, blank=True)),
            ('mode', self.gf('django.db.models.fields.TextField')(blank=True)),
            ('image', self.gf('django.db.models.fields.related.ForeignKey')(blank=True, related_name='+', null=True, to=orm['c2g.ContentSection'])),
            ('live_datetime', self.gf('django.db.models.fields.DateTimeField')(null=True, blank=True)),
            ('index', self.gf('django.db.models.fields.IntegerField')(null=True, blank=True)),
            ('is_deleted', self.gf('django.db.models.fields.IntegerField')(default=0)),
            ('course', self.gf('django.db.models.fields.related.ForeignKey')(to=orm['c2g.Course'])),
            ('title', self.gf('django.db.models.fields.CharField')(max_length=255, null=True, blank=True)),
            ('subtitle', self.gf('django.db.models.fields.CharField')(max_length=255, null=True, blank=True)),
            ('slug', self.gf('django.db.models.fields.SlugField')(max_length=255, null=True, blank=True)),
        ))
        db.send_create_signal('c2g', ['ContentSection'])

        # Adding model 'AdditionalPage'
        db.create_table(u'c2g_additional_pages', (
            ('id', self.gf('django.db.models.fields.AutoField')(primary_key=True)),
            ('time_created', self.gf('django.db.models.fields.DateTimeField')(auto_now_add=True, blank=True)),
            ('last_updated', self.gf('django.db.models.fields.DateTimeField')(auto_now=True, auto_now_add=True, blank=True)),
            ('mode', self.gf('django.db.models.fields.TextField')(blank=True)),
            ('image', self.gf('django.db.models.fields.related.ForeignKey')(blank=True, related_name='+', null=True, to=orm['c2g.AdditionalPage'])),
            ('live_datetime', self.gf('django.db.models.fields.DateTimeField')(null=True, blank=True)),
            ('index', self.gf('django.db.models.fields.IntegerField')(null=True, blank=True)),
            ('is_deleted', self.gf('django.db.models.fields.IntegerField')(default=0)),
            ('course', self.gf('django.db.models.fields.related.ForeignKey')(to=orm['c2g.Course'])),
            ('menu_slug', self.gf('django.db.models.fields.SlugField')(max_length=255, null=True, blank=True)),
            ('section', self.gf('django.db.models.fields.related.ForeignKey')(to=orm['c2g.ContentSection'], null=True)),
            ('title', self.gf('django.db.models.fields.CharField')(max_length=255, null=True, blank=True)),
            ('description', self.gf('django.db.models.fields.TextField')(blank=True)),
            ('slug', self.gf('django.db.models.fields.SlugField')(max_length=255, null=True, blank=True)),
        ))
        db.send_create_signal('c2g', ['AdditionalPage'])

        # Adding model 'File'
        db.create_table(u'c2g_files', (
            ('id', self.gf('django.db.models.fields.AutoField')(primary_key=True)),
            ('time_created', self.gf('django.db.models.fields.DateTimeField')(auto_now_add=True, blank=True)),
            ('last_updated', self.gf('django.db.models.fields.DateTimeField')(auto_now=True, auto_now_add=True, blank=True)),
            ('mode', self.gf('django.db.models.fields.TextField')(blank=True)),
            ('image', self.gf('django.db.models.fields.related.ForeignKey')(blank=True, related_name='+', null=True, to=orm['c2g.File'])),
            ('live_datetime', self.gf('django.db.models.fields.DateTimeField')(null=True, blank=True)),
            ('index', self.gf('django.db.models.fields.IntegerField')(null=True, blank=True)),
            ('is_deleted', self.gf('django.db.models.fields.IntegerField')(default=0)),
            ('course', self.gf('django.db.models.fields.related.ForeignKey')(to=orm['c2g.Course'])),
            ('section', self.gf('django.db.models.fields.related.ForeignKey')(to=orm['c2g.ContentSection'], null=True)),
            ('title', self.gf('django.db.models.fields.CharField')(max_length=255, null=True, blank=True)),
            ('file', self.gf('django.db.models.fields.files.FileField')(max_length=100)),
            ('handle', self.gf('django.db.models.fields.CharField')(max_length=255, null=True, db_index=True)),
        ))
        db.send_create_signal('c2g', ['File'])

        # Adding model 'Announcement'
        db.create_table(u'c2g_announcements', (
            ('id', self.gf('django.db.models.fields.AutoField')(primary_key=True)),
            ('time_created', self.gf('django.db.models.fields.DateTimeField')(auto_now_add=True, blank=True)),
            ('last_updated', self.gf('django.db.models.fields.DateTimeField')(auto_now=True, auto_now_add=True, blank=True)),
            ('mode', self.gf('django.db.models.fields.TextField')(blank=True)),
            ('image', self.gf('django.db.models.fields.related.ForeignKey')(blank=True, related_name='+', null=True, to=orm['c2g.Announcement'])),
            ('live_datetime', self.gf('django.db.models.fields.DateTimeField')(null=True, blank=True)),
            ('index', self.gf('django.db.models.fields.IntegerField')(null=True, blank=True)),
            ('is_deleted', self.gf('django.db.models.fields.IntegerField')(default=0)),
            ('owner', self.gf('django.db.models.fields.related.ForeignKey')(to=orm['auth.User'])),
            ('course', self.gf('django.db.models.fields.related.ForeignKey')(to=orm['c2g.Course'])),
            ('title', self.gf('django.db.models.fields.CharField')(max_length=255, null=True, blank=True)),
            ('description', self.gf('django.db.models.fields.TextField')(blank=True)),
        ))
        db.send_create_signal('c2g', ['Announcement'])

        # Adding model 'StudentSection'
        db.create_table(u'c2g_sections', (
            ('id', self.gf('django.db.models.fields.AutoField')(primary_key=True)),
            ('time_created', self.gf('django.db.models.fields.DateTimeField')(auto_now_add=True, blank=True)),
            ('last_updated', self.gf('django.db.models.fields.DateTimeField')(auto_now=True, auto_now_add=True, blank=True)),
            ('is_deleted', self.gf('django.db.models.fields.IntegerField')(default=0)),
            ('course', self.gf('django.db.models.fields.related.ForeignKey')(to=orm['c2g.Course'])),
            ('title', self.gf('django.db.models.fields.CharField')(max_length=255, null=True, blank=True)),
            ('capacity', self.gf('django.db.models.fields.IntegerField')(default=999)),
        ))
        db.send_create_signal('c2g', ['StudentSection'])

        # Adding M2M table for field members on 'StudentSection'
        db.create_table(u'c2g_sections_members', (
            ('id', models.AutoField(verbose_name='ID', primary_key=True, auto_created=True)),
            ('studentsection', models.ForeignKey(orm['c2g.studentsection'], null=False)),
            ('user', models.ForeignKey(orm['auth.user'], null=False))
        ))
        db.create_unique(u'c2g_sections_members', ['studentsection_id', 'user_id'])

        # Adding model 'UserProfile'
        db.create_table(u'c2g_user_profiles', (
            ('id', self.gf('django.db.models.fields.AutoField')(primary_key=True)),
            ('time_created', self.gf('django.db.models.fields.DateTimeField')(auto_now_add=True, blank=True)),
            ('last_updated', self.gf('django.db.models.fields.DateTimeField')(auto_now=True, auto_now_add=True, blank=True)),
            ('user', self.gf('django.db.models.fields.related.OneToOneField')(to=orm['auth.User'], unique=True)),
            ('site_data', self.gf('django.db.models.fields.TextField')(blank=True)),
            ('gender', self.gf('django.db.models.fields.CharField')(max_length=64, null=True)),
            ('birth_year', self.gf('django.db.models.fields.CharField')(max_length=64, null=True)),
            ('education', self.gf('django.db.models.fields.CharField')(max_length=64, null=True)),
            ('work', self.gf('django.db.models.fields.CharField')(max_length=128, null=True)),
            ('piazza_email', self.gf('django.db.models.fields.CharField')(max_length=128, blank=True)),
            ('piazza_name', self.gf('django.db.models.fields.CharField')(max_length=128, blank=True)),
            ('email_me', self.gf('django.db.models.fields.BooleanField')(default=True)),
            ('client_ip', self.gf('django.db.models.fields.CharField')(max_length=30, null=True)),
            ('user_agent', self.gf('django.db.models.fields.CharField')(max_length=256, null=True)),
            ('referrer', self.gf('django.db.models.fields.CharField')(max_length=256, null=True)),
            ('accept_language', self.gf('django.db.models.fields.CharField')(max_length=64, null=True)),
            ('client_ip_first', self.gf('django.db.models.fields.CharField')(max_length=30, null=True)),
            ('user_agent_first', self.gf('django.db.models.fields.CharField')(max_length=256, null=True)),
            ('referrer_first', self.gf('django.db.models.fields.CharField')(max_length=256, null=True)),
            ('accept_language_first', self.gf('django.db.models.fields.CharField')(max_length=64, null=True)),
        ))
        db.send_create_signal('c2g', ['UserProfile'])

        # Adding M2M table for field institutions on 'UserProfile'
        db.create_table(u'c2g_user_profiles_institutions', (
            ('id', models.AutoField(verbose_name='ID', primary_key=True, auto_created=True)),
            ('userprofile', models.ForeignKey(orm['c2g.userprofile'], null=False)),
            ('institution', models.ForeignKey(orm['c2g.institution'], null=False))
        ))
        db.create_unique(u'c2g_user_profiles_institutions', ['userprofile_id', 'institution_id'])

        # Adding model 'Video'
        db.create_table(u'c2g_videos', (
            ('id', self.gf('django.db.models.fields.AutoField')(primary_key=True)),
            ('time_created', self.gf('django.db.models.fields.DateTimeField')(auto_now_add=True, blank=True)),
            ('last_updated', self.gf('django.db.models.fields.DateTimeField')(auto_now=True, auto_now_add=True, blank=True)),
            ('mode', self.gf('django.db.models.fields.TextField')(blank=True)),
            ('image', self.gf('django.db.models.fields.related.ForeignKey')(blank=True, related_name='+', null=True, to=orm['c2g.Video'])),
            ('live_datetime', self.gf('django.db.models.fields.DateTimeField')(null=True, blank=True)),
            ('index', self.gf('django.db.models.fields.IntegerField')(null=True, blank=True)),
            ('is_deleted', self.gf('django.db.models.fields.IntegerField')(default=0)),
            ('course', self.gf('django.db.models.fields.related.ForeignKey')(to=orm['c2g.Course'])),
            ('section', self.gf('django.db.models.fields.related.ForeignKey')(to=orm['c2g.ContentSection'], null=True)),
            ('exam', self.gf('django.db.models.fields.related.ForeignKey')(to=orm['c2g.Exam'], null=True, blank=True)),
            ('title', self.gf('django.db.models.fields.CharField')(max_length=255, null=True, blank=True)),
            ('description', self.gf('django.db.models.fields.TextField')(blank=True)),
            ('type', self.gf('django.db.models.fields.CharField')(default='youtube', max_length=30)),
            ('url', self.gf('django.db.models.fields.CharField')(max_length=255, null=True, blank=True)),
            ('duration', self.gf('django.db.models.fields.IntegerField')(null=True, blank=True)),
            ('slug', self.gf('django.db.models.fields.SlugField')(max_length=255, null=True)),
            ('file', self.gf('django.db.models.fields.files.FileField')(max_length=100)),
            ('handle', self.gf('django.db.models.fields.CharField')(max_length=255, null=True, db_index=True)),
        ))
        db.send_create_signal('c2g', ['Video'])

        # Adding model 'VideoViewTraces'
        db.create_table(u'c2g_video_view_traces', (
            ('id', self.gf('django.db.models.fields.AutoField')(primary_key=True)),
            ('time_created', self.gf('django.db.models.fields.DateTimeField')(auto_now_add=True, blank=True)),
            ('last_updated', self.gf('django.db.models.fields.DateTimeField')(auto_now=True, auto_now_add=True, blank=True)),
            ('course', self.gf('django.db.models.fields.related.ForeignKey')(to=orm['c2g.Course'])),
            ('video', self.gf('django.db.models.fields.related.ForeignKey')(to=orm['c2g.Video'])),
            ('user', self.gf('django.db.models.fields.related.ForeignKey')(to=orm['auth.User'])),
            ('trace', self.gf('django.db.models.fields.TextField')(blank=True)),
        ))
        db.send_create_signal('c2g', ['VideoViewTraces'])

        # Adding model 'VideoActivity'
        db.create_table(u'c2g_video_activity', (
            ('id', self.gf('django.db.models.fields.AutoField')(primary_key=True)),
            ('student', self.gf('django.db.models.fields.related.ForeignKey')(to=orm['auth.User'])),
            ('course', self.gf('django.db.models.fields.related.ForeignKey')(to=orm['c2g.Course'])),
            ('video', self.gf('django.db.models.fields.related.ForeignKey')(to=orm['c2g.Video'])),
            ('start_seconds', self.gf('django.db.models.fields.IntegerField')(default=0, blank=True)),
            ('max_end_seconds', self.gf('django.db.models.fields.IntegerField')(default=0, blank=True)),
        ))
        db.send_create_signal('c2g', ['VideoActivity'])

        # Adding model 'VideoDownload'
        db.create_table(u'c2g_video_download', (
            ('id', self.gf('django.db.models.fields.AutoField')(primary_key=True)),
            ('student', self.gf('django.db.models.fields.related.ForeignKey')(to=orm['auth.User'])),
            ('course', self.gf('django.db.models.fields.related.ForeignKey')(to=orm['c2g.Course'])),
            ('video', self.gf('django.db.models.fields.related.ForeignKey')(to=orm['c2g.Video'])),
            ('download_date', self.gf('django.db.models.fields.DateTimeField')(auto_now_add=True, blank=True)),
            ('format', self.gf('django.db.models.fields.CharField')(max_length=35, null=True, blank=True)),
        ))
        db.send_create_signal('c2g', ['VideoDownload'])

        # Adding model 'ProblemSet'
        db.create_table(u'c2g_problem_sets', (
            ('id', self.gf('django.db.models.fields.AutoField')(primary_key=True)),
            ('time_created', self.gf('django.db.models.fields.DateTimeField')(auto_now_add=True, blank=True)),
            ('last_updated', self.gf('django.db.models.fields.DateTimeField')(auto_now=True, auto_now_add=True, blank=True)),
            ('mode', self.gf('django.db.models.fields.TextField')(blank=True)),
            ('image', self.gf('django.db.models.fields.related.ForeignKey')(blank=True, related_name='+', null=True, to=orm['c2g.ProblemSet'])),
            ('live_datetime', self.gf('django.db.models.fields.DateTimeField')(null=True, blank=True)),
            ('index', self.gf('django.db.models.fields.IntegerField')(null=True, blank=True)),
            ('is_deleted', self.gf('django.db.models.fields.IntegerField')(default=0)),
            ('course', self.gf('django.db.models.fields.related.ForeignKey')(to=orm['c2g.Course'])),
            ('section', self.gf('django.db.models.fields.related.ForeignKey')(to=orm['c2g.ContentSection'])),
            ('slug', self.gf('django.db.models.fields.SlugField')(max_length=50)),
            ('title', self.gf('django.db.models.fields.CharField')(max_length=255)),
            ('description', self.gf('django.db.models.fields.TextField')(blank=True)),
            ('path', self.gf('django.db.models.fields.CharField')(max_length=255)),
            ('due_date', self.gf('django.db.models.fields.DateTimeField')(null=True)),
            ('grace_period', self.gf('django.db.models.fields.DateTimeField')()),
            ('partial_credit_deadline', self.gf('django.db.models.fields.DateTimeField')()),
            ('assessment_type', self.gf('django.db.models.fields.CharField')(max_length=255)),
            ('late_penalty', self.gf('django.db.models.fields.IntegerField')()),
            ('submissions_permitted', self.gf('django.db.models.fields.IntegerField')()),
            ('resubmission_penalty', self.gf('django.db.models.fields.IntegerField')()),
            ('randomize', self.gf('django.db.models.fields.BooleanField')(default=False)),
        ))
        db.send_create_signal('c2g', ['ProblemSet'])

        # Adding model 'Exercise'
        db.create_table(u'c2g_exercises', (
            ('id', self.gf('django.db.models.fields.AutoField')(primary_key=True)),
            ('time_created', self.gf('django.db.models.fields.DateTimeField')(auto_now_add=True, blank=True)),
            ('last_updated', self.gf('django.db.models.fields.DateTimeField')(auto_now=True, auto_now_add=True, blank=True)),
            ('is_deleted', self.gf('django.db.models.fields.IntegerField')(default=0)),
            ('fileName', self.gf('django.db.models.fields.CharField')(max_length=255)),
            ('file', self.gf('django.db.models.fields.files.FileField')(max_length=100, null=True)),
            ('handle', self.gf('django.db.models.fields.CharField')(max_length=255, null=True, db_index=True)),
        ))
        db.send_create_signal('c2g', ['Exercise'])

        # Adding model 'ProblemSetToExercise'
        db.create_table(u'c2g_problemset_to_exercise', (
            ('id', self.gf('django.db.models.fields.AutoField')(primary_key=True)),
            ('is_deleted', self.gf('django.db.models.fields.IntegerField')(default=0)),
            ('problemSet', self.gf('django.db.models.fields.related.ForeignKey')(to=orm['c2g.ProblemSet'])),
            ('exercise', self.gf('django.db.models.fields.related.ForeignKey')(to=orm['c2g.Exercise'])),
            ('number', self.gf('django.db.models.fields.IntegerField')(null=True, blank=True)),
            ('image', self.gf('django.db.models.fields.related.ForeignKey')(to=orm['c2g.ProblemSetToExercise'], null=True, blank=True)),
            ('mode', self.gf('django.db.models.fields.TextField')(blank=True)),
        ))
        db.send_create_signal('c2g', ['ProblemSetToExercise'])

        # Adding model 'VideoToExercise'
        db.create_table(u'c2g_video_to_exercise', (
            ('id', self.gf('django.db.models.fields.AutoField')(primary_key=True)),
            ('is_deleted', self.gf('django.db.models.fields.IntegerField')(default=0)),
            ('video', self.gf('django.db.models.fields.related.ForeignKey')(to=orm['c2g.Video'])),
            ('exercise', self.gf('django.db.models.fields.related.ForeignKey')(to=orm['c2g.Exercise'])),
            ('video_time', self.gf('django.db.models.fields.IntegerField')()),
            ('image', self.gf('django.db.models.fields.related.ForeignKey')(to=orm['c2g.VideoToExercise'], null=True, blank=True)),
            ('mode', self.gf('django.db.models.fields.TextField')(blank=True)),
        ))
        db.send_create_signal('c2g', ['VideoToExercise'])

        # Adding model 'ProblemActivity'
        db.create_table(u'c2g_problem_activity', (
            ('id', self.gf('django.db.models.fields.AutoField')(primary_key=True)),
            ('time_created', self.gf('django.db.models.fields.DateTimeField')(auto_now_add=True, blank=True)),
            ('last_updated', self.gf('django.db.models.fields.DateTimeField')(auto_now=True, auto_now_add=True, blank=True)),
            ('student', self.gf('django.db.models.fields.related.ForeignKey')(to=orm['auth.User'])),
            ('video_to_exercise', self.gf('django.db.models.fields.related.ForeignKey')(to=orm['c2g.VideoToExercise'], null=True)),
            ('problemset_to_exercise', self.gf('django.db.models.fields.related.ForeignKey')(to=orm['c2g.ProblemSetToExercise'], null=True)),
            ('problem_identifier', self.gf('django.db.models.fields.CharField')(max_length=255, blank=True)),
            ('complete', self.gf('django.db.models.fields.IntegerField')(null=True, blank=True)),
            ('attempt_content', self.gf('django.db.models.fields.TextField')(null=True, blank=True)),
            ('count_hints', self.gf('django.db.models.fields.IntegerField')(null=True, blank=True)),
            ('time_taken', self.gf('django.db.models.fields.IntegerField')(null=True, blank=True)),
            ('attempt_number', self.gf('django.db.models.fields.IntegerField')(null=True, blank=True)),
            ('sha1', self.gf('django.db.models.fields.TextField')(blank=True)),
            ('seed', self.gf('django.db.models.fields.TextField')(blank=True)),
            ('problem_type', self.gf('django.db.models.fields.TextField')(blank=True)),
            ('review_mode', self.gf('django.db.models.fields.IntegerField')(null=True, blank=True)),
            ('topic_mode', self.gf('django.db.models.fields.IntegerField')(null=True, blank=True)),
            ('casing', self.gf('django.db.models.fields.TextField')(blank=True)),
            ('card', self.gf('django.db.models.fields.TextField')(blank=True)),
            ('cards_done', self.gf('django.db.models.fields.IntegerField')(null=True, blank=True)),
            ('cards_left', self.gf('django.db.models.fields.IntegerField')(null=True, blank=True)),
            ('user_selection_val', self.gf('django.db.models.fields.CharField')(max_length=1024, null=True, blank=True)),
            ('user_choices', self.gf('django.db.models.fields.CharField')(max_length=1024, null=True, blank=True)),
        ))
        db.send_create_signal('c2g', ['ProblemActivity'])

        # Adding model 'NewsEvent'
        db.create_table(u'c2g_news_events', (
            ('id', self.gf('django.db.models.fields.AutoField')(primary_key=True)),
            ('course', self.gf('django.db.models.fields.related.ForeignKey')(to=orm['c2g.Course'])),
            ('event', self.gf('django.db.models.fields.CharField')(max_length=255)),
            ('time_created', self.gf('django.db.models.fields.DateTimeField')(auto_now_add=True, blank=True)),
        ))
        db.send_create_signal('c2g', ['NewsEvent'])

        # Adding model 'CourseEmail'
        db.create_table(u'c2g_course_emails', (
            ('id', self.gf('django.db.models.fields.AutoField')(primary_key=True)),
            ('time_created', self.gf('django.db.models.fields.DateTimeField')(auto_now_add=True, blank=True)),
            ('last_updated', self.gf('django.db.models.fields.DateTimeField')(auto_now=True, auto_now_add=True, blank=True)),
            ('sender', self.gf('django.db.models.fields.related.ForeignKey')(to=orm['auth.User'])),
            ('hash', self.gf('django.db.models.fields.CharField')(max_length=128, db_index=True)),
            ('subject', self.gf('django.db.models.fields.CharField')(max_length=128, blank=True)),
            ('html_message', self.gf('django.db.models.fields.TextField')(null=True, blank=True)),
            ('course', self.gf('django.db.models.fields.related.ForeignKey')(to=orm['c2g.Course'])),
            ('to', self.gf('django.db.models.fields.CharField')(default='myself', max_length=64)),
        ))
        db.send_create_signal('c2g', ['CourseEmail'])

        # Adding model 'EmailAddr'
        db.create_table('c2g_emailaddr', (
            ('id', self.gf('django.db.models.fields.AutoField')(primary_key=True)),
            ('name', self.gf('django.db.models.fields.CharField')(max_length=128, null=True, blank=True)),
            ('addr', self.gf('django.db.models.fields.EmailField')(max_length=128)),
            ('optout', self.gf('django.db.models.fields.BooleanField')(default=False)),
            ('optout_code', self.gf('django.db.models.fields.CharField')(default='optout', max_length=64)),
        ))
        db.send_create_signal('c2g', ['EmailAddr'])

        # Adding model 'MailingList'
        db.create_table('c2g_mailinglist', (
            ('id', self.gf('django.db.models.fields.AutoField')(primary_key=True)),
            ('name', self.gf('django.db.models.fields.CharField')(max_length=128, blank=True)),
        ))
        db.send_create_signal('c2g', ['MailingList'])

        # Adding M2M table for field members on 'MailingList'
        db.create_table('c2g_mailinglist_members', (
            ('id', models.AutoField(verbose_name='ID', primary_key=True, auto_created=True)),
            ('mailinglist', models.ForeignKey(orm['c2g.mailinglist'], null=False)),
            ('emailaddr', models.ForeignKey(orm['c2g.emailaddr'], null=False))
        ))
        db.create_unique('c2g_mailinglist_members', ['mailinglist_id', 'emailaddr_id'])

        # Adding model 'ListEmail'
        db.create_table('c2g_listemail', (
            ('id', self.gf('django.db.models.fields.AutoField')(primary_key=True)),
            ('time_created', self.gf('django.db.models.fields.DateTimeField')(auto_now_add=True, blank=True)),
            ('last_updated', self.gf('django.db.models.fields.DateTimeField')(auto_now=True, auto_now_add=True, blank=True)),
            ('sender', self.gf('django.db.models.fields.related.ForeignKey')(to=orm['auth.User'])),
            ('hash', self.gf('django.db.models.fields.CharField')(max_length=128, db_index=True)),
            ('subject', self.gf('django.db.models.fields.CharField')(max_length=128, blank=True)),
            ('html_message', self.gf('django.db.models.fields.TextField')(null=True, blank=True)),
            ('from_name', self.gf('django.db.models.fields.CharField')(max_length=128, blank=True)),
            ('from_addr', self.gf('django.db.models.fields.CharField')(max_length=128, blank=True)),
            ('to_list', self.gf('django.db.models.fields.related.ForeignKey')(to=orm['c2g.MailingList'])),
        ))
        db.send_create_signal('c2g', ['ListEmail'])

        # Adding model 'PageVisitLog'
        db.create_table(u'c2g_page_visit_log', (
            ('id', self.gf('django.db.models.fields.AutoField')(primary_key=True)),
            ('time_created', self.gf('django.db.models.fields.DateTimeField')(auto_now_add=True, blank=True)),
            ('last_updated', self.gf('django.db.models.fields.DateTimeField')(auto_now=True, auto_now_add=True, blank=True)),
            ('course', self.gf('django.db.models.fields.related.ForeignKey')(to=orm['c2g.Course'])),
            ('user', self.gf('django.db.models.fields.related.ForeignKey')(to=orm['auth.User'])),
            ('page_type', self.gf('django.db.models.fields.CharField')(max_length=128, db_index=True)),
            ('object_id', self.gf('django.db.models.fields.CharField')(max_length=128, blank=True)),
        ))
        db.send_create_signal('c2g', ['PageVisitLog'])

        # Adding model 'Exam'
        db.create_table('c2g_exam', (
            ('id', self.gf('django.db.models.fields.AutoField')(primary_key=True)),
            ('time_created', self.gf('django.db.models.fields.DateTimeField')(auto_now_add=True, blank=True)),
            ('last_updated', self.gf('django.db.models.fields.DateTimeField')(auto_now=True, auto_now_add=True, blank=True)),
            ('mode', self.gf('django.db.models.fields.TextField')(blank=True)),
            ('image', self.gf('django.db.models.fields.related.ForeignKey')(blank=True, related_name='+', null=True, to=orm['c2g.Exam'])),
            ('live_datetime', self.gf('django.db.models.fields.DateTimeField')(null=True, blank=True)),
            ('index', self.gf('django.db.models.fields.IntegerField')(null=True, blank=True)),
            ('is_deleted', self.gf('django.db.models.fields.IntegerField')(default=0)),
            ('course', self.gf('django.db.models.fields.related.ForeignKey')(to=orm['c2g.Course'])),
            ('section', self.gf('django.db.models.fields.related.ForeignKey')(to=orm['c2g.ContentSection'], null=True)),
            ('title', self.gf('django.db.models.fields.CharField')(max_length=255, null=True, blank=True)),
            ('description', self.gf('django.db.models.fields.TextField')(null=True, blank=True)),
            ('html_content', self.gf('django.db.models.fields.TextField')(blank=True)),
            ('xml_metadata', self.gf('django.db.models.fields.TextField')(null=True, blank=True)),
            ('xml_imported', self.gf('django.db.models.fields.TextField')(null=True, blank=True)),
            ('slug', self.gf('django.db.models.fields.SlugField')(max_length=255, null=True)),
            ('due_date', self.gf('django.db.models.fields.DateTimeField')(null=True, blank=True)),
            ('grace_period', self.gf('django.db.models.fields.DateTimeField')(null=True, blank=True)),
            ('partial_credit_deadline', self.gf('django.db.models.fields.DateTimeField')(null=True, blank=True)),
            ('late_penalty', self.gf('django.db.models.fields.IntegerField')(default=0, null=True, blank=True)),
            ('submissions_permitted', self.gf('django.db.models.fields.IntegerField')(default=999, null=True, blank=True)),
            ('resubmission_penalty', self.gf('django.db.models.fields.IntegerField')(default=0, null=True, blank=True)),
            ('autograde', self.gf('django.db.models.fields.BooleanField')(default=False)),
            ('display_single', self.gf('django.db.models.fields.BooleanField')(default=False)),
            ('grade_single', self.gf('django.db.models.fields.BooleanField')(default=False)),
            ('invideo', self.gf('django.db.models.fields.BooleanField')(default=False)),
            ('timed', self.gf('django.db.models.fields.BooleanField')(default=False)),
            ('minutesallowed', self.gf('django.db.models.fields.IntegerField')(null=True, blank=True)),
            ('minutes_btw_attempts', self.gf('django.db.models.fields.IntegerField')(default=0)),
            ('exam_type', self.gf('django.db.models.fields.CharField')(default='exam', max_length=32)),
            ('assessment_type', self.gf('django.db.models.fields.CharField')(max_length=64, null=True, blank=True)),
            ('total_score', self.gf('django.db.models.fields.FloatField')(null=True, blank=True)),
        ))
        db.send_create_signal('c2g', ['Exam'])

        # Adding model 'ExamRecord'
        db.create_table('c2g_examrecord', (
            ('id', self.gf('django.db.models.fields.AutoField')(primary_key=True)),
            ('time_created', self.gf('django.db.models.fields.DateTimeField')(auto_now_add=True, blank=True)),
            ('last_updated', self.gf('django.db.models.fields.DateTimeField')(auto_now=True, auto_now_add=True, blank=True)),
            ('course', self.gf('django.db.models.fields.related.ForeignKey')(to=orm['c2g.Course'])),
            ('exam', self.gf('django.db.models.fields.related.ForeignKey')(to=orm['c2g.Exam'])),
            ('student', self.gf('django.db.models.fields.related.ForeignKey')(to=orm['auth.User'])),
            ('json_data', self.gf('django.db.models.fields.TextField')(null=True, blank=True)),
            ('json_score_data', self.gf('django.db.models.fields.TextField')(null=True, blank=True)),
            ('attempt_number', self.gf('django.db.models.fields.IntegerField')(default=0)),
            ('complete', self.gf('django.db.models.fields.BooleanField')(default=True)),
            ('late', self.gf('django.db.models.fields.BooleanField')(default=False)),
            ('score', self.gf('django.db.models.fields.FloatField')(null=True, blank=True)),
            ('onpage', self.gf('django.db.models.fields.CharField')(max_length=512, null=True, blank=True)),
        ))
        db.send_create_signal('c2g', ['ExamRecord'])

        # Adding model 'ExamScore'
        db.create_table('c2g_examscore', (
            ('id', self.gf('django.db.models.fields.AutoField')(primary_key=True)),
            ('time_created', self.gf('django.db.models.fields.DateTimeField')(auto_now_add=True, blank=True)),
            ('last_updated', self.gf('django.db.models.fields.DateTimeField')(auto_now=True, auto_now_add=True, blank=True)),
            ('course', self.gf('django.db.models.fields.related.ForeignKey')(to=orm['c2g.Course'])),
            ('exam', self.gf('django.db.models.fields.related.ForeignKey')(to=orm['c2g.Exam'])),
            ('student', self.gf('django.db.models.fields.related.ForeignKey')(to=orm['auth.User'])),
            ('score', self.gf('django.db.models.fields.FloatField')(null=True, blank=True)),
            ('csv_imported', self.gf('django.db.models.fields.BooleanField')(default=False)),
        ))
        db.send_create_signal('c2g', ['ExamScore'])

        # Adding unique constraint on 'ExamScore', fields ['exam', 'student']
        db.create_unique('c2g_examscore', ['exam_id', 'student_id'])

        # Adding model 'ExamScoreField'
        db.create_table('c2g_examscorefield', (
            ('id', self.gf('django.db.models.fields.AutoField')(primary_key=True)),
            ('time_created', self.gf('django.db.models.fields.DateTimeField')(auto_now_add=True, blank=True)),
            ('last_updated', self.gf('django.db.models.fields.DateTimeField')(auto_now=True, auto_now_add=True, blank=True)),
            ('parent', self.gf('django.db.models.fields.related.ForeignKey')(to=orm['c2g.ExamScore'])),
            ('field_name', self.gf('django.db.models.fields.CharField')(max_length=128, db_index=True)),
            ('human_name', self.gf('django.db.models.fields.CharField')(db_index=True, max_length=128, null=True, blank=True)),
            ('value', self.gf('django.db.models.fields.CharField')(max_length=128, null=True, blank=True)),
            ('correct', self.gf('django.db.models.fields.NullBooleanField')(null=True, blank=True)),
            ('subscore', self.gf('django.db.models.fields.FloatField')(default=0)),
            ('comments', self.gf('django.db.models.fields.TextField')(null=True, blank=True)),
            ('associated_text', self.gf('django.db.models.fields.TextField')(null=True, blank=True)),
        ))
        db.send_create_signal('c2g', ['ExamScoreField'])

        # Adding model 'ExamRecordScore'
        db.create_table('c2g_examrecordscore', (
            ('id', self.gf('django.db.models.fields.AutoField')(primary_key=True)),
            ('time_created', self.gf('django.db.models.fields.DateTimeField')(auto_now_add=True, blank=True)),
            ('last_updated', self.gf('django.db.models.fields.DateTimeField')(auto_now=True, auto_now_add=True, blank=True)),
            ('record', self.gf('django.db.models.fields.related.OneToOneField')(to=orm['c2g.ExamRecord'], unique=True)),
            ('raw_score', self.gf('django.db.models.fields.FloatField')(null=True, blank=True)),
            ('csv_imported', self.gf('django.db.models.fields.BooleanField')(default=False)),
        ))
        db.send_create_signal('c2g', ['ExamRecordScore'])

        # Adding model 'ExamRecordScoreField'
        db.create_table('c2g_examrecordscorefield', (
            ('id', self.gf('django.db.models.fields.AutoField')(primary_key=True)),
            ('time_created', self.gf('django.db.models.fields.DateTimeField')(auto_now_add=True, blank=True)),
            ('last_updated', self.gf('django.db.models.fields.DateTimeField')(auto_now=True, auto_now_add=True, blank=True)),
            ('parent', self.gf('django.db.models.fields.related.ForeignKey')(to=orm['c2g.ExamRecordScore'])),
            ('field_name', self.gf('django.db.models.fields.CharField')(max_length=128, db_index=True)),
            ('human_name', self.gf('django.db.models.fields.CharField')(db_index=True, max_length=128, null=True, blank=True)),
            ('value', self.gf('django.db.models.fields.TextField')(null=True, blank=True)),
            ('correct', self.gf('django.db.models.fields.NullBooleanField')(null=True, blank=True)),
            ('subscore', self.gf('django.db.models.fields.FloatField')(default=0)),
            ('comments', self.gf('django.db.models.fields.TextField')(null=True, blank=True)),
            ('associated_text', self.gf('django.db.models.fields.TextField')(null=True, blank=True)),
        ))
        db.send_create_signal('c2g', ['ExamRecordScoreField'])

        # Adding model 'ExamRecordFieldLog'
        db.create_table('c2g_examrecordfieldlog', (
            ('id', self.gf('django.db.models.fields.AutoField')(primary_key=True)),
            ('time_created', self.gf('django.db.models.fields.DateTimeField')(auto_now_add=True, blank=True)),
            ('last_updated', self.gf('django.db.models.fields.DateTimeField')(auto_now=True, auto_now_add=True, blank=True)),
            ('course', self.gf('django.db.models.fields.related.ForeignKey')(to=orm['c2g.Course'])),
            ('exam', self.gf('django.db.models.fields.related.ForeignKey')(to=orm['c2g.Exam'])),
            ('student', self.gf('django.db.models.fields.related.ForeignKey')(to=orm['auth.User'])),
            ('field_name', self.gf('django.db.models.fields.CharField')(max_length=128, db_index=True)),
            ('human_name', self.gf('django.db.models.fields.CharField')(db_index=True, max_length=128, null=True, blank=True)),
            ('value', self.gf('django.db.models.fields.TextField')(null=True, blank=True)),
            ('raw_score', self.gf('django.db.models.fields.FloatField')(default=0, blank=True)),
            ('max_score', self.gf('django.db.models.fields.FloatField')(default=0, blank=True)),
        ))
        db.send_create_signal('c2g', ['ExamRecordFieldLog'])

        # Adding model 'ExamRecordScoreFieldChoice'
        db.create_table('c2g_examrecordscorefieldchoice', (
            ('id', self.gf('django.db.models.fields.AutoField')(primary_key=True)),
            ('time_created', self.gf('django.db.models.fields.DateTimeField')(auto_now_add=True, blank=True)),
            ('last_updated', self.gf('django.db.models.fields.DateTimeField')(auto_now=True, auto_now_add=True, blank=True)),
            ('parent', self.gf('django.db.models.fields.related.ForeignKey')(to=orm['c2g.ExamRecordScoreField'])),
            ('choice_value', self.gf('django.db.models.fields.CharField')(max_length=128, db_index=True)),
            ('human_name', self.gf('django.db.models.fields.CharField')(db_index=True, max_length=128, null=True, blank=True)),
            ('correct', self.gf('django.db.models.fields.NullBooleanField')(null=True, blank=True)),
            ('associated_text', self.gf('django.db.models.fields.TextField')(null=True, blank=True)),
        ))
        db.send_create_signal('c2g', ['ExamRecordScoreFieldChoice'])

        # Adding model 'CurrentTermMap'
        db.create_table('c2g_currenttermmap', (
            ('id', self.gf('django.db.models.fields.AutoField')(primary_key=True)),
            ('time_created', self.gf('django.db.models.fields.DateTimeField')(auto_now_add=True, blank=True)),
            ('last_updated', self.gf('django.db.models.fields.DateTimeField')(auto_now=True, auto_now_add=True, blank=True)),
            ('course_prefix', self.gf('django.db.models.fields.CharField')(unique=True, max_length=64, db_index=True)),
            ('course_suffix', self.gf('django.db.models.fields.CharField')(max_length=64)),
        ))
        db.send_create_signal('c2g', ['CurrentTermMap'])

        # Adding model 'StudentExamStart'
        db.create_table('c2g_studentexamstart', (
            ('id', self.gf('django.db.models.fields.AutoField')(primary_key=True)),
            ('time_created', self.gf('django.db.models.fields.DateTimeField')(auto_now_add=True, blank=True)),
            ('last_updated', self.gf('django.db.models.fields.DateTimeField')(auto_now=True, auto_now_add=True, blank=True)),
            ('student', self.gf('django.db.models.fields.related.ForeignKey')(to=orm['auth.User'])),
            ('exam', self.gf('django.db.models.fields.related.ForeignKey')(to=orm['c2g.Exam'])),
        ))
        db.send_create_signal('c2g', ['StudentExamStart'])

        # Adding model 'ContentGroup'
        db.create_table(u'c2g_content_group', (
            ('id', self.gf('django.db.models.fields.AutoField')(primary_key=True)),
            ('group_id', self.gf('django.db.models.fields.IntegerField')(db_index=True, null=True, blank=True)),
            ('level', self.gf('django.db.models.fields.IntegerField')(db_index=True)),
            ('display_style', self.gf('django.db.models.fields.CharField')(default='list', max_length=32, blank=True)),
            ('additional_page', self.gf('django.db.models.fields.related.ForeignKey')(to=orm['c2g.AdditionalPage'], null=True, blank=True)),
            ('course', self.gf('django.db.models.fields.related.ForeignKey')(to=orm['c2g.Course'])),
            ('exam', self.gf('django.db.models.fields.related.ForeignKey')(to=orm['c2g.Exam'], null=True, blank=True)),
            ('file', self.gf('django.db.models.fields.related.ForeignKey')(to=orm['c2g.File'], null=True, blank=True)),
            ('problemSet', self.gf('django.db.models.fields.related.ForeignKey')(to=orm['c2g.ProblemSet'], null=True, blank=True)),
            ('video', self.gf('django.db.models.fields.related.ForeignKey')(to=orm['c2g.Video'], null=True, blank=True)),
        ))
        db.send_create_signal('c2g', ['ContentGroup'])


    def backwards(self, orm):
        # Removing unique constraint on 'ExamScore', fields ['exam', 'student']
        db.delete_unique('c2g_examscore', ['exam_id', 'student_id'])

        # Deleting model 'Institution'
        db.delete_table(u'c2g_institutions')

        # Deleting model 'Course'
        db.delete_table(u'c2g_courses')

        # Removing M2M table for field share_to on 'Course'
        db.delete_table('c2g_courses_share_to')

        # Deleting model 'ContentSection'
        db.delete_table(u'c2g_content_sections')

        # Deleting model 'AdditionalPage'
        db.delete_table(u'c2g_additional_pages')

        # Deleting model 'File'
        db.delete_table(u'c2g_files')

        # Deleting model 'Announcement'
        db.delete_table(u'c2g_announcements')

        # Deleting model 'StudentSection'
        db.delete_table(u'c2g_sections')

        # Removing M2M table for field members on 'StudentSection'
        db.delete_table('c2g_sections_members')

        # Deleting model 'UserProfile'
        db.delete_table(u'c2g_user_profiles')

        # Removing M2M table for field institutions on 'UserProfile'
        db.delete_table('c2g_user_profiles_institutions')

        # Deleting model 'Video'
        db.delete_table(u'c2g_videos')

        # Deleting model 'VideoViewTraces'
        db.delete_table(u'c2g_video_view_traces')

        # Deleting model 'VideoActivity'
        db.delete_table(u'c2g_video_activity')

        # Deleting model 'VideoDownload'
        db.delete_table(u'c2g_video_download')

        # Deleting model 'ProblemSet'
        db.delete_table(u'c2g_problem_sets')

        # Deleting model 'Exercise'
        db.delete_table(u'c2g_exercises')

        # Deleting model 'ProblemSetToExercise'
        db.delete_table(u'c2g_problemset_to_exercise')

        # Deleting model 'VideoToExercise'
        db.delete_table(u'c2g_video_to_exercise')

        # Deleting model 'ProblemActivity'
        db.delete_table(u'c2g_problem_activity')

        # Deleting model 'NewsEvent'
        db.delete_table(u'c2g_news_events')

        # Deleting model 'CourseEmail'
        db.delete_table(u'c2g_course_emails')

        # Deleting model 'EmailAddr'
        db.delete_table('c2g_emailaddr')

        # Deleting model 'MailingList'
        db.delete_table('c2g_mailinglist')

        # Removing M2M table for field members on 'MailingList'
        db.delete_table('c2g_mailinglist_members')

        # Deleting model 'ListEmail'
        db.delete_table('c2g_listemail')

        # Deleting model 'PageVisitLog'
        db.delete_table(u'c2g_page_visit_log')

        # Deleting model 'Exam'
        db.delete_table('c2g_exam')

        # Deleting model 'ExamRecord'
        db.delete_table('c2g_examrecord')

        # Deleting model 'ExamScore'
        db.delete_table('c2g_examscore')

        # Deleting model 'ExamScoreField'
        db.delete_table('c2g_examscorefield')

        # Deleting model 'ExamRecordScore'
        db.delete_table('c2g_examrecordscore')

        # Deleting model 'ExamRecordScoreField'
        db.delete_table('c2g_examrecordscorefield')

        # Deleting model 'ExamRecordFieldLog'
        db.delete_table('c2g_examrecordfieldlog')

        # Deleting model 'ExamRecordScoreFieldChoice'
        db.delete_table('c2g_examrecordscorefieldchoice')

        # Deleting model 'CurrentTermMap'
        db.delete_table('c2g_currenttermmap')

        # Deleting model 'StudentExamStart'
        db.delete_table('c2g_studentexamstart')

        # Deleting model 'ContentGroup'
        db.delete_table(u'c2g_content_group')


    models = {
        'auth.group': {
            'Meta': {'object_name': 'Group'},
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '80'}),
            'permissions': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['auth.Permission']", 'symmetrical': 'False', 'blank': 'True'})
        },
        'auth.permission': {
            'Meta': {'ordering': "('content_type__app_label', 'content_type__model', 'codename')", 'unique_together': "(('content_type', 'codename'),)", 'object_name': 'Permission'},
            'codename': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'content_type': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['contenttypes.ContentType']"}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '50'})
        },
        'auth.user': {
            'Meta': {'object_name': 'User'},
            'date_joined': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
            'email': ('django.db.models.fields.EmailField', [], {'max_length': '75', 'blank': 'True'}),
            'first_name': ('django.db.models.fields.CharField', [], {'max_length': '30', 'blank': 'True'}),
            'groups': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['auth.Group']", 'symmetrical': 'False', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'is_active': ('django.db.models.fields.BooleanField', [], {'default': 'True'}),
            'is_staff': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'is_superuser': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'last_login': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
            'last_name': ('django.db.models.fields.CharField', [], {'max_length': '30', 'blank': 'True'}),
            'password': ('django.db.models.fields.CharField', [], {'max_length': '128'}),
            'user_permissions': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['auth.Permission']", 'symmetrical': 'False', 'blank': 'True'}),
            'username': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '30'})
        },
        'c2g.additionalpage': {
            'Meta': {'object_name': 'AdditionalPage', 'db_table': "u'c2g_additional_pages'"},
            'course': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['c2g.Course']"}),
            'description': ('django.db.models.fields.TextField', [], {'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'image': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'to': "orm['c2g.AdditionalPage']"}),
            'index': ('django.db.models.fields.IntegerField', [], {'null': 'True', 'blank': 'True'}),
            'is_deleted': ('django.db.models.fields.IntegerField', [], {'default': '0'}),
            'last_updated': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'auto_now_add': 'True', 'blank': 'True'}),
            'live_datetime': ('django.db.models.fields.DateTimeField', [], {'null': 'True', 'blank': 'True'}),
            'menu_slug': ('django.db.models.fields.SlugField', [], {'max_length': '255', 'null': 'True', 'blank': 'True'}),
            'mode': ('django.db.models.fields.TextField', [], {'blank': 'True'}),
            'section': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['c2g.ContentSection']", 'null': 'True'}),
            'slug': ('django.db.models.fields.SlugField', [], {'max_length': '255', 'null': 'True', 'blank': 'True'}),
            'time_created': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'title': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True', 'blank': 'True'})
        },
        'c2g.announcement': {
            'Meta': {'object_name': 'Announcement', 'db_table': "u'c2g_announcements'"},
            'course': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['c2g.Course']"}),
            'description': ('django.db.models.fields.TextField', [], {'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'image': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'to': "orm['c2g.Announcement']"}),
            'index': ('django.db.models.fields.IntegerField', [], {'null': 'True', 'blank': 'True'}),
            'is_deleted': ('django.db.models.fields.IntegerField', [], {'default': '0'}),
            'last_updated': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'auto_now_add': 'True', 'blank': 'True'}),
            'live_datetime': ('django.db.models.fields.DateTimeField', [], {'null': 'True', 'blank': 'True'}),
            'mode': ('django.db.models.fields.TextField', [], {'blank': 'True'}),
            'owner': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['auth.User']"}),
            'time_created': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'title': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True', 'blank': 'True'})
        },
        'c2g.contentgroup': {
            'Meta': {'object_name': 'ContentGroup', 'db_table': "u'c2g_content_group'"},
            'additional_page': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['c2g.AdditionalPage']", 'null': 'True', 'blank': 'True'}),
            'course': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['c2g.Course']"}),
            'display_style': ('django.db.models.fields.CharField', [], {'default': "'list'", 'max_length': '32', 'blank': 'True'}),
            'exam': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['c2g.Exam']", 'null': 'True', 'blank': 'True'}),
            'file': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['c2g.File']", 'null': 'True', 'blank': 'True'}),
            'group_id': ('django.db.models.fields.IntegerField', [], {'db_index': 'True', 'null': 'True', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'level': ('django.db.models.fields.IntegerField', [], {'db_index': 'True'}),
            'problemSet': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['c2g.ProblemSet']", 'null': 'True', 'blank': 'True'}),
            'video': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['c2g.Video']", 'null': 'True', 'blank': 'True'})
        },
        'c2g.contentsection': {
            'Meta': {'object_name': 'ContentSection', 'db_table': "u'c2g_content_sections'"},
            'course': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['c2g.Course']"}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'image': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'to': "orm['c2g.ContentSection']"}),
            'index': ('django.db.models.fields.IntegerField', [], {'null': 'True', 'blank': 'True'}),
            'is_deleted': ('django.db.models.fields.IntegerField', [], {'default': '0'}),
            'last_updated': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'auto_now_add': 'True', 'blank': 'True'}),
            'live_datetime': ('django.db.models.fields.DateTimeField', [], {'null': 'True', 'blank': 'True'}),
            'mode': ('django.db.models.fields.TextField', [], {'blank': 'True'}),
            'slug': ('django.db.models.fields.SlugField', [], {'max_length': '255', 'null': 'True', 'blank': 'True'}),
            'subtitle': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True', 'blank': 'True'}),
            'time_created': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'title': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True', 'blank': 'True'})
        },
        'c2g.course': {
            'Meta': {'object_name': 'Course', 'db_table': "u'c2g_courses'"},
            'calendar_end': ('django.db.models.fields.DateField', [], {'null': 'True', 'blank': 'True'}),
            'calendar_start': ('django.db.models.fields.DateField', [], {'null': 'True', 'blank': 'True'}),
            'contact': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True', 'blank': 'True'}),
            'description': ('django.db.models.fields.TextField', [], {'blank': 'True'}),
            'handle': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True', 'db_index': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'image': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'to': "orm['c2g.Course']"}),
            'institution': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['c2g.Institution']", 'null': 'True'}),
            'institution_only': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'instructor_group': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'instructor_group'", 'to': "orm['auth.Group']"}),
            'is_deleted': ('django.db.models.fields.IntegerField', [], {'default': '0'}),
            'last_updated': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'auto_now_add': 'True', 'blank': 'True'}),
            'list_publicly': ('django.db.models.fields.IntegerField', [], {'null': 'True', 'blank': 'True'}),
            'live_datetime': ('django.db.models.fields.DateTimeField', [], {'null': 'True', 'blank': 'True'}),
            'mode': ('django.db.models.fields.TextField', [], {'blank': 'True'}),
            'piazza_id': ('django.db.models.fields.IntegerField', [], {'null': 'True', 'blank': 'True'}),
            'preview_only_mode': ('django.db.models.fields.BooleanField', [], {'default': 'True'}),
            'readonly_tas_group': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'readonly_tas_group'", 'to': "orm['auth.Group']"}),
            'share_to': ('django.db.models.fields.related.ManyToManyField', [], {'blank': 'True', 'related_name': "'share_from'", 'null': 'True', 'symmetrical': 'False', 'to': "orm['c2g.Course']"}),
            'student_group': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'student_group'", 'to': "orm['auth.Group']"}),
            'syllabus': ('django.db.models.fields.TextField', [], {'blank': 'True'}),
            'tas_group': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'tas_group'", 'to': "orm['auth.Group']"}),
            'term': ('django.db.models.fields.TextField', [], {'blank': 'True'}),
            'time_created': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'title': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True', 'blank': 'True'}),
            'year': ('django.db.models.fields.IntegerField', [], {'null': 'True', 'blank': 'True'})
        },
        'c2g.courseemail': {
            'Meta': {'object_name': 'CourseEmail', 'db_table': "u'c2g_course_emails'"},
            'course': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['c2g.Course']"}),
            'hash': ('django.db.models.fields.CharField', [], {'max_length': '128', 'db_index': 'True'}),
            'html_message': ('django.db.models.fields.TextField', [], {'null': 'True', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'last_updated': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'auto_now_add': 'True', 'blank': 'True'}),
            'sender': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['auth.User']"}),
            'subject': ('django.db.models.fields.CharField', [], {'max_length': '128', 'blank': 'True'}),
            'time_created': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'to': ('django.db.models.fields.CharField', [], {'default': "'myself'", 'max_length': '64'})
        },
        'c2g.currenttermmap': {
            'Meta': {'object_name': 'CurrentTermMap'},
            'course_prefix': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '64', 'db_index': 'True'}),
            'course_suffix': ('django.db.models.fields.CharField', [], {'max_length': '64'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'last_updated': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'auto_now_add': 'True', 'blank': 'True'}),
            'time_created': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'})
        },
        'c2g.emailaddr': {
            'Meta': {'object_name': 'EmailAddr'},
            'addr': ('django.db.models.fields.EmailField', [], {'max_length': '128'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '128', 'null': 'True', 'blank': 'True'}),
            'optout': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'optout_code': ('django.db.models.fields.CharField', [], {'default': "'optout'", 'max_length': '64'})
        },
        'c2g.exam': {
            'Meta': {'object_name': 'Exam'},
            'assessment_type': ('django.db.models.fields.CharField', [], {'max_length': '64', 'null': 'True', 'blank': 'True'}),
            'autograde': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'course': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['c2g.Course']"}),
            'description': ('django.db.models.fields.TextField', [], {'null': 'True', 'blank': 'True'}),
            'display_single': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'due_date': ('django.db.models.fields.DateTimeField', [], {'null': 'True', 'blank': 'True'}),
            'exam_type': ('django.db.models.fields.CharField', [], {'default': "'exam'", 'max_length': '32'}),
            'grace_period': ('django.db.models.fields.DateTimeField', [], {'null': 'True', 'blank': 'True'}),
            'grade_single': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'html_content': ('django.db.models.fields.TextField', [], {'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'image': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'to': "orm['c2g.Exam']"}),
            'index': ('django.db.models.fields.IntegerField', [], {'null': 'True', 'blank': 'True'}),
            'invideo': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'is_deleted': ('django.db.models.fields.IntegerField', [], {'default': '0'}),
            'last_updated': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'auto_now_add': 'True', 'blank': 'True'}),
            'late_penalty': ('django.db.models.fields.IntegerField', [], {'default': '0', 'null': 'True', 'blank': 'True'}),
            'live_datetime': ('django.db.models.fields.DateTimeField', [], {'null': 'True', 'blank': 'True'}),
            'minutes_btw_attempts': ('django.db.models.fields.IntegerField', [], {'default': '0'}),
            'minutesallowed': ('django.db.models.fields.IntegerField', [], {'null': 'True', 'blank': 'True'}),
            'mode': ('django.db.models.fields.TextField', [], {'blank': 'True'}),
            'partial_credit_deadline': ('django.db.models.fields.DateTimeField', [], {'null': 'True', 'blank': 'True'}),
            'resubmission_penalty': ('django.db.models.fields.IntegerField', [], {'default': '0', 'null': 'True', 'blank': 'True'}),
            'section': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['c2g.ContentSection']", 'null': 'True'}),
            'slug': ('django.db.models.fields.SlugField', [], {'max_length': '255', 'null': 'True'}),
            'submissions_permitted': ('django.db.models.fields.IntegerField', [], {'default': '999', 'null': 'True', 'blank': 'True'}),
            'time_created': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'timed': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'title': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True', 'blank': 'True'}),
            'total_score': ('django.db.models.fields.FloatField', [], {'null': 'True', 'blank': 'True'}),
            'xml_imported': ('django.db.models.fields.TextField', [], {'null': 'True', 'blank': 'True'}),
            'xml_metadata': ('django.db.models.fields.TextField', [], {'null': 'True', 'blank': 'True'})
        },
        'c2g.examrecord': {
            'Meta': {'object_name': 'ExamRecord'},
            'attempt_number': ('django.db.models.fields.IntegerField', [], {'default': '0'}),
            'complete': ('django.db.models.fields.BooleanField', [], {'default': 'True'}),
            'course': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['c2g.Course']"}),
            'exam': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['c2g.Exam']"}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'json_data': ('django.db.models.fields.TextField', [], {'null': 'True', 'blank': 'True'}),
            'json_score_data': ('django.db.models.fields.TextField', [], {'null': 'True', 'blank': 'True'}),
            'last_updated': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'auto_now_add': 'True', 'blank': 'True'}),
            'late': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'onpage': ('django.db.models.fields.CharField', [], {'max_length': '512', 'null': 'True', 'blank': 'True'}),
            'score': ('django.db.models.fields.FloatField', [], {'null': 'True', 'blank': 'True'}),
            'student': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['auth.User']"}),
            'time_created': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'})
        },
        'c2g.examrecordfieldlog': {
            'Meta': {'object_name': 'ExamRecordFieldLog'},
            'course': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['c2g.Course']"}),
            'exam': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['c2g.Exam']"}),
            'field_name': ('django.db.models.fields.CharField', [], {'max_length': '128', 'db_index': 'True'}),
            'human_name': ('django.db.models.fields.CharField', [], {'db_index': 'True', 'max_length': '128', 'null': 'True', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'last_updated': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'auto_now_add': 'True', 'blank': 'True'}),
            'max_score': ('django.db.models.fields.FloatField', [], {'default': '0', 'blank': 'True'}),
            'raw_score': ('django.db.models.fields.FloatField', [], {'default': '0', 'blank': 'True'}),
            'student': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['auth.User']"}),
            'time_created': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'value': ('django.db.models.fields.TextField', [], {'null': 'True', 'blank': 'True'})
        },
        'c2g.examrecordscore': {
            'Meta': {'object_name': 'ExamRecordScore'},
            'csv_imported': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'last_updated': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'auto_now_add': 'True', 'blank': 'True'}),
            'raw_score': ('django.db.models.fields.FloatField', [], {'null': 'True', 'blank': 'True'}),
            'record': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['c2g.ExamRecord']", 'unique': 'True'}),
            'time_created': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'})
        },
        'c2g.examrecordscorefield': {
            'Meta': {'object_name': 'ExamRecordScoreField'},
            'associated_text': ('django.db.models.fields.TextField', [], {'null': 'True', 'blank': 'True'}),
            'comments': ('django.db.models.fields.TextField', [], {'null': 'True', 'blank': 'True'}),
            'correct': ('django.db.models.fields.NullBooleanField', [], {'null': 'True', 'blank': 'True'}),
            'field_name': ('django.db.models.fields.CharField', [], {'max_length': '128', 'db_index': 'True'}),
            'human_name': ('django.db.models.fields.CharField', [], {'db_index': 'True', 'max_length': '128', 'null': 'True', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'last_updated': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'auto_now_add': 'True', 'blank': 'True'}),
            'parent': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['c2g.ExamRecordScore']"}),
            'subscore': ('django.db.models.fields.FloatField', [], {'default': '0'}),
            'time_created': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'value': ('django.db.models.fields.TextField', [], {'null': 'True', 'blank': 'True'})
        },
        'c2g.examrecordscorefieldchoice': {
            'Meta': {'object_name': 'ExamRecordScoreFieldChoice'},
            'associated_text': ('django.db.models.fields.TextField', [], {'null': 'True', 'blank': 'True'}),
            'choice_value': ('django.db.models.fields.CharField', [], {'max_length': '128', 'db_index': 'True'}),
            'correct': ('django.db.models.fields.NullBooleanField', [], {'null': 'True', 'blank': 'True'}),
            'human_name': ('django.db.models.fields.CharField', [], {'db_index': 'True', 'max_length': '128', 'null': 'True', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'last_updated': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'auto_now_add': 'True', 'blank': 'True'}),
            'parent': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['c2g.ExamRecordScoreField']"}),
            'time_created': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'})
        },
        'c2g.examscore': {
            'Meta': {'unique_together': "(('exam', 'student'),)", 'object_name': 'ExamScore'},
            'course': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['c2g.Course']"}),
            'csv_imported': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'exam': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['c2g.Exam']"}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'last_updated': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'auto_now_add': 'True', 'blank': 'True'}),
            'score': ('django.db.models.fields.FloatField', [], {'null': 'True', 'blank': 'True'}),
            'student': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['auth.User']"}),
            'time_created': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'})
        },
        'c2g.examscorefield': {
            'Meta': {'object_name': 'ExamScoreField'},
            'associated_text': ('django.db.models.fields.TextField', [], {'null': 'True', 'blank': 'True'}),
            'comments': ('django.db.models.fields.TextField', [], {'null': 'True', 'blank': 'True'}),
            'correct': ('django.db.models.fields.NullBooleanField', [], {'null': 'True', 'blank': 'True'}),
            'field_name': ('django.db.models.fields.CharField', [], {'max_length': '128', 'db_index': 'True'}),
            'human_name': ('django.db.models.fields.CharField', [], {'db_index': 'True', 'max_length': '128', 'null': 'True', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'last_updated': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'auto_now_add': 'True', 'blank': 'True'}),
            'parent': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['c2g.ExamScore']"}),
            'subscore': ('django.db.models.fields.FloatField', [], {'default': '0'}),
            'time_created': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'value': ('django.db.models.fields.CharField', [], {'max_length': '128', 'null': 'True', 'blank': 'True'})
        },
        'c2g.exercise': {
            'Meta': {'object_name': 'Exercise', 'db_table': "u'c2g_exercises'"},
            'file': ('django.db.models.fields.files.FileField', [], {'max_length': '100', 'null': 'True'}),
            'fileName': ('django.db.models.fields.CharField', [], {'max_length': '255'}),
            'handle': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True', 'db_index': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'is_deleted': ('django.db.models.fields.IntegerField', [], {'default': '0'}),
            'last_updated': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'auto_now_add': 'True', 'blank': 'True'}),
            'problemSet': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['c2g.ProblemSet']", 'through': "orm['c2g.ProblemSetToExercise']", 'symmetrical': 'False'}),
            'time_created': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'video': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['c2g.Video']", 'through': "orm['c2g.VideoToExercise']", 'symmetrical': 'False'})
        },
        'c2g.file': {
            'Meta': {'object_name': 'File', 'db_table': "u'c2g_files'"},
            'course': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['c2g.Course']"}),
            'file': ('django.db.models.fields.files.FileField', [], {'max_length': '100'}),
            'handle': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True', 'db_index': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'image': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'to': "orm['c2g.File']"}),
            'index': ('django.db.models.fields.IntegerField', [], {'null': 'True', 'blank': 'True'}),
            'is_deleted': ('django.db.models.fields.IntegerField', [], {'default': '0'}),
            'last_updated': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'auto_now_add': 'True', 'blank': 'True'}),
            'live_datetime': ('django.db.models.fields.DateTimeField', [], {'null': 'True', 'blank': 'True'}),
            'mode': ('django.db.models.fields.TextField', [], {'blank': 'True'}),
            'section': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['c2g.ContentSection']", 'null': 'True'}),
            'time_created': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'title': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True', 'blank': 'True'})
        },
        'c2g.institution': {
            'Meta': {'object_name': 'Institution', 'db_table': "u'c2g_institutions'"},
            'city': ('django.db.models.fields.TextField', [], {'blank': 'True'}),
            'country': ('django.db.models.fields.TextField', [], {'blank': 'True'}),
            'domains': ('django.db.models.fields.TextField', [], {'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'last_updated': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'auto_now_add': 'True', 'blank': 'True'}),
            'time_created': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'title': ('django.db.models.fields.TextField', [], {})
        },
        'c2g.listemail': {
            'Meta': {'object_name': 'ListEmail'},
            'from_addr': ('django.db.models.fields.CharField', [], {'max_length': '128', 'blank': 'True'}),
            'from_name': ('django.db.models.fields.CharField', [], {'max_length': '128', 'blank': 'True'}),
            'hash': ('django.db.models.fields.CharField', [], {'max_length': '128', 'db_index': 'True'}),
            'html_message': ('django.db.models.fields.TextField', [], {'null': 'True', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'last_updated': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'auto_now_add': 'True', 'blank': 'True'}),
            'sender': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['auth.User']"}),
            'subject': ('django.db.models.fields.CharField', [], {'max_length': '128', 'blank': 'True'}),
            'time_created': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'to_list': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['c2g.MailingList']"})
        },
        'c2g.mailinglist': {
            'Meta': {'object_name': 'MailingList'},
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'members': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['c2g.EmailAddr']", 'symmetrical': 'False'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '128', 'blank': 'True'})
        },
        'c2g.newsevent': {
            'Meta': {'object_name': 'NewsEvent', 'db_table': "u'c2g_news_events'"},
            'course': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['c2g.Course']"}),
            'event': ('django.db.models.fields.CharField', [], {'max_length': '255'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'time_created': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'})
        },
        'c2g.pagevisitlog': {
            'Meta': {'object_name': 'PageVisitLog', 'db_table': "u'c2g_page_visit_log'"},
            'course': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['c2g.Course']"}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'last_updated': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'auto_now_add': 'True', 'blank': 'True'}),
            'object_id': ('django.db.models.fields.CharField', [], {'max_length': '128', 'blank': 'True'}),
            'page_type': ('django.db.models.fields.CharField', [], {'max_length': '128', 'db_index': 'True'}),
            'time_created': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'user': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['auth.User']"})
        },
        'c2g.problemactivity': {
            'Meta': {'object_name': 'ProblemActivity', 'db_table': "u'c2g_problem_activity'"},
            'attempt_content': ('django.db.models.fields.TextField', [], {'null': 'True', 'blank': 'True'}),
            'attempt_number': ('django.db.models.fields.IntegerField', [], {'null': 'True', 'blank': 'True'}),
            'card': ('django.db.models.fields.TextField', [], {'blank': 'True'}),
            'cards_done': ('django.db.models.fields.IntegerField', [], {'null': 'True', 'blank': 'True'}),
            'cards_left': ('django.db.models.fields.IntegerField', [], {'null': 'True', 'blank': 'True'}),
            'casing': ('django.db.models.fields.TextField', [], {'blank': 'True'}),
            'complete': ('django.db.models.fields.IntegerField', [], {'null': 'True', 'blank': 'True'}),
            'count_hints': ('django.db.models.fields.IntegerField', [], {'null': 'True', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'last_updated': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'auto_now_add': 'True', 'blank': 'True'}),
            'problem_identifier': ('django.db.models.fields.CharField', [], {'max_length': '255', 'blank': 'True'}),
            'problem_type': ('django.db.models.fields.TextField', [], {'blank': 'True'}),
            'problemset_to_exercise': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['c2g.ProblemSetToExercise']", 'null': 'True'}),
            'review_mode': ('django.db.models.fields.IntegerField', [], {'null': 'True', 'blank': 'True'}),
            'seed': ('django.db.models.fields.TextField', [], {'blank': 'True'}),
            'sha1': ('django.db.models.fields.TextField', [], {'blank': 'True'}),
            'student': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['auth.User']"}),
            'time_created': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'time_taken': ('django.db.models.fields.IntegerField', [], {'null': 'True', 'blank': 'True'}),
            'topic_mode': ('django.db.models.fields.IntegerField', [], {'null': 'True', 'blank': 'True'}),
            'user_choices': ('django.db.models.fields.CharField', [], {'max_length': '1024', 'null': 'True', 'blank': 'True'}),
            'user_selection_val': ('django.db.models.fields.CharField', [], {'max_length': '1024', 'null': 'True', 'blank': 'True'}),
            'video_to_exercise': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['c2g.VideoToExercise']", 'null': 'True'})
        },
        'c2g.problemset': {
            'Meta': {'object_name': 'ProblemSet', 'db_table': "u'c2g_problem_sets'"},
            'assessment_type': ('django.db.models.fields.CharField', [], {'max_length': '255'}),
            'course': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['c2g.Course']"}),
            'description': ('django.db.models.fields.TextField', [], {'blank': 'True'}),
            'due_date': ('django.db.models.fields.DateTimeField', [], {'null': 'True'}),
            'grace_period': ('django.db.models.fields.DateTimeField', [], {}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'image': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'to': "orm['c2g.ProblemSet']"}),
            'index': ('django.db.models.fields.IntegerField', [], {'null': 'True', 'blank': 'True'}),
            'is_deleted': ('django.db.models.fields.IntegerField', [], {'default': '0'}),
            'last_updated': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'auto_now_add': 'True', 'blank': 'True'}),
            'late_penalty': ('django.db.models.fields.IntegerField', [], {}),
            'live_datetime': ('django.db.models.fields.DateTimeField', [], {'null': 'True', 'blank': 'True'}),
            'mode': ('django.db.models.fields.TextField', [], {'blank': 'True'}),
            'partial_credit_deadline': ('django.db.models.fields.DateTimeField', [], {}),
            'path': ('django.db.models.fields.CharField', [], {'max_length': '255'}),
            'randomize': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'resubmission_penalty': ('django.db.models.fields.IntegerField', [], {}),
            'section': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['c2g.ContentSection']"}),
            'slug': ('django.db.models.fields.SlugField', [], {'max_length': '50'}),
            'submissions_permitted': ('django.db.models.fields.IntegerField', [], {}),
            'time_created': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'title': ('django.db.models.fields.CharField', [], {'max_length': '255'})
        },
        'c2g.problemsettoexercise': {
            'Meta': {'object_name': 'ProblemSetToExercise', 'db_table': "u'c2g_problemset_to_exercise'"},
            'exercise': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['c2g.Exercise']"}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'image': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['c2g.ProblemSetToExercise']", 'null': 'True', 'blank': 'True'}),
            'is_deleted': ('django.db.models.fields.IntegerField', [], {'default': '0'}),
            'mode': ('django.db.models.fields.TextField', [], {'blank': 'True'}),
            'number': ('django.db.models.fields.IntegerField', [], {'null': 'True', 'blank': 'True'}),
            'problemSet': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['c2g.ProblemSet']"})
        },
        'c2g.studentexamstart': {
            'Meta': {'object_name': 'StudentExamStart'},
            'exam': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['c2g.Exam']"}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'last_updated': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'auto_now_add': 'True', 'blank': 'True'}),
            'student': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['auth.User']"}),
            'time_created': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'})
        },
        'c2g.studentsection': {
            'Meta': {'object_name': 'StudentSection', 'db_table': "u'c2g_sections'"},
            'capacity': ('django.db.models.fields.IntegerField', [], {'default': '999'}),
            'course': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['c2g.Course']"}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'is_deleted': ('django.db.models.fields.IntegerField', [], {'default': '0'}),
            'last_updated': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'auto_now_add': 'True', 'blank': 'True'}),
            'members': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['auth.User']", 'symmetrical': 'False'}),
            'time_created': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'title': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True', 'blank': 'True'})
        },
        'c2g.userprofile': {
            'Meta': {'object_name': 'UserProfile', 'db_table': "u'c2g_user_profiles'"},
            'accept_language': ('django.db.models.fields.CharField', [], {'max_length': '64', 'null': 'True'}),
            'accept_language_first': ('django.db.models.fields.CharField', [], {'max_length': '64', 'null': 'True'}),
            'birth_year': ('django.db.models.fields.CharField', [], {'max_length': '64', 'null': 'True'}),
            'client_ip': ('django.db.models.fields.CharField', [], {'max_length': '30', 'null': 'True'}),
            'client_ip_first': ('django.db.models.fields.CharField', [], {'max_length': '30', 'null': 'True'}),
            'education': ('django.db.models.fields.CharField', [], {'max_length': '64', 'null': 'True'}),
            'email_me': ('django.db.models.fields.BooleanField', [], {'default': 'True'}),
            'gender': ('django.db.models.fields.CharField', [], {'max_length': '64', 'null': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'institutions': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['c2g.Institution']", 'symmetrical': 'False'}),
            'last_updated': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'auto_now_add': 'True', 'blank': 'True'}),
            'piazza_email': ('django.db.models.fields.CharField', [], {'max_length': '128', 'blank': 'True'}),
            'piazza_name': ('django.db.models.fields.CharField', [], {'max_length': '128', 'blank': 'True'}),
            'referrer': ('django.db.models.fields.CharField', [], {'max_length': '256', 'null': 'True'}),
            'referrer_first': ('django.db.models.fields.CharField', [], {'max_length': '256', 'null': 'True'}),
            'site_data': ('django.db.models.fields.TextField', [], {'blank': 'True'}),
            'time_created': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'user': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['auth.User']", 'unique': 'True'}),
            'user_agent': ('django.db.models.fields.CharField', [], {'max_length': '256', 'null': 'True'}),
            'user_agent_first': ('django.db.models.fields.CharField', [], {'max_length': '256', 'null': 'True'}),
            'work': ('django.db.models.fields.CharField', [], {'max_length': '128', 'null': 'True'})
        },
        'c2g.video': {
            'Meta': {'object_name': 'Video', 'db_table': "u'c2g_videos'"},
            'course': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['c2g.Course']"}),
            'description': ('django.db.models.fields.TextField', [], {'blank': 'True'}),
            'duration': ('django.db.models.fields.IntegerField', [], {'null': 'True', 'blank': 'True'}),
            'exam': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['c2g.Exam']", 'null': 'True', 'blank': 'True'}),
            'file': ('django.db.models.fields.files.FileField', [], {'max_length': '100'}),
            'handle': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True', 'db_index': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'image': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'to': "orm['c2g.Video']"}),
            'index': ('django.db.models.fields.IntegerField', [], {'null': 'True', 'blank': 'True'}),
            'is_deleted': ('django.db.models.fields.IntegerField', [], {'default': '0'}),
            'last_updated': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'auto_now_add': 'True', 'blank': 'True'}),
            'live_datetime': ('django.db.models.fields.DateTimeField', [], {'null': 'True', 'blank': 'True'}),
            'mode': ('django.db.models.fields.TextField', [], {'blank': 'True'}),
            'section': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['c2g.ContentSection']", 'null': 'True'}),
            'slug': ('django.db.models.fields.SlugField', [], {'max_length': '255', 'null': 'True'}),
            'time_created': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'title': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True', 'blank': 'True'}),
            'type': ('django.db.models.fields.CharField', [], {'default': "'youtube'", 'max_length': '30'}),
            'url': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True', 'blank': 'True'})
        },
        'c2g.videoactivity': {
            'Meta': {'object_name': 'VideoActivity', 'db_table': "u'c2g_video_activity'"},
            'course': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['c2g.Course']"}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'max_end_seconds': ('django.db.models.fields.IntegerField', [], {'default': '0', 'blank': 'True'}),
            'start_seconds': ('django.db.models.fields.IntegerField', [], {'default': '0', 'blank': 'True'}),
            'student': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['auth.User']"}),
            'video': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['c2g.Video']"})
        },
        'c2g.videodownload': {
            'Meta': {'object_name': 'VideoDownload', 'db_table': "u'c2g_video_download'"},
            'course': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['c2g.Course']"}),
            'download_date': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'format': ('django.db.models.fields.CharField', [], {'max_length': '35', 'null': 'True', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'student': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['auth.User']"}),
            'video': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['c2g.Video']"})
        },
        'c2g.videotoexercise': {
            'Meta': {'object_name': 'VideoToExercise', 'db_table': "u'c2g_video_to_exercise'"},
            'exercise': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['c2g.Exercise']"}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'image': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['c2g.VideoToExercise']", 'null': 'True', 'blank': 'True'}),
            'is_deleted': ('django.db.models.fields.IntegerField', [], {'default': '0'}),
            'mode': ('django.db.models.fields.TextField', [], {'blank': 'True'}),
            'video': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['c2g.Video']"}),
            'video_time': ('django.db.models.fields.IntegerField', [], {})
        },
        'c2g.videoviewtraces': {
            'Meta': {'object_name': 'VideoViewTraces', 'db_table': "u'c2g_video_view_traces'"},
            'course': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['c2g.Course']"}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'last_updated': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'auto_now_add': 'True', 'blank': 'True'}),
            'time_created': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'trace': ('django.db.models.fields.TextField', [], {'blank': 'True'}),
            'user': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['auth.User']"}),
            'video': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['c2g.Video']"})
        },
        'contenttypes.contenttype': {
            'Meta': {'ordering': "('name',)", 'unique_together': "(('app_label', 'model'),)", 'object_name': 'ContentType', 'db_table': "'django_content_type'"},
            'app_label': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'model': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '100'})
        }
    }

    complete_apps = ['c2g']
########NEW FILE########
__FILENAME__ = 0002_auto__add_instructor__add_courseinstructor__add_field_course_short_des
# -*- coding: utf-8 -*-
import datetime
from south.db import db
from south.v2 import SchemaMigration
from django.db import models


class Migration(SchemaMigration):

    def forwards(self, orm):
        # Adding model 'Instructor'
        db.create_table(u'c2g_instructor', (
            ('id', self.gf('django.db.models.fields.AutoField')(primary_key=True)),
            ('time_created', self.gf('django.db.models.fields.DateTimeField')(auto_now_add=True, blank=True)),
            ('last_updated', self.gf('django.db.models.fields.DateTimeField')(auto_now=True, auto_now_add=True, blank=True)),
            ('name', self.gf('django.db.models.fields.TextField')(blank=True)),
            ('email', self.gf('django.db.models.fields.TextField')(blank=True)),
            ('biography', self.gf('django.db.models.fields.TextField')(blank=True)),
            ('photo', self.gf('django.db.models.fields.files.FileField')(max_length=100, blank=True)),
            ('handle', self.gf('django.db.models.fields.CharField')(max_length=255, null=True, db_index=True)),
        ))
        db.send_create_signal('c2g', ['Instructor'])

        # Adding model 'CourseInstructor'
        db.create_table(u'c2g_course_instructor', (
            ('id', self.gf('django.db.models.fields.AutoField')(primary_key=True)),
            ('time_created', self.gf('django.db.models.fields.DateTimeField')(auto_now_add=True, blank=True)),
            ('last_updated', self.gf('django.db.models.fields.DateTimeField')(auto_now=True, auto_now_add=True, blank=True)),
            ('course', self.gf('django.db.models.fields.related.ForeignKey')(to=orm['c2g.Course'])),
            ('instructor', self.gf('django.db.models.fields.related.ForeignKey')(to=orm['c2g.Instructor'])),
        ))
        db.send_create_signal('c2g', ['CourseInstructor'])

        # Adding field 'Course.short_description'
        db.add_column(u'c2g_courses', 'short_description',
                      self.gf('django.db.models.fields.TextField')(default='', blank=True),
                      keep_default=False)

        # Adding field 'Course.prerequisites'
        db.add_column(u'c2g_courses', 'prerequisites',
                      self.gf('django.db.models.fields.TextField')(default='', blank=True),
                      keep_default=False)

        # Adding field 'Course.accompanying_materials'
        db.add_column(u'c2g_courses', 'accompanying_materials',
                      self.gf('django.db.models.fields.TextField')(default='', blank=True),
                      keep_default=False)

        # Adding field 'Course.outcomes'
        db.add_column(u'c2g_courses', 'outcomes',
                      self.gf('django.db.models.fields.TextField')(default='', blank=True),
                      keep_default=False)

        # Adding field 'Course.faq'
        db.add_column(u'c2g_courses', 'faq',
                      self.gf('django.db.models.fields.TextField')(default='', blank=True),
                      keep_default=False)

        # Adding field 'Course.logo'
        db.add_column(u'c2g_courses', 'logo',
                      self.gf('django.db.models.fields.files.FileField')(max_length=100, null=True),
                      keep_default=False)


    def backwards(self, orm):
        # Deleting model 'Instructor'
        db.delete_table(u'c2g_instructor')

        # Deleting model 'CourseInstructor'
        db.delete_table(u'c2g_course_instructor')

        # Deleting field 'Course.short_description'
        db.delete_column(u'c2g_courses', 'short_description')

        # Deleting field 'Course.prerequisites'
        db.delete_column(u'c2g_courses', 'prerequisites')

        # Deleting field 'Course.accompanying_materials'
        db.delete_column(u'c2g_courses', 'accompanying_materials')

        # Deleting field 'Course.outcomes'
        db.delete_column(u'c2g_courses', 'outcomes')

        # Deleting field 'Course.faq'
        db.delete_column(u'c2g_courses', 'faq')

        # Deleting field 'Course.logo'
        db.delete_column(u'c2g_courses', 'logo')


    models = {
        'auth.group': {
            'Meta': {'object_name': 'Group'},
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '80'}),
            'permissions': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['auth.Permission']", 'symmetrical': 'False', 'blank': 'True'})
        },
        'auth.permission': {
            'Meta': {'ordering': "('content_type__app_label', 'content_type__model', 'codename')", 'unique_together': "(('content_type', 'codename'),)", 'object_name': 'Permission'},
            'codename': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'content_type': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['contenttypes.ContentType']"}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '50'})
        },
        'auth.user': {
            'Meta': {'object_name': 'User'},
            'date_joined': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
            'email': ('django.db.models.fields.EmailField', [], {'max_length': '75', 'blank': 'True'}),
            'first_name': ('django.db.models.fields.CharField', [], {'max_length': '30', 'blank': 'True'}),
            'groups': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['auth.Group']", 'symmetrical': 'False', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'is_active': ('django.db.models.fields.BooleanField', [], {'default': 'True'}),
            'is_staff': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'is_superuser': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'last_login': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
            'last_name': ('django.db.models.fields.CharField', [], {'max_length': '30', 'blank': 'True'}),
            'password': ('django.db.models.fields.CharField', [], {'max_length': '128'}),
            'user_permissions': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['auth.Permission']", 'symmetrical': 'False', 'blank': 'True'}),
            'username': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '30'})
        },
        'c2g.additionalpage': {
            'Meta': {'object_name': 'AdditionalPage', 'db_table': "u'c2g_additional_pages'"},
            'course': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['c2g.Course']"}),
            'description': ('django.db.models.fields.TextField', [], {'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'image': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'to': "orm['c2g.AdditionalPage']"}),
            'index': ('django.db.models.fields.IntegerField', [], {'null': 'True', 'blank': 'True'}),
            'is_deleted': ('django.db.models.fields.IntegerField', [], {'default': '0'}),
            'last_updated': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'auto_now_add': 'True', 'blank': 'True'}),
            'live_datetime': ('django.db.models.fields.DateTimeField', [], {'null': 'True', 'blank': 'True'}),
            'menu_slug': ('django.db.models.fields.SlugField', [], {'max_length': '255', 'null': 'True', 'blank': 'True'}),
            'mode': ('django.db.models.fields.TextField', [], {'blank': 'True'}),
            'section': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['c2g.ContentSection']", 'null': 'True'}),
            'slug': ('django.db.models.fields.SlugField', [], {'max_length': '255', 'null': 'True', 'blank': 'True'}),
            'time_created': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'title': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True', 'blank': 'True'})
        },
        'c2g.announcement': {
            'Meta': {'object_name': 'Announcement', 'db_table': "u'c2g_announcements'"},
            'course': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['c2g.Course']"}),
            'description': ('django.db.models.fields.TextField', [], {'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'image': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'to': "orm['c2g.Announcement']"}),
            'index': ('django.db.models.fields.IntegerField', [], {'null': 'True', 'blank': 'True'}),
            'is_deleted': ('django.db.models.fields.IntegerField', [], {'default': '0'}),
            'last_updated': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'auto_now_add': 'True', 'blank': 'True'}),
            'live_datetime': ('django.db.models.fields.DateTimeField', [], {'null': 'True', 'blank': 'True'}),
            'mode': ('django.db.models.fields.TextField', [], {'blank': 'True'}),
            'owner': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['auth.User']"}),
            'time_created': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'title': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True', 'blank': 'True'})
        },
        'c2g.contentgroup': {
            'Meta': {'object_name': 'ContentGroup', 'db_table': "u'c2g_content_group'"},
            'additional_page': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['c2g.AdditionalPage']", 'null': 'True', 'blank': 'True'}),
            'course': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['c2g.Course']"}),
            'display_style': ('django.db.models.fields.CharField', [], {'default': "'list'", 'max_length': '32', 'blank': 'True'}),
            'exam': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['c2g.Exam']", 'null': 'True', 'blank': 'True'}),
            'file': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['c2g.File']", 'null': 'True', 'blank': 'True'}),
            'group_id': ('django.db.models.fields.IntegerField', [], {'db_index': 'True', 'null': 'True', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'level': ('django.db.models.fields.IntegerField', [], {'db_index': 'True'}),
            'problemSet': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['c2g.ProblemSet']", 'null': 'True', 'blank': 'True'}),
            'video': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['c2g.Video']", 'null': 'True', 'blank': 'True'})
        },
        'c2g.contentsection': {
            'Meta': {'object_name': 'ContentSection', 'db_table': "u'c2g_content_sections'"},
            'course': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['c2g.Course']"}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'image': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'to': "orm['c2g.ContentSection']"}),
            'index': ('django.db.models.fields.IntegerField', [], {'null': 'True', 'blank': 'True'}),
            'is_deleted': ('django.db.models.fields.IntegerField', [], {'default': '0'}),
            'last_updated': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'auto_now_add': 'True', 'blank': 'True'}),
            'live_datetime': ('django.db.models.fields.DateTimeField', [], {'null': 'True', 'blank': 'True'}),
            'mode': ('django.db.models.fields.TextField', [], {'blank': 'True'}),
            'slug': ('django.db.models.fields.SlugField', [], {'max_length': '255', 'null': 'True', 'blank': 'True'}),
            'subtitle': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True', 'blank': 'True'}),
            'time_created': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'title': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True', 'blank': 'True'})
        },
        'c2g.course': {
            'Meta': {'object_name': 'Course', 'db_table': "u'c2g_courses'"},
            'accompanying_materials': ('django.db.models.fields.TextField', [], {'blank': 'True'}),
            'calendar_end': ('django.db.models.fields.DateField', [], {'null': 'True', 'blank': 'True'}),
            'calendar_start': ('django.db.models.fields.DateField', [], {'null': 'True', 'blank': 'True'}),
            'contact': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True', 'blank': 'True'}),
            'description': ('django.db.models.fields.TextField', [], {'blank': 'True'}),
            'faq': ('django.db.models.fields.TextField', [], {'blank': 'True'}),
            'handle': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True', 'db_index': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'image': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'to': "orm['c2g.Course']"}),
            'institution': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['c2g.Institution']", 'null': 'True'}),
            'institution_only': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'instructor_group': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'instructor_group'", 'to': "orm['auth.Group']"}),
            'is_deleted': ('django.db.models.fields.IntegerField', [], {'default': '0'}),
            'last_updated': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'auto_now_add': 'True', 'blank': 'True'}),
            'list_publicly': ('django.db.models.fields.IntegerField', [], {'null': 'True', 'blank': 'True'}),
            'live_datetime': ('django.db.models.fields.DateTimeField', [], {'null': 'True', 'blank': 'True'}),
            'logo': ('django.db.models.fields.files.FileField', [], {'max_length': '100', 'null': 'True'}),
            'mode': ('django.db.models.fields.TextField', [], {'blank': 'True'}),
            'outcomes': ('django.db.models.fields.TextField', [], {'blank': 'True'}),
            'piazza_id': ('django.db.models.fields.IntegerField', [], {'null': 'True', 'blank': 'True'}),
            'prerequisites': ('django.db.models.fields.TextField', [], {'blank': 'True'}),
            'preview_only_mode': ('django.db.models.fields.BooleanField', [], {'default': 'True'}),
            'readonly_tas_group': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'readonly_tas_group'", 'to': "orm['auth.Group']"}),
            'share_to': ('django.db.models.fields.related.ManyToManyField', [], {'blank': 'True', 'related_name': "'share_from'", 'null': 'True', 'symmetrical': 'False', 'to': "orm['c2g.Course']"}),
            'short_description': ('django.db.models.fields.TextField', [], {'blank': 'True'}),
            'student_group': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'student_group'", 'to': "orm['auth.Group']"}),
            'syllabus': ('django.db.models.fields.TextField', [], {'blank': 'True'}),
            'tas_group': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'tas_group'", 'to': "orm['auth.Group']"}),
            'term': ('django.db.models.fields.TextField', [], {'blank': 'True'}),
            'time_created': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'title': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True', 'blank': 'True'}),
            'year': ('django.db.models.fields.IntegerField', [], {'null': 'True', 'blank': 'True'})
        },
        'c2g.courseemail': {
            'Meta': {'object_name': 'CourseEmail', 'db_table': "u'c2g_course_emails'"},
            'course': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['c2g.Course']"}),
            'hash': ('django.db.models.fields.CharField', [], {'max_length': '128', 'db_index': 'True'}),
            'html_message': ('django.db.models.fields.TextField', [], {'null': 'True', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'last_updated': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'auto_now_add': 'True', 'blank': 'True'}),
            'sender': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['auth.User']"}),
            'subject': ('django.db.models.fields.CharField', [], {'max_length': '128', 'blank': 'True'}),
            'time_created': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'to': ('django.db.models.fields.CharField', [], {'default': "'myself'", 'max_length': '64'})
        },
        'c2g.courseinstructor': {
            'Meta': {'object_name': 'CourseInstructor', 'db_table': "u'c2g_course_instructor'"},
            'course': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['c2g.Course']"}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'instructor': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['c2g.Instructor']"}),
            'last_updated': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'auto_now_add': 'True', 'blank': 'True'}),
            'time_created': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'})
        },
        'c2g.currenttermmap': {
            'Meta': {'object_name': 'CurrentTermMap'},
            'course_prefix': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '64', 'db_index': 'True'}),
            'course_suffix': ('django.db.models.fields.CharField', [], {'max_length': '64'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'last_updated': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'auto_now_add': 'True', 'blank': 'True'}),
            'time_created': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'})
        },
        'c2g.emailaddr': {
            'Meta': {'object_name': 'EmailAddr'},
            'addr': ('django.db.models.fields.EmailField', [], {'max_length': '128'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '128', 'null': 'True', 'blank': 'True'}),
            'optout': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'optout_code': ('django.db.models.fields.CharField', [], {'default': "'optout'", 'max_length': '64'})
        },
        'c2g.exam': {
            'Meta': {'object_name': 'Exam'},
            'assessment_type': ('django.db.models.fields.CharField', [], {'max_length': '64', 'null': 'True', 'blank': 'True'}),
            'autograde': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'course': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['c2g.Course']"}),
            'description': ('django.db.models.fields.TextField', [], {'null': 'True', 'blank': 'True'}),
            'display_single': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'due_date': ('django.db.models.fields.DateTimeField', [], {'null': 'True', 'blank': 'True'}),
            'exam_type': ('django.db.models.fields.CharField', [], {'default': "'exam'", 'max_length': '32'}),
            'grace_period': ('django.db.models.fields.DateTimeField', [], {'null': 'True', 'blank': 'True'}),
            'grade_single': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'html_content': ('django.db.models.fields.TextField', [], {'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'image': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'to': "orm['c2g.Exam']"}),
            'index': ('django.db.models.fields.IntegerField', [], {'null': 'True', 'blank': 'True'}),
            'invideo': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'is_deleted': ('django.db.models.fields.IntegerField', [], {'default': '0'}),
            'last_updated': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'auto_now_add': 'True', 'blank': 'True'}),
            'late_penalty': ('django.db.models.fields.IntegerField', [], {'default': '0', 'null': 'True', 'blank': 'True'}),
            'live_datetime': ('django.db.models.fields.DateTimeField', [], {'null': 'True', 'blank': 'True'}),
            'minutes_btw_attempts': ('django.db.models.fields.IntegerField', [], {'default': '0'}),
            'minutesallowed': ('django.db.models.fields.IntegerField', [], {'null': 'True', 'blank': 'True'}),
            'mode': ('django.db.models.fields.TextField', [], {'blank': 'True'}),
            'partial_credit_deadline': ('django.db.models.fields.DateTimeField', [], {'null': 'True', 'blank': 'True'}),
            'resubmission_penalty': ('django.db.models.fields.IntegerField', [], {'default': '0', 'null': 'True', 'blank': 'True'}),
            'section': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['c2g.ContentSection']", 'null': 'True'}),
            'slug': ('django.db.models.fields.SlugField', [], {'max_length': '255', 'null': 'True'}),
            'submissions_permitted': ('django.db.models.fields.IntegerField', [], {'default': '999', 'null': 'True', 'blank': 'True'}),
            'time_created': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'timed': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'title': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True', 'blank': 'True'}),
            'total_score': ('django.db.models.fields.FloatField', [], {'null': 'True', 'blank': 'True'}),
            'xml_imported': ('django.db.models.fields.TextField', [], {'null': 'True', 'blank': 'True'}),
            'xml_metadata': ('django.db.models.fields.TextField', [], {'null': 'True', 'blank': 'True'})
        },
        'c2g.examrecord': {
            'Meta': {'object_name': 'ExamRecord'},
            'attempt_number': ('django.db.models.fields.IntegerField', [], {'default': '0'}),
            'complete': ('django.db.models.fields.BooleanField', [], {'default': 'True'}),
            'course': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['c2g.Course']"}),
            'exam': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['c2g.Exam']"}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'json_data': ('django.db.models.fields.TextField', [], {'null': 'True', 'blank': 'True'}),
            'json_score_data': ('django.db.models.fields.TextField', [], {'null': 'True', 'blank': 'True'}),
            'last_updated': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'auto_now_add': 'True', 'blank': 'True'}),
            'late': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'onpage': ('django.db.models.fields.CharField', [], {'max_length': '512', 'null': 'True', 'blank': 'True'}),
            'score': ('django.db.models.fields.FloatField', [], {'null': 'True', 'blank': 'True'}),
            'student': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['auth.User']"}),
            'time_created': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'})
        },
        'c2g.examrecordfieldlog': {
            'Meta': {'object_name': 'ExamRecordFieldLog'},
            'course': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['c2g.Course']"}),
            'exam': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['c2g.Exam']"}),
            'field_name': ('django.db.models.fields.CharField', [], {'max_length': '128', 'db_index': 'True'}),
            'human_name': ('django.db.models.fields.CharField', [], {'db_index': 'True', 'max_length': '128', 'null': 'True', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'last_updated': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'auto_now_add': 'True', 'blank': 'True'}),
            'max_score': ('django.db.models.fields.FloatField', [], {'default': '0', 'blank': 'True'}),
            'raw_score': ('django.db.models.fields.FloatField', [], {'default': '0', 'blank': 'True'}),
            'student': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['auth.User']"}),
            'time_created': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'value': ('django.db.models.fields.TextField', [], {'null': 'True', 'blank': 'True'})
        },
        'c2g.examrecordscore': {
            'Meta': {'object_name': 'ExamRecordScore'},
            'csv_imported': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'last_updated': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'auto_now_add': 'True', 'blank': 'True'}),
            'raw_score': ('django.db.models.fields.FloatField', [], {'null': 'True', 'blank': 'True'}),
            'record': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['c2g.ExamRecord']", 'unique': 'True'}),
            'time_created': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'})
        },
        'c2g.examrecordscorefield': {
            'Meta': {'object_name': 'ExamRecordScoreField'},
            'associated_text': ('django.db.models.fields.TextField', [], {'null': 'True', 'blank': 'True'}),
            'comments': ('django.db.models.fields.TextField', [], {'null': 'True', 'blank': 'True'}),
            'correct': ('django.db.models.fields.NullBooleanField', [], {'null': 'True', 'blank': 'True'}),
            'field_name': ('django.db.models.fields.CharField', [], {'max_length': '128', 'db_index': 'True'}),
            'human_name': ('django.db.models.fields.CharField', [], {'db_index': 'True', 'max_length': '128', 'null': 'True', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'last_updated': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'auto_now_add': 'True', 'blank': 'True'}),
            'parent': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['c2g.ExamRecordScore']"}),
            'subscore': ('django.db.models.fields.FloatField', [], {'default': '0'}),
            'time_created': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'value': ('django.db.models.fields.TextField', [], {'null': 'True', 'blank': 'True'})
        },
        'c2g.examrecordscorefieldchoice': {
            'Meta': {'object_name': 'ExamRecordScoreFieldChoice'},
            'associated_text': ('django.db.models.fields.TextField', [], {'null': 'True', 'blank': 'True'}),
            'choice_value': ('django.db.models.fields.CharField', [], {'max_length': '128', 'db_index': 'True'}),
            'correct': ('django.db.models.fields.NullBooleanField', [], {'null': 'True', 'blank': 'True'}),
            'human_name': ('django.db.models.fields.CharField', [], {'db_index': 'True', 'max_length': '128', 'null': 'True', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'last_updated': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'auto_now_add': 'True', 'blank': 'True'}),
            'parent': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['c2g.ExamRecordScoreField']"}),
            'time_created': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'})
        },
        'c2g.examscore': {
            'Meta': {'unique_together': "(('exam', 'student'),)", 'object_name': 'ExamScore'},
            'course': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['c2g.Course']"}),
            'csv_imported': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'exam': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['c2g.Exam']"}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'last_updated': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'auto_now_add': 'True', 'blank': 'True'}),
            'score': ('django.db.models.fields.FloatField', [], {'null': 'True', 'blank': 'True'}),
            'student': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['auth.User']"}),
            'time_created': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'})
        },
        'c2g.examscorefield': {
            'Meta': {'object_name': 'ExamScoreField'},
            'associated_text': ('django.db.models.fields.TextField', [], {'null': 'True', 'blank': 'True'}),
            'comments': ('django.db.models.fields.TextField', [], {'null': 'True', 'blank': 'True'}),
            'correct': ('django.db.models.fields.NullBooleanField', [], {'null': 'True', 'blank': 'True'}),
            'field_name': ('django.db.models.fields.CharField', [], {'max_length': '128', 'db_index': 'True'}),
            'human_name': ('django.db.models.fields.CharField', [], {'db_index': 'True', 'max_length': '128', 'null': 'True', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'last_updated': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'auto_now_add': 'True', 'blank': 'True'}),
            'parent': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['c2g.ExamScore']"}),
            'subscore': ('django.db.models.fields.FloatField', [], {'default': '0'}),
            'time_created': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'value': ('django.db.models.fields.CharField', [], {'max_length': '128', 'null': 'True', 'blank': 'True'})
        },
        'c2g.exercise': {
            'Meta': {'object_name': 'Exercise', 'db_table': "u'c2g_exercises'"},
            'file': ('django.db.models.fields.files.FileField', [], {'max_length': '100', 'null': 'True'}),
            'fileName': ('django.db.models.fields.CharField', [], {'max_length': '255'}),
            'handle': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True', 'db_index': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'is_deleted': ('django.db.models.fields.IntegerField', [], {'default': '0'}),
            'last_updated': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'auto_now_add': 'True', 'blank': 'True'}),
            'problemSet': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['c2g.ProblemSet']", 'through': "orm['c2g.ProblemSetToExercise']", 'symmetrical': 'False'}),
            'time_created': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'video': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['c2g.Video']", 'through': "orm['c2g.VideoToExercise']", 'symmetrical': 'False'})
        },
        'c2g.file': {
            'Meta': {'object_name': 'File', 'db_table': "u'c2g_files'"},
            'course': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['c2g.Course']"}),
            'file': ('django.db.models.fields.files.FileField', [], {'max_length': '100'}),
            'handle': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True', 'db_index': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'image': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'to': "orm['c2g.File']"}),
            'index': ('django.db.models.fields.IntegerField', [], {'null': 'True', 'blank': 'True'}),
            'is_deleted': ('django.db.models.fields.IntegerField', [], {'default': '0'}),
            'last_updated': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'auto_now_add': 'True', 'blank': 'True'}),
            'live_datetime': ('django.db.models.fields.DateTimeField', [], {'null': 'True', 'blank': 'True'}),
            'mode': ('django.db.models.fields.TextField', [], {'blank': 'True'}),
            'section': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['c2g.ContentSection']", 'null': 'True'}),
            'time_created': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'title': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True', 'blank': 'True'})
        },
        'c2g.institution': {
            'Meta': {'object_name': 'Institution', 'db_table': "u'c2g_institutions'"},
            'city': ('django.db.models.fields.TextField', [], {'blank': 'True'}),
            'country': ('django.db.models.fields.TextField', [], {'blank': 'True'}),
            'domains': ('django.db.models.fields.TextField', [], {'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'last_updated': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'auto_now_add': 'True', 'blank': 'True'}),
            'time_created': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'title': ('django.db.models.fields.TextField', [], {})
        },
        'c2g.instructor': {
            'Meta': {'object_name': 'Instructor'},
            'biography': ('django.db.models.fields.TextField', [], {'blank': 'True'}),
            'email': ('django.db.models.fields.TextField', [], {'blank': 'True'}),
            'handle': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True', 'db_index': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'last_updated': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'auto_now_add': 'True', 'blank': 'True'}),
            'name': ('django.db.models.fields.TextField', [], {'blank': 'True'}),
            'photo': ('django.db.models.fields.files.FileField', [], {'max_length': '100', 'blank': 'True'}),
            'time_created': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'})
        },
        'c2g.listemail': {
            'Meta': {'object_name': 'ListEmail'},
            'from_addr': ('django.db.models.fields.CharField', [], {'max_length': '128', 'blank': 'True'}),
            'from_name': ('django.db.models.fields.CharField', [], {'max_length': '128', 'blank': 'True'}),
            'hash': ('django.db.models.fields.CharField', [], {'max_length': '128', 'db_index': 'True'}),
            'html_message': ('django.db.models.fields.TextField', [], {'null': 'True', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'last_updated': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'auto_now_add': 'True', 'blank': 'True'}),
            'sender': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['auth.User']"}),
            'subject': ('django.db.models.fields.CharField', [], {'max_length': '128', 'blank': 'True'}),
            'time_created': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'to_list': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['c2g.MailingList']"})
        },
        'c2g.mailinglist': {
            'Meta': {'object_name': 'MailingList'},
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'members': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['c2g.EmailAddr']", 'symmetrical': 'False'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '128', 'blank': 'True'})
        },
        'c2g.newsevent': {
            'Meta': {'object_name': 'NewsEvent', 'db_table': "u'c2g_news_events'"},
            'course': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['c2g.Course']"}),
            'event': ('django.db.models.fields.CharField', [], {'max_length': '255'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'time_created': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'})
        },
        'c2g.pagevisitlog': {
            'Meta': {'object_name': 'PageVisitLog', 'db_table': "u'c2g_page_visit_log'"},
            'course': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['c2g.Course']"}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'last_updated': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'auto_now_add': 'True', 'blank': 'True'}),
            'object_id': ('django.db.models.fields.CharField', [], {'max_length': '128', 'blank': 'True'}),
            'page_type': ('django.db.models.fields.CharField', [], {'max_length': '128', 'db_index': 'True'}),
            'time_created': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'user': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['auth.User']"})
        },
        'c2g.problemactivity': {
            'Meta': {'object_name': 'ProblemActivity', 'db_table': "u'c2g_problem_activity'"},
            'attempt_content': ('django.db.models.fields.TextField', [], {'null': 'True', 'blank': 'True'}),
            'attempt_number': ('django.db.models.fields.IntegerField', [], {'null': 'True', 'blank': 'True'}),
            'card': ('django.db.models.fields.TextField', [], {'blank': 'True'}),
            'cards_done': ('django.db.models.fields.IntegerField', [], {'null': 'True', 'blank': 'True'}),
            'cards_left': ('django.db.models.fields.IntegerField', [], {'null': 'True', 'blank': 'True'}),
            'casing': ('django.db.models.fields.TextField', [], {'blank': 'True'}),
            'complete': ('django.db.models.fields.IntegerField', [], {'null': 'True', 'blank': 'True'}),
            'count_hints': ('django.db.models.fields.IntegerField', [], {'null': 'True', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'last_updated': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'auto_now_add': 'True', 'blank': 'True'}),
            'problem_identifier': ('django.db.models.fields.CharField', [], {'max_length': '255', 'blank': 'True'}),
            'problem_type': ('django.db.models.fields.TextField', [], {'blank': 'True'}),
            'problemset_to_exercise': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['c2g.ProblemSetToExercise']", 'null': 'True'}),
            'review_mode': ('django.db.models.fields.IntegerField', [], {'null': 'True', 'blank': 'True'}),
            'seed': ('django.db.models.fields.TextField', [], {'blank': 'True'}),
            'sha1': ('django.db.models.fields.TextField', [], {'blank': 'True'}),
            'student': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['auth.User']"}),
            'time_created': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'time_taken': ('django.db.models.fields.IntegerField', [], {'null': 'True', 'blank': 'True'}),
            'topic_mode': ('django.db.models.fields.IntegerField', [], {'null': 'True', 'blank': 'True'}),
            'user_choices': ('django.db.models.fields.CharField', [], {'max_length': '1024', 'null': 'True', 'blank': 'True'}),
            'user_selection_val': ('django.db.models.fields.CharField', [], {'max_length': '1024', 'null': 'True', 'blank': 'True'}),
            'video_to_exercise': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['c2g.VideoToExercise']", 'null': 'True'})
        },
        'c2g.problemset': {
            'Meta': {'object_name': 'ProblemSet', 'db_table': "u'c2g_problem_sets'"},
            'assessment_type': ('django.db.models.fields.CharField', [], {'max_length': '255'}),
            'course': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['c2g.Course']"}),
            'description': ('django.db.models.fields.TextField', [], {'blank': 'True'}),
            'due_date': ('django.db.models.fields.DateTimeField', [], {'null': 'True'}),
            'grace_period': ('django.db.models.fields.DateTimeField', [], {}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'image': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'to': "orm['c2g.ProblemSet']"}),
            'index': ('django.db.models.fields.IntegerField', [], {'null': 'True', 'blank': 'True'}),
            'is_deleted': ('django.db.models.fields.IntegerField', [], {'default': '0'}),
            'last_updated': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'auto_now_add': 'True', 'blank': 'True'}),
            'late_penalty': ('django.db.models.fields.IntegerField', [], {}),
            'live_datetime': ('django.db.models.fields.DateTimeField', [], {'null': 'True', 'blank': 'True'}),
            'mode': ('django.db.models.fields.TextField', [], {'blank': 'True'}),
            'partial_credit_deadline': ('django.db.models.fields.DateTimeField', [], {}),
            'path': ('django.db.models.fields.CharField', [], {'max_length': '255'}),
            'randomize': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'resubmission_penalty': ('django.db.models.fields.IntegerField', [], {}),
            'section': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['c2g.ContentSection']"}),
            'slug': ('django.db.models.fields.SlugField', [], {'max_length': '50'}),
            'submissions_permitted': ('django.db.models.fields.IntegerField', [], {}),
            'time_created': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'title': ('django.db.models.fields.CharField', [], {'max_length': '255'})
        },
        'c2g.problemsettoexercise': {
            'Meta': {'object_name': 'ProblemSetToExercise', 'db_table': "u'c2g_problemset_to_exercise'"},
            'exercise': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['c2g.Exercise']"}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'image': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['c2g.ProblemSetToExercise']", 'null': 'True', 'blank': 'True'}),
            'is_deleted': ('django.db.models.fields.IntegerField', [], {'default': '0'}),
            'mode': ('django.db.models.fields.TextField', [], {'blank': 'True'}),
            'number': ('django.db.models.fields.IntegerField', [], {'null': 'True', 'blank': 'True'}),
            'problemSet': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['c2g.ProblemSet']"})
        },
        'c2g.studentexamstart': {
            'Meta': {'object_name': 'StudentExamStart'},
            'exam': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['c2g.Exam']"}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'last_updated': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'auto_now_add': 'True', 'blank': 'True'}),
            'student': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['auth.User']"}),
            'time_created': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'})
        },
        'c2g.studentsection': {
            'Meta': {'object_name': 'StudentSection', 'db_table': "u'c2g_sections'"},
            'capacity': ('django.db.models.fields.IntegerField', [], {'default': '999'}),
            'course': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['c2g.Course']"}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'is_deleted': ('django.db.models.fields.IntegerField', [], {'default': '0'}),
            'last_updated': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'auto_now_add': 'True', 'blank': 'True'}),
            'members': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['auth.User']", 'symmetrical': 'False'}),
            'time_created': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'title': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True', 'blank': 'True'})
        },
        'c2g.userprofile': {
            'Meta': {'object_name': 'UserProfile', 'db_table': "u'c2g_user_profiles'"},
            'accept_language': ('django.db.models.fields.CharField', [], {'max_length': '64', 'null': 'True'}),
            'accept_language_first': ('django.db.models.fields.CharField', [], {'max_length': '64', 'null': 'True'}),
            'birth_year': ('django.db.models.fields.CharField', [], {'max_length': '64', 'null': 'True'}),
            'client_ip': ('django.db.models.fields.CharField', [], {'max_length': '30', 'null': 'True'}),
            'client_ip_first': ('django.db.models.fields.CharField', [], {'max_length': '30', 'null': 'True'}),
            'education': ('django.db.models.fields.CharField', [], {'max_length': '64', 'null': 'True'}),
            'email_me': ('django.db.models.fields.BooleanField', [], {'default': 'True'}),
            'gender': ('django.db.models.fields.CharField', [], {'max_length': '64', 'null': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'institutions': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['c2g.Institution']", 'symmetrical': 'False'}),
            'last_updated': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'auto_now_add': 'True', 'blank': 'True'}),
            'piazza_email': ('django.db.models.fields.CharField', [], {'max_length': '128', 'blank': 'True'}),
            'piazza_name': ('django.db.models.fields.CharField', [], {'max_length': '128', 'blank': 'True'}),
            'referrer': ('django.db.models.fields.CharField', [], {'max_length': '256', 'null': 'True'}),
            'referrer_first': ('django.db.models.fields.CharField', [], {'max_length': '256', 'null': 'True'}),
            'site_data': ('django.db.models.fields.TextField', [], {'blank': 'True'}),
            'time_created': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'user': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['auth.User']", 'unique': 'True'}),
            'user_agent': ('django.db.models.fields.CharField', [], {'max_length': '256', 'null': 'True'}),
            'user_agent_first': ('django.db.models.fields.CharField', [], {'max_length': '256', 'null': 'True'}),
            'work': ('django.db.models.fields.CharField', [], {'max_length': '128', 'null': 'True'})
        },
        'c2g.video': {
            'Meta': {'object_name': 'Video', 'db_table': "u'c2g_videos'"},
            'course': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['c2g.Course']"}),
            'description': ('django.db.models.fields.TextField', [], {'blank': 'True'}),
            'duration': ('django.db.models.fields.IntegerField', [], {'null': 'True', 'blank': 'True'}),
            'exam': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['c2g.Exam']", 'null': 'True', 'blank': 'True'}),
            'file': ('django.db.models.fields.files.FileField', [], {'max_length': '100'}),
            'handle': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True', 'db_index': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'image': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'to': "orm['c2g.Video']"}),
            'index': ('django.db.models.fields.IntegerField', [], {'null': 'True', 'blank': 'True'}),
            'is_deleted': ('django.db.models.fields.IntegerField', [], {'default': '0'}),
            'last_updated': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'auto_now_add': 'True', 'blank': 'True'}),
            'live_datetime': ('django.db.models.fields.DateTimeField', [], {'null': 'True', 'blank': 'True'}),
            'mode': ('django.db.models.fields.TextField', [], {'blank': 'True'}),
            'section': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['c2g.ContentSection']", 'null': 'True'}),
            'slug': ('django.db.models.fields.SlugField', [], {'max_length': '255', 'null': 'True'}),
            'time_created': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'title': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True', 'blank': 'True'}),
            'type': ('django.db.models.fields.CharField', [], {'default': "'youtube'", 'max_length': '30'}),
            'url': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True', 'blank': 'True'})
        },
        'c2g.videoactivity': {
            'Meta': {'object_name': 'VideoActivity', 'db_table': "u'c2g_video_activity'"},
            'course': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['c2g.Course']"}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'max_end_seconds': ('django.db.models.fields.IntegerField', [], {'default': '0', 'blank': 'True'}),
            'start_seconds': ('django.db.models.fields.IntegerField', [], {'default': '0', 'blank': 'True'}),
            'student': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['auth.User']"}),
            'video': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['c2g.Video']"})
        },
        'c2g.videodownload': {
            'Meta': {'object_name': 'VideoDownload', 'db_table': "u'c2g_video_download'"},
            'course': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['c2g.Course']"}),
            'download_date': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'format': ('django.db.models.fields.CharField', [], {'max_length': '35', 'null': 'True', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'student': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['auth.User']"}),
            'video': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['c2g.Video']"})
        },
        'c2g.videotoexercise': {
            'Meta': {'object_name': 'VideoToExercise', 'db_table': "u'c2g_video_to_exercise'"},
            'exercise': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['c2g.Exercise']"}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'image': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['c2g.VideoToExercise']", 'null': 'True', 'blank': 'True'}),
            'is_deleted': ('django.db.models.fields.IntegerField', [], {'default': '0'}),
            'mode': ('django.db.models.fields.TextField', [], {'blank': 'True'}),
            'video': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['c2g.Video']"}),
            'video_time': ('django.db.models.fields.IntegerField', [], {})
        },
        'c2g.videoviewtraces': {
            'Meta': {'object_name': 'VideoViewTraces', 'db_table': "u'c2g_video_view_traces'"},
            'course': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['c2g.Course']"}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'last_updated': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'auto_now_add': 'True', 'blank': 'True'}),
            'time_created': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'trace': ('django.db.models.fields.TextField', [], {'blank': 'True'}),
            'user': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['auth.User']"}),
            'video': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['c2g.Video']"})
        },
        'contenttypes.contenttype': {
            'Meta': {'ordering': "('name',)", 'unique_together': "(('app_label', 'model'),)", 'object_name': 'ContentType', 'db_table': "'django_content_type'"},
            'app_label': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'model': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '100'})
        }
    }

    complete_apps = ['c2g']
########NEW FILE########
__FILENAME__ = 0003_auto__add_coursestudentlist__add_coursecertificate
# -*- coding: utf-8 -*-
import datetime
from south.db import db
from south.v2 import SchemaMigration
from django.db import models


class Migration(SchemaMigration):

    def forwards(self, orm):
        # Adding model 'CourseStudentList'
        db.create_table('c2g_coursestudentlist', (
            ('id', self.gf('django.db.models.fields.AutoField')(primary_key=True)),
            ('time_created', self.gf('django.db.models.fields.DateTimeField')(auto_now_add=True, blank=True)),
            ('last_updated', self.gf('django.db.models.fields.DateTimeField')(auto_now=True, auto_now_add=True, blank=True)),
            ('course', self.gf('django.db.models.fields.related.ForeignKey')(to=orm['c2g.Course'])),
            ('max_completion_level', self.gf('django.db.models.fields.IntegerField')(default=0)),
        ))
        db.send_create_signal('c2g', ['CourseStudentList'])

        # Adding M2M table for field members on 'CourseStudentList'
        db.create_table('c2g_coursestudentlist_members', (
            ('id', models.AutoField(verbose_name='ID', primary_key=True, auto_created=True)),
            ('coursestudentlist', models.ForeignKey(orm['c2g.coursestudentlist'], null=False)),
            ('user', models.ForeignKey(orm['auth.user'], null=False))
        ))
        db.create_unique('c2g_coursestudentlist_members', ['coursestudentlist_id', 'user_id'])

        # Adding model 'CourseCertificate'
        db.create_table('c2g_coursecertificate', (
            ('id', self.gf('django.db.models.fields.AutoField')(primary_key=True)),
            ('time_created', self.gf('django.db.models.fields.DateTimeField')(auto_now_add=True, blank=True)),
            ('last_updated', self.gf('django.db.models.fields.DateTimeField')(auto_now=True, auto_now_add=True, blank=True)),
            ('course', self.gf('django.db.models.fields.related.ForeignKey')(to=orm['c2g.Course'])),
            ('assets', self.gf('django.db.models.fields.CharField')(max_length=255, null=True)),
            ('storage', self.gf('django.db.models.fields.CharField')(max_length=255, null=True)),
            ('type', self.gf('django.db.models.fields.CharField')(default='completion', max_length=64)),
        ))
        db.send_create_signal('c2g', ['CourseCertificate'])

        # Adding M2M table for field certificates on 'UserProfile'
        db.create_table(u'c2g_user_profiles_certificates', (
            ('id', models.AutoField(verbose_name='ID', primary_key=True, auto_created=True)),
            ('userprofile', models.ForeignKey(orm['c2g.userprofile'], null=False)),
            ('coursecertificate', models.ForeignKey(orm['c2g.coursecertificate'], null=False))
        ))
        db.create_unique(u'c2g_user_profiles_certificates', ['userprofile_id', 'coursecertificate_id'])


    def backwards(self, orm):
        # Deleting model 'CourseStudentList'
        db.delete_table('c2g_coursestudentlist')

        # Removing M2M table for field members on 'CourseStudentList'
        db.delete_table('c2g_coursestudentlist_members')

        # Deleting model 'CourseCertificate'
        db.delete_table('c2g_coursecertificate')

        # Removing M2M table for field certificates on 'UserProfile'
        db.delete_table('c2g_user_profiles_certificates')


    models = {
        'auth.group': {
            'Meta': {'object_name': 'Group'},
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '80'}),
            'permissions': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['auth.Permission']", 'symmetrical': 'False', 'blank': 'True'})
        },
        'auth.permission': {
            'Meta': {'ordering': "('content_type__app_label', 'content_type__model', 'codename')", 'unique_together': "(('content_type', 'codename'),)", 'object_name': 'Permission'},
            'codename': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'content_type': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['contenttypes.ContentType']"}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '50'})
        },
        'auth.user': {
            'Meta': {'object_name': 'User'},
            'date_joined': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
            'email': ('django.db.models.fields.EmailField', [], {'max_length': '75', 'blank': 'True'}),
            'first_name': ('django.db.models.fields.CharField', [], {'max_length': '30', 'blank': 'True'}),
            'groups': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['auth.Group']", 'symmetrical': 'False', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'is_active': ('django.db.models.fields.BooleanField', [], {'default': 'True'}),
            'is_staff': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'is_superuser': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'last_login': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
            'last_name': ('django.db.models.fields.CharField', [], {'max_length': '30', 'blank': 'True'}),
            'password': ('django.db.models.fields.CharField', [], {'max_length': '128'}),
            'user_permissions': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['auth.Permission']", 'symmetrical': 'False', 'blank': 'True'}),
            'username': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '30'})
        },
        'c2g.additionalpage': {
            'Meta': {'object_name': 'AdditionalPage', 'db_table': "u'c2g_additional_pages'"},
            'course': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['c2g.Course']"}),
            'description': ('django.db.models.fields.TextField', [], {'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'image': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'to': "orm['c2g.AdditionalPage']"}),
            'index': ('django.db.models.fields.IntegerField', [], {'null': 'True', 'blank': 'True'}),
            'is_deleted': ('django.db.models.fields.IntegerField', [], {'default': '0'}),
            'last_updated': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'auto_now_add': 'True', 'blank': 'True'}),
            'live_datetime': ('django.db.models.fields.DateTimeField', [], {'null': 'True', 'blank': 'True'}),
            'menu_slug': ('django.db.models.fields.SlugField', [], {'max_length': '255', 'null': 'True', 'blank': 'True'}),
            'mode': ('django.db.models.fields.TextField', [], {'blank': 'True'}),
            'section': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['c2g.ContentSection']", 'null': 'True'}),
            'slug': ('django.db.models.fields.SlugField', [], {'max_length': '255', 'null': 'True', 'blank': 'True'}),
            'time_created': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'title': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True', 'blank': 'True'})
        },
        'c2g.announcement': {
            'Meta': {'object_name': 'Announcement', 'db_table': "u'c2g_announcements'"},
            'course': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['c2g.Course']"}),
            'description': ('django.db.models.fields.TextField', [], {'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'image': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'to': "orm['c2g.Announcement']"}),
            'index': ('django.db.models.fields.IntegerField', [], {'null': 'True', 'blank': 'True'}),
            'is_deleted': ('django.db.models.fields.IntegerField', [], {'default': '0'}),
            'last_updated': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'auto_now_add': 'True', 'blank': 'True'}),
            'live_datetime': ('django.db.models.fields.DateTimeField', [], {'null': 'True', 'blank': 'True'}),
            'mode': ('django.db.models.fields.TextField', [], {'blank': 'True'}),
            'owner': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['auth.User']"}),
            'time_created': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'title': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True', 'blank': 'True'})
        },
        'c2g.contentgroup': {
            'Meta': {'object_name': 'ContentGroup', 'db_table': "u'c2g_content_group'"},
            'additional_page': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['c2g.AdditionalPage']", 'null': 'True', 'blank': 'True'}),
            'course': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['c2g.Course']"}),
            'display_style': ('django.db.models.fields.CharField', [], {'default': "'list'", 'max_length': '32', 'blank': 'True'}),
            'exam': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['c2g.Exam']", 'null': 'True', 'blank': 'True'}),
            'file': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['c2g.File']", 'null': 'True', 'blank': 'True'}),
            'group_id': ('django.db.models.fields.IntegerField', [], {'db_index': 'True', 'null': 'True', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'level': ('django.db.models.fields.IntegerField', [], {'db_index': 'True'}),
            'problemSet': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['c2g.ProblemSet']", 'null': 'True', 'blank': 'True'}),
            'video': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['c2g.Video']", 'null': 'True', 'blank': 'True'})
        },
        'c2g.contentsection': {
            'Meta': {'object_name': 'ContentSection', 'db_table': "u'c2g_content_sections'"},
            'course': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['c2g.Course']"}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'image': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'to': "orm['c2g.ContentSection']"}),
            'index': ('django.db.models.fields.IntegerField', [], {'null': 'True', 'blank': 'True'}),
            'is_deleted': ('django.db.models.fields.IntegerField', [], {'default': '0'}),
            'last_updated': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'auto_now_add': 'True', 'blank': 'True'}),
            'live_datetime': ('django.db.models.fields.DateTimeField', [], {'null': 'True', 'blank': 'True'}),
            'mode': ('django.db.models.fields.TextField', [], {'blank': 'True'}),
            'slug': ('django.db.models.fields.SlugField', [], {'max_length': '255', 'null': 'True', 'blank': 'True'}),
            'subtitle': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True', 'blank': 'True'}),
            'time_created': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'title': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True', 'blank': 'True'})
        },
        'c2g.course': {
            'Meta': {'object_name': 'Course', 'db_table': "u'c2g_courses'"},
            'accompanying_materials': ('django.db.models.fields.TextField', [], {'blank': 'True'}),
            'calendar_end': ('django.db.models.fields.DateField', [], {'null': 'True', 'blank': 'True'}),
            'calendar_start': ('django.db.models.fields.DateField', [], {'null': 'True', 'blank': 'True'}),
            'contact': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True', 'blank': 'True'}),
            'description': ('django.db.models.fields.TextField', [], {'blank': 'True'}),
            'faq': ('django.db.models.fields.TextField', [], {'blank': 'True'}),
            'handle': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True', 'db_index': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'image': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'to': "orm['c2g.Course']"}),
            'institution': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['c2g.Institution']", 'null': 'True'}),
            'institution_only': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'instructor_group': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'instructor_group'", 'to': "orm['auth.Group']"}),
            'is_deleted': ('django.db.models.fields.IntegerField', [], {'default': '0'}),
            'last_updated': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'auto_now_add': 'True', 'blank': 'True'}),
            'list_publicly': ('django.db.models.fields.IntegerField', [], {'null': 'True', 'blank': 'True'}),
            'live_datetime': ('django.db.models.fields.DateTimeField', [], {'null': 'True', 'blank': 'True'}),
            'logo': ('django.db.models.fields.files.FileField', [], {'max_length': '100', 'null': 'True'}),
            'mode': ('django.db.models.fields.TextField', [], {'blank': 'True'}),
            'outcomes': ('django.db.models.fields.TextField', [], {'blank': 'True'}),
            'piazza_id': ('django.db.models.fields.IntegerField', [], {'null': 'True', 'blank': 'True'}),
            'prerequisites': ('django.db.models.fields.TextField', [], {'blank': 'True'}),
            'preview_only_mode': ('django.db.models.fields.BooleanField', [], {'default': 'True'}),
            'readonly_tas_group': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'readonly_tas_group'", 'to': "orm['auth.Group']"}),
            'share_to': ('django.db.models.fields.related.ManyToManyField', [], {'blank': 'True', 'related_name': "'share_from'", 'null': 'True', 'symmetrical': 'False', 'to': "orm['c2g.Course']"}),
            'short_description': ('django.db.models.fields.TextField', [], {'blank': 'True'}),
            'student_group': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'student_group'", 'to': "orm['auth.Group']"}),
            'syllabus': ('django.db.models.fields.TextField', [], {'blank': 'True'}),
            'tas_group': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'tas_group'", 'to': "orm['auth.Group']"}),
            'term': ('django.db.models.fields.TextField', [], {'blank': 'True'}),
            'time_created': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'title': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True', 'blank': 'True'}),
            'year': ('django.db.models.fields.IntegerField', [], {'null': 'True', 'blank': 'True'})
        },
        'c2g.coursecertificate': {
            'Meta': {'object_name': 'CourseCertificate'},
            'assets': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'course': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['c2g.Course']"}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'last_updated': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'auto_now_add': 'True', 'blank': 'True'}),
            'storage': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'time_created': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'type': ('django.db.models.fields.CharField', [], {'default': "'completion'", 'max_length': '64'})
        },
        'c2g.courseemail': {
            'Meta': {'object_name': 'CourseEmail', 'db_table': "u'c2g_course_emails'"},
            'course': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['c2g.Course']"}),
            'hash': ('django.db.models.fields.CharField', [], {'max_length': '128', 'db_index': 'True'}),
            'html_message': ('django.db.models.fields.TextField', [], {'null': 'True', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'last_updated': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'auto_now_add': 'True', 'blank': 'True'}),
            'sender': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['auth.User']"}),
            'subject': ('django.db.models.fields.CharField', [], {'max_length': '128', 'blank': 'True'}),
            'time_created': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'to': ('django.db.models.fields.CharField', [], {'default': "'myself'", 'max_length': '64'})
        },
        'c2g.courseinstructor': {
            'Meta': {'object_name': 'CourseInstructor', 'db_table': "u'c2g_course_instructor'"},
            'course': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['c2g.Course']"}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'instructor': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['c2g.Instructor']"}),
            'last_updated': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'auto_now_add': 'True', 'blank': 'True'}),
            'time_created': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'})
        },
        'c2g.coursestudentlist': {
            'Meta': {'object_name': 'CourseStudentList'},
            'course': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['c2g.Course']"}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'last_updated': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'auto_now_add': 'True', 'blank': 'True'}),
            'max_completion_level': ('django.db.models.fields.IntegerField', [], {'default': '0'}),
            'members': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['auth.User']", 'symmetrical': 'False'}),
            'time_created': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'})
        },
        'c2g.currenttermmap': {
            'Meta': {'object_name': 'CurrentTermMap'},
            'course_prefix': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '64', 'db_index': 'True'}),
            'course_suffix': ('django.db.models.fields.CharField', [], {'max_length': '64'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'last_updated': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'auto_now_add': 'True', 'blank': 'True'}),
            'time_created': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'})
        },
        'c2g.emailaddr': {
            'Meta': {'object_name': 'EmailAddr'},
            'addr': ('django.db.models.fields.EmailField', [], {'max_length': '128'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '128', 'null': 'True', 'blank': 'True'}),
            'optout': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'optout_code': ('django.db.models.fields.CharField', [], {'default': "'optout'", 'max_length': '64'})
        },
        'c2g.exam': {
            'Meta': {'object_name': 'Exam'},
            'assessment_type': ('django.db.models.fields.CharField', [], {'max_length': '64', 'null': 'True', 'blank': 'True'}),
            'autograde': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'course': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['c2g.Course']"}),
            'description': ('django.db.models.fields.TextField', [], {'null': 'True', 'blank': 'True'}),
            'display_single': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'due_date': ('django.db.models.fields.DateTimeField', [], {'null': 'True', 'blank': 'True'}),
            'exam_type': ('django.db.models.fields.CharField', [], {'default': "'exam'", 'max_length': '32'}),
            'grace_period': ('django.db.models.fields.DateTimeField', [], {'null': 'True', 'blank': 'True'}),
            'grade_single': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'html_content': ('django.db.models.fields.TextField', [], {'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'image': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'to': "orm['c2g.Exam']"}),
            'index': ('django.db.models.fields.IntegerField', [], {'null': 'True', 'blank': 'True'}),
            'invideo': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'is_deleted': ('django.db.models.fields.IntegerField', [], {'default': '0'}),
            'last_updated': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'auto_now_add': 'True', 'blank': 'True'}),
            'late_penalty': ('django.db.models.fields.IntegerField', [], {'default': '0', 'null': 'True', 'blank': 'True'}),
            'live_datetime': ('django.db.models.fields.DateTimeField', [], {'null': 'True', 'blank': 'True'}),
            'minutes_btw_attempts': ('django.db.models.fields.IntegerField', [], {'default': '0'}),
            'minutesallowed': ('django.db.models.fields.IntegerField', [], {'null': 'True', 'blank': 'True'}),
            'mode': ('django.db.models.fields.TextField', [], {'blank': 'True'}),
            'partial_credit_deadline': ('django.db.models.fields.DateTimeField', [], {'null': 'True', 'blank': 'True'}),
            'resubmission_penalty': ('django.db.models.fields.IntegerField', [], {'default': '0', 'null': 'True', 'blank': 'True'}),
            'section': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['c2g.ContentSection']", 'null': 'True'}),
            'slug': ('django.db.models.fields.SlugField', [], {'max_length': '255', 'null': 'True'}),
            'submissions_permitted': ('django.db.models.fields.IntegerField', [], {'default': '999', 'null': 'True', 'blank': 'True'}),
            'time_created': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'timed': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'title': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True', 'blank': 'True'}),
            'total_score': ('django.db.models.fields.FloatField', [], {'null': 'True', 'blank': 'True'}),
            'xml_imported': ('django.db.models.fields.TextField', [], {'null': 'True', 'blank': 'True'}),
            'xml_metadata': ('django.db.models.fields.TextField', [], {'null': 'True', 'blank': 'True'})
        },
        'c2g.examrecord': {
            'Meta': {'object_name': 'ExamRecord'},
            'attempt_number': ('django.db.models.fields.IntegerField', [], {'default': '0'}),
            'complete': ('django.db.models.fields.BooleanField', [], {'default': 'True'}),
            'course': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['c2g.Course']"}),
            'exam': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['c2g.Exam']"}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'json_data': ('django.db.models.fields.TextField', [], {'null': 'True', 'blank': 'True'}),
            'json_score_data': ('django.db.models.fields.TextField', [], {'null': 'True', 'blank': 'True'}),
            'last_updated': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'auto_now_add': 'True', 'blank': 'True'}),
            'late': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'onpage': ('django.db.models.fields.CharField', [], {'max_length': '512', 'null': 'True', 'blank': 'True'}),
            'score': ('django.db.models.fields.FloatField', [], {'null': 'True', 'blank': 'True'}),
            'student': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['auth.User']"}),
            'time_created': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'})
        },
        'c2g.examrecordfieldlog': {
            'Meta': {'object_name': 'ExamRecordFieldLog'},
            'course': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['c2g.Course']"}),
            'exam': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['c2g.Exam']"}),
            'field_name': ('django.db.models.fields.CharField', [], {'max_length': '128', 'db_index': 'True'}),
            'human_name': ('django.db.models.fields.CharField', [], {'db_index': 'True', 'max_length': '128', 'null': 'True', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'last_updated': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'auto_now_add': 'True', 'blank': 'True'}),
            'max_score': ('django.db.models.fields.FloatField', [], {'default': '0', 'blank': 'True'}),
            'raw_score': ('django.db.models.fields.FloatField', [], {'default': '0', 'blank': 'True'}),
            'student': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['auth.User']"}),
            'time_created': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'value': ('django.db.models.fields.TextField', [], {'null': 'True', 'blank': 'True'})
        },
        'c2g.examrecordscore': {
            'Meta': {'object_name': 'ExamRecordScore'},
            'csv_imported': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'last_updated': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'auto_now_add': 'True', 'blank': 'True'}),
            'raw_score': ('django.db.models.fields.FloatField', [], {'null': 'True', 'blank': 'True'}),
            'record': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['c2g.ExamRecord']", 'unique': 'True'}),
            'time_created': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'})
        },
        'c2g.examrecordscorefield': {
            'Meta': {'object_name': 'ExamRecordScoreField'},
            'associated_text': ('django.db.models.fields.TextField', [], {'null': 'True', 'blank': 'True'}),
            'comments': ('django.db.models.fields.TextField', [], {'null': 'True', 'blank': 'True'}),
            'correct': ('django.db.models.fields.NullBooleanField', [], {'null': 'True', 'blank': 'True'}),
            'field_name': ('django.db.models.fields.CharField', [], {'max_length': '128', 'db_index': 'True'}),
            'human_name': ('django.db.models.fields.CharField', [], {'db_index': 'True', 'max_length': '128', 'null': 'True', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'last_updated': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'auto_now_add': 'True', 'blank': 'True'}),
            'parent': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['c2g.ExamRecordScore']"}),
            'subscore': ('django.db.models.fields.FloatField', [], {'default': '0'}),
            'time_created': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'value': ('django.db.models.fields.TextField', [], {'null': 'True', 'blank': 'True'})
        },
        'c2g.examrecordscorefieldchoice': {
            'Meta': {'object_name': 'ExamRecordScoreFieldChoice'},
            'associated_text': ('django.db.models.fields.TextField', [], {'null': 'True', 'blank': 'True'}),
            'choice_value': ('django.db.models.fields.CharField', [], {'max_length': '128', 'db_index': 'True'}),
            'correct': ('django.db.models.fields.NullBooleanField', [], {'null': 'True', 'blank': 'True'}),
            'human_name': ('django.db.models.fields.CharField', [], {'db_index': 'True', 'max_length': '128', 'null': 'True', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'last_updated': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'auto_now_add': 'True', 'blank': 'True'}),
            'parent': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['c2g.ExamRecordScoreField']"}),
            'time_created': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'})
        },
        'c2g.examscore': {
            'Meta': {'unique_together': "(('exam', 'student'),)", 'object_name': 'ExamScore'},
            'course': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['c2g.Course']"}),
            'csv_imported': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'exam': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['c2g.Exam']"}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'last_updated': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'auto_now_add': 'True', 'blank': 'True'}),
            'score': ('django.db.models.fields.FloatField', [], {'null': 'True', 'blank': 'True'}),
            'student': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['auth.User']"}),
            'time_created': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'})
        },
        'c2g.examscorefield': {
            'Meta': {'object_name': 'ExamScoreField'},
            'associated_text': ('django.db.models.fields.TextField', [], {'null': 'True', 'blank': 'True'}),
            'comments': ('django.db.models.fields.TextField', [], {'null': 'True', 'blank': 'True'}),
            'correct': ('django.db.models.fields.NullBooleanField', [], {'null': 'True', 'blank': 'True'}),
            'field_name': ('django.db.models.fields.CharField', [], {'max_length': '128', 'db_index': 'True'}),
            'human_name': ('django.db.models.fields.CharField', [], {'db_index': 'True', 'max_length': '128', 'null': 'True', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'last_updated': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'auto_now_add': 'True', 'blank': 'True'}),
            'parent': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['c2g.ExamScore']"}),
            'subscore': ('django.db.models.fields.FloatField', [], {'default': '0'}),
            'time_created': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'value': ('django.db.models.fields.CharField', [], {'max_length': '128', 'null': 'True', 'blank': 'True'})
        },
        'c2g.exercise': {
            'Meta': {'object_name': 'Exercise', 'db_table': "u'c2g_exercises'"},
            'file': ('django.db.models.fields.files.FileField', [], {'max_length': '100', 'null': 'True'}),
            'fileName': ('django.db.models.fields.CharField', [], {'max_length': '255'}),
            'handle': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True', 'db_index': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'is_deleted': ('django.db.models.fields.IntegerField', [], {'default': '0'}),
            'last_updated': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'auto_now_add': 'True', 'blank': 'True'}),
            'problemSet': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['c2g.ProblemSet']", 'through': "orm['c2g.ProblemSetToExercise']", 'symmetrical': 'False'}),
            'time_created': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'video': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['c2g.Video']", 'through': "orm['c2g.VideoToExercise']", 'symmetrical': 'False'})
        },
        'c2g.file': {
            'Meta': {'object_name': 'File', 'db_table': "u'c2g_files'"},
            'course': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['c2g.Course']"}),
            'file': ('django.db.models.fields.files.FileField', [], {'max_length': '100'}),
            'handle': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True', 'db_index': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'image': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'to': "orm['c2g.File']"}),
            'index': ('django.db.models.fields.IntegerField', [], {'null': 'True', 'blank': 'True'}),
            'is_deleted': ('django.db.models.fields.IntegerField', [], {'default': '0'}),
            'last_updated': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'auto_now_add': 'True', 'blank': 'True'}),
            'live_datetime': ('django.db.models.fields.DateTimeField', [], {'null': 'True', 'blank': 'True'}),
            'mode': ('django.db.models.fields.TextField', [], {'blank': 'True'}),
            'section': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['c2g.ContentSection']", 'null': 'True'}),
            'time_created': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'title': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True', 'blank': 'True'})
        },
        'c2g.institution': {
            'Meta': {'object_name': 'Institution', 'db_table': "u'c2g_institutions'"},
            'city': ('django.db.models.fields.TextField', [], {'blank': 'True'}),
            'country': ('django.db.models.fields.TextField', [], {'blank': 'True'}),
            'domains': ('django.db.models.fields.TextField', [], {'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'last_updated': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'auto_now_add': 'True', 'blank': 'True'}),
            'time_created': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'title': ('django.db.models.fields.TextField', [], {})
        },
        'c2g.instructor': {
            'Meta': {'object_name': 'Instructor'},
            'biography': ('django.db.models.fields.TextField', [], {'blank': 'True'}),
            'email': ('django.db.models.fields.TextField', [], {'blank': 'True'}),
            'handle': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True', 'db_index': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'last_updated': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'auto_now_add': 'True', 'blank': 'True'}),
            'name': ('django.db.models.fields.TextField', [], {'blank': 'True'}),
            'photo': ('django.db.models.fields.files.FileField', [], {'max_length': '100', 'blank': 'True'}),
            'time_created': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'})
        },
        'c2g.listemail': {
            'Meta': {'object_name': 'ListEmail'},
            'from_addr': ('django.db.models.fields.CharField', [], {'max_length': '128', 'blank': 'True'}),
            'from_name': ('django.db.models.fields.CharField', [], {'max_length': '128', 'blank': 'True'}),
            'hash': ('django.db.models.fields.CharField', [], {'max_length': '128', 'db_index': 'True'}),
            'html_message': ('django.db.models.fields.TextField', [], {'null': 'True', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'last_updated': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'auto_now_add': 'True', 'blank': 'True'}),
            'sender': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['auth.User']"}),
            'subject': ('django.db.models.fields.CharField', [], {'max_length': '128', 'blank': 'True'}),
            'time_created': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'to_list': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['c2g.MailingList']"})
        },
        'c2g.mailinglist': {
            'Meta': {'object_name': 'MailingList'},
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'members': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['c2g.EmailAddr']", 'symmetrical': 'False'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '128', 'blank': 'True'})
        },
        'c2g.newsevent': {
            'Meta': {'object_name': 'NewsEvent', 'db_table': "u'c2g_news_events'"},
            'course': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['c2g.Course']"}),
            'event': ('django.db.models.fields.CharField', [], {'max_length': '255'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'time_created': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'})
        },
        'c2g.pagevisitlog': {
            'Meta': {'object_name': 'PageVisitLog', 'db_table': "u'c2g_page_visit_log'"},
            'course': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['c2g.Course']"}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'last_updated': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'auto_now_add': 'True', 'blank': 'True'}),
            'object_id': ('django.db.models.fields.CharField', [], {'max_length': '128', 'blank': 'True'}),
            'page_type': ('django.db.models.fields.CharField', [], {'max_length': '128', 'db_index': 'True'}),
            'time_created': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'user': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['auth.User']"})
        },
        'c2g.problemactivity': {
            'Meta': {'object_name': 'ProblemActivity', 'db_table': "u'c2g_problem_activity'"},
            'attempt_content': ('django.db.models.fields.TextField', [], {'null': 'True', 'blank': 'True'}),
            'attempt_number': ('django.db.models.fields.IntegerField', [], {'null': 'True', 'blank': 'True'}),
            'card': ('django.db.models.fields.TextField', [], {'blank': 'True'}),
            'cards_done': ('django.db.models.fields.IntegerField', [], {'null': 'True', 'blank': 'True'}),
            'cards_left': ('django.db.models.fields.IntegerField', [], {'null': 'True', 'blank': 'True'}),
            'casing': ('django.db.models.fields.TextField', [], {'blank': 'True'}),
            'complete': ('django.db.models.fields.IntegerField', [], {'null': 'True', 'blank': 'True'}),
            'count_hints': ('django.db.models.fields.IntegerField', [], {'null': 'True', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'last_updated': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'auto_now_add': 'True', 'blank': 'True'}),
            'problem_identifier': ('django.db.models.fields.CharField', [], {'max_length': '255', 'blank': 'True'}),
            'problem_type': ('django.db.models.fields.TextField', [], {'blank': 'True'}),
            'problemset_to_exercise': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['c2g.ProblemSetToExercise']", 'null': 'True'}),
            'review_mode': ('django.db.models.fields.IntegerField', [], {'null': 'True', 'blank': 'True'}),
            'seed': ('django.db.models.fields.TextField', [], {'blank': 'True'}),
            'sha1': ('django.db.models.fields.TextField', [], {'blank': 'True'}),
            'student': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['auth.User']"}),
            'time_created': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'time_taken': ('django.db.models.fields.IntegerField', [], {'null': 'True', 'blank': 'True'}),
            'topic_mode': ('django.db.models.fields.IntegerField', [], {'null': 'True', 'blank': 'True'}),
            'user_choices': ('django.db.models.fields.CharField', [], {'max_length': '1024', 'null': 'True', 'blank': 'True'}),
            'user_selection_val': ('django.db.models.fields.CharField', [], {'max_length': '1024', 'null': 'True', 'blank': 'True'}),
            'video_to_exercise': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['c2g.VideoToExercise']", 'null': 'True'})
        },
        'c2g.problemset': {
            'Meta': {'object_name': 'ProblemSet', 'db_table': "u'c2g_problem_sets'"},
            'assessment_type': ('django.db.models.fields.CharField', [], {'max_length': '255'}),
            'course': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['c2g.Course']"}),
            'description': ('django.db.models.fields.TextField', [], {'blank': 'True'}),
            'due_date': ('django.db.models.fields.DateTimeField', [], {'null': 'True'}),
            'grace_period': ('django.db.models.fields.DateTimeField', [], {}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'image': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'to': "orm['c2g.ProblemSet']"}),
            'index': ('django.db.models.fields.IntegerField', [], {'null': 'True', 'blank': 'True'}),
            'is_deleted': ('django.db.models.fields.IntegerField', [], {'default': '0'}),
            'last_updated': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'auto_now_add': 'True', 'blank': 'True'}),
            'late_penalty': ('django.db.models.fields.IntegerField', [], {}),
            'live_datetime': ('django.db.models.fields.DateTimeField', [], {'null': 'True', 'blank': 'True'}),
            'mode': ('django.db.models.fields.TextField', [], {'blank': 'True'}),
            'partial_credit_deadline': ('django.db.models.fields.DateTimeField', [], {}),
            'path': ('django.db.models.fields.CharField', [], {'max_length': '255'}),
            'randomize': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'resubmission_penalty': ('django.db.models.fields.IntegerField', [], {}),
            'section': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['c2g.ContentSection']"}),
            'slug': ('django.db.models.fields.SlugField', [], {'max_length': '50'}),
            'submissions_permitted': ('django.db.models.fields.IntegerField', [], {}),
            'time_created': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'title': ('django.db.models.fields.CharField', [], {'max_length': '255'})
        },
        'c2g.problemsettoexercise': {
            'Meta': {'object_name': 'ProblemSetToExercise', 'db_table': "u'c2g_problemset_to_exercise'"},
            'exercise': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['c2g.Exercise']"}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'image': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['c2g.ProblemSetToExercise']", 'null': 'True', 'blank': 'True'}),
            'is_deleted': ('django.db.models.fields.IntegerField', [], {'default': '0'}),
            'mode': ('django.db.models.fields.TextField', [], {'blank': 'True'}),
            'number': ('django.db.models.fields.IntegerField', [], {'null': 'True', 'blank': 'True'}),
            'problemSet': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['c2g.ProblemSet']"})
        },
        'c2g.studentexamstart': {
            'Meta': {'object_name': 'StudentExamStart'},
            'exam': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['c2g.Exam']"}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'last_updated': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'auto_now_add': 'True', 'blank': 'True'}),
            'student': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['auth.User']"}),
            'time_created': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'})
        },
        'c2g.studentsection': {
            'Meta': {'object_name': 'StudentSection', 'db_table': "u'c2g_sections'"},
            'capacity': ('django.db.models.fields.IntegerField', [], {'default': '999'}),
            'course': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['c2g.Course']"}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'is_deleted': ('django.db.models.fields.IntegerField', [], {'default': '0'}),
            'last_updated': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'auto_now_add': 'True', 'blank': 'True'}),
            'members': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['auth.User']", 'symmetrical': 'False'}),
            'time_created': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'title': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True', 'blank': 'True'})
        },
        'c2g.userprofile': {
            'Meta': {'object_name': 'UserProfile', 'db_table': "u'c2g_user_profiles'"},
            'accept_language': ('django.db.models.fields.CharField', [], {'max_length': '64', 'null': 'True'}),
            'accept_language_first': ('django.db.models.fields.CharField', [], {'max_length': '64', 'null': 'True'}),
            'birth_year': ('django.db.models.fields.CharField', [], {'max_length': '64', 'null': 'True'}),
            'certificates': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['c2g.CourseCertificate']", 'symmetrical': 'False'}),
            'client_ip': ('django.db.models.fields.CharField', [], {'max_length': '30', 'null': 'True'}),
            'client_ip_first': ('django.db.models.fields.CharField', [], {'max_length': '30', 'null': 'True'}),
            'education': ('django.db.models.fields.CharField', [], {'max_length': '64', 'null': 'True'}),
            'email_me': ('django.db.models.fields.BooleanField', [], {'default': 'True'}),
            'gender': ('django.db.models.fields.CharField', [], {'max_length': '64', 'null': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'institutions': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['c2g.Institution']", 'symmetrical': 'False'}),
            'last_updated': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'auto_now_add': 'True', 'blank': 'True'}),
            'piazza_email': ('django.db.models.fields.CharField', [], {'max_length': '128', 'blank': 'True'}),
            'piazza_name': ('django.db.models.fields.CharField', [], {'max_length': '128', 'blank': 'True'}),
            'referrer': ('django.db.models.fields.CharField', [], {'max_length': '256', 'null': 'True'}),
            'referrer_first': ('django.db.models.fields.CharField', [], {'max_length': '256', 'null': 'True'}),
            'site_data': ('django.db.models.fields.TextField', [], {'blank': 'True'}),
            'time_created': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'user': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['auth.User']", 'unique': 'True'}),
            'user_agent': ('django.db.models.fields.CharField', [], {'max_length': '256', 'null': 'True'}),
            'user_agent_first': ('django.db.models.fields.CharField', [], {'max_length': '256', 'null': 'True'}),
            'work': ('django.db.models.fields.CharField', [], {'max_length': '128', 'null': 'True'})
        },
        'c2g.video': {
            'Meta': {'object_name': 'Video', 'db_table': "u'c2g_videos'"},
            'course': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['c2g.Course']"}),
            'description': ('django.db.models.fields.TextField', [], {'blank': 'True'}),
            'duration': ('django.db.models.fields.IntegerField', [], {'null': 'True', 'blank': 'True'}),
            'exam': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['c2g.Exam']", 'null': 'True', 'blank': 'True'}),
            'file': ('django.db.models.fields.files.FileField', [], {'max_length': '100'}),
            'handle': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True', 'db_index': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'image': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'to': "orm['c2g.Video']"}),
            'index': ('django.db.models.fields.IntegerField', [], {'null': 'True', 'blank': 'True'}),
            'is_deleted': ('django.db.models.fields.IntegerField', [], {'default': '0'}),
            'last_updated': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'auto_now_add': 'True', 'blank': 'True'}),
            'live_datetime': ('django.db.models.fields.DateTimeField', [], {'null': 'True', 'blank': 'True'}),
            'mode': ('django.db.models.fields.TextField', [], {'blank': 'True'}),
            'section': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['c2g.ContentSection']", 'null': 'True'}),
            'slug': ('django.db.models.fields.SlugField', [], {'max_length': '255', 'null': 'True'}),
            'time_created': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'title': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True', 'blank': 'True'}),
            'type': ('django.db.models.fields.CharField', [], {'default': "'youtube'", 'max_length': '30'}),
            'url': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True', 'blank': 'True'})
        },
        'c2g.videoactivity': {
            'Meta': {'object_name': 'VideoActivity', 'db_table': "u'c2g_video_activity'"},
            'course': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['c2g.Course']"}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'max_end_seconds': ('django.db.models.fields.IntegerField', [], {'default': '0', 'blank': 'True'}),
            'start_seconds': ('django.db.models.fields.IntegerField', [], {'default': '0', 'blank': 'True'}),
            'student': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['auth.User']"}),
            'video': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['c2g.Video']"})
        },
        'c2g.videodownload': {
            'Meta': {'object_name': 'VideoDownload', 'db_table': "u'c2g_video_download'"},
            'course': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['c2g.Course']"}),
            'download_date': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'format': ('django.db.models.fields.CharField', [], {'max_length': '35', 'null': 'True', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'student': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['auth.User']"}),
            'video': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['c2g.Video']"})
        },
        'c2g.videotoexercise': {
            'Meta': {'object_name': 'VideoToExercise', 'db_table': "u'c2g_video_to_exercise'"},
            'exercise': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['c2g.Exercise']"}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'image': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['c2g.VideoToExercise']", 'null': 'True', 'blank': 'True'}),
            'is_deleted': ('django.db.models.fields.IntegerField', [], {'default': '0'}),
            'mode': ('django.db.models.fields.TextField', [], {'blank': 'True'}),
            'video': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['c2g.Video']"}),
            'video_time': ('django.db.models.fields.IntegerField', [], {})
        },
        'c2g.videoviewtraces': {
            'Meta': {'object_name': 'VideoViewTraces', 'db_table': "u'c2g_video_view_traces'"},
            'course': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['c2g.Course']"}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'last_updated': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'auto_now_add': 'True', 'blank': 'True'}),
            'time_created': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'trace': ('django.db.models.fields.TextField', [], {'blank': 'True'}),
            'user': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['auth.User']"}),
            'video': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['c2g.Video']"})
        },
        'contenttypes.contenttype': {
            'Meta': {'ordering': "('name',)", 'unique_together': "(('app_label', 'model'),)", 'object_name': 'ContentType', 'db_table': "'django_content_type'"},
            'app_label': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'model': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '100'})
        }
    }

    complete_apps = ['c2g']
########NEW FILE########
__FILENAME__ = 0004_auto__chg_field_courseemail_sender__chg_field_listemail_sender
# -*- coding: utf-8 -*-
import datetime
from south.db import db
from south.v2 import SchemaMigration
from django.db import models


class Migration(SchemaMigration):

    def forwards(self, orm):

        # Changing field 'CourseEmail.sender'
        db.alter_column(u'c2g_course_emails', 'sender_id', self.gf('django.db.models.fields.related.ForeignKey')(to=orm['auth.User'], null=True))

        # Changing field 'ListEmail.sender'
        db.alter_column('c2g_listemail', 'sender_id', self.gf('django.db.models.fields.related.ForeignKey')(to=orm['auth.User'], null=True))

    def backwards(self, orm):

        # Changing field 'CourseEmail.sender'
        db.alter_column(u'c2g_course_emails', 'sender_id', self.gf('django.db.models.fields.related.ForeignKey')(default=1, to=orm['auth.User']))

        # Changing field 'ListEmail.sender'
        db.alter_column('c2g_listemail', 'sender_id', self.gf('django.db.models.fields.related.ForeignKey')(default=1, to=orm['auth.User']))

    models = {
        'auth.group': {
            'Meta': {'object_name': 'Group'},
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '80'}),
            'permissions': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['auth.Permission']", 'symmetrical': 'False', 'blank': 'True'})
        },
        'auth.permission': {
            'Meta': {'ordering': "('content_type__app_label', 'content_type__model', 'codename')", 'unique_together': "(('content_type', 'codename'),)", 'object_name': 'Permission'},
            'codename': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'content_type': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['contenttypes.ContentType']"}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '50'})
        },
        'auth.user': {
            'Meta': {'object_name': 'User'},
            'date_joined': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
            'email': ('django.db.models.fields.EmailField', [], {'max_length': '75', 'blank': 'True'}),
            'first_name': ('django.db.models.fields.CharField', [], {'max_length': '30', 'blank': 'True'}),
            'groups': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['auth.Group']", 'symmetrical': 'False', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'is_active': ('django.db.models.fields.BooleanField', [], {'default': 'True'}),
            'is_staff': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'is_superuser': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'last_login': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
            'last_name': ('django.db.models.fields.CharField', [], {'max_length': '30', 'blank': 'True'}),
            'password': ('django.db.models.fields.CharField', [], {'max_length': '128'}),
            'user_permissions': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['auth.Permission']", 'symmetrical': 'False', 'blank': 'True'}),
            'username': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '30'})
        },
        'c2g.additionalpage': {
            'Meta': {'object_name': 'AdditionalPage', 'db_table': "u'c2g_additional_pages'"},
            'course': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['c2g.Course']"}),
            'description': ('django.db.models.fields.TextField', [], {'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'image': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'to': "orm['c2g.AdditionalPage']"}),
            'index': ('django.db.models.fields.IntegerField', [], {'null': 'True', 'blank': 'True'}),
            'is_deleted': ('django.db.models.fields.IntegerField', [], {'default': '0'}),
            'last_updated': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'auto_now_add': 'True', 'blank': 'True'}),
            'live_datetime': ('django.db.models.fields.DateTimeField', [], {'null': 'True', 'blank': 'True'}),
            'menu_slug': ('django.db.models.fields.SlugField', [], {'max_length': '255', 'null': 'True', 'blank': 'True'}),
            'mode': ('django.db.models.fields.TextField', [], {'blank': 'True'}),
            'section': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['c2g.ContentSection']", 'null': 'True'}),
            'slug': ('django.db.models.fields.SlugField', [], {'max_length': '255', 'null': 'True', 'blank': 'True'}),
            'time_created': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'title': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True', 'blank': 'True'})
        },
        'c2g.announcement': {
            'Meta': {'object_name': 'Announcement', 'db_table': "u'c2g_announcements'"},
            'course': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['c2g.Course']"}),
            'description': ('django.db.models.fields.TextField', [], {'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'image': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'to': "orm['c2g.Announcement']"}),
            'index': ('django.db.models.fields.IntegerField', [], {'null': 'True', 'blank': 'True'}),
            'is_deleted': ('django.db.models.fields.IntegerField', [], {'default': '0'}),
            'last_updated': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'auto_now_add': 'True', 'blank': 'True'}),
            'live_datetime': ('django.db.models.fields.DateTimeField', [], {'null': 'True', 'blank': 'True'}),
            'mode': ('django.db.models.fields.TextField', [], {'blank': 'True'}),
            'owner': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['auth.User']"}),
            'time_created': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'title': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True', 'blank': 'True'})
        },
        'c2g.contentgroup': {
            'Meta': {'object_name': 'ContentGroup', 'db_table': "u'c2g_content_group'"},
            'additional_page': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['c2g.AdditionalPage']", 'null': 'True', 'blank': 'True'}),
            'course': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['c2g.Course']"}),
            'display_style': ('django.db.models.fields.CharField', [], {'default': "'list'", 'max_length': '32', 'blank': 'True'}),
            'exam': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['c2g.Exam']", 'null': 'True', 'blank': 'True'}),
            'file': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['c2g.File']", 'null': 'True', 'blank': 'True'}),
            'group_id': ('django.db.models.fields.IntegerField', [], {'db_index': 'True', 'null': 'True', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'level': ('django.db.models.fields.IntegerField', [], {'db_index': 'True'}),
            'problemSet': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['c2g.ProblemSet']", 'null': 'True', 'blank': 'True'}),
            'video': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['c2g.Video']", 'null': 'True', 'blank': 'True'})
        },
        'c2g.contentsection': {
            'Meta': {'object_name': 'ContentSection', 'db_table': "u'c2g_content_sections'"},
            'course': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['c2g.Course']"}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'image': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'to': "orm['c2g.ContentSection']"}),
            'index': ('django.db.models.fields.IntegerField', [], {'null': 'True', 'blank': 'True'}),
            'is_deleted': ('django.db.models.fields.IntegerField', [], {'default': '0'}),
            'last_updated': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'auto_now_add': 'True', 'blank': 'True'}),
            'live_datetime': ('django.db.models.fields.DateTimeField', [], {'null': 'True', 'blank': 'True'}),
            'mode': ('django.db.models.fields.TextField', [], {'blank': 'True'}),
            'slug': ('django.db.models.fields.SlugField', [], {'max_length': '255', 'null': 'True', 'blank': 'True'}),
            'subtitle': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True', 'blank': 'True'}),
            'time_created': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'title': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True', 'blank': 'True'})
        },
        'c2g.course': {
            'Meta': {'object_name': 'Course', 'db_table': "u'c2g_courses'"},
            'accompanying_materials': ('django.db.models.fields.TextField', [], {'blank': 'True'}),
            'calendar_end': ('django.db.models.fields.DateField', [], {'null': 'True', 'blank': 'True'}),
            'calendar_start': ('django.db.models.fields.DateField', [], {'null': 'True', 'blank': 'True'}),
            'contact': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True', 'blank': 'True'}),
            'description': ('django.db.models.fields.TextField', [], {'blank': 'True'}),
            'faq': ('django.db.models.fields.TextField', [], {'blank': 'True'}),
            'handle': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True', 'db_index': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'image': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'to': "orm['c2g.Course']"}),
            'institution': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['c2g.Institution']", 'null': 'True'}),
            'institution_only': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'instructor_group': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'instructor_group'", 'to': "orm['auth.Group']"}),
            'is_deleted': ('django.db.models.fields.IntegerField', [], {'default': '0'}),
            'last_updated': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'auto_now_add': 'True', 'blank': 'True'}),
            'list_publicly': ('django.db.models.fields.IntegerField', [], {'null': 'True', 'blank': 'True'}),
            'live_datetime': ('django.db.models.fields.DateTimeField', [], {'null': 'True', 'blank': 'True'}),
            'logo': ('django.db.models.fields.files.FileField', [], {'max_length': '100', 'null': 'True'}),
            'mode': ('django.db.models.fields.TextField', [], {'blank': 'True'}),
            'outcomes': ('django.db.models.fields.TextField', [], {'blank': 'True'}),
            'piazza_id': ('django.db.models.fields.IntegerField', [], {'null': 'True', 'blank': 'True'}),
            'prerequisites': ('django.db.models.fields.TextField', [], {'blank': 'True'}),
            'preview_only_mode': ('django.db.models.fields.BooleanField', [], {'default': 'True'}),
            'readonly_tas_group': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'readonly_tas_group'", 'to': "orm['auth.Group']"}),
            'share_to': ('django.db.models.fields.related.ManyToManyField', [], {'blank': 'True', 'related_name': "'share_from'", 'null': 'True', 'symmetrical': 'False', 'to': "orm['c2g.Course']"}),
            'short_description': ('django.db.models.fields.TextField', [], {'blank': 'True'}),
            'student_group': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'student_group'", 'to': "orm['auth.Group']"}),
            'syllabus': ('django.db.models.fields.TextField', [], {'blank': 'True'}),
            'tas_group': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'tas_group'", 'to': "orm['auth.Group']"}),
            'term': ('django.db.models.fields.TextField', [], {'blank': 'True'}),
            'time_created': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'title': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True', 'blank': 'True'}),
            'year': ('django.db.models.fields.IntegerField', [], {'null': 'True', 'blank': 'True'})
        },
        'c2g.coursecertificate': {
            'Meta': {'object_name': 'CourseCertificate'},
            'assets': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'course': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['c2g.Course']"}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'last_updated': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'auto_now_add': 'True', 'blank': 'True'}),
            'storage': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'time_created': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'type': ('django.db.models.fields.CharField', [], {'default': "'completion'", 'max_length': '64'})
        },
        'c2g.courseemail': {
            'Meta': {'object_name': 'CourseEmail', 'db_table': "u'c2g_course_emails'"},
            'course': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['c2g.Course']"}),
            'hash': ('django.db.models.fields.CharField', [], {'max_length': '128', 'db_index': 'True'}),
            'html_message': ('django.db.models.fields.TextField', [], {'null': 'True', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'last_updated': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'auto_now_add': 'True', 'blank': 'True'}),
            'sender': ('django.db.models.fields.related.ForeignKey', [], {'default': '1', 'to': "orm['auth.User']", 'null': 'True', 'blank': 'True'}),
            'subject': ('django.db.models.fields.CharField', [], {'max_length': '128', 'blank': 'True'}),
            'time_created': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'to': ('django.db.models.fields.CharField', [], {'default': "'myself'", 'max_length': '64'})
        },
        'c2g.courseinstructor': {
            'Meta': {'object_name': 'CourseInstructor', 'db_table': "u'c2g_course_instructor'"},
            'course': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['c2g.Course']"}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'instructor': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['c2g.Instructor']"}),
            'last_updated': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'auto_now_add': 'True', 'blank': 'True'}),
            'time_created': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'})
        },
        'c2g.coursestudentlist': {
            'Meta': {'object_name': 'CourseStudentList'},
            'course': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['c2g.Course']"}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'last_updated': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'auto_now_add': 'True', 'blank': 'True'}),
            'max_completion_level': ('django.db.models.fields.IntegerField', [], {'default': '0'}),
            'members': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['auth.User']", 'symmetrical': 'False'}),
            'time_created': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'})
        },
        'c2g.currenttermmap': {
            'Meta': {'object_name': 'CurrentTermMap'},
            'course_prefix': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '64', 'db_index': 'True'}),
            'course_suffix': ('django.db.models.fields.CharField', [], {'max_length': '64'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'last_updated': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'auto_now_add': 'True', 'blank': 'True'}),
            'time_created': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'})
        },
        'c2g.emailaddr': {
            'Meta': {'object_name': 'EmailAddr'},
            'addr': ('django.db.models.fields.EmailField', [], {'max_length': '128'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '128', 'null': 'True', 'blank': 'True'}),
            'optout': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'optout_code': ('django.db.models.fields.CharField', [], {'default': "'optout'", 'max_length': '64'})
        },
        'c2g.exam': {
            'Meta': {'object_name': 'Exam'},
            'assessment_type': ('django.db.models.fields.CharField', [], {'max_length': '64', 'null': 'True', 'blank': 'True'}),
            'autograde': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'course': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['c2g.Course']"}),
            'description': ('django.db.models.fields.TextField', [], {'null': 'True', 'blank': 'True'}),
            'display_single': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'due_date': ('django.db.models.fields.DateTimeField', [], {'null': 'True', 'blank': 'True'}),
            'exam_type': ('django.db.models.fields.CharField', [], {'default': "'exam'", 'max_length': '32'}),
            'grace_period': ('django.db.models.fields.DateTimeField', [], {'null': 'True', 'blank': 'True'}),
            'grade_single': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'html_content': ('django.db.models.fields.TextField', [], {'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'image': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'to': "orm['c2g.Exam']"}),
            'index': ('django.db.models.fields.IntegerField', [], {'null': 'True', 'blank': 'True'}),
            'invideo': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'is_deleted': ('django.db.models.fields.IntegerField', [], {'default': '0'}),
            'last_updated': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'auto_now_add': 'True', 'blank': 'True'}),
            'late_penalty': ('django.db.models.fields.IntegerField', [], {'default': '0', 'null': 'True', 'blank': 'True'}),
            'live_datetime': ('django.db.models.fields.DateTimeField', [], {'null': 'True', 'blank': 'True'}),
            'minutes_btw_attempts': ('django.db.models.fields.IntegerField', [], {'default': '0'}),
            'minutesallowed': ('django.db.models.fields.IntegerField', [], {'null': 'True', 'blank': 'True'}),
            'mode': ('django.db.models.fields.TextField', [], {'blank': 'True'}),
            'partial_credit_deadline': ('django.db.models.fields.DateTimeField', [], {'null': 'True', 'blank': 'True'}),
            'resubmission_penalty': ('django.db.models.fields.IntegerField', [], {'default': '0', 'null': 'True', 'blank': 'True'}),
            'section': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['c2g.ContentSection']", 'null': 'True'}),
            'slug': ('django.db.models.fields.SlugField', [], {'max_length': '255', 'null': 'True'}),
            'submissions_permitted': ('django.db.models.fields.IntegerField', [], {'default': '999', 'null': 'True', 'blank': 'True'}),
            'time_created': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'timed': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'title': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True', 'blank': 'True'}),
            'total_score': ('django.db.models.fields.FloatField', [], {'null': 'True', 'blank': 'True'}),
            'xml_imported': ('django.db.models.fields.TextField', [], {'null': 'True', 'blank': 'True'}),
            'xml_metadata': ('django.db.models.fields.TextField', [], {'null': 'True', 'blank': 'True'})
        },
        'c2g.examrecord': {
            'Meta': {'object_name': 'ExamRecord'},
            'attempt_number': ('django.db.models.fields.IntegerField', [], {'default': '0'}),
            'complete': ('django.db.models.fields.BooleanField', [], {'default': 'True'}),
            'course': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['c2g.Course']"}),
            'exam': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['c2g.Exam']"}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'json_data': ('django.db.models.fields.TextField', [], {'null': 'True', 'blank': 'True'}),
            'json_score_data': ('django.db.models.fields.TextField', [], {'null': 'True', 'blank': 'True'}),
            'last_updated': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'auto_now_add': 'True', 'blank': 'True'}),
            'late': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'onpage': ('django.db.models.fields.CharField', [], {'max_length': '512', 'null': 'True', 'blank': 'True'}),
            'score': ('django.db.models.fields.FloatField', [], {'null': 'True', 'blank': 'True'}),
            'student': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['auth.User']"}),
            'time_created': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'})
        },
        'c2g.examrecordfieldlog': {
            'Meta': {'object_name': 'ExamRecordFieldLog'},
            'course': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['c2g.Course']"}),
            'exam': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['c2g.Exam']"}),
            'field_name': ('django.db.models.fields.CharField', [], {'max_length': '128', 'db_index': 'True'}),
            'human_name': ('django.db.models.fields.CharField', [], {'db_index': 'True', 'max_length': '128', 'null': 'True', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'last_updated': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'auto_now_add': 'True', 'blank': 'True'}),
            'max_score': ('django.db.models.fields.FloatField', [], {'default': '0', 'blank': 'True'}),
            'raw_score': ('django.db.models.fields.FloatField', [], {'default': '0', 'blank': 'True'}),
            'student': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['auth.User']"}),
            'time_created': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'value': ('django.db.models.fields.TextField', [], {'null': 'True', 'blank': 'True'})
        },
        'c2g.examrecordscore': {
            'Meta': {'object_name': 'ExamRecordScore'},
            'csv_imported': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'last_updated': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'auto_now_add': 'True', 'blank': 'True'}),
            'raw_score': ('django.db.models.fields.FloatField', [], {'null': 'True', 'blank': 'True'}),
            'record': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['c2g.ExamRecord']", 'unique': 'True'}),
            'time_created': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'})
        },
        'c2g.examrecordscorefield': {
            'Meta': {'object_name': 'ExamRecordScoreField'},
            'associated_text': ('django.db.models.fields.TextField', [], {'null': 'True', 'blank': 'True'}),
            'comments': ('django.db.models.fields.TextField', [], {'null': 'True', 'blank': 'True'}),
            'correct': ('django.db.models.fields.NullBooleanField', [], {'null': 'True', 'blank': 'True'}),
            'field_name': ('django.db.models.fields.CharField', [], {'max_length': '128', 'db_index': 'True'}),
            'human_name': ('django.db.models.fields.CharField', [], {'db_index': 'True', 'max_length': '128', 'null': 'True', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'last_updated': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'auto_now_add': 'True', 'blank': 'True'}),
            'parent': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['c2g.ExamRecordScore']"}),
            'subscore': ('django.db.models.fields.FloatField', [], {'default': '0'}),
            'time_created': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'value': ('django.db.models.fields.TextField', [], {'null': 'True', 'blank': 'True'})
        },
        'c2g.examrecordscorefieldchoice': {
            'Meta': {'object_name': 'ExamRecordScoreFieldChoice'},
            'associated_text': ('django.db.models.fields.TextField', [], {'null': 'True', 'blank': 'True'}),
            'choice_value': ('django.db.models.fields.CharField', [], {'max_length': '128', 'db_index': 'True'}),
            'correct': ('django.db.models.fields.NullBooleanField', [], {'null': 'True', 'blank': 'True'}),
            'human_name': ('django.db.models.fields.CharField', [], {'db_index': 'True', 'max_length': '128', 'null': 'True', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'last_updated': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'auto_now_add': 'True', 'blank': 'True'}),
            'parent': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['c2g.ExamRecordScoreField']"}),
            'time_created': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'})
        },
        'c2g.examscore': {
            'Meta': {'unique_together': "(('exam', 'student'),)", 'object_name': 'ExamScore'},
            'course': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['c2g.Course']"}),
            'csv_imported': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'exam': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['c2g.Exam']"}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'last_updated': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'auto_now_add': 'True', 'blank': 'True'}),
            'score': ('django.db.models.fields.FloatField', [], {'null': 'True', 'blank': 'True'}),
            'student': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['auth.User']"}),
            'time_created': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'})
        },
        'c2g.examscorefield': {
            'Meta': {'object_name': 'ExamScoreField'},
            'associated_text': ('django.db.models.fields.TextField', [], {'null': 'True', 'blank': 'True'}),
            'comments': ('django.db.models.fields.TextField', [], {'null': 'True', 'blank': 'True'}),
            'correct': ('django.db.models.fields.NullBooleanField', [], {'null': 'True', 'blank': 'True'}),
            'field_name': ('django.db.models.fields.CharField', [], {'max_length': '128', 'db_index': 'True'}),
            'human_name': ('django.db.models.fields.CharField', [], {'db_index': 'True', 'max_length': '128', 'null': 'True', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'last_updated': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'auto_now_add': 'True', 'blank': 'True'}),
            'parent': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['c2g.ExamScore']"}),
            'subscore': ('django.db.models.fields.FloatField', [], {'default': '0'}),
            'time_created': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'value': ('django.db.models.fields.CharField', [], {'max_length': '128', 'null': 'True', 'blank': 'True'})
        },
        'c2g.exercise': {
            'Meta': {'object_name': 'Exercise', 'db_table': "u'c2g_exercises'"},
            'file': ('django.db.models.fields.files.FileField', [], {'max_length': '100', 'null': 'True'}),
            'fileName': ('django.db.models.fields.CharField', [], {'max_length': '255'}),
            'handle': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True', 'db_index': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'is_deleted': ('django.db.models.fields.IntegerField', [], {'default': '0'}),
            'last_updated': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'auto_now_add': 'True', 'blank': 'True'}),
            'problemSet': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['c2g.ProblemSet']", 'through': "orm['c2g.ProblemSetToExercise']", 'symmetrical': 'False'}),
            'time_created': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'video': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['c2g.Video']", 'through': "orm['c2g.VideoToExercise']", 'symmetrical': 'False'})
        },
        'c2g.file': {
            'Meta': {'object_name': 'File', 'db_table': "u'c2g_files'"},
            'course': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['c2g.Course']"}),
            'file': ('django.db.models.fields.files.FileField', [], {'max_length': '100'}),
            'handle': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True', 'db_index': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'image': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'to': "orm['c2g.File']"}),
            'index': ('django.db.models.fields.IntegerField', [], {'null': 'True', 'blank': 'True'}),
            'is_deleted': ('django.db.models.fields.IntegerField', [], {'default': '0'}),
            'last_updated': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'auto_now_add': 'True', 'blank': 'True'}),
            'live_datetime': ('django.db.models.fields.DateTimeField', [], {'null': 'True', 'blank': 'True'}),
            'mode': ('django.db.models.fields.TextField', [], {'blank': 'True'}),
            'section': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['c2g.ContentSection']", 'null': 'True'}),
            'time_created': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'title': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True', 'blank': 'True'})
        },
        'c2g.institution': {
            'Meta': {'object_name': 'Institution', 'db_table': "u'c2g_institutions'"},
            'city': ('django.db.models.fields.TextField', [], {'blank': 'True'}),
            'country': ('django.db.models.fields.TextField', [], {'blank': 'True'}),
            'domains': ('django.db.models.fields.TextField', [], {'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'last_updated': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'auto_now_add': 'True', 'blank': 'True'}),
            'time_created': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'title': ('django.db.models.fields.TextField', [], {})
        },
        'c2g.instructor': {
            'Meta': {'object_name': 'Instructor'},
            'biography': ('django.db.models.fields.TextField', [], {'blank': 'True'}),
            'email': ('django.db.models.fields.TextField', [], {'blank': 'True'}),
            'handle': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True', 'db_index': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'last_updated': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'auto_now_add': 'True', 'blank': 'True'}),
            'name': ('django.db.models.fields.TextField', [], {'blank': 'True'}),
            'photo': ('django.db.models.fields.files.FileField', [], {'max_length': '100', 'blank': 'True'}),
            'time_created': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'})
        },
        'c2g.listemail': {
            'Meta': {'object_name': 'ListEmail'},
            'from_addr': ('django.db.models.fields.CharField', [], {'max_length': '128', 'blank': 'True'}),
            'from_name': ('django.db.models.fields.CharField', [], {'max_length': '128', 'blank': 'True'}),
            'hash': ('django.db.models.fields.CharField', [], {'max_length': '128', 'db_index': 'True'}),
            'html_message': ('django.db.models.fields.TextField', [], {'null': 'True', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'last_updated': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'auto_now_add': 'True', 'blank': 'True'}),
            'sender': ('django.db.models.fields.related.ForeignKey', [], {'default': '1', 'to': "orm['auth.User']", 'null': 'True', 'blank': 'True'}),
            'subject': ('django.db.models.fields.CharField', [], {'max_length': '128', 'blank': 'True'}),
            'time_created': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'to_list': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['c2g.MailingList']"})
        },
        'c2g.mailinglist': {
            'Meta': {'object_name': 'MailingList'},
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'members': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['c2g.EmailAddr']", 'symmetrical': 'False'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '128', 'blank': 'True'})
        },
        'c2g.newsevent': {
            'Meta': {'object_name': 'NewsEvent', 'db_table': "u'c2g_news_events'"},
            'course': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['c2g.Course']"}),
            'event': ('django.db.models.fields.CharField', [], {'max_length': '255'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'time_created': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'})
        },
        'c2g.pagevisitlog': {
            'Meta': {'object_name': 'PageVisitLog', 'db_table': "u'c2g_page_visit_log'"},
            'course': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['c2g.Course']"}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'last_updated': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'auto_now_add': 'True', 'blank': 'True'}),
            'object_id': ('django.db.models.fields.CharField', [], {'max_length': '128', 'blank': 'True'}),
            'page_type': ('django.db.models.fields.CharField', [], {'max_length': '128', 'db_index': 'True'}),
            'time_created': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'user': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['auth.User']"})
        },
        'c2g.problemactivity': {
            'Meta': {'object_name': 'ProblemActivity', 'db_table': "u'c2g_problem_activity'"},
            'attempt_content': ('django.db.models.fields.TextField', [], {'null': 'True', 'blank': 'True'}),
            'attempt_number': ('django.db.models.fields.IntegerField', [], {'null': 'True', 'blank': 'True'}),
            'card': ('django.db.models.fields.TextField', [], {'blank': 'True'}),
            'cards_done': ('django.db.models.fields.IntegerField', [], {'null': 'True', 'blank': 'True'}),
            'cards_left': ('django.db.models.fields.IntegerField', [], {'null': 'True', 'blank': 'True'}),
            'casing': ('django.db.models.fields.TextField', [], {'blank': 'True'}),
            'complete': ('django.db.models.fields.IntegerField', [], {'null': 'True', 'blank': 'True'}),
            'count_hints': ('django.db.models.fields.IntegerField', [], {'null': 'True', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'last_updated': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'auto_now_add': 'True', 'blank': 'True'}),
            'problem_identifier': ('django.db.models.fields.CharField', [], {'max_length': '255', 'blank': 'True'}),
            'problem_type': ('django.db.models.fields.TextField', [], {'blank': 'True'}),
            'problemset_to_exercise': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['c2g.ProblemSetToExercise']", 'null': 'True'}),
            'review_mode': ('django.db.models.fields.IntegerField', [], {'null': 'True', 'blank': 'True'}),
            'seed': ('django.db.models.fields.TextField', [], {'blank': 'True'}),
            'sha1': ('django.db.models.fields.TextField', [], {'blank': 'True'}),
            'student': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['auth.User']"}),
            'time_created': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'time_taken': ('django.db.models.fields.IntegerField', [], {'null': 'True', 'blank': 'True'}),
            'topic_mode': ('django.db.models.fields.IntegerField', [], {'null': 'True', 'blank': 'True'}),
            'user_choices': ('django.db.models.fields.CharField', [], {'max_length': '1024', 'null': 'True', 'blank': 'True'}),
            'user_selection_val': ('django.db.models.fields.CharField', [], {'max_length': '1024', 'null': 'True', 'blank': 'True'}),
            'video_to_exercise': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['c2g.VideoToExercise']", 'null': 'True'})
        },
        'c2g.problemset': {
            'Meta': {'object_name': 'ProblemSet', 'db_table': "u'c2g_problem_sets'"},
            'assessment_type': ('django.db.models.fields.CharField', [], {'max_length': '255'}),
            'course': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['c2g.Course']"}),
            'description': ('django.db.models.fields.TextField', [], {'blank': 'True'}),
            'due_date': ('django.db.models.fields.DateTimeField', [], {'null': 'True'}),
            'grace_period': ('django.db.models.fields.DateTimeField', [], {}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'image': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'to': "orm['c2g.ProblemSet']"}),
            'index': ('django.db.models.fields.IntegerField', [], {'null': 'True', 'blank': 'True'}),
            'is_deleted': ('django.db.models.fields.IntegerField', [], {'default': '0'}),
            'last_updated': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'auto_now_add': 'True', 'blank': 'True'}),
            'late_penalty': ('django.db.models.fields.IntegerField', [], {}),
            'live_datetime': ('django.db.models.fields.DateTimeField', [], {'null': 'True', 'blank': 'True'}),
            'mode': ('django.db.models.fields.TextField', [], {'blank': 'True'}),
            'partial_credit_deadline': ('django.db.models.fields.DateTimeField', [], {}),
            'path': ('django.db.models.fields.CharField', [], {'max_length': '255'}),
            'randomize': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'resubmission_penalty': ('django.db.models.fields.IntegerField', [], {}),
            'section': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['c2g.ContentSection']"}),
            'slug': ('django.db.models.fields.SlugField', [], {'max_length': '50'}),
            'submissions_permitted': ('django.db.models.fields.IntegerField', [], {}),
            'time_created': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'title': ('django.db.models.fields.CharField', [], {'max_length': '255'})
        },
        'c2g.problemsettoexercise': {
            'Meta': {'object_name': 'ProblemSetToExercise', 'db_table': "u'c2g_problemset_to_exercise'"},
            'exercise': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['c2g.Exercise']"}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'image': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['c2g.ProblemSetToExercise']", 'null': 'True', 'blank': 'True'}),
            'is_deleted': ('django.db.models.fields.IntegerField', [], {'default': '0'}),
            'mode': ('django.db.models.fields.TextField', [], {'blank': 'True'}),
            'number': ('django.db.models.fields.IntegerField', [], {'null': 'True', 'blank': 'True'}),
            'problemSet': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['c2g.ProblemSet']"})
        },
        'c2g.studentexamstart': {
            'Meta': {'object_name': 'StudentExamStart'},
            'exam': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['c2g.Exam']"}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'last_updated': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'auto_now_add': 'True', 'blank': 'True'}),
            'student': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['auth.User']"}),
            'time_created': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'})
        },
        'c2g.studentsection': {
            'Meta': {'object_name': 'StudentSection', 'db_table': "u'c2g_sections'"},
            'capacity': ('django.db.models.fields.IntegerField', [], {'default': '999'}),
            'course': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['c2g.Course']"}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'is_deleted': ('django.db.models.fields.IntegerField', [], {'default': '0'}),
            'last_updated': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'auto_now_add': 'True', 'blank': 'True'}),
            'members': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['auth.User']", 'symmetrical': 'False'}),
            'time_created': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'title': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True', 'blank': 'True'})
        },
        'c2g.userprofile': {
            'Meta': {'object_name': 'UserProfile', 'db_table': "u'c2g_user_profiles'"},
            'accept_language': ('django.db.models.fields.CharField', [], {'max_length': '64', 'null': 'True'}),
            'accept_language_first': ('django.db.models.fields.CharField', [], {'max_length': '64', 'null': 'True'}),
            'birth_year': ('django.db.models.fields.CharField', [], {'max_length': '64', 'null': 'True'}),
            'certificates': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['c2g.CourseCertificate']", 'symmetrical': 'False'}),
            'client_ip': ('django.db.models.fields.CharField', [], {'max_length': '30', 'null': 'True'}),
            'client_ip_first': ('django.db.models.fields.CharField', [], {'max_length': '30', 'null': 'True'}),
            'education': ('django.db.models.fields.CharField', [], {'max_length': '64', 'null': 'True'}),
            'email_me': ('django.db.models.fields.BooleanField', [], {'default': 'True'}),
            'gender': ('django.db.models.fields.CharField', [], {'max_length': '64', 'null': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'institutions': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['c2g.Institution']", 'symmetrical': 'False'}),
            'last_updated': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'auto_now_add': 'True', 'blank': 'True'}),
            'piazza_email': ('django.db.models.fields.CharField', [], {'max_length': '128', 'blank': 'True'}),
            'piazza_name': ('django.db.models.fields.CharField', [], {'max_length': '128', 'blank': 'True'}),
            'referrer': ('django.db.models.fields.CharField', [], {'max_length': '256', 'null': 'True'}),
            'referrer_first': ('django.db.models.fields.CharField', [], {'max_length': '256', 'null': 'True'}),
            'site_data': ('django.db.models.fields.TextField', [], {'blank': 'True'}),
            'time_created': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'user': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['auth.User']", 'unique': 'True'}),
            'user_agent': ('django.db.models.fields.CharField', [], {'max_length': '256', 'null': 'True'}),
            'user_agent_first': ('django.db.models.fields.CharField', [], {'max_length': '256', 'null': 'True'}),
            'work': ('django.db.models.fields.CharField', [], {'max_length': '128', 'null': 'True'})
        },
        'c2g.video': {
            'Meta': {'object_name': 'Video', 'db_table': "u'c2g_videos'"},
            'course': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['c2g.Course']"}),
            'description': ('django.db.models.fields.TextField', [], {'blank': 'True'}),
            'duration': ('django.db.models.fields.IntegerField', [], {'null': 'True', 'blank': 'True'}),
            'exam': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['c2g.Exam']", 'null': 'True', 'blank': 'True'}),
            'file': ('django.db.models.fields.files.FileField', [], {'max_length': '100'}),
            'handle': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True', 'db_index': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'image': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'to': "orm['c2g.Video']"}),
            'index': ('django.db.models.fields.IntegerField', [], {'null': 'True', 'blank': 'True'}),
            'is_deleted': ('django.db.models.fields.IntegerField', [], {'default': '0'}),
            'last_updated': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'auto_now_add': 'True', 'blank': 'True'}),
            'live_datetime': ('django.db.models.fields.DateTimeField', [], {'null': 'True', 'blank': 'True'}),
            'mode': ('django.db.models.fields.TextField', [], {'blank': 'True'}),
            'section': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['c2g.ContentSection']", 'null': 'True'}),
            'slug': ('django.db.models.fields.SlugField', [], {'max_length': '255', 'null': 'True'}),
            'time_created': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'title': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True', 'blank': 'True'}),
            'type': ('django.db.models.fields.CharField', [], {'default': "'youtube'", 'max_length': '30'}),
            'url': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True', 'blank': 'True'})
        },
        'c2g.videoactivity': {
            'Meta': {'object_name': 'VideoActivity', 'db_table': "u'c2g_video_activity'"},
            'course': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['c2g.Course']"}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'max_end_seconds': ('django.db.models.fields.IntegerField', [], {'default': '0', 'blank': 'True'}),
            'start_seconds': ('django.db.models.fields.IntegerField', [], {'default': '0', 'blank': 'True'}),
            'student': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['auth.User']"}),
            'video': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['c2g.Video']"})
        },
        'c2g.videodownload': {
            'Meta': {'object_name': 'VideoDownload', 'db_table': "u'c2g_video_download'"},
            'course': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['c2g.Course']"}),
            'download_date': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'format': ('django.db.models.fields.CharField', [], {'max_length': '35', 'null': 'True', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'student': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['auth.User']"}),
            'video': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['c2g.Video']"})
        },
        'c2g.videotoexercise': {
            'Meta': {'object_name': 'VideoToExercise', 'db_table': "u'c2g_video_to_exercise'"},
            'exercise': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['c2g.Exercise']"}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'image': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['c2g.VideoToExercise']", 'null': 'True', 'blank': 'True'}),
            'is_deleted': ('django.db.models.fields.IntegerField', [], {'default': '0'}),
            'mode': ('django.db.models.fields.TextField', [], {'blank': 'True'}),
            'video': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['c2g.Video']"}),
            'video_time': ('django.db.models.fields.IntegerField', [], {})
        },
        'c2g.videoviewtraces': {
            'Meta': {'object_name': 'VideoViewTraces', 'db_table': "u'c2g_video_view_traces'"},
            'course': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['c2g.Course']"}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'last_updated': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'auto_now_add': 'True', 'blank': 'True'}),
            'time_created': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'trace': ('django.db.models.fields.TextField', [], {'blank': 'True'}),
            'user': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['auth.User']"}),
            'video': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['c2g.Video']"})
        },
        'contenttypes.contenttype': {
            'Meta': {'ordering': "('name',)", 'unique_together': "(('app_label', 'model'),)", 'object_name': 'ContentType', 'db_table': "'django_content_type'"},
            'app_label': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'model': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '100'})
        }
    }

    complete_apps = ['c2g']
########NEW FILE########
__FILENAME__ = 0005_auto__add_field_exam_quizdown
# -*- coding: utf-8 -*-
import datetime
from south.db import db
from south.v2 import SchemaMigration
from django.db import models


class Migration(SchemaMigration):

    def forwards(self, orm):
        # Adding field 'Exam.quizdown'
        db.add_column('c2g_exam', 'quizdown',
                      self.gf('django.db.models.fields.TextField')(null=True, blank=True),
                      keep_default=False)


    def backwards(self, orm):
        # Deleting field 'Exam.quizdown'
        db.delete_column('c2g_exam', 'quizdown')


    models = {
        'auth.group': {
            'Meta': {'object_name': 'Group'},
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '80'}),
            'permissions': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['auth.Permission']", 'symmetrical': 'False', 'blank': 'True'})
        },
        'auth.permission': {
            'Meta': {'ordering': "('content_type__app_label', 'content_type__model', 'codename')", 'unique_together': "(('content_type', 'codename'),)", 'object_name': 'Permission'},
            'codename': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'content_type': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['contenttypes.ContentType']"}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '50'})
        },
        'auth.user': {
            'Meta': {'object_name': 'User'},
            'date_joined': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
            'email': ('django.db.models.fields.EmailField', [], {'max_length': '75', 'blank': 'True'}),
            'first_name': ('django.db.models.fields.CharField', [], {'max_length': '30', 'blank': 'True'}),
            'groups': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['auth.Group']", 'symmetrical': 'False', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'is_active': ('django.db.models.fields.BooleanField', [], {'default': 'True'}),
            'is_staff': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'is_superuser': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'last_login': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
            'last_name': ('django.db.models.fields.CharField', [], {'max_length': '30', 'blank': 'True'}),
            'password': ('django.db.models.fields.CharField', [], {'max_length': '128'}),
            'user_permissions': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['auth.Permission']", 'symmetrical': 'False', 'blank': 'True'}),
            'username': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '30'})
        },
        'c2g.additionalpage': {
            'Meta': {'object_name': 'AdditionalPage', 'db_table': "u'c2g_additional_pages'"},
            'course': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['c2g.Course']"}),
            'description': ('django.db.models.fields.TextField', [], {'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'image': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'to': "orm['c2g.AdditionalPage']"}),
            'index': ('django.db.models.fields.IntegerField', [], {'null': 'True', 'blank': 'True'}),
            'is_deleted': ('django.db.models.fields.IntegerField', [], {'default': '0'}),
            'last_updated': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'auto_now_add': 'True', 'blank': 'True'}),
            'live_datetime': ('django.db.models.fields.DateTimeField', [], {'null': 'True', 'blank': 'True'}),
            'menu_slug': ('django.db.models.fields.SlugField', [], {'max_length': '255', 'null': 'True', 'blank': 'True'}),
            'mode': ('django.db.models.fields.TextField', [], {'blank': 'True'}),
            'section': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['c2g.ContentSection']", 'null': 'True'}),
            'slug': ('django.db.models.fields.SlugField', [], {'max_length': '255', 'null': 'True', 'blank': 'True'}),
            'time_created': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'title': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True', 'blank': 'True'})
        },
        'c2g.announcement': {
            'Meta': {'object_name': 'Announcement', 'db_table': "u'c2g_announcements'"},
            'course': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['c2g.Course']"}),
            'description': ('django.db.models.fields.TextField', [], {'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'image': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'to': "orm['c2g.Announcement']"}),
            'index': ('django.db.models.fields.IntegerField', [], {'null': 'True', 'blank': 'True'}),
            'is_deleted': ('django.db.models.fields.IntegerField', [], {'default': '0'}),
            'last_updated': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'auto_now_add': 'True', 'blank': 'True'}),
            'live_datetime': ('django.db.models.fields.DateTimeField', [], {'null': 'True', 'blank': 'True'}),
            'mode': ('django.db.models.fields.TextField', [], {'blank': 'True'}),
            'owner': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['auth.User']"}),
            'time_created': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'title': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True', 'blank': 'True'})
        },
        'c2g.contentgroup': {
            'Meta': {'object_name': 'ContentGroup', 'db_table': "u'c2g_content_group'"},
            'additional_page': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['c2g.AdditionalPage']", 'null': 'True', 'blank': 'True'}),
            'course': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['c2g.Course']"}),
            'display_style': ('django.db.models.fields.CharField', [], {'default': "'list'", 'max_length': '32', 'blank': 'True'}),
            'exam': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['c2g.Exam']", 'null': 'True', 'blank': 'True'}),
            'file': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['c2g.File']", 'null': 'True', 'blank': 'True'}),
            'group_id': ('django.db.models.fields.IntegerField', [], {'db_index': 'True', 'null': 'True', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'level': ('django.db.models.fields.IntegerField', [], {'db_index': 'True'}),
            'problemSet': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['c2g.ProblemSet']", 'null': 'True', 'blank': 'True'}),
            'video': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['c2g.Video']", 'null': 'True', 'blank': 'True'})
        },
        'c2g.contentsection': {
            'Meta': {'object_name': 'ContentSection', 'db_table': "u'c2g_content_sections'"},
            'course': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['c2g.Course']"}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'image': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'to': "orm['c2g.ContentSection']"}),
            'index': ('django.db.models.fields.IntegerField', [], {'null': 'True', 'blank': 'True'}),
            'is_deleted': ('django.db.models.fields.IntegerField', [], {'default': '0'}),
            'last_updated': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'auto_now_add': 'True', 'blank': 'True'}),
            'live_datetime': ('django.db.models.fields.DateTimeField', [], {'null': 'True', 'blank': 'True'}),
            'mode': ('django.db.models.fields.TextField', [], {'blank': 'True'}),
            'slug': ('django.db.models.fields.SlugField', [], {'max_length': '255', 'null': 'True', 'blank': 'True'}),
            'subtitle': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True', 'blank': 'True'}),
            'time_created': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'title': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True', 'blank': 'True'})
        },
        'c2g.course': {
            'Meta': {'object_name': 'Course', 'db_table': "u'c2g_courses'"},
            'accompanying_materials': ('django.db.models.fields.TextField', [], {'blank': 'True'}),
            'calendar_end': ('django.db.models.fields.DateField', [], {'null': 'True', 'blank': 'True'}),
            'calendar_start': ('django.db.models.fields.DateField', [], {'null': 'True', 'blank': 'True'}),
            'contact': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True', 'blank': 'True'}),
            'description': ('django.db.models.fields.TextField', [], {'blank': 'True'}),
            'faq': ('django.db.models.fields.TextField', [], {'blank': 'True'}),
            'handle': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True', 'db_index': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'image': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'to': "orm['c2g.Course']"}),
            'institution': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['c2g.Institution']", 'null': 'True'}),
            'institution_only': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'instructor_group': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'instructor_group'", 'to': "orm['auth.Group']"}),
            'is_deleted': ('django.db.models.fields.IntegerField', [], {'default': '0'}),
            'last_updated': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'auto_now_add': 'True', 'blank': 'True'}),
            'list_publicly': ('django.db.models.fields.IntegerField', [], {'null': 'True', 'blank': 'True'}),
            'live_datetime': ('django.db.models.fields.DateTimeField', [], {'null': 'True', 'blank': 'True'}),
            'logo': ('django.db.models.fields.files.FileField', [], {'max_length': '100', 'null': 'True'}),
            'mode': ('django.db.models.fields.TextField', [], {'blank': 'True'}),
            'outcomes': ('django.db.models.fields.TextField', [], {'blank': 'True'}),
            'piazza_id': ('django.db.models.fields.IntegerField', [], {'null': 'True', 'blank': 'True'}),
            'prerequisites': ('django.db.models.fields.TextField', [], {'blank': 'True'}),
            'preview_only_mode': ('django.db.models.fields.BooleanField', [], {'default': 'True'}),
            'readonly_tas_group': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'readonly_tas_group'", 'to': "orm['auth.Group']"}),
            'share_to': ('django.db.models.fields.related.ManyToManyField', [], {'blank': 'True', 'related_name': "'share_from'", 'null': 'True', 'symmetrical': 'False', 'to': "orm['c2g.Course']"}),
            'short_description': ('django.db.models.fields.TextField', [], {'blank': 'True'}),
            'student_group': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'student_group'", 'to': "orm['auth.Group']"}),
            'syllabus': ('django.db.models.fields.TextField', [], {'blank': 'True'}),
            'tas_group': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'tas_group'", 'to': "orm['auth.Group']"}),
            'term': ('django.db.models.fields.TextField', [], {'blank': 'True'}),
            'time_created': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'title': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True', 'blank': 'True'}),
            'year': ('django.db.models.fields.IntegerField', [], {'null': 'True', 'blank': 'True'})
        },
        'c2g.coursecertificate': {
            'Meta': {'object_name': 'CourseCertificate'},
            'assets': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'course': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['c2g.Course']"}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'last_updated': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'auto_now_add': 'True', 'blank': 'True'}),
            'storage': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'time_created': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'type': ('django.db.models.fields.CharField', [], {'default': "'completion'", 'max_length': '64'})
        },
        'c2g.courseemail': {
            'Meta': {'object_name': 'CourseEmail', 'db_table': "u'c2g_course_emails'"},
            'course': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['c2g.Course']"}),
            'hash': ('django.db.models.fields.CharField', [], {'max_length': '128', 'db_index': 'True'}),
            'html_message': ('django.db.models.fields.TextField', [], {'null': 'True', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'last_updated': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'auto_now_add': 'True', 'blank': 'True'}),
            'sender': ('django.db.models.fields.related.ForeignKey', [], {'default': '1', 'to': "orm['auth.User']", 'null': 'True', 'blank': 'True'}),
            'subject': ('django.db.models.fields.CharField', [], {'max_length': '128', 'blank': 'True'}),
            'time_created': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'to': ('django.db.models.fields.CharField', [], {'default': "'myself'", 'max_length': '64'})
        },
        'c2g.courseinstructor': {
            'Meta': {'object_name': 'CourseInstructor', 'db_table': "u'c2g_course_instructor'"},
            'course': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['c2g.Course']"}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'instructor': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['c2g.Instructor']"}),
            'last_updated': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'auto_now_add': 'True', 'blank': 'True'}),
            'time_created': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'})
        },
        'c2g.coursestudentlist': {
            'Meta': {'object_name': 'CourseStudentList'},
            'course': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['c2g.Course']"}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'last_updated': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'auto_now_add': 'True', 'blank': 'True'}),
            'max_completion_level': ('django.db.models.fields.IntegerField', [], {'default': '0'}),
            'members': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['auth.User']", 'symmetrical': 'False'}),
            'time_created': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'})
        },
        'c2g.currenttermmap': {
            'Meta': {'object_name': 'CurrentTermMap'},
            'course_prefix': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '64', 'db_index': 'True'}),
            'course_suffix': ('django.db.models.fields.CharField', [], {'max_length': '64'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'last_updated': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'auto_now_add': 'True', 'blank': 'True'}),
            'time_created': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'})
        },
        'c2g.emailaddr': {
            'Meta': {'object_name': 'EmailAddr'},
            'addr': ('django.db.models.fields.EmailField', [], {'max_length': '128'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '128', 'null': 'True', 'blank': 'True'}),
            'optout': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'optout_code': ('django.db.models.fields.CharField', [], {'default': "'optout'", 'max_length': '64'})
        },
        'c2g.exam': {
            'Meta': {'object_name': 'Exam'},
            'assessment_type': ('django.db.models.fields.CharField', [], {'max_length': '64', 'null': 'True', 'blank': 'True'}),
            'autograde': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'course': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['c2g.Course']"}),
            'description': ('django.db.models.fields.TextField', [], {'null': 'True', 'blank': 'True'}),
            'display_single': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'due_date': ('django.db.models.fields.DateTimeField', [], {'null': 'True', 'blank': 'True'}),
            'exam_type': ('django.db.models.fields.CharField', [], {'default': "'exam'", 'max_length': '32'}),
            'grace_period': ('django.db.models.fields.DateTimeField', [], {'null': 'True', 'blank': 'True'}),
            'grade_single': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'html_content': ('django.db.models.fields.TextField', [], {'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'image': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'to': "orm['c2g.Exam']"}),
            'index': ('django.db.models.fields.IntegerField', [], {'null': 'True', 'blank': 'True'}),
            'invideo': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'is_deleted': ('django.db.models.fields.IntegerField', [], {'default': '0'}),
            'last_updated': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'auto_now_add': 'True', 'blank': 'True'}),
            'late_penalty': ('django.db.models.fields.IntegerField', [], {'default': '0', 'null': 'True', 'blank': 'True'}),
            'live_datetime': ('django.db.models.fields.DateTimeField', [], {'null': 'True', 'blank': 'True'}),
            'minutes_btw_attempts': ('django.db.models.fields.IntegerField', [], {'default': '0'}),
            'minutesallowed': ('django.db.models.fields.IntegerField', [], {'null': 'True', 'blank': 'True'}),
            'mode': ('django.db.models.fields.TextField', [], {'blank': 'True'}),
            'partial_credit_deadline': ('django.db.models.fields.DateTimeField', [], {'null': 'True', 'blank': 'True'}),
            'quizdown': ('django.db.models.fields.TextField', [], {'null': 'True', 'blank': 'True'}),
            'resubmission_penalty': ('django.db.models.fields.IntegerField', [], {'default': '0', 'null': 'True', 'blank': 'True'}),
            'section': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['c2g.ContentSection']", 'null': 'True'}),
            'slug': ('django.db.models.fields.SlugField', [], {'max_length': '255', 'null': 'True'}),
            'submissions_permitted': ('django.db.models.fields.IntegerField', [], {'default': '999', 'null': 'True', 'blank': 'True'}),
            'time_created': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'timed': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'title': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True', 'blank': 'True'}),
            'total_score': ('django.db.models.fields.FloatField', [], {'null': 'True', 'blank': 'True'}),
            'xml_imported': ('django.db.models.fields.TextField', [], {'null': 'True', 'blank': 'True'}),
            'xml_metadata': ('django.db.models.fields.TextField', [], {'null': 'True', 'blank': 'True'})
        },
        'c2g.examrecord': {
            'Meta': {'object_name': 'ExamRecord'},
            'attempt_number': ('django.db.models.fields.IntegerField', [], {'default': '0'}),
            'complete': ('django.db.models.fields.BooleanField', [], {'default': 'True'}),
            'course': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['c2g.Course']"}),
            'exam': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['c2g.Exam']"}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'json_data': ('django.db.models.fields.TextField', [], {'null': 'True', 'blank': 'True'}),
            'json_score_data': ('django.db.models.fields.TextField', [], {'null': 'True', 'blank': 'True'}),
            'last_updated': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'auto_now_add': 'True', 'blank': 'True'}),
            'late': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'onpage': ('django.db.models.fields.CharField', [], {'max_length': '512', 'null': 'True', 'blank': 'True'}),
            'score': ('django.db.models.fields.FloatField', [], {'null': 'True', 'blank': 'True'}),
            'student': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['auth.User']"}),
            'time_created': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'})
        },
        'c2g.examrecordfieldlog': {
            'Meta': {'object_name': 'ExamRecordFieldLog'},
            'course': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['c2g.Course']"}),
            'exam': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['c2g.Exam']"}),
            'field_name': ('django.db.models.fields.CharField', [], {'max_length': '128', 'db_index': 'True'}),
            'human_name': ('django.db.models.fields.CharField', [], {'db_index': 'True', 'max_length': '128', 'null': 'True', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'last_updated': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'auto_now_add': 'True', 'blank': 'True'}),
            'max_score': ('django.db.models.fields.FloatField', [], {'default': '0', 'blank': 'True'}),
            'raw_score': ('django.db.models.fields.FloatField', [], {'default': '0', 'blank': 'True'}),
            'student': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['auth.User']"}),
            'time_created': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'value': ('django.db.models.fields.TextField', [], {'null': 'True', 'blank': 'True'})
        },
        'c2g.examrecordscore': {
            'Meta': {'object_name': 'ExamRecordScore'},
            'csv_imported': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'last_updated': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'auto_now_add': 'True', 'blank': 'True'}),
            'raw_score': ('django.db.models.fields.FloatField', [], {'null': 'True', 'blank': 'True'}),
            'record': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['c2g.ExamRecord']", 'unique': 'True'}),
            'time_created': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'})
        },
        'c2g.examrecordscorefield': {
            'Meta': {'object_name': 'ExamRecordScoreField'},
            'associated_text': ('django.db.models.fields.TextField', [], {'null': 'True', 'blank': 'True'}),
            'comments': ('django.db.models.fields.TextField', [], {'null': 'True', 'blank': 'True'}),
            'correct': ('django.db.models.fields.NullBooleanField', [], {'null': 'True', 'blank': 'True'}),
            'field_name': ('django.db.models.fields.CharField', [], {'max_length': '128', 'db_index': 'True'}),
            'human_name': ('django.db.models.fields.CharField', [], {'db_index': 'True', 'max_length': '128', 'null': 'True', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'last_updated': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'auto_now_add': 'True', 'blank': 'True'}),
            'parent': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['c2g.ExamRecordScore']"}),
            'subscore': ('django.db.models.fields.FloatField', [], {'default': '0'}),
            'time_created': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'value': ('django.db.models.fields.TextField', [], {'null': 'True', 'blank': 'True'})
        },
        'c2g.examrecordscorefieldchoice': {
            'Meta': {'object_name': 'ExamRecordScoreFieldChoice'},
            'associated_text': ('django.db.models.fields.TextField', [], {'null': 'True', 'blank': 'True'}),
            'choice_value': ('django.db.models.fields.CharField', [], {'max_length': '128', 'db_index': 'True'}),
            'correct': ('django.db.models.fields.NullBooleanField', [], {'null': 'True', 'blank': 'True'}),
            'human_name': ('django.db.models.fields.CharField', [], {'db_index': 'True', 'max_length': '128', 'null': 'True', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'last_updated': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'auto_now_add': 'True', 'blank': 'True'}),
            'parent': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['c2g.ExamRecordScoreField']"}),
            'time_created': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'})
        },
        'c2g.examscore': {
            'Meta': {'unique_together': "(('exam', 'student'),)", 'object_name': 'ExamScore'},
            'course': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['c2g.Course']"}),
            'csv_imported': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'exam': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['c2g.Exam']"}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'last_updated': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'auto_now_add': 'True', 'blank': 'True'}),
            'score': ('django.db.models.fields.FloatField', [], {'null': 'True', 'blank': 'True'}),
            'student': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['auth.User']"}),
            'time_created': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'})
        },
        'c2g.examscorefield': {
            'Meta': {'object_name': 'ExamScoreField'},
            'associated_text': ('django.db.models.fields.TextField', [], {'null': 'True', 'blank': 'True'}),
            'comments': ('django.db.models.fields.TextField', [], {'null': 'True', 'blank': 'True'}),
            'correct': ('django.db.models.fields.NullBooleanField', [], {'null': 'True', 'blank': 'True'}),
            'field_name': ('django.db.models.fields.CharField', [], {'max_length': '128', 'db_index': 'True'}),
            'human_name': ('django.db.models.fields.CharField', [], {'db_index': 'True', 'max_length': '128', 'null': 'True', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'last_updated': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'auto_now_add': 'True', 'blank': 'True'}),
            'parent': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['c2g.ExamScore']"}),
            'subscore': ('django.db.models.fields.FloatField', [], {'default': '0'}),
            'time_created': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'value': ('django.db.models.fields.CharField', [], {'max_length': '128', 'null': 'True', 'blank': 'True'})
        },
        'c2g.exercise': {
            'Meta': {'object_name': 'Exercise', 'db_table': "u'c2g_exercises'"},
            'file': ('django.db.models.fields.files.FileField', [], {'max_length': '100', 'null': 'True'}),
            'fileName': ('django.db.models.fields.CharField', [], {'max_length': '255'}),
            'handle': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True', 'db_index': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'is_deleted': ('django.db.models.fields.IntegerField', [], {'default': '0'}),
            'last_updated': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'auto_now_add': 'True', 'blank': 'True'}),
            'problemSet': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['c2g.ProblemSet']", 'through': "orm['c2g.ProblemSetToExercise']", 'symmetrical': 'False'}),
            'time_created': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'video': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['c2g.Video']", 'through': "orm['c2g.VideoToExercise']", 'symmetrical': 'False'})
        },
        'c2g.file': {
            'Meta': {'object_name': 'File', 'db_table': "u'c2g_files'"},
            'course': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['c2g.Course']"}),
            'file': ('django.db.models.fields.files.FileField', [], {'max_length': '100'}),
            'handle': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True', 'db_index': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'image': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'to': "orm['c2g.File']"}),
            'index': ('django.db.models.fields.IntegerField', [], {'null': 'True', 'blank': 'True'}),
            'is_deleted': ('django.db.models.fields.IntegerField', [], {'default': '0'}),
            'last_updated': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'auto_now_add': 'True', 'blank': 'True'}),
            'live_datetime': ('django.db.models.fields.DateTimeField', [], {'null': 'True', 'blank': 'True'}),
            'mode': ('django.db.models.fields.TextField', [], {'blank': 'True'}),
            'section': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['c2g.ContentSection']", 'null': 'True'}),
            'time_created': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'title': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True', 'blank': 'True'})
        },
        'c2g.institution': {
            'Meta': {'object_name': 'Institution', 'db_table': "u'c2g_institutions'"},
            'city': ('django.db.models.fields.TextField', [], {'blank': 'True'}),
            'country': ('django.db.models.fields.TextField', [], {'blank': 'True'}),
            'domains': ('django.db.models.fields.TextField', [], {'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'last_updated': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'auto_now_add': 'True', 'blank': 'True'}),
            'time_created': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'title': ('django.db.models.fields.TextField', [], {})
        },
        'c2g.instructor': {
            'Meta': {'object_name': 'Instructor'},
            'biography': ('django.db.models.fields.TextField', [], {'blank': 'True'}),
            'email': ('django.db.models.fields.TextField', [], {'blank': 'True'}),
            'handle': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True', 'db_index': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'last_updated': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'auto_now_add': 'True', 'blank': 'True'}),
            'name': ('django.db.models.fields.TextField', [], {'blank': 'True'}),
            'photo': ('django.db.models.fields.files.FileField', [], {'max_length': '100', 'blank': 'True'}),
            'time_created': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'})
        },
        'c2g.listemail': {
            'Meta': {'object_name': 'ListEmail'},
            'from_addr': ('django.db.models.fields.CharField', [], {'max_length': '128', 'blank': 'True'}),
            'from_name': ('django.db.models.fields.CharField', [], {'max_length': '128', 'blank': 'True'}),
            'hash': ('django.db.models.fields.CharField', [], {'max_length': '128', 'db_index': 'True'}),
            'html_message': ('django.db.models.fields.TextField', [], {'null': 'True', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'last_updated': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'auto_now_add': 'True', 'blank': 'True'}),
            'sender': ('django.db.models.fields.related.ForeignKey', [], {'default': '1', 'to': "orm['auth.User']", 'null': 'True', 'blank': 'True'}),
            'subject': ('django.db.models.fields.CharField', [], {'max_length': '128', 'blank': 'True'}),
            'time_created': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'to_list': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['c2g.MailingList']"})
        },
        'c2g.mailinglist': {
            'Meta': {'object_name': 'MailingList'},
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'members': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['c2g.EmailAddr']", 'symmetrical': 'False'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '128', 'blank': 'True'})
        },
        'c2g.newsevent': {
            'Meta': {'object_name': 'NewsEvent', 'db_table': "u'c2g_news_events'"},
            'course': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['c2g.Course']"}),
            'event': ('django.db.models.fields.CharField', [], {'max_length': '255'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'time_created': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'})
        },
        'c2g.pagevisitlog': {
            'Meta': {'object_name': 'PageVisitLog', 'db_table': "u'c2g_page_visit_log'"},
            'course': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['c2g.Course']"}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'last_updated': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'auto_now_add': 'True', 'blank': 'True'}),
            'object_id': ('django.db.models.fields.CharField', [], {'max_length': '128', 'blank': 'True'}),
            'page_type': ('django.db.models.fields.CharField', [], {'max_length': '128', 'db_index': 'True'}),
            'time_created': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'user': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['auth.User']"})
        },
        'c2g.problemactivity': {
            'Meta': {'object_name': 'ProblemActivity', 'db_table': "u'c2g_problem_activity'"},
            'attempt_content': ('django.db.models.fields.TextField', [], {'null': 'True', 'blank': 'True'}),
            'attempt_number': ('django.db.models.fields.IntegerField', [], {'null': 'True', 'blank': 'True'}),
            'card': ('django.db.models.fields.TextField', [], {'blank': 'True'}),
            'cards_done': ('django.db.models.fields.IntegerField', [], {'null': 'True', 'blank': 'True'}),
            'cards_left': ('django.db.models.fields.IntegerField', [], {'null': 'True', 'blank': 'True'}),
            'casing': ('django.db.models.fields.TextField', [], {'blank': 'True'}),
            'complete': ('django.db.models.fields.IntegerField', [], {'null': 'True', 'blank': 'True'}),
            'count_hints': ('django.db.models.fields.IntegerField', [], {'null': 'True', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'last_updated': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'auto_now_add': 'True', 'blank': 'True'}),
            'problem_identifier': ('django.db.models.fields.CharField', [], {'max_length': '255', 'blank': 'True'}),
            'problem_type': ('django.db.models.fields.TextField', [], {'blank': 'True'}),
            'problemset_to_exercise': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['c2g.ProblemSetToExercise']", 'null': 'True'}),
            'review_mode': ('django.db.models.fields.IntegerField', [], {'null': 'True', 'blank': 'True'}),
            'seed': ('django.db.models.fields.TextField', [], {'blank': 'True'}),
            'sha1': ('django.db.models.fields.TextField', [], {'blank': 'True'}),
            'student': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['auth.User']"}),
            'time_created': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'time_taken': ('django.db.models.fields.IntegerField', [], {'null': 'True', 'blank': 'True'}),
            'topic_mode': ('django.db.models.fields.IntegerField', [], {'null': 'True', 'blank': 'True'}),
            'user_choices': ('django.db.models.fields.CharField', [], {'max_length': '1024', 'null': 'True', 'blank': 'True'}),
            'user_selection_val': ('django.db.models.fields.CharField', [], {'max_length': '1024', 'null': 'True', 'blank': 'True'}),
            'video_to_exercise': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['c2g.VideoToExercise']", 'null': 'True'})
        },
        'c2g.problemset': {
            'Meta': {'object_name': 'ProblemSet', 'db_table': "u'c2g_problem_sets'"},
            'assessment_type': ('django.db.models.fields.CharField', [], {'max_length': '255'}),
            'course': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['c2g.Course']"}),
            'description': ('django.db.models.fields.TextField', [], {'blank': 'True'}),
            'due_date': ('django.db.models.fields.DateTimeField', [], {'null': 'True'}),
            'grace_period': ('django.db.models.fields.DateTimeField', [], {}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'image': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'to': "orm['c2g.ProblemSet']"}),
            'index': ('django.db.models.fields.IntegerField', [], {'null': 'True', 'blank': 'True'}),
            'is_deleted': ('django.db.models.fields.IntegerField', [], {'default': '0'}),
            'last_updated': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'auto_now_add': 'True', 'blank': 'True'}),
            'late_penalty': ('django.db.models.fields.IntegerField', [], {}),
            'live_datetime': ('django.db.models.fields.DateTimeField', [], {'null': 'True', 'blank': 'True'}),
            'mode': ('django.db.models.fields.TextField', [], {'blank': 'True'}),
            'partial_credit_deadline': ('django.db.models.fields.DateTimeField', [], {}),
            'path': ('django.db.models.fields.CharField', [], {'max_length': '255'}),
            'randomize': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'resubmission_penalty': ('django.db.models.fields.IntegerField', [], {}),
            'section': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['c2g.ContentSection']"}),
            'slug': ('django.db.models.fields.SlugField', [], {'max_length': '50'}),
            'submissions_permitted': ('django.db.models.fields.IntegerField', [], {}),
            'time_created': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'title': ('django.db.models.fields.CharField', [], {'max_length': '255'})
        },
        'c2g.problemsettoexercise': {
            'Meta': {'object_name': 'ProblemSetToExercise', 'db_table': "u'c2g_problemset_to_exercise'"},
            'exercise': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['c2g.Exercise']"}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'image': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['c2g.ProblemSetToExercise']", 'null': 'True', 'blank': 'True'}),
            'is_deleted': ('django.db.models.fields.IntegerField', [], {'default': '0'}),
            'mode': ('django.db.models.fields.TextField', [], {'blank': 'True'}),
            'number': ('django.db.models.fields.IntegerField', [], {'null': 'True', 'blank': 'True'}),
            'problemSet': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['c2g.ProblemSet']"})
        },
        'c2g.studentexamstart': {
            'Meta': {'object_name': 'StudentExamStart'},
            'exam': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['c2g.Exam']"}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'last_updated': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'auto_now_add': 'True', 'blank': 'True'}),
            'student': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['auth.User']"}),
            'time_created': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'})
        },
        'c2g.studentsection': {
            'Meta': {'object_name': 'StudentSection', 'db_table': "u'c2g_sections'"},
            'capacity': ('django.db.models.fields.IntegerField', [], {'default': '999'}),
            'course': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['c2g.Course']"}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'is_deleted': ('django.db.models.fields.IntegerField', [], {'default': '0'}),
            'last_updated': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'auto_now_add': 'True', 'blank': 'True'}),
            'members': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['auth.User']", 'symmetrical': 'False'}),
            'time_created': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'title': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True', 'blank': 'True'})
        },
        'c2g.userprofile': {
            'Meta': {'object_name': 'UserProfile', 'db_table': "u'c2g_user_profiles'"},
            'accept_language': ('django.db.models.fields.CharField', [], {'max_length': '64', 'null': 'True'}),
            'accept_language_first': ('django.db.models.fields.CharField', [], {'max_length': '64', 'null': 'True'}),
            'birth_year': ('django.db.models.fields.CharField', [], {'max_length': '64', 'null': 'True'}),
            'certificates': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['c2g.CourseCertificate']", 'symmetrical': 'False'}),
            'client_ip': ('django.db.models.fields.CharField', [], {'max_length': '30', 'null': 'True'}),
            'client_ip_first': ('django.db.models.fields.CharField', [], {'max_length': '30', 'null': 'True'}),
            'education': ('django.db.models.fields.CharField', [], {'max_length': '64', 'null': 'True'}),
            'email_me': ('django.db.models.fields.BooleanField', [], {'default': 'True'}),
            'gender': ('django.db.models.fields.CharField', [], {'max_length': '64', 'null': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'institutions': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['c2g.Institution']", 'symmetrical': 'False'}),
            'last_updated': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'auto_now_add': 'True', 'blank': 'True'}),
            'piazza_email': ('django.db.models.fields.CharField', [], {'max_length': '128', 'blank': 'True'}),
            'piazza_name': ('django.db.models.fields.CharField', [], {'max_length': '128', 'blank': 'True'}),
            'referrer': ('django.db.models.fields.CharField', [], {'max_length': '256', 'null': 'True'}),
            'referrer_first': ('django.db.models.fields.CharField', [], {'max_length': '256', 'null': 'True'}),
            'site_data': ('django.db.models.fields.TextField', [], {'blank': 'True'}),
            'time_created': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'user': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['auth.User']", 'unique': 'True'}),
            'user_agent': ('django.db.models.fields.CharField', [], {'max_length': '256', 'null': 'True'}),
            'user_agent_first': ('django.db.models.fields.CharField', [], {'max_length': '256', 'null': 'True'}),
            'work': ('django.db.models.fields.CharField', [], {'max_length': '128', 'null': 'True'})
        },
        'c2g.video': {
            'Meta': {'object_name': 'Video', 'db_table': "u'c2g_videos'"},
            'course': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['c2g.Course']"}),
            'description': ('django.db.models.fields.TextField', [], {'blank': 'True'}),
            'duration': ('django.db.models.fields.IntegerField', [], {'null': 'True', 'blank': 'True'}),
            'exam': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['c2g.Exam']", 'null': 'True', 'blank': 'True'}),
            'file': ('django.db.models.fields.files.FileField', [], {'max_length': '100'}),
            'handle': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True', 'db_index': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'image': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'to': "orm['c2g.Video']"}),
            'index': ('django.db.models.fields.IntegerField', [], {'null': 'True', 'blank': 'True'}),
            'is_deleted': ('django.db.models.fields.IntegerField', [], {'default': '0'}),
            'last_updated': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'auto_now_add': 'True', 'blank': 'True'}),
            'live_datetime': ('django.db.models.fields.DateTimeField', [], {'null': 'True', 'blank': 'True'}),
            'mode': ('django.db.models.fields.TextField', [], {'blank': 'True'}),
            'section': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['c2g.ContentSection']", 'null': 'True'}),
            'slug': ('django.db.models.fields.SlugField', [], {'max_length': '255', 'null': 'True'}),
            'time_created': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'title': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True', 'blank': 'True'}),
            'type': ('django.db.models.fields.CharField', [], {'default': "'youtube'", 'max_length': '30'}),
            'url': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True', 'blank': 'True'})
        },
        'c2g.videoactivity': {
            'Meta': {'object_name': 'VideoActivity', 'db_table': "u'c2g_video_activity'"},
            'course': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['c2g.Course']"}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'max_end_seconds': ('django.db.models.fields.IntegerField', [], {'default': '0', 'blank': 'True'}),
            'start_seconds': ('django.db.models.fields.IntegerField', [], {'default': '0', 'blank': 'True'}),
            'student': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['auth.User']"}),
            'video': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['c2g.Video']"})
        },
        'c2g.videodownload': {
            'Meta': {'object_name': 'VideoDownload', 'db_table': "u'c2g_video_download'"},
            'course': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['c2g.Course']"}),
            'download_date': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'format': ('django.db.models.fields.CharField', [], {'max_length': '35', 'null': 'True', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'student': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['auth.User']"}),
            'video': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['c2g.Video']"})
        },
        'c2g.videotoexercise': {
            'Meta': {'object_name': 'VideoToExercise', 'db_table': "u'c2g_video_to_exercise'"},
            'exercise': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['c2g.Exercise']"}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'image': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['c2g.VideoToExercise']", 'null': 'True', 'blank': 'True'}),
            'is_deleted': ('django.db.models.fields.IntegerField', [], {'default': '0'}),
            'mode': ('django.db.models.fields.TextField', [], {'blank': 'True'}),
            'video': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['c2g.Video']"}),
            'video_time': ('django.db.models.fields.IntegerField', [], {})
        },
        'c2g.videoviewtraces': {
            'Meta': {'object_name': 'VideoViewTraces', 'db_table': "u'c2g_video_view_traces'"},
            'course': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['c2g.Course']"}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'last_updated': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'auto_now_add': 'True', 'blank': 'True'}),
            'time_created': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'trace': ('django.db.models.fields.TextField', [], {'blank': 'True'}),
            'user': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['auth.User']"}),
            'video': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['c2g.Video']"})
        },
        'contenttypes.contenttype': {
            'Meta': {'ordering': "('name',)", 'unique_together': "(('app_label', 'model'),)", 'object_name': 'ContentType', 'db_table': "'django_content_type'"},
            'app_label': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'model': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '100'})
        }
    }

    complete_apps = ['c2g']
########NEW FILE########
__FILENAME__ = 0006_auto__add_field_course_twitter_tag
# -*- coding: utf-8 -*-
import datetime
from south.db import db
from south.v2 import SchemaMigration
from django.db import models


class Migration(SchemaMigration):

    def forwards(self, orm):
        # Adding field 'Course.twitter_tag'
        db.add_column(u'c2g_courses', 'twitter_tag',
                      self.gf('django.db.models.fields.CharField')(max_length=64, null=True, blank=True),
                      keep_default=False)


    def backwards(self, orm):
        # Deleting field 'Course.twitter_tag'
        db.delete_column(u'c2g_courses', 'twitter_tag')


    models = {
        'auth.group': {
            'Meta': {'object_name': 'Group'},
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '80'}),
            'permissions': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['auth.Permission']", 'symmetrical': 'False', 'blank': 'True'})
        },
        'auth.permission': {
            'Meta': {'ordering': "('content_type__app_label', 'content_type__model', 'codename')", 'unique_together': "(('content_type', 'codename'),)", 'object_name': 'Permission'},
            'codename': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'content_type': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['contenttypes.ContentType']"}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '50'})
        },
        'auth.user': {
            'Meta': {'object_name': 'User'},
            'date_joined': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
            'email': ('django.db.models.fields.EmailField', [], {'max_length': '75', 'blank': 'True'}),
            'first_name': ('django.db.models.fields.CharField', [], {'max_length': '30', 'blank': 'True'}),
            'groups': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['auth.Group']", 'symmetrical': 'False', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'is_active': ('django.db.models.fields.BooleanField', [], {'default': 'True'}),
            'is_staff': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'is_superuser': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'last_login': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
            'last_name': ('django.db.models.fields.CharField', [], {'max_length': '30', 'blank': 'True'}),
            'password': ('django.db.models.fields.CharField', [], {'max_length': '128'}),
            'user_permissions': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['auth.Permission']", 'symmetrical': 'False', 'blank': 'True'}),
            'username': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '30'})
        },
        'c2g.additionalpage': {
            'Meta': {'object_name': 'AdditionalPage', 'db_table': "u'c2g_additional_pages'"},
            'course': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['c2g.Course']"}),
            'description': ('django.db.models.fields.TextField', [], {'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'image': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'to': "orm['c2g.AdditionalPage']"}),
            'index': ('django.db.models.fields.IntegerField', [], {'null': 'True', 'blank': 'True'}),
            'is_deleted': ('django.db.models.fields.IntegerField', [], {'default': '0'}),
            'last_updated': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'auto_now_add': 'True', 'blank': 'True'}),
            'live_datetime': ('django.db.models.fields.DateTimeField', [], {'null': 'True', 'blank': 'True'}),
            'menu_slug': ('django.db.models.fields.SlugField', [], {'max_length': '255', 'null': 'True', 'blank': 'True'}),
            'mode': ('django.db.models.fields.TextField', [], {'blank': 'True'}),
            'section': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['c2g.ContentSection']", 'null': 'True'}),
            'slug': ('django.db.models.fields.SlugField', [], {'max_length': '255', 'null': 'True', 'blank': 'True'}),
            'time_created': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'title': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True', 'blank': 'True'})
        },
        'c2g.announcement': {
            'Meta': {'object_name': 'Announcement', 'db_table': "u'c2g_announcements'"},
            'course': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['c2g.Course']"}),
            'description': ('django.db.models.fields.TextField', [], {'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'image': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'to': "orm['c2g.Announcement']"}),
            'index': ('django.db.models.fields.IntegerField', [], {'null': 'True', 'blank': 'True'}),
            'is_deleted': ('django.db.models.fields.IntegerField', [], {'default': '0'}),
            'last_updated': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'auto_now_add': 'True', 'blank': 'True'}),
            'live_datetime': ('django.db.models.fields.DateTimeField', [], {'null': 'True', 'blank': 'True'}),
            'mode': ('django.db.models.fields.TextField', [], {'blank': 'True'}),
            'owner': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['auth.User']"}),
            'time_created': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'title': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True', 'blank': 'True'})
        },
        'c2g.contentgroup': {
            'Meta': {'object_name': 'ContentGroup', 'db_table': "u'c2g_content_group'"},
            'additional_page': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['c2g.AdditionalPage']", 'null': 'True', 'blank': 'True'}),
            'course': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['c2g.Course']"}),
            'display_style': ('django.db.models.fields.CharField', [], {'default': "'list'", 'max_length': '32', 'blank': 'True'}),
            'exam': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['c2g.Exam']", 'null': 'True', 'blank': 'True'}),
            'file': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['c2g.File']", 'null': 'True', 'blank': 'True'}),
            'group_id': ('django.db.models.fields.IntegerField', [], {'db_index': 'True', 'null': 'True', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'level': ('django.db.models.fields.IntegerField', [], {'db_index': 'True'}),
            'problemSet': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['c2g.ProblemSet']", 'null': 'True', 'blank': 'True'}),
            'video': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['c2g.Video']", 'null': 'True', 'blank': 'True'})
        },
        'c2g.contentsection': {
            'Meta': {'object_name': 'ContentSection', 'db_table': "u'c2g_content_sections'"},
            'course': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['c2g.Course']"}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'image': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'to': "orm['c2g.ContentSection']"}),
            'index': ('django.db.models.fields.IntegerField', [], {'null': 'True', 'blank': 'True'}),
            'is_deleted': ('django.db.models.fields.IntegerField', [], {'default': '0'}),
            'last_updated': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'auto_now_add': 'True', 'blank': 'True'}),
            'live_datetime': ('django.db.models.fields.DateTimeField', [], {'null': 'True', 'blank': 'True'}),
            'mode': ('django.db.models.fields.TextField', [], {'blank': 'True'}),
            'slug': ('django.db.models.fields.SlugField', [], {'max_length': '255', 'null': 'True', 'blank': 'True'}),
            'subtitle': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True', 'blank': 'True'}),
            'time_created': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'title': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True', 'blank': 'True'})
        },
        'c2g.course': {
            'Meta': {'object_name': 'Course', 'db_table': "u'c2g_courses'"},
            'accompanying_materials': ('django.db.models.fields.TextField', [], {'blank': 'True'}),
            'calendar_end': ('django.db.models.fields.DateField', [], {'null': 'True', 'blank': 'True'}),
            'calendar_start': ('django.db.models.fields.DateField', [], {'null': 'True', 'blank': 'True'}),
            'contact': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True', 'blank': 'True'}),
            'description': ('django.db.models.fields.TextField', [], {'blank': 'True'}),
            'faq': ('django.db.models.fields.TextField', [], {'blank': 'True'}),
            'handle': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True', 'db_index': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'image': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'to': "orm['c2g.Course']"}),
            'institution': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['c2g.Institution']", 'null': 'True'}),
            'institution_only': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'instructor_group': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'instructor_group'", 'to': "orm['auth.Group']"}),
            'is_deleted': ('django.db.models.fields.IntegerField', [], {'default': '0'}),
            'last_updated': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'auto_now_add': 'True', 'blank': 'True'}),
            'list_publicly': ('django.db.models.fields.IntegerField', [], {'null': 'True', 'blank': 'True'}),
            'live_datetime': ('django.db.models.fields.DateTimeField', [], {'null': 'True', 'blank': 'True'}),
            'logo': ('django.db.models.fields.files.FileField', [], {'max_length': '100', 'null': 'True'}),
            'mode': ('django.db.models.fields.TextField', [], {'blank': 'True'}),
            'outcomes': ('django.db.models.fields.TextField', [], {'blank': 'True'}),
            'piazza_id': ('django.db.models.fields.IntegerField', [], {'null': 'True', 'blank': 'True'}),
            'prerequisites': ('django.db.models.fields.TextField', [], {'blank': 'True'}),
            'preview_only_mode': ('django.db.models.fields.BooleanField', [], {'default': 'True'}),
            'readonly_tas_group': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'readonly_tas_group'", 'to': "orm['auth.Group']"}),
            'share_to': ('django.db.models.fields.related.ManyToManyField', [], {'blank': 'True', 'related_name': "'share_from'", 'null': 'True', 'symmetrical': 'False', 'to': "orm['c2g.Course']"}),
            'short_description': ('django.db.models.fields.TextField', [], {'blank': 'True'}),
            'student_group': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'student_group'", 'to': "orm['auth.Group']"}),
            'syllabus': ('django.db.models.fields.TextField', [], {'blank': 'True'}),
            'tas_group': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'tas_group'", 'to': "orm['auth.Group']"}),
            'term': ('django.db.models.fields.TextField', [], {'blank': 'True'}),
            'time_created': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'title': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True', 'blank': 'True'}),
            'twitter_tag': ('django.db.models.fields.CharField', [], {'max_length': '64', 'null': 'True', 'blank': 'True'}),
            'year': ('django.db.models.fields.IntegerField', [], {'null': 'True', 'blank': 'True'})
        },
        'c2g.coursecertificate': {
            'Meta': {'object_name': 'CourseCertificate'},
            'assets': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'course': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['c2g.Course']"}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'last_updated': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'auto_now_add': 'True', 'blank': 'True'}),
            'storage': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'time_created': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'type': ('django.db.models.fields.CharField', [], {'default': "'completion'", 'max_length': '64'})
        },
        'c2g.courseemail': {
            'Meta': {'object_name': 'CourseEmail', 'db_table': "u'c2g_course_emails'"},
            'course': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['c2g.Course']"}),
            'hash': ('django.db.models.fields.CharField', [], {'max_length': '128', 'db_index': 'True'}),
            'html_message': ('django.db.models.fields.TextField', [], {'null': 'True', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'last_updated': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'auto_now_add': 'True', 'blank': 'True'}),
            'sender': ('django.db.models.fields.related.ForeignKey', [], {'default': '1', 'to': "orm['auth.User']", 'null': 'True', 'blank': 'True'}),
            'subject': ('django.db.models.fields.CharField', [], {'max_length': '128', 'blank': 'True'}),
            'time_created': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'to': ('django.db.models.fields.CharField', [], {'default': "'myself'", 'max_length': '64'})
        },
        'c2g.courseinstructor': {
            'Meta': {'object_name': 'CourseInstructor', 'db_table': "u'c2g_course_instructor'"},
            'course': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['c2g.Course']"}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'instructor': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['c2g.Instructor']"}),
            'last_updated': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'auto_now_add': 'True', 'blank': 'True'}),
            'time_created': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'})
        },
        'c2g.coursestudentlist': {
            'Meta': {'object_name': 'CourseStudentList'},
            'course': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['c2g.Course']"}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'last_updated': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'auto_now_add': 'True', 'blank': 'True'}),
            'max_completion_level': ('django.db.models.fields.IntegerField', [], {'default': '0'}),
            'members': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['auth.User']", 'symmetrical': 'False'}),
            'time_created': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'})
        },
        'c2g.currenttermmap': {
            'Meta': {'object_name': 'CurrentTermMap'},
            'course_prefix': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '64', 'db_index': 'True'}),
            'course_suffix': ('django.db.models.fields.CharField', [], {'max_length': '64'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'last_updated': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'auto_now_add': 'True', 'blank': 'True'}),
            'time_created': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'})
        },
        'c2g.emailaddr': {
            'Meta': {'object_name': 'EmailAddr'},
            'addr': ('django.db.models.fields.EmailField', [], {'max_length': '128'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '128', 'null': 'True', 'blank': 'True'}),
            'optout': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'optout_code': ('django.db.models.fields.CharField', [], {'default': "'optout'", 'max_length': '64'})
        },
        'c2g.exam': {
            'Meta': {'object_name': 'Exam'},
            'assessment_type': ('django.db.models.fields.CharField', [], {'max_length': '64', 'null': 'True', 'blank': 'True'}),
            'autograde': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'course': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['c2g.Course']"}),
            'description': ('django.db.models.fields.TextField', [], {'null': 'True', 'blank': 'True'}),
            'display_single': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'due_date': ('django.db.models.fields.DateTimeField', [], {'null': 'True', 'blank': 'True'}),
            'exam_type': ('django.db.models.fields.CharField', [], {'default': "'exam'", 'max_length': '32'}),
            'grace_period': ('django.db.models.fields.DateTimeField', [], {'null': 'True', 'blank': 'True'}),
            'grade_single': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'html_content': ('django.db.models.fields.TextField', [], {'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'image': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'to': "orm['c2g.Exam']"}),
            'index': ('django.db.models.fields.IntegerField', [], {'null': 'True', 'blank': 'True'}),
            'invideo': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'is_deleted': ('django.db.models.fields.IntegerField', [], {'default': '0'}),
            'last_updated': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'auto_now_add': 'True', 'blank': 'True'}),
            'late_penalty': ('django.db.models.fields.IntegerField', [], {'default': '0', 'null': 'True', 'blank': 'True'}),
            'live_datetime': ('django.db.models.fields.DateTimeField', [], {'null': 'True', 'blank': 'True'}),
            'minutes_btw_attempts': ('django.db.models.fields.IntegerField', [], {'default': '0'}),
            'minutesallowed': ('django.db.models.fields.IntegerField', [], {'null': 'True', 'blank': 'True'}),
            'mode': ('django.db.models.fields.TextField', [], {'blank': 'True'}),
            'partial_credit_deadline': ('django.db.models.fields.DateTimeField', [], {'null': 'True', 'blank': 'True'}),
            'quizdown': ('django.db.models.fields.TextField', [], {'null': 'True', 'blank': 'True'}),
            'resubmission_penalty': ('django.db.models.fields.IntegerField', [], {'default': '0', 'null': 'True', 'blank': 'True'}),
            'section': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['c2g.ContentSection']", 'null': 'True'}),
            'slug': ('django.db.models.fields.SlugField', [], {'max_length': '255', 'null': 'True'}),
            'submissions_permitted': ('django.db.models.fields.IntegerField', [], {'default': '999', 'null': 'True', 'blank': 'True'}),
            'time_created': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'timed': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'title': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True', 'blank': 'True'}),
            'total_score': ('django.db.models.fields.FloatField', [], {'null': 'True', 'blank': 'True'}),
            'xml_imported': ('django.db.models.fields.TextField', [], {'null': 'True', 'blank': 'True'}),
            'xml_metadata': ('django.db.models.fields.TextField', [], {'null': 'True', 'blank': 'True'})
        },
        'c2g.examrecord': {
            'Meta': {'object_name': 'ExamRecord'},
            'attempt_number': ('django.db.models.fields.IntegerField', [], {'default': '0'}),
            'complete': ('django.db.models.fields.BooleanField', [], {'default': 'True'}),
            'course': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['c2g.Course']"}),
            'exam': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['c2g.Exam']"}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'json_data': ('django.db.models.fields.TextField', [], {'null': 'True', 'blank': 'True'}),
            'json_score_data': ('django.db.models.fields.TextField', [], {'null': 'True', 'blank': 'True'}),
            'last_updated': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'auto_now_add': 'True', 'blank': 'True'}),
            'late': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'onpage': ('django.db.models.fields.CharField', [], {'max_length': '512', 'null': 'True', 'blank': 'True'}),
            'score': ('django.db.models.fields.FloatField', [], {'null': 'True', 'blank': 'True'}),
            'student': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['auth.User']"}),
            'time_created': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'})
        },
        'c2g.examrecordfieldlog': {
            'Meta': {'object_name': 'ExamRecordFieldLog'},
            'course': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['c2g.Course']"}),
            'exam': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['c2g.Exam']"}),
            'field_name': ('django.db.models.fields.CharField', [], {'max_length': '128', 'db_index': 'True'}),
            'human_name': ('django.db.models.fields.CharField', [], {'db_index': 'True', 'max_length': '128', 'null': 'True', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'last_updated': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'auto_now_add': 'True', 'blank': 'True'}),
            'max_score': ('django.db.models.fields.FloatField', [], {'default': '0', 'blank': 'True'}),
            'raw_score': ('django.db.models.fields.FloatField', [], {'default': '0', 'blank': 'True'}),
            'student': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['auth.User']"}),
            'time_created': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'value': ('django.db.models.fields.TextField', [], {'null': 'True', 'blank': 'True'})
        },
        'c2g.examrecordscore': {
            'Meta': {'object_name': 'ExamRecordScore'},
            'csv_imported': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'last_updated': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'auto_now_add': 'True', 'blank': 'True'}),
            'raw_score': ('django.db.models.fields.FloatField', [], {'null': 'True', 'blank': 'True'}),
            'record': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['c2g.ExamRecord']", 'unique': 'True'}),
            'time_created': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'})
        },
        'c2g.examrecordscorefield': {
            'Meta': {'object_name': 'ExamRecordScoreField'},
            'associated_text': ('django.db.models.fields.TextField', [], {'null': 'True', 'blank': 'True'}),
            'comments': ('django.db.models.fields.TextField', [], {'null': 'True', 'blank': 'True'}),
            'correct': ('django.db.models.fields.NullBooleanField', [], {'null': 'True', 'blank': 'True'}),
            'field_name': ('django.db.models.fields.CharField', [], {'max_length': '128', 'db_index': 'True'}),
            'human_name': ('django.db.models.fields.CharField', [], {'db_index': 'True', 'max_length': '128', 'null': 'True', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'last_updated': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'auto_now_add': 'True', 'blank': 'True'}),
            'parent': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['c2g.ExamRecordScore']"}),
            'subscore': ('django.db.models.fields.FloatField', [], {'default': '0'}),
            'time_created': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'value': ('django.db.models.fields.TextField', [], {'null': 'True', 'blank': 'True'})
        },
        'c2g.examrecordscorefieldchoice': {
            'Meta': {'object_name': 'ExamRecordScoreFieldChoice'},
            'associated_text': ('django.db.models.fields.TextField', [], {'null': 'True', 'blank': 'True'}),
            'choice_value': ('django.db.models.fields.CharField', [], {'max_length': '128', 'db_index': 'True'}),
            'correct': ('django.db.models.fields.NullBooleanField', [], {'null': 'True', 'blank': 'True'}),
            'human_name': ('django.db.models.fields.CharField', [], {'db_index': 'True', 'max_length': '128', 'null': 'True', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'last_updated': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'auto_now_add': 'True', 'blank': 'True'}),
            'parent': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['c2g.ExamRecordScoreField']"}),
            'time_created': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'})
        },
        'c2g.examscore': {
            'Meta': {'unique_together': "(('exam', 'student'),)", 'object_name': 'ExamScore'},
            'course': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['c2g.Course']"}),
            'csv_imported': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'exam': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['c2g.Exam']"}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'last_updated': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'auto_now_add': 'True', 'blank': 'True'}),
            'score': ('django.db.models.fields.FloatField', [], {'null': 'True', 'blank': 'True'}),
            'student': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['auth.User']"}),
            'time_created': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'})
        },
        'c2g.examscorefield': {
            'Meta': {'object_name': 'ExamScoreField'},
            'associated_text': ('django.db.models.fields.TextField', [], {'null': 'True', 'blank': 'True'}),
            'comments': ('django.db.models.fields.TextField', [], {'null': 'True', 'blank': 'True'}),
            'correct': ('django.db.models.fields.NullBooleanField', [], {'null': 'True', 'blank': 'True'}),
            'field_name': ('django.db.models.fields.CharField', [], {'max_length': '128', 'db_index': 'True'}),
            'human_name': ('django.db.models.fields.CharField', [], {'db_index': 'True', 'max_length': '128', 'null': 'True', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'last_updated': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'auto_now_add': 'True', 'blank': 'True'}),
            'parent': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['c2g.ExamScore']"}),
            'subscore': ('django.db.models.fields.FloatField', [], {'default': '0'}),
            'time_created': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'value': ('django.db.models.fields.CharField', [], {'max_length': '128', 'null': 'True', 'blank': 'True'})
        },
        'c2g.exercise': {
            'Meta': {'object_name': 'Exercise', 'db_table': "u'c2g_exercises'"},
            'file': ('django.db.models.fields.files.FileField', [], {'max_length': '100', 'null': 'True'}),
            'fileName': ('django.db.models.fields.CharField', [], {'max_length': '255'}),
            'handle': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True', 'db_index': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'is_deleted': ('django.db.models.fields.IntegerField', [], {'default': '0'}),
            'last_updated': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'auto_now_add': 'True', 'blank': 'True'}),
            'problemSet': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['c2g.ProblemSet']", 'through': "orm['c2g.ProblemSetToExercise']", 'symmetrical': 'False'}),
            'time_created': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'video': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['c2g.Video']", 'through': "orm['c2g.VideoToExercise']", 'symmetrical': 'False'})
        },
        'c2g.file': {
            'Meta': {'object_name': 'File', 'db_table': "u'c2g_files'"},
            'course': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['c2g.Course']"}),
            'file': ('django.db.models.fields.files.FileField', [], {'max_length': '100'}),
            'handle': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True', 'db_index': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'image': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'to': "orm['c2g.File']"}),
            'index': ('django.db.models.fields.IntegerField', [], {'null': 'True', 'blank': 'True'}),
            'is_deleted': ('django.db.models.fields.IntegerField', [], {'default': '0'}),
            'last_updated': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'auto_now_add': 'True', 'blank': 'True'}),
            'live_datetime': ('django.db.models.fields.DateTimeField', [], {'null': 'True', 'blank': 'True'}),
            'mode': ('django.db.models.fields.TextField', [], {'blank': 'True'}),
            'section': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['c2g.ContentSection']", 'null': 'True'}),
            'time_created': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'title': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True', 'blank': 'True'})
        },
        'c2g.institution': {
            'Meta': {'object_name': 'Institution', 'db_table': "u'c2g_institutions'"},
            'city': ('django.db.models.fields.TextField', [], {'blank': 'True'}),
            'country': ('django.db.models.fields.TextField', [], {'blank': 'True'}),
            'domains': ('django.db.models.fields.TextField', [], {'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'last_updated': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'auto_now_add': 'True', 'blank': 'True'}),
            'time_created': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'title': ('django.db.models.fields.TextField', [], {})
        },
        'c2g.instructor': {
            'Meta': {'object_name': 'Instructor'},
            'biography': ('django.db.models.fields.TextField', [], {'blank': 'True'}),
            'email': ('django.db.models.fields.TextField', [], {'blank': 'True'}),
            'handle': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True', 'db_index': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'last_updated': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'auto_now_add': 'True', 'blank': 'True'}),
            'name': ('django.db.models.fields.TextField', [], {'blank': 'True'}),
            'photo': ('django.db.models.fields.files.FileField', [], {'max_length': '100', 'blank': 'True'}),
            'time_created': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'})
        },
        'c2g.listemail': {
            'Meta': {'object_name': 'ListEmail'},
            'from_addr': ('django.db.models.fields.CharField', [], {'max_length': '128', 'blank': 'True'}),
            'from_name': ('django.db.models.fields.CharField', [], {'max_length': '128', 'blank': 'True'}),
            'hash': ('django.db.models.fields.CharField', [], {'max_length': '128', 'db_index': 'True'}),
            'html_message': ('django.db.models.fields.TextField', [], {'null': 'True', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'last_updated': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'auto_now_add': 'True', 'blank': 'True'}),
            'sender': ('django.db.models.fields.related.ForeignKey', [], {'default': '1', 'to': "orm['auth.User']", 'null': 'True', 'blank': 'True'}),
            'subject': ('django.db.models.fields.CharField', [], {'max_length': '128', 'blank': 'True'}),
            'time_created': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'to_list': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['c2g.MailingList']"})
        },
        'c2g.mailinglist': {
            'Meta': {'object_name': 'MailingList'},
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'members': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['c2g.EmailAddr']", 'symmetrical': 'False'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '128', 'blank': 'True'})
        },
        'c2g.newsevent': {
            'Meta': {'object_name': 'NewsEvent', 'db_table': "u'c2g_news_events'"},
            'course': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['c2g.Course']"}),
            'event': ('django.db.models.fields.CharField', [], {'max_length': '255'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'time_created': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'})
        },
        'c2g.pagevisitlog': {
            'Meta': {'object_name': 'PageVisitLog', 'db_table': "u'c2g_page_visit_log'"},
            'course': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['c2g.Course']"}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'last_updated': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'auto_now_add': 'True', 'blank': 'True'}),
            'object_id': ('django.db.models.fields.CharField', [], {'max_length': '128', 'blank': 'True'}),
            'page_type': ('django.db.models.fields.CharField', [], {'max_length': '128', 'db_index': 'True'}),
            'time_created': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'user': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['auth.User']"})
        },
        'c2g.problemactivity': {
            'Meta': {'object_name': 'ProblemActivity', 'db_table': "u'c2g_problem_activity'"},
            'attempt_content': ('django.db.models.fields.TextField', [], {'null': 'True', 'blank': 'True'}),
            'attempt_number': ('django.db.models.fields.IntegerField', [], {'null': 'True', 'blank': 'True'}),
            'card': ('django.db.models.fields.TextField', [], {'blank': 'True'}),
            'cards_done': ('django.db.models.fields.IntegerField', [], {'null': 'True', 'blank': 'True'}),
            'cards_left': ('django.db.models.fields.IntegerField', [], {'null': 'True', 'blank': 'True'}),
            'casing': ('django.db.models.fields.TextField', [], {'blank': 'True'}),
            'complete': ('django.db.models.fields.IntegerField', [], {'null': 'True', 'blank': 'True'}),
            'count_hints': ('django.db.models.fields.IntegerField', [], {'null': 'True', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'last_updated': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'auto_now_add': 'True', 'blank': 'True'}),
            'problem_identifier': ('django.db.models.fields.CharField', [], {'max_length': '255', 'blank': 'True'}),
            'problem_type': ('django.db.models.fields.TextField', [], {'blank': 'True'}),
            'problemset_to_exercise': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['c2g.ProblemSetToExercise']", 'null': 'True'}),
            'review_mode': ('django.db.models.fields.IntegerField', [], {'null': 'True', 'blank': 'True'}),
            'seed': ('django.db.models.fields.TextField', [], {'blank': 'True'}),
            'sha1': ('django.db.models.fields.TextField', [], {'blank': 'True'}),
            'student': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['auth.User']"}),
            'time_created': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'time_taken': ('django.db.models.fields.IntegerField', [], {'null': 'True', 'blank': 'True'}),
            'topic_mode': ('django.db.models.fields.IntegerField', [], {'null': 'True', 'blank': 'True'}),
            'user_choices': ('django.db.models.fields.CharField', [], {'max_length': '1024', 'null': 'True', 'blank': 'True'}),
            'user_selection_val': ('django.db.models.fields.CharField', [], {'max_length': '1024', 'null': 'True', 'blank': 'True'}),
            'video_to_exercise': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['c2g.VideoToExercise']", 'null': 'True'})
        },
        'c2g.problemset': {
            'Meta': {'object_name': 'ProblemSet', 'db_table': "u'c2g_problem_sets'"},
            'assessment_type': ('django.db.models.fields.CharField', [], {'max_length': '255'}),
            'course': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['c2g.Course']"}),
            'description': ('django.db.models.fields.TextField', [], {'blank': 'True'}),
            'due_date': ('django.db.models.fields.DateTimeField', [], {'null': 'True'}),
            'grace_period': ('django.db.models.fields.DateTimeField', [], {}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'image': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'to': "orm['c2g.ProblemSet']"}),
            'index': ('django.db.models.fields.IntegerField', [], {'null': 'True', 'blank': 'True'}),
            'is_deleted': ('django.db.models.fields.IntegerField', [], {'default': '0'}),
            'last_updated': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'auto_now_add': 'True', 'blank': 'True'}),
            'late_penalty': ('django.db.models.fields.IntegerField', [], {}),
            'live_datetime': ('django.db.models.fields.DateTimeField', [], {'null': 'True', 'blank': 'True'}),
            'mode': ('django.db.models.fields.TextField', [], {'blank': 'True'}),
            'partial_credit_deadline': ('django.db.models.fields.DateTimeField', [], {}),
            'path': ('django.db.models.fields.CharField', [], {'max_length': '255'}),
            'randomize': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'resubmission_penalty': ('django.db.models.fields.IntegerField', [], {}),
            'section': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['c2g.ContentSection']"}),
            'slug': ('django.db.models.fields.SlugField', [], {'max_length': '50'}),
            'submissions_permitted': ('django.db.models.fields.IntegerField', [], {}),
            'time_created': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'title': ('django.db.models.fields.CharField', [], {'max_length': '255'})
        },
        'c2g.problemsettoexercise': {
            'Meta': {'object_name': 'ProblemSetToExercise', 'db_table': "u'c2g_problemset_to_exercise'"},
            'exercise': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['c2g.Exercise']"}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'image': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['c2g.ProblemSetToExercise']", 'null': 'True', 'blank': 'True'}),
            'is_deleted': ('django.db.models.fields.IntegerField', [], {'default': '0'}),
            'mode': ('django.db.models.fields.TextField', [], {'blank': 'True'}),
            'number': ('django.db.models.fields.IntegerField', [], {'null': 'True', 'blank': 'True'}),
            'problemSet': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['c2g.ProblemSet']"})
        },
        'c2g.studentexamstart': {
            'Meta': {'object_name': 'StudentExamStart'},
            'exam': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['c2g.Exam']"}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'last_updated': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'auto_now_add': 'True', 'blank': 'True'}),
            'student': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['auth.User']"}),
            'time_created': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'})
        },
        'c2g.studentsection': {
            'Meta': {'object_name': 'StudentSection', 'db_table': "u'c2g_sections'"},
            'capacity': ('django.db.models.fields.IntegerField', [], {'default': '999'}),
            'course': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['c2g.Course']"}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'is_deleted': ('django.db.models.fields.IntegerField', [], {'default': '0'}),
            'last_updated': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'auto_now_add': 'True', 'blank': 'True'}),
            'members': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['auth.User']", 'symmetrical': 'False'}),
            'time_created': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'title': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True', 'blank': 'True'})
        },
        'c2g.userprofile': {
            'Meta': {'object_name': 'UserProfile', 'db_table': "u'c2g_user_profiles'"},
            'accept_language': ('django.db.models.fields.CharField', [], {'max_length': '64', 'null': 'True'}),
            'accept_language_first': ('django.db.models.fields.CharField', [], {'max_length': '64', 'null': 'True'}),
            'birth_year': ('django.db.models.fields.CharField', [], {'max_length': '64', 'null': 'True'}),
            'certificates': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['c2g.CourseCertificate']", 'symmetrical': 'False'}),
            'client_ip': ('django.db.models.fields.CharField', [], {'max_length': '30', 'null': 'True'}),
            'client_ip_first': ('django.db.models.fields.CharField', [], {'max_length': '30', 'null': 'True'}),
            'education': ('django.db.models.fields.CharField', [], {'max_length': '64', 'null': 'True'}),
            'email_me': ('django.db.models.fields.BooleanField', [], {'default': 'True'}),
            'gender': ('django.db.models.fields.CharField', [], {'max_length': '64', 'null': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'institutions': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['c2g.Institution']", 'symmetrical': 'False'}),
            'last_updated': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'auto_now_add': 'True', 'blank': 'True'}),
            'piazza_email': ('django.db.models.fields.CharField', [], {'max_length': '128', 'blank': 'True'}),
            'piazza_name': ('django.db.models.fields.CharField', [], {'max_length': '128', 'blank': 'True'}),
            'referrer': ('django.db.models.fields.CharField', [], {'max_length': '256', 'null': 'True'}),
            'referrer_first': ('django.db.models.fields.CharField', [], {'max_length': '256', 'null': 'True'}),
            'site_data': ('django.db.models.fields.TextField', [], {'blank': 'True'}),
            'time_created': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'user': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['auth.User']", 'unique': 'True'}),
            'user_agent': ('django.db.models.fields.CharField', [], {'max_length': '256', 'null': 'True'}),
            'user_agent_first': ('django.db.models.fields.CharField', [], {'max_length': '256', 'null': 'True'}),
            'work': ('django.db.models.fields.CharField', [], {'max_length': '128', 'null': 'True'})
        },
        'c2g.video': {
            'Meta': {'object_name': 'Video', 'db_table': "u'c2g_videos'"},
            'course': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['c2g.Course']"}),
            'description': ('django.db.models.fields.TextField', [], {'blank': 'True'}),
            'duration': ('django.db.models.fields.IntegerField', [], {'null': 'True', 'blank': 'True'}),
            'exam': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['c2g.Exam']", 'null': 'True', 'blank': 'True'}),
            'file': ('django.db.models.fields.files.FileField', [], {'max_length': '100'}),
            'handle': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True', 'db_index': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'image': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'to': "orm['c2g.Video']"}),
            'index': ('django.db.models.fields.IntegerField', [], {'null': 'True', 'blank': 'True'}),
            'is_deleted': ('django.db.models.fields.IntegerField', [], {'default': '0'}),
            'last_updated': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'auto_now_add': 'True', 'blank': 'True'}),
            'live_datetime': ('django.db.models.fields.DateTimeField', [], {'null': 'True', 'blank': 'True'}),
            'mode': ('django.db.models.fields.TextField', [], {'blank': 'True'}),
            'section': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['c2g.ContentSection']", 'null': 'True'}),
            'slug': ('django.db.models.fields.SlugField', [], {'max_length': '255', 'null': 'True'}),
            'time_created': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'title': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True', 'blank': 'True'}),
            'type': ('django.db.models.fields.CharField', [], {'default': "'youtube'", 'max_length': '30'}),
            'url': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True', 'blank': 'True'})
        },
        'c2g.videoactivity': {
            'Meta': {'object_name': 'VideoActivity', 'db_table': "u'c2g_video_activity'"},
            'course': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['c2g.Course']"}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'max_end_seconds': ('django.db.models.fields.IntegerField', [], {'default': '0', 'blank': 'True'}),
            'start_seconds': ('django.db.models.fields.IntegerField', [], {'default': '0', 'blank': 'True'}),
            'student': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['auth.User']"}),
            'video': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['c2g.Video']"})
        },
        'c2g.videodownload': {
            'Meta': {'object_name': 'VideoDownload', 'db_table': "u'c2g_video_download'"},
            'course': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['c2g.Course']"}),
            'download_date': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'format': ('django.db.models.fields.CharField', [], {'max_length': '35', 'null': 'True', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'student': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['auth.User']"}),
            'video': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['c2g.Video']"})
        },
        'c2g.videotoexercise': {
            'Meta': {'object_name': 'VideoToExercise', 'db_table': "u'c2g_video_to_exercise'"},
            'exercise': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['c2g.Exercise']"}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'image': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['c2g.VideoToExercise']", 'null': 'True', 'blank': 'True'}),
            'is_deleted': ('django.db.models.fields.IntegerField', [], {'default': '0'}),
            'mode': ('django.db.models.fields.TextField', [], {'blank': 'True'}),
            'video': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['c2g.Video']"}),
            'video_time': ('django.db.models.fields.IntegerField', [], {})
        },
        'c2g.videoviewtraces': {
            'Meta': {'object_name': 'VideoViewTraces', 'db_table': "u'c2g_video_view_traces'"},
            'course': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['c2g.Course']"}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'last_updated': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'auto_now_add': 'True', 'blank': 'True'}),
            'time_created': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'trace': ('django.db.models.fields.TextField', [], {'blank': 'True'}),
            'user': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['auth.User']"}),
            'video': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['c2g.Video']"})
        },
        'contenttypes.contenttype': {
            'Meta': {'ordering': "('name',)", 'unique_together': "(('app_label', 'model'),)", 'object_name': 'ContentType', 'db_table': "'django_content_type'"},
            'app_label': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'model': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '100'})
        }
    }

    complete_apps = ['c2g']
########NEW FILE########
__FILENAME__ = 0007_auto__add_studentinvitation__add_field_course_preenroll_only
# -*- coding: utf-8 -*-
import datetime
from south.db import db
from south.v2 import SchemaMigration
from django.db import models


class Migration(SchemaMigration):

    def forwards(self, orm):
        # Adding model 'StudentInvitation'
        db.create_table('c2g_studentinvitation', (
            ('id', self.gf('django.db.models.fields.AutoField')(primary_key=True)),
            ('time_created', self.gf('django.db.models.fields.DateTimeField')(auto_now_add=True, blank=True)),
            ('last_updated', self.gf('django.db.models.fields.DateTimeField')(auto_now=True, auto_now_add=True, blank=True)),
            ('email', self.gf('django.db.models.fields.CharField')(max_length=128, db_index=True)),
            ('course', self.gf('django.db.models.fields.related.ForeignKey')(to=orm['c2g.Course'])),
        ))
        db.send_create_signal('c2g', ['StudentInvitation'])

        # Adding field 'Course.preenroll_only'
        db.add_column(u'c2g_courses', 'preenroll_only',
                      self.gf('django.db.models.fields.BooleanField')(default=False),
                      keep_default=False)


    def backwards(self, orm):
        # Deleting model 'StudentInvitation'
        db.delete_table('c2g_studentinvitation')

        # Deleting field 'Course.preenroll_only'
        db.delete_column(u'c2g_courses', 'preenroll_only')


    models = {
        'auth.group': {
            'Meta': {'object_name': 'Group'},
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '80'}),
            'permissions': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['auth.Permission']", 'symmetrical': 'False', 'blank': 'True'})
        },
        'auth.permission': {
            'Meta': {'ordering': "('content_type__app_label', 'content_type__model', 'codename')", 'unique_together': "(('content_type', 'codename'),)", 'object_name': 'Permission'},
            'codename': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'content_type': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['contenttypes.ContentType']"}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '50'})
        },
        'auth.user': {
            'Meta': {'object_name': 'User'},
            'date_joined': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
            'email': ('django.db.models.fields.EmailField', [], {'max_length': '75', 'blank': 'True'}),
            'first_name': ('django.db.models.fields.CharField', [], {'max_length': '30', 'blank': 'True'}),
            'groups': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['auth.Group']", 'symmetrical': 'False', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'is_active': ('django.db.models.fields.BooleanField', [], {'default': 'True'}),
            'is_staff': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'is_superuser': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'last_login': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
            'last_name': ('django.db.models.fields.CharField', [], {'max_length': '30', 'blank': 'True'}),
            'password': ('django.db.models.fields.CharField', [], {'max_length': '128'}),
            'user_permissions': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['auth.Permission']", 'symmetrical': 'False', 'blank': 'True'}),
            'username': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '30'})
        },
        'c2g.additionalpage': {
            'Meta': {'object_name': 'AdditionalPage', 'db_table': "u'c2g_additional_pages'"},
            'course': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['c2g.Course']"}),
            'description': ('django.db.models.fields.TextField', [], {'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'image': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'to': "orm['c2g.AdditionalPage']"}),
            'index': ('django.db.models.fields.IntegerField', [], {'null': 'True', 'blank': 'True'}),
            'is_deleted': ('django.db.models.fields.IntegerField', [], {'default': '0'}),
            'last_updated': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'auto_now_add': 'True', 'blank': 'True'}),
            'live_datetime': ('django.db.models.fields.DateTimeField', [], {'null': 'True', 'blank': 'True'}),
            'menu_slug': ('django.db.models.fields.SlugField', [], {'max_length': '255', 'null': 'True', 'blank': 'True'}),
            'mode': ('django.db.models.fields.TextField', [], {'blank': 'True'}),
            'section': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['c2g.ContentSection']", 'null': 'True'}),
            'slug': ('django.db.models.fields.SlugField', [], {'max_length': '255', 'null': 'True', 'blank': 'True'}),
            'time_created': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'title': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True', 'blank': 'True'})
        },
        'c2g.announcement': {
            'Meta': {'object_name': 'Announcement', 'db_table': "u'c2g_announcements'"},
            'course': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['c2g.Course']"}),
            'description': ('django.db.models.fields.TextField', [], {'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'image': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'to': "orm['c2g.Announcement']"}),
            'index': ('django.db.models.fields.IntegerField', [], {'null': 'True', 'blank': 'True'}),
            'is_deleted': ('django.db.models.fields.IntegerField', [], {'default': '0'}),
            'last_updated': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'auto_now_add': 'True', 'blank': 'True'}),
            'live_datetime': ('django.db.models.fields.DateTimeField', [], {'null': 'True', 'blank': 'True'}),
            'mode': ('django.db.models.fields.TextField', [], {'blank': 'True'}),
            'owner': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['auth.User']"}),
            'time_created': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'title': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True', 'blank': 'True'})
        },
        'c2g.contentgroup': {
            'Meta': {'object_name': 'ContentGroup', 'db_table': "u'c2g_content_group'"},
            'additional_page': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['c2g.AdditionalPage']", 'null': 'True', 'blank': 'True'}),
            'course': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['c2g.Course']"}),
            'display_style': ('django.db.models.fields.CharField', [], {'default': "'list'", 'max_length': '32', 'blank': 'True'}),
            'exam': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['c2g.Exam']", 'null': 'True', 'blank': 'True'}),
            'file': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['c2g.File']", 'null': 'True', 'blank': 'True'}),
            'group_id': ('django.db.models.fields.IntegerField', [], {'db_index': 'True', 'null': 'True', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'level': ('django.db.models.fields.IntegerField', [], {'db_index': 'True'}),
            'problemSet': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['c2g.ProblemSet']", 'null': 'True', 'blank': 'True'}),
            'video': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['c2g.Video']", 'null': 'True', 'blank': 'True'})
        },
        'c2g.contentsection': {
            'Meta': {'object_name': 'ContentSection', 'db_table': "u'c2g_content_sections'"},
            'course': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['c2g.Course']"}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'image': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'to': "orm['c2g.ContentSection']"}),
            'index': ('django.db.models.fields.IntegerField', [], {'null': 'True', 'blank': 'True'}),
            'is_deleted': ('django.db.models.fields.IntegerField', [], {'default': '0'}),
            'last_updated': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'auto_now_add': 'True', 'blank': 'True'}),
            'live_datetime': ('django.db.models.fields.DateTimeField', [], {'null': 'True', 'blank': 'True'}),
            'mode': ('django.db.models.fields.TextField', [], {'blank': 'True'}),
            'slug': ('django.db.models.fields.SlugField', [], {'max_length': '255', 'null': 'True', 'blank': 'True'}),
            'subtitle': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True', 'blank': 'True'}),
            'time_created': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'title': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True', 'blank': 'True'})
        },
        'c2g.course': {
            'Meta': {'object_name': 'Course', 'db_table': "u'c2g_courses'"},
            'accompanying_materials': ('django.db.models.fields.TextField', [], {'blank': 'True'}),
            'calendar_end': ('django.db.models.fields.DateField', [], {'null': 'True', 'blank': 'True'}),
            'calendar_start': ('django.db.models.fields.DateField', [], {'null': 'True', 'blank': 'True'}),
            'contact': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True', 'blank': 'True'}),
            'description': ('django.db.models.fields.TextField', [], {'blank': 'True'}),
            'faq': ('django.db.models.fields.TextField', [], {'blank': 'True'}),
            'handle': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True', 'db_index': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'image': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'to': "orm['c2g.Course']"}),
            'institution': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['c2g.Institution']", 'null': 'True'}),
            'institution_only': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'instructor_group': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'instructor_group'", 'to': "orm['auth.Group']"}),
            'is_deleted': ('django.db.models.fields.IntegerField', [], {'default': '0'}),
            'last_updated': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'auto_now_add': 'True', 'blank': 'True'}),
            'list_publicly': ('django.db.models.fields.IntegerField', [], {'null': 'True', 'blank': 'True'}),
            'live_datetime': ('django.db.models.fields.DateTimeField', [], {'null': 'True', 'blank': 'True'}),
            'logo': ('django.db.models.fields.files.FileField', [], {'max_length': '100', 'null': 'True'}),
            'mode': ('django.db.models.fields.TextField', [], {'blank': 'True'}),
            'outcomes': ('django.db.models.fields.TextField', [], {'blank': 'True'}),
            'piazza_id': ('django.db.models.fields.IntegerField', [], {'null': 'True', 'blank': 'True'}),
            'preenroll_only': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'prerequisites': ('django.db.models.fields.TextField', [], {'blank': 'True'}),
            'preview_only_mode': ('django.db.models.fields.BooleanField', [], {'default': 'True'}),
            'readonly_tas_group': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'readonly_tas_group'", 'to': "orm['auth.Group']"}),
            'share_to': ('django.db.models.fields.related.ManyToManyField', [], {'blank': 'True', 'related_name': "'share_from'", 'null': 'True', 'symmetrical': 'False', 'to': "orm['c2g.Course']"}),
            'short_description': ('django.db.models.fields.TextField', [], {'blank': 'True'}),
            'student_group': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'student_group'", 'to': "orm['auth.Group']"}),
            'syllabus': ('django.db.models.fields.TextField', [], {'blank': 'True'}),
            'tas_group': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'tas_group'", 'to': "orm['auth.Group']"}),
            'term': ('django.db.models.fields.TextField', [], {'blank': 'True'}),
            'time_created': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'title': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True', 'blank': 'True'}),
            'twitter_tag': ('django.db.models.fields.CharField', [], {'max_length': '64', 'null': 'True', 'blank': 'True'}),
            'year': ('django.db.models.fields.IntegerField', [], {'null': 'True', 'blank': 'True'})
        },
        'c2g.coursecertificate': {
            'Meta': {'object_name': 'CourseCertificate'},
            'assets': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'course': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['c2g.Course']"}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'last_updated': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'auto_now_add': 'True', 'blank': 'True'}),
            'storage': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'time_created': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'type': ('django.db.models.fields.CharField', [], {'default': "'completion'", 'max_length': '64'})
        },
        'c2g.courseemail': {
            'Meta': {'object_name': 'CourseEmail', 'db_table': "u'c2g_course_emails'"},
            'course': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['c2g.Course']"}),
            'hash': ('django.db.models.fields.CharField', [], {'max_length': '128', 'db_index': 'True'}),
            'html_message': ('django.db.models.fields.TextField', [], {'null': 'True', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'last_updated': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'auto_now_add': 'True', 'blank': 'True'}),
            'sender': ('django.db.models.fields.related.ForeignKey', [], {'default': '1', 'to': "orm['auth.User']", 'null': 'True', 'blank': 'True'}),
            'subject': ('django.db.models.fields.CharField', [], {'max_length': '128', 'blank': 'True'}),
            'time_created': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'to': ('django.db.models.fields.CharField', [], {'default': "'myself'", 'max_length': '64'})
        },
        'c2g.courseinstructor': {
            'Meta': {'object_name': 'CourseInstructor', 'db_table': "u'c2g_course_instructor'"},
            'course': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['c2g.Course']"}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'instructor': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['c2g.Instructor']"}),
            'last_updated': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'auto_now_add': 'True', 'blank': 'True'}),
            'time_created': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'})
        },
        'c2g.coursestudentlist': {
            'Meta': {'object_name': 'CourseStudentList'},
            'course': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['c2g.Course']"}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'last_updated': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'auto_now_add': 'True', 'blank': 'True'}),
            'max_completion_level': ('django.db.models.fields.IntegerField', [], {'default': '0'}),
            'members': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['auth.User']", 'symmetrical': 'False'}),
            'time_created': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'})
        },
        'c2g.currenttermmap': {
            'Meta': {'object_name': 'CurrentTermMap'},
            'course_prefix': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '64', 'db_index': 'True'}),
            'course_suffix': ('django.db.models.fields.CharField', [], {'max_length': '64'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'last_updated': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'auto_now_add': 'True', 'blank': 'True'}),
            'time_created': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'})
        },
        'c2g.emailaddr': {
            'Meta': {'object_name': 'EmailAddr'},
            'addr': ('django.db.models.fields.EmailField', [], {'max_length': '128'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '128', 'null': 'True', 'blank': 'True'}),
            'optout': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'optout_code': ('django.db.models.fields.CharField', [], {'default': "'optout'", 'max_length': '64'})
        },
        'c2g.exam': {
            'Meta': {'object_name': 'Exam'},
            'assessment_type': ('django.db.models.fields.CharField', [], {'max_length': '64', 'null': 'True', 'blank': 'True'}),
            'autograde': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'course': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['c2g.Course']"}),
            'description': ('django.db.models.fields.TextField', [], {'null': 'True', 'blank': 'True'}),
            'display_single': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'due_date': ('django.db.models.fields.DateTimeField', [], {'null': 'True', 'blank': 'True'}),
            'exam_type': ('django.db.models.fields.CharField', [], {'default': "'exam'", 'max_length': '32'}),
            'grace_period': ('django.db.models.fields.DateTimeField', [], {'null': 'True', 'blank': 'True'}),
            'grade_single': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'html_content': ('django.db.models.fields.TextField', [], {'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'image': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'to': "orm['c2g.Exam']"}),
            'index': ('django.db.models.fields.IntegerField', [], {'null': 'True', 'blank': 'True'}),
            'invideo': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'is_deleted': ('django.db.models.fields.IntegerField', [], {'default': '0'}),
            'last_updated': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'auto_now_add': 'True', 'blank': 'True'}),
            'late_penalty': ('django.db.models.fields.IntegerField', [], {'default': '0', 'null': 'True', 'blank': 'True'}),
            'live_datetime': ('django.db.models.fields.DateTimeField', [], {'null': 'True', 'blank': 'True'}),
            'minutes_btw_attempts': ('django.db.models.fields.IntegerField', [], {'default': '0'}),
            'minutesallowed': ('django.db.models.fields.IntegerField', [], {'null': 'True', 'blank': 'True'}),
            'mode': ('django.db.models.fields.TextField', [], {'blank': 'True'}),
            'partial_credit_deadline': ('django.db.models.fields.DateTimeField', [], {'null': 'True', 'blank': 'True'}),
            'quizdown': ('django.db.models.fields.TextField', [], {'null': 'True', 'blank': 'True'}),
            'resubmission_penalty': ('django.db.models.fields.IntegerField', [], {'default': '0', 'null': 'True', 'blank': 'True'}),
            'section': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['c2g.ContentSection']", 'null': 'True'}),
            'slug': ('django.db.models.fields.SlugField', [], {'max_length': '255', 'null': 'True'}),
            'submissions_permitted': ('django.db.models.fields.IntegerField', [], {'default': '999', 'null': 'True', 'blank': 'True'}),
            'time_created': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'timed': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'title': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True', 'blank': 'True'}),
            'total_score': ('django.db.models.fields.FloatField', [], {'null': 'True', 'blank': 'True'}),
            'xml_imported': ('django.db.models.fields.TextField', [], {'null': 'True', 'blank': 'True'}),
            'xml_metadata': ('django.db.models.fields.TextField', [], {'null': 'True', 'blank': 'True'})
        },
        'c2g.examrecord': {
            'Meta': {'object_name': 'ExamRecord'},
            'attempt_number': ('django.db.models.fields.IntegerField', [], {'default': '0'}),
            'complete': ('django.db.models.fields.BooleanField', [], {'default': 'True'}),
            'course': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['c2g.Course']"}),
            'exam': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['c2g.Exam']"}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'json_data': ('django.db.models.fields.TextField', [], {'null': 'True', 'blank': 'True'}),
            'json_score_data': ('django.db.models.fields.TextField', [], {'null': 'True', 'blank': 'True'}),
            'last_updated': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'auto_now_add': 'True', 'blank': 'True'}),
            'late': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'onpage': ('django.db.models.fields.CharField', [], {'max_length': '512', 'null': 'True', 'blank': 'True'}),
            'score': ('django.db.models.fields.FloatField', [], {'null': 'True', 'blank': 'True'}),
            'student': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['auth.User']"}),
            'time_created': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'})
        },
        'c2g.examrecordfieldlog': {
            'Meta': {'object_name': 'ExamRecordFieldLog'},
            'course': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['c2g.Course']"}),
            'exam': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['c2g.Exam']"}),
            'field_name': ('django.db.models.fields.CharField', [], {'max_length': '128', 'db_index': 'True'}),
            'human_name': ('django.db.models.fields.CharField', [], {'db_index': 'True', 'max_length': '128', 'null': 'True', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'last_updated': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'auto_now_add': 'True', 'blank': 'True'}),
            'max_score': ('django.db.models.fields.FloatField', [], {'default': '0', 'blank': 'True'}),
            'raw_score': ('django.db.models.fields.FloatField', [], {'default': '0', 'blank': 'True'}),
            'student': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['auth.User']"}),
            'time_created': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'value': ('django.db.models.fields.TextField', [], {'null': 'True', 'blank': 'True'})
        },
        'c2g.examrecordscore': {
            'Meta': {'object_name': 'ExamRecordScore'},
            'csv_imported': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'last_updated': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'auto_now_add': 'True', 'blank': 'True'}),
            'raw_score': ('django.db.models.fields.FloatField', [], {'null': 'True', 'blank': 'True'}),
            'record': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['c2g.ExamRecord']", 'unique': 'True'}),
            'time_created': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'})
        },
        'c2g.examrecordscorefield': {
            'Meta': {'object_name': 'ExamRecordScoreField'},
            'associated_text': ('django.db.models.fields.TextField', [], {'null': 'True', 'blank': 'True'}),
            'comments': ('django.db.models.fields.TextField', [], {'null': 'True', 'blank': 'True'}),
            'correct': ('django.db.models.fields.NullBooleanField', [], {'null': 'True', 'blank': 'True'}),
            'field_name': ('django.db.models.fields.CharField', [], {'max_length': '128', 'db_index': 'True'}),
            'human_name': ('django.db.models.fields.CharField', [], {'db_index': 'True', 'max_length': '128', 'null': 'True', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'last_updated': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'auto_now_add': 'True', 'blank': 'True'}),
            'parent': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['c2g.ExamRecordScore']"}),
            'subscore': ('django.db.models.fields.FloatField', [], {'default': '0'}),
            'time_created': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'value': ('django.db.models.fields.TextField', [], {'null': 'True', 'blank': 'True'})
        },
        'c2g.examrecordscorefieldchoice': {
            'Meta': {'object_name': 'ExamRecordScoreFieldChoice'},
            'associated_text': ('django.db.models.fields.TextField', [], {'null': 'True', 'blank': 'True'}),
            'choice_value': ('django.db.models.fields.CharField', [], {'max_length': '128', 'db_index': 'True'}),
            'correct': ('django.db.models.fields.NullBooleanField', [], {'null': 'True', 'blank': 'True'}),
            'human_name': ('django.db.models.fields.CharField', [], {'db_index': 'True', 'max_length': '128', 'null': 'True', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'last_updated': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'auto_now_add': 'True', 'blank': 'True'}),
            'parent': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['c2g.ExamRecordScoreField']"}),
            'time_created': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'})
        },
        'c2g.examscore': {
            'Meta': {'unique_together': "(('exam', 'student'),)", 'object_name': 'ExamScore'},
            'course': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['c2g.Course']"}),
            'csv_imported': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'exam': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['c2g.Exam']"}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'last_updated': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'auto_now_add': 'True', 'blank': 'True'}),
            'score': ('django.db.models.fields.FloatField', [], {'null': 'True', 'blank': 'True'}),
            'student': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['auth.User']"}),
            'time_created': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'})
        },
        'c2g.examscorefield': {
            'Meta': {'object_name': 'ExamScoreField'},
            'associated_text': ('django.db.models.fields.TextField', [], {'null': 'True', 'blank': 'True'}),
            'comments': ('django.db.models.fields.TextField', [], {'null': 'True', 'blank': 'True'}),
            'correct': ('django.db.models.fields.NullBooleanField', [], {'null': 'True', 'blank': 'True'}),
            'field_name': ('django.db.models.fields.CharField', [], {'max_length': '128', 'db_index': 'True'}),
            'human_name': ('django.db.models.fields.CharField', [], {'db_index': 'True', 'max_length': '128', 'null': 'True', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'last_updated': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'auto_now_add': 'True', 'blank': 'True'}),
            'parent': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['c2g.ExamScore']"}),
            'subscore': ('django.db.models.fields.FloatField', [], {'default': '0'}),
            'time_created': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'value': ('django.db.models.fields.CharField', [], {'max_length': '128', 'null': 'True', 'blank': 'True'})
        },
        'c2g.exercise': {
            'Meta': {'object_name': 'Exercise', 'db_table': "u'c2g_exercises'"},
            'file': ('django.db.models.fields.files.FileField', [], {'max_length': '100', 'null': 'True'}),
            'fileName': ('django.db.models.fields.CharField', [], {'max_length': '255'}),
            'handle': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True', 'db_index': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'is_deleted': ('django.db.models.fields.IntegerField', [], {'default': '0'}),
            'last_updated': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'auto_now_add': 'True', 'blank': 'True'}),
            'problemSet': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['c2g.ProblemSet']", 'through': "orm['c2g.ProblemSetToExercise']", 'symmetrical': 'False'}),
            'time_created': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'video': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['c2g.Video']", 'through': "orm['c2g.VideoToExercise']", 'symmetrical': 'False'})
        },
        'c2g.file': {
            'Meta': {'object_name': 'File', 'db_table': "u'c2g_files'"},
            'course': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['c2g.Course']"}),
            'file': ('django.db.models.fields.files.FileField', [], {'max_length': '100'}),
            'handle': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True', 'db_index': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'image': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'to': "orm['c2g.File']"}),
            'index': ('django.db.models.fields.IntegerField', [], {'null': 'True', 'blank': 'True'}),
            'is_deleted': ('django.db.models.fields.IntegerField', [], {'default': '0'}),
            'last_updated': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'auto_now_add': 'True', 'blank': 'True'}),
            'live_datetime': ('django.db.models.fields.DateTimeField', [], {'null': 'True', 'blank': 'True'}),
            'mode': ('django.db.models.fields.TextField', [], {'blank': 'True'}),
            'section': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['c2g.ContentSection']", 'null': 'True'}),
            'time_created': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'title': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True', 'blank': 'True'})
        },
        'c2g.institution': {
            'Meta': {'object_name': 'Institution', 'db_table': "u'c2g_institutions'"},
            'city': ('django.db.models.fields.TextField', [], {'blank': 'True'}),
            'country': ('django.db.models.fields.TextField', [], {'blank': 'True'}),
            'domains': ('django.db.models.fields.TextField', [], {'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'last_updated': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'auto_now_add': 'True', 'blank': 'True'}),
            'time_created': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'title': ('django.db.models.fields.TextField', [], {})
        },
        'c2g.instructor': {
            'Meta': {'object_name': 'Instructor'},
            'biography': ('django.db.models.fields.TextField', [], {'blank': 'True'}),
            'email': ('django.db.models.fields.TextField', [], {'blank': 'True'}),
            'handle': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True', 'db_index': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'last_updated': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'auto_now_add': 'True', 'blank': 'True'}),
            'name': ('django.db.models.fields.TextField', [], {'blank': 'True'}),
            'photo': ('django.db.models.fields.files.FileField', [], {'max_length': '100', 'blank': 'True'}),
            'time_created': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'})
        },
        'c2g.listemail': {
            'Meta': {'object_name': 'ListEmail'},
            'from_addr': ('django.db.models.fields.CharField', [], {'max_length': '128', 'blank': 'True'}),
            'from_name': ('django.db.models.fields.CharField', [], {'max_length': '128', 'blank': 'True'}),
            'hash': ('django.db.models.fields.CharField', [], {'max_length': '128', 'db_index': 'True'}),
            'html_message': ('django.db.models.fields.TextField', [], {'null': 'True', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'last_updated': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'auto_now_add': 'True', 'blank': 'True'}),
            'sender': ('django.db.models.fields.related.ForeignKey', [], {'default': '1', 'to': "orm['auth.User']", 'null': 'True', 'blank': 'True'}),
            'subject': ('django.db.models.fields.CharField', [], {'max_length': '128', 'blank': 'True'}),
            'time_created': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'to_list': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['c2g.MailingList']"})
        },
        'c2g.mailinglist': {
            'Meta': {'object_name': 'MailingList'},
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'members': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['c2g.EmailAddr']", 'symmetrical': 'False'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '128', 'blank': 'True'})
        },
        'c2g.newsevent': {
            'Meta': {'object_name': 'NewsEvent', 'db_table': "u'c2g_news_events'"},
            'course': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['c2g.Course']"}),
            'event': ('django.db.models.fields.CharField', [], {'max_length': '255'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'time_created': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'})
        },
        'c2g.pagevisitlog': {
            'Meta': {'object_name': 'PageVisitLog', 'db_table': "u'c2g_page_visit_log'"},
            'course': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['c2g.Course']"}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'last_updated': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'auto_now_add': 'True', 'blank': 'True'}),
            'object_id': ('django.db.models.fields.CharField', [], {'max_length': '128', 'blank': 'True'}),
            'page_type': ('django.db.models.fields.CharField', [], {'max_length': '128', 'db_index': 'True'}),
            'time_created': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'user': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['auth.User']"})
        },
        'c2g.problemactivity': {
            'Meta': {'object_name': 'ProblemActivity', 'db_table': "u'c2g_problem_activity'"},
            'attempt_content': ('django.db.models.fields.TextField', [], {'null': 'True', 'blank': 'True'}),
            'attempt_number': ('django.db.models.fields.IntegerField', [], {'null': 'True', 'blank': 'True'}),
            'card': ('django.db.models.fields.TextField', [], {'blank': 'True'}),
            'cards_done': ('django.db.models.fields.IntegerField', [], {'null': 'True', 'blank': 'True'}),
            'cards_left': ('django.db.models.fields.IntegerField', [], {'null': 'True', 'blank': 'True'}),
            'casing': ('django.db.models.fields.TextField', [], {'blank': 'True'}),
            'complete': ('django.db.models.fields.IntegerField', [], {'null': 'True', 'blank': 'True'}),
            'count_hints': ('django.db.models.fields.IntegerField', [], {'null': 'True', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'last_updated': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'auto_now_add': 'True', 'blank': 'True'}),
            'problem_identifier': ('django.db.models.fields.CharField', [], {'max_length': '255', 'blank': 'True'}),
            'problem_type': ('django.db.models.fields.TextField', [], {'blank': 'True'}),
            'problemset_to_exercise': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['c2g.ProblemSetToExercise']", 'null': 'True'}),
            'review_mode': ('django.db.models.fields.IntegerField', [], {'null': 'True', 'blank': 'True'}),
            'seed': ('django.db.models.fields.TextField', [], {'blank': 'True'}),
            'sha1': ('django.db.models.fields.TextField', [], {'blank': 'True'}),
            'student': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['auth.User']"}),
            'time_created': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'time_taken': ('django.db.models.fields.IntegerField', [], {'null': 'True', 'blank': 'True'}),
            'topic_mode': ('django.db.models.fields.IntegerField', [], {'null': 'True', 'blank': 'True'}),
            'user_choices': ('django.db.models.fields.CharField', [], {'max_length': '1024', 'null': 'True', 'blank': 'True'}),
            'user_selection_val': ('django.db.models.fields.CharField', [], {'max_length': '1024', 'null': 'True', 'blank': 'True'}),
            'video_to_exercise': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['c2g.VideoToExercise']", 'null': 'True'})
        },
        'c2g.problemset': {
            'Meta': {'object_name': 'ProblemSet', 'db_table': "u'c2g_problem_sets'"},
            'assessment_type': ('django.db.models.fields.CharField', [], {'max_length': '255'}),
            'course': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['c2g.Course']"}),
            'description': ('django.db.models.fields.TextField', [], {'blank': 'True'}),
            'due_date': ('django.db.models.fields.DateTimeField', [], {'null': 'True'}),
            'grace_period': ('django.db.models.fields.DateTimeField', [], {}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'image': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'to': "orm['c2g.ProblemSet']"}),
            'index': ('django.db.models.fields.IntegerField', [], {'null': 'True', 'blank': 'True'}),
            'is_deleted': ('django.db.models.fields.IntegerField', [], {'default': '0'}),
            'last_updated': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'auto_now_add': 'True', 'blank': 'True'}),
            'late_penalty': ('django.db.models.fields.IntegerField', [], {}),
            'live_datetime': ('django.db.models.fields.DateTimeField', [], {'null': 'True', 'blank': 'True'}),
            'mode': ('django.db.models.fields.TextField', [], {'blank': 'True'}),
            'partial_credit_deadline': ('django.db.models.fields.DateTimeField', [], {}),
            'path': ('django.db.models.fields.CharField', [], {'max_length': '255'}),
            'randomize': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'resubmission_penalty': ('django.db.models.fields.IntegerField', [], {}),
            'section': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['c2g.ContentSection']"}),
            'slug': ('django.db.models.fields.SlugField', [], {'max_length': '50'}),
            'submissions_permitted': ('django.db.models.fields.IntegerField', [], {}),
            'time_created': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'title': ('django.db.models.fields.CharField', [], {'max_length': '255'})
        },
        'c2g.problemsettoexercise': {
            'Meta': {'object_name': 'ProblemSetToExercise', 'db_table': "u'c2g_problemset_to_exercise'"},
            'exercise': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['c2g.Exercise']"}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'image': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['c2g.ProblemSetToExercise']", 'null': 'True', 'blank': 'True'}),
            'is_deleted': ('django.db.models.fields.IntegerField', [], {'default': '0'}),
            'mode': ('django.db.models.fields.TextField', [], {'blank': 'True'}),
            'number': ('django.db.models.fields.IntegerField', [], {'null': 'True', 'blank': 'True'}),
            'problemSet': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['c2g.ProblemSet']"})
        },
        'c2g.studentexamstart': {
            'Meta': {'object_name': 'StudentExamStart'},
            'exam': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['c2g.Exam']"}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'last_updated': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'auto_now_add': 'True', 'blank': 'True'}),
            'student': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['auth.User']"}),
            'time_created': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'})
        },
        'c2g.studentinvitation': {
            'Meta': {'object_name': 'StudentInvitation'},
            'course': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['c2g.Course']"}),
            'email': ('django.db.models.fields.CharField', [], {'max_length': '128', 'db_index': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'last_updated': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'auto_now_add': 'True', 'blank': 'True'}),
            'time_created': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'})
        },
        'c2g.studentsection': {
            'Meta': {'object_name': 'StudentSection', 'db_table': "u'c2g_sections'"},
            'capacity': ('django.db.models.fields.IntegerField', [], {'default': '999'}),
            'course': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['c2g.Course']"}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'is_deleted': ('django.db.models.fields.IntegerField', [], {'default': '0'}),
            'last_updated': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'auto_now_add': 'True', 'blank': 'True'}),
            'members': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['auth.User']", 'symmetrical': 'False'}),
            'time_created': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'title': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True', 'blank': 'True'})
        },
        'c2g.userprofile': {
            'Meta': {'object_name': 'UserProfile', 'db_table': "u'c2g_user_profiles'"},
            'accept_language': ('django.db.models.fields.CharField', [], {'max_length': '64', 'null': 'True'}),
            'accept_language_first': ('django.db.models.fields.CharField', [], {'max_length': '64', 'null': 'True'}),
            'birth_year': ('django.db.models.fields.CharField', [], {'max_length': '64', 'null': 'True'}),
            'certificates': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['c2g.CourseCertificate']", 'symmetrical': 'False'}),
            'client_ip': ('django.db.models.fields.CharField', [], {'max_length': '30', 'null': 'True'}),
            'client_ip_first': ('django.db.models.fields.CharField', [], {'max_length': '30', 'null': 'True'}),
            'education': ('django.db.models.fields.CharField', [], {'max_length': '64', 'null': 'True'}),
            'email_me': ('django.db.models.fields.BooleanField', [], {'default': 'True'}),
            'gender': ('django.db.models.fields.CharField', [], {'max_length': '64', 'null': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'institutions': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['c2g.Institution']", 'symmetrical': 'False'}),
            'last_updated': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'auto_now_add': 'True', 'blank': 'True'}),
            'piazza_email': ('django.db.models.fields.CharField', [], {'max_length': '128', 'blank': 'True'}),
            'piazza_name': ('django.db.models.fields.CharField', [], {'max_length': '128', 'blank': 'True'}),
            'referrer': ('django.db.models.fields.CharField', [], {'max_length': '256', 'null': 'True'}),
            'referrer_first': ('django.db.models.fields.CharField', [], {'max_length': '256', 'null': 'True'}),
            'site_data': ('django.db.models.fields.TextField', [], {'blank': 'True'}),
            'time_created': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'user': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['auth.User']", 'unique': 'True'}),
            'user_agent': ('django.db.models.fields.CharField', [], {'max_length': '256', 'null': 'True'}),
            'user_agent_first': ('django.db.models.fields.CharField', [], {'max_length': '256', 'null': 'True'}),
            'work': ('django.db.models.fields.CharField', [], {'max_length': '128', 'null': 'True'})
        },
        'c2g.video': {
            'Meta': {'object_name': 'Video', 'db_table': "u'c2g_videos'"},
            'course': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['c2g.Course']"}),
            'description': ('django.db.models.fields.TextField', [], {'blank': 'True'}),
            'duration': ('django.db.models.fields.IntegerField', [], {'null': 'True', 'blank': 'True'}),
            'exam': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['c2g.Exam']", 'null': 'True', 'blank': 'True'}),
            'file': ('django.db.models.fields.files.FileField', [], {'max_length': '100'}),
            'handle': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True', 'db_index': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'image': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'to': "orm['c2g.Video']"}),
            'index': ('django.db.models.fields.IntegerField', [], {'null': 'True', 'blank': 'True'}),
            'is_deleted': ('django.db.models.fields.IntegerField', [], {'default': '0'}),
            'last_updated': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'auto_now_add': 'True', 'blank': 'True'}),
            'live_datetime': ('django.db.models.fields.DateTimeField', [], {'null': 'True', 'blank': 'True'}),
            'mode': ('django.db.models.fields.TextField', [], {'blank': 'True'}),
            'section': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['c2g.ContentSection']", 'null': 'True'}),
            'slug': ('django.db.models.fields.SlugField', [], {'max_length': '255', 'null': 'True'}),
            'time_created': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'title': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True', 'blank': 'True'}),
            'type': ('django.db.models.fields.CharField', [], {'default': "'youtube'", 'max_length': '30'}),
            'url': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True', 'blank': 'True'})
        },
        'c2g.videoactivity': {
            'Meta': {'object_name': 'VideoActivity', 'db_table': "u'c2g_video_activity'"},
            'course': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['c2g.Course']"}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'max_end_seconds': ('django.db.models.fields.IntegerField', [], {'default': '0', 'blank': 'True'}),
            'start_seconds': ('django.db.models.fields.IntegerField', [], {'default': '0', 'blank': 'True'}),
            'student': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['auth.User']"}),
            'video': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['c2g.Video']"})
        },
        'c2g.videodownload': {
            'Meta': {'object_name': 'VideoDownload', 'db_table': "u'c2g_video_download'"},
            'course': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['c2g.Course']"}),
            'download_date': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'format': ('django.db.models.fields.CharField', [], {'max_length': '35', 'null': 'True', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'student': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['auth.User']"}),
            'video': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['c2g.Video']"})
        },
        'c2g.videotoexercise': {
            'Meta': {'object_name': 'VideoToExercise', 'db_table': "u'c2g_video_to_exercise'"},
            'exercise': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['c2g.Exercise']"}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'image': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['c2g.VideoToExercise']", 'null': 'True', 'blank': 'True'}),
            'is_deleted': ('django.db.models.fields.IntegerField', [], {'default': '0'}),
            'mode': ('django.db.models.fields.TextField', [], {'blank': 'True'}),
            'video': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['c2g.Video']"}),
            'video_time': ('django.db.models.fields.IntegerField', [], {})
        },
        'c2g.videoviewtraces': {
            'Meta': {'object_name': 'VideoViewTraces', 'db_table': "u'c2g_video_view_traces'"},
            'course': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['c2g.Course']"}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'last_updated': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'auto_now_add': 'True', 'blank': 'True'}),
            'time_created': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'trace': ('django.db.models.fields.TextField', [], {'blank': 'True'}),
            'user': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['auth.User']"}),
            'video': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['c2g.Video']"})
        },
        'contenttypes.contenttype': {
            'Meta': {'ordering': "('name',)", 'unique_together': "(('app_label', 'model'),)", 'object_name': 'ContentType', 'db_table': "'django_content_type'"},
            'app_label': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'model': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '100'})
        }
    }

    complete_apps = ['c2g']
########NEW FILE########
__FILENAME__ = 0008_auto__add_field_examscore_examrecordscore
# -*- coding: utf-8 -*-
import datetime
from south.db import db
from south.v2 import SchemaMigration
from django.db import models


class Migration(SchemaMigration):

    def forwards(self, orm):
        # Adding field 'ExamScore.examrecordscore'
        db.add_column('c2g_examscore', 'examrecordscore',
                      self.gf('django.db.models.fields.related.ForeignKey')(to=orm['c2g.ExamRecordScore'], null=True),
                      keep_default=True)


    def backwards(self, orm):
        # Deleting field 'ExamScore.examrecordscore'
        db.delete_column('c2g_examscore', 'examrecordscore_id')


    models = {
        'auth.group': {
            'Meta': {'object_name': 'Group'},
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '80'}),
            'permissions': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['auth.Permission']", 'symmetrical': 'False', 'blank': 'True'})
        },
        'auth.permission': {
            'Meta': {'ordering': "('content_type__app_label', 'content_type__model', 'codename')", 'unique_together': "(('content_type', 'codename'),)", 'object_name': 'Permission'},
            'codename': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'content_type': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['contenttypes.ContentType']"}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '50'})
        },
        'auth.user': {
            'Meta': {'object_name': 'User'},
            'date_joined': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
            'email': ('django.db.models.fields.EmailField', [], {'max_length': '75', 'blank': 'True'}),
            'first_name': ('django.db.models.fields.CharField', [], {'max_length': '30', 'blank': 'True'}),
            'groups': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['auth.Group']", 'symmetrical': 'False', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'is_active': ('django.db.models.fields.BooleanField', [], {'default': 'True'}),
            'is_staff': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'is_superuser': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'last_login': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
            'last_name': ('django.db.models.fields.CharField', [], {'max_length': '30', 'blank': 'True'}),
            'password': ('django.db.models.fields.CharField', [], {'max_length': '128'}),
            'user_permissions': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['auth.Permission']", 'symmetrical': 'False', 'blank': 'True'}),
            'username': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '30'})
        },
        'c2g.additionalpage': {
            'Meta': {'object_name': 'AdditionalPage', 'db_table': "u'c2g_additional_pages'"},
            'course': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['c2g.Course']"}),
            'description': ('django.db.models.fields.TextField', [], {'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'image': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'to': "orm['c2g.AdditionalPage']"}),
            'index': ('django.db.models.fields.IntegerField', [], {'null': 'True', 'blank': 'True'}),
            'is_deleted': ('django.db.models.fields.IntegerField', [], {'default': '0'}),
            'last_updated': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'auto_now_add': 'True', 'blank': 'True'}),
            'live_datetime': ('django.db.models.fields.DateTimeField', [], {'null': 'True', 'blank': 'True'}),
            'menu_slug': ('django.db.models.fields.SlugField', [], {'max_length': '255', 'null': 'True', 'blank': 'True'}),
            'mode': ('django.db.models.fields.TextField', [], {'blank': 'True'}),
            'section': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['c2g.ContentSection']", 'null': 'True'}),
            'slug': ('django.db.models.fields.SlugField', [], {'max_length': '255', 'null': 'True', 'blank': 'True'}),
            'time_created': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'title': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True', 'blank': 'True'})
        },
        'c2g.announcement': {
            'Meta': {'object_name': 'Announcement', 'db_table': "u'c2g_announcements'"},
            'course': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['c2g.Course']"}),
            'description': ('django.db.models.fields.TextField', [], {'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'image': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'to': "orm['c2g.Announcement']"}),
            'index': ('django.db.models.fields.IntegerField', [], {'null': 'True', 'blank': 'True'}),
            'is_deleted': ('django.db.models.fields.IntegerField', [], {'default': '0'}),
            'last_updated': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'auto_now_add': 'True', 'blank': 'True'}),
            'live_datetime': ('django.db.models.fields.DateTimeField', [], {'null': 'True', 'blank': 'True'}),
            'mode': ('django.db.models.fields.TextField', [], {'blank': 'True'}),
            'owner': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['auth.User']"}),
            'time_created': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'title': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True', 'blank': 'True'})
        },
        'c2g.contentgroup': {
            'Meta': {'object_name': 'ContentGroup', 'db_table': "u'c2g_content_group'"},
            'additional_page': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['c2g.AdditionalPage']", 'null': 'True', 'blank': 'True'}),
            'course': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['c2g.Course']"}),
            'display_style': ('django.db.models.fields.CharField', [], {'default': "'list'", 'max_length': '32', 'blank': 'True'}),
            'exam': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['c2g.Exam']", 'null': 'True', 'blank': 'True'}),
            'file': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['c2g.File']", 'null': 'True', 'blank': 'True'}),
            'group_id': ('django.db.models.fields.IntegerField', [], {'db_index': 'True', 'null': 'True', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'level': ('django.db.models.fields.IntegerField', [], {'db_index': 'True'}),
            'problemSet': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['c2g.ProblemSet']", 'null': 'True', 'blank': 'True'}),
            'video': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['c2g.Video']", 'null': 'True', 'blank': 'True'})
        },
        'c2g.contentsection': {
            'Meta': {'object_name': 'ContentSection', 'db_table': "u'c2g_content_sections'"},
            'course': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['c2g.Course']"}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'image': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'to': "orm['c2g.ContentSection']"}),
            'index': ('django.db.models.fields.IntegerField', [], {'null': 'True', 'blank': 'True'}),
            'is_deleted': ('django.db.models.fields.IntegerField', [], {'default': '0'}),
            'last_updated': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'auto_now_add': 'True', 'blank': 'True'}),
            'live_datetime': ('django.db.models.fields.DateTimeField', [], {'null': 'True', 'blank': 'True'}),
            'mode': ('django.db.models.fields.TextField', [], {'blank': 'True'}),
            'slug': ('django.db.models.fields.SlugField', [], {'max_length': '255', 'null': 'True', 'blank': 'True'}),
            'subtitle': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True', 'blank': 'True'}),
            'time_created': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'title': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True', 'blank': 'True'})
        },
        'c2g.course': {
            'Meta': {'object_name': 'Course', 'db_table': "u'c2g_courses'"},
            'accompanying_materials': ('django.db.models.fields.TextField', [], {'blank': 'True'}),
            'calendar_end': ('django.db.models.fields.DateField', [], {'null': 'True', 'blank': 'True'}),
            'calendar_start': ('django.db.models.fields.DateField', [], {'null': 'True', 'blank': 'True'}),
            'contact': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True', 'blank': 'True'}),
            'description': ('django.db.models.fields.TextField', [], {'blank': 'True'}),
            'faq': ('django.db.models.fields.TextField', [], {'blank': 'True'}),
            'handle': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True', 'db_index': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'image': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'to': "orm['c2g.Course']"}),
            'institution': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['c2g.Institution']", 'null': 'True'}),
            'institution_only': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'instructor_group': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'instructor_group'", 'to': "orm['auth.Group']"}),
            'is_deleted': ('django.db.models.fields.IntegerField', [], {'default': '0'}),
            'last_updated': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'auto_now_add': 'True', 'blank': 'True'}),
            'list_publicly': ('django.db.models.fields.IntegerField', [], {'null': 'True', 'blank': 'True'}),
            'live_datetime': ('django.db.models.fields.DateTimeField', [], {'null': 'True', 'blank': 'True'}),
            'logo': ('django.db.models.fields.files.FileField', [], {'max_length': '100', 'null': 'True'}),
            'mode': ('django.db.models.fields.TextField', [], {'blank': 'True'}),
            'outcomes': ('django.db.models.fields.TextField', [], {'blank': 'True'}),
            'piazza_id': ('django.db.models.fields.IntegerField', [], {'null': 'True', 'blank': 'True'}),
            'preenroll_only': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'prerequisites': ('django.db.models.fields.TextField', [], {'blank': 'True'}),
            'preview_only_mode': ('django.db.models.fields.BooleanField', [], {'default': 'True'}),
            'readonly_tas_group': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'readonly_tas_group'", 'to': "orm['auth.Group']"}),
            'share_to': ('django.db.models.fields.related.ManyToManyField', [], {'blank': 'True', 'related_name': "'share_from'", 'null': 'True', 'symmetrical': 'False', 'to': "orm['c2g.Course']"}),
            'short_description': ('django.db.models.fields.TextField', [], {'blank': 'True'}),
            'student_group': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'student_group'", 'to': "orm['auth.Group']"}),
            'syllabus': ('django.db.models.fields.TextField', [], {'blank': 'True'}),
            'tas_group': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'tas_group'", 'to': "orm['auth.Group']"}),
            'term': ('django.db.models.fields.TextField', [], {'blank': 'True'}),
            'time_created': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'title': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True', 'blank': 'True'}),
            'twitter_tag': ('django.db.models.fields.CharField', [], {'max_length': '64', 'null': 'True', 'blank': 'True'}),
            'year': ('django.db.models.fields.IntegerField', [], {'null': 'True', 'blank': 'True'})
        },
        'c2g.coursecertificate': {
            'Meta': {'object_name': 'CourseCertificate'},
            'assets': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'course': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['c2g.Course']"}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'last_updated': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'auto_now_add': 'True', 'blank': 'True'}),
            'storage': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'time_created': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'type': ('django.db.models.fields.CharField', [], {'default': "'completion'", 'max_length': '64'})
        },
        'c2g.courseemail': {
            'Meta': {'object_name': 'CourseEmail', 'db_table': "u'c2g_course_emails'"},
            'course': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['c2g.Course']"}),
            'hash': ('django.db.models.fields.CharField', [], {'max_length': '128', 'db_index': 'True'}),
            'html_message': ('django.db.models.fields.TextField', [], {'null': 'True', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'last_updated': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'auto_now_add': 'True', 'blank': 'True'}),
            'sender': ('django.db.models.fields.related.ForeignKey', [], {'default': '1', 'to': "orm['auth.User']", 'null': 'True', 'blank': 'True'}),
            'subject': ('django.db.models.fields.CharField', [], {'max_length': '128', 'blank': 'True'}),
            'time_created': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'to': ('django.db.models.fields.CharField', [], {'default': "'myself'", 'max_length': '64'})
        },
        'c2g.courseinstructor': {
            'Meta': {'object_name': 'CourseInstructor', 'db_table': "u'c2g_course_instructor'"},
            'course': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['c2g.Course']"}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'instructor': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['c2g.Instructor']"}),
            'last_updated': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'auto_now_add': 'True', 'blank': 'True'}),
            'time_created': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'})
        },
        'c2g.coursestudentlist': {
            'Meta': {'object_name': 'CourseStudentList'},
            'course': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['c2g.Course']"}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'last_updated': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'auto_now_add': 'True', 'blank': 'True'}),
            'max_completion_level': ('django.db.models.fields.IntegerField', [], {'default': '0'}),
            'members': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['auth.User']", 'symmetrical': 'False'}),
            'time_created': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'})
        },
        'c2g.currenttermmap': {
            'Meta': {'object_name': 'CurrentTermMap'},
            'course_prefix': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '64', 'db_index': 'True'}),
            'course_suffix': ('django.db.models.fields.CharField', [], {'max_length': '64'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'last_updated': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'auto_now_add': 'True', 'blank': 'True'}),
            'time_created': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'})
        },
        'c2g.emailaddr': {
            'Meta': {'object_name': 'EmailAddr'},
            'addr': ('django.db.models.fields.EmailField', [], {'max_length': '128'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '128', 'null': 'True', 'blank': 'True'}),
            'optout': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'optout_code': ('django.db.models.fields.CharField', [], {'default': "'optout'", 'max_length': '64'})
        },
        'c2g.exam': {
            'Meta': {'object_name': 'Exam'},
            'assessment_type': ('django.db.models.fields.CharField', [], {'max_length': '64', 'null': 'True', 'blank': 'True'}),
            'autograde': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'course': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['c2g.Course']"}),
            'description': ('django.db.models.fields.TextField', [], {'null': 'True', 'blank': 'True'}),
            'display_single': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'due_date': ('django.db.models.fields.DateTimeField', [], {'null': 'True', 'blank': 'True'}),
            'exam_type': ('django.db.models.fields.CharField', [], {'default': "'exam'", 'max_length': '32'}),
            'grace_period': ('django.db.models.fields.DateTimeField', [], {'null': 'True', 'blank': 'True'}),
            'grade_single': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'html_content': ('django.db.models.fields.TextField', [], {'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'image': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'to': "orm['c2g.Exam']"}),
            'index': ('django.db.models.fields.IntegerField', [], {'null': 'True', 'blank': 'True'}),
            'invideo': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'is_deleted': ('django.db.models.fields.IntegerField', [], {'default': '0'}),
            'last_updated': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'auto_now_add': 'True', 'blank': 'True'}),
            'late_penalty': ('django.db.models.fields.IntegerField', [], {'default': '0', 'null': 'True', 'blank': 'True'}),
            'live_datetime': ('django.db.models.fields.DateTimeField', [], {'null': 'True', 'blank': 'True'}),
            'minutes_btw_attempts': ('django.db.models.fields.IntegerField', [], {'default': '0'}),
            'minutesallowed': ('django.db.models.fields.IntegerField', [], {'null': 'True', 'blank': 'True'}),
            'mode': ('django.db.models.fields.TextField', [], {'blank': 'True'}),
            'partial_credit_deadline': ('django.db.models.fields.DateTimeField', [], {'null': 'True', 'blank': 'True'}),
            'quizdown': ('django.db.models.fields.TextField', [], {'null': 'True', 'blank': 'True'}),
            'resubmission_penalty': ('django.db.models.fields.IntegerField', [], {'default': '0', 'null': 'True', 'blank': 'True'}),
            'section': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['c2g.ContentSection']", 'null': 'True'}),
            'slug': ('django.db.models.fields.SlugField', [], {'max_length': '255', 'null': 'True'}),
            'submissions_permitted': ('django.db.models.fields.IntegerField', [], {'default': '999', 'null': 'True', 'blank': 'True'}),
            'time_created': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'timed': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'title': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True', 'blank': 'True'}),
            'total_score': ('django.db.models.fields.FloatField', [], {'null': 'True', 'blank': 'True'}),
            'xml_imported': ('django.db.models.fields.TextField', [], {'null': 'True', 'blank': 'True'}),
            'xml_metadata': ('django.db.models.fields.TextField', [], {'null': 'True', 'blank': 'True'})
        },
        'c2g.examrecord': {
            'Meta': {'object_name': 'ExamRecord'},
            'attempt_number': ('django.db.models.fields.IntegerField', [], {'default': '0'}),
            'complete': ('django.db.models.fields.BooleanField', [], {'default': 'True'}),
            'course': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['c2g.Course']"}),
            'exam': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['c2g.Exam']"}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'json_data': ('django.db.models.fields.TextField', [], {'null': 'True', 'blank': 'True'}),
            'json_score_data': ('django.db.models.fields.TextField', [], {'null': 'True', 'blank': 'True'}),
            'last_updated': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'auto_now_add': 'True', 'blank': 'True'}),
            'late': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'onpage': ('django.db.models.fields.CharField', [], {'max_length': '512', 'null': 'True', 'blank': 'True'}),
            'score': ('django.db.models.fields.FloatField', [], {'null': 'True', 'blank': 'True'}),
            'student': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['auth.User']"}),
            'time_created': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'})
        },
        'c2g.examrecordfieldlog': {
            'Meta': {'object_name': 'ExamRecordFieldLog'},
            'course': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['c2g.Course']"}),
            'exam': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['c2g.Exam']"}),
            'field_name': ('django.db.models.fields.CharField', [], {'max_length': '128', 'db_index': 'True'}),
            'human_name': ('django.db.models.fields.CharField', [], {'db_index': 'True', 'max_length': '128', 'null': 'True', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'last_updated': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'auto_now_add': 'True', 'blank': 'True'}),
            'max_score': ('django.db.models.fields.FloatField', [], {'default': '0', 'blank': 'True'}),
            'raw_score': ('django.db.models.fields.FloatField', [], {'default': '0', 'blank': 'True'}),
            'student': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['auth.User']"}),
            'time_created': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'value': ('django.db.models.fields.TextField', [], {'null': 'True', 'blank': 'True'})
        },
        'c2g.examrecordscore': {
            'Meta': {'object_name': 'ExamRecordScore'},
            'csv_imported': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'last_updated': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'auto_now_add': 'True', 'blank': 'True'}),
            'raw_score': ('django.db.models.fields.FloatField', [], {'null': 'True', 'blank': 'True'}),
            'record': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['c2g.ExamRecord']", 'unique': 'True'}),
            'time_created': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'})
        },
        'c2g.examrecordscorefield': {
            'Meta': {'object_name': 'ExamRecordScoreField'},
            'associated_text': ('django.db.models.fields.TextField', [], {'null': 'True', 'blank': 'True'}),
            'comments': ('django.db.models.fields.TextField', [], {'null': 'True', 'blank': 'True'}),
            'correct': ('django.db.models.fields.NullBooleanField', [], {'null': 'True', 'blank': 'True'}),
            'field_name': ('django.db.models.fields.CharField', [], {'max_length': '128', 'db_index': 'True'}),
            'human_name': ('django.db.models.fields.CharField', [], {'db_index': 'True', 'max_length': '128', 'null': 'True', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'last_updated': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'auto_now_add': 'True', 'blank': 'True'}),
            'parent': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['c2g.ExamRecordScore']"}),
            'subscore': ('django.db.models.fields.FloatField', [], {'default': '0'}),
            'time_created': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'value': ('django.db.models.fields.TextField', [], {'null': 'True', 'blank': 'True'})
        },
        'c2g.examrecordscorefieldchoice': {
            'Meta': {'object_name': 'ExamRecordScoreFieldChoice'},
            'associated_text': ('django.db.models.fields.TextField', [], {'null': 'True', 'blank': 'True'}),
            'choice_value': ('django.db.models.fields.CharField', [], {'max_length': '128', 'db_index': 'True'}),
            'correct': ('django.db.models.fields.NullBooleanField', [], {'null': 'True', 'blank': 'True'}),
            'human_name': ('django.db.models.fields.CharField', [], {'db_index': 'True', 'max_length': '128', 'null': 'True', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'last_updated': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'auto_now_add': 'True', 'blank': 'True'}),
            'parent': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['c2g.ExamRecordScoreField']"}),
            'time_created': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'})
        },
        'c2g.examscore': {
            'Meta': {'unique_together': "(('exam', 'student'),)", 'object_name': 'ExamScore'},
            'course': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['c2g.Course']"}),
            'csv_imported': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'exam': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['c2g.Exam']"}),
            'examrecordscore': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['c2g.ExamRecordScore']", 'null': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'last_updated': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'auto_now_add': 'True', 'blank': 'True'}),
            'score': ('django.db.models.fields.FloatField', [], {'null': 'True', 'blank': 'True'}),
            'student': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['auth.User']"}),
            'time_created': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'})
        },
        'c2g.examscorefield': {
            'Meta': {'object_name': 'ExamScoreField'},
            'associated_text': ('django.db.models.fields.TextField', [], {'null': 'True', 'blank': 'True'}),
            'comments': ('django.db.models.fields.TextField', [], {'null': 'True', 'blank': 'True'}),
            'correct': ('django.db.models.fields.NullBooleanField', [], {'null': 'True', 'blank': 'True'}),
            'field_name': ('django.db.models.fields.CharField', [], {'max_length': '128', 'db_index': 'True'}),
            'human_name': ('django.db.models.fields.CharField', [], {'db_index': 'True', 'max_length': '128', 'null': 'True', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'last_updated': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'auto_now_add': 'True', 'blank': 'True'}),
            'parent': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['c2g.ExamScore']"}),
            'subscore': ('django.db.models.fields.FloatField', [], {'default': '0'}),
            'time_created': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'value': ('django.db.models.fields.CharField', [], {'max_length': '128', 'null': 'True', 'blank': 'True'})
        },
        'c2g.exercise': {
            'Meta': {'object_name': 'Exercise', 'db_table': "u'c2g_exercises'"},
            'file': ('django.db.models.fields.files.FileField', [], {'max_length': '100', 'null': 'True'}),
            'fileName': ('django.db.models.fields.CharField', [], {'max_length': '255'}),
            'handle': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True', 'db_index': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'is_deleted': ('django.db.models.fields.IntegerField', [], {'default': '0'}),
            'last_updated': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'auto_now_add': 'True', 'blank': 'True'}),
            'problemSet': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['c2g.ProblemSet']", 'through': "orm['c2g.ProblemSetToExercise']", 'symmetrical': 'False'}),
            'time_created': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'video': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['c2g.Video']", 'through': "orm['c2g.VideoToExercise']", 'symmetrical': 'False'})
        },
        'c2g.file': {
            'Meta': {'object_name': 'File', 'db_table': "u'c2g_files'"},
            'course': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['c2g.Course']"}),
            'file': ('django.db.models.fields.files.FileField', [], {'max_length': '100'}),
            'handle': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True', 'db_index': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'image': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'to': "orm['c2g.File']"}),
            'index': ('django.db.models.fields.IntegerField', [], {'null': 'True', 'blank': 'True'}),
            'is_deleted': ('django.db.models.fields.IntegerField', [], {'default': '0'}),
            'last_updated': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'auto_now_add': 'True', 'blank': 'True'}),
            'live_datetime': ('django.db.models.fields.DateTimeField', [], {'null': 'True', 'blank': 'True'}),
            'mode': ('django.db.models.fields.TextField', [], {'blank': 'True'}),
            'section': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['c2g.ContentSection']", 'null': 'True'}),
            'time_created': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'title': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True', 'blank': 'True'})
        },
        'c2g.institution': {
            'Meta': {'object_name': 'Institution', 'db_table': "u'c2g_institutions'"},
            'city': ('django.db.models.fields.TextField', [], {'blank': 'True'}),
            'country': ('django.db.models.fields.TextField', [], {'blank': 'True'}),
            'domains': ('django.db.models.fields.TextField', [], {'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'last_updated': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'auto_now_add': 'True', 'blank': 'True'}),
            'time_created': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'title': ('django.db.models.fields.TextField', [], {})
        },
        'c2g.instructor': {
            'Meta': {'object_name': 'Instructor'},
            'biography': ('django.db.models.fields.TextField', [], {'blank': 'True'}),
            'email': ('django.db.models.fields.TextField', [], {'blank': 'True'}),
            'handle': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True', 'db_index': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'last_updated': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'auto_now_add': 'True', 'blank': 'True'}),
            'name': ('django.db.models.fields.TextField', [], {'blank': 'True'}),
            'photo': ('django.db.models.fields.files.FileField', [], {'max_length': '100', 'blank': 'True'}),
            'time_created': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'})
        },
        'c2g.listemail': {
            'Meta': {'object_name': 'ListEmail'},
            'from_addr': ('django.db.models.fields.CharField', [], {'max_length': '128', 'blank': 'True'}),
            'from_name': ('django.db.models.fields.CharField', [], {'max_length': '128', 'blank': 'True'}),
            'hash': ('django.db.models.fields.CharField', [], {'max_length': '128', 'db_index': 'True'}),
            'html_message': ('django.db.models.fields.TextField', [], {'null': 'True', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'last_updated': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'auto_now_add': 'True', 'blank': 'True'}),
            'sender': ('django.db.models.fields.related.ForeignKey', [], {'default': '1', 'to': "orm['auth.User']", 'null': 'True', 'blank': 'True'}),
            'subject': ('django.db.models.fields.CharField', [], {'max_length': '128', 'blank': 'True'}),
            'time_created': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'to_list': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['c2g.MailingList']"})
        },
        'c2g.mailinglist': {
            'Meta': {'object_name': 'MailingList'},
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'members': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['c2g.EmailAddr']", 'symmetrical': 'False'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '128', 'blank': 'True'})
        },
        'c2g.newsevent': {
            'Meta': {'object_name': 'NewsEvent', 'db_table': "u'c2g_news_events'"},
            'course': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['c2g.Course']"}),
            'event': ('django.db.models.fields.CharField', [], {'max_length': '255'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'time_created': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'})
        },
        'c2g.pagevisitlog': {
            'Meta': {'object_name': 'PageVisitLog', 'db_table': "u'c2g_page_visit_log'"},
            'course': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['c2g.Course']"}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'last_updated': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'auto_now_add': 'True', 'blank': 'True'}),
            'object_id': ('django.db.models.fields.CharField', [], {'max_length': '128', 'blank': 'True'}),
            'page_type': ('django.db.models.fields.CharField', [], {'max_length': '128', 'db_index': 'True'}),
            'time_created': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'user': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['auth.User']"})
        },
        'c2g.problemactivity': {
            'Meta': {'object_name': 'ProblemActivity', 'db_table': "u'c2g_problem_activity'"},
            'attempt_content': ('django.db.models.fields.TextField', [], {'null': 'True', 'blank': 'True'}),
            'attempt_number': ('django.db.models.fields.IntegerField', [], {'null': 'True', 'blank': 'True'}),
            'card': ('django.db.models.fields.TextField', [], {'blank': 'True'}),
            'cards_done': ('django.db.models.fields.IntegerField', [], {'null': 'True', 'blank': 'True'}),
            'cards_left': ('django.db.models.fields.IntegerField', [], {'null': 'True', 'blank': 'True'}),
            'casing': ('django.db.models.fields.TextField', [], {'blank': 'True'}),
            'complete': ('django.db.models.fields.IntegerField', [], {'null': 'True', 'blank': 'True'}),
            'count_hints': ('django.db.models.fields.IntegerField', [], {'null': 'True', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'last_updated': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'auto_now_add': 'True', 'blank': 'True'}),
            'problem_identifier': ('django.db.models.fields.CharField', [], {'max_length': '255', 'blank': 'True'}),
            'problem_type': ('django.db.models.fields.TextField', [], {'blank': 'True'}),
            'problemset_to_exercise': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['c2g.ProblemSetToExercise']", 'null': 'True'}),
            'review_mode': ('django.db.models.fields.IntegerField', [], {'null': 'True', 'blank': 'True'}),
            'seed': ('django.db.models.fields.TextField', [], {'blank': 'True'}),
            'sha1': ('django.db.models.fields.TextField', [], {'blank': 'True'}),
            'student': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['auth.User']"}),
            'time_created': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'time_taken': ('django.db.models.fields.IntegerField', [], {'null': 'True', 'blank': 'True'}),
            'topic_mode': ('django.db.models.fields.IntegerField', [], {'null': 'True', 'blank': 'True'}),
            'user_choices': ('django.db.models.fields.CharField', [], {'max_length': '1024', 'null': 'True', 'blank': 'True'}),
            'user_selection_val': ('django.db.models.fields.CharField', [], {'max_length': '1024', 'null': 'True', 'blank': 'True'}),
            'video_to_exercise': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['c2g.VideoToExercise']", 'null': 'True'})
        },
        'c2g.problemset': {
            'Meta': {'object_name': 'ProblemSet', 'db_table': "u'c2g_problem_sets'"},
            'assessment_type': ('django.db.models.fields.CharField', [], {'max_length': '255'}),
            'course': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['c2g.Course']"}),
            'description': ('django.db.models.fields.TextField', [], {'blank': 'True'}),
            'due_date': ('django.db.models.fields.DateTimeField', [], {'null': 'True'}),
            'grace_period': ('django.db.models.fields.DateTimeField', [], {}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'image': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'to': "orm['c2g.ProblemSet']"}),
            'index': ('django.db.models.fields.IntegerField', [], {'null': 'True', 'blank': 'True'}),
            'is_deleted': ('django.db.models.fields.IntegerField', [], {'default': '0'}),
            'last_updated': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'auto_now_add': 'True', 'blank': 'True'}),
            'late_penalty': ('django.db.models.fields.IntegerField', [], {}),
            'live_datetime': ('django.db.models.fields.DateTimeField', [], {'null': 'True', 'blank': 'True'}),
            'mode': ('django.db.models.fields.TextField', [], {'blank': 'True'}),
            'partial_credit_deadline': ('django.db.models.fields.DateTimeField', [], {}),
            'path': ('django.db.models.fields.CharField', [], {'max_length': '255'}),
            'randomize': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'resubmission_penalty': ('django.db.models.fields.IntegerField', [], {}),
            'section': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['c2g.ContentSection']"}),
            'slug': ('django.db.models.fields.SlugField', [], {'max_length': '50'}),
            'submissions_permitted': ('django.db.models.fields.IntegerField', [], {}),
            'time_created': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'title': ('django.db.models.fields.CharField', [], {'max_length': '255'})
        },
        'c2g.problemsettoexercise': {
            'Meta': {'object_name': 'ProblemSetToExercise', 'db_table': "u'c2g_problemset_to_exercise'"},
            'exercise': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['c2g.Exercise']"}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'image': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['c2g.ProblemSetToExercise']", 'null': 'True', 'blank': 'True'}),
            'is_deleted': ('django.db.models.fields.IntegerField', [], {'default': '0'}),
            'mode': ('django.db.models.fields.TextField', [], {'blank': 'True'}),
            'number': ('django.db.models.fields.IntegerField', [], {'null': 'True', 'blank': 'True'}),
            'problemSet': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['c2g.ProblemSet']"})
        },
        'c2g.studentexamstart': {
            'Meta': {'object_name': 'StudentExamStart'},
            'exam': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['c2g.Exam']"}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'last_updated': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'auto_now_add': 'True', 'blank': 'True'}),
            'student': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['auth.User']"}),
            'time_created': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'})
        },
        'c2g.studentinvitation': {
            'Meta': {'object_name': 'StudentInvitation'},
            'course': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['c2g.Course']"}),
            'email': ('django.db.models.fields.CharField', [], {'max_length': '128', 'db_index': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'last_updated': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'auto_now_add': 'True', 'blank': 'True'}),
            'time_created': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'})
        },
        'c2g.studentsection': {
            'Meta': {'object_name': 'StudentSection', 'db_table': "u'c2g_sections'"},
            'capacity': ('django.db.models.fields.IntegerField', [], {'default': '999'}),
            'course': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['c2g.Course']"}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'is_deleted': ('django.db.models.fields.IntegerField', [], {'default': '0'}),
            'last_updated': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'auto_now_add': 'True', 'blank': 'True'}),
            'members': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['auth.User']", 'symmetrical': 'False'}),
            'time_created': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'title': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True', 'blank': 'True'})
        },
        'c2g.userprofile': {
            'Meta': {'object_name': 'UserProfile', 'db_table': "u'c2g_user_profiles'"},
            'accept_language': ('django.db.models.fields.CharField', [], {'max_length': '64', 'null': 'True'}),
            'accept_language_first': ('django.db.models.fields.CharField', [], {'max_length': '64', 'null': 'True'}),
            'birth_year': ('django.db.models.fields.CharField', [], {'max_length': '64', 'null': 'True'}),
            'certificates': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['c2g.CourseCertificate']", 'symmetrical': 'False'}),
            'client_ip': ('django.db.models.fields.CharField', [], {'max_length': '30', 'null': 'True'}),
            'client_ip_first': ('django.db.models.fields.CharField', [], {'max_length': '30', 'null': 'True'}),
            'education': ('django.db.models.fields.CharField', [], {'max_length': '64', 'null': 'True'}),
            'email_me': ('django.db.models.fields.BooleanField', [], {'default': 'True'}),
            'gender': ('django.db.models.fields.CharField', [], {'max_length': '64', 'null': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'institutions': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['c2g.Institution']", 'symmetrical': 'False'}),
            'last_updated': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'auto_now_add': 'True', 'blank': 'True'}),
            'piazza_email': ('django.db.models.fields.CharField', [], {'max_length': '128', 'blank': 'True'}),
            'piazza_name': ('django.db.models.fields.CharField', [], {'max_length': '128', 'blank': 'True'}),
            'referrer': ('django.db.models.fields.CharField', [], {'max_length': '256', 'null': 'True'}),
            'referrer_first': ('django.db.models.fields.CharField', [], {'max_length': '256', 'null': 'True'}),
            'site_data': ('django.db.models.fields.TextField', [], {'blank': 'True'}),
            'time_created': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'user': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['auth.User']", 'unique': 'True'}),
            'user_agent': ('django.db.models.fields.CharField', [], {'max_length': '256', 'null': 'True'}),
            'user_agent_first': ('django.db.models.fields.CharField', [], {'max_length': '256', 'null': 'True'}),
            'work': ('django.db.models.fields.CharField', [], {'max_length': '128', 'null': 'True'})
        },
        'c2g.video': {
            'Meta': {'object_name': 'Video', 'db_table': "u'c2g_videos'"},
            'course': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['c2g.Course']"}),
            'description': ('django.db.models.fields.TextField', [], {'blank': 'True'}),
            'duration': ('django.db.models.fields.IntegerField', [], {'null': 'True', 'blank': 'True'}),
            'exam': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['c2g.Exam']", 'null': 'True', 'blank': 'True'}),
            'file': ('django.db.models.fields.files.FileField', [], {'max_length': '100'}),
            'handle': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True', 'db_index': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'image': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'to': "orm['c2g.Video']"}),
            'index': ('django.db.models.fields.IntegerField', [], {'null': 'True', 'blank': 'True'}),
            'is_deleted': ('django.db.models.fields.IntegerField', [], {'default': '0'}),
            'last_updated': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'auto_now_add': 'True', 'blank': 'True'}),
            'live_datetime': ('django.db.models.fields.DateTimeField', [], {'null': 'True', 'blank': 'True'}),
            'mode': ('django.db.models.fields.TextField', [], {'blank': 'True'}),
            'section': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['c2g.ContentSection']", 'null': 'True'}),
            'slug': ('django.db.models.fields.SlugField', [], {'max_length': '255', 'null': 'True'}),
            'time_created': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'title': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True', 'blank': 'True'}),
            'type': ('django.db.models.fields.CharField', [], {'default': "'youtube'", 'max_length': '30'}),
            'url': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True', 'blank': 'True'})
        },
        'c2g.videoactivity': {
            'Meta': {'object_name': 'VideoActivity', 'db_table': "u'c2g_video_activity'"},
            'course': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['c2g.Course']"}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'max_end_seconds': ('django.db.models.fields.IntegerField', [], {'default': '0', 'blank': 'True'}),
            'start_seconds': ('django.db.models.fields.IntegerField', [], {'default': '0', 'blank': 'True'}),
            'student': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['auth.User']"}),
            'video': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['c2g.Video']"})
        },
        'c2g.videodownload': {
            'Meta': {'object_name': 'VideoDownload', 'db_table': "u'c2g_video_download'"},
            'course': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['c2g.Course']"}),
            'download_date': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'format': ('django.db.models.fields.CharField', [], {'max_length': '35', 'null': 'True', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'student': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['auth.User']"}),
            'video': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['c2g.Video']"})
        },
        'c2g.videotoexercise': {
            'Meta': {'object_name': 'VideoToExercise', 'db_table': "u'c2g_video_to_exercise'"},
            'exercise': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['c2g.Exercise']"}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'image': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['c2g.VideoToExercise']", 'null': 'True', 'blank': 'True'}),
            'is_deleted': ('django.db.models.fields.IntegerField', [], {'default': '0'}),
            'mode': ('django.db.models.fields.TextField', [], {'blank': 'True'}),
            'video': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['c2g.Video']"}),
            'video_time': ('django.db.models.fields.IntegerField', [], {})
        },
        'c2g.videoviewtraces': {
            'Meta': {'object_name': 'VideoViewTraces', 'db_table': "u'c2g_video_view_traces'"},
            'course': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['c2g.Course']"}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'last_updated': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'auto_now_add': 'True', 'blank': 'True'}),
            'time_created': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'trace': ('django.db.models.fields.TextField', [], {'blank': 'True'}),
            'user': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['auth.User']"}),
            'video': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['c2g.Video']"})
        },
        'contenttypes.contenttype': {
            'Meta': {'ordering': "('name',)", 'unique_together': "(('app_label', 'model'),)", 'object_name': 'ContentType', 'db_table': "'django_content_type'"},
            'app_label': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'model': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '100'})
        }
    }

    complete_apps = ['c2g']
########NEW FILE########
__FILENAME__ = 0009_populate_examscore_to_examrecordscore
# -*- coding: utf-8 -*-
import datetime
from south.db import db
from south.v2 import SchemaMigration
from django.db import models


class Migration(SchemaMigration):

    def forwards(self, orm):
        """
        This is a one-time migration to populate the new relation.  It is a bit
        complicated since we don't know exactly which examrecordscore row we
        should point to (which is why this relation is valuable) hence the 
        temporary table and selection logic.

        We special case the celery since we use SQL that's not supported on SQLite.  
        That's safe too do here since we only want reasonable schemas in our 
        celery database, not content like exam scores.
        """
        if db.db_alias == "celery":
            return

        if not db.dry_run:
            
            #This migration back populates the c2g_examscore.examrecordscore_id foreign key.
            #Initially I did this in Django code but the performance was poor so this is much faster but
            #more in the realms of SQL.
            
            #This command creates a temp table to be used later
            print "This migration back populates the new c2g_examscore.examrecordscore_id relation; it may take a few minutes."
            print "Creating temp table examscore_pop_new_relation"
            db.execute('CREATE TABLE `examscore_pop_new_relation` \
                      (`student_id` int(11) NOT NULL, \
                       `exam_id` int(11) NOT NULL, \
                       `es_score` double default NULL, \
                       `er_score` double default NULL, \
                       `er_id` int(11) default NULL, \
                       `es_id` int(11) NOT NULL default \'0\', \
                       `ers_id` int(11) default NULL, \
                       UNIQUE KEY `es_ers_id` (`es_id`) ) ENGINE=MyISAM')
        
        
            #Need to chuck up the inserts into the temp table and do in a transaction as otherwise I run into
            #exceeding available table locks error.
            print "Populating the temp table"
            start = 0
            while start < 200000:
                start_val = str(start)
                end_val = str(start + 500)
         
                db.start_transaction()
                db.execute("insert into examscore_pop_new_relation \
                          (select er.student_id, \
                           er.exam_id, \
                           es.score \"es_score\", \
                           er.score \"er.score\", \
                           max(er.id) \"er_id\", \
                           es.id \"es_id\", \
                           max(ers.id) \"ers_id\" \
                           from c2g_examrecord er, c2g_examscore es, c2g_examrecordscore ers \
                           where er.student_id = es.student_id \
                           and er.exam_id = es.exam_id \
                           and er.score = es.score \
                           and er.complete = 1 \
                           and ers.record_id = er.id \
                           and er.student_id > " + start_val + "\
                           and er.student_id <= " + end_val + "\
                           group by er.student_id, er.exam_id)")
            
                start += 500
                db.commit_transaction()
            
            print "Updating c2g_examscore records"
            db.execute('update c2g_examscore es, examscore_pop_new_relation espnr \
                        set es.examrecordscore_id = espnr.ers_id \
                        where es.id = espnr.es_id')
            
            print "Deleting the temp table"
            db.execute('drop table examscore_pop_new_relation')
            
            print "All done."

    def backwards(self, orm):
        pass

    models = {
        'auth.group': {
            'Meta': {'object_name': 'Group'},
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '80'}),
            'permissions': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['auth.Permission']", 'symmetrical': 'False', 'blank': 'True'})
        },
        'auth.permission': {
            'Meta': {'ordering': "('content_type__app_label', 'content_type__model', 'codename')", 'unique_together': "(('content_type', 'codename'),)", 'object_name': 'Permission'},
            'codename': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'content_type': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['contenttypes.ContentType']"}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '50'})
        },
        'auth.user': {
            'Meta': {'object_name': 'User'},
            'date_joined': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
            'email': ('django.db.models.fields.EmailField', [], {'max_length': '75', 'blank': 'True'}),
            'first_name': ('django.db.models.fields.CharField', [], {'max_length': '30', 'blank': 'True'}),
            'groups': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['auth.Group']", 'symmetrical': 'False', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'is_active': ('django.db.models.fields.BooleanField', [], {'default': 'True'}),
            'is_staff': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'is_superuser': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'last_login': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
            'last_name': ('django.db.models.fields.CharField', [], {'max_length': '30', 'blank': 'True'}),
            'password': ('django.db.models.fields.CharField', [], {'max_length': '128'}),
            'user_permissions': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['auth.Permission']", 'symmetrical': 'False', 'blank': 'True'}),
            'username': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '30'})
        },
        'c2g.additionalpage': {
            'Meta': {'object_name': 'AdditionalPage', 'db_table': "u'c2g_additional_pages'"},
            'course': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['c2g.Course']"}),
            'description': ('django.db.models.fields.TextField', [], {'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'image': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'to': "orm['c2g.AdditionalPage']"}),
            'index': ('django.db.models.fields.IntegerField', [], {'null': 'True', 'blank': 'True'}),
            'is_deleted': ('django.db.models.fields.IntegerField', [], {'default': '0'}),
            'last_updated': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'auto_now_add': 'True', 'blank': 'True'}),
            'live_datetime': ('django.db.models.fields.DateTimeField', [], {'null': 'True', 'blank': 'True'}),
            'menu_slug': ('django.db.models.fields.SlugField', [], {'max_length': '255', 'null': 'True', 'blank': 'True'}),
            'mode': ('django.db.models.fields.TextField', [], {'blank': 'True'}),
            'section': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['c2g.ContentSection']", 'null': 'True'}),
            'slug': ('django.db.models.fields.SlugField', [], {'max_length': '255', 'null': 'True', 'blank': 'True'}),
            'time_created': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'title': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True', 'blank': 'True'})
        },
        'c2g.announcement': {
            'Meta': {'object_name': 'Announcement', 'db_table': "u'c2g_announcements'"},
            'course': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['c2g.Course']"}),
            'description': ('django.db.models.fields.TextField', [], {'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'image': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'to': "orm['c2g.Announcement']"}),
            'index': ('django.db.models.fields.IntegerField', [], {'null': 'True', 'blank': 'True'}),
            'is_deleted': ('django.db.models.fields.IntegerField', [], {'default': '0'}),
            'last_updated': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'auto_now_add': 'True', 'blank': 'True'}),
            'live_datetime': ('django.db.models.fields.DateTimeField', [], {'null': 'True', 'blank': 'True'}),
            'mode': ('django.db.models.fields.TextField', [], {'blank': 'True'}),
            'owner': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['auth.User']"}),
            'time_created': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'title': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True', 'blank': 'True'})
        },
        'c2g.contentgroup': {
            'Meta': {'object_name': 'ContentGroup', 'db_table': "u'c2g_content_group'"},
            'additional_page': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['c2g.AdditionalPage']", 'null': 'True', 'blank': 'True'}),
            'course': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['c2g.Course']"}),
            'display_style': ('django.db.models.fields.CharField', [], {'default': "'list'", 'max_length': '32', 'blank': 'True'}),
            'exam': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['c2g.Exam']", 'null': 'True', 'blank': 'True'}),
            'file': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['c2g.File']", 'null': 'True', 'blank': 'True'}),
            'group_id': ('django.db.models.fields.IntegerField', [], {'db_index': 'True', 'null': 'True', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'level': ('django.db.models.fields.IntegerField', [], {'db_index': 'True'}),
            'problemSet': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['c2g.ProblemSet']", 'null': 'True', 'blank': 'True'}),
            'video': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['c2g.Video']", 'null': 'True', 'blank': 'True'})
        },
        'c2g.contentsection': {
            'Meta': {'object_name': 'ContentSection', 'db_table': "u'c2g_content_sections'"},
            'course': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['c2g.Course']"}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'image': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'to': "orm['c2g.ContentSection']"}),
            'index': ('django.db.models.fields.IntegerField', [], {'null': 'True', 'blank': 'True'}),
            'is_deleted': ('django.db.models.fields.IntegerField', [], {'default': '0'}),
            'last_updated': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'auto_now_add': 'True', 'blank': 'True'}),
            'live_datetime': ('django.db.models.fields.DateTimeField', [], {'null': 'True', 'blank': 'True'}),
            'mode': ('django.db.models.fields.TextField', [], {'blank': 'True'}),
            'slug': ('django.db.models.fields.SlugField', [], {'max_length': '255', 'null': 'True', 'blank': 'True'}),
            'subtitle': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True', 'blank': 'True'}),
            'time_created': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'title': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True', 'blank': 'True'})
        },
        'c2g.course': {
            'Meta': {'object_name': 'Course', 'db_table': "u'c2g_courses'"},
            'accompanying_materials': ('django.db.models.fields.TextField', [], {'blank': 'True'}),
            'calendar_end': ('django.db.models.fields.DateField', [], {'null': 'True', 'blank': 'True'}),
            'calendar_start': ('django.db.models.fields.DateField', [], {'null': 'True', 'blank': 'True'}),
            'contact': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True', 'blank': 'True'}),
            'description': ('django.db.models.fields.TextField', [], {'blank': 'True'}),
            'faq': ('django.db.models.fields.TextField', [], {'blank': 'True'}),
            'handle': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True', 'db_index': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'image': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'to': "orm['c2g.Course']"}),
            'institution': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['c2g.Institution']", 'null': 'True'}),
            'institution_only': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'instructor_group': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'instructor_group'", 'to': "orm['auth.Group']"}),
            'is_deleted': ('django.db.models.fields.IntegerField', [], {'default': '0'}),
            'last_updated': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'auto_now_add': 'True', 'blank': 'True'}),
            'list_publicly': ('django.db.models.fields.IntegerField', [], {'null': 'True', 'blank': 'True'}),
            'live_datetime': ('django.db.models.fields.DateTimeField', [], {'null': 'True', 'blank': 'True'}),
            'logo': ('django.db.models.fields.files.FileField', [], {'max_length': '100', 'null': 'True'}),
            'mode': ('django.db.models.fields.TextField', [], {'blank': 'True'}),
            'outcomes': ('django.db.models.fields.TextField', [], {'blank': 'True'}),
            'piazza_id': ('django.db.models.fields.IntegerField', [], {'null': 'True', 'blank': 'True'}),
            'preenroll_only': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'prerequisites': ('django.db.models.fields.TextField', [], {'blank': 'True'}),
            'preview_only_mode': ('django.db.models.fields.BooleanField', [], {'default': 'True'}),
            'readonly_tas_group': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'readonly_tas_group'", 'to': "orm['auth.Group']"}),
            'share_to': ('django.db.models.fields.related.ManyToManyField', [], {'blank': 'True', 'related_name': "'share_from'", 'null': 'True', 'symmetrical': 'False', 'to': "orm['c2g.Course']"}),
            'short_description': ('django.db.models.fields.TextField', [], {'blank': 'True'}),
            'student_group': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'student_group'", 'to': "orm['auth.Group']"}),
            'syllabus': ('django.db.models.fields.TextField', [], {'blank': 'True'}),
            'tas_group': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'tas_group'", 'to': "orm['auth.Group']"}),
            'term': ('django.db.models.fields.TextField', [], {'blank': 'True'}),
            'time_created': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'title': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True', 'blank': 'True'}),
            'twitter_tag': ('django.db.models.fields.CharField', [], {'max_length': '64', 'null': 'True', 'blank': 'True'}),
            'year': ('django.db.models.fields.IntegerField', [], {'null': 'True', 'blank': 'True'})
        },
        'c2g.coursecertificate': {
            'Meta': {'object_name': 'CourseCertificate'},
            'assets': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'course': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['c2g.Course']"}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'last_updated': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'auto_now_add': 'True', 'blank': 'True'}),
            'storage': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'time_created': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'type': ('django.db.models.fields.CharField', [], {'default': "'completion'", 'max_length': '64'})
        },
        'c2g.courseemail': {
            'Meta': {'object_name': 'CourseEmail', 'db_table': "u'c2g_course_emails'"},
            'course': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['c2g.Course']"}),
            'hash': ('django.db.models.fields.CharField', [], {'max_length': '128', 'db_index': 'True'}),
            'html_message': ('django.db.models.fields.TextField', [], {'null': 'True', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'last_updated': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'auto_now_add': 'True', 'blank': 'True'}),
            'sender': ('django.db.models.fields.related.ForeignKey', [], {'default': '1', 'to': "orm['auth.User']", 'null': 'True', 'blank': 'True'}),
            'subject': ('django.db.models.fields.CharField', [], {'max_length': '128', 'blank': 'True'}),
            'time_created': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'to': ('django.db.models.fields.CharField', [], {'default': "'myself'", 'max_length': '64'})
        },
        'c2g.courseinstructor': {
            'Meta': {'object_name': 'CourseInstructor', 'db_table': "u'c2g_course_instructor'"},
            'course': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['c2g.Course']"}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'instructor': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['c2g.Instructor']"}),
            'last_updated': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'auto_now_add': 'True', 'blank': 'True'}),
            'time_created': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'})
        },
        'c2g.coursestudentlist': {
            'Meta': {'object_name': 'CourseStudentList'},
            'course': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['c2g.Course']"}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'last_updated': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'auto_now_add': 'True', 'blank': 'True'}),
            'max_completion_level': ('django.db.models.fields.IntegerField', [], {'default': '0'}),
            'members': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['auth.User']", 'symmetrical': 'False'}),
            'time_created': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'})
        },
        'c2g.currenttermmap': {
            'Meta': {'object_name': 'CurrentTermMap'},
            'course_prefix': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '64', 'db_index': 'True'}),
            'course_suffix': ('django.db.models.fields.CharField', [], {'max_length': '64'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'last_updated': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'auto_now_add': 'True', 'blank': 'True'}),
            'time_created': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'})
        },
        'c2g.emailaddr': {
            'Meta': {'object_name': 'EmailAddr'},
            'addr': ('django.db.models.fields.EmailField', [], {'max_length': '128'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '128', 'null': 'True', 'blank': 'True'}),
            'optout': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'optout_code': ('django.db.models.fields.CharField', [], {'default': "'optout'", 'max_length': '64'})
        },
        'c2g.exam': {
            'Meta': {'object_name': 'Exam'},
            'assessment_type': ('django.db.models.fields.CharField', [], {'max_length': '64', 'null': 'True', 'blank': 'True'}),
            'autograde': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'course': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['c2g.Course']"}),
            'description': ('django.db.models.fields.TextField', [], {'null': 'True', 'blank': 'True'}),
            'display_single': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'due_date': ('django.db.models.fields.DateTimeField', [], {'null': 'True', 'blank': 'True'}),
            'exam_type': ('django.db.models.fields.CharField', [], {'default': "'exam'", 'max_length': '32'}),
            'grace_period': ('django.db.models.fields.DateTimeField', [], {'null': 'True', 'blank': 'True'}),
            'grade_single': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'html_content': ('django.db.models.fields.TextField', [], {'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'image': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'to': "orm['c2g.Exam']"}),
            'index': ('django.db.models.fields.IntegerField', [], {'null': 'True', 'blank': 'True'}),
            'invideo': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'is_deleted': ('django.db.models.fields.IntegerField', [], {'default': '0'}),
            'last_updated': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'auto_now_add': 'True', 'blank': 'True'}),
            'late_penalty': ('django.db.models.fields.IntegerField', [], {'default': '0', 'null': 'True', 'blank': 'True'}),
            'live_datetime': ('django.db.models.fields.DateTimeField', [], {'null': 'True', 'blank': 'True'}),
            'minutes_btw_attempts': ('django.db.models.fields.IntegerField', [], {'default': '0'}),
            'minutesallowed': ('django.db.models.fields.IntegerField', [], {'null': 'True', 'blank': 'True'}),
            'mode': ('django.db.models.fields.TextField', [], {'blank': 'True'}),
            'partial_credit_deadline': ('django.db.models.fields.DateTimeField', [], {'null': 'True', 'blank': 'True'}),
            'quizdown': ('django.db.models.fields.TextField', [], {'null': 'True', 'blank': 'True'}),
            'resubmission_penalty': ('django.db.models.fields.IntegerField', [], {'default': '0', 'null': 'True', 'blank': 'True'}),
            'section': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['c2g.ContentSection']", 'null': 'True'}),
            'slug': ('django.db.models.fields.SlugField', [], {'max_length': '255', 'null': 'True'}),
            'submissions_permitted': ('django.db.models.fields.IntegerField', [], {'default': '999', 'null': 'True', 'blank': 'True'}),
            'time_created': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'timed': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'title': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True', 'blank': 'True'}),
            'total_score': ('django.db.models.fields.FloatField', [], {'null': 'True', 'blank': 'True'}),
            'xml_imported': ('django.db.models.fields.TextField', [], {'null': 'True', 'blank': 'True'}),
            'xml_metadata': ('django.db.models.fields.TextField', [], {'null': 'True', 'blank': 'True'})
        },
        'c2g.examrecord': {
            'Meta': {'object_name': 'ExamRecord'},
            'attempt_number': ('django.db.models.fields.IntegerField', [], {'default': '0'}),
            'complete': ('django.db.models.fields.BooleanField', [], {'default': 'True'}),
            'course': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['c2g.Course']"}),
            'exam': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['c2g.Exam']"}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'json_data': ('django.db.models.fields.TextField', [], {'null': 'True', 'blank': 'True'}),
            'json_score_data': ('django.db.models.fields.TextField', [], {'null': 'True', 'blank': 'True'}),
            'last_updated': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'auto_now_add': 'True', 'blank': 'True'}),
            'late': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'onpage': ('django.db.models.fields.CharField', [], {'max_length': '512', 'null': 'True', 'blank': 'True'}),
            'score': ('django.db.models.fields.FloatField', [], {'null': 'True', 'blank': 'True'}),
            'student': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['auth.User']"}),
            'time_created': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'})
        },
        'c2g.examrecordfieldlog': {
            'Meta': {'object_name': 'ExamRecordFieldLog'},
            'course': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['c2g.Course']"}),
            'exam': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['c2g.Exam']"}),
            'field_name': ('django.db.models.fields.CharField', [], {'max_length': '128', 'db_index': 'True'}),
            'human_name': ('django.db.models.fields.CharField', [], {'db_index': 'True', 'max_length': '128', 'null': 'True', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'last_updated': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'auto_now_add': 'True', 'blank': 'True'}),
            'max_score': ('django.db.models.fields.FloatField', [], {'default': '0', 'blank': 'True'}),
            'raw_score': ('django.db.models.fields.FloatField', [], {'default': '0', 'blank': 'True'}),
            'student': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['auth.User']"}),
            'time_created': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'value': ('django.db.models.fields.TextField', [], {'null': 'True', 'blank': 'True'})
        },
        'c2g.examrecordscore': {
            'Meta': {'object_name': 'ExamRecordScore'},
            'csv_imported': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'last_updated': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'auto_now_add': 'True', 'blank': 'True'}),
            'raw_score': ('django.db.models.fields.FloatField', [], {'null': 'True', 'blank': 'True'}),
            'record': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['c2g.ExamRecord']", 'unique': 'True'}),
            'time_created': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'})
        },
        'c2g.examrecordscorefield': {
            'Meta': {'object_name': 'ExamRecordScoreField'},
            'associated_text': ('django.db.models.fields.TextField', [], {'null': 'True', 'blank': 'True'}),
            'comments': ('django.db.models.fields.TextField', [], {'null': 'True', 'blank': 'True'}),
            'correct': ('django.db.models.fields.NullBooleanField', [], {'null': 'True', 'blank': 'True'}),
            'field_name': ('django.db.models.fields.CharField', [], {'max_length': '128', 'db_index': 'True'}),
            'human_name': ('django.db.models.fields.CharField', [], {'db_index': 'True', 'max_length': '128', 'null': 'True', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'last_updated': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'auto_now_add': 'True', 'blank': 'True'}),
            'parent': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['c2g.ExamRecordScore']"}),
            'subscore': ('django.db.models.fields.FloatField', [], {'default': '0'}),
            'time_created': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'value': ('django.db.models.fields.TextField', [], {'null': 'True', 'blank': 'True'})
        },
        'c2g.examrecordscorefieldchoice': {
            'Meta': {'object_name': 'ExamRecordScoreFieldChoice'},
            'associated_text': ('django.db.models.fields.TextField', [], {'null': 'True', 'blank': 'True'}),
            'choice_value': ('django.db.models.fields.CharField', [], {'max_length': '128', 'db_index': 'True'}),
            'correct': ('django.db.models.fields.NullBooleanField', [], {'null': 'True', 'blank': 'True'}),
            'human_name': ('django.db.models.fields.CharField', [], {'db_index': 'True', 'max_length': '128', 'null': 'True', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'last_updated': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'auto_now_add': 'True', 'blank': 'True'}),
            'parent': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['c2g.ExamRecordScoreField']"}),
            'time_created': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'})
        },
        'c2g.examscore': {
            'Meta': {'unique_together': "(('exam', 'student'),)", 'object_name': 'ExamScore'},
            'course': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['c2g.Course']"}),
            'csv_imported': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'exam': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['c2g.Exam']"}),
            'examrecordscore': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['c2g.ExamRecordScore']", 'null': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'last_updated': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'auto_now_add': 'True', 'blank': 'True'}),
            'score': ('django.db.models.fields.FloatField', [], {'null': 'True', 'blank': 'True'}),
            'student': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['auth.User']"}),
            'time_created': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'})
        },
        'c2g.examscorefield': {
            'Meta': {'object_name': 'ExamScoreField'},
            'associated_text': ('django.db.models.fields.TextField', [], {'null': 'True', 'blank': 'True'}),
            'comments': ('django.db.models.fields.TextField', [], {'null': 'True', 'blank': 'True'}),
            'correct': ('django.db.models.fields.NullBooleanField', [], {'null': 'True', 'blank': 'True'}),
            'field_name': ('django.db.models.fields.CharField', [], {'max_length': '128', 'db_index': 'True'}),
            'human_name': ('django.db.models.fields.CharField', [], {'db_index': 'True', 'max_length': '128', 'null': 'True', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'last_updated': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'auto_now_add': 'True', 'blank': 'True'}),
            'parent': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['c2g.ExamScore']"}),
            'subscore': ('django.db.models.fields.FloatField', [], {'default': '0'}),
            'time_created': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'value': ('django.db.models.fields.CharField', [], {'max_length': '128', 'null': 'True', 'blank': 'True'})
        },
        'c2g.exercise': {
            'Meta': {'object_name': 'Exercise', 'db_table': "u'c2g_exercises'"},
            'file': ('django.db.models.fields.files.FileField', [], {'max_length': '100', 'null': 'True'}),
            'fileName': ('django.db.models.fields.CharField', [], {'max_length': '255'}),
            'handle': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True', 'db_index': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'is_deleted': ('django.db.models.fields.IntegerField', [], {'default': '0'}),
            'last_updated': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'auto_now_add': 'True', 'blank': 'True'}),
            'problemSet': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['c2g.ProblemSet']", 'through': "orm['c2g.ProblemSetToExercise']", 'symmetrical': 'False'}),
            'time_created': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'video': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['c2g.Video']", 'through': "orm['c2g.VideoToExercise']", 'symmetrical': 'False'})
        },
        'c2g.file': {
            'Meta': {'object_name': 'File', 'db_table': "u'c2g_files'"},
            'course': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['c2g.Course']"}),
            'file': ('django.db.models.fields.files.FileField', [], {'max_length': '100'}),
            'handle': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True', 'db_index': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'image': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'to': "orm['c2g.File']"}),
            'index': ('django.db.models.fields.IntegerField', [], {'null': 'True', 'blank': 'True'}),
            'is_deleted': ('django.db.models.fields.IntegerField', [], {'default': '0'}),
            'last_updated': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'auto_now_add': 'True', 'blank': 'True'}),
            'live_datetime': ('django.db.models.fields.DateTimeField', [], {'null': 'True', 'blank': 'True'}),
            'mode': ('django.db.models.fields.TextField', [], {'blank': 'True'}),
            'section': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['c2g.ContentSection']", 'null': 'True'}),
            'time_created': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'title': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True', 'blank': 'True'})
        },
        'c2g.institution': {
            'Meta': {'object_name': 'Institution', 'db_table': "u'c2g_institutions'"},
            'city': ('django.db.models.fields.TextField', [], {'blank': 'True'}),
            'country': ('django.db.models.fields.TextField', [], {'blank': 'True'}),
            'domains': ('django.db.models.fields.TextField', [], {'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'last_updated': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'auto_now_add': 'True', 'blank': 'True'}),
            'time_created': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'title': ('django.db.models.fields.TextField', [], {})
        },
        'c2g.instructor': {
            'Meta': {'object_name': 'Instructor'},
            'biography': ('django.db.models.fields.TextField', [], {'blank': 'True'}),
            'email': ('django.db.models.fields.TextField', [], {'blank': 'True'}),
            'handle': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True', 'db_index': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'last_updated': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'auto_now_add': 'True', 'blank': 'True'}),
            'name': ('django.db.models.fields.TextField', [], {'blank': 'True'}),
            'photo': ('django.db.models.fields.files.FileField', [], {'max_length': '100', 'blank': 'True'}),
            'time_created': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'})
        },
        'c2g.listemail': {
            'Meta': {'object_name': 'ListEmail'},
            'from_addr': ('django.db.models.fields.CharField', [], {'max_length': '128', 'blank': 'True'}),
            'from_name': ('django.db.models.fields.CharField', [], {'max_length': '128', 'blank': 'True'}),
            'hash': ('django.db.models.fields.CharField', [], {'max_length': '128', 'db_index': 'True'}),
            'html_message': ('django.db.models.fields.TextField', [], {'null': 'True', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'last_updated': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'auto_now_add': 'True', 'blank': 'True'}),
            'sender': ('django.db.models.fields.related.ForeignKey', [], {'default': '1', 'to': "orm['auth.User']", 'null': 'True', 'blank': 'True'}),
            'subject': ('django.db.models.fields.CharField', [], {'max_length': '128', 'blank': 'True'}),
            'time_created': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'to_list': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['c2g.MailingList']"})
        },
        'c2g.mailinglist': {
            'Meta': {'object_name': 'MailingList'},
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'members': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['c2g.EmailAddr']", 'symmetrical': 'False'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '128', 'blank': 'True'})
        },
        'c2g.newsevent': {
            'Meta': {'object_name': 'NewsEvent', 'db_table': "u'c2g_news_events'"},
            'course': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['c2g.Course']"}),
            'event': ('django.db.models.fields.CharField', [], {'max_length': '255'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'time_created': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'})
        },
        'c2g.pagevisitlog': {
            'Meta': {'object_name': 'PageVisitLog', 'db_table': "u'c2g_page_visit_log'"},
            'course': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['c2g.Course']"}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'last_updated': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'auto_now_add': 'True', 'blank': 'True'}),
            'object_id': ('django.db.models.fields.CharField', [], {'max_length': '128', 'blank': 'True'}),
            'page_type': ('django.db.models.fields.CharField', [], {'max_length': '128', 'db_index': 'True'}),
            'time_created': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'user': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['auth.User']"})
        },
        'c2g.problemactivity': {
            'Meta': {'object_name': 'ProblemActivity', 'db_table': "u'c2g_problem_activity'"},
            'attempt_content': ('django.db.models.fields.TextField', [], {'null': 'True', 'blank': 'True'}),
            'attempt_number': ('django.db.models.fields.IntegerField', [], {'null': 'True', 'blank': 'True'}),
            'card': ('django.db.models.fields.TextField', [], {'blank': 'True'}),
            'cards_done': ('django.db.models.fields.IntegerField', [], {'null': 'True', 'blank': 'True'}),
            'cards_left': ('django.db.models.fields.IntegerField', [], {'null': 'True', 'blank': 'True'}),
            'casing': ('django.db.models.fields.TextField', [], {'blank': 'True'}),
            'complete': ('django.db.models.fields.IntegerField', [], {'null': 'True', 'blank': 'True'}),
            'count_hints': ('django.db.models.fields.IntegerField', [], {'null': 'True', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'last_updated': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'auto_now_add': 'True', 'blank': 'True'}),
            'problem_identifier': ('django.db.models.fields.CharField', [], {'max_length': '255', 'blank': 'True'}),
            'problem_type': ('django.db.models.fields.TextField', [], {'blank': 'True'}),
            'problemset_to_exercise': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['c2g.ProblemSetToExercise']", 'null': 'True'}),
            'review_mode': ('django.db.models.fields.IntegerField', [], {'null': 'True', 'blank': 'True'}),
            'seed': ('django.db.models.fields.TextField', [], {'blank': 'True'}),
            'sha1': ('django.db.models.fields.TextField', [], {'blank': 'True'}),
            'student': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['auth.User']"}),
            'time_created': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'time_taken': ('django.db.models.fields.IntegerField', [], {'null': 'True', 'blank': 'True'}),
            'topic_mode': ('django.db.models.fields.IntegerField', [], {'null': 'True', 'blank': 'True'}),
            'user_choices': ('django.db.models.fields.CharField', [], {'max_length': '1024', 'null': 'True', 'blank': 'True'}),
            'user_selection_val': ('django.db.models.fields.CharField', [], {'max_length': '1024', 'null': 'True', 'blank': 'True'}),
            'video_to_exercise': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['c2g.VideoToExercise']", 'null': 'True'})
        },
        'c2g.problemset': {
            'Meta': {'object_name': 'ProblemSet', 'db_table': "u'c2g_problem_sets'"},
            'assessment_type': ('django.db.models.fields.CharField', [], {'max_length': '255'}),
            'course': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['c2g.Course']"}),
            'description': ('django.db.models.fields.TextField', [], {'blank': 'True'}),
            'due_date': ('django.db.models.fields.DateTimeField', [], {'null': 'True'}),
            'grace_period': ('django.db.models.fields.DateTimeField', [], {}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'image': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'to': "orm['c2g.ProblemSet']"}),
            'index': ('django.db.models.fields.IntegerField', [], {'null': 'True', 'blank': 'True'}),
            'is_deleted': ('django.db.models.fields.IntegerField', [], {'default': '0'}),
            'last_updated': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'auto_now_add': 'True', 'blank': 'True'}),
            'late_penalty': ('django.db.models.fields.IntegerField', [], {}),
            'live_datetime': ('django.db.models.fields.DateTimeField', [], {'null': 'True', 'blank': 'True'}),
            'mode': ('django.db.models.fields.TextField', [], {'blank': 'True'}),
            'partial_credit_deadline': ('django.db.models.fields.DateTimeField', [], {}),
            'path': ('django.db.models.fields.CharField', [], {'max_length': '255'}),
            'randomize': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'resubmission_penalty': ('django.db.models.fields.IntegerField', [], {}),
            'section': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['c2g.ContentSection']"}),
            'slug': ('django.db.models.fields.SlugField', [], {'max_length': '50'}),
            'submissions_permitted': ('django.db.models.fields.IntegerField', [], {}),
            'time_created': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'title': ('django.db.models.fields.CharField', [], {'max_length': '255'})
        },
        'c2g.problemsettoexercise': {
            'Meta': {'object_name': 'ProblemSetToExercise', 'db_table': "u'c2g_problemset_to_exercise'"},
            'exercise': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['c2g.Exercise']"}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'image': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['c2g.ProblemSetToExercise']", 'null': 'True', 'blank': 'True'}),
            'is_deleted': ('django.db.models.fields.IntegerField', [], {'default': '0'}),
            'mode': ('django.db.models.fields.TextField', [], {'blank': 'True'}),
            'number': ('django.db.models.fields.IntegerField', [], {'null': 'True', 'blank': 'True'}),
            'problemSet': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['c2g.ProblemSet']"})
        },
        'c2g.studentexamstart': {
            'Meta': {'object_name': 'StudentExamStart'},
            'exam': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['c2g.Exam']"}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'last_updated': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'auto_now_add': 'True', 'blank': 'True'}),
            'student': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['auth.User']"}),
            'time_created': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'})
        },
        'c2g.studentinvitation': {
            'Meta': {'object_name': 'StudentInvitation'},
            'course': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['c2g.Course']"}),
            'email': ('django.db.models.fields.CharField', [], {'max_length': '128', 'db_index': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'last_updated': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'auto_now_add': 'True', 'blank': 'True'}),
            'time_created': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'})
        },
        'c2g.studentsection': {
            'Meta': {'object_name': 'StudentSection', 'db_table': "u'c2g_sections'"},
            'capacity': ('django.db.models.fields.IntegerField', [], {'default': '999'}),
            'course': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['c2g.Course']"}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'is_deleted': ('django.db.models.fields.IntegerField', [], {'default': '0'}),
            'last_updated': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'auto_now_add': 'True', 'blank': 'True'}),
            'members': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['auth.User']", 'symmetrical': 'False'}),
            'time_created': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'title': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True', 'blank': 'True'})
        },
        'c2g.userprofile': {
            'Meta': {'object_name': 'UserProfile', 'db_table': "u'c2g_user_profiles'"},
            'accept_language': ('django.db.models.fields.CharField', [], {'max_length': '64', 'null': 'True'}),
            'accept_language_first': ('django.db.models.fields.CharField', [], {'max_length': '64', 'null': 'True'}),
            'birth_year': ('django.db.models.fields.CharField', [], {'max_length': '64', 'null': 'True'}),
            'certificates': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['c2g.CourseCertificate']", 'symmetrical': 'False'}),
            'client_ip': ('django.db.models.fields.CharField', [], {'max_length': '30', 'null': 'True'}),
            'client_ip_first': ('django.db.models.fields.CharField', [], {'max_length': '30', 'null': 'True'}),
            'education': ('django.db.models.fields.CharField', [], {'max_length': '64', 'null': 'True'}),
            'email_me': ('django.db.models.fields.BooleanField', [], {'default': 'True'}),
            'gender': ('django.db.models.fields.CharField', [], {'max_length': '64', 'null': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'institutions': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['c2g.Institution']", 'symmetrical': 'False'}),
            'last_updated': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'auto_now_add': 'True', 'blank': 'True'}),
            'piazza_email': ('django.db.models.fields.CharField', [], {'max_length': '128', 'blank': 'True'}),
            'piazza_name': ('django.db.models.fields.CharField', [], {'max_length': '128', 'blank': 'True'}),
            'referrer': ('django.db.models.fields.CharField', [], {'max_length': '256', 'null': 'True'}),
            'referrer_first': ('django.db.models.fields.CharField', [], {'max_length': '256', 'null': 'True'}),
            'site_data': ('django.db.models.fields.TextField', [], {'blank': 'True'}),
            'time_created': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'user': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['auth.User']", 'unique': 'True'}),
            'user_agent': ('django.db.models.fields.CharField', [], {'max_length': '256', 'null': 'True'}),
            'user_agent_first': ('django.db.models.fields.CharField', [], {'max_length': '256', 'null': 'True'}),
            'work': ('django.db.models.fields.CharField', [], {'max_length': '128', 'null': 'True'})
        },
        'c2g.video': {
            'Meta': {'object_name': 'Video', 'db_table': "u'c2g_videos'"},
            'course': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['c2g.Course']"}),
            'description': ('django.db.models.fields.TextField', [], {'blank': 'True'}),
            'duration': ('django.db.models.fields.IntegerField', [], {'null': 'True', 'blank': 'True'}),
            'exam': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['c2g.Exam']", 'null': 'True', 'blank': 'True'}),
            'file': ('django.db.models.fields.files.FileField', [], {'max_length': '100'}),
            'handle': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True', 'db_index': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'image': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'to': "orm['c2g.Video']"}),
            'index': ('django.db.models.fields.IntegerField', [], {'null': 'True', 'blank': 'True'}),
            'is_deleted': ('django.db.models.fields.IntegerField', [], {'default': '0'}),
            'last_updated': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'auto_now_add': 'True', 'blank': 'True'}),
            'live_datetime': ('django.db.models.fields.DateTimeField', [], {'null': 'True', 'blank': 'True'}),
            'mode': ('django.db.models.fields.TextField', [], {'blank': 'True'}),
            'section': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['c2g.ContentSection']", 'null': 'True'}),
            'slug': ('django.db.models.fields.SlugField', [], {'max_length': '255', 'null': 'True'}),
            'time_created': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'title': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True', 'blank': 'True'}),
            'type': ('django.db.models.fields.CharField', [], {'default': "'youtube'", 'max_length': '30'}),
            'url': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True', 'blank': 'True'})
        },
        'c2g.videoactivity': {
            'Meta': {'object_name': 'VideoActivity', 'db_table': "u'c2g_video_activity'"},
            'course': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['c2g.Course']"}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'max_end_seconds': ('django.db.models.fields.IntegerField', [], {'default': '0', 'blank': 'True'}),
            'start_seconds': ('django.db.models.fields.IntegerField', [], {'default': '0', 'blank': 'True'}),
            'student': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['auth.User']"}),
            'video': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['c2g.Video']"})
        },
        'c2g.videodownload': {
            'Meta': {'object_name': 'VideoDownload', 'db_table': "u'c2g_video_download'"},
            'course': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['c2g.Course']"}),
            'download_date': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'format': ('django.db.models.fields.CharField', [], {'max_length': '35', 'null': 'True', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'student': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['auth.User']"}),
            'video': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['c2g.Video']"})
        },
        'c2g.videotoexercise': {
            'Meta': {'object_name': 'VideoToExercise', 'db_table': "u'c2g_video_to_exercise'"},
            'exercise': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['c2g.Exercise']"}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'image': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['c2g.VideoToExercise']", 'null': 'True', 'blank': 'True'}),
            'is_deleted': ('django.db.models.fields.IntegerField', [], {'default': '0'}),
            'mode': ('django.db.models.fields.TextField', [], {'blank': 'True'}),
            'video': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['c2g.Video']"}),
            'video_time': ('django.db.models.fields.IntegerField', [], {})
        },
        'c2g.videoviewtraces': {
            'Meta': {'object_name': 'VideoViewTraces', 'db_table': "u'c2g_video_view_traces'"},
            'course': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['c2g.Course']"}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'last_updated': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'auto_now_add': 'True', 'blank': 'True'}),
            'time_created': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'trace': ('django.db.models.fields.TextField', [], {'blank': 'True'}),
            'user': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['auth.User']"}),
            'video': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['c2g.Video']"})
        },
        'contenttypes.contenttype': {
            'Meta': {'ordering': "('name',)", 'unique_together': "(('app_label', 'model'),)", 'object_name': 'ContentType', 'db_table': "'django_content_type'"},
            'app_label': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'model': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '100'})
        }
    }

    complete_apps = ['c2g']

########NEW FILE########
__FILENAME__ = 0010_auto__add_field_exam_hide_grades
# -*- coding: utf-8 -*-
import datetime
from south.db import db
from south.v2 import SchemaMigration
from django.db import models


class Migration(SchemaMigration):

    def forwards(self, orm):
        # Adding field 'Exam.hide_grades'
        db.add_column('c2g_exam', 'hide_grades',
                      self.gf('django.db.models.fields.BooleanField')(default=False),
                      keep_default=False)


    def backwards(self, orm):
        # Deleting field 'Exam.hide_grades'
        db.delete_column('c2g_exam', 'hide_grades')


    models = {
        'auth.group': {
            'Meta': {'object_name': 'Group'},
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '80'}),
            'permissions': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['auth.Permission']", 'symmetrical': 'False', 'blank': 'True'})
        },
        'auth.permission': {
            'Meta': {'ordering': "('content_type__app_label', 'content_type__model', 'codename')", 'unique_together': "(('content_type', 'codename'),)", 'object_name': 'Permission'},
            'codename': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'content_type': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['contenttypes.ContentType']"}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '50'})
        },
        'auth.user': {
            'Meta': {'object_name': 'User'},
            'date_joined': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
            'email': ('django.db.models.fields.EmailField', [], {'max_length': '75', 'blank': 'True'}),
            'first_name': ('django.db.models.fields.CharField', [], {'max_length': '30', 'blank': 'True'}),
            'groups': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['auth.Group']", 'symmetrical': 'False', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'is_active': ('django.db.models.fields.BooleanField', [], {'default': 'True'}),
            'is_staff': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'is_superuser': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'last_login': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
            'last_name': ('django.db.models.fields.CharField', [], {'max_length': '30', 'blank': 'True'}),
            'password': ('django.db.models.fields.CharField', [], {'max_length': '128'}),
            'user_permissions': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['auth.Permission']", 'symmetrical': 'False', 'blank': 'True'}),
            'username': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '30'})
        },
        'c2g.additionalpage': {
            'Meta': {'object_name': 'AdditionalPage', 'db_table': "u'c2g_additional_pages'"},
            'course': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['c2g.Course']"}),
            'description': ('django.db.models.fields.TextField', [], {'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'image': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'to': "orm['c2g.AdditionalPage']"}),
            'index': ('django.db.models.fields.IntegerField', [], {'null': 'True', 'blank': 'True'}),
            'is_deleted': ('django.db.models.fields.IntegerField', [], {'default': '0'}),
            'last_updated': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'auto_now_add': 'True', 'blank': 'True'}),
            'live_datetime': ('django.db.models.fields.DateTimeField', [], {'null': 'True', 'blank': 'True'}),
            'menu_slug': ('django.db.models.fields.SlugField', [], {'max_length': '255', 'null': 'True', 'blank': 'True'}),
            'mode': ('django.db.models.fields.TextField', [], {'blank': 'True'}),
            'section': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['c2g.ContentSection']", 'null': 'True'}),
            'slug': ('django.db.models.fields.SlugField', [], {'max_length': '255', 'null': 'True', 'blank': 'True'}),
            'time_created': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'title': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True', 'blank': 'True'})
        },
        'c2g.announcement': {
            'Meta': {'object_name': 'Announcement', 'db_table': "u'c2g_announcements'"},
            'course': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['c2g.Course']"}),
            'description': ('django.db.models.fields.TextField', [], {'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'image': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'to': "orm['c2g.Announcement']"}),
            'index': ('django.db.models.fields.IntegerField', [], {'null': 'True', 'blank': 'True'}),
            'is_deleted': ('django.db.models.fields.IntegerField', [], {'default': '0'}),
            'last_updated': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'auto_now_add': 'True', 'blank': 'True'}),
            'live_datetime': ('django.db.models.fields.DateTimeField', [], {'null': 'True', 'blank': 'True'}),
            'mode': ('django.db.models.fields.TextField', [], {'blank': 'True'}),
            'owner': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['auth.User']"}),
            'time_created': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'title': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True', 'blank': 'True'})
        },
        'c2g.contentgroup': {
            'Meta': {'object_name': 'ContentGroup', 'db_table': "u'c2g_content_group'"},
            'additional_page': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['c2g.AdditionalPage']", 'null': 'True', 'blank': 'True'}),
            'course': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['c2g.Course']"}),
            'display_style': ('django.db.models.fields.CharField', [], {'default': "'list'", 'max_length': '32', 'blank': 'True'}),
            'exam': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['c2g.Exam']", 'null': 'True', 'blank': 'True'}),
            'file': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['c2g.File']", 'null': 'True', 'blank': 'True'}),
            'group_id': ('django.db.models.fields.IntegerField', [], {'db_index': 'True', 'null': 'True', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'level': ('django.db.models.fields.IntegerField', [], {'db_index': 'True'}),
            'problemSet': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['c2g.ProblemSet']", 'null': 'True', 'blank': 'True'}),
            'video': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['c2g.Video']", 'null': 'True', 'blank': 'True'})
        },
        'c2g.contentsection': {
            'Meta': {'object_name': 'ContentSection', 'db_table': "u'c2g_content_sections'"},
            'course': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['c2g.Course']"}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'image': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'to': "orm['c2g.ContentSection']"}),
            'index': ('django.db.models.fields.IntegerField', [], {'null': 'True', 'blank': 'True'}),
            'is_deleted': ('django.db.models.fields.IntegerField', [], {'default': '0'}),
            'last_updated': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'auto_now_add': 'True', 'blank': 'True'}),
            'live_datetime': ('django.db.models.fields.DateTimeField', [], {'null': 'True', 'blank': 'True'}),
            'mode': ('django.db.models.fields.TextField', [], {'blank': 'True'}),
            'slug': ('django.db.models.fields.SlugField', [], {'max_length': '255', 'null': 'True', 'blank': 'True'}),
            'subtitle': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True', 'blank': 'True'}),
            'time_created': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'title': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True', 'blank': 'True'})
        },
        'c2g.course': {
            'Meta': {'object_name': 'Course', 'db_table': "u'c2g_courses'"},
            'accompanying_materials': ('django.db.models.fields.TextField', [], {'blank': 'True'}),
            'calendar_end': ('django.db.models.fields.DateField', [], {'null': 'True', 'blank': 'True'}),
            'calendar_start': ('django.db.models.fields.DateField', [], {'null': 'True', 'blank': 'True'}),
            'contact': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True', 'blank': 'True'}),
            'description': ('django.db.models.fields.TextField', [], {'blank': 'True'}),
            'faq': ('django.db.models.fields.TextField', [], {'blank': 'True'}),
            'handle': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True', 'db_index': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'image': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'to': "orm['c2g.Course']"}),
            'institution': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['c2g.Institution']", 'null': 'True'}),
            'institution_only': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'instructor_group': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'instructor_group'", 'to': "orm['auth.Group']"}),
            'is_deleted': ('django.db.models.fields.IntegerField', [], {'default': '0'}),
            'last_updated': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'auto_now_add': 'True', 'blank': 'True'}),
            'list_publicly': ('django.db.models.fields.IntegerField', [], {'null': 'True', 'blank': 'True'}),
            'live_datetime': ('django.db.models.fields.DateTimeField', [], {'null': 'True', 'blank': 'True'}),
            'logo': ('django.db.models.fields.files.FileField', [], {'max_length': '100', 'null': 'True'}),
            'mode': ('django.db.models.fields.TextField', [], {'blank': 'True'}),
            'outcomes': ('django.db.models.fields.TextField', [], {'blank': 'True'}),
            'piazza_id': ('django.db.models.fields.IntegerField', [], {'null': 'True', 'blank': 'True'}),
            'preenroll_only': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'prerequisites': ('django.db.models.fields.TextField', [], {'blank': 'True'}),
            'preview_only_mode': ('django.db.models.fields.BooleanField', [], {'default': 'True'}),
            'readonly_tas_group': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'readonly_tas_group'", 'to': "orm['auth.Group']"}),
            'share_to': ('django.db.models.fields.related.ManyToManyField', [], {'blank': 'True', 'related_name': "'share_from'", 'null': 'True', 'symmetrical': 'False', 'to': "orm['c2g.Course']"}),
            'short_description': ('django.db.models.fields.TextField', [], {'blank': 'True'}),
            'student_group': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'student_group'", 'to': "orm['auth.Group']"}),
            'syllabus': ('django.db.models.fields.TextField', [], {'blank': 'True'}),
            'tas_group': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'tas_group'", 'to': "orm['auth.Group']"}),
            'term': ('django.db.models.fields.TextField', [], {'blank': 'True'}),
            'time_created': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'title': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True', 'blank': 'True'}),
            'twitter_tag': ('django.db.models.fields.CharField', [], {'max_length': '64', 'null': 'True', 'blank': 'True'}),
            'year': ('django.db.models.fields.IntegerField', [], {'null': 'True', 'blank': 'True'})
        },
        'c2g.coursecertificate': {
            'Meta': {'object_name': 'CourseCertificate'},
            'assets': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'course': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['c2g.Course']"}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'last_updated': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'auto_now_add': 'True', 'blank': 'True'}),
            'storage': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'time_created': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'type': ('django.db.models.fields.CharField', [], {'default': "'completion'", 'max_length': '64'})
        },
        'c2g.courseemail': {
            'Meta': {'object_name': 'CourseEmail', 'db_table': "u'c2g_course_emails'"},
            'course': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['c2g.Course']"}),
            'hash': ('django.db.models.fields.CharField', [], {'max_length': '128', 'db_index': 'True'}),
            'html_message': ('django.db.models.fields.TextField', [], {'null': 'True', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'last_updated': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'auto_now_add': 'True', 'blank': 'True'}),
            'sender': ('django.db.models.fields.related.ForeignKey', [], {'default': '1', 'to': "orm['auth.User']", 'null': 'True', 'blank': 'True'}),
            'subject': ('django.db.models.fields.CharField', [], {'max_length': '128', 'blank': 'True'}),
            'time_created': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'to': ('django.db.models.fields.CharField', [], {'default': "'myself'", 'max_length': '64'})
        },
        'c2g.courseinstructor': {
            'Meta': {'object_name': 'CourseInstructor', 'db_table': "u'c2g_course_instructor'"},
            'course': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['c2g.Course']"}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'instructor': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['c2g.Instructor']"}),
            'last_updated': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'auto_now_add': 'True', 'blank': 'True'}),
            'time_created': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'})
        },
        'c2g.coursestudentlist': {
            'Meta': {'object_name': 'CourseStudentList'},
            'course': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['c2g.Course']"}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'last_updated': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'auto_now_add': 'True', 'blank': 'True'}),
            'max_completion_level': ('django.db.models.fields.IntegerField', [], {'default': '0'}),
            'members': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['auth.User']", 'symmetrical': 'False'}),
            'time_created': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'})
        },
        'c2g.currenttermmap': {
            'Meta': {'object_name': 'CurrentTermMap'},
            'course_prefix': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '64', 'db_index': 'True'}),
            'course_suffix': ('django.db.models.fields.CharField', [], {'max_length': '64'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'last_updated': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'auto_now_add': 'True', 'blank': 'True'}),
            'time_created': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'})
        },
        'c2g.emailaddr': {
            'Meta': {'object_name': 'EmailAddr'},
            'addr': ('django.db.models.fields.EmailField', [], {'max_length': '128'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '128', 'null': 'True', 'blank': 'True'}),
            'optout': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'optout_code': ('django.db.models.fields.CharField', [], {'default': "'optout'", 'max_length': '64'})
        },
        'c2g.exam': {
            'Meta': {'object_name': 'Exam'},
            'assessment_type': ('django.db.models.fields.CharField', [], {'max_length': '64', 'null': 'True', 'blank': 'True'}),
            'autograde': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'course': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['c2g.Course']"}),
            'description': ('django.db.models.fields.TextField', [], {'null': 'True', 'blank': 'True'}),
            'display_single': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'due_date': ('django.db.models.fields.DateTimeField', [], {'null': 'True', 'blank': 'True'}),
            'exam_type': ('django.db.models.fields.CharField', [], {'default': "'exam'", 'max_length': '32'}),
            'grace_period': ('django.db.models.fields.DateTimeField', [], {'null': 'True', 'blank': 'True'}),
            'grade_single': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'hide_grades': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'html_content': ('django.db.models.fields.TextField', [], {'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'image': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'to': "orm['c2g.Exam']"}),
            'index': ('django.db.models.fields.IntegerField', [], {'null': 'True', 'blank': 'True'}),
            'invideo': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'is_deleted': ('django.db.models.fields.IntegerField', [], {'default': '0'}),
            'last_updated': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'auto_now_add': 'True', 'blank': 'True'}),
            'late_penalty': ('django.db.models.fields.IntegerField', [], {'default': '0', 'null': 'True', 'blank': 'True'}),
            'live_datetime': ('django.db.models.fields.DateTimeField', [], {'null': 'True', 'blank': 'True'}),
            'minutes_btw_attempts': ('django.db.models.fields.IntegerField', [], {'default': '0'}),
            'minutesallowed': ('django.db.models.fields.IntegerField', [], {'null': 'True', 'blank': 'True'}),
            'mode': ('django.db.models.fields.TextField', [], {'blank': 'True'}),
            'partial_credit_deadline': ('django.db.models.fields.DateTimeField', [], {'null': 'True', 'blank': 'True'}),
            'quizdown': ('django.db.models.fields.TextField', [], {'null': 'True', 'blank': 'True'}),
            'resubmission_penalty': ('django.db.models.fields.IntegerField', [], {'default': '0', 'null': 'True', 'blank': 'True'}),
            'section': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['c2g.ContentSection']", 'null': 'True'}),
            'slug': ('django.db.models.fields.SlugField', [], {'max_length': '255', 'null': 'True'}),
            'submissions_permitted': ('django.db.models.fields.IntegerField', [], {'default': '999', 'null': 'True', 'blank': 'True'}),
            'time_created': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'timed': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'title': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True', 'blank': 'True'}),
            'total_score': ('django.db.models.fields.FloatField', [], {'null': 'True', 'blank': 'True'}),
            'xml_imported': ('django.db.models.fields.TextField', [], {'null': 'True', 'blank': 'True'}),
            'xml_metadata': ('django.db.models.fields.TextField', [], {'null': 'True', 'blank': 'True'})
        },
        'c2g.examrecord': {
            'Meta': {'object_name': 'ExamRecord'},
            'attempt_number': ('django.db.models.fields.IntegerField', [], {'default': '0'}),
            'complete': ('django.db.models.fields.BooleanField', [], {'default': 'True'}),
            'course': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['c2g.Course']"}),
            'exam': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['c2g.Exam']"}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'json_data': ('django.db.models.fields.TextField', [], {'null': 'True', 'blank': 'True'}),
            'json_score_data': ('django.db.models.fields.TextField', [], {'null': 'True', 'blank': 'True'}),
            'last_updated': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'auto_now_add': 'True', 'blank': 'True'}),
            'late': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'onpage': ('django.db.models.fields.CharField', [], {'max_length': '512', 'null': 'True', 'blank': 'True'}),
            'score': ('django.db.models.fields.FloatField', [], {'null': 'True', 'blank': 'True'}),
            'student': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['auth.User']"}),
            'time_created': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'})
        },
        'c2g.examrecordfieldlog': {
            'Meta': {'object_name': 'ExamRecordFieldLog'},
            'course': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['c2g.Course']"}),
            'exam': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['c2g.Exam']"}),
            'field_name': ('django.db.models.fields.CharField', [], {'max_length': '128', 'db_index': 'True'}),
            'human_name': ('django.db.models.fields.CharField', [], {'db_index': 'True', 'max_length': '128', 'null': 'True', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'last_updated': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'auto_now_add': 'True', 'blank': 'True'}),
            'max_score': ('django.db.models.fields.FloatField', [], {'default': '0', 'blank': 'True'}),
            'raw_score': ('django.db.models.fields.FloatField', [], {'default': '0', 'blank': 'True'}),
            'student': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['auth.User']"}),
            'time_created': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'value': ('django.db.models.fields.TextField', [], {'null': 'True', 'blank': 'True'})
        },
        'c2g.examrecordscore': {
            'Meta': {'object_name': 'ExamRecordScore'},
            'csv_imported': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'last_updated': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'auto_now_add': 'True', 'blank': 'True'}),
            'raw_score': ('django.db.models.fields.FloatField', [], {'null': 'True', 'blank': 'True'}),
            'record': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['c2g.ExamRecord']", 'unique': 'True'}),
            'time_created': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'})
        },
        'c2g.examrecordscorefield': {
            'Meta': {'object_name': 'ExamRecordScoreField'},
            'associated_text': ('django.db.models.fields.TextField', [], {'null': 'True', 'blank': 'True'}),
            'comments': ('django.db.models.fields.TextField', [], {'null': 'True', 'blank': 'True'}),
            'correct': ('django.db.models.fields.NullBooleanField', [], {'null': 'True', 'blank': 'True'}),
            'field_name': ('django.db.models.fields.CharField', [], {'max_length': '128', 'db_index': 'True'}),
            'human_name': ('django.db.models.fields.CharField', [], {'db_index': 'True', 'max_length': '128', 'null': 'True', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'last_updated': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'auto_now_add': 'True', 'blank': 'True'}),
            'parent': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['c2g.ExamRecordScore']"}),
            'subscore': ('django.db.models.fields.FloatField', [], {'default': '0'}),
            'time_created': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'value': ('django.db.models.fields.TextField', [], {'null': 'True', 'blank': 'True'})
        },
        'c2g.examrecordscorefieldchoice': {
            'Meta': {'object_name': 'ExamRecordScoreFieldChoice'},
            'associated_text': ('django.db.models.fields.TextField', [], {'null': 'True', 'blank': 'True'}),
            'choice_value': ('django.db.models.fields.CharField', [], {'max_length': '128', 'db_index': 'True'}),
            'correct': ('django.db.models.fields.NullBooleanField', [], {'null': 'True', 'blank': 'True'}),
            'human_name': ('django.db.models.fields.CharField', [], {'db_index': 'True', 'max_length': '128', 'null': 'True', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'last_updated': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'auto_now_add': 'True', 'blank': 'True'}),
            'parent': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['c2g.ExamRecordScoreField']"}),
            'time_created': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'})
        },
        'c2g.examscore': {
            'Meta': {'unique_together': "(('exam', 'student'),)", 'object_name': 'ExamScore'},
            'course': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['c2g.Course']"}),
            'csv_imported': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'exam': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['c2g.Exam']"}),
            'examrecordscore': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['c2g.ExamRecordScore']", 'null': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'last_updated': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'auto_now_add': 'True', 'blank': 'True'}),
            'score': ('django.db.models.fields.FloatField', [], {'null': 'True', 'blank': 'True'}),
            'student': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['auth.User']"}),
            'time_created': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'})
        },
        'c2g.examscorefield': {
            'Meta': {'object_name': 'ExamScoreField'},
            'associated_text': ('django.db.models.fields.TextField', [], {'null': 'True', 'blank': 'True'}),
            'comments': ('django.db.models.fields.TextField', [], {'null': 'True', 'blank': 'True'}),
            'correct': ('django.db.models.fields.NullBooleanField', [], {'null': 'True', 'blank': 'True'}),
            'field_name': ('django.db.models.fields.CharField', [], {'max_length': '128', 'db_index': 'True'}),
            'human_name': ('django.db.models.fields.CharField', [], {'db_index': 'True', 'max_length': '128', 'null': 'True', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'last_updated': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'auto_now_add': 'True', 'blank': 'True'}),
            'parent': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['c2g.ExamScore']"}),
            'subscore': ('django.db.models.fields.FloatField', [], {'default': '0'}),
            'time_created': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'value': ('django.db.models.fields.CharField', [], {'max_length': '128', 'null': 'True', 'blank': 'True'})
        },
        'c2g.exercise': {
            'Meta': {'object_name': 'Exercise', 'db_table': "u'c2g_exercises'"},
            'file': ('django.db.models.fields.files.FileField', [], {'max_length': '100', 'null': 'True'}),
            'fileName': ('django.db.models.fields.CharField', [], {'max_length': '255'}),
            'handle': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True', 'db_index': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'is_deleted': ('django.db.models.fields.IntegerField', [], {'default': '0'}),
            'last_updated': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'auto_now_add': 'True', 'blank': 'True'}),
            'problemSet': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['c2g.ProblemSet']", 'through': "orm['c2g.ProblemSetToExercise']", 'symmetrical': 'False'}),
            'time_created': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'video': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['c2g.Video']", 'through': "orm['c2g.VideoToExercise']", 'symmetrical': 'False'})
        },
        'c2g.file': {
            'Meta': {'object_name': 'File', 'db_table': "u'c2g_files'"},
            'course': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['c2g.Course']"}),
            'file': ('django.db.models.fields.files.FileField', [], {'max_length': '100'}),
            'handle': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True', 'db_index': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'image': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'to': "orm['c2g.File']"}),
            'index': ('django.db.models.fields.IntegerField', [], {'null': 'True', 'blank': 'True'}),
            'is_deleted': ('django.db.models.fields.IntegerField', [], {'default': '0'}),
            'last_updated': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'auto_now_add': 'True', 'blank': 'True'}),
            'live_datetime': ('django.db.models.fields.DateTimeField', [], {'null': 'True', 'blank': 'True'}),
            'mode': ('django.db.models.fields.TextField', [], {'blank': 'True'}),
            'section': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['c2g.ContentSection']", 'null': 'True'}),
            'time_created': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'title': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True', 'blank': 'True'})
        },
        'c2g.institution': {
            'Meta': {'object_name': 'Institution', 'db_table': "u'c2g_institutions'"},
            'city': ('django.db.models.fields.TextField', [], {'blank': 'True'}),
            'country': ('django.db.models.fields.TextField', [], {'blank': 'True'}),
            'domains': ('django.db.models.fields.TextField', [], {'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'last_updated': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'auto_now_add': 'True', 'blank': 'True'}),
            'time_created': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'title': ('django.db.models.fields.TextField', [], {})
        },
        'c2g.instructor': {
            'Meta': {'object_name': 'Instructor'},
            'biography': ('django.db.models.fields.TextField', [], {'blank': 'True'}),
            'email': ('django.db.models.fields.TextField', [], {'blank': 'True'}),
            'handle': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True', 'db_index': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'last_updated': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'auto_now_add': 'True', 'blank': 'True'}),
            'name': ('django.db.models.fields.TextField', [], {'blank': 'True'}),
            'photo': ('django.db.models.fields.files.FileField', [], {'max_length': '100', 'blank': 'True'}),
            'time_created': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'})
        },
        'c2g.listemail': {
            'Meta': {'object_name': 'ListEmail'},
            'from_addr': ('django.db.models.fields.CharField', [], {'max_length': '128', 'blank': 'True'}),
            'from_name': ('django.db.models.fields.CharField', [], {'max_length': '128', 'blank': 'True'}),
            'hash': ('django.db.models.fields.CharField', [], {'max_length': '128', 'db_index': 'True'}),
            'html_message': ('django.db.models.fields.TextField', [], {'null': 'True', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'last_updated': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'auto_now_add': 'True', 'blank': 'True'}),
            'sender': ('django.db.models.fields.related.ForeignKey', [], {'default': '1', 'to': "orm['auth.User']", 'null': 'True', 'blank': 'True'}),
            'subject': ('django.db.models.fields.CharField', [], {'max_length': '128', 'blank': 'True'}),
            'time_created': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'to_list': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['c2g.MailingList']"})
        },
        'c2g.mailinglist': {
            'Meta': {'object_name': 'MailingList'},
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'members': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['c2g.EmailAddr']", 'symmetrical': 'False'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '128', 'blank': 'True'})
        },
        'c2g.newsevent': {
            'Meta': {'object_name': 'NewsEvent', 'db_table': "u'c2g_news_events'"},
            'course': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['c2g.Course']"}),
            'event': ('django.db.models.fields.CharField', [], {'max_length': '255'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'time_created': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'})
        },
        'c2g.pagevisitlog': {
            'Meta': {'object_name': 'PageVisitLog', 'db_table': "u'c2g_page_visit_log'"},
            'course': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['c2g.Course']"}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'last_updated': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'auto_now_add': 'True', 'blank': 'True'}),
            'object_id': ('django.db.models.fields.CharField', [], {'max_length': '128', 'blank': 'True'}),
            'page_type': ('django.db.models.fields.CharField', [], {'max_length': '128', 'db_index': 'True'}),
            'time_created': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'user': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['auth.User']"})
        },
        'c2g.problemactivity': {
            'Meta': {'object_name': 'ProblemActivity', 'db_table': "u'c2g_problem_activity'"},
            'attempt_content': ('django.db.models.fields.TextField', [], {'null': 'True', 'blank': 'True'}),
            'attempt_number': ('django.db.models.fields.IntegerField', [], {'null': 'True', 'blank': 'True'}),
            'card': ('django.db.models.fields.TextField', [], {'blank': 'True'}),
            'cards_done': ('django.db.models.fields.IntegerField', [], {'null': 'True', 'blank': 'True'}),
            'cards_left': ('django.db.models.fields.IntegerField', [], {'null': 'True', 'blank': 'True'}),
            'casing': ('django.db.models.fields.TextField', [], {'blank': 'True'}),
            'complete': ('django.db.models.fields.IntegerField', [], {'null': 'True', 'blank': 'True'}),
            'count_hints': ('django.db.models.fields.IntegerField', [], {'null': 'True', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'last_updated': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'auto_now_add': 'True', 'blank': 'True'}),
            'problem_identifier': ('django.db.models.fields.CharField', [], {'max_length': '255', 'blank': 'True'}),
            'problem_type': ('django.db.models.fields.TextField', [], {'blank': 'True'}),
            'problemset_to_exercise': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['c2g.ProblemSetToExercise']", 'null': 'True'}),
            'review_mode': ('django.db.models.fields.IntegerField', [], {'null': 'True', 'blank': 'True'}),
            'seed': ('django.db.models.fields.TextField', [], {'blank': 'True'}),
            'sha1': ('django.db.models.fields.TextField', [], {'blank': 'True'}),
            'student': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['auth.User']"}),
            'time_created': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'time_taken': ('django.db.models.fields.IntegerField', [], {'null': 'True', 'blank': 'True'}),
            'topic_mode': ('django.db.models.fields.IntegerField', [], {'null': 'True', 'blank': 'True'}),
            'user_choices': ('django.db.models.fields.CharField', [], {'max_length': '1024', 'null': 'True', 'blank': 'True'}),
            'user_selection_val': ('django.db.models.fields.CharField', [], {'max_length': '1024', 'null': 'True', 'blank': 'True'}),
            'video_to_exercise': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['c2g.VideoToExercise']", 'null': 'True'})
        },
        'c2g.problemset': {
            'Meta': {'object_name': 'ProblemSet', 'db_table': "u'c2g_problem_sets'"},
            'assessment_type': ('django.db.models.fields.CharField', [], {'max_length': '255'}),
            'course': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['c2g.Course']"}),
            'description': ('django.db.models.fields.TextField', [], {'blank': 'True'}),
            'due_date': ('django.db.models.fields.DateTimeField', [], {'null': 'True'}),
            'grace_period': ('django.db.models.fields.DateTimeField', [], {}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'image': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'to': "orm['c2g.ProblemSet']"}),
            'index': ('django.db.models.fields.IntegerField', [], {'null': 'True', 'blank': 'True'}),
            'is_deleted': ('django.db.models.fields.IntegerField', [], {'default': '0'}),
            'last_updated': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'auto_now_add': 'True', 'blank': 'True'}),
            'late_penalty': ('django.db.models.fields.IntegerField', [], {}),
            'live_datetime': ('django.db.models.fields.DateTimeField', [], {'null': 'True', 'blank': 'True'}),
            'mode': ('django.db.models.fields.TextField', [], {'blank': 'True'}),
            'partial_credit_deadline': ('django.db.models.fields.DateTimeField', [], {}),
            'path': ('django.db.models.fields.CharField', [], {'max_length': '255'}),
            'randomize': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'resubmission_penalty': ('django.db.models.fields.IntegerField', [], {}),
            'section': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['c2g.ContentSection']"}),
            'slug': ('django.db.models.fields.SlugField', [], {'max_length': '50'}),
            'submissions_permitted': ('django.db.models.fields.IntegerField', [], {}),
            'time_created': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'title': ('django.db.models.fields.CharField', [], {'max_length': '255'})
        },
        'c2g.problemsettoexercise': {
            'Meta': {'object_name': 'ProblemSetToExercise', 'db_table': "u'c2g_problemset_to_exercise'"},
            'exercise': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['c2g.Exercise']"}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'image': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['c2g.ProblemSetToExercise']", 'null': 'True', 'blank': 'True'}),
            'is_deleted': ('django.db.models.fields.IntegerField', [], {'default': '0'}),
            'mode': ('django.db.models.fields.TextField', [], {'blank': 'True'}),
            'number': ('django.db.models.fields.IntegerField', [], {'null': 'True', 'blank': 'True'}),
            'problemSet': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['c2g.ProblemSet']"})
        },
        'c2g.studentexamstart': {
            'Meta': {'object_name': 'StudentExamStart'},
            'exam': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['c2g.Exam']"}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'last_updated': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'auto_now_add': 'True', 'blank': 'True'}),
            'student': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['auth.User']"}),
            'time_created': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'})
        },
        'c2g.studentinvitation': {
            'Meta': {'object_name': 'StudentInvitation'},
            'course': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['c2g.Course']"}),
            'email': ('django.db.models.fields.CharField', [], {'max_length': '128', 'db_index': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'last_updated': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'auto_now_add': 'True', 'blank': 'True'}),
            'time_created': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'})
        },
        'c2g.studentsection': {
            'Meta': {'object_name': 'StudentSection', 'db_table': "u'c2g_sections'"},
            'capacity': ('django.db.models.fields.IntegerField', [], {'default': '999'}),
            'course': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['c2g.Course']"}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'is_deleted': ('django.db.models.fields.IntegerField', [], {'default': '0'}),
            'last_updated': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'auto_now_add': 'True', 'blank': 'True'}),
            'members': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['auth.User']", 'symmetrical': 'False'}),
            'time_created': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'title': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True', 'blank': 'True'})
        },
        'c2g.userprofile': {
            'Meta': {'object_name': 'UserProfile', 'db_table': "u'c2g_user_profiles'"},
            'accept_language': ('django.db.models.fields.CharField', [], {'max_length': '64', 'null': 'True'}),
            'accept_language_first': ('django.db.models.fields.CharField', [], {'max_length': '64', 'null': 'True'}),
            'birth_year': ('django.db.models.fields.CharField', [], {'max_length': '64', 'null': 'True'}),
            'certificates': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['c2g.CourseCertificate']", 'symmetrical': 'False'}),
            'client_ip': ('django.db.models.fields.CharField', [], {'max_length': '30', 'null': 'True'}),
            'client_ip_first': ('django.db.models.fields.CharField', [], {'max_length': '30', 'null': 'True'}),
            'education': ('django.db.models.fields.CharField', [], {'max_length': '64', 'null': 'True'}),
            'email_me': ('django.db.models.fields.BooleanField', [], {'default': 'True'}),
            'gender': ('django.db.models.fields.CharField', [], {'max_length': '64', 'null': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'institutions': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['c2g.Institution']", 'symmetrical': 'False'}),
            'last_updated': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'auto_now_add': 'True', 'blank': 'True'}),
            'piazza_email': ('django.db.models.fields.CharField', [], {'max_length': '128', 'blank': 'True'}),
            'piazza_name': ('django.db.models.fields.CharField', [], {'max_length': '128', 'blank': 'True'}),
            'referrer': ('django.db.models.fields.CharField', [], {'max_length': '256', 'null': 'True'}),
            'referrer_first': ('django.db.models.fields.CharField', [], {'max_length': '256', 'null': 'True'}),
            'site_data': ('django.db.models.fields.TextField', [], {'blank': 'True'}),
            'time_created': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'user': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['auth.User']", 'unique': 'True'}),
            'user_agent': ('django.db.models.fields.CharField', [], {'max_length': '256', 'null': 'True'}),
            'user_agent_first': ('django.db.models.fields.CharField', [], {'max_length': '256', 'null': 'True'}),
            'work': ('django.db.models.fields.CharField', [], {'max_length': '128', 'null': 'True'})
        },
        'c2g.video': {
            'Meta': {'object_name': 'Video', 'db_table': "u'c2g_videos'"},
            'course': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['c2g.Course']"}),
            'description': ('django.db.models.fields.TextField', [], {'blank': 'True'}),
            'duration': ('django.db.models.fields.IntegerField', [], {'null': 'True', 'blank': 'True'}),
            'exam': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['c2g.Exam']", 'null': 'True', 'blank': 'True'}),
            'file': ('django.db.models.fields.files.FileField', [], {'max_length': '100'}),
            'handle': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True', 'db_index': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'image': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'to': "orm['c2g.Video']"}),
            'index': ('django.db.models.fields.IntegerField', [], {'null': 'True', 'blank': 'True'}),
            'is_deleted': ('django.db.models.fields.IntegerField', [], {'default': '0'}),
            'last_updated': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'auto_now_add': 'True', 'blank': 'True'}),
            'live_datetime': ('django.db.models.fields.DateTimeField', [], {'null': 'True', 'blank': 'True'}),
            'mode': ('django.db.models.fields.TextField', [], {'blank': 'True'}),
            'section': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['c2g.ContentSection']", 'null': 'True'}),
            'slug': ('django.db.models.fields.SlugField', [], {'max_length': '255', 'null': 'True'}),
            'time_created': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'title': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True', 'blank': 'True'}),
            'type': ('django.db.models.fields.CharField', [], {'default': "'youtube'", 'max_length': '30'}),
            'url': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True', 'blank': 'True'})
        },
        'c2g.videoactivity': {
            'Meta': {'object_name': 'VideoActivity', 'db_table': "u'c2g_video_activity'"},
            'course': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['c2g.Course']"}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'max_end_seconds': ('django.db.models.fields.IntegerField', [], {'default': '0', 'blank': 'True'}),
            'start_seconds': ('django.db.models.fields.IntegerField', [], {'default': '0', 'blank': 'True'}),
            'student': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['auth.User']"}),
            'video': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['c2g.Video']"})
        },
        'c2g.videodownload': {
            'Meta': {'object_name': 'VideoDownload', 'db_table': "u'c2g_video_download'"},
            'course': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['c2g.Course']"}),
            'download_date': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'format': ('django.db.models.fields.CharField', [], {'max_length': '35', 'null': 'True', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'student': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['auth.User']"}),
            'video': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['c2g.Video']"})
        },
        'c2g.videotoexercise': {
            'Meta': {'object_name': 'VideoToExercise', 'db_table': "u'c2g_video_to_exercise'"},
            'exercise': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['c2g.Exercise']"}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'image': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['c2g.VideoToExercise']", 'null': 'True', 'blank': 'True'}),
            'is_deleted': ('django.db.models.fields.IntegerField', [], {'default': '0'}),
            'mode': ('django.db.models.fields.TextField', [], {'blank': 'True'}),
            'video': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['c2g.Video']"}),
            'video_time': ('django.db.models.fields.IntegerField', [], {})
        },
        'c2g.videoviewtraces': {
            'Meta': {'object_name': 'VideoViewTraces', 'db_table': "u'c2g_video_view_traces'"},
            'course': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['c2g.Course']"}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'last_updated': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'auto_now_add': 'True', 'blank': 'True'}),
            'time_created': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'trace': ('django.db.models.fields.TextField', [], {'blank': 'True'}),
            'user': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['auth.User']"}),
            'video': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['c2g.Video']"})
        },
        'contenttypes.contenttype': {
            'Meta': {'ordering': "('name',)", 'unique_together': "(('app_label', 'model'),)", 'object_name': 'ContentType', 'db_table': "'django_content_type'"},
            'app_label': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'model': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '100'})
        }
    }

    complete_apps = ['c2g']
########NEW FILE########
__FILENAME__ = 0011_auto__add_coursestudentscore__add_unique_coursestudentscore_course_stu
# -*- coding: utf-8 -*-
import datetime
from south.db import db
from south.v2 import SchemaMigration
from django.db import models


class Migration(SchemaMigration):

    def forwards(self, orm):
        # Adding model 'CourseStudentScore'
        db.create_table('c2g_coursestudentscore', (
            ('id', self.gf('django.db.models.fields.AutoField')(primary_key=True)),
            ('time_created', self.gf('django.db.models.fields.DateTimeField')(auto_now_add=True, blank=True)),
            ('last_updated', self.gf('django.db.models.fields.DateTimeField')(auto_now=True, auto_now_add=True, blank=True)),
            ('course', self.gf('django.db.models.fields.related.ForeignKey')(to=orm['c2g.Course'])),
            ('student', self.gf('django.db.models.fields.related.ForeignKey')(to=orm['auth.User'])),
            ('tag', self.gf('django.db.models.fields.CharField')(max_length=128, db_index=True)),
            ('score', self.gf('django.db.models.fields.FloatField')(null=True, blank=True)),
        ))
        db.send_create_signal('c2g', ['CourseStudentScore'])

        # Adding unique constraint on 'CourseStudentScore', fields ['course', 'student', 'tag']
        db.create_unique('c2g_coursestudentscore', ['course_id', 'student_id', 'tag'])


    def backwards(self, orm):
        # Removing unique constraint on 'CourseStudentScore', fields ['course', 'student', 'tag']
        db.delete_unique('c2g_coursestudentscore', ['course_id', 'student_id', 'tag'])

        # Deleting model 'CourseStudentScore'
        db.delete_table('c2g_coursestudentscore')


    models = {
        'auth.group': {
            'Meta': {'object_name': 'Group'},
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '80'}),
            'permissions': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['auth.Permission']", 'symmetrical': 'False', 'blank': 'True'})
        },
        'auth.permission': {
            'Meta': {'ordering': "('content_type__app_label', 'content_type__model', 'codename')", 'unique_together': "(('content_type', 'codename'),)", 'object_name': 'Permission'},
            'codename': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'content_type': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['contenttypes.ContentType']"}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '50'})
        },
        'auth.user': {
            'Meta': {'object_name': 'User'},
            'date_joined': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
            'email': ('django.db.models.fields.EmailField', [], {'max_length': '75', 'blank': 'True'}),
            'first_name': ('django.db.models.fields.CharField', [], {'max_length': '30', 'blank': 'True'}),
            'groups': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['auth.Group']", 'symmetrical': 'False', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'is_active': ('django.db.models.fields.BooleanField', [], {'default': 'True'}),
            'is_staff': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'is_superuser': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'last_login': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
            'last_name': ('django.db.models.fields.CharField', [], {'max_length': '30', 'blank': 'True'}),
            'password': ('django.db.models.fields.CharField', [], {'max_length': '128'}),
            'user_permissions': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['auth.Permission']", 'symmetrical': 'False', 'blank': 'True'}),
            'username': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '30'})
        },
        'c2g.additionalpage': {
            'Meta': {'object_name': 'AdditionalPage', 'db_table': "u'c2g_additional_pages'"},
            'course': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['c2g.Course']"}),
            'description': ('django.db.models.fields.TextField', [], {'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'image': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'to': "orm['c2g.AdditionalPage']"}),
            'index': ('django.db.models.fields.IntegerField', [], {'null': 'True', 'blank': 'True'}),
            'is_deleted': ('django.db.models.fields.IntegerField', [], {'default': '0'}),
            'last_updated': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'auto_now_add': 'True', 'blank': 'True'}),
            'live_datetime': ('django.db.models.fields.DateTimeField', [], {'null': 'True', 'blank': 'True'}),
            'menu_slug': ('django.db.models.fields.SlugField', [], {'max_length': '255', 'null': 'True', 'blank': 'True'}),
            'mode': ('django.db.models.fields.TextField', [], {'blank': 'True'}),
            'section': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['c2g.ContentSection']", 'null': 'True'}),
            'slug': ('django.db.models.fields.SlugField', [], {'max_length': '255', 'null': 'True', 'blank': 'True'}),
            'time_created': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'title': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True', 'blank': 'True'})
        },
        'c2g.announcement': {
            'Meta': {'object_name': 'Announcement', 'db_table': "u'c2g_announcements'"},
            'course': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['c2g.Course']"}),
            'description': ('django.db.models.fields.TextField', [], {'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'image': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'to': "orm['c2g.Announcement']"}),
            'index': ('django.db.models.fields.IntegerField', [], {'null': 'True', 'blank': 'True'}),
            'is_deleted': ('django.db.models.fields.IntegerField', [], {'default': '0'}),
            'last_updated': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'auto_now_add': 'True', 'blank': 'True'}),
            'live_datetime': ('django.db.models.fields.DateTimeField', [], {'null': 'True', 'blank': 'True'}),
            'mode': ('django.db.models.fields.TextField', [], {'blank': 'True'}),
            'owner': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['auth.User']"}),
            'time_created': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'title': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True', 'blank': 'True'})
        },
        'c2g.contentgroup': {
            'Meta': {'object_name': 'ContentGroup', 'db_table': "u'c2g_content_group'"},
            'additional_page': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['c2g.AdditionalPage']", 'null': 'True', 'blank': 'True'}),
            'course': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['c2g.Course']"}),
            'display_style': ('django.db.models.fields.CharField', [], {'default': "'list'", 'max_length': '32', 'blank': 'True'}),
            'exam': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['c2g.Exam']", 'null': 'True', 'blank': 'True'}),
            'file': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['c2g.File']", 'null': 'True', 'blank': 'True'}),
            'group_id': ('django.db.models.fields.IntegerField', [], {'db_index': 'True', 'null': 'True', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'level': ('django.db.models.fields.IntegerField', [], {'db_index': 'True'}),
            'problemSet': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['c2g.ProblemSet']", 'null': 'True', 'blank': 'True'}),
            'video': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['c2g.Video']", 'null': 'True', 'blank': 'True'})
        },
        'c2g.contentsection': {
            'Meta': {'object_name': 'ContentSection', 'db_table': "u'c2g_content_sections'"},
            'course': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['c2g.Course']"}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'image': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'to': "orm['c2g.ContentSection']"}),
            'index': ('django.db.models.fields.IntegerField', [], {'null': 'True', 'blank': 'True'}),
            'is_deleted': ('django.db.models.fields.IntegerField', [], {'default': '0'}),
            'last_updated': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'auto_now_add': 'True', 'blank': 'True'}),
            'live_datetime': ('django.db.models.fields.DateTimeField', [], {'null': 'True', 'blank': 'True'}),
            'mode': ('django.db.models.fields.TextField', [], {'blank': 'True'}),
            'slug': ('django.db.models.fields.SlugField', [], {'max_length': '255', 'null': 'True', 'blank': 'True'}),
            'subtitle': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True', 'blank': 'True'}),
            'time_created': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'title': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True', 'blank': 'True'})
        },
        'c2g.course': {
            'Meta': {'object_name': 'Course', 'db_table': "u'c2g_courses'"},
            'accompanying_materials': ('django.db.models.fields.TextField', [], {'blank': 'True'}),
            'calendar_end': ('django.db.models.fields.DateField', [], {'null': 'True', 'blank': 'True'}),
            'calendar_start': ('django.db.models.fields.DateField', [], {'null': 'True', 'blank': 'True'}),
            'contact': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True', 'blank': 'True'}),
            'description': ('django.db.models.fields.TextField', [], {'blank': 'True'}),
            'faq': ('django.db.models.fields.TextField', [], {'blank': 'True'}),
            'handle': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True', 'db_index': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'image': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'to': "orm['c2g.Course']"}),
            'institution': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['c2g.Institution']", 'null': 'True'}),
            'institution_only': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'instructor_group': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'instructor_group'", 'to': "orm['auth.Group']"}),
            'is_deleted': ('django.db.models.fields.IntegerField', [], {'default': '0'}),
            'last_updated': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'auto_now_add': 'True', 'blank': 'True'}),
            'list_publicly': ('django.db.models.fields.IntegerField', [], {'null': 'True', 'blank': 'True'}),
            'live_datetime': ('django.db.models.fields.DateTimeField', [], {'null': 'True', 'blank': 'True'}),
            'logo': ('django.db.models.fields.files.FileField', [], {'max_length': '100', 'null': 'True'}),
            'mode': ('django.db.models.fields.TextField', [], {'blank': 'True'}),
            'outcomes': ('django.db.models.fields.TextField', [], {'blank': 'True'}),
            'piazza_id': ('django.db.models.fields.IntegerField', [], {'null': 'True', 'blank': 'True'}),
            'preenroll_only': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'prerequisites': ('django.db.models.fields.TextField', [], {'blank': 'True'}),
            'preview_only_mode': ('django.db.models.fields.BooleanField', [], {'default': 'True'}),
            'readonly_tas_group': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'readonly_tas_group'", 'to': "orm['auth.Group']"}),
            'share_to': ('django.db.models.fields.related.ManyToManyField', [], {'blank': 'True', 'related_name': "'share_from'", 'null': 'True', 'symmetrical': 'False', 'to': "orm['c2g.Course']"}),
            'short_description': ('django.db.models.fields.TextField', [], {'blank': 'True'}),
            'student_group': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'student_group'", 'to': "orm['auth.Group']"}),
            'syllabus': ('django.db.models.fields.TextField', [], {'blank': 'True'}),
            'tas_group': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'tas_group'", 'to': "orm['auth.Group']"}),
            'term': ('django.db.models.fields.TextField', [], {'blank': 'True'}),
            'time_created': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'title': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True', 'blank': 'True'}),
            'twitter_tag': ('django.db.models.fields.CharField', [], {'max_length': '64', 'null': 'True', 'blank': 'True'}),
            'year': ('django.db.models.fields.IntegerField', [], {'null': 'True', 'blank': 'True'})
        },
        'c2g.coursecertificate': {
            'Meta': {'object_name': 'CourseCertificate'},
            'assets': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'course': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['c2g.Course']"}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'last_updated': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'auto_now_add': 'True', 'blank': 'True'}),
            'storage': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'time_created': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'type': ('django.db.models.fields.CharField', [], {'default': "'completion'", 'max_length': '64'})
        },
        'c2g.courseemail': {
            'Meta': {'object_name': 'CourseEmail', 'db_table': "u'c2g_course_emails'"},
            'course': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['c2g.Course']"}),
            'hash': ('django.db.models.fields.CharField', [], {'max_length': '128', 'db_index': 'True'}),
            'html_message': ('django.db.models.fields.TextField', [], {'null': 'True', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'last_updated': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'auto_now_add': 'True', 'blank': 'True'}),
            'sender': ('django.db.models.fields.related.ForeignKey', [], {'default': '1', 'to': "orm['auth.User']", 'null': 'True', 'blank': 'True'}),
            'subject': ('django.db.models.fields.CharField', [], {'max_length': '128', 'blank': 'True'}),
            'time_created': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'to': ('django.db.models.fields.CharField', [], {'default': "'myself'", 'max_length': '64'})
        },
        'c2g.courseinstructor': {
            'Meta': {'object_name': 'CourseInstructor', 'db_table': "u'c2g_course_instructor'"},
            'course': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['c2g.Course']"}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'instructor': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['c2g.Instructor']"}),
            'last_updated': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'auto_now_add': 'True', 'blank': 'True'}),
            'time_created': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'})
        },
        'c2g.coursestudentlist': {
            'Meta': {'object_name': 'CourseStudentList'},
            'course': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['c2g.Course']"}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'last_updated': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'auto_now_add': 'True', 'blank': 'True'}),
            'max_completion_level': ('django.db.models.fields.IntegerField', [], {'default': '0'}),
            'members': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['auth.User']", 'symmetrical': 'False'}),
            'time_created': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'})
        },
        'c2g.coursestudentscore': {
            'Meta': {'unique_together': "(('course', 'student', 'tag'),)", 'object_name': 'CourseStudentScore'},
            'course': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['c2g.Course']"}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'last_updated': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'auto_now_add': 'True', 'blank': 'True'}),
            'score': ('django.db.models.fields.FloatField', [], {'null': 'True', 'blank': 'True'}),
            'student': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['auth.User']"}),
            'tag': ('django.db.models.fields.CharField', [], {'max_length': '128', 'db_index': 'True'}),
            'time_created': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'})
        },
        'c2g.currenttermmap': {
            'Meta': {'object_name': 'CurrentTermMap'},
            'course_prefix': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '64', 'db_index': 'True'}),
            'course_suffix': ('django.db.models.fields.CharField', [], {'max_length': '64'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'last_updated': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'auto_now_add': 'True', 'blank': 'True'}),
            'time_created': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'})
        },
        'c2g.emailaddr': {
            'Meta': {'object_name': 'EmailAddr'},
            'addr': ('django.db.models.fields.EmailField', [], {'max_length': '128'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '128', 'null': 'True', 'blank': 'True'}),
            'optout': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'optout_code': ('django.db.models.fields.CharField', [], {'default': "'optout'", 'max_length': '64'})
        },
        'c2g.exam': {
            'Meta': {'object_name': 'Exam'},
            'assessment_type': ('django.db.models.fields.CharField', [], {'max_length': '64', 'null': 'True', 'blank': 'True'}),
            'autograde': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'course': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['c2g.Course']"}),
            'description': ('django.db.models.fields.TextField', [], {'null': 'True', 'blank': 'True'}),
            'display_single': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'due_date': ('django.db.models.fields.DateTimeField', [], {'null': 'True', 'blank': 'True'}),
            'exam_type': ('django.db.models.fields.CharField', [], {'default': "'exam'", 'max_length': '32'}),
            'grace_period': ('django.db.models.fields.DateTimeField', [], {'null': 'True', 'blank': 'True'}),
            'grade_single': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'hide_grades': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'html_content': ('django.db.models.fields.TextField', [], {'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'image': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'to': "orm['c2g.Exam']"}),
            'index': ('django.db.models.fields.IntegerField', [], {'null': 'True', 'blank': 'True'}),
            'invideo': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'is_deleted': ('django.db.models.fields.IntegerField', [], {'default': '0'}),
            'last_updated': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'auto_now_add': 'True', 'blank': 'True'}),
            'late_penalty': ('django.db.models.fields.IntegerField', [], {'default': '0', 'null': 'True', 'blank': 'True'}),
            'live_datetime': ('django.db.models.fields.DateTimeField', [], {'null': 'True', 'blank': 'True'}),
            'minutes_btw_attempts': ('django.db.models.fields.IntegerField', [], {'default': '0'}),
            'minutesallowed': ('django.db.models.fields.IntegerField', [], {'null': 'True', 'blank': 'True'}),
            'mode': ('django.db.models.fields.TextField', [], {'blank': 'True'}),
            'partial_credit_deadline': ('django.db.models.fields.DateTimeField', [], {'null': 'True', 'blank': 'True'}),
            'quizdown': ('django.db.models.fields.TextField', [], {'null': 'True', 'blank': 'True'}),
            'resubmission_penalty': ('django.db.models.fields.IntegerField', [], {'default': '0', 'null': 'True', 'blank': 'True'}),
            'section': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['c2g.ContentSection']", 'null': 'True'}),
            'slug': ('django.db.models.fields.SlugField', [], {'max_length': '255', 'null': 'True'}),
            'submissions_permitted': ('django.db.models.fields.IntegerField', [], {'default': '999', 'null': 'True', 'blank': 'True'}),
            'time_created': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'timed': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'title': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True', 'blank': 'True'}),
            'total_score': ('django.db.models.fields.FloatField', [], {'null': 'True', 'blank': 'True'}),
            'xml_imported': ('django.db.models.fields.TextField', [], {'null': 'True', 'blank': 'True'}),
            'xml_metadata': ('django.db.models.fields.TextField', [], {'null': 'True', 'blank': 'True'})
        },
        'c2g.examrecord': {
            'Meta': {'object_name': 'ExamRecord'},
            'attempt_number': ('django.db.models.fields.IntegerField', [], {'default': '0'}),
            'complete': ('django.db.models.fields.BooleanField', [], {'default': 'True'}),
            'course': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['c2g.Course']"}),
            'exam': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['c2g.Exam']"}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'json_data': ('django.db.models.fields.TextField', [], {'null': 'True', 'blank': 'True'}),
            'json_score_data': ('django.db.models.fields.TextField', [], {'null': 'True', 'blank': 'True'}),
            'last_updated': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'auto_now_add': 'True', 'blank': 'True'}),
            'late': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'onpage': ('django.db.models.fields.CharField', [], {'max_length': '512', 'null': 'True', 'blank': 'True'}),
            'score': ('django.db.models.fields.FloatField', [], {'null': 'True', 'blank': 'True'}),
            'student': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['auth.User']"}),
            'time_created': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'})
        },
        'c2g.examrecordfieldlog': {
            'Meta': {'object_name': 'ExamRecordFieldLog'},
            'course': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['c2g.Course']"}),
            'exam': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['c2g.Exam']"}),
            'field_name': ('django.db.models.fields.CharField', [], {'max_length': '128', 'db_index': 'True'}),
            'human_name': ('django.db.models.fields.CharField', [], {'db_index': 'True', 'max_length': '128', 'null': 'True', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'last_updated': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'auto_now_add': 'True', 'blank': 'True'}),
            'max_score': ('django.db.models.fields.FloatField', [], {'default': '0', 'blank': 'True'}),
            'raw_score': ('django.db.models.fields.FloatField', [], {'default': '0', 'blank': 'True'}),
            'student': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['auth.User']"}),
            'time_created': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'value': ('django.db.models.fields.TextField', [], {'null': 'True', 'blank': 'True'})
        },
        'c2g.examrecordscore': {
            'Meta': {'object_name': 'ExamRecordScore'},
            'csv_imported': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'last_updated': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'auto_now_add': 'True', 'blank': 'True'}),
            'raw_score': ('django.db.models.fields.FloatField', [], {'null': 'True', 'blank': 'True'}),
            'record': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['c2g.ExamRecord']", 'unique': 'True'}),
            'time_created': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'})
        },
        'c2g.examrecordscorefield': {
            'Meta': {'object_name': 'ExamRecordScoreField'},
            'associated_text': ('django.db.models.fields.TextField', [], {'null': 'True', 'blank': 'True'}),
            'comments': ('django.db.models.fields.TextField', [], {'null': 'True', 'blank': 'True'}),
            'correct': ('django.db.models.fields.NullBooleanField', [], {'null': 'True', 'blank': 'True'}),
            'field_name': ('django.db.models.fields.CharField', [], {'max_length': '128', 'db_index': 'True'}),
            'human_name': ('django.db.models.fields.CharField', [], {'db_index': 'True', 'max_length': '128', 'null': 'True', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'last_updated': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'auto_now_add': 'True', 'blank': 'True'}),
            'parent': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['c2g.ExamRecordScore']"}),
            'subscore': ('django.db.models.fields.FloatField', [], {'default': '0'}),
            'time_created': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'value': ('django.db.models.fields.TextField', [], {'null': 'True', 'blank': 'True'})
        },
        'c2g.examrecordscorefieldchoice': {
            'Meta': {'object_name': 'ExamRecordScoreFieldChoice'},
            'associated_text': ('django.db.models.fields.TextField', [], {'null': 'True', 'blank': 'True'}),
            'choice_value': ('django.db.models.fields.CharField', [], {'max_length': '128', 'db_index': 'True'}),
            'correct': ('django.db.models.fields.NullBooleanField', [], {'null': 'True', 'blank': 'True'}),
            'human_name': ('django.db.models.fields.CharField', [], {'db_index': 'True', 'max_length': '128', 'null': 'True', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'last_updated': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'auto_now_add': 'True', 'blank': 'True'}),
            'parent': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['c2g.ExamRecordScoreField']"}),
            'time_created': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'})
        },
        'c2g.examscore': {
            'Meta': {'unique_together': "(('exam', 'student'),)", 'object_name': 'ExamScore'},
            'course': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['c2g.Course']"}),
            'csv_imported': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'exam': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['c2g.Exam']"}),
            'examrecordscore': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['c2g.ExamRecordScore']", 'null': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'last_updated': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'auto_now_add': 'True', 'blank': 'True'}),
            'score': ('django.db.models.fields.FloatField', [], {'null': 'True', 'blank': 'True'}),
            'student': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['auth.User']"}),
            'time_created': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'})
        },
        'c2g.examscorefield': {
            'Meta': {'object_name': 'ExamScoreField'},
            'associated_text': ('django.db.models.fields.TextField', [], {'null': 'True', 'blank': 'True'}),
            'comments': ('django.db.models.fields.TextField', [], {'null': 'True', 'blank': 'True'}),
            'correct': ('django.db.models.fields.NullBooleanField', [], {'null': 'True', 'blank': 'True'}),
            'field_name': ('django.db.models.fields.CharField', [], {'max_length': '128', 'db_index': 'True'}),
            'human_name': ('django.db.models.fields.CharField', [], {'db_index': 'True', 'max_length': '128', 'null': 'True', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'last_updated': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'auto_now_add': 'True', 'blank': 'True'}),
            'parent': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['c2g.ExamScore']"}),
            'subscore': ('django.db.models.fields.FloatField', [], {'default': '0'}),
            'time_created': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'value': ('django.db.models.fields.CharField', [], {'max_length': '128', 'null': 'True', 'blank': 'True'})
        },
        'c2g.exercise': {
            'Meta': {'object_name': 'Exercise', 'db_table': "u'c2g_exercises'"},
            'file': ('django.db.models.fields.files.FileField', [], {'max_length': '100', 'null': 'True'}),
            'fileName': ('django.db.models.fields.CharField', [], {'max_length': '255'}),
            'handle': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True', 'db_index': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'is_deleted': ('django.db.models.fields.IntegerField', [], {'default': '0'}),
            'last_updated': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'auto_now_add': 'True', 'blank': 'True'}),
            'problemSet': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['c2g.ProblemSet']", 'through': "orm['c2g.ProblemSetToExercise']", 'symmetrical': 'False'}),
            'time_created': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'video': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['c2g.Video']", 'through': "orm['c2g.VideoToExercise']", 'symmetrical': 'False'})
        },
        'c2g.file': {
            'Meta': {'object_name': 'File', 'db_table': "u'c2g_files'"},
            'course': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['c2g.Course']"}),
            'file': ('django.db.models.fields.files.FileField', [], {'max_length': '100'}),
            'handle': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True', 'db_index': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'image': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'to': "orm['c2g.File']"}),
            'index': ('django.db.models.fields.IntegerField', [], {'null': 'True', 'blank': 'True'}),
            'is_deleted': ('django.db.models.fields.IntegerField', [], {'default': '0'}),
            'last_updated': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'auto_now_add': 'True', 'blank': 'True'}),
            'live_datetime': ('django.db.models.fields.DateTimeField', [], {'null': 'True', 'blank': 'True'}),
            'mode': ('django.db.models.fields.TextField', [], {'blank': 'True'}),
            'section': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['c2g.ContentSection']", 'null': 'True'}),
            'time_created': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'title': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True', 'blank': 'True'})
        },
        'c2g.institution': {
            'Meta': {'object_name': 'Institution', 'db_table': "u'c2g_institutions'"},
            'city': ('django.db.models.fields.TextField', [], {'blank': 'True'}),
            'country': ('django.db.models.fields.TextField', [], {'blank': 'True'}),
            'domains': ('django.db.models.fields.TextField', [], {'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'last_updated': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'auto_now_add': 'True', 'blank': 'True'}),
            'time_created': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'title': ('django.db.models.fields.TextField', [], {})
        },
        'c2g.instructor': {
            'Meta': {'object_name': 'Instructor'},
            'biography': ('django.db.models.fields.TextField', [], {'blank': 'True'}),
            'email': ('django.db.models.fields.TextField', [], {'blank': 'True'}),
            'handle': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True', 'db_index': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'last_updated': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'auto_now_add': 'True', 'blank': 'True'}),
            'name': ('django.db.models.fields.TextField', [], {'blank': 'True'}),
            'photo': ('django.db.models.fields.files.FileField', [], {'max_length': '100', 'blank': 'True'}),
            'time_created': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'})
        },
        'c2g.listemail': {
            'Meta': {'object_name': 'ListEmail'},
            'from_addr': ('django.db.models.fields.CharField', [], {'max_length': '128', 'blank': 'True'}),
            'from_name': ('django.db.models.fields.CharField', [], {'max_length': '128', 'blank': 'True'}),
            'hash': ('django.db.models.fields.CharField', [], {'max_length': '128', 'db_index': 'True'}),
            'html_message': ('django.db.models.fields.TextField', [], {'null': 'True', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'last_updated': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'auto_now_add': 'True', 'blank': 'True'}),
            'sender': ('django.db.models.fields.related.ForeignKey', [], {'default': '1', 'to': "orm['auth.User']", 'null': 'True', 'blank': 'True'}),
            'subject': ('django.db.models.fields.CharField', [], {'max_length': '128', 'blank': 'True'}),
            'time_created': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'to_list': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['c2g.MailingList']"})
        },
        'c2g.mailinglist': {
            'Meta': {'object_name': 'MailingList'},
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'members': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['c2g.EmailAddr']", 'symmetrical': 'False'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '128', 'blank': 'True'})
        },
        'c2g.newsevent': {
            'Meta': {'object_name': 'NewsEvent', 'db_table': "u'c2g_news_events'"},
            'course': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['c2g.Course']"}),
            'event': ('django.db.models.fields.CharField', [], {'max_length': '255'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'time_created': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'})
        },
        'c2g.pagevisitlog': {
            'Meta': {'object_name': 'PageVisitLog', 'db_table': "u'c2g_page_visit_log'"},
            'course': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['c2g.Course']"}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'last_updated': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'auto_now_add': 'True', 'blank': 'True'}),
            'object_id': ('django.db.models.fields.CharField', [], {'max_length': '128', 'blank': 'True'}),
            'page_type': ('django.db.models.fields.CharField', [], {'max_length': '128', 'db_index': 'True'}),
            'time_created': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'user': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['auth.User']"})
        },
        'c2g.problemactivity': {
            'Meta': {'object_name': 'ProblemActivity', 'db_table': "u'c2g_problem_activity'"},
            'attempt_content': ('django.db.models.fields.TextField', [], {'null': 'True', 'blank': 'True'}),
            'attempt_number': ('django.db.models.fields.IntegerField', [], {'null': 'True', 'blank': 'True'}),
            'card': ('django.db.models.fields.TextField', [], {'blank': 'True'}),
            'cards_done': ('django.db.models.fields.IntegerField', [], {'null': 'True', 'blank': 'True'}),
            'cards_left': ('django.db.models.fields.IntegerField', [], {'null': 'True', 'blank': 'True'}),
            'casing': ('django.db.models.fields.TextField', [], {'blank': 'True'}),
            'complete': ('django.db.models.fields.IntegerField', [], {'null': 'True', 'blank': 'True'}),
            'count_hints': ('django.db.models.fields.IntegerField', [], {'null': 'True', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'last_updated': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'auto_now_add': 'True', 'blank': 'True'}),
            'problem_identifier': ('django.db.models.fields.CharField', [], {'max_length': '255', 'blank': 'True'}),
            'problem_type': ('django.db.models.fields.TextField', [], {'blank': 'True'}),
            'problemset_to_exercise': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['c2g.ProblemSetToExercise']", 'null': 'True'}),
            'review_mode': ('django.db.models.fields.IntegerField', [], {'null': 'True', 'blank': 'True'}),
            'seed': ('django.db.models.fields.TextField', [], {'blank': 'True'}),
            'sha1': ('django.db.models.fields.TextField', [], {'blank': 'True'}),
            'student': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['auth.User']"}),
            'time_created': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'time_taken': ('django.db.models.fields.IntegerField', [], {'null': 'True', 'blank': 'True'}),
            'topic_mode': ('django.db.models.fields.IntegerField', [], {'null': 'True', 'blank': 'True'}),
            'user_choices': ('django.db.models.fields.CharField', [], {'max_length': '1024', 'null': 'True', 'blank': 'True'}),
            'user_selection_val': ('django.db.models.fields.CharField', [], {'max_length': '1024', 'null': 'True', 'blank': 'True'}),
            'video_to_exercise': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['c2g.VideoToExercise']", 'null': 'True'})
        },
        'c2g.problemset': {
            'Meta': {'object_name': 'ProblemSet', 'db_table': "u'c2g_problem_sets'"},
            'assessment_type': ('django.db.models.fields.CharField', [], {'max_length': '255'}),
            'course': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['c2g.Course']"}),
            'description': ('django.db.models.fields.TextField', [], {'blank': 'True'}),
            'due_date': ('django.db.models.fields.DateTimeField', [], {'null': 'True'}),
            'grace_period': ('django.db.models.fields.DateTimeField', [], {}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'image': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'to': "orm['c2g.ProblemSet']"}),
            'index': ('django.db.models.fields.IntegerField', [], {'null': 'True', 'blank': 'True'}),
            'is_deleted': ('django.db.models.fields.IntegerField', [], {'default': '0'}),
            'last_updated': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'auto_now_add': 'True', 'blank': 'True'}),
            'late_penalty': ('django.db.models.fields.IntegerField', [], {}),
            'live_datetime': ('django.db.models.fields.DateTimeField', [], {'null': 'True', 'blank': 'True'}),
            'mode': ('django.db.models.fields.TextField', [], {'blank': 'True'}),
            'partial_credit_deadline': ('django.db.models.fields.DateTimeField', [], {}),
            'path': ('django.db.models.fields.CharField', [], {'max_length': '255'}),
            'randomize': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'resubmission_penalty': ('django.db.models.fields.IntegerField', [], {}),
            'section': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['c2g.ContentSection']"}),
            'slug': ('django.db.models.fields.SlugField', [], {'max_length': '50'}),
            'submissions_permitted': ('django.db.models.fields.IntegerField', [], {}),
            'time_created': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'title': ('django.db.models.fields.CharField', [], {'max_length': '255'})
        },
        'c2g.problemsettoexercise': {
            'Meta': {'object_name': 'ProblemSetToExercise', 'db_table': "u'c2g_problemset_to_exercise'"},
            'exercise': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['c2g.Exercise']"}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'image': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['c2g.ProblemSetToExercise']", 'null': 'True', 'blank': 'True'}),
            'is_deleted': ('django.db.models.fields.IntegerField', [], {'default': '0'}),
            'mode': ('django.db.models.fields.TextField', [], {'blank': 'True'}),
            'number': ('django.db.models.fields.IntegerField', [], {'null': 'True', 'blank': 'True'}),
            'problemSet': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['c2g.ProblemSet']"})
        },
        'c2g.studentexamstart': {
            'Meta': {'object_name': 'StudentExamStart'},
            'exam': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['c2g.Exam']"}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'last_updated': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'auto_now_add': 'True', 'blank': 'True'}),
            'student': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['auth.User']"}),
            'time_created': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'})
        },
        'c2g.studentinvitation': {
            'Meta': {'object_name': 'StudentInvitation'},
            'course': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['c2g.Course']"}),
            'email': ('django.db.models.fields.CharField', [], {'max_length': '128', 'db_index': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'last_updated': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'auto_now_add': 'True', 'blank': 'True'}),
            'time_created': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'})
        },
        'c2g.studentsection': {
            'Meta': {'object_name': 'StudentSection', 'db_table': "u'c2g_sections'"},
            'capacity': ('django.db.models.fields.IntegerField', [], {'default': '999'}),
            'course': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['c2g.Course']"}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'is_deleted': ('django.db.models.fields.IntegerField', [], {'default': '0'}),
            'last_updated': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'auto_now_add': 'True', 'blank': 'True'}),
            'members': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['auth.User']", 'symmetrical': 'False'}),
            'time_created': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'title': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True', 'blank': 'True'})
        },
        'c2g.userprofile': {
            'Meta': {'object_name': 'UserProfile', 'db_table': "u'c2g_user_profiles'"},
            'accept_language': ('django.db.models.fields.CharField', [], {'max_length': '64', 'null': 'True'}),
            'accept_language_first': ('django.db.models.fields.CharField', [], {'max_length': '64', 'null': 'True'}),
            'birth_year': ('django.db.models.fields.CharField', [], {'max_length': '64', 'null': 'True'}),
            'certificates': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['c2g.CourseCertificate']", 'symmetrical': 'False'}),
            'client_ip': ('django.db.models.fields.CharField', [], {'max_length': '30', 'null': 'True'}),
            'client_ip_first': ('django.db.models.fields.CharField', [], {'max_length': '30', 'null': 'True'}),
            'education': ('django.db.models.fields.CharField', [], {'max_length': '64', 'null': 'True'}),
            'email_me': ('django.db.models.fields.BooleanField', [], {'default': 'True'}),
            'gender': ('django.db.models.fields.CharField', [], {'max_length': '64', 'null': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'institutions': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['c2g.Institution']", 'symmetrical': 'False'}),
            'last_updated': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'auto_now_add': 'True', 'blank': 'True'}),
            'piazza_email': ('django.db.models.fields.CharField', [], {'max_length': '128', 'blank': 'True'}),
            'piazza_name': ('django.db.models.fields.CharField', [], {'max_length': '128', 'blank': 'True'}),
            'referrer': ('django.db.models.fields.CharField', [], {'max_length': '256', 'null': 'True'}),
            'referrer_first': ('django.db.models.fields.CharField', [], {'max_length': '256', 'null': 'True'}),
            'site_data': ('django.db.models.fields.TextField', [], {'blank': 'True'}),
            'time_created': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'user': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['auth.User']", 'unique': 'True'}),
            'user_agent': ('django.db.models.fields.CharField', [], {'max_length': '256', 'null': 'True'}),
            'user_agent_first': ('django.db.models.fields.CharField', [], {'max_length': '256', 'null': 'True'}),
            'work': ('django.db.models.fields.CharField', [], {'max_length': '128', 'null': 'True'})
        },
        'c2g.video': {
            'Meta': {'object_name': 'Video', 'db_table': "u'c2g_videos'"},
            'course': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['c2g.Course']"}),
            'description': ('django.db.models.fields.TextField', [], {'blank': 'True'}),
            'duration': ('django.db.models.fields.IntegerField', [], {'null': 'True', 'blank': 'True'}),
            'exam': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['c2g.Exam']", 'null': 'True', 'blank': 'True'}),
            'file': ('django.db.models.fields.files.FileField', [], {'max_length': '100'}),
            'handle': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True', 'db_index': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'image': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'to': "orm['c2g.Video']"}),
            'index': ('django.db.models.fields.IntegerField', [], {'null': 'True', 'blank': 'True'}),
            'is_deleted': ('django.db.models.fields.IntegerField', [], {'default': '0'}),
            'last_updated': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'auto_now_add': 'True', 'blank': 'True'}),
            'live_datetime': ('django.db.models.fields.DateTimeField', [], {'null': 'True', 'blank': 'True'}),
            'mode': ('django.db.models.fields.TextField', [], {'blank': 'True'}),
            'section': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['c2g.ContentSection']", 'null': 'True'}),
            'slug': ('django.db.models.fields.SlugField', [], {'max_length': '255', 'null': 'True'}),
            'time_created': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'title': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True', 'blank': 'True'}),
            'type': ('django.db.models.fields.CharField', [], {'default': "'youtube'", 'max_length': '30'}),
            'url': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True', 'blank': 'True'})
        },
        'c2g.videoactivity': {
            'Meta': {'object_name': 'VideoActivity', 'db_table': "u'c2g_video_activity'"},
            'course': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['c2g.Course']"}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'max_end_seconds': ('django.db.models.fields.IntegerField', [], {'default': '0', 'blank': 'True'}),
            'start_seconds': ('django.db.models.fields.IntegerField', [], {'default': '0', 'blank': 'True'}),
            'student': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['auth.User']"}),
            'video': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['c2g.Video']"})
        },
        'c2g.videodownload': {
            'Meta': {'object_name': 'VideoDownload', 'db_table': "u'c2g_video_download'"},
            'course': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['c2g.Course']"}),
            'download_date': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'format': ('django.db.models.fields.CharField', [], {'max_length': '35', 'null': 'True', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'student': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['auth.User']"}),
            'video': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['c2g.Video']"})
        },
        'c2g.videotoexercise': {
            'Meta': {'object_name': 'VideoToExercise', 'db_table': "u'c2g_video_to_exercise'"},
            'exercise': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['c2g.Exercise']"}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'image': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['c2g.VideoToExercise']", 'null': 'True', 'blank': 'True'}),
            'is_deleted': ('django.db.models.fields.IntegerField', [], {'default': '0'}),
            'mode': ('django.db.models.fields.TextField', [], {'blank': 'True'}),
            'video': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['c2g.Video']"}),
            'video_time': ('django.db.models.fields.IntegerField', [], {})
        },
        'c2g.videoviewtraces': {
            'Meta': {'object_name': 'VideoViewTraces', 'db_table': "u'c2g_video_view_traces'"},
            'course': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['c2g.Course']"}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'last_updated': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'auto_now_add': 'True', 'blank': 'True'}),
            'time_created': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'trace': ('django.db.models.fields.TextField', [], {'blank': 'True'}),
            'user': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['auth.User']"}),
            'video': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['c2g.Video']"})
        },
        'contenttypes.contenttype': {
            'Meta': {'ordering': "('name',)", 'unique_together': "(('app_label', 'model'),)", 'object_name': 'ContentType', 'db_table': "'django_content_type'"},
            'app_label': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'model': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '100'})
        }
    }

    complete_apps = ['c2g']
########NEW FILE########
__FILENAME__ = 0012_auto__add_field_coursestudentscore_total
# -*- coding: utf-8 -*-
import datetime
from south.db import db
from south.v2 import SchemaMigration
from django.db import models


class Migration(SchemaMigration):

    def forwards(self, orm):
        # Adding field 'CourseStudentScore.total'
        db.add_column('c2g_coursestudentscore', 'total',
                      self.gf('django.db.models.fields.FloatField')(null=True, blank=True),
                      keep_default=False)


    def backwards(self, orm):
        # Deleting field 'CourseStudentScore.total'
        db.delete_column('c2g_coursestudentscore', 'total')


    models = {
        'auth.group': {
            'Meta': {'object_name': 'Group'},
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '80'}),
            'permissions': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['auth.Permission']", 'symmetrical': 'False', 'blank': 'True'})
        },
        'auth.permission': {
            'Meta': {'ordering': "('content_type__app_label', 'content_type__model', 'codename')", 'unique_together': "(('content_type', 'codename'),)", 'object_name': 'Permission'},
            'codename': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'content_type': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['contenttypes.ContentType']"}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '50'})
        },
        'auth.user': {
            'Meta': {'object_name': 'User'},
            'date_joined': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
            'email': ('django.db.models.fields.EmailField', [], {'max_length': '75', 'blank': 'True'}),
            'first_name': ('django.db.models.fields.CharField', [], {'max_length': '30', 'blank': 'True'}),
            'groups': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['auth.Group']", 'symmetrical': 'False', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'is_active': ('django.db.models.fields.BooleanField', [], {'default': 'True'}),
            'is_staff': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'is_superuser': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'last_login': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
            'last_name': ('django.db.models.fields.CharField', [], {'max_length': '30', 'blank': 'True'}),
            'password': ('django.db.models.fields.CharField', [], {'max_length': '128'}),
            'user_permissions': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['auth.Permission']", 'symmetrical': 'False', 'blank': 'True'}),
            'username': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '30'})
        },
        'c2g.additionalpage': {
            'Meta': {'object_name': 'AdditionalPage', 'db_table': "u'c2g_additional_pages'"},
            'course': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['c2g.Course']"}),
            'description': ('django.db.models.fields.TextField', [], {'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'image': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'to': "orm['c2g.AdditionalPage']"}),
            'index': ('django.db.models.fields.IntegerField', [], {'null': 'True', 'blank': 'True'}),
            'is_deleted': ('django.db.models.fields.IntegerField', [], {'default': '0'}),
            'last_updated': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'auto_now_add': 'True', 'blank': 'True'}),
            'live_datetime': ('django.db.models.fields.DateTimeField', [], {'null': 'True', 'blank': 'True'}),
            'menu_slug': ('django.db.models.fields.SlugField', [], {'max_length': '255', 'null': 'True', 'blank': 'True'}),
            'mode': ('django.db.models.fields.TextField', [], {'blank': 'True'}),
            'section': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['c2g.ContentSection']", 'null': 'True'}),
            'slug': ('django.db.models.fields.SlugField', [], {'max_length': '255', 'null': 'True', 'blank': 'True'}),
            'time_created': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'title': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True', 'blank': 'True'})
        },
        'c2g.announcement': {
            'Meta': {'object_name': 'Announcement', 'db_table': "u'c2g_announcements'"},
            'course': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['c2g.Course']"}),
            'description': ('django.db.models.fields.TextField', [], {'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'image': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'to': "orm['c2g.Announcement']"}),
            'index': ('django.db.models.fields.IntegerField', [], {'null': 'True', 'blank': 'True'}),
            'is_deleted': ('django.db.models.fields.IntegerField', [], {'default': '0'}),
            'last_updated': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'auto_now_add': 'True', 'blank': 'True'}),
            'live_datetime': ('django.db.models.fields.DateTimeField', [], {'null': 'True', 'blank': 'True'}),
            'mode': ('django.db.models.fields.TextField', [], {'blank': 'True'}),
            'owner': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['auth.User']"}),
            'time_created': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'title': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True', 'blank': 'True'})
        },
        'c2g.contentgroup': {
            'Meta': {'object_name': 'ContentGroup', 'db_table': "u'c2g_content_group'"},
            'additional_page': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['c2g.AdditionalPage']", 'null': 'True', 'blank': 'True'}),
            'course': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['c2g.Course']"}),
            'display_style': ('django.db.models.fields.CharField', [], {'default': "'list'", 'max_length': '32', 'blank': 'True'}),
            'exam': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['c2g.Exam']", 'null': 'True', 'blank': 'True'}),
            'file': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['c2g.File']", 'null': 'True', 'blank': 'True'}),
            'group_id': ('django.db.models.fields.IntegerField', [], {'db_index': 'True', 'null': 'True', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'level': ('django.db.models.fields.IntegerField', [], {'db_index': 'True'}),
            'problemSet': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['c2g.ProblemSet']", 'null': 'True', 'blank': 'True'}),
            'video': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['c2g.Video']", 'null': 'True', 'blank': 'True'})
        },
        'c2g.contentsection': {
            'Meta': {'object_name': 'ContentSection', 'db_table': "u'c2g_content_sections'"},
            'course': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['c2g.Course']"}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'image': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'to': "orm['c2g.ContentSection']"}),
            'index': ('django.db.models.fields.IntegerField', [], {'null': 'True', 'blank': 'True'}),
            'is_deleted': ('django.db.models.fields.IntegerField', [], {'default': '0'}),
            'last_updated': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'auto_now_add': 'True', 'blank': 'True'}),
            'live_datetime': ('django.db.models.fields.DateTimeField', [], {'null': 'True', 'blank': 'True'}),
            'mode': ('django.db.models.fields.TextField', [], {'blank': 'True'}),
            'slug': ('django.db.models.fields.SlugField', [], {'max_length': '255', 'null': 'True', 'blank': 'True'}),
            'subtitle': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True', 'blank': 'True'}),
            'time_created': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'title': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True', 'blank': 'True'})
        },
        'c2g.course': {
            'Meta': {'object_name': 'Course', 'db_table': "u'c2g_courses'"},
            'accompanying_materials': ('django.db.models.fields.TextField', [], {'blank': 'True'}),
            'calendar_end': ('django.db.models.fields.DateField', [], {'null': 'True', 'blank': 'True'}),
            'calendar_start': ('django.db.models.fields.DateField', [], {'null': 'True', 'blank': 'True'}),
            'contact': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True', 'blank': 'True'}),
            'description': ('django.db.models.fields.TextField', [], {'blank': 'True'}),
            'faq': ('django.db.models.fields.TextField', [], {'blank': 'True'}),
            'handle': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True', 'db_index': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'image': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'to': "orm['c2g.Course']"}),
            'institution': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['c2g.Institution']", 'null': 'True'}),
            'institution_only': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'instructor_group': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'instructor_group'", 'to': "orm['auth.Group']"}),
            'is_deleted': ('django.db.models.fields.IntegerField', [], {'default': '0'}),
            'last_updated': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'auto_now_add': 'True', 'blank': 'True'}),
            'list_publicly': ('django.db.models.fields.IntegerField', [], {'null': 'True', 'blank': 'True'}),
            'live_datetime': ('django.db.models.fields.DateTimeField', [], {'null': 'True', 'blank': 'True'}),
            'logo': ('django.db.models.fields.files.FileField', [], {'max_length': '100', 'null': 'True', 'blank': 'True'}),
            'mode': ('django.db.models.fields.TextField', [], {'blank': 'True'}),
            'outcomes': ('django.db.models.fields.TextField', [], {'blank': 'True'}),
            'piazza_id': ('django.db.models.fields.IntegerField', [], {'null': 'True', 'blank': 'True'}),
            'preenroll_only': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'prerequisites': ('django.db.models.fields.TextField', [], {'blank': 'True'}),
            'preview_only_mode': ('django.db.models.fields.BooleanField', [], {'default': 'True'}),
            'readonly_tas_group': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'readonly_tas_group'", 'to': "orm['auth.Group']"}),
            'share_to': ('django.db.models.fields.related.ManyToManyField', [], {'blank': 'True', 'related_name': "'share_from'", 'null': 'True', 'symmetrical': 'False', 'to': "orm['c2g.Course']"}),
            'short_description': ('django.db.models.fields.TextField', [], {'blank': 'True'}),
            'student_group': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'student_group'", 'to': "orm['auth.Group']"}),
            'syllabus': ('django.db.models.fields.TextField', [], {'blank': 'True'}),
            'tas_group': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'tas_group'", 'to': "orm['auth.Group']"}),
            'term': ('django.db.models.fields.TextField', [], {'blank': 'True'}),
            'time_created': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'title': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True', 'blank': 'True'}),
            'twitter_tag': ('django.db.models.fields.CharField', [], {'max_length': '64', 'null': 'True', 'blank': 'True'}),
            'year': ('django.db.models.fields.IntegerField', [], {'null': 'True', 'blank': 'True'})
        },
        'c2g.coursecertificate': {
            'Meta': {'object_name': 'CourseCertificate'},
            'assets': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'course': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['c2g.Course']"}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'last_updated': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'auto_now_add': 'True', 'blank': 'True'}),
            'storage': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'time_created': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'type': ('django.db.models.fields.CharField', [], {'default': "'completion'", 'max_length': '64'})
        },
        'c2g.courseemail': {
            'Meta': {'object_name': 'CourseEmail', 'db_table': "u'c2g_course_emails'"},
            'course': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['c2g.Course']"}),
            'hash': ('django.db.models.fields.CharField', [], {'max_length': '128', 'db_index': 'True'}),
            'html_message': ('django.db.models.fields.TextField', [], {'null': 'True', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'last_updated': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'auto_now_add': 'True', 'blank': 'True'}),
            'sender': ('django.db.models.fields.related.ForeignKey', [], {'default': '1', 'to': "orm['auth.User']", 'null': 'True', 'blank': 'True'}),
            'subject': ('django.db.models.fields.CharField', [], {'max_length': '128', 'blank': 'True'}),
            'time_created': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'to': ('django.db.models.fields.CharField', [], {'default': "'myself'", 'max_length': '64'})
        },
        'c2g.courseinstructor': {
            'Meta': {'object_name': 'CourseInstructor', 'db_table': "u'c2g_course_instructor'"},
            'course': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['c2g.Course']"}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'instructor': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['c2g.Instructor']"}),
            'last_updated': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'auto_now_add': 'True', 'blank': 'True'}),
            'time_created': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'})
        },
        'c2g.coursestudentlist': {
            'Meta': {'object_name': 'CourseStudentList'},
            'course': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['c2g.Course']"}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'last_updated': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'auto_now_add': 'True', 'blank': 'True'}),
            'max_completion_level': ('django.db.models.fields.IntegerField', [], {'default': '0'}),
            'members': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['auth.User']", 'symmetrical': 'False'}),
            'time_created': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'})
        },
        'c2g.coursestudentscore': {
            'Meta': {'unique_together': "(('course', 'student', 'tag'),)", 'object_name': 'CourseStudentScore'},
            'course': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['c2g.Course']"}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'last_updated': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'auto_now_add': 'True', 'blank': 'True'}),
            'score': ('django.db.models.fields.FloatField', [], {'null': 'True', 'blank': 'True'}),
            'student': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['auth.User']"}),
            'tag': ('django.db.models.fields.CharField', [], {'max_length': '128', 'db_index': 'True'}),
            'time_created': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'total': ('django.db.models.fields.FloatField', [], {'null': 'True', 'blank': 'True'})
        },
        'c2g.currenttermmap': {
            'Meta': {'object_name': 'CurrentTermMap'},
            'course_prefix': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '64', 'db_index': 'True'}),
            'course_suffix': ('django.db.models.fields.CharField', [], {'max_length': '64'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'last_updated': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'auto_now_add': 'True', 'blank': 'True'}),
            'time_created': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'})
        },
        'c2g.emailaddr': {
            'Meta': {'object_name': 'EmailAddr'},
            'addr': ('django.db.models.fields.EmailField', [], {'max_length': '128'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '128', 'null': 'True', 'blank': 'True'}),
            'optout': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'optout_code': ('django.db.models.fields.CharField', [], {'default': "'optout'", 'max_length': '64'})
        },
        'c2g.exam': {
            'Meta': {'object_name': 'Exam'},
            'assessment_type': ('django.db.models.fields.CharField', [], {'max_length': '64', 'null': 'True', 'blank': 'True'}),
            'autograde': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'course': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['c2g.Course']"}),
            'description': ('django.db.models.fields.TextField', [], {'null': 'True', 'blank': 'True'}),
            'display_single': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'due_date': ('django.db.models.fields.DateTimeField', [], {'null': 'True', 'blank': 'True'}),
            'exam_type': ('django.db.models.fields.CharField', [], {'default': "'exam'", 'max_length': '32'}),
            'grace_period': ('django.db.models.fields.DateTimeField', [], {'null': 'True', 'blank': 'True'}),
            'grade_single': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'hide_grades': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'html_content': ('django.db.models.fields.TextField', [], {'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'image': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'to': "orm['c2g.Exam']"}),
            'index': ('django.db.models.fields.IntegerField', [], {'null': 'True', 'blank': 'True'}),
            'invideo': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'is_deleted': ('django.db.models.fields.IntegerField', [], {'default': '0'}),
            'last_updated': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'auto_now_add': 'True', 'blank': 'True'}),
            'late_penalty': ('django.db.models.fields.IntegerField', [], {'default': '0', 'null': 'True', 'blank': 'True'}),
            'live_datetime': ('django.db.models.fields.DateTimeField', [], {'null': 'True', 'blank': 'True'}),
            'minutes_btw_attempts': ('django.db.models.fields.IntegerField', [], {'default': '0'}),
            'minutesallowed': ('django.db.models.fields.IntegerField', [], {'null': 'True', 'blank': 'True'}),
            'mode': ('django.db.models.fields.TextField', [], {'blank': 'True'}),
            'partial_credit_deadline': ('django.db.models.fields.DateTimeField', [], {'null': 'True', 'blank': 'True'}),
            'quizdown': ('django.db.models.fields.TextField', [], {'null': 'True', 'blank': 'True'}),
            'resubmission_penalty': ('django.db.models.fields.IntegerField', [], {'default': '0', 'null': 'True', 'blank': 'True'}),
            'section': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['c2g.ContentSection']", 'null': 'True'}),
            'slug': ('django.db.models.fields.SlugField', [], {'max_length': '255', 'null': 'True'}),
            'submissions_permitted': ('django.db.models.fields.IntegerField', [], {'default': '999', 'null': 'True', 'blank': 'True'}),
            'time_created': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'timed': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'title': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True', 'blank': 'True'}),
            'total_score': ('django.db.models.fields.FloatField', [], {'null': 'True', 'blank': 'True'}),
            'xml_imported': ('django.db.models.fields.TextField', [], {'null': 'True', 'blank': 'True'}),
            'xml_metadata': ('django.db.models.fields.TextField', [], {'null': 'True', 'blank': 'True'})
        },
        'c2g.examrecord': {
            'Meta': {'object_name': 'ExamRecord'},
            'attempt_number': ('django.db.models.fields.IntegerField', [], {'default': '0'}),
            'complete': ('django.db.models.fields.BooleanField', [], {'default': 'True'}),
            'course': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['c2g.Course']"}),
            'exam': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['c2g.Exam']"}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'json_data': ('django.db.models.fields.TextField', [], {'null': 'True', 'blank': 'True'}),
            'json_score_data': ('django.db.models.fields.TextField', [], {'null': 'True', 'blank': 'True'}),
            'last_updated': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'auto_now_add': 'True', 'blank': 'True'}),
            'late': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'onpage': ('django.db.models.fields.CharField', [], {'max_length': '512', 'null': 'True', 'blank': 'True'}),
            'score': ('django.db.models.fields.FloatField', [], {'null': 'True', 'blank': 'True'}),
            'student': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['auth.User']"}),
            'time_created': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'})
        },
        'c2g.examrecordfieldlog': {
            'Meta': {'object_name': 'ExamRecordFieldLog'},
            'course': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['c2g.Course']"}),
            'exam': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['c2g.Exam']"}),
            'field_name': ('django.db.models.fields.CharField', [], {'max_length': '128', 'db_index': 'True'}),
            'human_name': ('django.db.models.fields.CharField', [], {'db_index': 'True', 'max_length': '128', 'null': 'True', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'last_updated': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'auto_now_add': 'True', 'blank': 'True'}),
            'max_score': ('django.db.models.fields.FloatField', [], {'default': '0', 'blank': 'True'}),
            'raw_score': ('django.db.models.fields.FloatField', [], {'default': '0', 'blank': 'True'}),
            'student': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['auth.User']"}),
            'time_created': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'value': ('django.db.models.fields.TextField', [], {'null': 'True', 'blank': 'True'})
        },
        'c2g.examrecordscore': {
            'Meta': {'object_name': 'ExamRecordScore'},
            'csv_imported': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'last_updated': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'auto_now_add': 'True', 'blank': 'True'}),
            'raw_score': ('django.db.models.fields.FloatField', [], {'null': 'True', 'blank': 'True'}),
            'record': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['c2g.ExamRecord']", 'unique': 'True'}),
            'time_created': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'})
        },
        'c2g.examrecordscorefield': {
            'Meta': {'object_name': 'ExamRecordScoreField'},
            'associated_text': ('django.db.models.fields.TextField', [], {'null': 'True', 'blank': 'True'}),
            'comments': ('django.db.models.fields.TextField', [], {'null': 'True', 'blank': 'True'}),
            'correct': ('django.db.models.fields.NullBooleanField', [], {'null': 'True', 'blank': 'True'}),
            'field_name': ('django.db.models.fields.CharField', [], {'max_length': '128', 'db_index': 'True'}),
            'human_name': ('django.db.models.fields.CharField', [], {'db_index': 'True', 'max_length': '128', 'null': 'True', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'last_updated': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'auto_now_add': 'True', 'blank': 'True'}),
            'parent': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['c2g.ExamRecordScore']"}),
            'subscore': ('django.db.models.fields.FloatField', [], {'default': '0'}),
            'time_created': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'value': ('django.db.models.fields.TextField', [], {'null': 'True', 'blank': 'True'})
        },
        'c2g.examrecordscorefieldchoice': {
            'Meta': {'object_name': 'ExamRecordScoreFieldChoice'},
            'associated_text': ('django.db.models.fields.TextField', [], {'null': 'True', 'blank': 'True'}),
            'choice_value': ('django.db.models.fields.CharField', [], {'max_length': '128', 'db_index': 'True'}),
            'correct': ('django.db.models.fields.NullBooleanField', [], {'null': 'True', 'blank': 'True'}),
            'human_name': ('django.db.models.fields.CharField', [], {'db_index': 'True', 'max_length': '128', 'null': 'True', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'last_updated': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'auto_now_add': 'True', 'blank': 'True'}),
            'parent': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['c2g.ExamRecordScoreField']"}),
            'time_created': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'})
        },
        'c2g.examscore': {
            'Meta': {'unique_together': "(('exam', 'student'),)", 'object_name': 'ExamScore'},
            'course': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['c2g.Course']"}),
            'csv_imported': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'exam': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['c2g.Exam']"}),
            'examrecordscore': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['c2g.ExamRecordScore']", 'null': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'last_updated': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'auto_now_add': 'True', 'blank': 'True'}),
            'score': ('django.db.models.fields.FloatField', [], {'null': 'True', 'blank': 'True'}),
            'student': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['auth.User']"}),
            'time_created': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'})
        },
        'c2g.examscorefield': {
            'Meta': {'object_name': 'ExamScoreField'},
            'associated_text': ('django.db.models.fields.TextField', [], {'null': 'True', 'blank': 'True'}),
            'comments': ('django.db.models.fields.TextField', [], {'null': 'True', 'blank': 'True'}),
            'correct': ('django.db.models.fields.NullBooleanField', [], {'null': 'True', 'blank': 'True'}),
            'field_name': ('django.db.models.fields.CharField', [], {'max_length': '128', 'db_index': 'True'}),
            'human_name': ('django.db.models.fields.CharField', [], {'db_index': 'True', 'max_length': '128', 'null': 'True', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'last_updated': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'auto_now_add': 'True', 'blank': 'True'}),
            'parent': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['c2g.ExamScore']"}),
            'subscore': ('django.db.models.fields.FloatField', [], {'default': '0'}),
            'time_created': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'value': ('django.db.models.fields.CharField', [], {'max_length': '128', 'null': 'True', 'blank': 'True'})
        },
        'c2g.exercise': {
            'Meta': {'object_name': 'Exercise', 'db_table': "u'c2g_exercises'"},
            'file': ('django.db.models.fields.files.FileField', [], {'max_length': '100', 'null': 'True'}),
            'fileName': ('django.db.models.fields.CharField', [], {'max_length': '255'}),
            'handle': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True', 'db_index': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'is_deleted': ('django.db.models.fields.IntegerField', [], {'default': '0'}),
            'last_updated': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'auto_now_add': 'True', 'blank': 'True'}),
            'problemSet': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['c2g.ProblemSet']", 'through': "orm['c2g.ProblemSetToExercise']", 'symmetrical': 'False'}),
            'time_created': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'video': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['c2g.Video']", 'through': "orm['c2g.VideoToExercise']", 'symmetrical': 'False'})
        },
        'c2g.file': {
            'Meta': {'object_name': 'File', 'db_table': "u'c2g_files'"},
            'course': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['c2g.Course']"}),
            'file': ('django.db.models.fields.files.FileField', [], {'max_length': '100'}),
            'handle': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True', 'db_index': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'image': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'to': "orm['c2g.File']"}),
            'index': ('django.db.models.fields.IntegerField', [], {'null': 'True', 'blank': 'True'}),
            'is_deleted': ('django.db.models.fields.IntegerField', [], {'default': '0'}),
            'last_updated': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'auto_now_add': 'True', 'blank': 'True'}),
            'live_datetime': ('django.db.models.fields.DateTimeField', [], {'null': 'True', 'blank': 'True'}),
            'mode': ('django.db.models.fields.TextField', [], {'blank': 'True'}),
            'section': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['c2g.ContentSection']", 'null': 'True'}),
            'time_created': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'title': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True', 'blank': 'True'})
        },
        'c2g.institution': {
            'Meta': {'object_name': 'Institution', 'db_table': "u'c2g_institutions'"},
            'city': ('django.db.models.fields.TextField', [], {'blank': 'True'}),
            'country': ('django.db.models.fields.TextField', [], {'blank': 'True'}),
            'domains': ('django.db.models.fields.TextField', [], {'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'last_updated': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'auto_now_add': 'True', 'blank': 'True'}),
            'time_created': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'title': ('django.db.models.fields.TextField', [], {})
        },
        'c2g.instructor': {
            'Meta': {'object_name': 'Instructor'},
            'biography': ('django.db.models.fields.TextField', [], {'blank': 'True'}),
            'email': ('django.db.models.fields.TextField', [], {'blank': 'True'}),
            'handle': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True', 'db_index': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'last_updated': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'auto_now_add': 'True', 'blank': 'True'}),
            'name': ('django.db.models.fields.TextField', [], {'blank': 'True'}),
            'photo': ('django.db.models.fields.files.FileField', [], {'max_length': '100', 'blank': 'True'}),
            'time_created': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'})
        },
        'c2g.listemail': {
            'Meta': {'object_name': 'ListEmail'},
            'from_addr': ('django.db.models.fields.CharField', [], {'max_length': '128', 'blank': 'True'}),
            'from_name': ('django.db.models.fields.CharField', [], {'max_length': '128', 'blank': 'True'}),
            'hash': ('django.db.models.fields.CharField', [], {'max_length': '128', 'db_index': 'True'}),
            'html_message': ('django.db.models.fields.TextField', [], {'null': 'True', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'last_updated': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'auto_now_add': 'True', 'blank': 'True'}),
            'sender': ('django.db.models.fields.related.ForeignKey', [], {'default': '1', 'to': "orm['auth.User']", 'null': 'True', 'blank': 'True'}),
            'subject': ('django.db.models.fields.CharField', [], {'max_length': '128', 'blank': 'True'}),
            'time_created': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'to_list': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['c2g.MailingList']"})
        },
        'c2g.mailinglist': {
            'Meta': {'object_name': 'MailingList'},
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'members': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['c2g.EmailAddr']", 'symmetrical': 'False'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '128', 'blank': 'True'})
        },
        'c2g.newsevent': {
            'Meta': {'object_name': 'NewsEvent', 'db_table': "u'c2g_news_events'"},
            'course': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['c2g.Course']"}),
            'event': ('django.db.models.fields.CharField', [], {'max_length': '255'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'time_created': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'})
        },
        'c2g.pagevisitlog': {
            'Meta': {'object_name': 'PageVisitLog', 'db_table': "u'c2g_page_visit_log'"},
            'course': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['c2g.Course']"}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'last_updated': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'auto_now_add': 'True', 'blank': 'True'}),
            'object_id': ('django.db.models.fields.CharField', [], {'max_length': '128', 'blank': 'True'}),
            'page_type': ('django.db.models.fields.CharField', [], {'max_length': '128', 'db_index': 'True'}),
            'time_created': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'user': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['auth.User']"})
        },
        'c2g.problemactivity': {
            'Meta': {'object_name': 'ProblemActivity', 'db_table': "u'c2g_problem_activity'"},
            'attempt_content': ('django.db.models.fields.TextField', [], {'null': 'True', 'blank': 'True'}),
            'attempt_number': ('django.db.models.fields.IntegerField', [], {'null': 'True', 'blank': 'True'}),
            'card': ('django.db.models.fields.TextField', [], {'blank': 'True'}),
            'cards_done': ('django.db.models.fields.IntegerField', [], {'null': 'True', 'blank': 'True'}),
            'cards_left': ('django.db.models.fields.IntegerField', [], {'null': 'True', 'blank': 'True'}),
            'casing': ('django.db.models.fields.TextField', [], {'blank': 'True'}),
            'complete': ('django.db.models.fields.IntegerField', [], {'null': 'True', 'blank': 'True'}),
            'count_hints': ('django.db.models.fields.IntegerField', [], {'null': 'True', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'last_updated': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'auto_now_add': 'True', 'blank': 'True'}),
            'problem_identifier': ('django.db.models.fields.CharField', [], {'max_length': '255', 'blank': 'True'}),
            'problem_type': ('django.db.models.fields.TextField', [], {'blank': 'True'}),
            'problemset_to_exercise': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['c2g.ProblemSetToExercise']", 'null': 'True'}),
            'review_mode': ('django.db.models.fields.IntegerField', [], {'null': 'True', 'blank': 'True'}),
            'seed': ('django.db.models.fields.TextField', [], {'blank': 'True'}),
            'sha1': ('django.db.models.fields.TextField', [], {'blank': 'True'}),
            'student': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['auth.User']"}),
            'time_created': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'time_taken': ('django.db.models.fields.IntegerField', [], {'null': 'True', 'blank': 'True'}),
            'topic_mode': ('django.db.models.fields.IntegerField', [], {'null': 'True', 'blank': 'True'}),
            'user_choices': ('django.db.models.fields.CharField', [], {'max_length': '1024', 'null': 'True', 'blank': 'True'}),
            'user_selection_val': ('django.db.models.fields.CharField', [], {'max_length': '1024', 'null': 'True', 'blank': 'True'}),
            'video_to_exercise': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['c2g.VideoToExercise']", 'null': 'True'})
        },
        'c2g.problemset': {
            'Meta': {'object_name': 'ProblemSet', 'db_table': "u'c2g_problem_sets'"},
            'assessment_type': ('django.db.models.fields.CharField', [], {'max_length': '255'}),
            'course': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['c2g.Course']"}),
            'description': ('django.db.models.fields.TextField', [], {'blank': 'True'}),
            'due_date': ('django.db.models.fields.DateTimeField', [], {'null': 'True'}),
            'grace_period': ('django.db.models.fields.DateTimeField', [], {}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'image': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'to': "orm['c2g.ProblemSet']"}),
            'index': ('django.db.models.fields.IntegerField', [], {'null': 'True', 'blank': 'True'}),
            'is_deleted': ('django.db.models.fields.IntegerField', [], {'default': '0'}),
            'last_updated': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'auto_now_add': 'True', 'blank': 'True'}),
            'late_penalty': ('django.db.models.fields.IntegerField', [], {}),
            'live_datetime': ('django.db.models.fields.DateTimeField', [], {'null': 'True', 'blank': 'True'}),
            'mode': ('django.db.models.fields.TextField', [], {'blank': 'True'}),
            'partial_credit_deadline': ('django.db.models.fields.DateTimeField', [], {}),
            'path': ('django.db.models.fields.CharField', [], {'max_length': '255'}),
            'randomize': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'resubmission_penalty': ('django.db.models.fields.IntegerField', [], {}),
            'section': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['c2g.ContentSection']"}),
            'slug': ('django.db.models.fields.SlugField', [], {'max_length': '50'}),
            'submissions_permitted': ('django.db.models.fields.IntegerField', [], {}),
            'time_created': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'title': ('django.db.models.fields.CharField', [], {'max_length': '255'})
        },
        'c2g.problemsettoexercise': {
            'Meta': {'object_name': 'ProblemSetToExercise', 'db_table': "u'c2g_problemset_to_exercise'"},
            'exercise': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['c2g.Exercise']"}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'image': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['c2g.ProblemSetToExercise']", 'null': 'True', 'blank': 'True'}),
            'is_deleted': ('django.db.models.fields.IntegerField', [], {'default': '0'}),
            'mode': ('django.db.models.fields.TextField', [], {'blank': 'True'}),
            'number': ('django.db.models.fields.IntegerField', [], {'null': 'True', 'blank': 'True'}),
            'problemSet': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['c2g.ProblemSet']"})
        },
        'c2g.studentexamstart': {
            'Meta': {'object_name': 'StudentExamStart'},
            'exam': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['c2g.Exam']"}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'last_updated': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'auto_now_add': 'True', 'blank': 'True'}),
            'student': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['auth.User']"}),
            'time_created': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'})
        },
        'c2g.studentinvitation': {
            'Meta': {'object_name': 'StudentInvitation'},
            'course': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['c2g.Course']"}),
            'email': ('django.db.models.fields.CharField', [], {'max_length': '128', 'db_index': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'last_updated': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'auto_now_add': 'True', 'blank': 'True'}),
            'time_created': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'})
        },
        'c2g.studentsection': {
            'Meta': {'object_name': 'StudentSection', 'db_table': "u'c2g_sections'"},
            'capacity': ('django.db.models.fields.IntegerField', [], {'default': '999'}),
            'course': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['c2g.Course']"}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'is_deleted': ('django.db.models.fields.IntegerField', [], {'default': '0'}),
            'last_updated': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'auto_now_add': 'True', 'blank': 'True'}),
            'members': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['auth.User']", 'symmetrical': 'False'}),
            'time_created': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'title': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True', 'blank': 'True'})
        },
        'c2g.userprofile': {
            'Meta': {'object_name': 'UserProfile', 'db_table': "u'c2g_user_profiles'"},
            'accept_language': ('django.db.models.fields.CharField', [], {'max_length': '64', 'null': 'True'}),
            'accept_language_first': ('django.db.models.fields.CharField', [], {'max_length': '64', 'null': 'True'}),
            'birth_year': ('django.db.models.fields.CharField', [], {'max_length': '64', 'null': 'True'}),
            'certificates': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['c2g.CourseCertificate']", 'symmetrical': 'False'}),
            'client_ip': ('django.db.models.fields.CharField', [], {'max_length': '30', 'null': 'True'}),
            'client_ip_first': ('django.db.models.fields.CharField', [], {'max_length': '30', 'null': 'True'}),
            'education': ('django.db.models.fields.CharField', [], {'max_length': '64', 'null': 'True'}),
            'email_me': ('django.db.models.fields.BooleanField', [], {'default': 'True'}),
            'gender': ('django.db.models.fields.CharField', [], {'max_length': '64', 'null': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'institutions': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['c2g.Institution']", 'symmetrical': 'False'}),
            'last_updated': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'auto_now_add': 'True', 'blank': 'True'}),
            'piazza_email': ('django.db.models.fields.CharField', [], {'max_length': '128', 'blank': 'True'}),
            'piazza_name': ('django.db.models.fields.CharField', [], {'max_length': '128', 'blank': 'True'}),
            'referrer': ('django.db.models.fields.CharField', [], {'max_length': '256', 'null': 'True'}),
            'referrer_first': ('django.db.models.fields.CharField', [], {'max_length': '256', 'null': 'True'}),
            'site_data': ('django.db.models.fields.TextField', [], {'blank': 'True'}),
            'time_created': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'user': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['auth.User']", 'unique': 'True'}),
            'user_agent': ('django.db.models.fields.CharField', [], {'max_length': '256', 'null': 'True'}),
            'user_agent_first': ('django.db.models.fields.CharField', [], {'max_length': '256', 'null': 'True'}),
            'work': ('django.db.models.fields.CharField', [], {'max_length': '128', 'null': 'True'})
        },
        'c2g.video': {
            'Meta': {'object_name': 'Video', 'db_table': "u'c2g_videos'"},
            'course': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['c2g.Course']"}),
            'description': ('django.db.models.fields.TextField', [], {'blank': 'True'}),
            'duration': ('django.db.models.fields.IntegerField', [], {'null': 'True', 'blank': 'True'}),
            'exam': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['c2g.Exam']", 'null': 'True', 'blank': 'True'}),
            'file': ('django.db.models.fields.files.FileField', [], {'max_length': '100'}),
            'handle': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True', 'db_index': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'image': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'to': "orm['c2g.Video']"}),
            'index': ('django.db.models.fields.IntegerField', [], {'null': 'True', 'blank': 'True'}),
            'is_deleted': ('django.db.models.fields.IntegerField', [], {'default': '0'}),
            'last_updated': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'auto_now_add': 'True', 'blank': 'True'}),
            'live_datetime': ('django.db.models.fields.DateTimeField', [], {'null': 'True', 'blank': 'True'}),
            'mode': ('django.db.models.fields.TextField', [], {'blank': 'True'}),
            'section': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['c2g.ContentSection']", 'null': 'True'}),
            'slug': ('django.db.models.fields.SlugField', [], {'max_length': '255', 'null': 'True'}),
            'time_created': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'title': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True', 'blank': 'True'}),
            'type': ('django.db.models.fields.CharField', [], {'default': "'youtube'", 'max_length': '30'}),
            'url': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True', 'blank': 'True'})
        },
        'c2g.videoactivity': {
            'Meta': {'object_name': 'VideoActivity', 'db_table': "u'c2g_video_activity'"},
            'course': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['c2g.Course']"}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'max_end_seconds': ('django.db.models.fields.IntegerField', [], {'default': '0', 'blank': 'True'}),
            'start_seconds': ('django.db.models.fields.IntegerField', [], {'default': '0', 'blank': 'True'}),
            'student': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['auth.User']"}),
            'video': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['c2g.Video']"})
        },
        'c2g.videodownload': {
            'Meta': {'object_name': 'VideoDownload', 'db_table': "u'c2g_video_download'"},
            'course': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['c2g.Course']"}),
            'download_date': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'format': ('django.db.models.fields.CharField', [], {'max_length': '35', 'null': 'True', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'student': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['auth.User']"}),
            'video': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['c2g.Video']"})
        },
        'c2g.videotoexercise': {
            'Meta': {'object_name': 'VideoToExercise', 'db_table': "u'c2g_video_to_exercise'"},
            'exercise': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['c2g.Exercise']"}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'image': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['c2g.VideoToExercise']", 'null': 'True', 'blank': 'True'}),
            'is_deleted': ('django.db.models.fields.IntegerField', [], {'default': '0'}),
            'mode': ('django.db.models.fields.TextField', [], {'blank': 'True'}),
            'video': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['c2g.Video']"}),
            'video_time': ('django.db.models.fields.IntegerField', [], {})
        },
        'c2g.videoviewtraces': {
            'Meta': {'object_name': 'VideoViewTraces', 'db_table': "u'c2g_video_view_traces'"},
            'course': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['c2g.Course']"}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'last_updated': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'auto_now_add': 'True', 'blank': 'True'}),
            'time_created': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'trace': ('django.db.models.fields.TextField', [], {'blank': 'True'}),
            'user': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['auth.User']"}),
            'video': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['c2g.Video']"})
        },
        'contenttypes.contenttype': {
            'Meta': {'ordering': "('name',)", 'unique_together': "(('app_label', 'model'),)", 'object_name': 'ContentType', 'db_table': "'django_content_type'"},
            'app_label': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'model': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '100'})
        }
    }

    complete_apps = ['c2g']
########NEW FILE########
__FILENAME__ = 0013_auto__add_field_exam_daily_late_penalty
# -*- coding: utf-8 -*-
import datetime
from south.db import db
from south.v2 import SchemaMigration
from django.db import models


class Migration(SchemaMigration):

    def forwards(self, orm):
        # Adding field 'Exam.daily_late_penalty'
        db.add_column('c2g_exam', 'daily_late_penalty',
                      self.gf('django.db.models.fields.FloatField')(default=0.0, null=True, blank=True),
                      keep_default=False)


    def backwards(self, orm):
        # Deleting field 'Exam.daily_late_penalty'
        db.delete_column('c2g_exam', 'daily_late_penalty')


    models = {
        'auth.group': {
            'Meta': {'object_name': 'Group'},
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '80'}),
            'permissions': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['auth.Permission']", 'symmetrical': 'False', 'blank': 'True'})
        },
        'auth.permission': {
            'Meta': {'ordering': "('content_type__app_label', 'content_type__model', 'codename')", 'unique_together': "(('content_type', 'codename'),)", 'object_name': 'Permission'},
            'codename': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'content_type': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['contenttypes.ContentType']"}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '50'})
        },
        'auth.user': {
            'Meta': {'object_name': 'User'},
            'date_joined': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
            'email': ('django.db.models.fields.EmailField', [], {'max_length': '75', 'blank': 'True'}),
            'first_name': ('django.db.models.fields.CharField', [], {'max_length': '30', 'blank': 'True'}),
            'groups': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['auth.Group']", 'symmetrical': 'False', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'is_active': ('django.db.models.fields.BooleanField', [], {'default': 'True'}),
            'is_staff': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'is_superuser': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'last_login': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
            'last_name': ('django.db.models.fields.CharField', [], {'max_length': '30', 'blank': 'True'}),
            'password': ('django.db.models.fields.CharField', [], {'max_length': '128'}),
            'user_permissions': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['auth.Permission']", 'symmetrical': 'False', 'blank': 'True'}),
            'username': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '30'})
        },
        'c2g.additionalpage': {
            'Meta': {'object_name': 'AdditionalPage', 'db_table': "u'c2g_additional_pages'"},
            'course': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['c2g.Course']"}),
            'description': ('django.db.models.fields.TextField', [], {'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'image': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'to': "orm['c2g.AdditionalPage']"}),
            'index': ('django.db.models.fields.IntegerField', [], {'null': 'True', 'blank': 'True'}),
            'is_deleted': ('django.db.models.fields.IntegerField', [], {'default': '0'}),
            'last_updated': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'auto_now_add': 'True', 'blank': 'True'}),
            'live_datetime': ('django.db.models.fields.DateTimeField', [], {'null': 'True', 'blank': 'True'}),
            'menu_slug': ('django.db.models.fields.SlugField', [], {'max_length': '255', 'null': 'True', 'blank': 'True'}),
            'mode': ('django.db.models.fields.TextField', [], {'blank': 'True'}),
            'section': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['c2g.ContentSection']", 'null': 'True'}),
            'slug': ('django.db.models.fields.SlugField', [], {'max_length': '255', 'null': 'True', 'blank': 'True'}),
            'time_created': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'title': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True', 'blank': 'True'})
        },
        'c2g.announcement': {
            'Meta': {'object_name': 'Announcement', 'db_table': "u'c2g_announcements'"},
            'course': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['c2g.Course']"}),
            'description': ('django.db.models.fields.TextField', [], {'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'image': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'to': "orm['c2g.Announcement']"}),
            'index': ('django.db.models.fields.IntegerField', [], {'null': 'True', 'blank': 'True'}),
            'is_deleted': ('django.db.models.fields.IntegerField', [], {'default': '0'}),
            'last_updated': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'auto_now_add': 'True', 'blank': 'True'}),
            'live_datetime': ('django.db.models.fields.DateTimeField', [], {'null': 'True', 'blank': 'True'}),
            'mode': ('django.db.models.fields.TextField', [], {'blank': 'True'}),
            'owner': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['auth.User']"}),
            'time_created': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'title': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True', 'blank': 'True'})
        },
        'c2g.contentgroup': {
            'Meta': {'object_name': 'ContentGroup', 'db_table': "u'c2g_content_group'"},
            'additional_page': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['c2g.AdditionalPage']", 'null': 'True', 'blank': 'True'}),
            'course': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['c2g.Course']"}),
            'display_style': ('django.db.models.fields.CharField', [], {'default': "'list'", 'max_length': '32', 'blank': 'True'}),
            'exam': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['c2g.Exam']", 'null': 'True', 'blank': 'True'}),
            'file': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['c2g.File']", 'null': 'True', 'blank': 'True'}),
            'group_id': ('django.db.models.fields.IntegerField', [], {'db_index': 'True', 'null': 'True', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'level': ('django.db.models.fields.IntegerField', [], {'db_index': 'True'}),
            'problemSet': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['c2g.ProblemSet']", 'null': 'True', 'blank': 'True'}),
            'video': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['c2g.Video']", 'null': 'True', 'blank': 'True'})
        },
        'c2g.contentsection': {
            'Meta': {'object_name': 'ContentSection', 'db_table': "u'c2g_content_sections'"},
            'course': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['c2g.Course']"}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'image': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'to': "orm['c2g.ContentSection']"}),
            'index': ('django.db.models.fields.IntegerField', [], {'null': 'True', 'blank': 'True'}),
            'is_deleted': ('django.db.models.fields.IntegerField', [], {'default': '0'}),
            'last_updated': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'auto_now_add': 'True', 'blank': 'True'}),
            'live_datetime': ('django.db.models.fields.DateTimeField', [], {'null': 'True', 'blank': 'True'}),
            'mode': ('django.db.models.fields.TextField', [], {'blank': 'True'}),
            'slug': ('django.db.models.fields.SlugField', [], {'max_length': '255', 'null': 'True', 'blank': 'True'}),
            'subtitle': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True', 'blank': 'True'}),
            'time_created': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'title': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True', 'blank': 'True'})
        },
        'c2g.course': {
            'Meta': {'object_name': 'Course', 'db_table': "u'c2g_courses'"},
            'accompanying_materials': ('django.db.models.fields.TextField', [], {'blank': 'True'}),
            'calendar_end': ('django.db.models.fields.DateField', [], {'null': 'True', 'blank': 'True'}),
            'calendar_start': ('django.db.models.fields.DateField', [], {'null': 'True', 'blank': 'True'}),
            'contact': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True', 'blank': 'True'}),
            'description': ('django.db.models.fields.TextField', [], {'blank': 'True'}),
            'faq': ('django.db.models.fields.TextField', [], {'blank': 'True'}),
            'handle': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True', 'db_index': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'image': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'to': "orm['c2g.Course']"}),
            'institution': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['c2g.Institution']", 'null': 'True'}),
            'institution_only': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'instructor_group': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'instructor_group'", 'to': "orm['auth.Group']"}),
            'is_deleted': ('django.db.models.fields.IntegerField', [], {'default': '0'}),
            'last_updated': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'auto_now_add': 'True', 'blank': 'True'}),
            'list_publicly': ('django.db.models.fields.IntegerField', [], {'null': 'True', 'blank': 'True'}),
            'live_datetime': ('django.db.models.fields.DateTimeField', [], {'null': 'True', 'blank': 'True'}),
            'logo': ('django.db.models.fields.files.FileField', [], {'max_length': '100', 'null': 'True', 'blank': 'True'}),
            'mode': ('django.db.models.fields.TextField', [], {'blank': 'True'}),
            'outcomes': ('django.db.models.fields.TextField', [], {'blank': 'True'}),
            'piazza_id': ('django.db.models.fields.IntegerField', [], {'null': 'True', 'blank': 'True'}),
            'preenroll_only': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'prerequisites': ('django.db.models.fields.TextField', [], {'blank': 'True'}),
            'preview_only_mode': ('django.db.models.fields.BooleanField', [], {'default': 'True'}),
            'readonly_tas_group': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'readonly_tas_group'", 'to': "orm['auth.Group']"}),
            'share_to': ('django.db.models.fields.related.ManyToManyField', [], {'blank': 'True', 'related_name': "'share_from'", 'null': 'True', 'symmetrical': 'False', 'to': "orm['c2g.Course']"}),
            'short_description': ('django.db.models.fields.TextField', [], {'blank': 'True'}),
            'student_group': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'student_group'", 'to': "orm['auth.Group']"}),
            'syllabus': ('django.db.models.fields.TextField', [], {'blank': 'True'}),
            'tas_group': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'tas_group'", 'to': "orm['auth.Group']"}),
            'term': ('django.db.models.fields.TextField', [], {'blank': 'True'}),
            'time_created': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'title': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True', 'blank': 'True'}),
            'twitter_tag': ('django.db.models.fields.CharField', [], {'max_length': '64', 'null': 'True', 'blank': 'True'}),
            'year': ('django.db.models.fields.IntegerField', [], {'null': 'True', 'blank': 'True'})
        },
        'c2g.coursecertificate': {
            'Meta': {'object_name': 'CourseCertificate'},
            'assets': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'course': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['c2g.Course']"}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'last_updated': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'auto_now_add': 'True', 'blank': 'True'}),
            'storage': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'time_created': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'type': ('django.db.models.fields.CharField', [], {'default': "'completion'", 'max_length': '64'})
        },
        'c2g.courseemail': {
            'Meta': {'object_name': 'CourseEmail', 'db_table': "u'c2g_course_emails'"},
            'course': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['c2g.Course']"}),
            'hash': ('django.db.models.fields.CharField', [], {'max_length': '128', 'db_index': 'True'}),
            'html_message': ('django.db.models.fields.TextField', [], {'null': 'True', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'last_updated': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'auto_now_add': 'True', 'blank': 'True'}),
            'sender': ('django.db.models.fields.related.ForeignKey', [], {'default': '1', 'to': "orm['auth.User']", 'null': 'True', 'blank': 'True'}),
            'subject': ('django.db.models.fields.CharField', [], {'max_length': '128', 'blank': 'True'}),
            'time_created': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'to': ('django.db.models.fields.CharField', [], {'default': "'myself'", 'max_length': '64'})
        },
        'c2g.courseinstructor': {
            'Meta': {'object_name': 'CourseInstructor', 'db_table': "u'c2g_course_instructor'"},
            'course': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['c2g.Course']"}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'instructor': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['c2g.Instructor']"}),
            'last_updated': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'auto_now_add': 'True', 'blank': 'True'}),
            'time_created': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'})
        },
        'c2g.coursestudentlist': {
            'Meta': {'object_name': 'CourseStudentList'},
            'course': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['c2g.Course']"}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'last_updated': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'auto_now_add': 'True', 'blank': 'True'}),
            'max_completion_level': ('django.db.models.fields.IntegerField', [], {'default': '0'}),
            'members': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['auth.User']", 'symmetrical': 'False'}),
            'time_created': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'})
        },
        'c2g.coursestudentscore': {
            'Meta': {'unique_together': "(('course', 'student', 'tag'),)", 'object_name': 'CourseStudentScore'},
            'course': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['c2g.Course']"}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'last_updated': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'auto_now_add': 'True', 'blank': 'True'}),
            'score': ('django.db.models.fields.FloatField', [], {'null': 'True', 'blank': 'True'}),
            'student': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['auth.User']"}),
            'tag': ('django.db.models.fields.CharField', [], {'max_length': '128', 'db_index': 'True'}),
            'time_created': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'total': ('django.db.models.fields.FloatField', [], {'null': 'True', 'blank': 'True'})
        },
        'c2g.currenttermmap': {
            'Meta': {'object_name': 'CurrentTermMap'},
            'course_prefix': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '64', 'db_index': 'True'}),
            'course_suffix': ('django.db.models.fields.CharField', [], {'max_length': '64'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'last_updated': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'auto_now_add': 'True', 'blank': 'True'}),
            'time_created': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'})
        },
        'c2g.emailaddr': {
            'Meta': {'object_name': 'EmailAddr'},
            'addr': ('django.db.models.fields.EmailField', [], {'max_length': '128'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '128', 'null': 'True', 'blank': 'True'}),
            'optout': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'optout_code': ('django.db.models.fields.CharField', [], {'default': "'optout'", 'max_length': '64'})
        },
        'c2g.exam': {
            'Meta': {'object_name': 'Exam'},
            'assessment_type': ('django.db.models.fields.CharField', [], {'max_length': '64', 'null': 'True', 'blank': 'True'}),
            'autograde': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'course': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['c2g.Course']"}),
            'daily_late_penalty': ('django.db.models.fields.FloatField', [], {'default': '0.0', 'null': 'True', 'blank': 'True'}),
            'description': ('django.db.models.fields.TextField', [], {'null': 'True', 'blank': 'True'}),
            'display_single': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'due_date': ('django.db.models.fields.DateTimeField', [], {'null': 'True', 'blank': 'True'}),
            'exam_type': ('django.db.models.fields.CharField', [], {'default': "'exam'", 'max_length': '32'}),
            'grace_period': ('django.db.models.fields.DateTimeField', [], {'null': 'True', 'blank': 'True'}),
            'grade_single': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'hide_grades': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'html_content': ('django.db.models.fields.TextField', [], {'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'image': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'to': "orm['c2g.Exam']"}),
            'index': ('django.db.models.fields.IntegerField', [], {'null': 'True', 'blank': 'True'}),
            'invideo': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'is_deleted': ('django.db.models.fields.IntegerField', [], {'default': '0'}),
            'last_updated': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'auto_now_add': 'True', 'blank': 'True'}),
            'late_penalty': ('django.db.models.fields.IntegerField', [], {'default': '0', 'null': 'True', 'blank': 'True'}),
            'live_datetime': ('django.db.models.fields.DateTimeField', [], {'null': 'True', 'blank': 'True'}),
            'minutes_btw_attempts': ('django.db.models.fields.IntegerField', [], {'default': '0'}),
            'minutesallowed': ('django.db.models.fields.IntegerField', [], {'null': 'True', 'blank': 'True'}),
            'mode': ('django.db.models.fields.TextField', [], {'blank': 'True'}),
            'partial_credit_deadline': ('django.db.models.fields.DateTimeField', [], {'null': 'True', 'blank': 'True'}),
            'quizdown': ('django.db.models.fields.TextField', [], {'null': 'True', 'blank': 'True'}),
            'resubmission_penalty': ('django.db.models.fields.IntegerField', [], {'default': '0', 'null': 'True', 'blank': 'True'}),
            'section': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['c2g.ContentSection']", 'null': 'True'}),
            'slug': ('django.db.models.fields.SlugField', [], {'max_length': '255', 'null': 'True'}),
            'submissions_permitted': ('django.db.models.fields.IntegerField', [], {'default': '999', 'null': 'True', 'blank': 'True'}),
            'time_created': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'timed': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'title': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True', 'blank': 'True'}),
            'total_score': ('django.db.models.fields.FloatField', [], {'null': 'True', 'blank': 'True'}),
            'xml_imported': ('django.db.models.fields.TextField', [], {'null': 'True', 'blank': 'True'}),
            'xml_metadata': ('django.db.models.fields.TextField', [], {'null': 'True', 'blank': 'True'})
        },
        'c2g.examrecord': {
            'Meta': {'object_name': 'ExamRecord'},
            'attempt_number': ('django.db.models.fields.IntegerField', [], {'default': '0'}),
            'complete': ('django.db.models.fields.BooleanField', [], {'default': 'True'}),
            'course': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['c2g.Course']"}),
            'exam': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['c2g.Exam']"}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'json_data': ('django.db.models.fields.TextField', [], {'null': 'True', 'blank': 'True'}),
            'json_score_data': ('django.db.models.fields.TextField', [], {'null': 'True', 'blank': 'True'}),
            'last_updated': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'auto_now_add': 'True', 'blank': 'True'}),
            'late': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'onpage': ('django.db.models.fields.CharField', [], {'max_length': '512', 'null': 'True', 'blank': 'True'}),
            'score': ('django.db.models.fields.FloatField', [], {'null': 'True', 'blank': 'True'}),
            'student': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['auth.User']"}),
            'time_created': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'})
        },
        'c2g.examrecordfieldlog': {
            'Meta': {'object_name': 'ExamRecordFieldLog'},
            'course': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['c2g.Course']"}),
            'exam': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['c2g.Exam']"}),
            'field_name': ('django.db.models.fields.CharField', [], {'max_length': '128', 'db_index': 'True'}),
            'human_name': ('django.db.models.fields.CharField', [], {'db_index': 'True', 'max_length': '128', 'null': 'True', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'last_updated': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'auto_now_add': 'True', 'blank': 'True'}),
            'max_score': ('django.db.models.fields.FloatField', [], {'default': '0', 'blank': 'True'}),
            'raw_score': ('django.db.models.fields.FloatField', [], {'default': '0', 'blank': 'True'}),
            'student': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['auth.User']"}),
            'time_created': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'value': ('django.db.models.fields.TextField', [], {'null': 'True', 'blank': 'True'})
        },
        'c2g.examrecordscore': {
            'Meta': {'object_name': 'ExamRecordScore'},
            'csv_imported': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'last_updated': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'auto_now_add': 'True', 'blank': 'True'}),
            'raw_score': ('django.db.models.fields.FloatField', [], {'null': 'True', 'blank': 'True'}),
            'record': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['c2g.ExamRecord']", 'unique': 'True'}),
            'time_created': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'})
        },
        'c2g.examrecordscorefield': {
            'Meta': {'object_name': 'ExamRecordScoreField'},
            'associated_text': ('django.db.models.fields.TextField', [], {'null': 'True', 'blank': 'True'}),
            'comments': ('django.db.models.fields.TextField', [], {'null': 'True', 'blank': 'True'}),
            'correct': ('django.db.models.fields.NullBooleanField', [], {'null': 'True', 'blank': 'True'}),
            'field_name': ('django.db.models.fields.CharField', [], {'max_length': '128', 'db_index': 'True'}),
            'human_name': ('django.db.models.fields.CharField', [], {'db_index': 'True', 'max_length': '128', 'null': 'True', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'last_updated': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'auto_now_add': 'True', 'blank': 'True'}),
            'parent': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['c2g.ExamRecordScore']"}),
            'subscore': ('django.db.models.fields.FloatField', [], {'default': '0'}),
            'time_created': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'value': ('django.db.models.fields.TextField', [], {'null': 'True', 'blank': 'True'})
        },
        'c2g.examrecordscorefieldchoice': {
            'Meta': {'object_name': 'ExamRecordScoreFieldChoice'},
            'associated_text': ('django.db.models.fields.TextField', [], {'null': 'True', 'blank': 'True'}),
            'choice_value': ('django.db.models.fields.CharField', [], {'max_length': '128', 'db_index': 'True'}),
            'correct': ('django.db.models.fields.NullBooleanField', [], {'null': 'True', 'blank': 'True'}),
            'human_name': ('django.db.models.fields.CharField', [], {'db_index': 'True', 'max_length': '128', 'null': 'True', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'last_updated': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'auto_now_add': 'True', 'blank': 'True'}),
            'parent': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['c2g.ExamRecordScoreField']"}),
            'time_created': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'})
        },
        'c2g.examscore': {
            'Meta': {'unique_together': "(('exam', 'student'),)", 'object_name': 'ExamScore'},
            'course': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['c2g.Course']"}),
            'csv_imported': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'exam': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['c2g.Exam']"}),
            'examrecordscore': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['c2g.ExamRecordScore']", 'null': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'last_updated': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'auto_now_add': 'True', 'blank': 'True'}),
            'score': ('django.db.models.fields.FloatField', [], {'null': 'True', 'blank': 'True'}),
            'student': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['auth.User']"}),
            'time_created': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'})
        },
        'c2g.examscorefield': {
            'Meta': {'object_name': 'ExamScoreField'},
            'associated_text': ('django.db.models.fields.TextField', [], {'null': 'True', 'blank': 'True'}),
            'comments': ('django.db.models.fields.TextField', [], {'null': 'True', 'blank': 'True'}),
            'correct': ('django.db.models.fields.NullBooleanField', [], {'null': 'True', 'blank': 'True'}),
            'field_name': ('django.db.models.fields.CharField', [], {'max_length': '128', 'db_index': 'True'}),
            'human_name': ('django.db.models.fields.CharField', [], {'db_index': 'True', 'max_length': '128', 'null': 'True', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'last_updated': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'auto_now_add': 'True', 'blank': 'True'}),
            'parent': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['c2g.ExamScore']"}),
            'subscore': ('django.db.models.fields.FloatField', [], {'default': '0'}),
            'time_created': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'value': ('django.db.models.fields.CharField', [], {'max_length': '128', 'null': 'True', 'blank': 'True'})
        },
        'c2g.exercise': {
            'Meta': {'object_name': 'Exercise', 'db_table': "u'c2g_exercises'"},
            'file': ('django.db.models.fields.files.FileField', [], {'max_length': '100', 'null': 'True'}),
            'fileName': ('django.db.models.fields.CharField', [], {'max_length': '255'}),
            'handle': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True', 'db_index': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'is_deleted': ('django.db.models.fields.IntegerField', [], {'default': '0'}),
            'last_updated': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'auto_now_add': 'True', 'blank': 'True'}),
            'problemSet': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['c2g.ProblemSet']", 'through': "orm['c2g.ProblemSetToExercise']", 'symmetrical': 'False'}),
            'time_created': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'video': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['c2g.Video']", 'through': "orm['c2g.VideoToExercise']", 'symmetrical': 'False'})
        },
        'c2g.file': {
            'Meta': {'object_name': 'File', 'db_table': "u'c2g_files'"},
            'course': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['c2g.Course']"}),
            'file': ('django.db.models.fields.files.FileField', [], {'max_length': '100'}),
            'handle': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True', 'db_index': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'image': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'to': "orm['c2g.File']"}),
            'index': ('django.db.models.fields.IntegerField', [], {'null': 'True', 'blank': 'True'}),
            'is_deleted': ('django.db.models.fields.IntegerField', [], {'default': '0'}),
            'last_updated': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'auto_now_add': 'True', 'blank': 'True'}),
            'live_datetime': ('django.db.models.fields.DateTimeField', [], {'null': 'True', 'blank': 'True'}),
            'mode': ('django.db.models.fields.TextField', [], {'blank': 'True'}),
            'section': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['c2g.ContentSection']", 'null': 'True'}),
            'time_created': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'title': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True', 'blank': 'True'})
        },
        'c2g.institution': {
            'Meta': {'object_name': 'Institution', 'db_table': "u'c2g_institutions'"},
            'city': ('django.db.models.fields.TextField', [], {'blank': 'True'}),
            'country': ('django.db.models.fields.TextField', [], {'blank': 'True'}),
            'domains': ('django.db.models.fields.TextField', [], {'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'last_updated': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'auto_now_add': 'True', 'blank': 'True'}),
            'time_created': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'title': ('django.db.models.fields.TextField', [], {})
        },
        'c2g.instructor': {
            'Meta': {'object_name': 'Instructor'},
            'biography': ('django.db.models.fields.TextField', [], {'blank': 'True'}),
            'email': ('django.db.models.fields.TextField', [], {'blank': 'True'}),
            'handle': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True', 'db_index': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'last_updated': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'auto_now_add': 'True', 'blank': 'True'}),
            'name': ('django.db.models.fields.TextField', [], {'blank': 'True'}),
            'photo': ('django.db.models.fields.files.FileField', [], {'max_length': '100', 'blank': 'True'}),
            'time_created': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'})
        },
        'c2g.listemail': {
            'Meta': {'object_name': 'ListEmail'},
            'from_addr': ('django.db.models.fields.CharField', [], {'max_length': '128', 'blank': 'True'}),
            'from_name': ('django.db.models.fields.CharField', [], {'max_length': '128', 'blank': 'True'}),
            'hash': ('django.db.models.fields.CharField', [], {'max_length': '128', 'db_index': 'True'}),
            'html_message': ('django.db.models.fields.TextField', [], {'null': 'True', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'last_updated': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'auto_now_add': 'True', 'blank': 'True'}),
            'sender': ('django.db.models.fields.related.ForeignKey', [], {'default': '1', 'to': "orm['auth.User']", 'null': 'True', 'blank': 'True'}),
            'subject': ('django.db.models.fields.CharField', [], {'max_length': '128', 'blank': 'True'}),
            'time_created': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'to_list': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['c2g.MailingList']"})
        },
        'c2g.mailinglist': {
            'Meta': {'object_name': 'MailingList'},
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'members': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['c2g.EmailAddr']", 'symmetrical': 'False'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '128', 'blank': 'True'})
        },
        'c2g.newsevent': {
            'Meta': {'object_name': 'NewsEvent', 'db_table': "u'c2g_news_events'"},
            'course': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['c2g.Course']"}),
            'event': ('django.db.models.fields.CharField', [], {'max_length': '255'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'time_created': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'})
        },
        'c2g.pagevisitlog': {
            'Meta': {'object_name': 'PageVisitLog', 'db_table': "u'c2g_page_visit_log'"},
            'course': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['c2g.Course']"}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'last_updated': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'auto_now_add': 'True', 'blank': 'True'}),
            'object_id': ('django.db.models.fields.CharField', [], {'max_length': '128', 'blank': 'True'}),
            'page_type': ('django.db.models.fields.CharField', [], {'max_length': '128', 'db_index': 'True'}),
            'time_created': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'user': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['auth.User']"})
        },
        'c2g.problemactivity': {
            'Meta': {'object_name': 'ProblemActivity', 'db_table': "u'c2g_problem_activity'"},
            'attempt_content': ('django.db.models.fields.TextField', [], {'null': 'True', 'blank': 'True'}),
            'attempt_number': ('django.db.models.fields.IntegerField', [], {'null': 'True', 'blank': 'True'}),
            'card': ('django.db.models.fields.TextField', [], {'blank': 'True'}),
            'cards_done': ('django.db.models.fields.IntegerField', [], {'null': 'True', 'blank': 'True'}),
            'cards_left': ('django.db.models.fields.IntegerField', [], {'null': 'True', 'blank': 'True'}),
            'casing': ('django.db.models.fields.TextField', [], {'blank': 'True'}),
            'complete': ('django.db.models.fields.IntegerField', [], {'null': 'True', 'blank': 'True'}),
            'count_hints': ('django.db.models.fields.IntegerField', [], {'null': 'True', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'last_updated': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'auto_now_add': 'True', 'blank': 'True'}),
            'problem_identifier': ('django.db.models.fields.CharField', [], {'max_length': '255', 'blank': 'True'}),
            'problem_type': ('django.db.models.fields.TextField', [], {'blank': 'True'}),
            'problemset_to_exercise': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['c2g.ProblemSetToExercise']", 'null': 'True'}),
            'review_mode': ('django.db.models.fields.IntegerField', [], {'null': 'True', 'blank': 'True'}),
            'seed': ('django.db.models.fields.TextField', [], {'blank': 'True'}),
            'sha1': ('django.db.models.fields.TextField', [], {'blank': 'True'}),
            'student': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['auth.User']"}),
            'time_created': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'time_taken': ('django.db.models.fields.IntegerField', [], {'null': 'True', 'blank': 'True'}),
            'topic_mode': ('django.db.models.fields.IntegerField', [], {'null': 'True', 'blank': 'True'}),
            'user_choices': ('django.db.models.fields.CharField', [], {'max_length': '1024', 'null': 'True', 'blank': 'True'}),
            'user_selection_val': ('django.db.models.fields.CharField', [], {'max_length': '1024', 'null': 'True', 'blank': 'True'}),
            'video_to_exercise': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['c2g.VideoToExercise']", 'null': 'True'})
        },
        'c2g.problemset': {
            'Meta': {'object_name': 'ProblemSet', 'db_table': "u'c2g_problem_sets'"},
            'assessment_type': ('django.db.models.fields.CharField', [], {'max_length': '255'}),
            'course': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['c2g.Course']"}),
            'description': ('django.db.models.fields.TextField', [], {'blank': 'True'}),
            'due_date': ('django.db.models.fields.DateTimeField', [], {'null': 'True'}),
            'grace_period': ('django.db.models.fields.DateTimeField', [], {}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'image': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'to': "orm['c2g.ProblemSet']"}),
            'index': ('django.db.models.fields.IntegerField', [], {'null': 'True', 'blank': 'True'}),
            'is_deleted': ('django.db.models.fields.IntegerField', [], {'default': '0'}),
            'last_updated': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'auto_now_add': 'True', 'blank': 'True'}),
            'late_penalty': ('django.db.models.fields.IntegerField', [], {}),
            'live_datetime': ('django.db.models.fields.DateTimeField', [], {'null': 'True', 'blank': 'True'}),
            'mode': ('django.db.models.fields.TextField', [], {'blank': 'True'}),
            'partial_credit_deadline': ('django.db.models.fields.DateTimeField', [], {}),
            'path': ('django.db.models.fields.CharField', [], {'max_length': '255'}),
            'randomize': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'resubmission_penalty': ('django.db.models.fields.IntegerField', [], {}),
            'section': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['c2g.ContentSection']"}),
            'slug': ('django.db.models.fields.SlugField', [], {'max_length': '50'}),
            'submissions_permitted': ('django.db.models.fields.IntegerField', [], {}),
            'time_created': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'title': ('django.db.models.fields.CharField', [], {'max_length': '255'})
        },
        'c2g.problemsettoexercise': {
            'Meta': {'object_name': 'ProblemSetToExercise', 'db_table': "u'c2g_problemset_to_exercise'"},
            'exercise': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['c2g.Exercise']"}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'image': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['c2g.ProblemSetToExercise']", 'null': 'True', 'blank': 'True'}),
            'is_deleted': ('django.db.models.fields.IntegerField', [], {'default': '0'}),
            'mode': ('django.db.models.fields.TextField', [], {'blank': 'True'}),
            'number': ('django.db.models.fields.IntegerField', [], {'null': 'True', 'blank': 'True'}),
            'problemSet': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['c2g.ProblemSet']"})
        },
        'c2g.studentexamstart': {
            'Meta': {'object_name': 'StudentExamStart'},
            'exam': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['c2g.Exam']"}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'last_updated': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'auto_now_add': 'True', 'blank': 'True'}),
            'student': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['auth.User']"}),
            'time_created': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'})
        },
        'c2g.studentinvitation': {
            'Meta': {'object_name': 'StudentInvitation'},
            'course': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['c2g.Course']"}),
            'email': ('django.db.models.fields.CharField', [], {'max_length': '128', 'db_index': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'last_updated': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'auto_now_add': 'True', 'blank': 'True'}),
            'time_created': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'})
        },
        'c2g.studentsection': {
            'Meta': {'object_name': 'StudentSection', 'db_table': "u'c2g_sections'"},
            'capacity': ('django.db.models.fields.IntegerField', [], {'default': '999'}),
            'course': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['c2g.Course']"}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'is_deleted': ('django.db.models.fields.IntegerField', [], {'default': '0'}),
            'last_updated': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'auto_now_add': 'True', 'blank': 'True'}),
            'members': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['auth.User']", 'symmetrical': 'False'}),
            'time_created': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'title': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True', 'blank': 'True'})
        },
        'c2g.userprofile': {
            'Meta': {'object_name': 'UserProfile', 'db_table': "u'c2g_user_profiles'"},
            'accept_language': ('django.db.models.fields.CharField', [], {'max_length': '64', 'null': 'True'}),
            'accept_language_first': ('django.db.models.fields.CharField', [], {'max_length': '64', 'null': 'True'}),
            'birth_year': ('django.db.models.fields.CharField', [], {'max_length': '64', 'null': 'True'}),
            'certificates': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['c2g.CourseCertificate']", 'symmetrical': 'False'}),
            'client_ip': ('django.db.models.fields.CharField', [], {'max_length': '30', 'null': 'True'}),
            'client_ip_first': ('django.db.models.fields.CharField', [], {'max_length': '30', 'null': 'True'}),
            'education': ('django.db.models.fields.CharField', [], {'max_length': '64', 'null': 'True'}),
            'email_me': ('django.db.models.fields.BooleanField', [], {'default': 'True'}),
            'gender': ('django.db.models.fields.CharField', [], {'max_length': '64', 'null': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'institutions': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['c2g.Institution']", 'symmetrical': 'False'}),
            'last_updated': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'auto_now_add': 'True', 'blank': 'True'}),
            'piazza_email': ('django.db.models.fields.CharField', [], {'max_length': '128', 'blank': 'True'}),
            'piazza_name': ('django.db.models.fields.CharField', [], {'max_length': '128', 'blank': 'True'}),
            'referrer': ('django.db.models.fields.CharField', [], {'max_length': '256', 'null': 'True'}),
            'referrer_first': ('django.db.models.fields.CharField', [], {'max_length': '256', 'null': 'True'}),
            'site_data': ('django.db.models.fields.TextField', [], {'blank': 'True'}),
            'time_created': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'user': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['auth.User']", 'unique': 'True'}),
            'user_agent': ('django.db.models.fields.CharField', [], {'max_length': '256', 'null': 'True'}),
            'user_agent_first': ('django.db.models.fields.CharField', [], {'max_length': '256', 'null': 'True'}),
            'work': ('django.db.models.fields.CharField', [], {'max_length': '128', 'null': 'True'})
        },
        'c2g.video': {
            'Meta': {'object_name': 'Video', 'db_table': "u'c2g_videos'"},
            'course': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['c2g.Course']"}),
            'description': ('django.db.models.fields.TextField', [], {'blank': 'True'}),
            'duration': ('django.db.models.fields.IntegerField', [], {'null': 'True', 'blank': 'True'}),
            'exam': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['c2g.Exam']", 'null': 'True', 'blank': 'True'}),
            'file': ('django.db.models.fields.files.FileField', [], {'max_length': '100'}),
            'handle': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True', 'db_index': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'image': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'to': "orm['c2g.Video']"}),
            'index': ('django.db.models.fields.IntegerField', [], {'null': 'True', 'blank': 'True'}),
            'is_deleted': ('django.db.models.fields.IntegerField', [], {'default': '0'}),
            'last_updated': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'auto_now_add': 'True', 'blank': 'True'}),
            'live_datetime': ('django.db.models.fields.DateTimeField', [], {'null': 'True', 'blank': 'True'}),
            'mode': ('django.db.models.fields.TextField', [], {'blank': 'True'}),
            'section': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['c2g.ContentSection']", 'null': 'True'}),
            'slug': ('django.db.models.fields.SlugField', [], {'max_length': '255', 'null': 'True'}),
            'time_created': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'title': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True', 'blank': 'True'}),
            'type': ('django.db.models.fields.CharField', [], {'default': "'youtube'", 'max_length': '30'}),
            'url': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True', 'blank': 'True'})
        },
        'c2g.videoactivity': {
            'Meta': {'object_name': 'VideoActivity', 'db_table': "u'c2g_video_activity'"},
            'course': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['c2g.Course']"}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'max_end_seconds': ('django.db.models.fields.IntegerField', [], {'default': '0', 'blank': 'True'}),
            'start_seconds': ('django.db.models.fields.IntegerField', [], {'default': '0', 'blank': 'True'}),
            'student': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['auth.User']"}),
            'video': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['c2g.Video']"})
        },
        'c2g.videodownload': {
            'Meta': {'object_name': 'VideoDownload', 'db_table': "u'c2g_video_download'"},
            'course': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['c2g.Course']"}),
            'download_date': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'format': ('django.db.models.fields.CharField', [], {'max_length': '35', 'null': 'True', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'student': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['auth.User']"}),
            'video': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['c2g.Video']"})
        },
        'c2g.videotoexercise': {
            'Meta': {'object_name': 'VideoToExercise', 'db_table': "u'c2g_video_to_exercise'"},
            'exercise': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['c2g.Exercise']"}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'image': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['c2g.VideoToExercise']", 'null': 'True', 'blank': 'True'}),
            'is_deleted': ('django.db.models.fields.IntegerField', [], {'default': '0'}),
            'mode': ('django.db.models.fields.TextField', [], {'blank': 'True'}),
            'video': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['c2g.Video']"}),
            'video_time': ('django.db.models.fields.IntegerField', [], {})
        },
        'c2g.videoviewtraces': {
            'Meta': {'object_name': 'VideoViewTraces', 'db_table': "u'c2g_video_view_traces'"},
            'course': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['c2g.Course']"}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'last_updated': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'auto_now_add': 'True', 'blank': 'True'}),
            'time_created': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'trace': ('django.db.models.fields.TextField', [], {'blank': 'True'}),
            'user': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['auth.User']"}),
            'video': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['c2g.Video']"})
        },
        'contenttypes.contenttype': {
            'Meta': {'ordering': "('name',)", 'unique_together': "(('app_label', 'model'),)", 'object_name': 'ContentType', 'db_table': "'django_content_type'"},
            'app_label': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'model': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '100'})
        }
    }

    complete_apps = ['c2g']
########NEW FILE########
__FILENAME__ = models
from datetime import datetime,timedelta
from hashlib import md5
import logging
import os
import re
import sys
import time
import html5lib
import random
import copy
import json
import math

from xml.dom.minidom import parseString
from xml.parsers.expat import ExpatError
from html5lib import treebuilders
from django import forms
from django.contrib.auth.models import Group, User
from django.core.cache import get_cache
from django.core.exceptions import ValidationError
from django.core.files.storage import default_storage
from django.core.urlresolvers import reverse
from django.conf import settings
from django.db import models
from django.db.models import Max
from django.db.models.signals import post_save
from django.utils import encoding

from c2g.util import is_storage_local, get_site_url, CacheStat
from c2g.readonly import get_database_considering_override
from kelvinator.tasks import sizes as video_resize_options 
from courses.exams.autograder import AutoGrader

logger = logging.getLogger(__name__)

RE_S3_PATH_FILENAME_SPLIT = re.compile('(?P<path>.+)\/(?P<filename>.*)$')


def get_file_path(instance, filename):
    parts = str(instance.handle).split("--")
    if isinstance(instance, Exercise):
        return os.path.join(str(parts[0]), str(parts[1]), 'exercises', filename)
    if isinstance(instance, Video):
        return os.path.join(str(parts[0]), str(parts[1]), 'videos', str(instance.id), filename)
    if isinstance(instance, File):
        return os.path.join(str(parts[0]), str(parts[1]), 'files', filename)


class TimestampMixin(models.Model):
    time_created = models.DateTimeField(auto_now=False, auto_now_add=True)
    last_updated = models.DateTimeField(auto_now=True, auto_now_add=True)

    def tellMeWhen(self):
       print ("Created: " + self.time_created.__str__() + "  Updated: " + self.last_updated.__str__())

    class Meta:
       abstract = True

class Stageable(models.Model):
    mode = models.TextField(blank=True)
    image = models.ForeignKey('self', null=True, blank=True, related_name="+")  #Adding blank = True to allow these to be created in admin interface
    live_datetime = models.DateTimeField(editable=True, null=True, blank=True)
    
    def is_live(self):
        return self.live_datetime and (self.live_datetime < datetime.now())
        
    class Meta:
       abstract = True

class Sortable(models.Model):
    index=models.IntegerField(null=True, blank=True)

    class Meta:
       abstract = True

class Deletable(models.Model):
    is_deleted=models.IntegerField(default=0)

    def delete(self):
        self.is_deleted = 1
        fields = self._meta.fields
        for field in fields:
            if field.name == 'slug':
                self.slug = ''
                break
        self.save()

        # Delete ContentGroup relationships when items are deleted
        # There may be exactly 0 or 1 ContentGroup entry for a given object
        contentgroup_entries = ()
        if getattr(self, 'contentgroup_set', None):
            contentgroup_entries = self.contentgroup_set.all()
        if len(contentgroup_entries) == 1:
            contentgroup_entries[0].delete()
        elif len(contentgroup_entries) > 1:
            # To allow multiple ContentGroup relationships, we can iterate
            # here, but other changes will have to be made elsewhere...
            raise ValueError, "Deletion of %s, which has multiple ContentGroup entries. Multiple entries not allowed." % (str(self))

    class Meta:
       abstract = True

class Institution(TimestampMixin, models.Model):
    title = models.TextField()
    country = models.TextField(blank=True)
    city = models.TextField(blank=True)
    domains = models.TextField(blank=True)

    def __unicode__(self):
        return self.title

    class Meta:
        db_table = u'c2g_institutions'

class Course(TimestampMixin, Stageable, Deletable, models.Model):
    institution = models.ForeignKey(Institution, null=True, db_index=True)
    student_group = models.ForeignKey(Group, related_name="student_group", db_index=True)
    instructor_group = models.ForeignKey(Group, related_name="instructor_group", db_index=True)
    tas_group = models.ForeignKey(Group, related_name="tas_group", db_index=True)
    readonly_tas_group = models.ForeignKey(Group, related_name="readonly_tas_group", db_index=True)
    title = models.CharField(max_length=255, null=True, blank=True)
    description = models.TextField(blank=True)
    syllabus = models.TextField(blank=True)
    term = models.TextField(blank=True)
    year = models.IntegerField(null=True, blank=True)
    calendar_start = models.DateField(null=True, blank=True)
    calendar_end = models.DateField(null=True, blank=True)
    contact = models.CharField(max_length=255, null = True, blank=True)
    list_publicly = models.IntegerField(null=True, blank=True)
    handle = models.CharField(max_length=255, null=True, db_index=True)
    preview_only_mode = models.BooleanField(default=True)
    institution_only = models.BooleanField(default=False)
    preenroll_only = models.BooleanField(default=False)
    share_to = models.ManyToManyField("self",symmetrical=False,related_name='share_from',null=True, blank=True)
    short_description = models.TextField(blank=True)
    prerequisites = models.TextField(blank=True)
    accompanying_materials = models.TextField(blank=True)
    outcomes = models.TextField(blank=True)
    faq = models.TextField(blank=True)
    logo = models.FileField(upload_to=get_file_path,null=True, blank=True)
    twitter_tag = models.CharField(max_length=64, null = True, blank=True)

    # Every course gets a unique ID to identify itself to Piazza.
    # Technically this shouldn't be needed, since the course handle
    # should be unique. But if you're using test instances, say,
    # where there are multiple C2G instances sharing a piazza account
    # then you could get collisions on course handle.
    #
    # Instead this ID gets generated when the course is paired up
    # with its Piazza instance.  Probably should have done something
    # truly unique, like some sort of GUID, but this is just the
    # epoch time which should be sufficient.
    piazza_id = models.IntegerField(null=True, blank=True)

    def logo_dl_link(self):

        if not self.logo.name or not self.logo.storage.exists(self.logo.name): 
            return settings.STATIC_URL + "graphics/core/class2go.png"

        url = self.logo.storage.url_monkeypatched(self.logo.name, querystring_auth=False)
        return url


    def __unicode__(self):
        if self.title:
            return self.title + " | Mode: " + self.mode
        else:
            return "No Title" + " | Mode: " + self.mode
    
    def _get_prefix(self):
        return self.handle.split("--")[0]
    prefix = property(_get_prefix)

    def _get_suffix(self):
        return self.handle.split("--")[1]
    suffix = property(_get_suffix)

    def has_exams(self):
        if self.mode == 'draft':
            return Exam.objects.filter(course=self, is_deleted=0, exam_type="exam").exists()
        else:
            now = datetime.now()
            return Exam.objects.filter(course=self, is_deleted=0, exam_type="exam", live_datetime__lt=now).exists()

    def has_surveys(self):
        if self.mode == 'draft':
            return Exam.objects.filter(course=self, is_deleted=0, exam_type="survey").exists()
        else:
            now = datetime.now()
            return Exam.objects.filter(course=self, is_deleted=0, exam_type="survey", live_datetime__lt=now).exists()
        
    def has_interactive_exercises(self):
        if self.mode == 'draft':
            return Exam.objects.filter(course=self, is_deleted=0, exam_type='interactive_exercise').exists()
        else:
            now = datetime.now()
            return Exam.objects.filter(course=self, is_deleted=0, exam_type='interactive_exercise', live_datetime__lt=now).exists()
                
    def has_problem_sets(self):
        if self.mode == 'draft':
            return Exam.objects.filter(course=self, is_deleted=0, exam_type="problemset").exists()
        else:
            now = datetime.now()
            return Exam.objects.filter(course=self, is_deleted=0, exam_type="problemset", live_datetime__lt=now).exists()
        
    def has_videos(self):
        if self.mode == 'draft':
            return Video.objects.filter(course=self, is_deleted=0).exists()
        else:
            now = datetime.now()
            return Video.objects.filter(course=self, is_deleted=0, live_datetime__lt=now).exists()
    
    def get_all_students(self):
        """
        Returns a QUERY_SET of all students
        """
        return self.student_group.user_set.all()
    
    def get_all_course_admins(self):
        """
        Returns a QUERY_SET of all staff
        """
        return (self.instructor_group.user_set.all() | self.tas_group.user_set.all())
    
    def get_all_members(self):
        """
        Returns a QUERY_SET of all course members
        """
        return (self.get_all_course_admins() | self.get_all_students())

    def create_ready_instance(self):
        ready_instance = Course(institution = self.institution,
            student_group = self.student_group,
            instructor_group = self.instructor_group,
            tas_group = self.tas_group,
            readonly_tas_group = self.readonly_tas_group,
            title = self.title,
            description = self.description,
            syllabus = self.syllabus,
            term = self.term,
            year = self.year,
            calendar_start = self.calendar_start,
            calendar_end = self.calendar_end,
            contact = self.contact,
            list_publicly = 0,
            image = self,
            mode = 'ready',
            handle = self.handle,
            institution_only = self.institution_only,
            piazza_id = int(time.mktime(time.gmtime())),
            short_description = self.short_description,
            prerequisites = self.prerequisites,
            accompanying_materials = self.accompanying_materials,
            outcomes = self.outcomes,
            faq = self.faq,
            twitter_tag = self.twitter_tag,
            logo = self.logo,
            preenroll_only = self.preenroll_only,
            preview_only_mode = self.preview_only_mode,
        )
        ready_instance.save()
        self.image = ready_instance
        self.save()

    def commit(self, clone_fields = None):
        if self.mode != 'draft': return;

        ready_instance = self.image
        if not clone_fields or 'institution' in clone_fields:
            ready_instance.institution = self.institution
        if not clone_fields or 'title' in clone_fields:
            ready_instance.title = self.title
        if not clone_fields or 'description' in clone_fields:
            ready_instance.description = self.description
        if not clone_fields or 'syllabus' in clone_fields:
            ready_instance.syllabus = self.syllabus
        if not clone_fields or 'term' in clone_fields:
            ready_instance.term = self.term
        if not clone_fields or 'year' in clone_fields:
            ready_instance.year = self.year
        if not clone_fields or 'calendar_start' in clone_fields:
            ready_instance.calendar_start = self.calendar_start
        if not clone_fields or 'calendar_end' in clone_fields:
            ready_instance.calendar_end = self.calendar_end
        if not clone_fields or 'short_description' in clone_fields:
            ready_instance.short_description = self.short_description    
        if not clone_fields or 'prerequisites' in clone_fields:
            ready_instance.prerequisites = self.prerequisites    
        if not clone_fields or 'accompanying_materials' in clone_fields:
            ready_instance.accompanying_materials = self.accompanying_materials    
        if not clone_fields or 'outcomes' in clone_fields:
            ready_instance.outcomes = self.outcomes
        if not clone_fields or 'faq' in clone_fields:
            ready_instance.faq = self.faq
        if not clone_fields or 'logo' in clone_fields:
            ready_instance.logo = self.logo

        ready_instance.save()

    def revert(self, clone_fields = None):
        if self.mode != 'draft': return;

        ready_instance = self.image
        if not clone_fields or 'institution' in clone_fields:
            self.institution = ready_instance.institution
        if not clone_fields or 'title' in clone_fields:
            self.title = ready_instance.title
        if not clone_fields or 'description' in clone_fields:
            self.description = ready_instance.description
        if not clone_fields or 'syllabus' in clone_fields:
            self.syllabus = ready_instance.syllabus
        if not clone_fields or 'term' in clone_fields:
            self.term = ready_instance.term
        if not clone_fields or 'year' in clone_fields:
            self.year = ready_instance.year
        if not clone_fields or 'calendar_start' in clone_fields:
            self.calendar_start = ready_instance.calendar_start
        if not clone_fields or 'calendar_end' in clone_fields:
            self.calendar_end = ready_instance.calendar_end
        if not clone_fields or 'short_description' in clone_fields:
            self.short_description = ready_instance.short_description    
        if not clone_fields or 'prerequisites' in clone_fields:
            self.prerequisites = ready_instance.prerequisites    
        if not clone_fields or 'accompanying_materials' in clone_fields:
            self.accompanying_materials = ready_instance.accompanying_materials    
        if not clone_fields or 'outcomes' in clone_fields:
            self.outcomes = ready_instance.outcomes
        if not clone_fields or 'faq' in clone_fields:
            self.faq = ready_instance.faq
        if not clone_fields or 'logo' in clone_fields:
            self.logo = ready_instance.logo

        self.save()

    class Meta:
        db_table = u'c2g_courses'

class ContentSectionManager(models.Manager):
    def getByCourse(self, course):
        return self.filter(course=course,is_deleted=0).order_by('index')

class ContentSection(TimestampMixin, Stageable, Sortable, Deletable, models.Model):
    course = models.ForeignKey(Course, db_index=True)
    title = models.CharField(max_length=255, null=True, blank=True)
    subtitle = models.CharField(max_length=255, null=True, blank=True)
    slug = models.SlugField(max_length=255, null=True, blank=True)
    objects = ContentSectionManager()

    def create_ready_instance(self):
        ready_instance = ContentSection(
            course=self.course.image,
            title=self.title,
            index=self.index,
            subtitle=self.subtitle,
            slug=self.slug,
            mode='ready',
            image=self,
        )
        ready_instance.save()
        self.image=ready_instance
        self.save()

    def commit(self, clone_fields = None):
        if self.mode != 'draft': return;

        ready_instance = self.image
        if not clone_fields or 'title' in clone_fields:
            ready_instance.title = self.title
        if not clone_fields or 'index' in clone_fields:
            ready_instance.index = self.index
        if not clone_fields or 'subtitle' in clone_fields:
            ready_instance.subtitle = self.subtitle
        if not clone_fields or 'slug' in clone_fields:
            ready_instance.slug = self.slug

        ready_instance.save()

    def revert(self, clone_fields = None):
        if self.mode != 'draft': return;

        ready_instance = self.image
        if not clone_fields or 'title' in clone_fields:
            self.title = ready_instance.title
        if not clone_fields or 'index' in clone_fields:
            self.index = ready_instance.index
        if not clone_fields or 'subtitle' in clone_fields:
            self.subtitle = ready_instance.subtitle
        if not clone_fields or 'slug' in clone_fields:
            self.slug = ready_instance.slug

        self.save()

    def getChildren(self, gettagged=False, getsorted=True):
        """Return the child items of this section: Videos, Files, etc.

        If gettagged is True, return a list of dictionaries having some item 
        metadata in addition to the item reference, otherwise return only a 
        list of item references.

        If getsorted is True, return the list sorted by 'index' field, which
        indicates manual sorting preference; otherwise ordering is unspecified.
        """

        dict_list = []
        for tag, cls in ContentGroup.groupable_types.iteritems():
            dict_list.extend([{'item':item, 'index':item.index, 'type':tag} for item in cls.objects.getBySection(section=self)])

        if getsorted:
            dict_list = sorted(dict_list, key=lambda k: k['index'])
        return dict_list if gettagged else [x['item'] for x in dict_list]

    def countChildren(self):
        return len(self.getChildren(gettagged=True, getsorted=False))

    def getNextIndex(self):
        # We will not return len(children)+1 since this approach is not fail-
        # safe. If an index is skipped for whatever reason, we want to make
        # sure we are still robust
        children = self.getChildren()
        if len(children) == 0:
            return 1
        
        if children[-1].index == None:
            return len(children)+1
        else:
            return children[-1].index+1

    def __unicode__(self):
        if self.title:
            return self.title
        else:
            return "No Title"

    class Meta:
        db_table = u'c2g_content_sections'

class AdditionalPageManager(models.Manager):
    def getByCourse(self, course):
        # Additional pages displayed under sections have a live_datetime effect.
        if course.mode == 'draft':
            return self.filter(course=course,is_deleted=0, section__is_deleted=0, menu_slug=None).order_by('section','index')
        else:
            now = datetime.now()
            return self.filter(course=course,is_deleted=0, section__is_deleted=0,menu_slug=None,live_datetime__lt=now).order_by('section','index')

    def getBySection(self, section):
        if section.mode == 'draft':
            return self.filter(section=section, is_deleted=0).order_by('index')
        else:
            now = datetime.now()
            return self.filter(section=section, is_deleted=0, live_datetime__lt=now).order_by('index')

class AdditionalPage(TimestampMixin, Stageable, Sortable, Deletable, models.Model):
    course = models.ForeignKey(Course, db_index=True)
    menu_slug = models.SlugField(max_length=255, null=True, blank=True)
    section = models.ForeignKey(ContentSection, null=True)
    title = models.CharField(max_length=255, null=True, blank=True)
    description = models.TextField(blank=True)
    slug = models.SlugField(max_length=255, null=True, blank=True)
    objects = AdditionalPageManager()

    def create_ready_instance(self):
        image_section = None
        if self.section:
            image_section = self.section.image

        ready_instance = AdditionalPage(
            course=self.course.image,
            title=self.title,
            description=self.description,
            menu_slug=self.menu_slug,
            section = image_section,
            slug=self.slug,
            index=self.index,
            mode='ready',
            image=self,
        )
        ready_instance.save()
        self.image=ready_instance
        self.save()

    def commit(self, clone_fields = None):
        if self.mode != 'draft': return;
        if not self.image: self.create_ready_instance()

        ready_instance = self.image
        if not clone_fields or 'title' in clone_fields:
            ready_instance.title = self.title
        if not clone_fields or 'description' in clone_fields:
            ready_instance.description = self.description
        if not clone_fields or 'index' in clone_fields:
            ready_instance.index = self.index

        ready_instance.save()

    def revert(self, clone_fields = None):
        if self.mode != 'draft': return;

        ready_instance = self.image
        if not clone_fields or 'title' in clone_fields:
            self.title = ready_instance.title
        if not clone_fields or 'description' in clone_fields:
            self.description = ready_instance.description
        if not clone_fields or 'index' in clone_fields:
            self.index = ready_instance.index

        self.save()

    def is_synced(self):
        if not self.image:
            return False
        if self.title != self.image.title:
            return False
        if self.description != self.image.description:
            return False

        return True

    def get_url(self):
        return reverse("courses.additional_pages.views.main", args=[self.course.prefix, self.course.suffix, self.slug])

    def __unicode__(self):
        if self.title:
            return self.title
        else:
            return "No Title"
    
    class Meta:
        db_table = u'c2g_additional_pages'
        
        
class FileManager(models.Manager):
    def getByCourse(self, course):
        if course.mode == 'draft':
            return self.filter(course=course,is_deleted=0, section__is_deleted=0).order_by('section','index')
        else:
            now = datetime.now()
            return self.filter(course=course,is_deleted=0, section__is_deleted=0, live_datetime__lt=now).order_by('section','index')
            
    def getBySection(self, section):
        if section.mode == 'draft':
            return self.filter(section=section, is_deleted=0).order_by('index')
        else:
            now = datetime.now()
            return self.filter(section=section, is_deleted=0, live_datetime__lt=now).order_by('index')

class File(TimestampMixin, Stageable, Sortable, Deletable, models.Model):
    course  = models.ForeignKey(Course, db_index=True)
    section = models.ForeignKey(ContentSection, null=True)
    title   = models.CharField(max_length=255, null=True, blank=True)
    file    = models.FileField(upload_to=get_file_path)
    handle  = models.CharField(max_length=255, null=True, db_index=True)
    objects = FileManager()

    def create_ready_instance(self):
        ready_instance = File(
            course=self.course.image,
            section=self.section.image,
            title=self.title,
            file=self.file,
            image = self,
            index = self.index,
            mode = 'ready',
            handle = self.handle,
            live_datetime = self.live_datetime,
        )
        ready_instance.save()
        self.image = ready_instance
        self.save()

    def commit(self):
        img = self.image
        img.course=self.course.image
        img.section=self.section.image
        img.title=self.title
        img.index = self.index
        img.handle = self.handle
        img.live_datetime = self.live_datetime
        img.save()
    
    def has_storage(self):
        """Return True if we have a copy of this file on our storage."""
        if self.dl_link() == "":
            return False
        else:
            return True

    def dl_link(self):
        filename = self.file.name
        if is_storage_local():
            url = get_site_url() + self.file.storage.url(filename)
        else:
            storecache = get_cache("file_store")
            storecache_key = filename.replace(' ','%20')[-240:]   # memcache no spaces in cache key, char limit
            storecache_hit = storecache.get(storecache_key)
            if storecache_hit:
                CacheStat.report('hit', 'file_store')
                if 'url' in storecache_hit:
                    return storecache_hit['url']
                else:
                    return ""
            else:
                CacheStat.report('miss', 'file_store')
                if not self.file.storage.exists(filename):
                    # negative cache
                    storecache_val = {'size':0}
                    storecache.set(storecache_key, storecache_val)
                    return ""
                url = self.file.storage.url_monkeypatched(filename, response_headers={'response-content-disposition': 'attachment'})
                storecache_val = {'url':url}
                storecache.set(storecache_key, storecache_val)
        return url
        
    def get_ext(self):
        """ Return the extension of a file - eg pdf - or just '' if it doesn't have one """
        # TODO: use filemagic or python-magic for this instead
        file_parts = self.file.name.split('.')
        if len(file_parts) > 1:
            return (file_parts.pop().lower())
        return ''
            
    def get_icon_type(self):
        """ return an appropriate icon for a file, based on its extension """
        extensions = {
          # extension : icon name
                'html': 'globe',
                'htm':  'globe',
                'ppt':  'list-alt',
                'pptx': 'list-alt',
                'jpg':  'picture',
                'png':  'picture',
                'gif':  'picture',
                'jpeg': 'picture',
                'mp3':  'music',
                'aac':  'music',
                'gz':   'download-alt',
                'zip':  'download-alt',
                'tar':  'download-alt',
                'bz':   'download-alt',
                'bz2':  'download-alt',
                'csv':  'table',
                'xls':  'table'
        }
        file_extension = self.get_ext()
        return extensions.get(file_extension, 'file')

    def get_url(self):
        return self.file.url # FIXME: cache this

    def __unicode__(self):
        if self.title:
            return self.title
        else:
            return "No Title"

    class Meta:
        db_table = u'c2g_files'


class AnnouncementManager(models.Manager):
    def getByCourse(self, course):
        return self.filter(course=course,is_deleted=0).order_by('-time_created')

class Announcement(TimestampMixin, Stageable, Sortable, Deletable, models.Model):
    owner = models.ForeignKey(User)
    course = models.ForeignKey(Course, db_index=True)
    title = models.CharField(max_length=255, null=True, blank=True)
    description = models.TextField(blank=True)
    objects = AnnouncementManager()

    def create_ready_instance(self):
        ready_instance = Announcement(
            course=self.course.image,
            title=self.title,
            description=self.description,
            owner = self.owner,
            mode='ready',
            image=self,
        )
        ready_instance.save()
        self.image=ready_instance
        self.save()

    def commit(self, clone_fields = None):
        if self.mode != 'draft': return;
        if not self.image: self.create_ready_instance()

        ready_instance = self.image
        if not clone_fields or 'title' in clone_fields:
            ready_instance.title = self.title
        if not clone_fields or 'description' in clone_fields:
            ready_instance.description = self.description

        ready_instance.save()

    def revert(self, clone_fields = None):
        if self.mode != 'draft': return;

        ready_instance = self.image
        if not clone_fields or 'title' in clone_fields:
            self.title = ready_instance.title
        if not clone_fields or 'description' in clone_fields:
            self.description = ready_instance.description

        self.save()

    def is_synced(self):
        if not self.image:
            return False
        if self.title != self.image.title:
            return False
        if self.description != self.image.description:
            return False

        return True

    def __unicode__(self):
        if self.title:
            return self.title
        else:
            return "No Title"

    class Meta:
        db_table = u'c2g_announcements'

    # Prevent writes to read-only database, fail is better than data loss
    def save(self, *args, **kwargs):
        if get_database_considering_override() == 'readonly':
            raise DatabaseError
        super(Announcement, self).save(*args, **kwargs)
    def delete(self):
        if get_database_considering_override() == 'readonly':
            raise DatabaseError
        super(Announcement, self).delete()

class StudentSection(TimestampMixin, Deletable, models.Model):
    course = models.ForeignKey(Course, db_index=True)
    title = models.CharField(max_length=255, null=True, blank=True)
    capacity = models.IntegerField(default=999)
    members = models.ManyToManyField(User)
    class Meta:
        db_table = u'c2g_sections'

class CourseStudentList(TimestampMixin, models.Model):
    # TODO: is this model used anyplace? Remove?
    course = models.ForeignKey(Course, db_index=True)
    members = models.ManyToManyField(User)
    max_completion_level = models.IntegerField(default=0)

    def __unicode__(self):
        return u'CourseStudentList course: ' + str(self.course_id)

class CourseCertificate(TimestampMixin, models.Model):
    course = models.ForeignKey(Course, db_index=True)
    assets = models.CharField(max_length=255, null=True)
    storage = models.CharField(max_length=255, null=True)
    type = models.CharField(max_length=64, default="completion")

    @classmethod
    def create(cls, course, type='completion'):
        """Correctly instantiate a new CourseCertificate."""
        c = cls(course=course, type=type)
        c.assets = os.path.join(course.prefix, course.suffix, 'certificates', 'assets')
        c.storage = os.path.join(course.prefix, course.suffix, 'certificates', 'storage')
        c.save()
        return c

    def get_filename_by_user(self, user):
        """Generate the filename used for certificate storage on disk.

        If user is unspecified, return None.
        """
        return "%s-%s-%s-%s.pdf" % (user.username, str(user.id), self.course.handle, self.type)

    def dl_link(self, user):
        """Generate a download link for this certificate for the given user"""
        filename = self.get_filename_by_user(user)
        asset_path = os.path.join(self.storage, filename)
        url = ''
        if default_storage.exists(asset_path):
            if is_storage_local():
                url = get_site_url() + default_storage.url(asset_path)
            else:
                url = default_storage.url_monkeypatched(asset_path, response_headers={'response-content-disposition': 'attachment'})
        return url

    def __repr__(self):
        s = u'CourseCertificate(pk=' + str(self.id) + ','
        s += 'course_id=' + str(self.course_id) + ','
        s += 'type=' + self.type + ','
        s += 'assets=' + self.assets + ')'
        return s

    def __unicode__(self):
        return repr(self)

#Extended storage fields for Users, in addition to django.contrib.auth.models
#Uses one-to-one as per django recommendations at
#https://docs.djangoproject.com/en/dev/topics/auth/#django.contrib.auth.models.User
class UserProfile(TimestampMixin, models.Model):
    user = models.OneToOneField(User, db_index=True)
    site_data = models.TextField(blank=True)
    gender = models.CharField(max_length=64, null=True)
    birth_year = models.CharField(max_length=64, null=True)
    education = models.CharField(max_length=64, null=True)
    work = models.CharField(max_length=128,null=True)
    piazza_email = models.CharField(max_length=128,blank=True)
    piazza_name = models.CharField(max_length=128,blank=True)
    email_me = models.BooleanField(default=True) #get emails sent by the teaching staff
    
    institutions = models.ManyToManyField(Institution) #these are confirmed institutions via shib or other trusted verifier

    client_ip = models.CharField(max_length=30, null=True)
    user_agent = models.CharField(max_length=256, null=True)
    referrer = models.CharField(max_length=256, null=True)
    accept_language = models.CharField(max_length=64, null=True)

    client_ip_first = models.CharField(max_length=30, null=True)
    user_agent_first = models.CharField(max_length=256, null=True)
    referrer_first = models.CharField(max_length=256, null=True)
    accept_language_first = models.CharField(max_length=64, null=True)

    certificates = models.ManyToManyField(CourseCertificate)
    
    # Prevent writes to read-only database, fail is better than data loss
    def save(self, *args, **kwargs):
        if get_database_considering_override() == 'readonly':
            raise DatabaseError
        super(UserProfile, self).save(*args, **kwargs)
    def delete(self):
        if get_database_considering_override() == 'readonly':
            raise DatabaseError
        super(UserProfile, self).delete()

    def __unicode__(self):
        return self.user.username

    def is_student_list(self, group_list=None, courses=None):
        if group_list == None:
            group_list = self.user.groups.all()
        
        if courses == None:
            courses = Course.objects.filter(mode='ready')
    
        is_student_list = []
        for course in courses:
            for group in group_list:
                if course.student_group_id == group.id:
                    is_student_list.append(course)
                    break
        return is_student_list

    def is_instructor_list(self, group_list=None, courses=None):
        if group_list == None:
            group_list = self.user.groups.all()
        
        if courses == None:
            courses = Course.objects.filter(mode='ready')
    
        is_instructor_list = []
        for course in courses:
            for group in group_list:
                if course.instructor_group_id == group.id:
                    is_instructor_list.append(course)
                    break
        return is_instructor_list

    def is_tas_list(self, group_list=None, courses=None):
        if group_list == None:
            group_list = self.user.groups.all()
        
        if courses == None:
            courses = Course.objects.filter(mode='ready')
    
        is_tas_list = []
        for course in courses:
            for group in group_list:
                if course.tas_group_id == group.id:
                    is_tas_list.append(course)
                    break
        return is_tas_list

    def is_readonly_tas_list(self, group_list=None, courses=None):
        if group_list == None:
            group_list = self.user.groups.all()

        if courses == None:
            courses = Course.objects.filter(mode='ready')
    
        is_readonly_tas_list = []
        for course in courses:
            for group in group_list:
                if course.readonly_tas_group_id == group.id:
                    is_readonly_tas_list.append(course)
                    break
        return is_readonly_tas_list

    class Meta:
        db_table = u'c2g_user_profiles'

def create_user_profile(sender, instance, created, raw, **kwargs):
    if created and not raw:  #create means that a new DB entry is created, raw is set when fixtures are being loaded
        UserProfile.objects.create(user=instance)

post_save.connect(create_user_profile, sender=User)

class VideoManager(models.Manager):
    def getByCourse(self, course):
        if course.mode == 'draft':
            return self.filter(course=course,is_deleted=0, section__is_deleted=0).order_by('section','index')
        else:
            now = datetime.now()
            return self.filter(course=course,is_deleted=0, section__is_deleted=0, live_datetime__lt=now).order_by('section','index')

    def getBySection(self, section):
        if section.mode == 'draft':
            return self.filter(section=section, is_deleted=0).order_by('index')
        else:
            now = datetime.now()
            return self.filter(section=section, is_deleted=0, live_datetime__lt=now).order_by('index')


class Video(TimestampMixin, Stageable, Sortable, Deletable, models.Model):
    course = models.ForeignKey(Course, db_index=True)
    section = models.ForeignKey(ContentSection, null=True, db_index=True)
    exam = models.ForeignKey('Exam', null=True, blank=True)
    title = models.CharField(max_length=255, null=True, blank=True)
    description = models.TextField(blank=True)
    type = models.CharField(max_length=30, default="youtube")
    url = models.CharField("Youtube Video ID", max_length=255, null=True, blank=True)
    duration = models.IntegerField(null=True, blank=True)
    slug = models.SlugField("URL Identifier", max_length=255, null=True)
    file = models.FileField(upload_to=get_file_path)
    handle = models.CharField(max_length=255, null=True, db_index=True)
    objects = VideoManager()

    def create_ready_instance(self):
        if (self.exam and self.exam.image):
            image_exam = self.exam.image
        else:
            image_exam = None
        ready_instance = Video(
            course=self.course.image,
            section=self.section.image,
            exam=image_exam,
            title=self.title,
            description=self.description,
            type=self.type,
            url=self.url,
            duration=self.duration,
            slug=self.slug,
            file=self.file,
            image = self,
            index = self.index,
            mode = 'ready',
            handle = self.handle,
            live_datetime = self.live_datetime,
        )
        ready_instance.save()
        self.image = ready_instance
        self.save()

    def exercises_changed(self):
        ready_instance = self.image
        draft_videoToExs = VideoToExercise.objects.getByVideo(self)
        ready_videoToExs = VideoToExercise.objects.getByVideo(ready_instance)
        if len(draft_videoToExs) != len(ready_videoToExs):
            return True
        for draft_videoToEx in draft_videoToExs:
            if not draft_videoToEx.image:
                return True
        return False

    def commit(self, clone_fields = None):
        if self.mode != 'draft': return;
        if not self.image: self.create_ready_instance()
        
        ready_instance = self.image
        if not clone_fields or 'title' in clone_fields:
            ready_instance.title = self.title
        if not clone_fields or 'section' in clone_fields:
            ready_instance.section = self.section.image
        if not clone_fields or 'description' in clone_fields:
            ready_instance.description = self.description
        if not clone_fields or 'slug' in clone_fields:
            ready_instance.slug = self.slug
        if not clone_fields or 'file' in clone_fields:
            ready_instance.file = self.file
        if not clone_fields or 'url' in clone_fields:
            ready_instance.url = self.url
        if (self.exam and self.exam.image):
            image_exam = self.exam.image
        else:
            image_exam = None
        if not clone_fields or 'exam' in clone_fields:
            ready_instance.exam = image_exam
        if not clone_fields or 'live_datetime' in clone_fields:
            ready_instance.live_datetime = self.live_datetime

        ready_instance.save()

        if self.exercises_changed() == True:
            draft_videoToExs =  VideoToExercise.objects.getByVideo(self)
            ready_videoToExs = VideoToExercise.objects.getByVideo(ready_instance)

            #If filename in ready but not in draft list then delete it.
            for ready_videoToEx in ready_videoToExs:
                if not self.in_list(ready_videoToEx, draft_videoToExs):
                    ready_videoToEx.is_deleted = 1
                    ready_videoToEx.save()

            #Find ready instance, if it exists, and set it.
            for draft_videoToEx in draft_videoToExs:
                not_deleted_ready_videoToEx = VideoToExercise.objects.filter(video=ready_instance, exercise=draft_videoToEx.exercise, is_deleted=0)
                deleted_ready_videoToExs = VideoToExercise.objects.filter(video=ready_instance, exercise=draft_videoToEx.exercise, is_deleted=1).order_by('-id')
                        
                if not_deleted_ready_videoToEx.exists():
                    ready_videoToEx = not_deleted_ready_videoToEx[0]
                    ready_videoToEx.video_time = draft_videoToEx.video_time
                    ready_videoToEx.save() 
                    
                elif deleted_ready_videoToExs.exists():
                    ready_videoToEx = deleted_ready_videoToExs[0]
                    ready_videoToEx.is_deleted = 0
                    ready_videoToEx.video_time = draft_videoToEx.video_time
                    ready_videoToEx.save()
                    
                else:
                    ready_videoToEx = VideoToExercise(video = ready_instance,
                                                          exercise = draft_videoToEx.exercise,
                                                          video_time = draft_videoToEx.video_time,
                                                          is_deleted = 0,
                                                          mode = 'ready',
                                                          image = draft_videoToEx)
                    ready_videoToEx.save()
                    draft_videoToEx.image = ready_videoToEx 
                    draft_videoToEx.save()

        else:
            draft_videoToExs = VideoToExercise.objects.getByVideo(self)
            for draft_videoToEx in draft_videoToExs:
                draft_videoToEx.image.video_time = draft_videoToEx.video_time
                draft_videoToEx.image.save()

    def revert(self, clone_fields = None):
        if self.mode != 'draft': return;

        ready_instance = self.image
        if not clone_fields or 'title' in clone_fields:
            self.title = ready_instance.title
        if not clone_fields or 'section' in clone_fields:
            self.section = ready_instance.section.image
        if not clone_fields or 'description' in clone_fields:
            self.description = ready_instance.description
        if not clone_fields or 'slug' in clone_fields:
            self.slug = ready_instance.slug
        if not clone_fields or 'file' in clone_fields:
            self.file = ready_instance.file
        if not clone_fields or 'url' in clone_fields:
            self.url = ready_instance.url
        if (ready_instance.exam and ready_instance.exam.image):
            image_exam = ready_instance.exam.image
        else:
            image_exam = None
        if not clone_fields or 'exam' in clone_fields:
            self.exam = image_exam
        if not clone_fields or 'live_datetime' in clone_fields:
            self.live_datetime = ready_instance.live_datetime

        self.save()

        if self.exercises_changed() == True:
            draft_videoToExs = VideoToExercise.objects.getByVideo(self)
            ready_videoToExs = VideoToExercise.objects.getByVideo(ready_instance)

            #If filename in draft but not in ready list then delete it.
            for draft_videoToEx in draft_videoToExs:
                if not self.in_list(draft_videoToEx, ready_videoToExs):
                    draft_videoToEx.is_deleted = 1
                    draft_videoToEx.save()

            #Find draft instance and set it.
            for ready_videoToEx in ready_videoToExs:
                not_deleted_draft_videoToEx = VideoToExercise.objects.filter(video=self, exercise=ready_videoToEx.exercise, is_deleted=0)
                deleted_draft_videoToExs = VideoToExercise.objects.filter(video=self, exercise=ready_videoToEx.exercise, is_deleted=1).order_by('-id')
                        
                if not_deleted_draft_videoToEx.exists():
                    draft_videoToEx = not_deleted_draft_videoToEx[0]
                    draft_videoToEx.video_time = ready_videoToEx.video_time
                    draft_videoToEx.save() 
                    
                elif deleted_draft_videoToExs.exists():
                    draft_videoToEx = deleted_draft_videoToExs[0]
                    draft_videoToEx.is_deleted = 0
                    draft_videoToEx.video_time = ready_videoToEx.video_time
                    draft_videoToEx.save()

        else:
            ready_videoToExs = VideoToExercise.objects.getByVideo(ready_instance)
            for ready_videoToEx in ready_videoToExs:
                ready_videoToEx.image.video_time = ready_videoToEx.video_time
                ready_videoToEx.image.save()

    def is_synced(self):
        if not self.image:
            return False
        prod_instance = self.image
        if self.exercises_changed() == True:
            return False
        if self.title != prod_instance.title:
            return False
        if self.section != prod_instance.section.image:
            return False
        if self.description != prod_instance.description:
            return False
        if self.slug != prod_instance.slug:
            return False
        if self.file != prod_instance.file:
            return False
        if self.url != prod_instance.url:
            return False
        if (self.exam and self.exam.image):
            image_exam = self.exam.image
        else:
            image_exam = None
        if image_exam != prod_instance.exam:
            return False
        if self.live_datetime != prod_instance.live_datetime:
            return False
        draft_videoToExs = VideoToExercise.objects.getByVideo(self)
        for draft_videoToEx in draft_videoToExs:
            if draft_videoToEx.video_time != draft_videoToEx.image.video_time:
                return False
        return True

    def has_storage(self):
        """Return True if we have a copy of this video on our storage."""
        if self.dl_link() == "":
            return False
        else:
            return True

    def dl_link(self):
        """Return fully-qualified download URL for this video, or empty string."""
        storecache = get_cache("video_store")
        storecache_key = self.file.name.replace(' ','%20')[-240:]   # memcache no spaces in cache key, char limit
        storecache_hit = storecache.get(storecache_key)
        if storecache_hit:
            CacheStat.report('hit', 'video_store')
            if 'url' in storecache_hit:
                return storecache_hit['url']
            else:
                return ""
        else:
            CacheStat.report('miss', 'video_store')
            videoname = self.file.name
            if not self.file.storage.exists(videoname):
                # negative cache
                storecache_val = {'size':0}
                storecache.set(storecache_key, storecache_val)
                return ""
            if is_storage_local():
                # FileSystemStorage returns a path, not a url
                loc_raw = get_site_url() + self.file.storage.url(videoname)
            else:
                loc = self.file.storage.url_monkeypatched(videoname,
                    response_headers={'response-content-disposition': 'attachment'})
            storecache_val = {'size':self.file.size, 'url':loc }
            storecache.set(storecache_key, storecache_val)
            return loc


    def dl_links_all(self):
        """
        Return list of tuples fully-qualified download URLs for video variants.
        Tuples of the form: (size_tag, URL, size, description)
        """

        myname  = self.file.name
        mystore = self.file.storage
        if is_storage_local():
            # FIXME: doesn't work on local sites yet
            print "WARNING: Multiple download links don't work on local sites yet, sorry." 
            return [('large', get_site_url() + mystore.url(myname), self.file.size, '')]
        else:
            # XXX: very S3 specific
            urlof = mystore.url_monkeypatched
            basepath, filename = RE_S3_PATH_FILENAME_SPLIT.match(myname).groups()
            names = []
            for size in sorted(video_resize_options):
                checkfor = basepath+'/'+size+'/'+filename
                storecache = get_cache('video_store')
                storecache_key = checkfor.replace(' ','%20')[-240:]  # memcache no spaces in cache key, char limit
                storecache_hit = storecache.get(storecache_key)
                if storecache_hit:
                    CacheStat.report('hit', 'video_store')
                    if storecache_hit['size'] > 0:
                        # print "found %s in cache (%s, %d, %s)"\
                        #      % (size, storecache_hit['url'], storecache_hit['size'], storecache_hit['desc'])
                        names.append((size, storecache_hit['url'], storecache_hit['size'], storecache_hit['desc']))
                    else:
                        # print "found %s in cache (NEG)" % size
                        pass

                else:
                    CacheStat.report('miss', 'video_store')
                    gotback = [x for x in mystore.bucket.list(prefix=checkfor)]
                    if gotback:
                        filesize=gotback[0].size
                        fileurl=urlof(checkfor,
                                response_headers={'response-content-disposition': 'attachment'})                  
                        filedesc=video_resize_options[size][3]
                        names.append((size, fileurl, filesize, filedesc))
                        # positive cache
                        # print "add %s in cache (%s, %d, %s)" % (size, fileurl, filesize, filedesc)
                        storecache_val = {'size':filesize, 'url':fileurl, 'desc':filedesc}
                        storecache.set(storecache_key, storecache_val)
                    else:
                        # negative cache
                        # print "add %s in cache (NEG)" % (size)
                        storecache_val = {'size':0 }
                        storecache.set(storecache_key, storecache_val)

            if not names:
                fileurl=urlof(myname,
                                response_headers={'response-content-disposition': 'attachment'})          
                names = [('large', fileurl, self.file.size, '')]
            return names

    def ret_url(self):
        return "https://www.youtube.com/analytics#dt=lt,fi=v-" + self.url + ",r=retention"

    def runtime(self):
        if not self.duration:
            return "Runtime not yet available"
        m, s = divmod(self.duration, 60)
        h, m = divmod(m, 60)
        if h:
            return "%d:%02d:%02d" % (h, m, s)
        else:
            return "%d:%02d" % (m, s)

    def validate_unique(self, exclude=None):
        errors = {}

        try:
            super(Video, self).validate_unique(exclude=exclude)
        except ValidationError, e:
            errors.update(e.message_dict)

        # Special slug uniqueness validation for course
        slug_videos = Video.objects.filter(course=self.course,is_deleted=0,slug=self.slug)

        # Exclude the current object from the query if we are editing an
        # instance (as opposed to creating a new one)
        if not self._state.adding and self.pk is not None:
            slug_videos = slug_videos.exclude(pk=self.pk)

        if slug_videos.exists():
            errors.setdefault("slug", []).append("Video with this URL identifier already exists.")

        if errors:
            raise ValidationError(errors)

    def in_list(self, needle, haystack):
        for hay in haystack:
            if needle.exercise.fileName == hay.exercise.fileName:
                return True
        return False

    def get_url(self):
        return reverse("courses.videos.views.view", args=[self.course.prefix, self.course.suffix, self.slug])
        
    def __unicode__(self):
        if self.title:
            return self.title
        else:
            return "No Title"

    class Meta:
        db_table = u'c2g_videos'


class VideoViewTraces(TimestampMixin, models.Model):
    course = models.ForeignKey(Course, db_index=True)
    video = models.ForeignKey(Video, db_index=True)
    user = models.ForeignKey(User)
    trace = models.TextField(blank=True)
    
    class Meta:
        db_table = u'c2g_video_view_traces'
        
class VideoActivity(models.Model):
    student = models.ForeignKey(User)
    course = models.ForeignKey(Course)
    video = models.ForeignKey(Video)
    start_seconds = models.IntegerField(default=0, blank=True)
    max_end_seconds = models.IntegerField(default=0, blank=True)
    #last_watched = models.DateTimeField(auto_now=True, auto_now_add=False)

    def percent_done(self):
        return float(self.start_seconds)*100/self.video.duration

    def __unicode__(self):
        return self.student.username
    class Meta:
        db_table = u'c2g_video_activity'

    # Prevent writes to read-only database, fail is better than data loss
    def save(self, *args, **kwargs):
        if get_database_considering_override() == 'readonly':
            raise DatabaseError
        super(VideoActivity, self).save(*args, **kwargs)
    def delete(self):
        if get_database_considering_override() == 'readonly':
            raise DatabaseError
        super(VideoActivity, self).delete()

        
class VideoDownload(models.Model):
    student = models.ForeignKey(User)
    course = models.ForeignKey(Course)
    video = models.ForeignKey(Video)
    download_date = models.DateTimeField(auto_now=False, auto_now_add=True)
    format = models.CharField(max_length=35, null=True, blank=True)
    
    class Meta:
        db_table = u'c2g_video_download'

class ProblemSetManager(models.Manager):
    def getByCourse(self, course):
        if course.mode == 'draft':
            return self.filter(course=course,is_deleted=0, section__is_deleted=0).order_by('section','index')
        else:
            now = datetime.now()
            return self.filter(course=course,is_deleted=0, section__is_deleted=0,live_datetime__lt=now).order_by('section','index')
        
    def getBySection(self, section):
        if section.mode == 'draft':
            return self.filter(section=section, is_deleted=0).order_by('index')
        else:
            now = datetime.now()
            return self.filter(section=section, is_deleted=0, live_datetime__lt=now).order_by('index')

class ProblemSet(TimestampMixin, Stageable, Sortable, Deletable, models.Model):
    course = models.ForeignKey(Course)
    section = models.ForeignKey(ContentSection, db_index=True)
    slug = models.SlugField("URL Identifier")
    title = models.CharField(max_length=255,)
    description = models.TextField(blank=True)
    path = models.CharField(max_length=255) #used as URL path to load problem set contents (Khan Summative file)
    due_date = models.DateTimeField(null=True)
    grace_period = models.DateTimeField()
    partial_credit_deadline = models.DateTimeField()
    assessment_type = models.CharField(max_length=255)
    late_penalty = models.IntegerField()
    submissions_permitted = models.IntegerField()
    resubmission_penalty = models.IntegerField()
    randomize = models.BooleanField()
    objects = ProblemSetManager()

    def create_ready_instance(self):
        ready_instance = ProblemSet(
            course=self.course.image,
            section=self.section.image,
            slug=self.slug,
            title=self.title,
            description=self.description,
            path=self.path,
            live_datetime=self.live_datetime,
            due_date=self.due_date,
            grace_period=self.grace_period,
            partial_credit_deadline=self.partial_credit_deadline,
            assessment_type=self.assessment_type,
            late_penalty=self.late_penalty,
            submissions_permitted=self.submissions_permitted,
            resubmission_penalty=self.resubmission_penalty,
            index=self.index,
            image = self,
            mode = 'ready',
        )
        ready_instance.save()
        self.image = ready_instance
        self.save()
        return ready_instance

    def exercises_changed(self):
        ready_instance = self.image
        draft_psetToExs = ProblemSetToExercise.objects.getByProblemset(self)
        ready_psetToExs = ProblemSetToExercise.objects.getByProblemset(ready_instance)
        if len(draft_psetToExs) != len(ready_psetToExs):
            return True
        for draft_psetToEx in draft_psetToExs:
            if not draft_psetToEx.image:
                return True
        return False

    def commit(self, clone_fields = None):
        if self.mode != 'draft': return;
        if not self.image: self.create_ready_instance()

        ready_instance = self.image
        if not clone_fields or 'section' in clone_fields:
            ready_instance.section = self.section.image
        if not clone_fields or 'title' in clone_fields:
            ready_instance.title = self.title
        if not clone_fields or 'description' in clone_fields:
            ready_instance.description = self.description
        if not clone_fields or 'path' in clone_fields:
            ready_instance.path = self.path
        if not clone_fields or 'slug' in clone_fields:
            ready_instance.slug = self.slug
        if not clone_fields or 'index' in clone_fields:
            ready_instance.index = self.index
        if not clone_fields or 'live_datetime' in clone_fields:
            ready_instance.live_datetime = self.live_datetime
        if not clone_fields or 'due_date' in clone_fields:
            ready_instance.due_date = self.due_date
        if not clone_fields or 'grace_period' in clone_fields:
            ready_instance.grace_period = self.grace_period
        if not clone_fields or 'partial_credit_deadline' in clone_fields:
            ready_instance.partial_credit_deadline = self.partial_credit_deadline
        if not clone_fields or 'assessment_type' in clone_fields:
            ready_instance.assessment_type = self.assessment_type
        if not clone_fields or 'late_penalty' in clone_fields:
            ready_instance.late_penalty = self.late_penalty
        if not clone_fields or 'submissions_permitted' in clone_fields:
            ready_instance.submissions_permitted = self.submissions_permitted
        if not clone_fields or 'resubmission_penalty' in clone_fields:
            ready_instance.resubmission_penalty = self.resubmission_penalty

        ready_instance.save()

        if self.exercises_changed() == True:
            draft_psetToExs =  ProblemSetToExercise.objects.getByProblemset(self)
            ready_psetToExs = ProblemSetToExercise.objects.getByProblemset(ready_instance)
                
            #If filename in ready but not in draft list then delete it.
            for ready_psetToEx in ready_psetToExs:
                if not self.in_list(ready_psetToEx, draft_psetToExs):
                    ready_psetToEx.is_deleted = 1
                    ready_psetToEx.save()

            #Find ready instance, if it exists, and set it.
            for draft_psetToEx in draft_psetToExs:
                not_deleted_ready_psetToEx = ProblemSetToExercise.objects.filter(problemSet=ready_instance, exercise=draft_psetToEx.exercise, is_deleted=0)
                deleted_ready_psetToExs = ProblemSetToExercise.objects.filter(problemSet=ready_instance, exercise=draft_psetToEx.exercise, is_deleted=1).order_by('-id')
                        
                if not_deleted_ready_psetToEx.exists():
                    ready_psetToEx = not_deleted_ready_psetToEx[0]
                    ready_psetToEx.number = draft_psetToEx.number
                    ready_psetToEx.save() 
                    
                elif deleted_ready_psetToExs.exists():
                    ready_psetToEx = deleted_ready_psetToExs[0]
                    ready_psetToEx.is_deleted = 0
                    ready_psetToEx.number = draft_psetToEx.number
                    ready_psetToEx.save()
                    
                else:
                    ready_psetToEx = ProblemSetToExercise(problemSet = ready_instance,
                                                          exercise = draft_psetToEx.exercise,
                                                          number = draft_psetToEx.number,
                                                          is_deleted = 0,
                                                          mode = 'ready',
                                                          image = draft_psetToEx)
                    ready_psetToEx.save()
                    draft_psetToEx.image = ready_psetToEx 
                    draft_psetToEx.save()

        else:
            draft_psetToExs = ProblemSetToExercise.objects.getByProblemset(self)
            for draft_psetToEx in draft_psetToExs:
                draft_psetToEx.image.number = draft_psetToEx.number
                draft_psetToEx.image.save()

    def revert(self, clone_fields = None):
        if self.mode != 'draft': return;

        ready_instance = self.image
        if not clone_fields or 'section' in clone_fields:
            self.section = ready_instance.section.image
        if not clone_fields or 'title' in clone_fields:
            self.title = ready_instance.title
        if not clone_fields or 'description' in clone_fields:
            self.description = ready_instance.description
        if not clone_fields or 'path' in clone_fields:
            self.path = ready_instance.path
        if not clone_fields or 'slug' in clone_fields:
            self.slug = ready_instance.slug
        if not clone_fields or 'index' in clone_fields:
            self.index = ready_instance.index
        if not clone_fields or 'live_datetime' in clone_fields:
            self.live_datetime = ready_instance.live_datetime
        if not clone_fields or 'due_date' in clone_fields:
            self.due_date = ready_instance.due_date
        if not clone_fields or 'grace_period' in clone_fields:
            self.grace_period = ready_instance.grace_period
        if not clone_fields or 'partial_credit_deadline' in clone_fields:
            self.partial_credit_deadline = ready_instance.partial_credit_deadline
        if not clone_fields or 'assessment_type' in clone_fields:
            self.assessment_type = ready_instance.assessment_type
        if not clone_fields or 'late_penalty' in clone_fields:
            self.late_penalty = ready_instance.late_penalty
        if not clone_fields or 'submissions_permitted' in clone_fields:
            self.submissions_permitted = ready_instance.submissions_permitted
        if not clone_fields or 'resubmission_penalty' in clone_fields:
            self.resubmission_penalty = ready_instance.resubmission_penalty

        self.save()

        if self.exercises_changed() == True:
            draft_psetToExs = ProblemSetToExercise.objects.getByProblemset(self)
            ready_psetToExs = ProblemSetToExercise.objects.getByProblemset(ready_instance)

            #If filename in draft but not in ready list then delete it.
            for draft_psetToEx in draft_psetToExs:
                if not self.in_list(draft_psetToEx, ready_psetToExs):
                    draft_psetToEx.is_deleted = 1
                    draft_psetToEx.save()

            #Find draft instance and set it.
            for ready_psetToEx in ready_psetToExs:
                not_deleted_draft_psetToEx = ProblemSetToExercise.objects.filter(problemSet=self, exercise=ready_psetToEx.exercise, is_deleted=0)
                deleted_draft_psetToExs = ProblemSetToExercise.objects.filter(problemSet=self, exercise=ready_psetToEx.exercise, is_deleted=1).order_by('-id')
                        
                if not_deleted_draft_psetToEx.exists():
                    draft_psetToEx = not_deleted_draft_psetToEx[0]
                    draft_psetToEx.number = ready_psetToEx.number
                    draft_psetToEx.save() 
                    
                elif deleted_draft_psetToExs.exists():
                    draft_psetToEx = deleted_draft_psetToExs[0]
                    draft_psetToEx.is_deleted = 0
                    draft_psetToEx.number = ready_psetToEx.number
                    draft_psetToEx.save()

        else:
            ready_psetToExs = ProblemSetToExercise.objects.getByProblemset(ready_instance)
            for ready_psetToEx in ready_psetToExs:
                ready_psetToEx.image.number = ready_psetToEx.number
                ready_psetToEx.image.save()


    def is_synced(self):
        if not self.image:
            return False
        image = self.image
        if self.exercises_changed() == True:
            return False
        if self.section != image.section.image:
            return False
        if self.title != image.title:
            return False
        if self.description != image.description:
            return False
        if self.path != image.path:
            return False
        if self.slug != image.slug:
            return False
        if self.index != image.index:
            return False
        if self.live_datetime != image.live_datetime:
            return False
        if self.due_date != image.due_date:
            return False
        if self.grace_period != image.grace_period:
            return False
        if self.partial_credit_deadline != image.partial_credit_deadline:
            return False
        if self.assessment_type != image.assessment_type:
            return False
        if self.late_penalty != image.late_penalty:
            return False
        if self.submissions_permitted != image.submissions_permitted:
            return False
        if self.resubmission_penalty != image.resubmission_penalty:
            return False
        draft_psetToExs = ProblemSetToExercise.objects.getByProblemset(self)
        for draft_psetToEx in draft_psetToExs:
            if draft_psetToEx.number != draft_psetToEx.image.number:
                return False
        return True

    def validate_unique(self, exclude=None):
        errors = {}

        try:
            super(ProblemSet, self).validate_unique(exclude=exclude)
        except ValidationError, e:
            errors.update(e.message_dict)

        # Special slug uniqueness validation for course
        slug_psets = ProblemSet.objects.filter(course=self.course,is_deleted=0,slug=self.slug)

        # Exclude the current object from the query if we are editing an
        # instance (as opposed to creating a new one)
        if not self._state.adding and self.pk is not None:
            slug_psets = slug_psets.exclude(pk=self.pk)

        if slug_psets.exists():
            errors.setdefault("slug", []).append("Problem set with this URL identifier already exists.")

        if errors:
            raise ValidationError(errors)
        
    def get_progress(self, student):
        submissions_permitted = self.submissions_permitted
        if submissions_permitted == 0:
            submissions_permitted = sys.maxsize
        pset_activities = ProblemActivity.objects.select_related('problemSet', 'exercise').filter(problemset_to_exercise__problemSet=self, student=student)
        psetToExs = ProblemSetToExercise.objects.getByProblemset(self)
        questions_completed = 0
        for psetToEx in psetToExs:
            exercise_activities = pset_activities.filter(problemset_to_exercise__exercise__fileName=psetToEx.exercise.fileName).order_by('time_created')
            for exercise_activity in exercise_activities:
                if exercise_activity.attempt_number == submissions_permitted:
                    questions_completed += 1
                    break
                elif exercise_activity.complete:
                    questions_completed += 1
                    break
        return questions_completed
    
    #This is the old version, from sprint-15, without late penalties
    def get_score_v1(self, student, detailed=False):
        exercise_scores = {}
        resubmission_penalty = self.resubmission_penalty
        submissions_permitted = self.submissions_permitted
        if submissions_permitted == 0:
            submissions_permitted = sys.maxsize
        pset_activities = ProblemActivity.objects.select_related('problemSet', 'exercise').filter(problemset_to_exercise__problemSet=self, student=student)
        psetToExs = ProblemSetToExercise.objects.getByProblemset(self)
        total_score = 0.0
        for psetToEx in psetToExs:
            exercise_activities = pset_activities.filter(problemset_to_exercise__exercise__fileName=psetToEx.exercise.fileName).order_by('time_created')
            exercise_percent = 100
            for exercise_activity in exercise_activities:
                if exercise_activity.attempt_number > submissions_permitted:
                    break
                elif exercise_activity.complete:
                    total_score += exercise_percent/100.0
                    break
                else:
                    exercise_percent -= resubmission_penalty
            exercise_scores[psetToEx.exercise.id] = exercise_percent/100.0
        
        if detailed: return exercise_scores
        else: return total_score


    def get_score(self, student, detailed=False):
        exercise_scores = {}
        resubmission_penalty = self.resubmission_penalty
        submissions_permitted = self.submissions_permitted
        if submissions_permitted == 0:
            submissions_permitted = sys.maxsize
        pset_activities = ProblemActivity.objects.select_related('problemSet', 'exercise').filter(problemset_to_exercise__problemSet=self, student=student)
        psetToExs = ProblemSetToExercise.objects.getByProblemset(self)
        total_score = 0.0
        for psetToEx in psetToExs:
            exercise_activities = pset_activities.filter(problemset_to_exercise__exercise__fileName=psetToEx.exercise.fileName).order_by('time_created')
            #Exercise percent starts at 100 and gets deducted per wrong attempt, and will
            #be added to the total score if a valid complete_time is found
            exercise_percent = 100
            complete_time = None
            for exercise_activity in exercise_activities:
                #short-circuit if no correct attempts within the allowed number or
                #within the partial credit deadline
                if exercise_activity.attempt_number > submissions_permitted or \
                   exercise_activity.time_created > self.partial_credit_deadline:
                    break
                #if submission is valid and correct, mark complete_time, and break
                elif exercise_activity.complete:
                    complete_time = exercise_activity.time_created
                    break
                #deduct for submission that was incorrect
                else:
                    exercise_percent -= resubmission_penalty
        
            #give 0 if no correct attempts
            if not complete_time:
                exercise_percent=0
            #penalize if late
            elif complete_time > self.grace_period:
                exercise_percent = int(exercise_percent*(100-self.late_penalty)/100.0)
        
            #floor exercise percent at 0
            exercise_percent = max(exercise_percent,0)
            
            #add to total_score
            total_score += exercise_percent/100.0
                    
            exercise_scores[psetToEx.exercise.id] = exercise_percent/100.0
            
        if detailed: return exercise_scores
        else: return total_score

    def in_list(self, needle, haystack):
        for hay in haystack:
            if needle.exercise.fileName == hay.exercise.fileName:
                return True
        return False

    def get_url(self):
        # not using reverse() because problemsets have been removed from urls.py
        return '/' + self.course.prefix.replace('--', '/') + '/problemsets/' + self.slug

    def __unicode__(self):
        return self.title
    
    class Meta:
        db_table = u'c2g_problem_sets'
        
class Exercise(TimestampMixin, Deletable, models.Model):
    problemSet = models.ManyToManyField(ProblemSet, through='ProblemSetToExercise')
    video = models.ManyToManyField(Video, through='VideoToExercise')
    fileName = models.CharField(max_length=255)
    file = models.FileField(upload_to=get_file_path, null=True)
    handle = models.CharField(max_length=255, null=True, db_index=True)
    def __unicode__(self):
        return self.fileName
        
    def get_slug(self):
        split_parts = self.fileName.split('/')
        last_part = split_parts[-1]
        split_parts = last_part.split('.')
        if len(split_parts) == 0:
            return "Untitled exercise"
        elif len(split_parts) == 1:
            return split_parts[0]
        else:
            return ".".join(split_parts[0:-1])
    
    class Meta:
        db_table = u'c2g_exercises'


class GetPsetToExsByProblemset (models.Manager):
    def getByProblemset(self, problemSet):
        return self.filter(problemSet=problemSet,is_deleted=0).order_by('number')


class ProblemSetToExercise( Deletable, models.Model):
    problemSet = models.ForeignKey(ProblemSet)
    exercise = models.ForeignKey(Exercise)
    number = models.IntegerField(null=True, blank=True)
    image = models.ForeignKey('self',null=True, blank=True)
    mode = models.TextField(blank=True)
    objects = GetPsetToExsByProblemset()
    def __unicode__(self):
        return self.problemSet.title + "-" + self.exercise.fileName
    class Meta:
        db_table = u'c2g_problemset_to_exercise'


class GetVideoToExerciseByVideo(models.Manager):
    def getByVideo(self, video):
        return self.filter(video=video, is_deleted=0).order_by('video_time')

class VideoToExercise(Deletable, models.Model):
    video = models.ForeignKey(Video)
    exercise = models.ForeignKey(Exercise)
    video_time = models.IntegerField()
    image = models.ForeignKey('self',null=True, blank=True)
    mode = models.TextField(blank=True)
    objects = GetVideoToExerciseByVideo()
    def __unicode__(self):
        return self.video.title + "-" + self.exercise.fileName
    class Meta:
        db_table = u'c2g_video_to_exercise'


class ProblemActivity(TimestampMixin, models.Model):
    student = models.ForeignKey(User)
    video_to_exercise = models.ForeignKey(VideoToExercise, null=True)
    problemset_to_exercise = models.ForeignKey(ProblemSetToExercise, null=True)
    problem_identifier = models.CharField(max_length=255, blank=True)
    complete = models.IntegerField(null=True, blank=True)
    attempt_content = models.TextField(null=True, blank=True)
    count_hints = models.IntegerField(null=True, blank=True)
    time_taken = models.IntegerField(null=True, blank=True)
    attempt_number = models.IntegerField(null=True, blank=True)
    sha1 = models.TextField(blank=True)
    seed = models.TextField(blank=True)
    problem_type = models.TextField(blank=True)
    review_mode = models.IntegerField(null=True, blank=True)
    topic_mode = models.IntegerField(null=True, blank=True)
    casing = models.TextField(blank=True)
    card = models.TextField(blank=True)
    cards_done = models.IntegerField(null=True, blank=True)
    cards_left = models.IntegerField(null=True, blank=True)
    user_selection_val = models.CharField(max_length=1024, null=True, blank=True)
    user_choices = models.CharField(max_length=1024, null=True, blank=True)
    def __unicode__(self):
        return self.student.username + " " + str(self.time_created)
    class Meta:
        db_table = u'c2g_problem_activity'

class NewsEvent(models.Model):
    course = models.ForeignKey(Course)
    event = models.CharField(max_length=255)
    time_created = models.DateTimeField(auto_now=False, auto_now_add=True)

    def __unicode__(self):
        return self.event
    class Meta:
        db_table = u'c2g_news_events'
        
#Should probably slate this EditProfileForm for moving to a different file
class EditProfileForm(forms.Form):
    first_name = forms.CharField(max_length=30)
    last_name = forms.CharField(max_length=30)
    email = forms.CharField(max_length=30)


class Email(TimestampMixin, models.Model):
    sender = models.ForeignKey(User, default=1, blank=True, null=True)
    hash = models.CharField(max_length=128, db_index=True)
    subject = models.CharField(max_length=128, blank=True)
    html_message = models.TextField(null=True, blank=True)    
    class Meta:
        abstract = True

class CourseEmail(Email, models.Model):
    TO_OPTIONS =(('myself','myself'),
                 ('staff','staff'),
                 ('students','students'),
                 ('all','all'),
                 )
    course = models.ForeignKey(Course)
    to = models.CharField(max_length=64, choices=TO_OPTIONS, default='myself')

    
    def __unicode__(self):
        return self.subject
    class Meta:
        db_table = u'c2g_course_emails'

class EmailAddr(models.Model):
    name = models.CharField(max_length=128, null=True, blank=True)
    addr = models.EmailField(max_length=128)
    optout = models.BooleanField(default=False)
    optout_code = models.CharField(max_length=64, default='optout')
    def __unicode__(self):
        return self.addr

def write_optout_code(sender, instance, created, raw, **kwargs):
    if created and not raw:  #create means that a new DB entry is created, raw is set when fixtures are being loaded
        instance.optout_code = md5(instance.name+instance.addr+datetime.isoformat(datetime.now())).hexdigest()
        instance.save()

post_save.connect(write_optout_code, sender=EmailAddr)


class MailingList(models.Model):
    name = models.CharField(max_length=128, blank=True)
    members = models.ManyToManyField(EmailAddr)
    def __unicode__(self):
        return self.name

class ListEmail(Email, models.Model):
    from_name = models.CharField(max_length=128, blank=True)
    from_addr = models.CharField(max_length=128, blank=True)
    to_list = models.ForeignKey(MailingList)
    def __unicode__(self):
        return self.subject
        
class PageVisitLog(TimestampMixin, models.Model):
    course = models.ForeignKey(Course, db_index=True)
    user = models.ForeignKey(User)
    page_type = models.CharField(max_length=128, db_index=True)
    object_id = models.CharField(max_length=128, blank=True)
    
    class Meta:
        db_table = u'c2g_page_visit_log'

class ExamManager(models.Manager):
    def getByCourse(self, course):
        if course.mode == 'draft':
            return self.filter(course=course, is_deleted=0, section__is_deleted=0).order_by('section','index')
        else:
            now = datetime.now()
            return self.filter(course=course, is_deleted=0, section__is_deleted=0,live_datetime__lt=now).order_by('section','index')

    def getByCourseSubTypes(self, course, types):
        if course.mode == 'draft':
            return self.filter(course=course, is_deleted=0, exam_type__in=types, section__is_deleted=0).order_by('section','index')
        else:
            now = datetime.now()
            return self.filter(course=course, is_deleted=0, exam_type__in=types, section__is_deleted=0,live_datetime__lt=now).order_by('section','index')

    def getBySection(self, section):
        if section.mode == 'draft':
            return self.filter(section=section, is_deleted=0).order_by('index')
        else:
            now = datetime.now()
            return self.filter(section=section, is_deleted=0, live_datetime__lt=now).order_by('index')

class Exam(TimestampMixin, Deletable, Stageable, Sortable, models.Model):
    
    EXAM_TYPE_CHOICES = (
                         ('exam', 'exam'),
                         ('problemset','problemset'),
                         ('survey', 'survey'),
                         ('interactive_exercise', 'interactive_exercise'),
                         )
    
    Exam_HUMAN_TYPES = {'exam':'Exam',
                        'problemset':'Quiz',
                        'survey':'Survey',
                        'interactive_exercise':'Interactive Exercise',
                       }
    Exam_HUMAN_TYPES_PLURAL = {'exam':'Exams',
                               'problemset':'Quizzes',
                               'survey':'Surveys',
                               'interactive_exercise':'Interactive Exercises',
                              }

    course = models.ForeignKey(Course, db_index=True)
    section = models.ForeignKey(ContentSection, null=True, db_index=True)
    title = models.CharField(max_length=255, null=True, blank=True)
    description = models.TextField(null=True, blank=True)
    html_content = models.TextField(blank=True)
    xml_metadata = models.TextField(null=True, blank=True)
    xml_imported = models.TextField(null=True, blank=True) ###This is the XML used to import the exam content.  We only store it to re-display it.
    quizdown = models.TextField(null=True, blank=True) ### Stored only for redisplay
    slug = models.SlugField("URL Identifier", max_length=255, null=True)
    due_date = models.DateTimeField(null=True, blank=True)
    grace_period = models.DateTimeField(null=True, blank=True)
    partial_credit_deadline = models.DateTimeField(null=True, blank=True)
    late_penalty = models.IntegerField(default=0, null=True, blank=True)
    daily_late_penalty = models.FloatField(default=0.0, null=True, blank=True)
    submissions_permitted = models.IntegerField(default=999, null=True, blank=True)
    resubmission_penalty = models.IntegerField(default=0, null=True, blank=True)
    autograde = models.BooleanField(default=False)
    display_single = models.BooleanField(default=False)
    grade_single = models.BooleanField(default=False)
    hide_grades = models.BooleanField(default=False)
    invideo = models.BooleanField(default=False)
    timed = models.BooleanField(default=False)
    minutesallowed = models.IntegerField(null=True, blank=True)
    minutes_btw_attempts = models.IntegerField(default=0)
    exam_type = models.CharField(max_length=32, default="exam", choices=EXAM_TYPE_CHOICES)
    #there is a function from assessment_type => (invideo, exam_type, display_single, grade_single, autograde) that we don't want to write inverse for
    #so we just store it
    assessment_type = models.CharField(max_length=64, null=True, blank=True)
    total_score = models.FloatField(null=True, blank=True)
    objects = ExamManager()
    
    def num_of_student_records(self, student):
        """This returns the number of completed records on this exam by student"""
        attempt_num_obj = ExamRecord.objects.filter(exam=self, student=student, complete=True).aggregate(Max('attempt_number'))
        if not attempt_num_obj['attempt_number__max']:
            return 0
        else:
            return attempt_num_obj['attempt_number__max']


    def max_attempts_exceeded(self, student):
        """Returns True if student has used up max number of attempts"""
        if self.submissions_permitted==0:
            return False
        return self.num_of_student_records(student) >= self.submissions_permitted
    
    def past_due(self):
        if self.due_date and (datetime.now() > self.grace_period):
            return True
        return False
    
    def past_all_deadlines(self):
        future = datetime(3000,1,1)
        grace_period = self.grace_period if self.grace_period else future
        partial_credit_deadline = self.partial_credit_deadline if self.partial_credit_deadline else future

        compareD = max(grace_period, partial_credit_deadline)
    
        return datetime.now() > compareD
    
    def load_mathjax(self):
        """uses a regexp to figure out if the rendering of the exam needs mathjax
           the regexp are rough, but should not have any false negatives.  (at
           worst we load mathjax when we don't need it.
        """
        if re.search(r"\$\$.*\$\$", self.html_content, re.DOTALL) or re.search(r"\\\[.*\\\]", self.html_content, re.DOTALL):
            return True
        return False
    
    def get_total_score(self):
        """Considers randomization"""
        numQ = self.num_random_questions()
        if numQ == 0:
            return self.total_score
        else:
            md_dom = parseString(encoding.smart_str(self.xml_metadata, encoding='utf-8'))
            questions = md_dom.getElementsByTagName('question_metadata')
            ag = AutoGrader(self.xml_metadata)
                
            total_score = 0
            for i in range(numQ):
                id = questions[i].getAttribute("id")
                total_score += ag.question_points(id)

            return total_score
                
    
    def num_random_questions(self):
        """The number of randomly_selected questions that are specified to be shown
           Returns 0 if there is no choosenquestions attribute in exam_metadata or
            if anything fails to parse, etc.
        """
        try:
            md_dom = parseString(encoding.smart_str(self.xml_metadata, encoding='utf-8'))
        except ExpatError:
            return 0 
        exam_md = md_dom.getElementsByTagName('exam_metadata')
        if not exam_md:
            return 0
        else:
            numstr = exam_md[0].getAttribute('choosenquestions')
            try:
                return int(numstr)
            except ValueError:
                return 0
        return 0

    def getHTML(self, question_ids=None):
        """ Gets the rendered question HTML, taking into consideration any randomization.
            The kwarg questions_ids takes a list of pre-selected question ids which
            will be the only ones rendered (provided they exist).
            The actual return value is a dict with key 'html' being the html content,
            'subset' being a boolean if less than the total number of question divs are in html,
            and 'question_ids' being an array of ids of the actually included <div class="question"> in html.
            'question_ids' is only guaranteed be populated if 'subset' is True
        """
        #defaults
        retv = {'html':'', 'subset':False, 'question_ids':[]}
        
        numQ = self.num_random_questions()
        #shortcut case.  We want the html_content as is
        if not numQ and question_ids is None:
            retv['html'] = self.html_content
            return retv

        #here, we have to parse the HTML
        parser = html5lib.HTMLParser(tree=treebuilders.getTreeBuilder("dom"))
        #even though we're parsing a fragment, calling parse fills in the
        #<html><head /><body /></html> structure
        html_dom = parser.parse(self.html_content)
        bodys = html_dom.getElementsByTagName('body')
        if not bodys:
            retv['html']=self.html_content
            return retv
        body = bodys[0]
        divs = body.getElementsByTagName('div')

        def has_class(attr_str, classname):
            """helper function to find a particular name in the class attribute"""
            return re.search(r"\b"+classname+r"\b", attr_str)

        #this is a minidom containing all of the <div class="question">s
        question_divs = filter(lambda div: has_class(div.getAttribute('class'), 'question'), divs)

        #now break up into 2 cases.  1 if question_ids is specified and 1 picking random divs
        #b/c we need to use removeChild to manipulate the DOM, have to build up a "removal" list
        #then actually remove it from the minidom representation of <body>
        if question_ids is not None:
            divs_chosen = filter(lambda div: div.getAttribute('id') in question_ids, question_divs)
            divs_to_remove = filter(lambda div: div.getAttribute('id') not in question_ids, question_divs)
            for div in divs_to_remove:
                body.removeChild(div)
        else:
            divs_chosen = copy.copy(question_divs)
            divs_to_remove = []
            while len(divs_chosen) > numQ:
                chx = random.choice(divs_chosen)
                divs_chosen.remove(chx)
                divs_to_remove.append(chx)
            for div in divs_to_remove:
                body.removeChild(div)

        #now serialize
        ret_html = ""
        for child in body.childNodes: #do this so we don't get the <body> tag
            ret_html += child.toxml()
        chosen_div_ids = map(lambda div: div.getAttribute('id'), divs_chosen)

        retv['html'] = ret_html
        retv['subset'] = len(divs_chosen) < len(question_divs)
        retv['question_ids'] = chosen_div_ids
        return retv
    
    def create_ready_instance(self):
        ready_instance = Exam(
            course=self.course.image,
            section=self.section.image,
            title=self.title,
            description=self.description,
            html_content=self.html_content,
            slug=self.slug,
            index=self.index,
            mode='ready',
            image=self,
            due_date=self.due_date,
            quizdown = self.quizdown,
            grace_period=self.grace_period,
            total_score=self.total_score,
            exam_type=self.exam_type,
            live_datetime = self.live_datetime,
            xml_metadata = self.xml_metadata,
            xml_imported = self.xml_imported,
            partial_credit_deadline = self.partial_credit_deadline,
            late_penalty = self.late_penalty,
            daily_late_penalty = self.daily_late_penalty,
            submissions_permitted = self.submissions_permitted,
            resubmission_penalty = self.resubmission_penalty,
            autograde = self.autograde,
            display_single = self.display_single,
            grade_single = self.grade_single,
            hide_grades = self.hide_grades,
            invideo = self.invideo,
            timed = self.timed,
            minutesallowed = self.minutesallowed,
            minutes_btw_attempts = self.minutes_btw_attempts,
            assessment_type = self.assessment_type,
        )
        ready_instance.save()
        self.image = ready_instance
        self.save()
    
    def commit(self, clone_fields = None):
        if self.mode != 'draft': return;
        if not self.image: self.create_ready_instance()

        ready_instance = self.image
        if not clone_fields or 'section' in clone_fields:
            ready_instance.section = self.section.image
        if not clone_fields or 'title' in clone_fields:
            ready_instance.title = self.title
        if not clone_fields or 'description' in clone_fields:
            ready_instance.description = self.description
        if not clone_fields or 'html_content' in clone_fields:
            ready_instance.html_content = self.html_content
        if not clone_fields or 'slug' in clone_fields:
            ready_instance.slug = self.slug
        if not clone_fields or 'index' in clone_fields:
            ready_instance.index = self.index
        if not clone_fields or 'due_date' in clone_fields:
            ready_instance.due_date = self.due_date
        if not clone_fields or 'grace_period' in clone_fields:
            ready_instance.grace_period = self.grace_period
        if not clone_fields or 'total_score' in clone_fields:
            ready_instance.total_score = self.total_score
        if not clone_fields or 'exam_type' in clone_fields:
            ready_instance.exam_type = self.exam_type
        if not clone_fields or 'live_datetime' in clone_fields:
            ready_instance.live_datetime = self.live_datetime
        if not clone_fields or 'xml_metadata' in clone_fields:
            ready_instance.xml_metadata = self.xml_metadata
        if not clone_fields or 'xml_imported' in clone_fields:
            ready_instance.xml_imported = self.xml_imported
        if not clone_fields or 'quizdown' in clone_fields:
            ready_instance.quizdown = self.quizdown
        if not clone_fields or 'partial_credit_deadline' in clone_fields:
            ready_instance.partial_credit_deadline = self.partial_credit_deadline
        if not clone_fields or 'late_penalty' in clone_fields:
            ready_instance.late_penalty = self.late_penalty
        if not clone_fields or 'daily_late_penalty' in clone_fields:
            ready_instance.daily_late_penalty = self.daily_late_penalty
        if not clone_fields or 'submissions_permitted' in clone_fields:
            ready_instance.submissions_permitted = self.submissions_permitted
        if not clone_fields or 'resubmission_penalty' in clone_fields:
            ready_instance.resubmission_penalty = self.resubmission_penalty
        if not clone_fields or 'autograde' in clone_fields:
            ready_instance.autograde = self.autograde
        if not clone_fields or 'display_single' in clone_fields:
            ready_instance.display_single = self.display_single
        if not clone_fields or 'grade_single' in clone_fields:
            ready_instance.grade_single = self.grade_single
        if not clone_fields or 'hide_grades' in clone_fields:
            ready_instance.hide_grades = self.hide_grades
        if not clone_fields or 'invideo' in clone_fields:
            ready_instance.invideo = self.invideo
        if not clone_fields or 'timed' in clone_fields:
            ready_instance.timed = self.timed
        if not clone_fields or 'minutesallowed' in clone_fields:
            ready_instance.minutesallowed = self.minutesallowed
        if not clone_fields or 'minutes_btw_attempts' in clone_fields:
            ready_instance.minutes_btw_attempts = self.minutes_btw_attempts
        if not clone_fields or 'assessment_type' in clone_fields:
            ready_instance.assessment_type = self.assessment_type
        
        ready_instance.save()
    
    def revert(self, clone_fields = None):
        if self.mode != 'draft': return;

        ready_instance = self.image
        if not clone_fields or 'section' in clone_fields:
            self.section = ready_instance.section.image        
        if not clone_fields or 'title' in clone_fields:
            self.title = ready_instance.title
        if not clone_fields or 'description' in clone_fields:
            self.description = ready_instance.description            
        if not clone_fields or 'html_content' in clone_fields:
            self.html_content = ready_instance.html_content
        if not clone_fields or 'slug' in clone_fields:
            self.slug = ready_instance.slug
        if not clone_fields or 'index' in clone_fields:
            self.index = ready_instance.index
        if not clone_fields or 'due_date' in clone_fields:
            self.due_date = ready_instance.due_date
        if not clone_fields or 'grace_period' in clone_fields:
            self.grace_period = ready_instance.grace_period
        if not clone_fields or 'total_score' in clone_fields:
            self.total_score = ready_instance.total_score
        if not clone_fields or 'exam_type' in clone_fields:
            self.exam_type = ready_instance.exam_type
        if not clone_fields or 'live_datetime' in clone_fields:
            self.live_datetime = ready_instance.live_datetime
        if not clone_fields or 'xml_metadata' in clone_fields:
            self.xml_metadata = ready_instance.xml_metadata 
        if not clone_fields or 'xml_imported' in clone_fields:
            self.xml_imported = ready_instance.xml_imported
        if not clone_fields or 'quizdown' in clone_fields:
            self.quizdown = ready_instance.quizdown
        if not clone_fields or 'partial_credit_deadline' in clone_fields:
            self.partial_credit_deadline = ready_instance.partial_credit_deadline 
        if not clone_fields or 'late_penalty' in clone_fields:
            self.late_penalty = ready_instance.late_penalty
        if not clone_fields or 'daily_late_penalty' in clone_fields:
            self.daily_late_penalty = ready_instance.daily_late_penalty
        if not clone_fields or 'submissions_permitted' in clone_fields:
            self.submissions_permitted = ready_instance.submissions_permitted 
        if not clone_fields or 'resubmission_penalty' in clone_fields:
            self.resubmission_penalty = ready_instance.resubmission_penalty 
        if not clone_fields or 'autograde' in clone_fields:
            self.autograde = ready_instance.autograde 
        if not clone_fields or 'display_single' in clone_fields:
            self.display_single = ready_instance.display_single 
        if not clone_fields or 'grade_single' in clone_fields:
            self.grade_single = ready_instance.grade_single
        if not clone_fields or 'hide_grades' in clone_fields:
            self.hide_grades = ready_instance.hide_grades
        if not clone_fields or 'invideo' in clone_fields:
            self.invideo = ready_instance.invideo 
        if not clone_fields or 'timed' in clone_fields:
            self.timed = ready_instance.timed 
        if not clone_fields or 'minutesallowed' in clone_fields:
            self.minutesallowed = ready_instance.minutesallowed
        if not clone_fields or 'minutes_btw_attempts' in clone_fields:
            self.minutes_btw_attempts = ready_instance.minutes_btw_attempts
        if not clone_fields or 'assessment_type' in clone_fields:
            self.assessment_type = ready_instance.assessment_type

        self.save()
    
    def is_synced(self):
        if not self.image:
            return False        
        prod_instance = self.image
        if self.section != prod_instance.section.image:
            return False
        if self.title != prod_instance.title:
            return False
        if self.description != prod_instance.description:
            return False
        if self.html_content != self.image.html_content:
            return False
        if self.slug != self.image.slug:
            return False
        if self.index != self.image.index:
            return False
        if self.due_date != self.image.due_date:
            return False
        if self.grace_period != self.image.grace_period:
            return False
        if self.total_score != self.image.total_score:
            return False
        if self.exam_type != self.image.exam_type:
            return False
        if self.live_datetime != self.image.live_datetime:
            return False
        if self.xml_metadata != self.image.xml_metadata:
            return False
        if self.quizdown != self.image.quizdown:
            return False
        if self.xml_imported != self.image.xml_imported:
            return False
        if self.partial_credit_deadline != self.image.partial_credit_deadline:
            return False
        if self.late_penalty != self.image.late_penalty:
            return False
        if self.daily_late_penalty != self.image.daily_late_penalty:
            return False
        if self.submissions_permitted != self.image.submissions_permitted:
            return False
        if self.resubmission_penalty != self.image.resubmission_penalty:
            return False
        if self.autograde != self.image.autograde:
            return False
        if self.display_single != self.image.display_single:
            return False
        if self.grade_single != self.image.grade_single:
            return False
        if self.hide_grades != self.image.hide_grades:
            return False
        if self.invideo != self.image.invideo:
            return False
        if self.timed != self.image.timed:
            return False
        if self.minutesallowed != self.image.minutesallowed:
            return False
        if self.minutes_btw_attempts != self.image.minutes_btw_attempts:
            return False
        if self.assessment_type != self.image.assessment_type:
            return False
        return True

    def delete(self):
        """Do housekeeping on related Videos before calling up."""
        my_videos = self.video_set.all()
        for vid in my_videos:
            if vid.exam_id == self.id:
                vid.exam = None
                vid.save()
        super(Exam, self).delete()
    
    def safe_exam_type(self):
        if self.exam_type not in [li[0] for li in self.EXAM_TYPE_CHOICES]:
            return "exam"
        return self.exam_type
    
    def show_view_name(self):
        return self.safe_exam_type()+"_show"

    show_view = property(show_view_name)
    
    def list_view_name(self):
        return self.safe_exam_type()+"_list"

    list_view = property(list_view_name)

    def populated_view_name(self):
        return self.safe_exam_type()+"_populated"
    
    populated_view = property(populated_view_name)
        
    def graded_view_name(self):
        return self.safe_exam_type()+"_graded"

    graded_view = property(graded_view_name)

    def my_submissions_view_name(self):
        return self.safe_exam_type()+"_my_submissions"
    
    my_submissions_view = property(my_submissions_view_name)

    def record_view_name(self):
        return self.safe_exam_type()+"_record"

    def get_human_type(self):
        return self.Exam_HUMAN_TYPES[self.safe_exam_type()]

    def get_url(self):
        #return '/' + self.course.handle.replace('--', '/') + '/surveys/' + self.slug
        return reverse(self.show_view, args=[self.course.prefix, self.course.suffix, self.slug])
    
    def has_child_exams(self):
        return ContentGroup.has_children(self, types=['exam'])
    
    def is_child(self):
        return ContentGroup.is_child(self)
    
    record_view = property(record_view_name)

    def sync_videos_foreignkeys_with_metadata(self):
        """ 
            This will read self.xml_metadata and synchronize the foreignkey
            relationships in the database with those described in the xml_metadata.
            WHAT TO DO ABOUT PUBLICATION MODEL. WE ARE IGNORING IT FOR NOW, SO
            WILL HAVE TO CALL SEPARATELY FOR THE IMAGE.
        """
        #Clear out the old assocations first
        prev_videos = self.video_set.all()
        for video in prev_videos:
            video.exam = None
            video.save()
                
        new_video_slugs = videos_in_exam_metadata(self.xml_metadata)['video_slugs']
        new_videos = Video.objects.filter(course=self.course, mode=self.mode, is_deleted=False, slug__in=new_video_slugs)
        for new_video in new_videos:
            new_video.exam = self
            new_video.save()

        video_slugs_set = map(lambda li:li.slug, list(new_videos))
        video_slugs_not_set = list(set(new_video_slugs)-(set(video_slugs_set)))
    
        return {'video_slugs_set':video_slugs_set, 'video_slugs_not_set':video_slugs_not_set}
    
    def __unicode__(self):
        return self.title + " | Mode: " + self.mode

    # Prevent writes to read-only database, fail is better than data loss
    def save(self, *args, **kwargs):
        if get_database_considering_override() == 'readonly':
            raise DatabaseError
        super(Exam, self).save(*args, **kwargs)
    def delete(self):
        if get_database_considering_override() == 'readonly':
            raise DatabaseError
        super(Exam, self).delete()
    
def videos_in_exam_metadata(xml, times_for_video_slug=None):
    """
        Refactored code that parses exam_metadata for video associations.
        'question_times' only gets populated in the returned dict if a
        times_for_video_slug argument is specified.
    """
    metadata_dom = parseString(encoding.smart_str(xml, encoding='utf-8')) #The DOM corresponding to the XML metadata
    video_questions = metadata_dom.getElementsByTagName('video')
    
    question_times = {}
    video_slugs = []
    for video_node in video_questions:
        video_slug = video_node.getAttribute("url-identifier")
        if video_slug == "":
            video_slug = video_node.getAttribute("url_identifier")
        video_slugs = video_slugs + [video_slug]
        if video_slug == times_for_video_slug:
            question_children = video_node.getElementsByTagName("question")
            times = []
            for question in question_children:
                time = "sec_%s" % question.getAttribute("time")
                if time not in question_times:
                    question_times[time] = []
                question_times[time].append(question.getAttribute("id"))
    
    return {'dom':metadata_dom, 'questions':video_questions,
        'video_slugs':video_slugs, 'question_times':question_times}

def parse_video_exam_metadata(xml):
    """
        Helper function to parse the exam metadata for associated videos.
        Returns the response string detailing the videos found.
        Should also return a list of slugs
    """
    videos_obj = videos_in_exam_metadata(xml)
    if videos_obj['video_slugs']:
        video_times = {}
        for slug in videos_obj['video_slugs']:
            v1 = videos_in_exam_metadata(xml, times_for_video_slug=slug)
            video_times[slug]=v1['question_times']
        
        video_return_string = "This exam will be associated with the following videos:\n"
        for slug,times in video_times.iteritems():
            video_return_string += slug + " with questions at times " + \
                ",".join(list(times.iterkeys())) + "\n"
    else:
        video_return_string = ""
    
    return {'description':video_return_string, 'slug_list':videos_obj['video_slugs']}

class ExamRecord(TimestampMixin, models.Model):
    course = models.ForeignKey(Course, db_index=True)
    exam = models.ForeignKey(Exam, db_index=True)
    student = models.ForeignKey(User, db_index=True)
    json_data = models.TextField(null=True, blank=True)   #blob
    json_score_data = models.TextField(null=True, blank=True)  #blob
    attempt_number = models.IntegerField(default=0)
    complete = models.BooleanField(default=True)
    late = models.BooleanField(default=False)
    score = models.FloatField(null=True, blank=True)
    onpage = models.CharField(max_length=512, null=True, blank=True) #this is the URL in the nav-bar of the page
    
    def __unicode__(self):
        return (self.student.username + ":" + self.course.title + ":" + self.exam.title)

    
    def days_late(self, grace_period=None):
        if grace_period is None:
            grace_period = self.exam.grace_period
        late_timedelta = max(timedelta(0), self.time_created - grace_period)
        return math.ceil(late_timedelta.total_seconds() / (3600.0*24.0))

    def get_rendered_questions(self):
        try:
            score_data = json.loads(self.json_score_data)
        except ValueError:
            return None
        rq = score_data.get("__rendered_questions")
        if isinstance(rq, list):
            return rq
        else:
            return None

    def get_total_score(self):
        try:
            score_data = json.loads(self.json_score_data)
        except ValueError:
            return self.exam.total_score
        ts = score_data.get("__total_score")
        if ts:
            return ts
        else:
            return self.exam.total_score

    # Prevent writes to read-only database, fail is better than data loss
    def save(self, *args, **kwargs):
        if get_database_considering_override() == 'readonly':
            raise DatabaseError
        super(ExamRecord, self).save(*args, **kwargs)
    def delete(self):
        if get_database_considering_override() == 'readonly':
            raise DatabaseError
        super(ExamRecord, self).delete()

class Instructor(TimestampMixin, models.Model):
    name = models.TextField(blank=True)
    email = models.TextField(blank=True)
    biography = models.TextField(blank=True)
    photo = models.FileField(upload_to=get_file_path, blank=True)
    handle = models.CharField(max_length=255, null=True, db_index=True)
    
    def photo_dl_link(self):
        if not self.photo.storage.exists(self.photo.name):
            return ""
        if is_storage_local():
            url = get_site_url() + self.photo.storage.url(self.photo.name)
        else:
            url = self.photo.storage.url_monkeypatched(self.photo.name, querystring_auth=False)
        return url
    
    def __unicode__(self):
        return self.name
    
    class Meta:
        db_table = u'c2g_instructor'

class GetCourseInstructorByCourse(models.Manager):
    def getByCourse(self, course):
        return self.filter(course=course)


class CourseInstructor(TimestampMixin,  models.Model):
    course = models.ForeignKey(Course)
    instructor = models.ForeignKey(Instructor)
    objects = GetCourseInstructorByCourse()
        
    def __unicode__(self):
        return self.course.title + "-" + self.instructor.name
    
    class Meta:
        db_table = u'c2g_course_instructor'
                

class ExamScore(TimestampMixin, models.Model):
    """
    This class is meant to be the top level, authoritative score of each exam.  
    It should have a one-to-one relationship with the (exam, student) pair
    """
    course = models.ForeignKey(Course, db_index=True) #mainly for convenience
    exam = models.ForeignKey(Exam, db_index=True)
    student = models.ForeignKey(User, db_index=True)
    score = models.FloatField(null=True, blank=True) #this is the score over the whole exam, with penalities applied
    csv_imported = models.BooleanField(default=False)
    examrecordscore = models.ForeignKey('ExamRecordScore', null=True, db_index=True)
    #can have subscores corresponding to these, of type ExamScoreField.  Creating new class to do notion of list.
    #TODO: Add ForeignKey to which ExamRecord is responsible for this score, per GHI #2029
    
    def __unicode__(self):
        return (self.student.username + ":" + self.course.title + ":" + self.exam.title + ":" + str(self.score))

    class Meta:
        unique_together = ("exam", "student")
        
    # Prevent writes to read-only database, fail is better than data loss
    def save(self, *args, **kwargs):
        if get_database_considering_override() == 'readonly':
            raise DatabaseError
        super(ExamScore, self).save(*args, **kwargs)
    def delete(self):
        if get_database_considering_override() == 'readonly':
            raise DatabaseError
        super(ExamScore, self).delete()

    def setScore(self):
        #Set score to max of ExamRecordScore.score for this exam, student
        exam_records = ExamRecord.objects.values('id').filter(exam=self.exam, student=self.student, complete=1).annotate(max_score=Max('score')).order_by('-max_score', '-id')[:1]
        
        if exam_records:
            self.score = exam_records[0]['max_score']
            
            #We expect to find an associated ExamRecordScore but need to protect against it not being there.
            exam_record_score = ExamRecordScore.objects.filter(record_id=exam_records[0]['id'])
            if exam_record_score:
                self.examrecordscore = exam_record_score[0]
            
            self.save()
                    

# Deprecated
class ExamScoreField(TimestampMixin, models.Model):
    """Should be kept basically identical to ExamRecordScoreField"""
    parent = models.ForeignKey(ExamScore, db_index=True)
    field_name = models.CharField(max_length=128, db_index=True)
    human_name = models.CharField(max_length=128, db_index=True, null=True, blank=True)
    value = models.CharField(max_length=128, null=True, blank=True)
    correct = models.NullBooleanField()
    subscore = models.FloatField(default=0)
    comments = models.TextField(null=True, blank=True)
    associated_text = models.TextField(null=True, blank=True)

    def __unicode__(self):
        return (self.parent.student.username + ":" + self.parent.course.title + ":" + self.parent.exam.title + ":" + self.human_name)

	

class ExamRecordScore(TimestampMixin, models.Model):
    """
    Making a separate DB table to keep scores associated with each record.
    Currently for CSV-graded exams this does not get created since there are too many DB operations
    One of these can be "promoted" -- i.e. copied into ExamScore to be the official score
       **TODO: Write Promote as a function in the model**
    """
    record = models.OneToOneField(ExamRecord, db_index=True)
    raw_score = models.FloatField(null=True, blank=True) # this is the raw score of the entire record
    csv_imported = models.BooleanField(default=False)
    #subscores are in ExamRecordScoreField
    
    def __unicode__(self):
        return (self.record.student.username + ":" + self.record.course.title + ":" + self.record.exam.title + ":" + str(self.raw_score))

    # Prevent writes to read-only database, fail is better than data loss
    def save(self, *args, **kwargs):
        if get_database_considering_override() == 'readonly':
            raise DatabaseError
        super(ExamRecordScore, self).save(*args, **kwargs)
    def delete(self):
        if get_database_considering_override() == 'readonly':
            raise DatabaseError
        super(ExamRecordScore, self).delete()



class ExamRecordScoreField(TimestampMixin, models.Model):
    """Should be kept basically identical to ExamScoreField."""
    parent = models.ForeignKey(ExamRecordScore, db_index=True)
    field_name = models.CharField(max_length=128, db_index=True)
    human_name = models.CharField(max_length=128, db_index=True, null=True, blank=True)
    value = models.TextField(null=True, blank=True)
    correct = models.NullBooleanField()
    subscore = models.FloatField(default=0)
    comments = models.TextField(null=True, blank=True)
    associated_text = models.TextField(null=True, blank=True)
    def __unicode__(self):
        return (self.parent.record.student.username + ":" + self.parent.record.course.title + ":" + self.parent.record.exam.title + ":" + self.human_name)

class ExamRecordFieldLog(TimestampMixin, models.Model):
    """Log oriented table recording activity for each submission of each field."""
    course = models.ForeignKey(Course, db_index=True)
    exam = models.ForeignKey(Exam, db_index=True)
    student = models.ForeignKey(User, db_index=True)
    field_name = models.CharField(max_length=128, db_index=True)
    human_name = models.CharField(max_length=128, db_index=True, null=True, blank=True)
    value = models.TextField(null=True, blank=True)
    raw_score = models.FloatField(default=0, blank=True)
    max_score = models.FloatField(default=0, blank=True)  # info only, for interactive 
    def __unicode__(self):
        return (self.parent.record.student.username + ":" + self.parent.record.course.title + ":" + self.parent.record.exam.title + ":" + self.human_name)

class ExamRecordScoreFieldChoice(TimestampMixin, models.Model):
    """Exploding out even multiple choice answers"""
    parent = models.ForeignKey(ExamRecordScoreField, db_index=True)
    choice_value = models.CharField(max_length=128, db_index=True)
    human_name = models.CharField(max_length=128, db_index=True, null=True, blank=True)
    correct = models.NullBooleanField()
    associated_text = models.TextField(null=True, blank=True)
    def __unicode__(self):
        return (self.parent.parent.record.student.username + ":" + self.parent.parent.record.course.title + ":" \
                + self.parent.parent.record.exam.title + ":" + self.parent.human_name + ":" + self.human_name)

class CurrentTermMap(TimestampMixin, models.Model):
    course_prefix = models.CharField(max_length=64, unique=True, db_index=True)
    course_suffix = models.CharField(max_length=64)
    def __unicode__(self):
        return (self.course_prefix + "--" + self.course_suffix)

class StudentExamStart(TimestampMixin, models.Model):
    student = models.ForeignKey(User)
    exam = models.ForeignKey(Exam)
    
    def __unicode__(self):
        return (self.student.username + " ||| " + unicode(self.exam.course) + " ||| " + unicode(self.exam))

class ContentGroupManager(models.Manager):
    def getByCourse(self, course):
        return self.filter(course=course).order_by('group_id','level')

    def getByCourseAndLevel(self, course, level):
        return self.filter(course=course, level=level).order_by('group_id')

    def getByFieldnameAndId(self, fieldname, fieldid):
        """Use the type tag (video, etc.) and id to dereference an entry.
        
        Returns the ContentGroup entry for this item."""
        # TODO: cache this
        this = ContentGroup.groupable_types[fieldname].objects.get(id=fieldid)
        return this.contentgroup_set.get()

    def getChildrenByGroupId(self, group_id):
        return self.filter(level=2, group_id=group_id).order_by('display_style')

class ContentGroup(models.Model):
    group_id        = models.IntegerField(db_index=True, null=True, blank=True)
    level           = models.IntegerField(db_index=True)
    display_style   = models.CharField(max_length=32, default='list', blank=True)

    additional_page = models.ForeignKey(AdditionalPage, null=True, blank=True)
    course          = models.ForeignKey(Course)
    exam            = models.ForeignKey(Exam, null=True, blank=True)
    file            = models.ForeignKey(File, null=True, blank=True)
    problemSet      = models.ForeignKey(ProblemSet, null=True, blank=True)
    video           = models.ForeignKey(Video, null=True, blank=True)

    objects         = ContentGroupManager()

               # ContentGroup field name: model class name
    groupable_types = { 
                       'video':           Video,
                       'problemSet':      ProblemSet,
                       'additional_page': AdditionalPage, 
                       'file':            File,
                       'exam':            Exam,
                      }

    @classmethod
    def groupinfo_by_id(thisclass, tag, id):
        """Reverse-lookup the members of a group by the object id of a member.
        
        nota bene:
        O(n**2) for # of items in a group. n should be tiny, but be wary.
        OTOH, if ContentGroup.get_content_type becomes constant-time, this
        becomes linear, and then we win.
        """
        info = {'__parent': None, '__parent_tag': '', '__children': [], '__group_id': None, }
        cls = thisclass.groupable_types.get(tag, False)
        if not cls:
            return info
        obj = cls.objects.get(id=id)

        try:
            cgobjs = ContentGroup.objects.filter(group_id=obj.contentgroup_set.get().group_id)
        except ContentGroup.DoesNotExist:
            return {}
        info['__group_id'] = cgobjs[0].group_id
        for cgo in cgobjs:
            cttag = cgo.get_content_type()
            cgref = getattr(cgo, cttag)
            if not cttag or not cgref:
                continue
            if cgo.level == 1:
                info['__parent'] = cgref
                info['__parent_tag'] = cttag
            else:
                info['__children'].append(cgref)
            if info.has_key(cttag):
                info[cttag].append(cgref)
            else:
                info[cttag] = [cgref]
        return info

    @classmethod
    def reassign_parent_child_sections(thisclass, tag, id, new_section_id):
        """When updating parent's content section, make children follow it."""
        def do_content_section_update(obj, new_section_ref):
            # NB: ContentGroup objects are all ready-mode instances of a thing.
            obj.section = new_section_ref
            obj.save()
            if hasattr(obj, 'image'):
                if new_section_ref != None:      # can't take .image() of None
                    obj.image.section = new_section_ref.image
                else:
                    obj.image.section = new_section_ref
                obj.image.save()
        group_parent = None
        cginfo = thisclass.groupinfo_by_id(tag, id)
        if new_section_id == "null":
            new_section_ref = None
        else:
            new_section_ref = ContentSection.objects.get(id=new_section_id)
        if new_section_ref and new_section_ref.mode != "ready":
            new_section_ref = new_section_ref.image
        # * Get the parent information if it's available...
        group_parent = cginfo['__parent']
        # * ...but if it's not, this call should no-op
        if not group_parent:
            return False
        # * If this CG is already in new_section, this call should no-op
        if group_parent.section and new_section_ref and new_section_ref.id == group_parent.section.id:
            return False
        # * Otherwise "normal" case of group w/ parents and children getting moved
        do_content_section_update(group_parent, new_section_ref)
        for child in cginfo['__children']:
            do_content_section_update(child, new_section_ref)
        return True

    @classmethod
    def add_child(thisclass, group_id, tag, obj_ref, display_style='list'):
        """Add obj_ref having type tag to the ContentGroup table.

        Returns the ContentGroup entry id for the resulting child item.

        If group_id doesn't correspond to an existing ContentGroup.group_id, raises ValueError
        If entry isn't in the table, create it and add it
        If entry is in the table as a parent of the given group_id, demote it
        If entry is in the table as a child of a different group, move it to this group.

        display_style determines how the child items should be rendered with
        their parent; 'button' is the default.
        """
        # Technically there's no reason to restrict the ContentGroups
        # to two levels of hierarchy, but the UI design is harder for
        # more level (and as of this iteration the spec says two)
        if tag not in thisclass.groupable_types.keys():
            raise ValueError, "ContentGroup "+str(tag)+" an invalid object type tag."
        content_group = ContentGroup.objects.filter(group_id=group_id)
        if not content_group:
            raise ValueError, "ContentGroup "+str(group_id)+" does not exist."
        cgref = obj_ref.contentgroup_set.all()
        if not cgref:
            # it's not in the table, so add it
            new_item = ContentGroup(course=content_group[0].course, level=2, group_id=group_id, display_style=display_style)
            setattr(new_item, tag, obj_ref)
            new_item.save()
            return new_item.id
        else:
            cgref = cgref[0]
            # it is in the table, so do something reasonable:
            for entry in content_group:
                if getattr(entry, tag, False) == obj_ref:
                    # If this child is in this group already, return this group
                    if entry.level == 1 and entry.id != group_id:
                        # It is an error to make a parent into a child of its own group
                        # Instead, make a new group, then reassign_membership()
                        raise ValueError, "ContentGroup "+str(entry.id)+" is the parent of group "+str(group_id)
                    entry.display_style = display_style
                    entry.save()
                    return entry.id
            # We have a reference to it, but it's not in content_group, so reassign it
            if content_group and cgref:
                new_group_id = thisclass.reassign_membership(cgref, content_group.get(level=1))
            return new_group_id

    @classmethod
    def reassign_membership(thisclass, contentgroup, new_parent_cg):
        """Reassign a ContentGroup entry from its current parent to another.

        If a parent is reassigned in this way, also reassign all of its child
        items.

        Arguments:
        contentgroup: the ContentGroup entry to be made into a child
        new_parent_cg: the ContentGroup entry to which parent_cg should be reassigned

        Returns:
        new_parent_cg.group_id
        """
        new_group_id = new_parent_cg.group_id
        if contentgroup.level == 2:
            contentgroup.group_id = new_parent_cg.group_id
            contentgroup.save()
        else:
            children = ContentGroup.objects.filter(level=2, group_id=contentgroup.group_id)
            contentgroup.group_id = new_group_id
            contentgroup.level = 2
            for child in children:
                child.group_id = new_group_id
                child.save()
            contentgroup.save()
        return new_group_id

    @classmethod
    def add_parent(thisclass, course_ref, tag, obj_ref):
        """Add obj_ref having type tag to the ContentGroup table.

        Returns a group_id of the resulting ContentGroup.
        Note that this is the same as the parent object's ContentGroup id.

        If it is already a parent of a ContentGroup, just return
        If it is nonexistent in ContentGroup, create it as a parent
        If it is already a child in a group with no parent, promote it
        If it is a child in a group that has a parent, promote it, creating a
            new group
        """
        cgref    = None
        if tag not in thisclass.groupable_types.keys():
            raise ValueError, "ContentGroup "+str(tag)+" an invalid object type tag."
        try:
            cgref = obj_ref.contentgroup_set.get()
        except ContentGroup.DoesNotExist:
            new_item = ContentGroup(course=course_ref, level=1)
            new_item.save()
            setattr(new_item, tag, obj_ref)
            new_item.group_id = new_item.id
            new_item.save()
            return new_item.group_id
        else:
            for cgo in ContentGroup.objects.filter(group_id=cgref.group_id):
                if cgo.level == 1: 
                    if getattr(cgo, tag, None) == obj_ref:
                        # This happens when this item is already the parent of its group
                        return cgref.group_id
                    else:
                        # This happens when this item is already a child in a
                        # group with a different parent (promote it, creating a new group)
                        cgref.group_id = cgref.id
                        cgref.level = 1
                        cgref.save()
                        return cgref.group_id
            # This happens when this item is already a child in a group with no parent
            cgref.level = 1
            cgref.save()
            for cgo in ContentGroup.objects.filter(group_id=cgref.group_id):
                cgo.group_id = cgref.id
                cgo.save()
            return cgref.group_id

    @classmethod
    def get_level2_tag_sorted(cls):
        info = {}
        l2cgobjs = ContentGroup.objects.filter(level=2)
        for l2o in l2cgobjs:
            l2o_type = l2o.get_content_type()
            info.setdefault(l2o_type, []).append(getattr(l2o, l2o_type).id)
        return info

    def delete(self):
        """Do housekeeping on related ContentGroup entries before calling up
        
        Level 2 ContentGroup entries are deleted without side effects.
        Level 1 ContentGroup entries promote all of their children to Level 1,
                making each its own group parent.
        """
        if self.level == 1:
            children = ContentGroup.objects.getChildrenByGroupId(self.group_id)
            for child in children:
                child.level = 1
                child.group_id = child.id
                child.save()
        super(ContentGroup, self).delete()

    def get_content(self):
        """Return the object to which this ContentGroup entry refers"""
        tag = self.get_content_type()
        return getattr(self, tag)

    def get_content_id(self):
        """Return the id of the object to which this ContentGroup entry refers"""
        for keyword in ContentGroup.groupable_types.keys():
            tmp = getattr(self, keyword+'_id', False)
            if tmp:
                return tmp
        return None

    def get_content_type(self):
        """This is linear in the number of content types supported for grouping
        
        TODO: Cache this
        """
        for keyword in ContentGroup.groupable_types.keys():
            if getattr(self, keyword+'_id', False):
                return keyword
        return None
    
    @classmethod
    def get_tag_from_classname(thisclass, classname):
        """Reverse dictionary lookup.  Obviously O(n)"""
        for keyword in ContentGroup.groupable_types.keys():
            if ContentGroup.groupable_types[keyword]==classname:
                return keyword
        return None
    
    @classmethod
    def has_children(thisclass, obj, types=list(groupable_types.keys())):
        """
            Does obj (File, Exam, etc) have children?  types is a kwarg that
            restricts the search to the types in the argument of type list.  
            Will return true if any children of type found in types exist.
            
        """
        groupinfo = thisclass.groupinfo_by_id(thisclass.get_tag_from_classname(obj.__class__), obj.id)
        if not groupinfo:
            return False
        if obj != groupinfo.get('__parent', None): #can't have children if obj itself is a child (for now)
            return False
        for t in types:
            if filter(lambda li: li != obj, groupinfo.get(t, [])):
                return True
        return False

    
    @classmethod
    def is_child(thisclass, obj):
        """ Is obj a child? """
        return obj.contentgroup_set.all().filter(level=2).exists()

    def __repr__(self):
        s = "ContentGroup(group_id=" + str(self.group_id) + ", "
        s += 'course=' + str(self.course.id) + ', ' 
        s += 'level=' + str(self.level)
        for keyword in ContentGroup.groupable_types.keys():
            ref = getattr(self, keyword, '')
            if not ref or ref == "None":
                continue
            s += ', ' + keyword+'=<' + str(ref.id) + '>'
        return s+')'

    def __unicode__(self):
        level_string = "parent" if self.level==1 else "child"
        return "%s:%s:%s" % (level_string, self.get_content_type(), self.get_content().title)
    
    class Meta:
        db_table = u'c2g_content_group'
        

class StudentInvitation(TimestampMixin, models.Model):
    email = models.CharField(max_length=128, db_index=True)
    course = models.ForeignKey(Course, db_index=True)

class CourseStudentScore(TimestampMixin, models.Model):
    course = models.ForeignKey(Course, db_index=True)
    student = models.ForeignKey(User, db_index=True)
    tag = models.CharField(max_length=128, db_index=True)
    score = models.FloatField(null=True, blank=True)
    total = models.FloatField(null=True, blank=True)

    class Meta:
        unique_together = ("course", "student", "tag")

    

########NEW FILE########
__FILENAME__ = readonly
import threading

from django.utils.functional import wraps
from django.conf import settings

threadlocal = threading.local()

class database_guard_context_manager():
    def __enter__(self):
        if 'readonly' in settings.DATABASES:
            threadlocal.DATABASE_OVERRIDE = 'readonly' 
    def __exit__(self, exc_type, exc_val, exc_tb):
        threadlocal.DATABASE_OVERRIDE = None

def use_readonly_database(wrapped_view):
    """A decorator that sets a thread-local variable so that subsequent
    database calls will use the readonly database.

    Got the idea from http://python.dzone.com/articles/django-switching-databases
    """
    @wraps(wrapped_view)
    def inner(*args, **kwargs):
        with database_guard_context_manager():
            return wrapped_view(*args, **kwargs)
    return inner

def get_database_considering_override():
    return getattr(threadlocal, 'DATABASE_OVERRIDE', 'default')


########NEW FILE########
__FILENAME__ = routers
from c2g.readonly import get_database_considering_override

class CeleryDBRouter(object):
    """
        A router to control all database operations on models in the
        djcelery application.
    """
    def db_for_read(self, model, **hints):
        """
            Attempts to read djcelery models go to celery.
        """
        if model._meta.app_label == 'djcelery':
            return 'celery'
        return None
    
    def db_for_write(self, model, **hints):
        """
            Attempts to write djcelery models go to celery.
            """
        if model._meta.app_label == 'djcelery':
            return 'celery'
        return None
    
    def allow_relation(self, obj1, obj2, **hints):
        """
            Allow relations if a model in the djcelery app is involved as both parties.
            """
        if obj1._meta.app_label == 'djcelery' and \
           obj2._meta.app_label == 'djcelery':
            return True
        return None
    
    def allow_syncdb(self, db, model):
        """
            Make sure the djcelery app only appears in the 'celery'
            database and no where else.  Plus allow south to sync
            celery db for necessary migrations
            """
        if db == 'celery':
            return model._meta.app_label in ('djcelery', 'south',)
        elif model._meta.app_label == 'djcelery':
            return False
        return None


class ReadonlyDBRouter(object):
    """
    Router to enable a request to go against our readonly database.  Two features:
    1. prevent syncdb from being run on the readonly DB
    2. Use override value set by the use_readonly_db decorator to override db
    """
    def db_for_read(self, model, **hints):
        return get_database_considering_override()

    def allow_syncdb(self, db, model):
        override = get_database_considering_override()
        if db == 'readonly' or override == 'readonly':
            return False
        else:
            return None

########NEW FILE########
__FILENAME__ = listtest
from django import template
from courses.exams.views import compute_penalties
import math
import datetime

register = template.Library()

@register.filter
def islist(value):
    return isinstance(value,list)

@register.filter
def subOneThenMult(value, arg):
    """Subtracts one from arg then multiplies by value"""
    return (value) * (arg - 1)

@register.filter
def sub(value, arg):
    """Subtracts arg from value"""
    return (value) - (arg)

@register.filter
def getActualLatePenaltyPercent(record, exam):
    """combines the constant and daily late penalties into one number"""
    days_late = record.days_late(grace_period=exam.grace_period)
    max_possible = compute_penalties(100.0, 1, 0, record.late, exam.late_penalty, late_days=days_late, daily_late_penalty=exam.daily_late_penalty)
    return round(100.0 - max_possible, 1)
########NEW FILE########
__FILENAME__ = template_utils
from django import template

register = template.Library()

@register.filter(name='byKey')
def bykey(d, key_name):
    """Return d[key_name] (as opposed to the normal behavior, d['key_name']"""
    try:
        return d[key_name]
    except KeyError:
        return ''

@register.filter(name='uscore2space')
def uscore2space(s):
    """Return s with underscores turned into spaces"""
    return s.replace('_', ' ')

@register.filter(name='dash2space')
def dash2space(s):
    """Return s with dashes turned into spaces"""
    return s.replace('-', ' ')
########NEW FILE########
__FILENAME__ = models
import os
import tempfile
import random
import re

#from django.contrib.auth.models import Group
from django.core.files import File as FieldFile
from test_harness.test_base import SimpleTestBase

from c2g.models import Course, Exam
from c2g.models import File as FileModel
#from c2g.models import Institution

class FileUnitTests(SimpleTestBase):
    """Idempotent unit tests of the File model methods: nothing gets saved"""

    def setUp(self):
        """Create a *very* fake models.File object"""
        # XXX: we should use a real mocking library probably
        self.myFile = FileModel()
        fh, fpath = tempfile.mkstemp(suffix='.jpeg')
        self.myFile.file = FieldFile(open(fpath, 'w'))
        self.myFile.file.write('\n')

    def tearDown(self):
        """Clean up cruft from the test object"""
        self.myFile.file.close()
        os.remove(self.myFile.file.name)

    def test_icon_methods(self):
        """Check methods related to file icon assignment"""
        self.assertEqual(self.myFile.get_ext(), 'jpeg')
        self.assertEqual(self.myFile.get_icon_type(), 'picture')


class C2GUnitTests(SimpleTestBase):
    
#    def test_multisave(self):
#        """
#        Tests saving a course more than once
#        """
#        numGroupsB4=len(Group.objects.all())
#        i=Institution(title='TestInstitute')
#        i.save()
#        course1=Course(institution=i,title='gack',handle='test--course')
#        course1.save()
#        course1.title='hack'
#        course1.save()
#        numGroupsAfter=len(Group.objects.all())
#        self.assertEqual(numGroupsB4+4, numGroupsAfter)

#    def test_course_create(self):
#        """
#        Tests that course creation creates groups
#        """
#        numGroupsB4=len(Group.objects.all())
#        i=Institution(title='TestInstitute')
#        i.save()
#        course1=Course(institution=i,title='gack',handle='test--course')
#        course1.save()
#        numGroupsAfter=len(Group.objects.all())
#        self.assertEqual(numGroupsB4+4, numGroupsAfter)

    def test_fixture_install(self):
        """
        Tests that fixtures were installed correctly
        """
        self.assertEqual(len(Course.objects.all()),4)
                         
        c = Course.objects.filter(handle='networking--Fall2012', mode = 'ready')
        for ci in c: 
            self.assertEqual(ci.title, u'Natural Language Processing')

        c = Course.objects.filter(handle='crypto--Fall2012', mode = 'ready')
        for ci in c:
            self.assertEqual(ci.title, u'Introductory Cryptography')
                               
    def test_index_page(self):
        """
        Tests that we can access the index page
        """
        resp=self.client.get('/')
        self.assertEqual(resp.status_code,200)

    def test_num_questions(self):
        """
        Tests the num_questions function in the Exam() class.
        """
        badxml1="<"
        badxml2="<abc>"
        badxml3="<def />"
        badxml4="""<exam_metadata choosenquestions="" />"""
        badxml5="""<exam_metadata choosenquestions="baby" />"""
        xml1="<exam_metadata />"
        xml2="""<exam_metadata choosenquestions="3" />"""
        xml3="""<exam_metadata choosenquestions="542" />"""

        exam = Exam()
        exam.xml_metadata=badxml1
        self.assertEqual(exam.num_random_questions(),0)
        exam.xml_metadata=badxml2
        self.assertEqual(exam.num_random_questions(),0)
        exam.xml_metadata=badxml3
        self.assertEqual(exam.num_random_questions(),0)
        exam.xml_metadata=badxml4
        self.assertEqual(exam.num_random_questions(),0)
        exam.xml_metadata=badxml5
        self.assertEqual(exam.num_random_questions(),0)
        exam.xml_metadata=xml1
        self.assertEqual(exam.num_random_questions(),0)
        exam.xml_metadata=xml2
        self.assertEqual(exam.num_random_questions(),3)
        exam.xml_metadata=xml3
        self.assertEqual(exam.num_random_questions(),542)

    def test_get_html_basic(self):
        """
        Some basic unit tests of randomizing question divs.
        """
        preamble = "<p>This is a <b>preamble</b></p>"
        question_template = \
"""
<div class="question" id="problem_%d">
    <p>Q1</p>
</div>
"""
        badxml1="<abc>"
        xml_none = "<exam_metadata />"
        xml_template = '<exam_metadata choosenquestions="%d" />'
        exam = Exam()

        #test with bad xml and xml_none, which should yield verbatim html
        for xml in [badxml1, xml_none]:
            exam.xml_metadata = xml
            for i in range(10): #10 tests
                #build html with random number of questions
                j = random.randint(0,10)
                html = preamble
                for k in range(j):
                    html += question_template % k
                exam.html_content = html
                self.assertEqual(exam.getHTML(), {'html':html, 'subset':False, 'question_ids':[]})

        #random test with good xml and good html.  these cases should result in a subset
        for i in range(10): #10 tests
            n = random.randint(3,10) # number of actual questions
            exam.xml_metadata = xml_template % (n-2) #number of desired questions is n-2
            html = preamble
            for k in range(n):
                html += question_template % k
            exam.html_content = html
            result = exam.getHTML()
            self.assertTrue(result['subset'])
            self.assertEqual(len(result['question_ids']), n-2)
            #parse out which random numbers were chosen
            chosen_nums = map(lambda id: int(id[-1]), result['question_ids'])
            #now reconstuct html to test equivalence
            reconstructed_html = preamble
            for num in chosen_nums:
                reconstructed_html += question_template % num
            self.assertEqual(re.sub(r"\s","", result['html']), re.sub(r"\s","", reconstructed_html))

        #random test with good xml and good html with requesting more than we have.  these cases should not result in a subset
        for i in range(10): #10 tests
            n = random.randint(3,10) # number of actual questions
            exam.xml_metadata = xml_template % (n+2) #number of desired questions is n+2
            html = preamble
            for k in range(n):
                html += question_template % k
            exam.html_content = html
            result = exam.getHTML()
            self.assertFalse(result['subset'])
            self.assertEqual(len(result['question_ids']), n)
            self.assertEqual(re.sub(r"\s","", result['html']), re.sub(r"\s","", html))

        #test specifying question_ids
        for i in range(50): #50 tests
            n = 10 #10 questions
            #setup the html
            html = preamble
            for k in range(n):
                html += question_template % k
            exam.html_content = html
            exam.xml_metadata = xml_template % 20 #to show that the choosenquestions attr doesn't matter in this case
            
            if i==0: #no removal here
                chosen_nums = range(n)
            else:
                m = random.randint(0,9) # number of questions in question_ids, at most 9 so there will also be a removal
                t = range(2*n) #specify some qids that are not in the html
                chosen_nums = []
                while m != 0:
                    c = random.choice(t)
                    t.remove(c)
                    chosen_nums.append(c)
                    m -= 1

            chosen_ids = map(lambda n: "problem_%d" % n, chosen_nums)
            result = exam.getHTML(question_ids=chosen_ids)
            if i==0:
                self.assertFalse(result['subset'])
            else:
                self.assertTrue(result['subset'])
            correct_chosen_nums = filter(lambda num: num < n, chosen_nums)
            correct_chosen_nums.sort()
            correct_chosen_ids = map(lambda n: "problem_%d" % n, correct_chosen_nums)
            self.assertEqual(correct_chosen_ids, result['question_ids'])
            #reconstruct html to test html output
            reconstructed_html = preamble
            for num in correct_chosen_nums:
                reconstructed_html += question_template % num
            self.assertEqual(re.sub(r"\s","", result['html']), re.sub(r"\s","", reconstructed_html))


########NEW FILE########
__FILENAME__ = test_models
import os
import tempfile

from django.core.files import File as FieldFile

from c2g.models import File as FileModel
#from c2g.models import ContentGroup as ContentGroupModel
from c2g.models import ContentSection as ContentSectionModel
from test_harness.test_base import SimpleTestBase


class ContentGroupUnitTests(SimpleTestBase):

    def setUp(self):
        pass

    def tearDown(self):
        pass


class ContentSectionUnitTests(SimpleTestBase):

    def setUp(self):
        super(ContentSectionUnitTests, self).setUp()
        self.course_id = 2   # first ready mode course
        self.section_id = 3  # selected because it's got few children
        self.fixture_data = [('video', 7L), ('video', 9L), ('video', 11L), ('problemSet', 3L)]
        self.contentsection = ContentSectionModel.objects.get(id=self.section_id)
        self.files = []

    def tearDown(self):
        for f in self.files:
            FileModel.objects.filter(title=f.title).delete()
        super(ContentSectionUnitTests, self).tearDown()

    def __manufacture_file(self, title='(unset title)'):
        fh, fpath = tempfile.mkstemp(suffix='.jpeg')
        course_handle = self.contentsection.course.handle
        new_f = FileModel(section=self.contentsection, title=title, file = FieldFile(open(fpath, 'w')), handle=course_handle)
        new_f.file.write('\n')
        new_f.save()
        new_f.image = new_f.create_ready_instance()
        new_f.image.save()
        self.files.append(new_f)
        return new_f

    def test_getChildren(self):
        """Test that ContentSection.getChildren behaves w/ various parameters"""
        untagged_sorted_children = self.contentsection.getChildren()
        tagged_sorted_children   = self.contentsection.getChildren(gettagged=True)
        tagged_unsorted_children = self.contentsection.getChildren(gettagged=True, getsorted=False)
        self.assertEqual(len(untagged_sorted_children), len(tagged_sorted_children))
        self.assertEqual(len(tagged_sorted_children), len(tagged_unsorted_children))
        self.assertEqual([item.id for item in untagged_sorted_children], [x[1] for x in self.fixture_data])
        self.assertEqual([(item['type'], item['item'].id) for item in tagged_sorted_children], self.fixture_data)

    def test_countChildren(self):
        """Test counting children of ContentSections using fixtures"""
        self.assertEqual(self.contentsection.countChildren(), len(self.fixture_data))


class FileUnitTests(SimpleTestBase):
    """Idempotent unit tests of the File model methods: nothing gets saved"""

    def setUp(self):
        """Create a *very* fake models.File object"""
        # XXX: we should use a real mocking library probably
        self.myFile = FileModel()
        fh, fpath = tempfile.mkstemp(suffix='.jpeg')
        self.myFile.file = FieldFile(open(fpath, 'w'))
        self.myFile.file.write('\n')

    def tearDown(self):
        """Clean up cruft from the test object"""
        self.myFile.file.close()
        os.remove(self.myFile.file.name)

    def test_icon_methods(self):
        """Check methods related to file icon assignment"""
        self.assertEqual(self.myFile.get_ext(), 'jpeg')
        self.assertEqual(self.myFile.get_icon_type(), 'picture')


########NEW FILE########
__FILENAME__ = util
import settings
import urlparse
import logging

from datetime import datetime, timedelta

from django.contrib.sites.models import Site
from django.core.files.storage import FileSystemStorage, get_storage_class
from django.http import HttpResponse, Http404, HttpResponseRedirect
from django.shortcuts import redirect
from django.utils.functional import wraps

logger=logging.getLogger(__name__)


def is_storage_local():
    """Check whether django believes it's keeping things on local disk"""
    return get_storage_class() == FileSystemStorage

def get_site_domain():
    """Return a bare domain name for the current site"""
    return Site.objects.get_current().domain

def get_site_url():
    """Return a fully qualified URL for the current site"""
    # FIXME: assumes http, but we should be able to tell
    site = Site.objects.get_current()
    url = 'http://%s/' % (site.domain)
    return url


def redirects_use_http(response, request):
    '''This function changes all REDIRECT responses to http if they are https.
        Useful for downgrades after login/reg, etc.
    '''
    if isinstance(response, HttpResponseRedirect):
        return HttpResponseRedirect(urlparse.urljoin('http://'+request.get_host()+'/',response['Location']))
    return response


def upgrade_to_https_and_downgrade_upon_redirect(view):
    '''This decorator will make sure that the view, if accessed over http, will get upgrade to https
        Any subsequent redirects returned by this view will get downgraded
    '''
    @wraps (view)
    def inner(request, *args, **kw):
        #explicitly upgrading
        if (settings.INSTANCE == 'stage' or settings.INSTANCE == 'prod') and not request.is_secure():
            return redirect('https://'+request.get_host()+request.get_full_path())
        return redirects_use_http(view(request, *args, **kw),request)
    return inner

class CacheStat():
    """
        Gather and report counter-based stats for our simple caches.
        report('hit', 'video-cache') or
        report('miss', 'files-cache')
        """
    lastReportTime = datetime.now()
    count = {}
    reportingIntervalSec = getattr(settings, 'CACHE_STATS_INTERVAL', 60*60)   # hourly
    reportingInterval = timedelta(seconds=reportingIntervalSec)
    
    @classmethod
    def report(cls, op, cache):
        if op not in ['hit', 'miss']:
            logger.error("cachestat invalid operation, expected hit or miss")
            return
        if cache not in cls.count:
            cls.count[cache] = {}
        if op not in cls.count[cache]:
            cls.count[cache][op] = 0
        cls.count[cache][op] += 1

        # stat interval expired: print stats and zero out counter
        if datetime.now() - cls.lastReportTime > cls.reportingInterval:
            for c in cls.count:
                hit = cls.count[c].get('hit', 0)
                miss = cls.count[c].get('miss', 0)
                if hit + miss == 0:
                    logger.info("cache stats for %s: hits %d, misses %d" % (c, hit, miss))
                else:
                    rate = float(hit) / float(hit + miss) * 100.0
                    logger.info("cache stats for %s: hits %d, misses %d, rate %2.1f" % (c, hit, miss, rate))

            cls.lastReportTime = datetime.now()
            cls.count = {}      # zero out the counts

########NEW FILE########
__FILENAME__ = views
import time
from datetime import datetime
import pytz

from django.http import HttpResponse, Http404
from django.shortcuts import render_to_response
from django.template import Context, loader
from django.template import RequestContext
from django.conf import settings
from django.contrib import messages
from django.views.decorators.cache import never_cache

from courses.actions import is_member_of_course
from courses.actions import auth_view_wrapper
from courses.common_page_data import get_common_page_data
from models import Course

### C2G Core Views ###

@auth_view_wrapper
def home(request):
    #try:
    #    common_page_data = get_common_page_data(request, course_prefix, course_suffix)
    #except:
    raise Http404
    
    
    now = datetime.now()
    courses = Course.objects.filter(calendar_start__gt=now, mode="ready")
    available_course_list = []
    for course in courses:
        if is_member_of_course(course, request.user):
            course_student_member = 'True'
        else:
            course_student_member = 'False'
        
        viewable_handle = course.handle.replace('--', '/')
        available_course_list.append((course.title, course.handle, viewable_handle, course_student_member))
        
    return render_to_response('courses/signup.html', {'request': request, 'available_course_list': available_course_list}, context_instance=RequestContext(request))

def healthcheck(request):
    return HttpResponse("I'm alive!")

def maintenance(request):
    return render_to_response('landing/static_landing.html',{},RequestContext(request))

def throw500(request):
    raise Exception('Testing the exception--http500 mechanism')

def throw404(request):
    raise Http404

@never_cache
def server_epoch(request):
    return HttpResponse(int(time.time()))

@never_cache
def server_time(request):
    t = datetime.now(tz=pytz.timezone(settings.TIME_ZONE))
    return HttpResponse('{"hour": ' + str(t.hour) + ', "minute": ' + str(t.minute) + ', "second": ' + str(t.second) + '}')

def hc(request):
    return render_to_response('honor_code.html',{},RequestContext(request))

def tos(request):
    return render_to_response('TOS.html',{},RequestContext(request))

def privacy(request):
    return render_to_response('privacy.html',{},RequestContext(request))
    
def faq(request):
    return render_to_response('faq.html',{},context_instance=RequestContext(request))

def contactus(request):
    if request.GET.get('pre') and request.GET.get('post'):
        try:
            common_page_data = get_common_page_data(request, request.GET.get('pre'), request.GET.get('post'))
            course = common_page_data['course']
            staffmail=course.contact
        except Course.DoesNotExist:
            course=None
            staffmail=''
    else:
        course=None
        staffmail=''

    return render_to_response('contactus.html',
                              {'request': request,
                               'course': course,
                               'staffmail' : staffmail,
                              },context_instance=RequestContext(request))

def test_messages(request):
    messages.add_message(request,messages.INFO, 'Hello World Info')
    messages.add_message(request,messages.SUCCESS, 'Hello World Success')
    messages.add_message(request,messages.WARNING, 'Hello World Warning')
    messages.add_message(request,messages.ERROR, 'Hello World Error')
            
    return HttpResponse("Messages Submitted, go back to regular page to view")

########NEW FILE########
__FILENAME__ = models
from django.db import models

# Create your models here.

########NEW FILE########
__FILENAME__ = tasks
import time
from celery import task

@task()
def add(x, y):
    return x + y

@task()
def echo(v, t):
    """return value v after sleeping for t seconds"""
    time.sleep(t)
    return v

@task()
def echo_long(v, t):
    """return value v after sleeping for t seconds"""
    time.sleep(t)
    return v

########NEW FILE########
__FILENAME__ = tests
"""
This file demonstrates writing tests using the unittest module. These will pass
when you run "manage.py test".

Replace this with more appropriate tests for your application.
"""

#from django.test import TestCase
#
#
#class SimpleTest(TestCase):
#    def test_basic_addition(self):
#        """
#        Tests that 1 + 1 always equals 2.
#        """
#        self.assertEqual(1 + 1, 2)


########NEW FILE########
__FILENAME__ = views
# Create your views here.

########NEW FILE########
__FILENAME__ = context_processor
from django.conf import settings # import the settings file

def context_settings(context):
    # return the value you want as a dictionnary. you may add multiple values in there.
    return {'SITE_NAME_SHORT': settings.SITE_NAME_SHORT,
            'SITE_NAME_LONG': settings.SITE_NAME_LONG,
            'SITE_TITLE': settings.SITE_TITLE,
            'SITE_URL': settings.SITE_URL}
########NEW FILE########
__FILENAME__ = models

########NEW FILE########
__FILENAME__ = redirector
import re

from django.utils.log import getLogger
from django.http import HttpResponse, HttpResponseRedirect
from c2g.models import CurrentTermMap, Course

class convenience_redirector(object):
    """
    This is a middleware class that forwards request coming in on convenience domains to the appropriate place.
    For instance, 
    nlp.class2go.stanford.edu -> class2go.stanford.edu/nlp
    """
    #List of hostnames that will abort redirect if matched.  Need this because we have lots of
    #domain names are ancestors of each other, like class.stanford.edu, staging.class.stanford.edu, and
    #www.staging.class.stanford.edu
    domain_no_direct = ['class2go.stanford.edu','staging.class2go.stanford.edu','www.staging.class2go.stanford.edu','www.class2go.stanford.edu',\
                     'f12.class2go.stanford.edu']
    
    #List of regexes of domain names to match against. 
    regex_list = (
                    ('staging.class2go.stanford.edu',re.compile(r'^(?P<course_prefix>[a-zA-Z0-9_-]*)\.staging\.class2go\.stanford\.edu$', re.I)),
                    ('f12.class2go.stanford.edu',re.compile(r'^(?P<course_prefix>[a-zA-Z0-9_-]*)\.f12.class2go\.stanford\.edu$', re.I)),
                    ('class2go.stanford.edu',re.compile(r'^(?P<course_prefix>[a-zA-Z0-9_-]*)\.class2go\.stanford\.edu$', re.I)),
                  )
    
    
    curTerm = 'Fall2012'
    
    #factoring this out so we can unit test
    def get_prefix_and_host(self, domain):
        prefix = None
        for host,regex in self.regex_list:
            matchobj = regex.match(domain)
            if matchobj:
                prefix = matchobj.groups()[0]
                break
        return prefix,host

    def get_prefix_suffix_from_path(self, path):
        path_regex = re.compile(r'^/(?P<course_prefix>[a-zA-Z0-9_-]+)/(?P<course_suffix>[a-zA-Z0-9_-]+)/?', re.I)
        matchobj = path_regex.match(path)
        if not matchobj:
            return None
        return (matchobj.groups()[0], matchobj.groups()[1])


    def process_request(self, request):
        """
        Get the domain name from the host header (parse it apart from the port).
        Check it against the regex, then if there's a match do the redirect
        """
        if ('HTTP_HOST' not in request.META):
            return None #if we can't determine HOST we will do no redirect
        
        (domain, sep, port) = request.META['HTTP_HOST'].partition(':')
        scheme = 'https' if request.is_secure() else 'http'

        if domain in self.domain_no_direct:
            #Check PATH to see if we need to redirect to the right codebase
            req_path = request.get_full_path()
            pathobj = self.get_prefix_suffix_from_path(req_path)
            if pathobj:
                (path_prefix, path_suffix) = pathobj
                if not Course.objects.filter(handle=path_prefix+'--'+path_suffix).exists(): #only redirect class-related URLs
                    return None
                if path_suffix == 'Fall2012' or path_suffix == 'WallaWalla': #send requests to Fall2012 classes under the new codebase back to the old codebase
                    http_host=re.sub(r'^class2go\.', 'f12.class2go.', request.META['HTTP_HOST'], flags=re.I)
                else:  #send everyone else to the new codebase
                    http_host=re.sub(r'^f12\.class2go\.', 'class2go.', request.META['HTTP_HOST'], flags=re.I)
            
                if http_host == request.META['HTTP_HOST']: #prevent redirect loop.  Don't redirect if there's no reason to
                    return None
                return HttpResponseRedirect(scheme + '://' + http_host + request.get_full_path())
            else:
                return None
        
        prefix,host = self.get_prefix_and_host(domain) #now get the class prefix, 'networking, for example
        if not prefix:
            return None #if there was no matching convenience name, don't redirect
            
        if port=='' :
            port_str= ''
        elif port=='80' and (not request.is_secure()):
            port_str= ''
        elif port=='443' and request.is_secure():
            port_str= ''
        else:
            port_str= ':' + port

        #lookup suffix from database -- decided this is okay because no DB access will happen if the access
        #uses the normal URLs (e.g. class.stanford.edu), which we expect to be the common case
                
                
        try:
            suffix = CurrentTermMap.objects.get(course_prefix=prefix).course_suffix
        except CurrentTermMap.DoesNotExist:
            suffix = self.curTerm # Use this as default fallback

        #Do redirects at the convenience domain name level
        if suffix == 'Fall2012' or suffix == 'WallaWalla': #send requests to Fall2012 classes under the new codebase back to the old codebase
            host=re.sub(r'^class2go\.', 'f12.class2go.', host, flags=re.I)
        else:  #send everyone else to the new codebase
            host=re.sub(r'^f12\.class2go\.', 'class2go.', host, flags=re.I)


        return HttpResponseRedirect(scheme + '://' + host + port_str + '/' + prefix + '/' + suffix + request.get_full_path())
        
            
        

########NEW FILE########
__FILENAME__ = tests
"""
This file demonstrates writing tests using the unittest module. These will pass
when you run "manage.py test".

Replace this with more appropriate tests for your application.
"""

from django.test import TestCase
from convenience_redirect.redirector import convenience_redirector
from django.test.client import RequestFactory
from django.http import HttpResponseRedirect
from c2g.models import CurrentTermMap, Course
from random import randrange
from django.contrib.auth.models import User,Group

class SimpleTest(TestCase):
    #for a ton of URLs in our system that should not get redirects (b/c they are not course specific), make sure they don't redirect
    no_course_paths = ['/_health', '/_throw500', '/_throw404', '/email_optout/afda923sdmadf/', '/shib-login', '/impersonate/jbau@stanford.edu',
                      '/videos/save/', '/accounts/login/', '/accounts/logout/', '/accounts/profile/save/', '/admin/', '/admin/doc/', '/courses/new/',
                      '/commit', '/revert/', '/change_live_datetime/', '/save_order/', '/content_section/get_children/2342/',
                      'content_section/get_children_as_contentgroup_parents/155/?', '/']

    #These paths should be redirected if preceded by /course_prefix/course_suffix, or if the host is a convenience redirect
    course_path_endings = ['/videos/', '/exams/', '/surveys', '/exams/abcd/submit/', '/', '/surveys/abcd/', '/exams/abcd/record/23/',
                              '/problemsets/test/record/55']


    def setUp(self):
        # Every test needs access to the request factory.
        self.factory = RequestFactory()
        self.redir = convenience_redirector()
        #db class map
        m1 = CurrentTermMap(course_prefix="db", course_suffix="Winter2013")
        m1.save()
        m2 = CurrentTermMap(course_prefix="class2go", course_suffix="tutorial")
        m2.save()
        m3 = CurrentTermMap(course_prefix="EE364A", course_suffix="Winter2013")
        m3.save()
        for (course,suffix) in (('nlp','Fall2012'),
                                ('test','Fall2012'),
                                ('networking','Fall2012'),
                                ('crypto','Fall2012'),
                                ('security','Fall2012'),
                                ('cs144','Fall2012'),
                                ('cs224n','Fall2012'),
                                ('solar','Fall2012'),
                                ('matsci256','Fall2012'),
                                ('psych30','Fall2012'),
                                ('nano','Fall2012'),
                                ('msande111','Fall2012'),
                                ('db','Winter2013'),
                                ('class2go','tutorial'),
                                ('EE364A','Winter2013'),
                                ('networking', 'WallaWalla'),
                                ):
            
            ### Create the new Course ###
            r = randrange(0,100000000)
            student_group = Group.objects.create(name="Student Group for class2go course " + course + " %d" % r)
            instructor_group = Group.objects.create(name="Instructor Group for class2go course " + course + " %d" % r)
            tas_group = Group.objects.create(name="TAS Group for class2go course " + course + " %d" % r)
            readonly_tas_group = Group.objects.create(name="Readonly TAS Group for class2go course " + course + " %d" % r)

            c = Course(handle=course+'--'+suffix,
                       student_group_id = student_group.id,
                       instructor_group_id = instructor_group.id,
                       tas_group_id = tas_group.id,
                       readonly_tas_group_id = readonly_tas_group.id,
            )

            c.save()
    
    def test_noop(self):
        for host in ('f12.class2go.stanford.edu', \
                     'class2go.stanford.edu', 'www.class2go.stanford.edu', 'staging.class2go.stanford.edu', 'www.staging.class2go.stanford.edu'):
            request = self.factory.get('/')
            request.META['HTTP_HOST']=host
            response = self.redir.process_request(request)
            self.assertIsNone(response)

    def test_no_redirect_loop1(self):
        for path in self.course_path_endings:
            for host in ('f12.class2go.stanford.edu',):
                request = self.factory.get('/networking/Fall2012%s' % path)
                request.META['HTTP_HOST']=host
                response = self.redir.process_request(request)
                self.assertIsNone(response)

    def test_no_direct_loop2(self):
        for path in self.course_path_endings:
            for host in ('class2go.stanford.edu', 'www.class2go.stanford.edu', 'staging.class2go.stanford.edu', 'www.staging.class2go.stanford.edu'):
                request = self.factory.get('/db/Winter2013%s' % path)
                request.META['HTTP_HOST']=host
                response = self.redir.process_request(request)
                self.assertIsNone(response)



    def test_malformed(self):
        for host in ('www.cnn.com', 'cs144.stanford.edu', 'class.stanford.edu.au', 'bad.prefix.class.stanford.edu'):
            request = self.factory.get('/')
            request.META['HTTP_HOST']=host
            response = self.redir.process_request(request)
            self.assertIsNone(response)

    def test_class_networking(self):
        #HTTP to '/'
        request = self.factory.get('/')
        request.META['HTTP_HOST']='networking.f12.class2go.stanford.edu'
        response = self.redir.process_request(request)
        self.assertTrue(isinstance(response,HttpResponseRedirect))
        self.assertEqual(response['Location'],'http://f12.class2go.stanford.edu/networking/Fall2012/')
        #HTTPS
        request.is_secure=lambda: True
        response = self.redir.process_request(request)
        self.assertTrue(isinstance(response,HttpResponseRedirect))
        self.assertEqual(response['Location'],'https://f12.class2go.stanford.edu/networking/Fall2012/')
        #HTTP to '/', should redirect class2go to class
        request = self.factory.get('/')
        request.META['HTTP_HOST']='networking.class2go.stanford.edu'
        response = self.redir.process_request(request)
        self.assertTrue(isinstance(response,HttpResponseRedirect))
        self.assertEqual(response['Location'],'http://f12.class2go.stanford.edu/networking/Fall2012/')
        #HTTPS should redirect class2go to class
        request.is_secure=lambda: True
        response = self.redir.process_request(request)
        self.assertTrue(isinstance(response,HttpResponseRedirect))
        self.assertEqual(response['Location'],'https://f12.class2go.stanford.edu/networking/Fall2012/')
    

    def test_url_paths_and_params(self):
        #path
        request = self.factory.get('/videos/TheInternet/')
        request.META['HTTP_HOST']='networking.f12.class2go.stanford.edu'
        response = self.redir.process_request(request)
        self.assertTrue(isinstance(response,HttpResponseRedirect))
        self.assertEqual(response['Location'],'http://f12.class2go.stanford.edu/networking/Fall2012/videos/TheInternet/')
        #query param
        request = self.factory.get('/preview/?login=login&cnn=cnn')
        request.META['HTTP_HOST']='networking.f12.class2go.stanford.edu'
        response = self.redir.process_request(request)
        self.assertTrue(isinstance(response,HttpResponseRedirect))
        self.assertEqual(response['Location'],'http://f12.class2go.stanford.edu/networking/Fall2012/preview/?login=login&cnn=cnn')
        #query param2
        request = self.factory.get('?a=a;b=b')
        request.META['HTTP_HOST']='networking.f12.class2go.stanford.edu'
        response = self.redir.process_request(request)
        self.assertTrue(isinstance(response,HttpResponseRedirect))
        self.assertEqual(response['Location'],'http://f12.class2go.stanford.edu/networking/Fall2012/?a=a;b=b')    
    
    def test_ports(self):
        #HTTP 80
        request = self.factory.get('/')
        request.META['HTTP_HOST']='networking.class2go.stanford.edu:80'
        response = self.redir.process_request(request)
        self.assertTrue(isinstance(response,HttpResponseRedirect))
        self.assertEqual(response['Location'],'http://f12.class2go.stanford.edu/networking/Fall2012/')
        #HTTPS 443
        request = self.factory.get('/')
        request.META['HTTP_HOST']='networking.class2go.stanford.edu:443'
        request.is_secure=lambda: True
        response = self.redir.process_request(request)
        self.assertTrue(isinstance(response,HttpResponseRedirect))
        self.assertEqual(response['Location'],'https://f12.class2go.stanford.edu/networking/Fall2012/')
        #HTTP 8080
        request = self.factory.get('/')
        request.META['HTTP_HOST']='networking.class2go.stanford.edu:8080'
        response = self.redir.process_request(request)
        self.assertTrue(isinstance(response,HttpResponseRedirect))
        self.assertEqual(response['Location'],'http://f12.class2go.stanford.edu:8080/networking/Fall2012/')
        #HTTPS 4443
        request = self.factory.get('/')
        request.META['HTTP_HOST']='networking.class2go.stanford.edu:4443'
        request.is_secure=lambda: True
        response = self.redir.process_request(request)
        self.assertTrue(isinstance(response,HttpResponseRedirect))
        self.assertEqual(response['Location'],'https://f12.class2go.stanford.edu:4443/networking/Fall2012/')

    def test_active_classes(self):
        for path in self.course_path_endings:
            for course in ('nlp','test','networking','crypto','security','cs144','cs224n','solar','matsci256','psych30','nano','msande111'):
                request = self.factory.get(path)
                request.META['HTTP_HOST']=course+'.f12.class2go.stanford.edu'
                response = self.redir.process_request(request)
                self.assertTrue(isinstance(response,HttpResponseRedirect))
                self.assertEqual(response['Location'],"http://f12.class2go.stanford.edu/%s/Fall2012%s" % (course, path))

    def test_Fall2012_classes_redir_to_class(self):
        #make request to class2go for fall2012 classes, should end up with class
        for path in self.course_path_endings:
            for course in ('nlp','test','networking','crypto','security','cs144','cs224n','solar','matsci256','psych30','nano','msande111'):
                request = self.factory.get(path)
                request.META['HTTP_HOST']=course+'.class2go.stanford.edu'
                response = self.redir.process_request(request)
                self.assertTrue(isinstance(response,HttpResponseRedirect))
                self.assertEqual(response['Location'],"http://f12.class2go.stanford.edu/%s/Fall2012%s" % (course, path))

    def test_cur_term_map_classes(self):
        for path in self.course_path_endings:
            #db--Winter2013
            request = self.factory.get(path)
            request.META['HTTP_HOST']='db.class2go.stanford.edu'
            response = self.redir.process_request(request)
            self.assertTrue(isinstance(response,HttpResponseRedirect))
            self.assertEqual(response['Location'],"http://class2go.stanford.edu/db/Winter2013%s" %path)
            #EE364A--Winter2013
            request = self.factory.get(path)
            request.META['HTTP_HOST']='EE364A.class2go.stanford.edu'
            response = self.redir.process_request(request)
            self.assertTrue(isinstance(response,HttpResponseRedirect))
            self.assertEqual(response['Location'],"http://class2go.stanford.edu/EE364A/Winter2013%s" %path)
            #class2go--tutorial
            request = self.factory.get(path)
            request.META['HTTP_HOST']='class2go.class2go.stanford.edu'
            response = self.redir.process_request(request)
            self.assertTrue(isinstance(response,HttpResponseRedirect))
            self.assertEqual(response['Location'],"http://class2go.stanford.edu/class2go/tutorial%s" %path)
            #db--Winter2013, redirect class to class2go
            request = self.factory.get(path)
            request.META['HTTP_HOST']='db.f12.class2go.stanford.edu'
            response = self.redir.process_request(request)
            self.assertTrue(isinstance(response,HttpResponseRedirect))
            self.assertEqual(response['Location'],"http://class2go.stanford.edu/db/Winter2013%s" %path)
            #EE364A--Winter2013
            request = self.factory.get(path)
            request.META['HTTP_HOST']='EE364A.f12.class2go.stanford.edu'
            response = self.redir.process_request(request)
            self.assertTrue(isinstance(response,HttpResponseRedirect))
            self.assertEqual(response['Location'],"http://class2go.stanford.edu/EE364A/Winter2013%s" %path)
            #class2go--tutorial, redirect class to class2go
            request = self.factory.get(path)
            request.META['HTTP_HOST']='class2go.f12.class2go.stanford.edu'
            response = self.redir.process_request(request)
            self.assertTrue(isinstance(response,HttpResponseRedirect))
            self.assertEqual(response['Location'],"http://class2go.stanford.edu/class2go/tutorial%s" %path)

    def test_redir_class_path(self):
        for ending in self.course_path_endings:
            #test that we can redirect to the old codebase based on path
            for course in ('nlp','test','networking','crypto','security','cs144','cs224n','solar','matsci256','psych30','nano','msande111'):
                #GETs
                request = self.factory.get('/%s/Fall2012%s' % (course, ending))
                request.META['HTTP_HOST']='class2go.stanford.edu'
                response = self.redir.process_request(request)
                self.assertTrue(isinstance(response,HttpResponseRedirect))
                self.assertEqual(response['Location'],"http://f12.class2go.stanford.edu/%s/Fall2012%s" % (course, ending))
                request = self.factory.get('/%s/Fall2012%s' % (course, ending))
                request.META['HTTP_HOST']='f12.class2go.stanford.edu'
                response = self.redir.process_request(request)
                self.assertIsNone(response)
                #POSTS
                request = self.factory.post('/%s/Fall2012%s' % (course, ending))
                request.META['HTTP_HOST']='class2go.stanford.edu'
                response = self.redir.process_request(request)
                self.assertTrue(isinstance(response,HttpResponseRedirect))
                self.assertEqual(response['Location'],"http://f12.class2go.stanford.edu/%s/Fall2012%s" % (course, ending))
                request = self.factory.post('/%s/Fall2012%s' % (course, ending))
                request.META['HTTP_HOST']='f12.class2go.stanford.edu'
                response = self.redir.process_request(request)
                self.assertIsNone(response)
            
            
            #test the Walla Walla course (Should be old codebase)
            for course in ('networking',):
                #GET
                request = self.factory.get('/%s/WallaWalla%s' % (course, ending))
                request.META['HTTP_HOST']='f12.class2go.stanford.edu'
                response = self.redir.process_request(request)
                self.assertIsNone(response)
                request = self.factory.get('/%s/WallaWalla%s' % (course, ending))
                request.META['HTTP_HOST']='class2go.stanford.edu'
                response = self.redir.process_request(request)
                self.assertTrue(isinstance(response,HttpResponseRedirect))
                self.assertEqual(response['Location'],"http://f12.class2go.stanford.edu/%s/WallaWalla%s" % (course, ending))
                #POST
                request = self.factory.post('/%s/WallaWalla%s' % (course, ending))
                request.META['HTTP_HOST']='f12.class2go.stanford.edu'
                response = self.redir.process_request(request)
                self.assertIsNone(response)
                request = self.factory.post('/%s/WallaWalla%s' % (course, ending))
                request.META['HTTP_HOST']='class2go.stanford.edu'
                response = self.redir.process_request(request)
                self.assertTrue(isinstance(response,HttpResponseRedirect))
                self.assertEqual(response['Location'],"http://f12.class2go.stanford.edu/%s/WallaWalla%s" % (course, ending))


            #test that we can redirect to the new codebase based on path
            for course in ('EE364A','db'):
                #GET
                request = self.factory.get('/%s/Winter2013%s' % (course, ending))
                request.META['HTTP_HOST']='class2go.stanford.edu'
                response = self.redir.process_request(request)
                self.assertIsNone(response)
                request = self.factory.get('/%s/Winter2013%s' % (course, ending))
                request.META['HTTP_HOST']='f12.class2go.stanford.edu'
                response = self.redir.process_request(request)
                self.assertTrue(isinstance(response,HttpResponseRedirect))
                self.assertEqual(response['Location'],"http://class2go.stanford.edu/%s/Winter2013%s" % (course, ending))
                #POST
                request = self.factory.post('/%s/Winter2013%s' % (course, ending))
                request.META['HTTP_HOST']='class2go.stanford.edu'
                response = self.redir.process_request(request)
                self.assertIsNone(response)
                request = self.factory.post('/%s/Winter2013%s' % (course, ending))
                request.META['HTTP_HOST']='f12.class2go.stanford.edu'
                response = self.redir.process_request(request)
                self.assertTrue(isinstance(response,HttpResponseRedirect))
                self.assertEqual(response['Location'],"http://class2go.stanford.edu/%s/Winter2013%s" % (course, ending))

                                 
    def test_no_redirect(self):
        for path in self.no_course_paths:
            for host in ('f12.class2go.stanford.edu', \
                         'class2go.stanford.edu', 'www.class2go.stanford.edu', 'staging.class2go.stanford.edu', 'www.staging.class2go.stanford.edu'):
                request = self.factory.get(path)
                request.META['HTTP_HOST']=host
                response = self.redir.process_request(request)
                self.assertIsNone(response)



########NEW FILE########
__FILENAME__ = actions
from datetime import datetime
from os.path import basename

from django.http import HttpResponse, HttpResponseRedirect, Http404
from django.core.urlresolvers import reverse
from django.db.models import Q
from django.shortcuts import render, redirect
from django.contrib.auth.models import Group
from django.views.decorators.http import require_POST
from django.views.decorators.csrf import csrf_protect
from django.contrib import messages
from django.utils.functional import wraps

from courses.course_materials import get_course_materials
from courses.common_page_data import get_common_page_data
from courses.forms import *
from c2g.models import *
import settings


def auth_view_wrapper(view):
    @wraps (view)
    def inner(request, *args, **kw):
        user = request.user
        course = request.common_page_data['course']

        if user.is_authenticated() and not is_member_of_course(course, user):
            messages.add_message(request,messages.ERROR, 'You must be a member of the course to view the content you chose.')      
            return HttpResponseRedirect(reverse('courses.views.main', args=(request.common_page_data['course_prefix'], request.common_page_data['course_suffix'],)) + "?join_next=" + request.path)

        if not user.is_authenticated():
            messages.add_message(request,messages.ERROR, 'You must be logged-in to view the content you chose.')
            if settings.SITE_NAME_SHORT == "Stanford":
                if course.institution_only:
                    return HttpResponseRedirect(reverse('shib_login') + "?next=" + request.path)
                else:
                    return HttpResponseRedirect(reverse('auth_login') + "?next=" + request.path)                        
            return HttpResponseRedirect(reverse('default_login') + "?next=" + request.path)

        headless = request.GET.get('headless')
        if headless is not None:
            if headless == '1':
                request.session['headless'] = headless
            elif headless == '0':
                #headless explicitly turned off
                request.session['headless'] = None

        return view(request, *args, **kw)
    return inner

def auth_can_switch_mode_view_wrapper(view):
    @wraps (view)
    def inner(request, *args, **kw):
        if request.common_page_data['can_switch_mode']:
            return view(request, *args, **kw)
        else:
            messages.add_message(request,messages.ERROR, "You don't have permission to view that content.")
            return HttpResponseRedirect(reverse('courses.views.main', args=(request.common_page_data['course_prefix'], request.common_page_data['course_suffix'],)))
    return inner

def auth_is_course_admin_view_wrapper(view):
    @wraps (view)
    def inner(request, *args, **kw):
        if request.common_page_data['is_course_admin']:
            return view(request, *args, **kw)
        else:
            messages.add_message(request,messages.ERROR, "You don't have permission to view that content.")
            return HttpResponseRedirect(reverse('courses.views.main', args=(request.common_page_data['course_prefix'], request.common_page_data['course_suffix'],)))
    return inner

def auth_is_staff_view_wrapper(view):
    @wraps (view)
    def inner(request, *args, **kw):
        user = request.user
        if user.is_staff:
            return view(request, *args, **kw)
        else:
           raise Http404
    return inner                

def create_contentgroup_entries_from_post(request, postparam, ready_obj, ready_obj_tag, display_style="list"):
    """Given a post, ready object and parenting info, add ContentGroups

    request: a django request object with POST parameters we can extract parent info from
    postparam: the parameter in the POST we expect to find parent info in
    ready_obj: The ready-mode object reference to be added to the ContentGroup table
    ready_obj_tag: The text description, in the style of ContentGroup.groupable_types, of ready_obj
    display_style: how the child should be displayed (optional, defaults to 'list')
    """
    parent_tag, parent_id = None,None
    parent_tag = request.POST.get(postparam)
    if parent_tag and parent_tag != 'none,none':
        parent_tag,parent_id = parent_tag.split(',')
        parent_id = long(parent_id)
    if parent_tag == "none,none" or parent_tag == None:                   # make this object the parent
        content_group_groupid = ContentGroup.add_parent(ready_obj.course, ready_obj_tag, ready_obj) # add_parent should handle special cases already
    else:
        parent_ref = ContentGroup.groupable_types[parent_tag].objects.get(id=long(parent_id))
        if (parent_ref.mode != 'ready'):
            parent_ref = parent_ref.image
        content_group_groupid = ContentGroup.add_parent(parent_ref.course, parent_tag, parent_ref)
        ContentGroup.add_child(content_group_groupid, ready_obj_tag, ready_obj, display_style=display_style)
    return content_group_groupid

@require_POST
@auth_can_switch_mode_view_wrapper
def switch_mode(request):
    request.session['course_mode'] = request.POST.get('to_mode')
    return redirect(request.META['HTTP_REFERER'])

def always_switch_mode(view):
    """Check whether we're in draft mode, and if we're not, switch to it."""
    # Sadly the wrapper name is a bit of a misnomer, should be 'always_draft_mode'
    wrapped_function_path = '.'.join((view.__module__, view.__name__))
    @wraps(view)
    def do_mode_switch(request, *args, **kw):
        current_mode = request.session.get('course_mode', 'unknown state')
        if current_mode == 'draft':
            return view(request, *args, **kw)
        request.session['course_mode'] = 'draft'
        course_prefix = kw.get('course_prefix', None) or request.POST.get('course_prefix', None) or request.common_page_data.get('course_prefix', '')
        course_suffix = kw.get('course_suffix', None) or request.POST.get('course_suffix', None) or request.common_page_data.get('course_suffix', '')
        if course_prefix == '' or course_suffix == '':
            print "WARNING: empty course_prefix or course_suffix in view decorator always_switch_mode, wrapping %s." % wrapped_function_path
        request.common_page_data = get_common_page_data(request, course_prefix, course_suffix)
        return view(request, *args, **kw)
    return do_mode_switch

@require_POST
@auth_is_course_admin_view_wrapper
@always_switch_mode     # not strictly necessary, but good for consistency
def add_section(request):
    common_page_data = request.common_page_data

    index = len(ContentSection.objects.filter(course=common_page_data['course']))

    draft_section = ContentSection(course=common_page_data['draft_course'], title=request.POST.get("title"), index=index, mode='draft')
    draft_section.save()
    draft_section.create_ready_instance()

    return redirect(request.META['HTTP_REFERER'])

@require_POST
@auth_is_course_admin_view_wrapper
def commit(request):
    ids = request.POST.get("commit_ids").split(",")
    for id in ids:
        parts = id.split('_')
        if parts[0] == 'video':
            Video.objects.get(id=parts[1]).commit()
        elif parts[0] == 'problemset':
            ProblemSet.objects.get(id=parts[1]).commit()
        elif parts[0] == 'additionalpage':
            AdditionalPage.objects.get(id=parts[1]).commit()
        elif parts[0] == 'exam':
            Exam.objects.get(id=parts[1]).commit()
    return redirect(request.META['HTTP_REFERER'])

@require_POST
@auth_is_course_admin_view_wrapper
def revert(request):
    ids = request.POST.get("revert_ids").split(",")
    for id in ids:
        parts = id.split('_')
        if parts[0] == 'video':
            Video.objects.get(id=parts[1]).revert()
        elif parts[0] == 'problemset':
            ProblemSet.objects.get(id=parts[1]).revert()
        elif parts[0] == 'additionalpage':
            AdditionalPage.objects.get(id=parts[1]).revert()
        elif parts[0] == 'exam':
            Exam.objects.get(id=parts[1]).revert()
    return redirect(request.META['HTTP_REFERER'])

@require_POST
@auth_is_course_admin_view_wrapper
def change_live_datetime(request):
    list_type = request.POST.get('list_type')
    action = request.POST.get('action')
    form = LiveDateForm(request.POST)
    if form.is_valid():
        if action == "Make Ready and Go Live":
            new_live_datetime = datetime.now()
        elif action == "Set Live Date":
            new_live_datetime = form.cleaned_data['live_datetime']
        else:
            new_live_datetime = None

        ids = request.POST.get("change_live_datetime_ids").split(",")

        for id in ids:
            parts = id.split('_')
            if parts[0] == 'video':
                content = Video.objects.get(id=parts[1])
            elif parts[0] == 'problemset':
                content = ProblemSet.objects.get(id=parts[1])
            elif parts[0] == 'additionalpage':
                content = AdditionalPage.objects.get(id=parts[1])
            elif parts[0] == 'file':
                content = File.objects.get(id=parts[1])
            elif parts[0] == 'exam':
                content = Exam.objects.get(id=parts[1])

            if action == "Make Ready and Go Live" and parts[0] != 'file':
                content.commit()
            content.live_datetime = new_live_datetime
            content.image.live_datetime = new_live_datetime
            content.save()
            content.image.save()

        if list_type == 'course_materials':
            return redirect('courses.views.course_materials', request.common_page_data['course_prefix'], request.common_page_data['course_suffix'])
        elif list_type == 'problemsets':
            return redirect('problemsets.views.listAll', request.common_page_data['course_prefix'], request.common_page_data['course_suffix'])
        else:
            return redirect('courses.videos.views.list', request.common_page_data['course_prefix'], request.common_page_data['course_suffix'])
        #This won't work anymore because referer could be /change_live_datetime if it's an invalid form post
        #return redirect(request.META['HTTP_REFERER'])

    if list_type == 'course_materials':
        section_structures = get_course_materials(common_page_data=request.common_page_data, get_video_content=True, get_pset_content=True, get_additional_page_content=True, get_file_content=True, get_exam_content=True)
        template = 'courses/draft/course_materials.html'
    elif list_type == 'problemsets':
        section_structures = get_course_materials(common_page_data=request.common_page_data, get_pset_content=True)
        template = 'problemsets/draft/list.html'
    else:
        section_structures = get_course_materials(common_page_data=request.common_page_data, get_video_content=True)
        template = 'videos/draft/list.html'
    return render(request, template,
                  {'common_page_data': request.common_page_data,
                   'section_structures': section_structures,
                   'form': form})

@require_POST
@auth_is_course_admin_view_wrapper
def check_filename(request, course_prefix, course_suffix, file_type):
    filename = request.POST.get('filename')
    
    if file_type == "files":
        #Validate that file doesn't already exist for course
        files = File.objects.getByCourse(course=request.common_page_data['course'])
        for file in files:
            if basename(file.file.name) == filename:
                return HttpResponse("File name already exists!")
    else:
        exercises = Exercise.objects.filter(handle=course_prefix+"--"+course_suffix,is_deleted=0)
        for exercise in exercises:
            if exercise.fileName == filename:
                #File name already exists, check if it has been taken yet
                if ProblemActivity.objects.filter(Q(video_to_exercise__exercise=exercise) | Q(problemset_to_exercise__exercise=exercise)).exists():
                    return HttpResponse("File name already exists! Exercise taken")
                else:
                    return HttpResponse("File name already exists!")

    return HttpResponse("File name is available")            

def is_member_of_course(course, user):
    student_group_id = course.student_group.id
    instructor_group_id = course.instructor_group.id
    tas_group_id = course.tas_group.id
    readonly_tas_group_id = course.readonly_tas_group.id

    group_list = user.groups.values_list('id',flat=True)

    for item in group_list:
        if item == student_group_id or item == instructor_group_id or item == tas_group_id or item == readonly_tas_group_id:
            return True

    return False


@require_POST
@csrf_protect
def signup_with_course(request, course_prefix, course_suffix):
    course = request.common_page_data['course']
    draft_course = course if course.mode == "draft" else course.image

    if course.institution_only and (course.institution not in request.user.get_profile().institutions.all()):
        messages.add_message(request,messages.ERROR, 'Registration in this course is restricted to ' + course.institution.title + '.  Perhaps you need to logout and login with your '+ course.institution.title + ' credentials?')
        return redirect(reverse('courses.views.main',args=[course_prefix,course_suffix]))

    invites = StudentInvitation.objects.filter(course=draft_course, email=request.user.email)

    if course.preenroll_only and not invites.exists():
        messages.add_message(request,messages.ERROR, 'Sorry!  Registration in this course is restricted, and we did not find your email in the access list.  Please contact the course staff if you believe this to be an error.')
        return redirect(reverse('courses.views.main',args=[course_prefix,course_suffix]))

    if request.user.is_authenticated() and (not is_member_of_course(course, request.user)):
        student_group = Group.objects.get(id=course.student_group_id)
        student_group.user_set.add(request.user)
        #now remove any invitations
        for invite in invites:
            invite.delete()
    if (request.GET.__contains__('redirect_to')):
        return redirect(request.GET.get('redirect_to'))
    return redirect(reverse('courses.views.main',args=[course_prefix,course_suffix]))


@require_POST
def signup(request):
    handle = request.POST.get('handle')

    user = request.user
    course = Course.objects.get(handle=handle, mode = "ready")
    if not is_member_of_course(course, user):
        student_group = Group.objects.get(id=course.student_group_id)
        student_group.user_set.add(user)

    return redirect(request.META['HTTP_REFERER'])




########NEW FILE########
__FILENAME__ = actions
from django.contrib import messages
from django.core.exceptions import ValidationError
from django.core.validators import validate_slug
from django.shortcuts import redirect
from django.views.decorators.http import require_POST

from c2g.models import *
from courses.common_page_data import get_common_page_data
from courses.actions import always_switch_mode, auth_is_course_admin_view_wrapper, create_contentgroup_entries_from_post


@require_POST
@auth_is_course_admin_view_wrapper
@always_switch_mode     # Not strictly necessary, but good for consistency
def add(request):
    def redirectWithError(warn_msg):
        messages.add_message(request,messages.ERROR, warn_msg)
        return redirect(request.META['HTTP_REFERER'])
    
    course_prefix = request.POST.get("course_prefix")
    course_suffix = request.POST.get("course_suffix")
    common_page_data = get_common_page_data(request, course_prefix, course_suffix)
    
    
    if not common_page_data['is_course_admin']:
        return redirect('courses.views.view', course_prefix, course_suffix)
    
    menu_slug = None
    if request.POST.get("menu_slug") != "":
        menu_slug = request.POST.get("menu_slug")
        
    section = None
    if request.POST.get("section_id") != "":
        section = ContentSection.objects.get(id=request.POST.get("section_id"))

    if request.POST.get("menu_slug") != "":
        index = len(AdditionalPage.objects.filter(course=common_page_data['course'],menu_slug=request.POST.get("menu_slug")))
    else:
        index = section.getNextIndex()
    
    #Validate manually, b/c we didn't use django forms here since we missed it
    try:
        validate_slug(request.POST.get("slug"))
    except ValidationError:
        return redirectWithError("The url descriptor cannot be empty and can only contain numbers, letters, underscores, and hyphens")

    if AdditionalPage.objects.filter(course=common_page_data['course'], slug=request.POST.get("slug")).exists():
        return redirectWithError("A page with this URL identifier already exists")

    if len(request.POST.get("title")) == 0:
        return redirectWithError("The title cannot be empty")

    if len(request.POST.get("title")) > AdditionalPage._meta.get_field("title").max_length:
        return redirectWithError("The title length was too long")

    draft_page = AdditionalPage(course=common_page_data['draft_course'], menu_slug=menu_slug, section=section, title=request.POST.get("title"), slug=request.POST.get("slug"), index=index, mode='draft')
    draft_page.save()
    draft_page.create_ready_instance()

    create_contentgroup_entries_from_post(request, 'parent_id', draft_page.image, 'additional_page', display_style='list')

    if request.POST.get("menu_slug") == "":
        return redirect('courses.views.course_materials', course_prefix, course_suffix)
    else:
        return redirect(request.META['HTTP_REFERER'])

@require_POST
@auth_is_course_admin_view_wrapper
@always_switch_mode     # Not strictly necessary, but good for consistency
def save(request):
    def redirectWithError(warn_msg):
        messages.add_message(request,messages.ERROR, warn_msg)
        return redirect(request.META['HTTP_REFERER'])
    
    common_page_data = get_common_page_data(request, request.POST.get("course_prefix"), request.POST.get("course_suffix"))
    if not common_page_data['is_course_admin']:
        return redirect('courses.views.main', common_page_data['course_prefix'],common_page_data['course_suffix'])
    
    page = AdditionalPage.objects.get(id=request.POST.get("page_id"))
    if request.POST.get("revert") == '1':
        page.revert()
    else:
        #Validate manually, b/c we didn't use django forms here since we missed it
        try:
            validate_slug(request.POST.get("slug"))
        except ValidationError:
            return redirectWithError("The url descriptor cannot be empty and can only contain numbers, letters, underscores, and hyphens")

        if (not page.slug==request.POST.get("slug")) and AdditionalPage.objects.filter(course=common_page_data['course'], slug=request.POST.get("slug")).exists():
            return redirectWithError("A page with this URL identifier already exists")

        if len(request.POST.get("title")) == 0:
            return redirectWithError("The title cannot be empty")

        if len(request.POST.get("title")) > AdditionalPage._meta.get_field("title").max_length:
            return redirectWithError("The title length was too long")

        new_section = request.POST.get("section")
        old_section = page.section
        if new_section is None or new_section == "null":                # Topbar pages
            page.section = None
            page.menu_slug = "course_info"       # normal pages
        else:
            page.section = ContentSection.objects.get(id=new_section)
            page.menu_slug = None

        page.title = request.POST.get("title")
        page.description = request.POST.get("description")
        page.slug = request.POST.get("slug")
        page.save()

        ##Also save the production slug per Issue #685, basically slugs are not stageable.
        page.image.slug = request.POST.get("slug")
        page.image.save()

        create_contentgroup_entries_from_post(request, 'parent', page.image, 'additional_page', display_style='list')

        if request.POST.get("commit") == '1':
            page.commit()
            
        if request.POST.get("title") == 'Overview':
            
            ready_course = common_page_data['ready_course']
            draft_course = common_page_data['draft_course']


            draft_course.outcomes = request.POST.get("outcomes")
            draft_course.faq = request.POST.get("faq")
            draft_course.prerequisites = request.POST.get("prerequisites")
            draft_course.accompanying_materials = request.POST.get("accompanying_materials")
            draft_course.description = request.POST.get("description")
            draft_course.save()
                
            if request.POST.get("commit") == '1': 
                ready_course.outcomes = request.POST.get("outcomes")
                ready_course.faq = request.POST.get("faq")
                ready_course.prerequisites = request.POST.get("prerequisites")
                ready_course.accompanying_materials = request.POST.get("accompanying_materials")
                ready_course.description = request.POST.get("description")
                ready_course.save()
    
                   
        # This has to happen last of all
        if (old_section != None or new_section != None) and (old_section or new_section != "null"):
            ContentGroup.reassign_parent_child_sections('additional_page', page.image.id, new_section)

    return redirect('courses.additional_pages.views.main', common_page_data['course_prefix'],common_page_data['course_suffix'], page.slug)

@require_POST
@auth_is_course_admin_view_wrapper
@always_switch_mode
def save_order(request):
    common_page_data = get_common_page_data(request, request.POST.get("course_prefix"), request.POST.get("course_suffix"))
    if not common_page_data['is_course_admin']:
        redirect('courses.views.main', common_page_data['course_prefix'],common_page_data['course_suffix'])
    
    pages = AdditionalPage.objects.filter(course=common_page_data['draft_course'])
    for page in pages:
        page.index = request.POST.get("order_"+str(page.id))
        page.save()
        prod_page = page.image
        prod_page.index = request.POST.get("order_"+str(page.id))
        prod_page.save()
        
    return redirect(request.META['HTTP_REFERER'])
    
@require_POST
@auth_is_course_admin_view_wrapper
@always_switch_mode     # Not strictly necessary, but good for consistency
def delete(request):
    common_page_data = get_common_page_data(request, request.POST.get("course_prefix"), request.POST.get("course_suffix"))
    if not common_page_data['is_course_admin']:
        redirect('courses.views.main', common_page_data['course_prefix'],common_page_data['course_suffix'])
        
    page_id = request.POST.get("page_id")
    page = AdditionalPage.objects.get(id=page_id)
    if page.slug == 'overview':
        return
        
    page.delete()
    if page.image:
        page.image.delete()
    
    if request.POST.get("menu_slug") == "":
        return redirect('courses.views.course_materials', course_prefix, course_suffix)
    else:
        return redirect(request.META['HTTP_REFERER'])

########NEW FILE########
__FILENAME__ = views
from django.http import Http404
from django.shortcuts import render_to_response, redirect
from django.template import RequestContext

from c2g.models import *
from courses.common_page_data import get_common_page_data
from courses.actions import auth_view_wrapper, auth_is_course_admin_view_wrapper
from courses.views import get_full_contentsection_list


@auth_is_course_admin_view_wrapper
def manage_nav_menu(request, course_prefix, course_suffix):
    try:
        common_page_data = get_common_page_data(request, course_prefix, course_suffix, use_cache=False)
    except e, msg:
        # Remark to console exception characterization so we can make this clause more specific
        print "Error in manage_nav_menu getting common_page_data, exception caught: %s" % msg
        raise Http404
        
    return render_to_response('additional_pages/manage_nav_menu.html', {'common_page_data':common_page_data, 'mode':'nav_menu'}, context_instance=RequestContext(request))

@auth_is_course_admin_view_wrapper
def add_section_page(request, course_prefix, course_suffix):
    try:
        common_page_data = get_common_page_data(request, course_prefix, course_suffix)
    except:
        raise Http404
        
    if not common_page_data['is_course_admin']:
        return redirect('courses.views.main', course_prefix, course_suffix)
    
    sections = ContentSection.objects.getByCourse(course=common_page_data['course'])
    return render_to_response('additional_pages/add_section_page.html', {'common_page_data':common_page_data, 'mode':'section', 'sections':sections}, context_instance=RequestContext(request))

@auth_view_wrapper
def main(request, course_prefix, course_suffix, slug):
    try:
        common_page_data = get_common_page_data(request, course_prefix, course_suffix)
        page = AdditionalPage.objects.get(course=common_page_data['course'], slug=slug)
    except:
        raise Http404
    
    if not common_page_data['is_course_admin']:
        visit_log = PageVisitLog(
            course = common_page_data['ready_course'],
            user = request.user,
            page_type = 'additional_page',
            object_id = str(page.id),
        )
        visit_log.save()

    contentgroup_info = None      # Empty for view mode
    sections    = ContentSection.objects.getByCourse(course=common_page_data['course'])
        
    if common_page_data['is_course_admin'] and common_page_data['course_mode'] == 'draft':
        template = 'additional_pages/edit.html'

        groupable_page = page
        if page.mode != 'ready':
            groupable_page = page.image
        contentgroup_info = ContentGroup.groupinfo_by_id('additional_page', groupable_page.id)
        # Oh, so it turns out you can't dereference variables starting with _
        # from Django templates
        if contentgroup_info:
            contentgroup_info['PARENT'] = contentgroup_info['__parent']
            contentgroup_info['PARENT_TAG'] = contentgroup_info['__parent_tag']
    else:
        template = 'additional_pages/view.html'

         
    course = common_page_data['course']

    course_instructors = CourseInstructor.objects.getByCourse(course=common_page_data['course'])
    instructor_list = []
    
    for ci in course_instructors:
        instructor_list.append(ci.instructor)
 
    full_contentsection_list, full_index_list = get_full_contentsection_list(course)
    
    try:
        video = Video.objects.getByCourse(course=common_page_data['course']).get(slug='intro')
    except Video.DoesNotExist:
        video = None


    if request.user.is_authenticated():
        is_logged_in = 1
    else:
        is_logged_in = 0

    ready_section = page.section
    if ready_section and ready_section.mode == "draft":
        ready_section = ready_section.image

    return render_to_response(template,
                              {
                               'common_page_data': common_page_data,
                               'page': page,
                               'contentsection_list': full_contentsection_list,
                               'full_index_list': full_index_list,
                               'instructor_list':instructor_list,
                               'course': course,
                               'is_logged_in': is_logged_in, 
                               'intro_video': video,
                               'ready_section': ready_section,
                               'contentgroup_info': contentgroup_info,
                               'sections': sections,
                              },
                               context_instance=RequestContext(request))


########NEW FILE########
__FILENAME__ = admin_views
from django.http import HttpResponse
from django.shortcuts import render_to_response, redirect
from django.template import Context, loader
from django.template import RequestContext
from django.contrib.auth.models import User,Group
from courses.common_page_data import get_common_page_data

from c2g.models import Course, Institution, AdditionalPage, CurrentTermMap
from random import randrange
import datetime
from courses.actions import auth_view_wrapper, auth_is_staff_view_wrapper

@auth_view_wrapper
def admin(request, course_prefix, course_suffix):
    try:
        common_page_data = get_common_page_data(request, course_prefix, course_suffix)
    except:
        raise Http404

    return render_to_response('courses/admin.html', {'common_page_data':common_page_data}, context_instance=RequestContext(request))
        

def setup_course(handle, user, start_date, end_date, title, contact, term, year, prefix, suffix, 
                 twitter_tag, logo_filename, institution_only, pre_enroll_only, preview_only):
    
    # Verify that there is no course with the same handle
    num_courses_with_same_handle = Course.objects.filter(handle=handle).count()
    if num_courses_with_same_handle > 0:
        return HttpResponse('A course with the same prefix and suffix already exists. Please choose a different prefix and/or suffix.')
    
    #Create groups
    r = randrange(0,100000000)
    student_group = Group.objects.create(name="Student Group for class2go course " + handle + " %d" % r)
    instructor_group = Group.objects.create(name="Instructor Group for class2go course " + handle + " %d" % r)
    tas_group = Group.objects.create(name="TAS Group for class2go course " + handle + " %d" % r)
    readonly_tas_group = Group.objects.create(name="Readonly TAS Group for class2go course " + handle + " %d" % r)
    
    #Add the professor to the instructor group
    instructor_group.user_set.add(user)

    #Setup dates
    start_date_elements = start_date.split('-')
    start_date_month = int(start_date_elements[0])
    start_date_day = int(start_date_elements[1])
    start_date_year = int(start_date_elements[2])

    end_date_elements = end_date.split('-')
    end_date_month = int(end_date_elements[0])
    end_date_day = int(end_date_elements[1])
    end_date_year = int(end_date_elements[2])    
    
    #Get the !!!single!!! (Stanford) institution and relate the course to it.
    institution = Institution.objects.all()[0]
        
    # Create the course
    draft_course = Course(
            student_group_id = student_group.id,
            instructor_group_id = instructor_group.id,
            tas_group_id = tas_group.id,
            readonly_tas_group_id = readonly_tas_group.id,
            title = title,
            contact = contact,
            term = term,
            year = year,
            calendar_start = datetime.datetime(start_date_year, start_date_month, start_date_day),
            calendar_end = datetime.datetime(end_date_year, end_date_month, end_date_day),
            list_publicly = 0,
            mode='draft',
            handle=handle,
            institution_id = institution.id,
            twitter_tag = twitter_tag,
            logo = logo_filename,
            institution_only = True if institution_only else False,
            preenroll_only = True if pre_enroll_only else False,
            preview_only_mode = True if preview_only else False
        )
    draft_course.save()
    
    draft_course.create_ready_instance()
        
    op = AdditionalPage(
                        course=draft_course,
                        menu_slug='course_info',
                        title='Overview',
                        description='',
                        slug='overview',
                        index=0,
                        mode='draft',
                       )
    op.save()
    op.create_ready_instance()
    
    #Create the CurrentTermMap table entry (note we still do not automatically update the DNS in Route 53)
    redir_entry, created = CurrentTermMap.objects.get_or_create(course_prefix = prefix)
    redir_entry.course_suffix = suffix
    redir_entry.save()
    
    
@auth_is_staff_view_wrapper
def new(request):
    if request.method == 'POST':
        #inst_id = request.POST.get('institution')
        # We are disabling the institutions functionality temporarily
        
        prefix = request.POST.get('prefix')
        suffix = request.POST.get('suffix')        
        handle = prefix + '--' + suffix
        user = request.user
        start_date = request.POST.get('start_date')
        end_date = request.POST.get('end_date')
        title = request.POST.get('title')
        contact = request.POST.get('contact')
        term = request.POST.get('term')
        year = int(request.POST.get('year'))
        twitter_tag = request.POST.get('twitter_tag')
        logo_filename = request.POST.get('logo_filename')
        institution_only = request.POST.get('institution_only')
        pre_enroll_only = request.POST.get('pre_enroll_only')
        preview_only = request.POST.get('preview_only')
                
        setup_course(handle, user, start_date, end_date, title, contact, term, year, 
                     prefix, suffix, twitter_tag, logo_filename, institution_only, pre_enroll_only, preview_only)


        request.session['course_mode'] = 'draft'
        return redirect('courses.views.main', course_prefix = request.POST.get('prefix'), course_suffix = request.POST.get('suffix'))
       
    # GET    
    else:
        now = datetime.datetime.now()
        date = "%02d-%02d-%04d" %(now.month, now.day, now.year)
        
        # List of institutions
        institutions = Institution.objects.all()
        
        return render_to_response('courses/new.html', {'request': request, 'date': date, 'institutions': institutions }, context_instance=RequestContext(request))
    
########NEW FILE########
__FILENAME__ = actions
from django.contrib import messages
from django.http import Http404
from django.shortcuts import redirect
from c2g.models import *
from courses.common_page_data import get_common_page_data
from courses.actions import always_switch_mode, auth_is_course_admin_view_wrapper
from django.views.decorators.http import require_POST

@require_POST
@auth_is_course_admin_view_wrapper
@always_switch_mode     # Not strictly necessary but good for consistency
def add_announcement(request):
    try:
        common_page_data = get_common_page_data(request, request.POST.get("course_prefix"), request.POST.get("course_suffix"))
    except:
        raise Http404
        
    if not common_page_data['is_course_admin']:
        return redirect('courses.views.main', request.POST.get("course_prefix"), request.POST.get("course_suffix"))
        
    index = len(Announcement.objects.getByCourse(course=common_page_data['course']))
    announcement = Announcement(
        course=common_page_data['course'],
        title=request.POST.get("title"),
        description=request.POST.get("description"),
        index=index,
        mode='draft',
        owner=request.user,
    )
    announcement.save()
    
    announcement.create_ready_instance()
    
    if request.POST.get("commit") == '1':
        announcement.commit()

    if request.POST.get("email"):
        request.session['email_subject'] = announcement.title
        request.session['email_message'] = announcement.description
        messages.add_message(request, messages.SUCCESS, 'Your announcement is published! Now send it to the students.')
        return redirect('courses.email_members.views.email_members', request.POST.get("course_prefix"), request.POST.get("course_suffix"))
    
    return redirect(request.META['HTTP_REFERER'])
    
@require_POST
@auth_is_course_admin_view_wrapper
@always_switch_mode     # Not strictly necessary but good for consistency
def save_announcement(request):
    try:
        common_page_data = get_common_page_data(request, request.POST.get("course_prefix"), request.POST.get("course_suffix"))
    except:
        raise Http404
        
    if not common_page_data['is_course_admin']:
        return redirect('courses.views.main', request.POST.get("course_prefix"), request.POST.get("course_suffix"))
        
    announcement = Announcement.objects.get(id=request.POST.get("announcement_id"))
    announcement.title = request.POST.get("title")
    announcement.description = request.POST.get("description")
    announcement.save()
    
    if request.POST.get("commit") == '1':
        announcement.commit()
        
    if request.POST.get("revert") == '1':
        announcement.revert()

    return redirect('courses.announcements.views.list', request.POST.get("course_prefix"), request.POST.get("course_suffix"))
    
@require_POST
@auth_is_course_admin_view_wrapper
@always_switch_mode
def delete_announcement(request):
    try:
        common_page_data = get_common_page_data(request, request.POST.get("course_prefix"), request.POST.get("course_suffix"))
    except:
        raise Http404
        
    if not common_page_data['is_course_admin']:
        return redirect('courses.views.main', request.POST.get("course_prefix"), request.POST.get("course_suffix"))

    announcement = Announcement.objects.get(id=request.POST.get("announcement_id"))
    announcement.delete()
    
    if announcement.image:
        announcement.image.delete()
    
    return redirect('courses.announcements.views.list', request.POST.get("course_prefix"), request.POST.get("course_suffix"))

@require_POST
@auth_is_course_admin_view_wrapper
@always_switch_mode
def save_announcement_order(request):
    try:
        common_page_data = get_common_page_data(request, request.POST.get("course_prefix"), request.POST.get("course_suffix"))
    except:
        raise Http404
        
    if not common_page_data['is_course_admin']:
        return redirect('courses.views.main', request.POST.get("course_prefix"), request.POST.get("course_suffix"))

@require_POST
@auth_is_course_admin_view_wrapper
@always_switch_mode
def email_announcement(request):
    try:
        common_page_data = get_common_page_data(request, request.POST.get("course_prefix"), request.POST.get("course_suffix"))
    except:
        raise Http404
        
    if not common_page_data['is_course_admin']:
        return redirect('courses.views.main', course_prefix, course_suffix)
        
    

########NEW FILE########
__FILENAME__ = models

########NEW FILE########
__FILENAME__ = views
from django.http import HttpResponse, Http404from django.shortcuts import render_to_responsefrom django.template import Context, loaderfrom django.template import RequestContextfrom c2g.models import *from courses.common_page_data import get_common_page_datafrom courses.actions import auth_view_wrapper, auth_is_course_admin_view_wrapper@auth_view_wrapperdef list(request, course_prefix, course_suffix):    try:        common_page_data = get_common_page_data(request, course_prefix, course_suffix)    except:        raise Http404            announcements = Announcement.objects.getByCourse(common_page_data['course']).order_by('-time_created')        return render_to_response('announcements/list.html', {'common_page_data':common_page_data, 'announcements':announcements}, context_instance=RequestContext(request))@auth_is_course_admin_view_wrapperdef admin(request, course_prefix, course_suffix):    try:        common_page_data = get_common_page_data(request, course_prefix, course_suffix)    except:        raise Http404            if not common_page_data['is_course_admin']:        return redirect('courses.views.main', course_prefix, course_suffix)        announcements = Announcement.objects.getByCourse(common_page_data['course'])        return render_to_response('announcements/admin.html', {'common_page_data':common_page_data, 'announcements':announcements}, context_instance=RequestContext(request))    @auth_is_course_admin_view_wrapperdef edit(request, course_prefix, course_suffix, announcement_id):    try:        common_page_data = get_common_page_data(request, course_prefix, course_suffix)    except:        raise Http404            announcement = Announcement.objects.get(id=announcement_id)        return render_to_response('announcements/edit.html', {'common_page_data':common_page_data, 'announcement':announcement}, context_instance=RequestContext(request)) 
########NEW FILE########
__FILENAME__ = views
from django.http import HttpResponse
from django.shortcuts import render_to_response
from django.template import Context, loader
from django.template import RequestContext

def list(request, course_prefix, course_suffix):
    return render_to_response('assignments/list.html', {'course_prefix': course_prefix, 'course_suffix': course_suffix, 'request': request}, context_instance=RequestContext(request))
    
def admin(request, course_prefix, course_suffix):
    return render_to_response('assignments/admin.html', {'course_prefix': course_prefix, 'course_suffix': course_suffix, 'request': request}, context_instance=RequestContext(request))
    
def view(request, course_prefix, course_suffix, assignment_id):
    return render_to_response('assignments/view.html', {'course_prefix': course_prefix, 'course_suffix': course_suffix, 'assignment_id':assignment_id, 'request': request}, context_instance=RequestContext(request))
    
def edit(request, course_prefix, course_suffix, assignment_id):
    return render_to_response('assignments/edit.html', {'course_prefix': course_prefix, 'course_suffix': course_suffix, 'assignment_id':assignment_id, 'request': request}, context_instance=RequestContext(request))
    
def grade(request, course_prefix, course_suffix, assignment_id):
    return render_to_response('assignments/grade.html', {'course_prefix': course_prefix, 'course_suffix': course_suffix, 'assignment_id':assignment_id, 'request': request}, context_instance=RequestContext(request))

########NEW FILE########
__FILENAME__ = views
from django.http import Http404
from django.template import RequestContext
from django.shortcuts import redirect, render_to_response

from c2g.models import *
from courses.common_page_data import get_common_page_data
import settings

def prototype(request, course_prefix, course_suffix):
    """FIXME write a doc string"""
    user = request.user
    if not request.common_page_data:
        try:
            request.common_page_data = get_common_page_data(request, course_prefix, course_suffix)
        except:
            raise Http404
    jabber_base = getattr(settings, 'JABBER_DOMAIN', '')
    if not jabber_base:
        raise Http404
    if user.is_authenticated():
        environment = {
            'request': request,
            'course_prefix': course_prefix,
            'course_suffix': course_suffix,
            'jabber_base': jabber_base,
            'user': user,
            'nick': user.username + '@' + jabber_base,
            'course': request.common_page_data['course'],
        }
        return render_to_response('chat/prototype.html', environment, context_instance=RequestContext(request))
    else:
        return redirect('courses.views.main', course_prefix, course_suffix)


########NEW FILE########
__FILENAME__ = common_page_data
import logging

from database import AWS_STORAGE_BUCKET_NAME
from django.core.cache import get_cache

from c2g.models import AdditionalPage, ContentSection, Course
from c2g.util import CacheStat

logger=logging.getLogger(__name__)


def get_common_page_data(request, prefix, suffix, use_cache=True):
    """Collect data frequently used by site templates, with caching.

    request:   the HTTP request object
    prefix:    the course prefix, e.g., 'networking'
    suffix:    the course suffix, e.g., 'Fall2012'
    use_cache: If False, forces cache lookups to miss.
               Defaults to True. 
    """

    CACHE_STORE   = 'course_store'
    CACHE         = get_cache(CACHE_STORE)
    course_handle = prefix+"--"+suffix

    ready_course = Course.objects.get(handle=course_handle, mode='ready')
    draft_course = Course.objects.get(handle=course_handle, mode='draft')
    
    course_mode = 'ready'
    course = ready_course
    
    prefix = course.prefix
    suffix = course.suffix
    
    can_switch_mode = False
    is_course_admin = False
    is_course_member = False
    
    user_groups = request.user.groups.all()
    for g in user_groups:
        if g.id == course.student_group_id:
            is_course_member = True
            break
        
        if g.id == course.instructor_group_id:
            can_switch_mode = True
            is_course_admin = True
            is_course_member = True
            break
 
        if g.id == course.tas_group_id:
            can_switch_mode = True
            is_course_admin = True
            is_course_member = True
            break

        if g.id == course.readonly_tas_group_id:
            can_switch_mode = True
            is_course_member = True
            break
    
    if can_switch_mode and ('course_mode' in request.session) and (request.session['course_mode'] == 'draft'):
        course_mode = 'draft'
        course = draft_course
        
    # Course info pages
    course_info_page_handle = course_handle + '_' + course_mode + '_course_info_pages'
    course_info_pages = CACHE.get(course_info_page_handle)
    if use_cache and course_info_pages:
        CacheStat.report('hit', CACHE_STORE)
    else:
        CacheStat.report('miss', CACHE_STORE)
        course_info_pages = AdditionalPage.objects.filter(course=course,is_deleted=0,menu_slug='course_info').order_by('index')
        CACHE.set(course_info_page_handle, course_info_pages)
    if course_mode == 'ready':
        course_info_pages = [page for page in course_info_pages if page.description]

    # Get list of non-empty content sections for course materials dropdown menu
    content_sections = None
    if course_mode == 'ready':
        content_section_page_handle = course_handle + 'ready' +'_nonempty_content_sections'
        content_sections = CACHE.get(content_section_page_handle)
        if use_cache and content_sections:
            CacheStat.report('hit', CACHE_STORE)
        else:
            CacheStat.report('miss', CACHE_STORE)
            content_sections = [s for s in ContentSection.objects.getByCourse(course) if s.countChildren() > 0]
            CACHE.set(content_section_page_handle, content_sections)
    
    page_data = {
        'request': request,
        'course': course,
        'ready_course': ready_course,
        'draft_course': draft_course,
        'course_prefix':prefix,
        'course_suffix':suffix,
        'course_info_pages':course_info_pages,
        'content_sections':content_sections,
        'aws_storage_bucket_name':AWS_STORAGE_BUCKET_NAME,
        # These are the parameters that prevent caching page_data in its
        # entirety, based only on course
        'course_mode':     course_mode,
        'can_switch_mode': can_switch_mode,
        'is_course_admin': is_course_admin,
        'is_course_member':is_course_member,
    }

    return page_data

########NEW FILE########
__FILENAME__ = common_page_data_middleware
from courses.common_page_data import get_common_page_data
from django.http import Http404
from c2g.models import Course

import logging
logger = logging.getLogger(__name__)

class common_data(object):
    """
    This is a middleware class that eagerly retrieves page data that might be common to most requests.  It is 
    basically a wrapper around Sherif's implementation of common_page_data.  The data is stored as a field of 
    request.
    """
    def process_view (self, request, view_func, view_args, view_kwargs):
        if ('course_prefix' in view_kwargs) and \
           ('course_suffix' in view_kwargs):
            cp = view_kwargs['course_prefix']
            cs = view_kwargs['course_suffix']
        else:
            #No course information in the URL.  There is a special case that has it as a POST parameter (Why?)
            #Handle those here
            if request.POST.get('course_prefix', None) and \
               request.POST.get('course_suffix', None):
                #The course info is in the POST in this case
                cp = request.POST.get('course_prefix')
                cs = request.POST.get('course_suffix')
            else:
                return None
    
        try:
            request.common_page_data=get_common_page_data(request, cp, cs)
            return None
        except Course.DoesNotExist:
            raise Http404

########NEW FILE########
__FILENAME__ = actions
import json

from django.http import Http404, HttpResponse
from django.shortcuts import redirect
from django.views.decorators.http import require_POST

from c2g.models import *
from courses.actions import always_switch_mode, auth_is_course_admin_view_wrapper
from courses.common_page_data import get_common_page_data
from courses.course_materials import get_course_materials


@require_POST
@auth_is_course_admin_view_wrapper
@always_switch_mode     # not strictly necessary, but good for consistency
def save_order(request):
    common_page_data = get_common_page_data(request, request.POST.get("course_prefix"), request.POST.get("course_suffix"))
    if not common_page_data['is_course_admin']:
        redirect('courses.views.main', common_page_data['course_prefix'],common_page_data['course_suffix'])
    
    sections = ContentSection.objects.filter(course=common_page_data['draft_course'])
    
    for section in sections:
        section.index = request.POST.get("order_"+str(section.id))
        section.save()
        prod_section = section.image
        prod_section.index = request.POST.get("order_"+str(section.id))
        prod_section.save()
        
    return redirect('courses.views.course_materials', request.POST.get("course_prefix"), request.POST.get("course_suffix"))

@require_POST
@auth_is_course_admin_view_wrapper
@always_switch_mode
def rename(request):
    try:
        common_page_data = get_common_page_data(request, request.POST.get("course_prefix"), request.POST.get("course_suffix"))
    except:
        raise Http404
        
    if not common_page_data['is_course_admin']:
        return redirect('courses.views.main', request.POST.get("course_prefix"), request.POST.get("course_suffix"))
        
    section = ContentSection.objects.get(id=request.POST.get("section_id"))
    section.title = request.POST.get("title")
    section.subtitle = request.POST.get("subtitle")
    section.save()
    section.commit()
    
    return redirect('courses.views.course_materials', request.POST.get("course_prefix"), request.POST.get("course_suffix"))

@require_POST
@auth_is_course_admin_view_wrapper
@always_switch_mode     # not strictly necessary, but good for consistency
def delete_content_section(request):
    try:
        common_page_data = get_common_page_data(request, request.POST.get("course_prefix"), request.POST.get("course_suffix"))
    except:
        raise Http404
        
    if not common_page_data['is_course_admin']:
        return redirect('courses.views.main', request.POST.get("course_prefix"), request.POST.get("course_suffix"))
        
    section = ContentSection.objects.get(id=request.POST.get("section_id"))
    section_image = section.image
    section.delete()
    section_image.delete()
    
    return redirect('courses.views.course_materials', request.POST.get("course_prefix"), request.POST.get("course_suffix"))
     
@require_POST
@auth_is_course_admin_view_wrapper
@always_switch_mode
def save_content_order(request):
    try:
        common_page_data = get_common_page_data(request, request.POST.get("course_prefix"), request.POST.get("course_suffix"))
    except:
        raise Http404
        
    if not common_page_data['is_course_admin']:
        return redirect('courses.views.main', request.POST.get("course_prefix"), request.POST.get("course_suffix"))
        
    SECTION = ContentSection.objects.get(pk=request.POST.get('section_id'))
    section_structures = get_course_materials(common_page_data=common_page_data, get_video_content=True, get_additional_page_content = True, get_file_content=True, get_exam_content=True, SECTION=SECTION)

    def set_index_from_POST(item):
        tag       = item['type']
        image     = item[tag].image
        new_index = request.POST.get("order_"+tag+"_"+str(item[tag].id))
        item[tag].index = new_index
        item[tag].save()
        image.index = new_index
        image.save()
    
    for section_structure in section_structures:

        for item in section_structure['items']:
            set_index_from_POST(item)

    return redirect(request.META['HTTP_REFERER'])
    
def get_children(request, section_id, contentgroup_parents_only=False):
    """Return JSON list of type, id, title triples of section_id's children"""
    section = ContentSection.objects.get(id=int(section_id))
    children = []
    l2_kids = []
    if contentgroup_parents_only:
        l2_kids = ContentGroup.get_level2_tag_sorted()
    for child in section.getChildren(gettagged=True, getsorted=True):
        item    = child['item']
        typetag = child['type']
        if contentgroup_parents_only:
            if item.mode != 'ready':
                item = item.image
            if item.id in l2_kids.get(typetag, []):
                continue
        children.append((typetag, item.image.id, item.title))
    return HttpResponse(json.dumps(children), mimetype='application/json')

def get_children_as_contentgroup_parents(request, section_id):
    """Return JSON list of type, id, title triples of section_id's children.
    
    Limit return results to items which are ContentGroup parents.
    """
    return get_children(request, section_id, contentgroup_parents_only=True)

########NEW FILE########
__FILENAME__ = forms
from django import forms


class CoursePushForm(forms.Form):
    
    def __init__(self, class_list, *args, **kwargs):
        super(CoursePushForm, self).__init__(*args, **kwargs)
        self.fields['linked_class'] = forms.ChoiceField(label="Copy to course:", choices=map(lambda c:(c.handle,c.title), class_list))
        
class SectionPushForm(forms.Form):
    
    def __init__(self, section_list, class_list, *args, **kwargs):
        super(SectionPushForm, self).__init__(*args, **kwargs)
        self.fields['section_choice'] = forms.ChoiceField(label="Choose a Section:", choices=map(lambda s: (str(s.id),s.title),section_list))
        self.fields['linked_class'] = forms.ChoiceField(label="Copy to course:", choices=map(lambda c:(c.handle,c.title), class_list))
########NEW FILE########
__FILENAME__ = views
from django.contrib import messages
from django.http import Http404
from django.shortcuts import render_to_response, redirect
from django.template import RequestContext
from django.views.decorators.csrf import csrf_protect
from django.views.decorators.http import require_POST

from c2g.models import *
from courses.actions import auth_is_course_admin_view_wrapper
from courses.common_page_data import get_common_page_data
from courses.content_sections.forms import *
from courses.copy_content import copyCourse


@auth_is_course_admin_view_wrapper
def reorder(request, course_prefix, course_suffix):
    try:
        common_page_data = get_common_page_data(request, course_prefix, course_suffix)
    except:
        raise Http404
    
    if not common_page_data['is_course_admin']:
        return redirect('courses.views.main',  course_prefix, course_suffix)
        
    sections = ContentSection.objects.getByCourse(course=common_page_data['course'])
    
    return render_to_response('content_sections/draft/reorder.html', {'common_page_data': common_page_data, 'sections':sections}, context_instance=RequestContext(request))

@auth_is_course_admin_view_wrapper
def rename(request, course_prefix, course_suffix, section_id):
    try:
        common_page_data = get_common_page_data(request, course_prefix, course_suffix)
    except:
        raise Http404
    
    if not common_page_data['is_course_admin']:
        return redirect('courses.views.main',  course_prefix, course_suffix)
        
    section = ContentSection.objects.get(id=section_id)
    return render_to_response('content_sections/draft/rename.html', {'common_page_data': common_page_data, 'section':section}, context_instance=RequestContext(request))


@auth_is_course_admin_view_wrapper
def copy_content_form(request, course_prefix, course_suffix):
    draft_course = request.common_page_data['draft_course']
    share_iter = draft_course.share_to.all()
    share_list = map(lambda c: (c if c.mode=='draft' else c.image), list(share_iter)) # Make sure we get the draft version
    draft_sections = ContentSection.objects.filter(is_deleted=False, course=draft_course)
    #create a dynamic form class just for display
    form = SectionPushForm(list(draft_sections),share_list)
    
    return render_to_response('content_sections/push_section_form.html',
                              {'common_page_data':request.common_page_data, 'sections':draft_sections, 'form':form},
                              context_instance=RequestContext(request))


@auth_is_course_admin_view_wrapper
@require_POST
@csrf_protect
def copy_content(request, course_prefix, course_suffix):
    from_course = request.common_page_data['draft_course']
    try:
        to_course = Course.objects.get(handle=request.POST['linked_class'], mode='draft')
        from_section = ContentSection.objects.get(id=request.POST['section_choice'])
        from_section = from_section if from_section.mode=="draft" else from_section.image #make sure we have a draft mode section
    except Course.DoesNotExist:
        messages.add_message(request, messages.ERROR, 'The destination course does not exist.')
        return redirect('courses.content_sections.views.copy_content_form', course_prefix, course_suffix)
    except ContentSection.DoesNotExist:
        messages.add_message(request, messages.ERROR, 'The selected content section does not exist.')
        return redirect('courses.content_sections.views.copy_content_form', course_prefix, course_suffix)

    if not request.user in list(to_course.get_all_course_admins()):
        messages.add_message(request, messages.ERROR, 'Sorry, you are not a staff member of the destination course.  Please contact support staff to request that privilege.')
        return redirect('courses.content_sections.views.copy_content_form', course_prefix, course_suffix)

    #privileges are okay, do the copy
    copyCourse(from_course, to_course, from_section)

    messages.add_message(request, messages.SUCCESS, 'Section: %s has been successfully copied to course: %s' %(from_section.title, to_course.title))

    return redirect('courses.views.main', course_prefix, course_suffix)


@auth_is_course_admin_view_wrapper
def copy_course_form(request, course_prefix, course_suffix):
    draft_course = request.common_page_data['draft_course']
    share_iter = draft_course.share_to.all()
    share_list = map(lambda c: (c if c.mode=='draft' else c.image), list(share_iter)) # Make sure we get the draft version
    
    #create a dynamic form class just for display
    form = CoursePushForm(share_list)
    
    return render_to_response('content_sections/push_course_form.html',
                              {'common_page_data':request.common_page_data, 'form':form},
                              context_instance=RequestContext(request))

@auth_is_course_admin_view_wrapper
@require_POST
@csrf_protect
def copy_course(request, course_prefix, course_suffix):
    from_course = request.common_page_data['draft_course']
    try:
        to_course = Course.objects.get(handle=request.POST['linked_class'], mode='draft')
    except Course.DoesNotExist:
        messages.add_message(request, messages.ERROR, 'The destination course does not exist.')
        return redirect('courses.content_sections.views.copy_course_form', course_prefix, course_suffix)

    if not request.user in list(to_course.get_all_course_admins()):
        messages.add_message(request, messages.ERROR, 'Sorry, you are not a staff member of the destination course.  Please contact support staff to request that privilege.')
        return redirect('courses.content_sections.views.copy_course_form', course_prefix, course_suffix)

    #privileges are okay, do the copy
    copyCourse(from_course, to_course)

    messages.add_message(request, messages.SUCCESS, 'Course: %s has been successfully copied to course: %s' %(from_course.title, to_course.title))

    return redirect('courses.views.main', course_prefix, course_suffix)


########NEW FILE########
__FILENAME__ = copy_content
import os

from c2g.models import *
from copy import *
from django.core.files.storage import default_storage
from django.core.files.base import ContentFile
from boto.s3.connection import S3Connection
from boto.s3.key import Key
from django.db.models import Max, F

import settings

AWS_ACCESS_KEY_ID = getattr(settings,'AWS_ACCESS_KEY_ID', '')
AWS_SECRET_ACCESS_KEY = getattr(settings, 'AWS_SECRET_ACCESS_KEY', '')
AWS_STORAGE_BUCKET_NAME = getattr(settings, 'AWS_STORAGE_BUCKET_NAME', 'local')
    


# Why am I doing this here instead of within the c2g/models.py file?  That file has gotten too long
# try to reduce clutter and modularize

# First, some helper functions
def copyAndSaveModelObj(obj):
    """
       This makes a copy of the model, saves it, and returns it.
       This is a shallow copy--the model fields are duplicated and so file contents, for instance, are aliased.
       The primary key is changed of course.
       Callers of this function are responsible for modifying *all fields* that are *any* form of referecence within the returned object.
       Examples of reference fields include primary-key ids, paths, etc.  These all have to be fixed up by the caller.
    """

    newobj = copy(obj)
    newobj.id = None
    newobj.save()

    return newobj



def copyStageableSectionObj(draft, new_draft_course, new_draft_section):
    """
       Takes as argument the the draft version of an object in a ContentSection and copies both the draft and ready versions over to new_course in new_section
       Sets livedate to None so that materials copied over from earlier course don't automatically become live.
       Relies on new_draft_course and new_draft_section already having images
       Returns draft version of new object.  Ready version is accessible via the image field
    """
    ready = draft.image
    
    # Copy and Setup image relationships
    newdraft = copyAndSaveModelObj(draft)
    newready = copyAndSaveModelObj(ready)
    newready.image = newdraft
    newdraft.image = newready
    
    # Reference fields Section Objects are course and section
    # Setup for draft
    newdraft.course = new_draft_course
    newdraft.section = new_draft_section
    newdraft.live_datetime = None
    
    # Setup for ready
    newready.course = new_draft_course.image
    newready.section = new_draft_section.image
    newready.live_datetime = None
    
    newdraft.save()
    newready.save()
    
    return newdraft



def copyExerciseS3(exercise, new_course):
    """
       Copies exercise to new course.  Will create a new exercise, do the copy in S3, and return new exercise object if new_course does not already have
       an exercise with the same filename.  Otherwise, will simply return the exercise object in the new course with the same filename
    """

    #Look for matching filename in the new course first.
    try:
        return Exercise.objects.get(handle = new_course.handle, fileName = exercise.fileName, is_deleted=False)
    except Exercise.DoesNotExist:
        pass #fall through
    except Exercise.MultipleObjectsReturned:
        return Exercise.objects.filter(handle = new_course.handle, fileName = exercise.fileName, is_deleted=False)[0]

    #Time to create new Exercise object in new course
    newex = Exercise()
    newex.handle = new_course.handle #This is what sets the right S3 prefix as the new course
    newex.fileName = exercise.fileName
    newex.save() #This is to generate an id for newex, which is used by S3
    newex.file.save(newex.fileName, ContentFile(exercise.file.read()))
    newex.save()

    return newex



def copyS3VideoDataById(id, handle, new_id, new_handle):
    """
       Copies all of the metadata, including raw video file and Kelvinator outputs (manifest and thumbnails) belonging to video identified by id, 
       in class identified by handle, to a location corresponding to a video object with new_id in class identified by new_handle
       Returns the new prefix of the assets
    """
    #Going to use BOTO directly, because we just need new keys to the same content and this should be faster, hopefully
    s3conn = S3Connection(AWS_ACCESS_KEY_ID, AWS_SECRET_ACCESS_KEY)
    bucket = s3conn.get_bucket(AWS_STORAGE_BUCKET_NAME)
    prefix = handle.replace('--', '/') + '/videos/' + str(id)
    new_prefix = new_handle.replace('--','/') + '/videos/' + str(new_id)

    for key in bucket.list(prefix):
        new_key_name = key.key.replace(prefix, new_prefix)
        new_key = key.copy(AWS_STORAGE_BUCKET_NAME, new_key_name)

    return new_prefix


    
#Now, functions that copy over data-types used by ContentSections.  ProblemSets, Videos, Files, and StaticPages

def copyStageableProblemSet(draft, new_draft_course, new_draft_section):
    """
       Takes a draft problem set and copies the (draft,ready) problemSet pair to new_course, in new_section
       Relies on new_draft_course and new_draft_section already having images.
       Then copies over all of the _draft_ exercise relationships, and commits the draft to save the ready version.
    """
    newdraft = copyStageableSectionObj(draft, new_draft_course, new_draft_section)
    
    #Copy over exercises, making new S3 copies where appropriate.
    #We have an idiosyncratic way of deleting pset-to-exercise relationships -- we don't actually delete them
    #but rather set a flag.  It changes the way we search here
    for psToEx in ProblemSetToExercise.objects.filter(is_deleted=False, problemSet=draft):
        exercise = psToEx.exercise
        newex = copyExerciseS3(exercise, new_draft_course)
        newPsToEx = ProblemSetToExercise(problemSet=newdraft, exercise=newex, number=psToEx.number, mode='draft')
        newPsToEx.save()

    #sanity check to avoid duplicate slugs
    if ProblemSet.objects.filter(is_deleted=False, course=new_draft_course, slug=newdraft.slug).count() > 1: #There's definitely one, the one we just copied
        while ProblemSet.objects.filter(is_deleted=False, course=new_draft_course, slug=newdraft.slug).exists():  #Now start appending until slug is unique
            newdraft.slug = newdraft.slug + "1"

    #recompute the path
    newdraft.path = "/"+new_draft_course.handle.replace('--','/')+"/problemsets/"+newdraft.slug+"/load_problem_set"

    newdraft.save()
    newdraft.commit() #Make the ready version

    return draft.image.id, newdraft.image.id


def copyStageableVideo(draft, new_draft_course, new_draft_section, draft_exam_map):
    """
       Takes a video and copies the (draft,ready) video pair to new_course, in new_section
       Relies on new_draft_course and new_draft_section already having images.
       Then copies over the draft exam relationship, and commits the draft to save the ready version.
    """
    newdraft = copyStageableSectionObj(draft, new_draft_course, new_draft_section)

    #now move over the S3 video assets
    new_prefix=copyS3VideoDataById(draft.id, draft.course.handle, newdraft.id, new_draft_course.handle)
    #and fix up the file references
    fileName = draft.file.name.split("/")[-1]
    newdraft.file.name= new_prefix + "/" + fileName
    newdraft.handle = new_draft_course.handle

    #sanity check to avoid duplicate slugs
    if Video.objects.filter(is_deleted=False, course=new_draft_course, slug=newdraft.slug).count() > 1: #There's definitely one, the one we just copied
        while Video.objects.filter(is_deleted=False, course=new_draft_course, slug=newdraft.slug).exists():  #Now start appending until slug is unique
            newdraft.slug = newdraft.slug + "1"

    #Set the exam_id, if applicable. Hopefully if it is not null, it didn't end up
    #in a different section; which could be problematic.
    newdraft.exam_id = draft_exam_map.get(draft.exam_id, None)
  
    newdraft.save()
    newdraft.commit() #push changes to ready version


    return draft.image.id, newdraft.image.id

def copyStageableFile(draft, new_draft_course, new_draft_section):
    """
       Takes a draft file and copies the (draft,ready) pair to new_course, in new_section
       Relies on new_draft_course and new_draft_section already having images
    """
    newdraft = copyStageableSectionObj(draft, new_draft_course, new_draft_section)
    newready = newdraft.image
    
    newdraft.handle = new_draft_course.handle #This is what sets the right S3 prefix as the new course
    newready.handle = new_draft_course.image.handle

    new_prefix = new_draft_course.handle.replace('--','/') + "/files/"
    new_name =  draft.file.name.split('/')[-1]
    
    found = False
    
    #Search for File with identical filename in new course first    
    for f in File.objects.filter(course = new_draft_course, is_deleted=False):
        if f.file.name == new_prefix+new_name:
            found=True
            foundfile=f
            break

    if found:
        newdraft.file.name = foundfile.file.name
        newready.file.name = foundfile.file.name  
    else:
        newdraft.file.save(new_name, ContentFile(draft.file.read()))
        newready.file=newdraft.file
  
    newdraft.save()    
    newready.save()

    return draft.image.id, newdraft.image.id

def copyStageableStaticPage(draft, new_draft_course, new_draft_section):
    """
       Takes a draft static page and copies the (draft,ready) pair to new_course, in new_section
       Relies on new_draft_course and new_draft_section already having images
    """
    newdraft = copyStageableSectionObj(draft, new_draft_course, new_draft_section)
    newready = newdraft.image

    #sanity check to avoid duplicate slugs
    if AdditionalPage.objects.filter(is_deleted=False, course=new_draft_course, slug=newdraft.slug).count() > 1: #There's definitely one, the one we just copied
        while AdditionalPage.objects.filter(is_deleted=False, course=new_draft_course, slug=newdraft.slug).exists():  #Now start appending until slug is unique
            newdraft.slug = newdraft.slug + "1"

    newdraft.save()
    newdraft.commit()

    return draft.image.id, newdraft.image.id

def copyStageableExam(draft, new_draft_course, new_draft_section):
    """
       Takes a draft exam and copies the (draft,ready) pair to new_course, in new_section
       Relies on new_draft_course and new_draft_section already having images
    """
    newdraft = copyStageableSectionObj(draft, new_draft_course, new_draft_section)
    newready = newdraft.image

    #sanity check to avoid duplicate slugs
    if Exam.objects.filter(is_deleted=False, course=new_draft_course, slug=newdraft.slug).count() > 1: #There's definitely one, the one we just copied
        while Exam.objects.filter(is_deleted=False, course=new_draft_course, slug=newdraft.slug).exists():  #Now start appending until slug is unique
            newdraft.slug = newdraft.slug + "1"

    newdraft.save()
    newdraft.commit()

    return draft.image.id, newdraft.image.id, draft.id, newdraft.id


def copyCourse(old_draft_course, new_draft_course, from_section = None):
    """ 
       Given a draft copy of a ContentSection, copies the content in the ContentSection to the course identified by new_draft_course.
       Given a draft copy of a Course and from_section is None, copies the content in the whole course identified by old_draft_course to the
       course identified by new_draft_course.
    """
    
    #dicts to map old entity ids to new entity ids when creating the new ContentGroups.
    additionalpage_map = {}
    file_map = {}
    video_map = {}
    exam_map = {}
    draft_exam_map = {}
    old_draftcontentsections = []
    
    if from_section == None:        
        old_draftcontentsections = ContentSection.objects.filter(is_deleted=False, course=old_draft_course)
    else:
        old_draftcontentsections.append(from_section)
        
        
    for old_draftcontentsection in old_draftcontentsections:
    
        #Figure out whether to create or reuse section.  Either way the result is newdraft
        if ContentSection.objects.filter(is_deleted=False, course=new_draft_course, title=old_draftcontentsection.title).exists():
            new_draftcontentsection = ContentSection.objects.filter(is_deleted=False, course=new_draft_course, title=old_draftcontentsection.title)[0]
    
        else:
            index = ContentSection.objects.filter(is_deleted=False, course=new_draft_course).aggregate(Max('index'))['index__max']
            if index == None:
                index = 0
            else:
                index +=1
        
            new_draftcontentsection = ContentSection(course=new_draft_course, title=old_draftcontentsection.title)
            new_draftcontentsection.index = index
            new_draftcontentsection.mode="draft"
            new_draftcontentsection.save()
            new_draftcontentsection.create_ready_instance()

        #Additional Pages
        for ap in AdditionalPage.objects.filter(is_deleted=False, course=old_draft_course, section=old_draftcontentsection):
            old_ready_id, new_ready_id = copyStageableStaticPage(ap, new_draft_course, new_draftcontentsection)
            additionalpage_map[old_ready_id] = new_ready_id

        #Files
        for f in File.objects.filter(is_deleted=False, course=old_draft_course, section=old_draftcontentsection):
            old_ready_id, new_ready_id = copyStageableFile(f, new_draft_course, new_draftcontentsection)            
            file_map[old_ready_id] = new_ready_id

        #Exams
        for e in Exam.objects.filter(is_deleted=False, course=old_draft_course, section=old_draftcontentsection):
            old_ready_id, new_ready_id, old_draft_id, new_draft_id = copyStageableExam(e, new_draft_course, new_draftcontentsection)
            exam_map[old_ready_id] = new_ready_id
            draft_exam_map[old_draft_id] = new_draft_id

        #Videos
        for v in Video.objects.filter(is_deleted=False, course=old_draft_course, section=old_draftcontentsection):
            #Send the draft_exam_map so we can set the video to exam relation.
            old_ready_id, new_ready_id = copyStageableVideo(v, new_draft_course, new_draftcontentsection, draft_exam_map)
            video_map[old_ready_id] = new_ready_id

        new_draftcontentsection.save()
        new_draftcontentsection.commit()
    
    #ContentGroups
    copyAllContentGroups(old_draft_course.image.id, new_draft_course.image.id, additionalpage_map, file_map, video_map, exam_map)
 
 
def copyAllContentGroups(old_ready_course_id, new_ready_course_id, additionalpage_map, file_map, video_map, exam_map):
    
    #Copy the level 1 content groups first
    cg_map = {}  
    for cg in ContentGroup.objects.filter(course_id = old_ready_course_id, level = 1, id = F('group_id')):
        
        #Need to protect against situation where entity was not cloned because it's
        #section was deleted.
        if not all_entities_null(additionalpage_map, file_map, video_map, exam_map, cg):
        
            #Map old cg entity id to new so we can process the level 2's.
            #Need to protect against any bad data
            new_cg = copyAndSaveModelObj(cg)
            new_cg.group_id = new_cg.id
            new_cg.course_id = new_ready_course_id
            new_cg.video_id = video_map.get(cg.video_id, None)
            new_cg.additional_page_id = additionalpage_map.get(cg.additional_page_id, None)
            new_cg.file_id = file_map.get(cg.file_id, None)
            new_cg.exam_id = exam_map.get(cg.exam_id, None)
            new_cg.save()
            cg_map[cg.group_id] = new_cg.group_id
        
        
        
    #Now copy the level 2's making sure we only pick those with a valid group_id
    for cg in ContentGroup.objects.filter(course_id = old_ready_course_id, level = 2):
        
        #Need to protect against situation where entity was not cloned because it's
        #section was deleted.
        if not all_entities_null(additionalpage_map, file_map, video_map, exam_map, cg):
        
            if cg_map.get(cg.group_id, False):
                new_cg = copyAndSaveModelObj(cg)
                new_cg.group_id = cg_map[cg.group_id]
                new_cg.course_id = new_ready_course_id
                new_cg.video_id = video_map.get(cg.video_id, None)
                new_cg.additional_page_id = additionalpage_map.get(cg.additional_page_id, None)
                new_cg.file_id = file_map.get(cg.file_id, None)
                new_cg.exam_id = exam_map.get(cg.exam_id, None)
                new_cg.save()
        
        
def all_entities_null(additionalpage_map, file_map, video_map, exam_map, cg):
    
    if not (video_map.get(cg.video_id, False) 
         or additionalpage_map.get(cg.additional_page_id, False) 
         or file_map.get(cg.file_id, False) 
         or exam_map.get(cg.exam_id, False)):
        
        return True
    else:
        return False
########NEW FILE########
__FILENAME__ = course_materials
from datetime import datetime

from django.db.models import Count

from c2g.models import *


def get_course_materials(common_page_data, get_video_content=False, get_pset_content=False, get_additional_page_content = False, get_file_content=False, get_exam_content=False, exam_types=[], SECTION=None):
    COURSE  = common_page_data['course']
    REQUEST = common_page_data['request']
    USER    = REQUEST.user
    section_structures = []

    if not USER.is_authenticated():
        return section_structures

    # Collect initial data
    pages  = []
    files  = []
    exams  = []
    videos = []
    if get_additional_page_content:
        pages = AdditionalPage.objects.getBySection(section=SECTION) if SECTION else AdditionalPage.objects.getByCourse(course=COURSE)
    if get_file_content:
        files = File.objects.getBySection(section=SECTION) if SECTION else File.objects.getByCourse(course=COURSE)
    if get_exam_content:
        exams = Exam.objects.getBySection(section=SECTION) if SECTION else Exam.objects.getByCourse(course=COURSE)
    if get_video_content:
        videos = Video.objects.getBySection(section=SECTION) if SECTION else Video.objects.getByCourse(course=COURSE)

    sections = [SECTION] if SECTION else ContentSection.objects.getByCourse(course=COURSE)

    # Collect contentgroup info for this course
    parentchilds, childparents = collect_contentgroup_data(COURSE, USER)

    # Do other pre-filtering before content section iteration
    if get_video_content and videos:
        # TODO: Cache these?
        video_list = [video.id for video in videos]
        videoToExs = VideoToExercise.objects.values('video').filter(video__in=video_list, is_deleted=0).annotate(dcount=Count('video'))
        videoToExs = dict([d.values() for d in videoToExs.values('video_id', 'dcount')]) # transform into dictionary keyed on video id
        if common_page_data['course_mode'] == 'ready':
            video_recs = VideoActivity.objects.filter(course=COURSE, student=USER, video__in=video_list)
            video_recs = dict([(d['video_id'], d) for d in video_recs.values()]) # transform into dictionary keyed on video id
            video_downloads = VideoDownload.objects.values('video').filter(course=COURSE, student=USER, video__in=video_list).annotate(dcount=Count('video'))
            video_downloads = dict([d.values() for d in video_downloads.values('video_id', 'dcount')]) # transform into dictionary keyed on video id

    user_records = None
    if get_exam_content and exams:
        if exam_types:
            exams = exams.filter(exam_type__in=exam_types)
        # TODO: it would be nice to do this as a select by section (with all sections if SECTION is empty) and rearrange as a dictionary keyed on section id, then dicts by exam id
        user_records = ExamRecord.objects.filter(course=COURSE, student=USER, complete=True).order_by('time_created')

    # Define a number of useful helper functions that curry this scope
    def get_item_by_type(obj, label, preModeSensitive=lambda d:d,
                                     postReadyModeWithChildren=lambda d:d,
                                     postModeSensitiveBeforeAppend=lambda d:d,):
        # TODO: move 'self' targeting down into templates, remove label: obj
        item = {'type':label, 'self': obj, label: obj, 'index': obj.index, 'is_child': False,}
        item = preModeSensitive(item)
        if common_page_data['course_mode'] == 'ready':
            key = (label, obj.id)
            item = postReadyModeWithChildren(item) 
        else:
            key = (label, obj.image.id)
            item['visible_status'] = get_live_datetime_for(obj)
        parent = childparents.get(key, False)
        if parent:
            item.update({'is_child': True, 'parent': parent, 'children': []})
        else:
            item.update({'is_child': False, 'parent': None, 'children': parentchilds.get(key, {}).get('group_children', [])})
        item = postModeSensitiveBeforeAppend(item)
        return item

    def _video_helper_calc_completion(item):
        # Calculate video completion percentage and attach record
        download_count = video_downloads.get(video.id, 0)
        if download_count > 0:
            item['completed_percent'] = 100.0
        else:
            video_rec = video_recs.get(video.id, False)
            if video_rec:
                item['video_rec'] = video_rec
                item['completed_percent'] = 100.0 * max(video_rec['start_seconds'], video_rec['max_end_seconds'])/ video.duration if video.duration else 0
        return item

    def _video_helper_add_numQuestions(item):
        # Attach number of exam questions to video
        item['numQuestions'] = videoToExs.get(video.id, 0)
        return item

    def _exam_helper_get_set_score(item):
        try:
            scoreobj = ExamScore.objects.filter(course=COURSE, exam=exam, student=USER).latest('time_created')
            has_score = True
            score = scoreobj.score
        except ExamScore.DoesNotExist:
            has_score = False
            score = 0
        item['has_score'] = has_score
        item['score'] = score
        return item

    # Do content section iteration. TODO: turn this into iteration over a dict by section id
    for section in sections:
        section_dict = {'section':section, 'items':[]}

        if get_additional_page_content:
            for page in pages:
                if page.section_id == section.id:
                    item = get_item_by_type(page, 'additional_page')
                    if item:
                        section_dict['items'].append(item)

        if get_file_content:
            for file in files:
                if file.section_id == section.id:
                    item = get_item_by_type(file, 'file')
                    if item:
                        section_dict['items'].append(item)

        if get_video_content:
            for video in videos:
                if video.section_id == section.id:
                    item = get_item_by_type(video, 'video', postReadyModeWithChildren=_video_helper_calc_completion, 
                                                            postModeSensitiveBeforeAppend=_video_helper_add_numQuestions)
                    if item:
                        section_dict['items'].append(item)

        if get_exam_content:
            if SECTION:
                user_records = ExamRecord.objects.filter(course=COURSE, exam__section=section, student=USER, complete=True).order_by('time_created')
            def _exam_helper_filter_store_records(item):
                item['records'] = user_records.filter(exam=exam) #might change this to a python list filter if want to trade db access for memory
                return item
            for exam in exams:
                if exam.section_id == section.id:
                    item = get_item_by_type(exam, 'exam', preModeSensitive=_exam_helper_get_set_score, 
                                                          postReadyModeWithChildren=_exam_helper_filter_store_records)
                    if item:
                        section_dict['items'].append(item)

        if common_page_data['course_mode'] == 'draft' or len(section_dict['items']) > 0:
            section_dict['items'] = sorted(section_dict['items'], key=lambda k: k['index'])
            section_structures.append(section_dict)

    return section_structures

def collect_contentgroup_data(course, user=None):
    """Memoize portions of the ContentGroup table in a convenient form."""
    def type_sorter(ci1, ci2):
        ci1_type = ci1['type']
        ci2_type = ci2['type']
        ci1_title = ci1['title']
        ci2_title = ci2['title']
        if ci1_type < ci2_type:
            return -1
        elif ci1_type > ci2_type:
            return +1
        else:
            # equal types, go by title
            if ci1_title < ci2_title:
                return -1
            elif ci1_title > ci2_title:
                return +1
            else:
                return 0

    def name_sorter(ci1, ci2):
        ci1_name = ci1['name']
        ci2_name = ci2['name']
        ci1_ext = ci1['ext']
        ci2_ext = ci2['ext']
        if ci1_name and ci2_name:
            if ci1_ext < ci2_ext:
                return -1
            elif ci1_ext > ci2_ext:
                return +1
            else:
                # equal extensions, go by filename
                if ci1_name < ci2_name:
                    return -1
                elif ci1_name > ci2_name:
                    return +1
                else:
                    return 0
        else:
            return 0

    parent2child = {}
    child2parent = {}
    if course.mode == 'draft':
        course = course.image
    for cgroup_parent_ref in ContentGroup.objects.getByCourseAndLevel(course, 1):
        info = {'group_children': {}}
        parent_tag = cgroup_parent_ref.get_content_type()
        parent_target = getattr(cgroup_parent_ref, parent_tag)
        info['content_group_id']= cgroup_parent_ref.group_id
        info['group_parent_tag']= parent_tag
        info['group_parent_ref']= parent_target
        info['group_parent_id'] = parent_target.id
        parent_key_tuple = (info['group_parent_tag'], info['group_parent_id'])
        # Filter deleted parents and all of their children (they shouldn't have any)
        # Leave non-live parents displayed, because parent iteration is a matter for draft mode
        if parent_target.is_deleted == 1:
            continue
        for cgo in ContentGroup.objects.filter(group_id=cgroup_parent_ref.group_id, level=2):
            cttag = cgo.get_content_type()
            target = getattr(cgo, cttag)
            # Filter deleted children without worrying about who their parent is
            if target.is_deleted == 1:
                continue 
            child2parent[(cttag, target.id)] = parent_target
            # Filter non-live mode children from parent2child because it's child list is only iterated in ready mode
            if not target.is_live():
                continue
            if not cttag or not target:
                continue
            display = cgo.display_style or 'list'
            augmented_data = child_data_to_dict(cgo, cttag, target, user)
            if info['group_children'].has_key(display):
                info['group_children'][display].append(augmented_data)
            else:
                info['group_children'][display] = [augmented_data]
        # Sort the children within display type by type, then name
        for display in info['group_children']:
            info['group_children'][display] = sorted(sorted(info['group_children'][display], type_sorter), name_sorter)
        parent2child[parent_key_tuple] = info 
    return (parent2child, child2parent)

def child_data_to_dict(groupobj, cgtype, ref, user=None):
    # TODO: what we're doing here is abominable and can be considerably cleaned
    #       or removed altogether after the templates get tidied up.
    class NoFile():
        name = ''
    tmp_f  = getattr(ref, 'file', NoFile())
    name   = tmp_f.name.split('/').pop() if tmp_f else ''
    ext    = name.split('.').pop().lower() if tmp_f else ''
    #              target             target        this entry    target ref  
    child_data = {'type': cgtype, 'id': ref.id, 'self': groupobj, 'ref': ref, 'display': groupobj.display_style, 'ext': ext,
                  'name': name, 'title': ref.title, 'url': ref.get_url(), 'index': ref.index, 'children': None, }
    child_data[cgtype] = ref      # TODO: set 'exam':exam - remove after making templates use 'ref'
    if cgtype == "exam" and user: # TODO: per-type special cases belong somewhere else?
        child_data['records'] = ExamRecord.objects.filter(course=ref.course, student=user, complete=True, exam=ref)
    return child_data
    
def get_live_datetime_for(thing):
    """Return the appropriate .live_datetime string for thing"""
    prod_thing = getattr(thing, 'image', None)
    if prod_thing == None:
        return "<span style='color:#Ac7000;'>Error: No Live Mode Object</span>"
    if not prod_thing.live_datetime:
        return "<span style='color:#A00000;'>Not Live</span>"
    elif prod_thing.live_datetime > datetime.now():
        return prod_thing.live_datetime.strftime("<span style='color:#A07000;'>Live %F at %H:%M</span>" )
    else:
        return "<span style='color:green;'>Live</span>"


########NEW FILE########
__FILENAME__ = forms
from django import forms

class EmailForm(forms.Form):
    to = forms.ChoiceField(label="Send to",
                           choices = (('myself', 'Myself.  (Retains email inputs below after sending)'),
                                      ('staff', 'All Course Staff'),
                                      ('students', 'All Students'),
                                      ('all', 'Students and Staff'),),
                           widget = forms.Select(attrs={'class':'span5'}),
                           )
    subject =  forms.CharField(max_length=100, label="Subject", widget=forms.TextInput(attrs={'class':'span12'}))

    message = forms.CharField(label="Message", widget=forms.Textarea(attrs={'class':'span12 tinymce', 'rows':20}))
    


    
########NEW FILE########
__FILENAME__ = import_email_csv
from django.core.management.base import BaseCommand, CommandError
from c2g.models import MailingList, EmailAddr
from django.contrib.auth.models import User, Group
from django.db.utils import IntegrityError
import csv
from django.core.validators import validate_email, ValidationError
from _mysql_exceptions import Warning

class Command(BaseCommand):
    args = "csv_file_name list_name"
    help = """ 
        Takes the contents of csv file in csv_file_name and creates a new MailingList with EmailAddr entries
        from the csv file.  csv format should be:
        
        name1, email address1
        name2, email address2
        
        If MailingList with list_name already exists, the command exits.  If an email address in the csv already
        exists in an EmailAddr entry, a duplicate entry will be created.
        """
    
    def handle(self, *args, **options):
        if len(args) < 2 or (not args[0]) or (not args[1]):
            return "Not enough arguments!\n"
        filename=args[0]
        listname=args[1]
        if MailingList.objects.filter(name=listname).exists():
           return "A list named %s already exists!\n" % listname
        list = MailingList(name=listname)
        list.save()
        with open(filename, 'rb') as f:
            reader = csv.reader(f)
            num_imported = 0
            for row in reader:
                if len(row) >=2:
                    email = row[1].strip()
                    try: #add existing addr
                        validate_email(email)
                        try:
                            addr = EmailAddr(name=row[0].strip(),addr=email)
                            addr.save()
                            list.members.add(addr)
                            list.save()
                            num_imported = num_imported+1
                        except Warning:
                            pass
                    except ValidationError:
                        pass
        return "Successfully added %d entries to mailing list %s\n" % (num_imported , listname)
########NEW FILE########
__FILENAME__ = models
from django.db import models

# Create your models here.

########NEW FILE########
__FILENAME__ = tasks
from django.core.mail import EmailMultiAlternatives, get_connection
from subprocess import Popen, PIPE, STDOUT
from celery import task
from time import sleep
from django.conf import settings
from django.template.loader import render_to_string
from django.contrib.auth.models import User
from c2g.models import Course, CourseEmail, ListEmail
from django.core.urlresolvers import reverse
from django.conf import settings
from django.contrib.sites.models import Site
from collections import deque
from smtplib import SMTPException, SMTPServerDisconnected, SMTPDataError, SMTPConnectError
from celery.task import current
from django.contrib.sites.models import Site

import random
import math
import time
import re
import logging
logger = logging.getLogger(__name__)

EMAILS_PER_WORKER=getattr(settings, 'EMAILS_PER_WORKER', 10)





@task()
def delegate_list_emails(hash_for_msg):
    '''
    Delegates the celery tasks to send an email given a msg_hash
    '''
    email_from_db=ListEmail.objects.get(hash=hash_for_msg)
    recipient_qset = email_from_db.to_list.members.all()
    total_num_emails = recipient_qset.count()
    num_workers=int(math.ceil(float(total_num_emails)/float(EMAILS_PER_WORKER)))
    recipient_list = map(lambda r: (r.name, r.addr, r.optout, r.optout_code), list(recipient_qset))
            
    chunk=int(math.ceil(float(total_num_emails)/float(num_workers)))
            
    for i in range(num_workers):
        to_list=recipient_list[i*chunk:i*chunk+chunk]
        email_list.delay(hash_for_msg, to_list, False)
            
    return num_workers




@task(default_retry_delay=15, max_retries=5)
def email_list(msg_hash, addr_list, throttle=False):
    '''Sends ListEmail identifed by msg_hash to all recipients in addr_list
       Sends multipart
    '''
    
    email_from_db=ListEmail.objects.get(hash=msg_hash)
    if (not email_from_db.from_name) or (not email_from_db.from_addr):
        return 0
    from_addr = email_from_db.from_name + "<%s>" % email_from_db.from_addr

    site = Site.objects.get(id=1) # Counts on there being one site in the db.

    try:
        connection = get_connection() #get mail connection from settings
        connection.open()
        num_sent=0
        num_error=0
        
        rg = random.SystemRandom(random.randint(0,100000))

        while addr_list:
            (name, email, optout, code) = addr_list[-1]
            if optout:
                logger.info('Email with hash ' + msg_hash + ' NOT sent b/c OPTOUT ' + email)

            else:
                html_msg = render_to_string('email/email_marketing.html',
                            {'message':email_from_db.html_message,
                             'optout_code':code,
                             'domain':site.domain
                            })
                p = Popen(['lynx','-stdin','-display_charset=UTF-8','-assume_charset=UTF-8','-dump'], stdin=PIPE, stdout=PIPE)
                (plaintext, err_from_stderr) = p.communicate(input=html_msg.encode('utf-8')) #use lynx to get plaintext
                if err_from_stderr:
                    logger.info(err_from_stderr)
        
                to_string = name + " <%s>" % email
                email_msg = EmailMultiAlternatives(email_from_db.subject, plaintext, from_addr, [to_string], connection=connection)
                email_msg.attach_alternative(html_msg,'text/html')
            
                if throttle or current.request.retries > 0: #throttle if we tried a few times and got the rate limiter
                    time.sleep(0.2)
                
                try: #nested try except blocks.
                    #CHAOS!
                    #if rg.randint(0,25) == 1:
                    #    logger.info('RAISE 400!')
                    #    raise SMTPDataError(400,'Randomly generated exception that should be retried.')
                    #if rg.randint(0,25) == 1:
                    #    logger.info('RAISE 500!')
                    #    raise SMTPDataError(500,'Randomly generated exception that should NOT be retried.')
                    connection.send_messages([email_msg])
                    logger.info('Email with hash ' + msg_hash + ' sent to ' + email)
                    num_sent +=1

                except SMTPDataError as exc:
                    #code map so far
                    #554 : Message rejected: Address blacklisted
                    #554 : Transaction failed: Missing final @domain
                    #454 : Throttling failure: Maximum sending rate exceeded
                    #According to SMTP spec, we'll retry error codes in the 4xx range.  5xx range indicates hard failure
                    if exc.smtp_code >= 400 and exc.smtp_code < 500:
                        raise exc # this will cause the outer handler to catch the exception and retry the entire task
                    else:
                        #this will fall through and not retry the message, since it will be popped
                        logger.warn('Email with hash ' + msg_hash + ' not delivered to ' + email + ' due to error: ' + exc.smtp_error)
                        num_error += 1
                        connection.open() #reopen connection, in case error closed it


            addr_list.pop()

        connection.close()
        return "Sent %d, Fail %d" % (num_sent, num_error)

    except (SMTPDataError, SMTPConnectError, SMTPServerDisconnected) as exc:
        #error caught here cause the email to be retried.  The entire task is actually retried without popping the list
        raise email_list.retry(arg=[msg_hash, addr_list, current.request.retries>0], exc=exc, countdown=(2 ** current.request.retries)*15)


@task()
def delegate_emails(hash_for_msg, total_num_emails, course_title, course_handle, course_url, query ):
    '''Delegates emails by spinning up appropriate number of sender workers
       Tries to minimize DB accesses performed by each worker.
       Especially passing query forming a queryset, which is ok practice according
       to https://docs.djangoproject.com/en/dev/ref/models/querysets/#pickling-querysets
    '''
    num_workers=int(math.ceil(float(total_num_emails)/float(EMAILS_PER_WORKER)))
    recipient_qset = User.objects.all() #put recipients in a QuerySet
    recipient_qset.query = query #again, this is supported practice for reconstructing a queryset from a pickle,
    recipient_qset = recipient_qset.filter(userprofile__email_me=True) #respect student email optout
    recipient_qset.only('email','first_name','last_name')
    recipient_list = map(lambda r: (r.first_name, r.last_name, r.email), list(recipient_qset))
    
    chunk=int(math.ceil(float(total_num_emails)/float(num_workers)))

    for i in range(num_workers):
        to_list=recipient_list[i*chunk:i*chunk+chunk]
        course_email_with_celery.delay(hash_for_msg, to_list, False, course_title, course_handle, course_url)
    return num_workers



@task(default_retry_delay=15, max_retries=5)
def course_email_with_celery(hash_for_msg, to_list,  throttle=False, course_title='', course_handle='', course_url=''):
    """
        Takes a subject and an html formatted email and sends it from sender to all addresses
        in the to_list, with each recipient being the only "to".  Emails are sent multipart, in both
        plain text and html.  Send using celery task.
        
        For work division, this task can be called with num_workers and worker_id, where num_workers is the
        total number of workers and worker_id is the id of this worker, 
        out of a set with ids 0 to num_workers-1, in homage to the fact that python lists are zero based.
    """
    msg = CourseEmail.objects.get(hash=hash_for_msg)
    
    p = Popen(['lynx','-stdin','-display_charset=UTF-8','-assume_charset=UTF-8','-dump'], stdin=PIPE, stdout=PIPE)
    (plaintext, err_from_stderr) = p.communicate(input=msg.html_message.encode('utf-8')) #use lynx to get plaintext

    if settings.SITE_NAME_SHORT == "Stanford":
        staff_email = 'noreply@class2go.stanford.edu'
        if course_handle:
            staff_email = re.sub(r'\--', r'-',course_handle) + '-staff@class2go.stanford.edu'
    else:
        staff_email = settings.SERVER_EMAIL

    course_title_no_quotes = re.sub(r'"', '', course_title) # strip out all quotes
    from_addr = '"%s" Course Staff <%s>' % (course_title_no_quotes, staff_email) #make certain that we quote the name part of the email address

    if err_from_stderr:
        logger.info(err_from_stderr)

    try:

        connection = get_connection() #get mail connection from settings
        connection.open()
        num_sent=0
        num_error=0

        rg = random.SystemRandom(random.randint(0,100000))


        while to_list:
            (first_name, last_name, email) = to_list[-1]
            html_footer = render_to_string('email/email_footer.html',
                                           {'course_title':course_title,
                                           'url':course_url,
                                           'first_name':first_name,
                                           'last_name':last_name,
                                           'email':email,
                                           'site_title':settings.SITE_TITLE,
                                           'site_url':settings.SITE_URL,
                                           })
            
            plain_footer = render_to_string('email/email_footer.txt',
                                            {'course_title':course_title,
                                            'url':course_url,
                                            'first_name':first_name,
                                            'last_name':last_name,
                                            'email':email,
                                            'site_title':settings.SITE_TITLE,
                                            'site_url':settings.SITE_URL,
                                            })
            email_msg = EmailMultiAlternatives(msg.subject, plaintext+plain_footer.encode('utf-8'), from_addr, [email], connection=connection)
            email_msg.attach_alternative(msg.html_message+html_footer.encode('utf-8'),'text/html')
            
            if throttle or current.request.retries > 0: #throttle if we tried a few times and got the rate limiter
                time.sleep(0.2)

            
            try: #nested try except blocks.
                #CHAOS!
                #if rg.randint(0,25) == 1:
                #    logger.info('RAISE 400!')
                #    raise SMTPDataError(400,'Randomly generated exception that should be retried.')
                #if rg.randint(0,25) == 1:
                #    logger.info('RAISE 500!')
                #    raise SMTPDataError(500,'Randomly generated exception that should NOT be retried.')

                connection.send_messages([email_msg])
                logger.info('Email with hash ' + hash_for_msg + ' sent to ' + email)
                num_sent +=1

            except SMTPDataError as exc:
                #code map so far
                #554 : Message rejected: Address blacklisted
                #554 : Transaction failed: Missing final @domain
                #454 : Throttling failure: Maximum sending rate exceeded
                #According to SMTP spec, we'll retry error codes in the 4xx range.  5xx range indicates hard failure
                if exc.smtp_code >= 400 and exc.smtp_code < 500:
                    raise exc # this will cause the outer handler to catch the exception and retry the entire task
                else:
                    #this will fall through and not retry the message, since it will be popped
                    logger.warn('Email with hash ' + hash_for_msg + ' not delivered to ' + email + ' due to error: ' + exc.smtp_error)
                    num_error += 1
                    connection.open() #reopen connection, in case.

            
            to_list.pop()
        
        connection.close()
        return "Sent %d, Fail %d" % (num_sent, num_error)

    except (SMTPDataError, SMTPConnectError, SMTPServerDisconnected) as exc:
        raise course_email_with_celery.retry(arg=[hash_for_msg, to_list, current.request.retries>0, course_title, course_handle,
                                                  course_url], exc=exc, countdown=(2 ** current.request.retries)*15)


@task()
def email_with_celery(subject,html_msg,sender,recipient_email_list,course_title='',course_url=''):
    """
    Takes a subject and an html formatted email and sends it from sender to all addresses
    in the to_list, with each recipient being the only "to".  Emails are sent multipart, in both
    plain text and html.  Send using celery task
    """

    p = Popen(['lynx','-stdin','-display_charset=UTF-8','-assume_charset=UTF-8','-dump'], stdin=PIPE, stdout=PIPE)
    (plaintext, err_from_stderr) = p.communicate(input=html_msg.encode('utf-8')) #use lynx to get plaintext
    
    connection = get_connection() #get connection from settings
    connection.open()
    num_sent=0
    for to_email in recipient_email_list:
        users = User.objects.filter(email=to_email)
        for user in users:
            html_footer = render_to_string('email/email_footer.html',
                                        {'course_title':course_title,
                                        'url':course_url,
                                        'first_name':user.first_name,
                                        'last_name':user.last_name,
                                        'email':user.email,
                                        'site_title':settings.SITE_TITLE,
                                        'site_url':settings.SITE_URL,
                                        })
    
            plain_footer = render_to_string('email/email_footer.txt',
                                        {'course_title':course_title,
                                        'url':course_url,
                                        'first_name':user.first_name,
                                        'last_name':user.last_name,
                                        'email':user.email,
                                        'site_title':settings.SITE_TITLE,
                                        'site_url':settings.SITE_URL,
                                        })
        
            msg = EmailMultiAlternatives(msg.subject, plaintext+plain_footer.encode('utf-8'), from_addr, [email], connection=connection)
            msg.attach_alternative(html_msg+html_footer.encode('utf-8'),'text/html')
            connection.send_messages([msg])
            num_sent += 1
    connection.close()
    return num_sent



########NEW FILE########
__FILENAME__ = tests
"""
This file demonstrates writing tests using the unittest module. These will pass
when you run "manage.py test".

Replace this with more appropriate tests for your application.
"""

#from django.test import TestCase
#
#
#class SimpleTest(TestCase):
#    def test_basic_addition(self):
#        """
#        Tests that 1 + 1 always equals 2.
#        """
#        self.assertEqual(1 + 1, 2)


########NEW FILE########
__FILENAME__ = views
# Create your views here.
from courses.email_members.forms import EmailForm
from django.template import RequestContext
from django.shortcuts import render_to_response
from courses.actions import auth_is_course_admin_view_wrapper
from django.views.decorators.debug import sensitive_post_parameters
from django.views.decorators.csrf import csrf_protect
from django.contrib.auth.models import User
from django.core.urlresolvers import reverse
from django.core.mail import send_mail, send_mass_mail, EmailMultiAlternatives, get_connection
from c2g.models import CourseEmail, EmailAddr
import courses.email_members.tasks
import datetime
from hashlib import md5


def optout(request,code):
    """Opts mailing list members out of email we sent"""
    email_list=[]
    addr_qset=EmailAddr.objects.filter(optout_code=code)
    for addr in addr_qset.iterator():
        addr.optout=True
        addr.save()
        email_list.append(addr.addr)
    return render_to_response('email/optout.html',
                          {'email_list': email_list,},
                          context_instance=RequestContext(request))
    
@sensitive_post_parameters()
@csrf_protect
@auth_is_course_admin_view_wrapper
def email_members(request, course_prefix, course_suffix):
    """Display the email form and handles email actions"""
    error_msg=""
    success_msg=""
    form = EmailForm()
    if request.session.get('email_subject') or request.session.get('email_message'):
        form = EmailForm({'subject': request.session['email_subject'], 'message': request.session['email_message']})
        del request.session['email_subject']
        del request.session['email_message']
    if request.method == "POST":
        form = EmailForm(data=request.POST)
        if form.is_valid():
            email = CourseEmail(course=request.common_page_data['course'],
                                sender=request.user,
                                to=form.cleaned_data['to'],
                                subject=form.cleaned_data['subject'],
                                html_message=form.cleaned_data['message'],
                                hash=md5((form.cleaned_data['message']+form.cleaned_data['subject']+datetime.datetime.isoformat(datetime.datetime.now())).encode('utf-8')).hexdigest())
            email.save()
            
            recipient_qset = User.objects.none() #get recipients in a QuerySet
            if form.cleaned_data['to'] == "all" :
                recipient_qset = request.common_page_data['course'].get_all_members()
            elif form.cleaned_data['to'] == "students" :
                recipient_qset = request.common_page_data['course'].get_all_students()
            elif form.cleaned_data['to'] == "staff" :
                recipient_qset = request.common_page_data['course'].get_all_course_admins()
            elif form.cleaned_data['to'] == "myself":
                recipient_qset = User.objects.filter(id=request.user.id)
            courses.email_members.tasks.delegate_emails.delay(email.hash,
                                                              recipient_qset.count(),
                                                              request.common_page_data['course'].title,
                                                              request.common_page_data['course'].handle,
                                                              request.build_absolute_uri(reverse('courses.views.main', args=[course_prefix, course_suffix])),
                                                              recipient_qset.query
                                                             )
            success_msg = "Your email was successfully queued for sending.  Please note that for large public classes (~10k), it may take 1-2 hours to send all emails."
            
        else:
            error_msg = "Please fix the errors below:"
    
    context = RequestContext(request)
    return render_to_response('email/email.html',
                              {'form': form,
                              'error_msg': error_msg,
                              'success_msg': success_msg,
                              'course': request.common_page_data['course'],
                              'common_page_data': request.common_page_data},
                              context_instance=context)

@sensitive_post_parameters()
@csrf_protect
@auth_is_course_admin_view_wrapper
def email_members_old(request, course_prefix, course_suffix):
    """
        Displays the email form and handles email actions
        Right now this is blocking and does not do any batching.
        Will have to make it better
        """
    error_msg=""
    success_msg=""
    form = EmailForm()
    if request.method == "POST":
        form = EmailForm(data=request.POST)
        if form.is_valid():
            sender = request.common_page_data['course'].title + ' Staff <class2go-noreply@cs.stanford.edu>'
            
            recipient_qset = User.objects.none() #get recipients in a QuerySet
            
            if form.cleaned_data['to'] == "all" :
                recipient_qset = request.common_page_data['course'].get_all_members()
            elif form.cleaned_data['to'] == "students" :
                recipient_qset = request.common_page_data['course'].get_all_students()
            elif form.cleaned_data['to'] == "staff" :
                recipient_qset = request.common_page_data['course'].get_all_course_admins()
            elif form.cleaned_data['to'] == "myself":
                recipient_qset = User.objects.filter(id=request.user.id)
            #pdb.set_trace()
            courses.email_members.tasks.email_with_celery.delay(
                                                                form.cleaned_data['subject'],
                                                                form.cleaned_data['message'],
                                                                sender,
                                                                recipient_qset.values_list('email',flat=True),
                                                                course_title=request.common_page_data['course'].title,
                                                                course_url=request.build_absolute_uri(reverse('courses.views.main', args=[course_prefix, course_suffix])))
            success_msg = "Your email was successfully queued for sending"
        #form = EmailForm()
        
        else:
            error_msg = "Please fix the errors below:"
    
    context = RequestContext(request)
    return render_to_response('email/email.html',
                              {'form': form,
                              'error_msg': error_msg,
                              'success_msg': success_msg,
                              'course': request.common_page_data['course'],
                              'common_page_data': request.common_page_data},
                              context_instance=context)


########NEW FILE########
__FILENAME__ = actions
from django.shortcuts import redirect

from courses.actions import always_switch_mode, auth_is_course_admin_view_wrapper
from courses.exams.forms import *


@auth_is_course_admin_view_wrapper
@always_switch_mode
def delete_exam(request):
    exam = Exam.objects.get(id=request.POST.get("exam_id"))
    exam.delete()
    exam.image.delete()
    return redirect(request.META['HTTP_REFERER'])

########NEW FILE########
__FILENAME__ = aggregator
from c2g.models import ExamRecord, Exam, ExamScore, ExamRecordScore, Course, CourseStudentScore, ContentGroup
from django.db.models import Q

import math
import collections
import re
from copy import deepcopy
import logging

logger = logging.getLogger(__name__)


class ScoreAggregator():
    """ This class aggregates student scores on all exams in a course, primarily
        for the purpose of course grade assignment.
    """
    #These are the python names a written formula is allowed to reference.
    #Inspiration from http://lybniz2.sourceforge.net/safeeval.html
    #Note that anything in the math package is referenceable with the math package prefix
    #Hopefully all of these are pure functions with no side-effects, but I don't
    #have a formal proof using operational semantics :-P
    
    var_re = re.compile(r'{{\s*[-\w]+\s*}}', re.UNICODE)
    
    default_formula_obj = {'str':'', 'var_patterns':[], 'vars':[], 'max_points':0}
    
    safe_dict = {'math':math, 'abs':abs, 'divmod':divmod, 'len':len, 'max':max, 'min':min,
        'pow':pow, 'range':range, 'sum':sum, 'map':map, 'filter':filter, 'reduce':reduce, 'list':list}
    
    reserved_names = ['__student']

    def __init__(self, course, formulas={}):
        """
            This function instantiates the aggregator with a course <course> and 
            a dict of where keys are tags and values are formulas, as defined below.
            <course> MUST be a READY-MODE course.
            """
        self.course = course
        self.formulas = collections.defaultdict(lambda: self.default_formula_obj) #initialize instance variable
        for tag, formula in formulas.iteritems():
            self.add_formula(tag, formula)

    def add_formula(self, tag, formula):
        """
            <formula> is a string written in a domain-specific language built on
            django templating and python.  Basically, formula should be a python
            expression that evaluates to a number, with function names in python syntax
            e.g. max(), min(), math.floor().  A variable namespace corresponding to
            student grades on individual assessments is also provided via a django
            template language syntax.  For example, {{exam1}} refers to the student's
            ExamScore on the Exam with slug==exam1.  So an example formula would be
            'max({{exam1a}} ,{{exam1b}})*0.5 + {{exam2}}*0.5'
        """
        self.formulas[tag] = deepcopy(self.default_formula_obj)
        self.formulas[tag]['str'] = formula
        #get a list variables used in the formula, so we can look them up
        vars_patterns = self.var_re.findall(formula)
        vars = map(lambda li: li[2:-2].strip(), vars_patterns)  #yeah yeah, hardcoding.  django templates does it too
        self.formulas[tag]['vars_patterns'] = vars_patterns
        self.formulas[tag]['vars'] = vars
        self.formulas[tag]['max_points'] = self._fill_max_points(tag)
        
        #now we try out the formula_vars to make sure they're all Exam slugs in the course
        for var in vars:
            try:
                Exam.objects.get(course=self.course, slug=var)
            except Exam.DoesNotExist:
                if var in self.reserved_names:
                    continue
                else:
                    raise AggregatorFormulaVariableError("{{%s}} is not an assessment item in Course %s" % (var, course))
        
        #now try out the formula with all variables filled in a 0's, to see if we throw any errors
        #score_dict will become the template context
        #set entire context to return 0
        score_dict = collections.defaultdict(lambda:0)
        #do reserved names
        score_dict = self.fill_reserved_word_context(score_dict)
        
        formula_filled = self.fill_formula(tag, score_dict)
        print "%s: %s" % (tag, formula)

        #if there's a problem, this eval will raise an exception that will get passed on (no try...except here)
        self.eval_helper(formula_filled)

        

    def __unicode__(self):
        return "Aggregator formulas for %s with tags: %s" % (unicode(self.course), ", ".join(self.formulas.keys()))


    def fill_reserved_word_context(self, context, student_name="student"):
        context['__student'] = '"""%s"""' % student_name
        return context

    def max_points(self, tag):
        #print("%s: %1.2f" % (tag, self.formulas[tag]['max_points']))
        return self.formulas[tag]['max_points']

    def _fill_max_points(self, tag):
        exams = Exam.objects.filter(course=self.course, is_deleted=False, slug__in=self.formulas[tag]['vars'])
        points_dict = collections.defaultdict(lambda:0)
        for exam in exams:
            points_dict[exam.slug] = exam.get_total_score()
        #do reserved names
        points_dict = self.fill_reserved_word_context(points_dict)

        formula = self.fill_formula(tag, points_dict)
        pts = self.eval_helper(formula)
        print("%s: MAX-POINTS: %1.2f" % (tag,pts))
        return pts

    def fill_formula(self, tag, context):
        """Fill out the formula pattern with context dict"""
        formula = self.formulas[tag]['str']
        for var in self.formulas[tag]['vars']:
            patt = r'{{\s*%s\s*}}' % re.escape(var)
            formula = re.sub(patt, str(context[var]), formula)
        return formula
    
    def aggregate(self, student, tags=None, writeDB=False):
        """
            This function aggregates the <student>'s scores on assessments in self.course
            according to self.formulas using the functions in tags. (course and formulas are set upon instantiation).
            If kwarg <writeDB> string is true, will write each function result to database table CourseStudentScore labed with
            appropriate tag.
            Will use all formulas by default, if no tags kwarg is specified.
        """
        context = {}
        scores = ExamScore.objects.values('exam__slug','score').filter(course=self.course, student=student)
        score_dict = collections.defaultdict(lambda:0)
        for s in scores:
            if s['score'] > score_dict[s['exam__slug']]:
                score_dict[s['exam__slug']] = s['score']

        #do reserved names
        score_dict = self.fill_reserved_word_context(score_dict, student_name=student.username)

        if tags is None:
            tags = self.formulas.keys()

        for tag in tags:
            if tag not in self.formulas:
                logger.warning("Tag %s was not found in the Aggregator's set of functions" % tag)
                continue
            
            #score_dict can now be used as a Context to populate formula as an arithmetic expression
            #without any variables
            formula = self.fill_formula(tag, score_dict)
            #print("%s: %s" % (tag, formula))
            
            #now we can do our restricted eval of our arithmetic expression
            ag_score = self.eval_helper(formula)
            #print("(%s,%s,%1.2f)" % (student.username, tag, ag_score))
            #now write to the DB if writeDB
            if writeDB:
                data, created = CourseStudentScore.objects.get_or_create(course=self.course, student=student, tag=tag)
                data.score = ag_score
                data.total = self.max_points(tag)
                data.save()
                
        return ag_score

    def aggregate_all(self, tags=None, writeDB=False):
        """
            Does grade aggregation for all students in the course, using formulas specified in tags.
            If kwarg writeDB is specified, will write each formula result to database table CourseStudentScore labeled with appropriate
            tag.
            Will use all formulas by default, if no tags kwarg is specified.
        """
        students = self.course.get_all_students()
        processed = 0 
        for student in students:
            self.aggregate(student, tags=tags, writeDB=writeDB)
            processed += 1
        
            if processed % 100 == 0:
                print(processed)
                
    def eval_helper(self, formula):
        """ This helper function does a safe eval with restricted local environment and also wraps a bunch of
            try...excepts to catch and re-raise appropriate errors
        """
        try:
            return eval(formula, {"__builtins__":None}, self.safe_dict)
        except SyntaxError as e:
            raise AggregatorFormulaError("Your scoring formula has an syntax error in\n filename: %s line: %d offset: %d\n%s" \
                                 % (e.filename, e.lineno, e.offset, e.text))
        except Exception as e:
            raise AggregatorFormulaError(unicode(e))

    #########################################################################################################
    ###                                                                                                   ###
    ### BELOW HERE:  A selection of classmethods that auto-generate commonly-used formulas over a course. ###
    ###                                                                                                   ###
    #########################################################################################################

    @classmethod
    def generate_default_quiz_formula(selfclass, course):
        """ 
            This method will return a default quiz grading formula for the course, WHICH MUST BE READY MODE.
            The default logic is: 
                * linear sum of ExamScores, except
                    * take the max of all quizzes in the same Content Group
                    * In-Video Quizzes don't count
        """
        quizzes = set(Exam.objects.filter(course=course, exam_type='problemset', invideo=False, is_deleted=False, live_datetime__isnull=False))
        content_groups = ContentGroup.objects.filter(course=course, level=1, exam__isnull=False,
                                                     exam__exam_type='problemset', exam__live_datetime__isnull=False) \
                                             .select_related('exam').order_by("exam__live_datetime") #top level quizzes
        parent_quizzes = map(lambda g:g.exam, content_groups)

        all_quiz_groups = []
        #add all the quizzes that are in groups first
        for parent in parent_quizzes:
            groupinfo = ContentGroup.groupinfo_by_id('exam', parent.id)
            members = groupinfo['exam']
            slugs = map(lambda i: i.slug, members)
            all_quiz_groups.append(slugs)
            quizzes = quizzes-set(members)

        #print(quizzes)
        #now add quizzes that are singletons
        for q in quizzes:
            all_quiz_groups.append([q.slug])

        #print((all_quiz_groups))
        #now just output a formula that's a linear sum of the maxes of all the groups
        def stringify_inner_list(lst):
            return "max( %s )" % " , ".join(map(lambda li: "{{%s}}" % li, lst))

        strout = " + ".join(map(lambda li: stringify_inner_list(li), all_quiz_groups))
        #print(strout)
        return strout

    @classmethod
    def generate_default_exam_formula(selfclass, course):
        """
            This method will return a default exam grading formula for the course, WHICH MUST BE READY MODE.
            The default logic is:
            * linear sum of ExamScores, no consideration of groupings
        """
        exams = list(Exam.objects.values_list("slug", flat=True).filter(course=course,
                        exam_type='exam', invideo=False, is_deleted=False, live_datetime__isnull=False))

        strout = " + ".join(map(lambda slug: "{{%s}}" % slug, exams))
        #print(strout)
        return strout

    @classmethod
    def generate_default_exercise_formula(selfclass, course):
        """
            This method will return a default exam grading formula for the course, WHICH MUST BE READY MODE.
            The default logic is:
            * linear sum of ExamScores, no consideration of groupings
        """
        exercises = list(Exam.objects.values_list("slug", flat=True).filter(course=course,
                                                                            exam_type='interactive_exercise', invideo=False,
                                                                            is_deleted=False, live_datetime__isnull=False))
        
        strout = " + ".join(map(lambda slug: "{{%s}}" % slug, exercises))
        #print(strout)
        return strout

    @classmethod
    def generate_core_db_exercise_formula(selfclass, course):
        """
            This method will return a default exam grading formula for the course, WHICH MUST BE READY MODE.
            The default logic is:
            * linear sum of ExamScores, no consideration of groupings
            """
        exercises = list(Exam.objects.values_list("slug", flat=True).filter(course=course,
                                                                            exam_type='interactive_exercise', invideo=False,
                                                                            is_deleted=False, live_datetime__isnull=False) \
                                                                    .exclude(Q(slug__icontains="challenge") | Q(slug__icontains="extrapractice")))
        
        strout = " + ".join(map(lambda slug: "{{%s}}" % slug, exercises))
        #print(strout)
        return strout

    @classmethod
    def generate_challenge_db_exercise_formula(selfclass, course):
        """
            This method will return a default exam grading formula for the course, WHICH MUST BE READY MODE.
            The default logic is:
            * linear sum of ExamScores, no consideration of groupings
            """
        exercises = list(Exam.objects.values_list("slug", flat=True).filter(course=course, slug__icontains="challenge",
                                                                            exam_type='interactive_exercise', invideo=False,
                                                                            is_deleted=False, live_datetime__isnull=False))
        
        strout = " + ".join(map(lambda slug: "{{%s}}" % slug, exercises))
        #print(strout)
        return strout

    @classmethod
    def generate_db_course_formula(selfclass, course):
        return "%s + 2 * ( %s ) + 3 * ( %s )" % (selfclass.generate_default_quiz_formula(course),
                                                 selfclass.generate_core_db_exercise_formula(course),
                                                 selfclass.generate_default_exam_formula(course))
                                                 

#########################################################################################################
###                                                                                                   ###
### BELOW HERE:  Error classes used by the aggregator.                                                ###
###                                                                                                   ###
#########################################################################################################


class AggregatorError(Exception):
    """ Base class for Aggregator errors"""
    pass

class AggregatorFormulaError(AggregatorError):
    """ Raised when the formula that instantiates the Aggregator has an error (syntax, blacklisted function, etc)"""
    pass

class AggregatorFormulaVariableError(AggregatorError):
    """ Raised when one of the variables in the formula cannot be de-referenced (i.e. is not an Exam slug in self.course)"""
    pass


########NEW FILE########
__FILENAME__ = autograder
import re, collections
import urllib, urllib2
import json
import logging
import random 
import time
from datetime import datetime
from xml.dom.minidom import parseString

from django.conf import settings
from django.core.cache import get_cache
from django.utils import encoding

from c2g.util import CacheStat


logger = logging.getLogger(__name__)

class AutoGrader():
    """
    Autograder for an entire pset here.
    Can be use to grade single problems, of course.
    """
    __true_default =  {'correct':True, 'score':0}
    __false_default = {'correct':False, 'score':0}

    def __unicode__(self):
        graders=self.grader_functions.keys()
        graders = sorted(graders)
        return "AutoGrader functions set up for the following response names:\n" + \
            "\n".join(map(lambda gname: "name: %s | points: %1.2f" % (gname, self.points_dict[gname]), graders))
    
    def __init__(self, xml, default_return=None):
        """
            
        Initializes the autograder.  Takes in one argument, xml, which represents the metadata_xml.
        default_return is a kwarg which can be (None (default), True, False), which specifies the behavior of the
        grader when 
            
        """
        self.points_possible=0.0
                
        if xml == "__testing_bypass":
            return

        def return_true_default():
            def tempFn(submission):
                return self.__true_default
            return tempFn
                
        def return_false_default():
            def tempFn(submission):
                return self.__false_default
            return tempFn
    
        self.metadata_xml = xml #The XML metadata for the entire problem set.
        self.metadata_dom = parseString(encoding.smart_str(xml, encoding='utf-8')) #The DOM corresponding to the XML metadata

        if default_return is None:
            self.grader_functions = {} #This is a dict that is keyed on the "name" of the submission (the input field) whose
                                       #value is a grader function for that submission.
                                       #will throw an exception if the key (questionID) is not found
        elif default_return:
            self.grader_functions = collections.defaultdict(return_true_default)  #Returns true if key not found
        else:
            self.grader_functions = collections.defaultdict(return_false_default) #Returns false if key not found

        #This is a dict that is keyed same as grader_functions and returns the associated total points
        self.points_dict = collections.defaultdict(lambda:0)

        #This dict is keyed on question_id (can be groups of inputs)
        #mainly for used to know how to score randomized questions
        self.question_points_dict = collections.defaultdict(lambda:0)

        questions = self.metadata_dom.getElementsByTagName('question_metadata')
        for q in questions:
            self._parse_question_metadata(q)
    
    def _parse_question_metadata(self, question_elem):
        """parses <question_metadata> elements, delegating each <response> child"""
        
        qid = question_elem.getAttribute('id').strip()
        if qid == "":
            raise AutoGraderMetadataException('A <question_metadata> tag has no "id" attribute!')
        
        responses = question_elem.getElementsByTagName('response')
        if not responses:
            raise AutoGraderMetadataException('<question_metadata id="%s"> has no <response> child tags!' % qid)
    
        for resp in responses:
            resp_name = self._validate_resp(resp, qid) #validate first
            
            type = resp.getAttribute('answertype').strip()
            if type == "":
                raise AutoGraderMetadataException('A <response> tag (child of <question_metadata id="%s">) has no "answertype" attribute!' % qid)
            elif type == "multiplechoiceresponse":
                self._parse_mc(resp, resp_name, qid)
            elif type == "numericalresponse":
                self._parse_num(resp, resp_name, qid)
            elif type == "dbinteractiveresponse":
                self._parse_interactive(resp, resp_name, qid)
            elif type == "regexresponse":
                self._parse_regex(resp, resp_name, qid)
            elif type == "stringresponse":
                self._parse_string(resp, resp_name, qid)
            # more types should follow
            
    def _validate_resp(self, response_elem, qid):
        """
        Helper function that validates that <response> elements have unique "name" attributes
        """
        resp_name = response_elem.getAttribute("name").strip()
        if resp_name == "":
            raise AutoGraderMetadataException('A <response> tag (child of <question_metadata id="%s">) has no name attribute!' % qid)
        
        if resp_name in self.grader_functions:
            raise AutoGraderMetadataException('Duplicate name "%s" found for multiple <response> tags.  One is a child of <question_metadata id="%s">' \
                                              % (resp_name, qid))
        return resp_name
             
        
    
    def _get_numeric_attribute_with_default(self, element, attribute, default=0.0):
        """
        Helper function that gets an attribute with a numeric value and returns the float numeric value.
        Throws exception if attribute is not convertible.
        Returns default if attribute is not set
        """
        str_val = element.getAttribute(attribute)
        if str_val == "": #default
            return default
        else:
            try:
                return float(str_val)
            except ValueError:
                raise AutoGraderMetadataException('Element %s has attribute %s that cannot be converted a number' % (str(element), attribute))

    
    ########## Multiple-choice section ############

    def _parse_mc(self, response_elem, resp_name, qid):
        """
        Parses each <response answertype="multiplechoiceresponse"> element
        and sets up its grader function
        """
        
        #build up the correct answers
        choices = response_elem.getElementsByTagName('choice')
        if not choices:
            raise AutoGraderMetadataException('<question_metadata id="%s">, <response name="%s"> has no <choice> descendants' % (qid,resp_name))

        choice_list = [] # This list is really for validation only
        answer_list = [] # This list will build the grader function
        for c in choices:
            cid = c.getAttribute('value').strip()
            if cid == "":
                raise AutoGraderMetadataException('<question_metadata id="%s">, <response name="%s"> has descendant <choice> tag with no "value" attribute' \
                                                  % (qid, resp_name))
            if cid in choice_list:
                raise AutoGraderMetadataException('<question_metadata id="%s">, <response name="%s"> has descendant <choice> tags with duplicate value "%s"' \
                                                  % (qid, resp_name, cid))
            choice_list.append(cid)
                    
            if c.getAttribute('correct').strip().lower() == 'true':
                answer_list.append(cid)

        correct_pts = self._get_numeric_attribute_with_default(response_elem,'correct-points',1)
        wrong_pts = self._get_numeric_attribute_with_default(response_elem, 'wrong-points',0)

        self.points_possible += correct_pts
            
        self.points_dict[resp_name] = correct_pts
        self.question_points_dict[qid] += correct_pts
                    
        self.grader_functions[resp_name] = self._MC_grader_factory(answer_list, correct_pts=correct_pts, wrong_pts=wrong_pts)


    def _MC_grader_factory(self, answer_list, correct_pts=1, wrong_pts=0):
        """
        A factory for returning multiple-choice graders.
        The signature of the returned function is 
            
            {'correct':boolean, 'score':float, 'correct_choices':dict, 'wrong_choices':dict} = grader_fn(submission_iterable)

        submission_iterable is an iterable which has as each entry a string of of the name corresponding to a
        student submitted choice.  All correct choices must be selected, and no incorrect choice selected.
        The return value is a dict with keys 'correct' and 'score' (using dict to be future proof)
        'correct_choices' is a dict whose keys are all the correct choices selected by the student.
        'wrong_choices' is a dict whose keys are all the 'wrong' choices for the student, and whose value is either
        'fp' (false_positive) where the student selected a wrong answer, or 'fn', where the student did not select a right answer.
            
        """
        def grader_fn(submission_iterable):
            correct=True
            cc = {}
            wc = {}
            for sub in submission_iterable:
                if sub not in answer_list:
                    wc[sub]='fp'
                    correct=False
                else:
                    cc[sub]=True
            for ans in answer_list:
                if ans not in submission_iterable:
                    wc[ans]='fn'
                    correct=False
            points = correct_pts if correct else wrong_pts
            return {'correct':correct, 'score':points, 'correct_choices':cc, 'wrong_choices':wc}

        return grader_fn
            

    ########## Numeric response section ############

    def _parse_num(self, response_elem, resp_name, qid):
        """
        Parses each <response answertype="numericalresponse"> element and sets up its grader function
        """

        answer_str = response_elem.getAttribute("answer")
        
        if answer_str == "" :
            raise AutoGraderMetadataException('<question_metadata id="%s">, <response name="%s"> has no specified answer' % (qid,resp_name))

        try:
            answer = float(answer_str)
        except ValueError:
            raise AutoGraderMetadataException('In <question_metadata id="%s">, <response name="%s">, cannot convert answer to number' % (qid,resp_name))

        tolerance_str = ""
        
        children = response_elem.childNodes
        for node in children:
            if node.nodeType == node.ELEMENT_NODE and node.nodeName == "responseparam" and node.getAttribute('type') == "tolerance" :
                tolerance_str = node.getAttribute("default").strip()
                break #only consider first tolerance setting 

        tolerance = (0.001)*answer #default tolerance is 0.1% of answer
        if tolerance_str :
            try:
                if tolerance_str[-1] == "%" : #entered as a percentage
                    tolerance_grp = re.match(r"^(.*)%$", tolerance_str)
                    tolerance = float(tolerance_grp.group(1))/100*answer #ugly syntax--group(1)--to get matched substring out
                else:
                    tolerance = float(tolerance_str)
            except ValueError:
                raise AutoGraderMetadataException('In <question_metadata id="%s">, <response name="%s">, cannot convert tolerance to number' % (qid,resp_name))

        correct_pts = self._get_numeric_attribute_with_default(response_elem,'correct-points',1)
        wrong_pts = self._get_numeric_attribute_with_default(response_elem, 'wrong-points',0)

        self.points_possible += correct_pts
                
        self.points_dict[resp_name] = correct_pts
        self.question_points_dict[qid] += correct_pts

        self.grader_functions[resp_name] = self._NUM_grader_factory(answer, tolerance, correct_pts=correct_pts, wrong_pts=wrong_pts)
                    
    def _NUM_grader_factory(self, answer, tolerance, correct_pts=1, wrong_pts=0):
        """
        Factory function for a numeric grader.  The signature of the grader_fn is
        
            {'correct':boolean, 'score':float} = grader_fn(submission)
            
        which returns True if answer-tolerance <= submission <= answer+tolerance, else returns False
        Submission is a string that gets converted to a float.
        The return value is a dict with keys 'correct' and 'score' (using dict to be future proof)

        """
        def grader_fn(submission):
            try:
                sub_num = float(submission)
            except ValueError:
                raise AutoGraderGradingException("Your submission could not be converted to a number!")
            if answer-tolerance <= sub_num and sub_num <= answer+tolerance:
                return {'correct':True, 'score':correct_pts}
            else:
                return {'correct':False, 'score':wrong_pts}
        return grader_fn
                    
    ########## Regex response section ############
    
    def _parse_regex(self, response_elem, resp_name, qid):
        """
        Parses each <response answertype="regexresponse"> element and sets up its grader function
        """
        
        answer_str = response_elem.getAttribute("answer")
        
        if answer_str == "" :
            raise AutoGraderMetadataException('<question_metadata id="%s">, <response name="%s"> has no specified answer' % (qid,resp_name))
                
        search = True
        if response_elem.getAttribute("match"):
            search = False #use match, not search
        
        flags = 0
                        
        children = response_elem.childNodes
        for node in children:
            if node.nodeType == node.ELEMENT_NODE and node.nodeName == "responseparam" and node.getAttribute('flag'):
                flag_name = node.getAttribute("flag").strip()
                if hasattr(re, flag_name) and isinstance(getattr(re, flag_name), int):
                    flags |= getattr(re, flag_name)

        try:
            compiled_fn = re.compile(answer_str, flags)
        except re.error:
            raise AutoGraderMetadataException('In <question_metadata id="%s">, <response name="%s">, your regular expression could not be compiled' % (qid,resp_name))
                    
        correct_pts = self._get_numeric_attribute_with_default(response_elem,'correct-points',1)
        wrong_pts = self._get_numeric_attribute_with_default(response_elem, 'wrong-points',0)

        self.points_possible += correct_pts
                
        self.points_dict[resp_name] = correct_pts
        self.question_points_dict[qid] += correct_pts

        self.grader_functions[resp_name] = self._REGEX_grader_factory(compiled_fn, search, correct_pts=correct_pts, wrong_pts=wrong_pts)

    def _REGEX_grader_factory(self, compiled_fn, search, correct_pts=1, wrong_pts=0):
        """
            Factory function for a regex grader.  The arguments are a compiled regex  and 
            flag 'search', which determines whether to `search` (True) using the regex or to `match` (False).
            The signature of the grader_fn is
            
            {'correct':boolean, 'score':float} = grader_fn(submission)
            
            which returns True if a regex search or match function (as determined by the `search` argument)
            returns a match for the answer, else returns False
            Submission is a string that gets fed into the grader.
            The return value is a dict with keys 'correct' and 'score' (using dict to be future proof).
            """
        def grader_fn(submission):
            try:
                if search:
                    result = compiled_fn.search(submission.strip())
                else:
                    result = compiled_fn.match(submission.strip())
            except re.error:
                raise AutoGraderGradingException("An error occurred when matching your submission to the answer!")
            if result:
                return {'correct':True, 'score':correct_pts}
            else:
                return {'correct':False, 'score':wrong_pts}
        return grader_fn

    ########## string response section ############
    
    def _parse_string(self, response_elem, resp_name, qid):
        """
        Parses each <response answertype="stringresponse"> element and sets up its grader function
        """
        
        answer_str = response_elem.getAttribute("answer").strip()
        
        if answer_str == "" :
            raise AutoGraderMetadataException('<question_metadata id="%s">, <response name="%s"> has no specified answer' % (qid,resp_name))
        
        ignorecase = False
        if response_elem.getAttribute("ignorecase"):
            ignorecase = True #use match, not search
                                
        correct_pts = self._get_numeric_attribute_with_default(response_elem,'correct-points',1)
        wrong_pts = self._get_numeric_attribute_with_default(response_elem, 'wrong-points',0)
        
        self.points_possible += correct_pts
                
        self.points_dict[resp_name] = correct_pts
        self.question_points_dict[qid] += correct_pts

        self.grader_functions[resp_name] = self._STRING_grader_factory(answer_str, ignorecase, correct_pts=correct_pts, wrong_pts=wrong_pts)
    
    def _STRING_grader_factory(self, answer_str, ignorecase, correct_pts=1, wrong_pts=0):
        """
            Factory function for a string grader.  The arguments are the answer string answer_str and
            flag 'ignorecase', which determines whether the match is case insensitive.
            The signature of the grader_fn is
            
            {'correct':boolean, 'score':float} = grader_fn(submission)
            
            which returns True if the user submission, stripped of preceding and succeeding whitespace
            is an exact or a case-insensitive match for the answer_str, depending on the `ignorecase` argument.
            Returns False otherwise.
            Submission is a string that gets fed into the grader.
            The return value is a dict with keys 'correct' and 'score' (using dict to be future proof).
            """
        def grader_fn(submission):
            if ignorecase:
                result = submission.strip().upper() == answer_str.strip().upper()
            else:
                result = submission.strip() == answer_str.strip()
            if result:
                return {'correct':True, 'score':correct_pts}
            else:
                return {'correct':False, 'score':wrong_pts}
        return grader_fn

    
    ########## Interactive Exercise Grader ############

    def _parse_interactive(self, response_elem, resp_name, qid):
        """
        Reads a set of XML parameters that are passed along to a
        custom grader for the DB Class.  An example:

            <response name="sql1" answertype="dbclass-interactive">
                <grader_name>SQL_Grader_schroot</grader_name>
                <select_dict></select_dict>
                <database-file>sql-movies-query28.db</database-file>
                <answer-file>movie-query-ans8.txt</answer-file>
                <parameters>
                    <qnum>1</qnum>
                </parameters>
                <type>db_class</type>
            </response>

        The DB Class interactive grader expects to see a POST with
        a specific set of elements in the requests.  There are three
        direct elements:
            grader_name
            select_dict
            student_input

        and then an arbitrary set of elements called 'param[X]'.  
        student_input is filled in by the grader function later; we 
        populate the rest from the XML here.
        """
        response_nodes_found = []
        required_nodes = ["grader_name", "select_dict", "database-file", "answer-file", "parameters"]
        grader_post_params = {}
        for response_child in response_elem.childNodes:
            if response_child.nodeName == "#text":            # ignore
                next
            elif response_child.nodeName == "parameters":     # params are special
                response_nodes_found.append(response_child.nodeName)
                for pnode in response_child.childNodes:
                    key = "params[%s]" % pnode.nodeName
                    if pnode.childNodes.length:
                        val = pnode.childNodes[0].nodeValue
                        grader_post_params[key] = val
            else:                                             # all else becomes a post param
                response_nodes_found.append(response_child.nodeName)
                val = ""
                if response_child.childNodes.length:
                    val = response_child.childNodes[0].nodeValue
                grader_post_params[response_child.nodeName] = val
                
        for req in required_nodes: 
            if req not in response_nodes_found:
                response_node_id = response_elem.getAttribute('name').strip()
                raise AutoGraderMetadataException("Error in response node \"%s\": A <%s> element is required" 
                        % (response_node_id, req))

        grader_name = grader_post_params['grader_name'] if 'grader_name' in grader_post_params else "Unknown"
        self.points_possible += 1.0 ## DB exercises are worth 1 point, hardcoded
        self.points_dict[resp_name] = 1.0
        self.question_points_dict[qid] += 1.0

        self.grader_functions[resp_name] = self._INTERACTIVE_grader_factory(grader_post_params, grader_name)

    def _INTERACTIVE_grader_factory(self, post_params, grader_name):
        """
        Factory function for an interactive grader.  The signature of the grader_fn is

            {'correct':boolean, 'score':float, 'feedback':string } = grader_fn(submission)

        This does the remote call to the interactive grader and interprets the response.
        The grader returns a JSON structure that looks like this.

            {"score":0,
            "maximum-score":1,
            "feedback":[
                {"user_answer":"select * from movies",
                "score":0,
                "explanation":"<br><font style=\"color:red; font-weight:bold;\">Incorrect<\/font>..."
                }]
            }
        """

        def grader_fn(submission):
            """Grade an interactive exam by calling a remote grader."""

            def external_grader_request(grader_url, post_params):
                """Open a connection to the external grader and read from the result.  
                We have retry logic here to try several times before giving up.  We are
                catching many errors here on purpose since there are so many ways that 
                a connection like this can fail: socket handling, connection handling, 
                HTTP parsing, JSON parsing.

                We have a blacklist of words that we watch for and consider them failures
                as well, like "time out".

                We maintain a cache of successfully-graded answers.  We *do not* do
                negative caching, since we want to retry external graders.
                """

                def retry_delay(step):
                    """Simple little exponential backoff function.
                            retry_delay(0) = 0.5 - 1.0   retry_delay(1) = 1.0 - 2.0
                            retry_delay(2) = 2.0 - 4.0   retry_delay(3) = 4.0 - 8.0"""
                    step = max(step, 1)
                    return 2**(step-1 + random.random())

                post_data = urllib.urlencode(post_params)

                gradercache = get_cache("grader_store")
                # post_data may be > 240 chars, so can't use directly as cache key, use hash
                gradercache_key = hash(post_data)
                gradercache_hit = gradercache.get(gradercache_key)
                if gradercache_hit:
                    CacheStat.report('hit', 'grader_store')
                    return gradercache_hit
                CacheStat.report('miss', 'grader_store')

                grader_timeout = 45    # seconds
                retry_limit = 4        # after this many attempts, don't retry
                attempt = 1            # start counting at 1
                watchwords = ['', 'time out', 'timed out', 'timeout error', 'failure']
                while attempt <= retry_limit:
                    try:
                        time_before = datetime.now()
                        grader_conn = urllib2.urlopen(grader_url, post_data, grader_timeout)
                        time_after = datetime.now()
                        duration = time_after - time_before  # timedelta
                        logger.info("interactive grader \"%s\" returned in %s" 
                                % (grader_name, str(duration)))
                        graded_result = grader_conn.read()

                        graded = json.loads(graded_result)

                        # test for cases where score == 0 but explanation hints at an error
                        # if score > 0, then let through, we never want to take away points
                        # because we suspect a grader error (fail safe)
                        if 'score' in graded and graded['score'] == 0:
                            for ww in watchwords:
                                if 'feedback' in graded \
                                        and 'explanation' in graded['feedback'][0] \
                                        and graded['feedback'][0]['explanation'].lower() == ww:
                                    if ww == "":
                                        raise AutoGraderGradingException("Fail with empty explanation")
                                    raise AutoGraderGradingException("Fail with \"%s\" explanation" % ww)

                        gradercache.set(gradercache_key, graded)
                        return graded

                    except Exception as e:
                        if attempt >= retry_limit:
                            logger.error("interactive grader \"%s\" attempt %d/%d, giving up: %s" \
                                    % (grader_name, attempt, retry_limit, str(e)))
                            raise AutoGraderGradingException(str(e))
                        else:
                            d = retry_delay(attempt)
                            logger.info("interactive grader \"%s\" attempt %d/%d, retrying in %1.2f sec: %s" \
                                    % (grader_name, attempt, retry_limit, d, str(e)))
                            time.sleep(d)
                            attempt += 1

            # grader_fn() body
            # default responses, to be overriden by what we actually got back
            response = {}
            response['correct'] = False
            response['score'] = 0
            response['feedback'] = ""

            # external grader can't handle unicode (see #1904) so just flatten to ascii
            ascii_submission = encoding.smart_str(submission, encoding='ascii', errors='ignore')
            post_params['student_input'] = ascii_submission

            # call remote grader
            logger.debug("External grader call: %s" % str(post_params))
            grader_url = getattr(settings, 'GRADER_ENDPOINT', 'localhost')
            graded = external_grader_request(grader_url, post_params)

            # interpret what we got from the grader
            # class2go just has one float score, coursera used score vs max, convert here
            if 'score' in graded:
                if 'maximum-score' in graded and graded['maximum-score'] != 0:
                    maxscore = float(graded['maximum-score'])
                else:
                    maxscore = 1.0
                if float(graded['score']) == maxscore:
                    response['correct'] = True
                response['score'] = float(graded['score']) / maxscore
            if 'feedback' in graded:
                response['feedback'] = graded['feedback']

            return response

        return grader_fn


    ########## The actual grader, for what it is ############

    def grade(self, input_name, submission):
        """Grades student submission for response name=input_name"""
        try:
            return self.grader_functions[input_name](submission)
        except KeyError:
            raise AutoGraderGradingException('Input/Response name="%s" is not defined in grading template' % input_name)

    def points(self, input_name):
        """Returns the total number of points for the input name"""
        return self.points_dict[input_name]

    def question_points(self, qid):
        """Returns the total number of points for the question with id=qid"""
        return self.question_points_dict[qid]

class AutoGraderException(Exception):
    """Base class for exceptions in this module"""
    pass

class AutoGraderMetadataException(AutoGraderException):
    """
    An error during the parsing/grading function generation step
    of the problemset XML metadata.  Could be because certain required attibutes or tags are missing.
    """
    pass
       
class AutoGraderGradingException(AutoGraderException):
    """
    An error during the auto grading step (not XML parsing or grading function generation)
    """
    pass


########NEW FILE########
__FILENAME__ = fake_remote_grader
import urllib,urllib2
from StringIO import StringIO

from django.conf import settings
from django.core.cache import get_cache

class fake_remote_grader_abstract(object):
    """
    Abstract base class for all fake remote graders.  Fake remote graders are 
    context managers that wrap test cases, ensuring that urllib gets correctly
    set up before the test, and then cleaned up afterward.

    Subclasses should override the fake_response(req) method that returns a
    response of the type urllib2.addinfourl().
    """

    def __init__(self, answer):
        self.answer = answer

    def __enter__(self):
        # clear out the grader cache every time we fake out the grader
        gradercache = get_cache('grader_store')
        gradercache.clear()

        class FakeGraderHTTPHandler(urllib2.HTTPHandler):
            def http_open(inner_self, req):
                return self.fake_response(req)
        my_opener = urllib2.build_opener(FakeGraderHTTPHandler)
        urllib2.install_opener(my_opener)

    def __exit__(self, exc_type, exc_val, exc_tb):
        default_opener = urllib2.build_opener(urllib2.HTTPDefaultErrorHandler)
        urllib2.install_opener(default_opener)


class fake_remote_grader(fake_remote_grader_abstract):
    """
    Fake grader that will return 200 OK responses with the answer string that 
    this was instantiated with.  This is a context manager, so intended to be 
    used with a "with" statement, like so:

        ag = AutoGrader(xml)
        with fake_healthy_grader("all is well"):
            g = ag.grade("question", "answer")
    """

    def fake_response(self, req):
        grader_endpoint = getattr(settings, 'GRADER_ENDPOINT', 'localhost')
        if req.get_full_url() == grader_endpoint:
            resp = urllib2.addinfourl(StringIO(self.answer), "", req.get_full_url())
            resp.code = 200
            resp.msg = "OK"
            return resp


class fake_remote_grader_fails(fake_remote_grader):
    """
    Fake remote grader that will fail after either a number of 
    successes, or will fail some number of times before 
    succeeding. Inherits from fake_remote_grader, instead of the 
    abstract parent, so it can use the child's happy-path responder.
    """

    def __init__(self, answer, fail_after=0, fail_for=0):
        self.failures = 0
        self.successes = 0
        self.fail_after = fail_after
        self.fail_for = fail_for
        super(fake_remote_grader_fails, self).__init__(answer)

    def fake_response(self, req):
        grader_endpoint = getattr(settings, 'GRADER_ENDPOINT', 'localhost')
        if req.get_full_url() == grader_endpoint:
            if (self.fail_for > 0 and self.failures < self.fail_for) \
                    or (self.fail_after > 0 and self.successes >= self.fail_after):
                self.failures += 1
                resp = urllib2.addinfourl(StringIO(""), "", req.get_full_url())
                resp.code = 500
                resp.msg = "Server Error"
            else:
                self.successes += 1
                resp = super(fake_remote_grader_fails, self).fake_response(req)
            return resp


class fake_remote_grader_garbage(fake_remote_grader_abstract):
    """
    Fake grader that will return connection junk that shouldn't be parsable
    as a HTTP response.
    """
    def fake_response(self, req):
        grader_endpoint = getattr(settings, 'GRADER_ENDPOINT', 'localhost')
        if req.get_full_url() == grader_endpoint:
            return "garbage_response"



########NEW FILE########
__FILENAME__ = forms
from django import forms
from c2g.models import Exam
########NEW FILE########
__FILENAME__ = models
from django.db import models

# Create your models here.

########NEW FILE########
__FILENAME__ = tasks
from celery import task
from c2g.models import ExamRecord, Course, Exam
from django.core.mail import EmailMessage, get_connection
from django.core.mail import send_mail
from storages.backends.s3boto import S3BotoStorage

import json
import settings
import datetime

FILE_DIR = getattr(settings, 'FILE_UPLOAD_TEMP_DIR', '/tmp')
AWS_ACCESS_KEY_ID = getattr(settings, 'AWS_ACCESS_KEY_ID', '')
AWS_SECRET_ACCESS_KEY = getattr(settings, 'AWS_SECRET_ACCESS_KEY', '')
AWS_SECURE_STORAGE_BUCKET_NAME = getattr(settings, 'AWS_SECURE_STORAGE_BUCKET_NAME', '')

@task()
def generate_submission_csv_task(course_id, exam_id, email_to):
    
    course = Course.objects.get(id=course_id)
    exam = Exam.objects.get(id=exam_id)
    
    course_prefix = course.prefix
    course_suffix = course.suffix
    exam_slug = exam.slug
    
    submitters = ExamRecord.objects.filter(exam=exam, complete=True, time_created__lt=exam.grace_period).values('student').distinct()
    fname = course_prefix+"-"+course_suffix+"-"+exam_slug+"-"+datetime.datetime.now().strftime("%Y-%m-%d-%H-%M-%S")+".csv"
    outfile = open(FILE_DIR+"/"+fname,"w+")
    
    could_not_parse = ""
    
    for s in submitters: #yes, there is sql in a loop here.  We'll optimize later
        latest_sub = ExamRecord.objects.values('student__username', 'time_created', 'json_data').filter(exam=exam, time_created__lt=exam.grace_period, student=s['student']).latest('time_created')
        try:
            sub_obj = json.loads(latest_sub['json_data']).iteritems()
            for k,v in sub_obj:
                vals = parse_val(v)
                outstring = '"%s","%s","%s"\n' % (latest_sub['student__username'], k, vals)
                outfile.write(outstring)
        except ValueError:
            could_not_parse += latest_sub['student__username']+ " " #Don't output if the latest submission was erroneous
    
    outfile.write("\n")
    
    #if there were items we could not parse
    if could_not_parse:
        #write the usernames at the beginning of the file
        outfile.seek(0)
        data=outfile.read()
        outfile.seek(0)
        outfile.truncate()
        outfile.write("Could not parse data from the following users: " + could_not_parse + "\n")
        outfile.write(data)
    
    #write to S3
    secure_file_storage = S3BotoStorage(bucket=AWS_SECURE_STORAGE_BUCKET_NAME, access_key=AWS_ACCESS_KEY_ID, secret_key=AWS_SECRET_ACCESS_KEY)
    s3file = secure_file_storage.open("/%s/%s/reports/exams/%s" % (course_prefix, course_suffix, fname),'w')
    try:
        outfile.seek(0)
        s3file.write(outfile.read())
    finally:
        s3file.close()
        outfile.close()

    dl_url = secure_file_storage.url_monkeypatched("/%s/%s/reports/exams/%s" % (course_prefix, course_suffix, fname), response_headers={'response-content-disposition': 'attachment'})

    email = EmailMessage('%s: Submission CSV for %s' % (course.title, exam.title), "The student submissions CSV for %s is ready.  Because the file can be large, please download it at %s." % (exam.title, dl_url),
                         settings.SERVER_EMAIL,
                         [email_to])
    email.send()


def parse_val(v):
    """Helper function to parse AJAX submissions"""
    if isinstance(v,list):
        sorted_list = sorted(map(lambda li: li['value'], v))
        return reduce(lambda x,y: x+y+",", sorted_list, "")
    else:
        try:
            return v.get('value', "")
        except (TypeError, AttributeError):
            return str(v)

    
########NEW FILE########
__FILENAME__ = tests
# -*- coding: utf-8 -*-
# per http://www.python.org/peps/pep-0263.html

from nose.plugins.attrib import attr
import random
import re
from sets import Set

from django.test import TestCase

from courses.exams.autograder import *
from courses.exams.views import compute_penalties
from fake_remote_grader import *

class SimpleTest(TestCase):
    def test_multiple_choice_factory_normal(self):
        """
        Tests the multiple-choice autograder.
        """
        ag = AutoGrader("__testing_bypass")
            #Regular test case
        mc_fn = ag._MC_grader_factory(["a","b"],correct_pts=15,wrong_pts=-3)
        self.assertEqual(mc_fn(["a","b"]),{'correct':True,'score':15,'correct_choices':{"a":True,"b":True}, 'wrong_choices':{}})
        self.assertTrue(mc_fn(("b","a"))['correct']) #note this input is a tuple
        self.assertTrue(mc_fn(("b","b","a","a"))['correct']) #and this one too
        self.assertEqual(mc_fn(["a","b","c"]), {'correct':False, 'score':-3, 'correct_choices':{"a":True,"b":True}, 'wrong_choices':{"c":'fp'}})
        self.assertEqual(mc_fn(["a"]), {'correct':False, 'score':-3, 'correct_choices':{"a":True}, 'wrong_choices':{"b":'fn'}})
        self.assertFalse(mc_fn([])['correct'])

    def test_multiple_choice_factory_empty(self):
        """
        Tests the multiple-choice autograder when initialized to empty list
        """
        ag = AutoGrader("__testing_bypass")
            #Empty case
        empty_fn = ag._MC_grader_factory([])
        self.assertTrue(empty_fn([])['correct'])
        self.assertFalse(empty_fn(["a"])['correct'])
        self.assertFalse(empty_fn(["a","b"])['correct'])

    def test_multiple_choice_factory_random(self):
        """
            Uses the random generator to make test cases for the multiple choice factory
            Tests 10 times
        """
        ag = AutoGrader("__testing_bypass")
        choicelist = "abcdefghijklmnopqrstuvwxyz"
        for i in range(10):
            numsolns = random.randint(1,26)
            solutions = random.sample(choicelist, numsolns)
            grader = ag._MC_grader_factory(solutions)
            wrongsub = random.sample(choicelist, random.randint(1,26))
            if Set(solutions) != Set(wrongsub):
                self.assertFalse(grader(wrongsub)['correct'])
            random.shuffle(solutions)
            self.assertTrue(grader(solutions)['correct'])

    def test_multiple_choice_metadata(self):
        """
        Tests basic functionality of multiple-choice input via metadata
        """
        xml = """
            <exam_metadata>
                <question_metadata id="problem_1" data-report="Apple Competitor Question">
                    <response name="q1d" answertype="multiplechoiceresponse" data-report="Apple Competitors" correct-points="15" wrong-points="-2">
                        <choice value="ipad" data-report="iPad" correct="false">
                            <explanation>Try again</explanation>
                        </choice>
                        <choice value="napster" data-report="Napster" correct="true">
                            <explanation>Try again</explanation>
                        </choice>
                        <choice value="ipod" data-report="iPod" correct="true">
                            <explanation>This is right!</explanation>
                        </choice>
                        <choice value="peeler" data-report="Vegetable Peeler" correct="false">
                            <explanation>Try again</explanation>
                        </choice>
                        <choice value="android" data-report="Android" correct="false">
                            <explanation>Try again</explanation>
                        </choice>
                        <choice value="beatles" data-report="The Beatles" correct="false">
                            <explanation>Try again</explanation>
                        </choice>
                    </response>
                </question_metadata>
                <question_metadata id="problem_2">
                    <response name="test2" answertype="multiplechoiceresponse">
                        <choice value="a" correct="False" />
                        <choice value="b" correct="True" />
                        <choice value="c" correct="True" />
                    </response>
                </question_metadata>
            </exam_metadata>
            """
        ag = AutoGrader(xml)
            #problem 1
        self.assertEqual(ag.grader_functions['q1d'](["napster", "ipod"]), {'correct':True, 'score':15, 'correct_choices':{'ipod':True,'napster':True}, 'wrong_choices':{}})
        self.assertTrue(ag.grader_functions['q1d'](["ipod", "napster"])['correct'])
        self.assertEqual(ag.grader_functions['q1d'](["ipad", "ipod", "napster"]), {'correct':False, 'score':-2, 'correct_choices':{'ipod':True, 'napster':True}, 'wrong_choices':{'ipad':'fp'}})
        self.assertFalse(ag.grader_functions['q1d'](["ipo"])['correct'])
        self.assertFalse(ag.grader_functions['q1d'](["ipod"])['correct'])
        self.assertFalse(ag.grader_functions['q1d']([])['correct'])
        self.assertTrue(ag.grade('q1d', ["ipod", "napster"])['correct'])
        self.assertFalse(ag.grade('q1d', ["q1d_1"])['correct'])
        self.assertEqual(ag.points('q1d'),15)
        self.assertEqual(ag.question_points('problem_1'),15)

            #problem 2
        self.assertEqual(ag.grader_functions['test2'](["b","c"]),{'correct':True,'score':1, 'correct_choices':{'b':True, 'c':True}, 'wrong_choices':{}})
        self.assertTrue(ag.grader_functions['test2'](["c","b"])['correct'])
        self.assertEqual(ag.grader_functions['test2'](["a","b"]),{'correct':False,'score':0, 'correct_choices':{'b':True}, 'wrong_choices':{'a':'fp','c':'fn'}})
        self.assertFalse(ag.grader_functions['test2'](["a","b","c"])['correct'])
        self.assertFalse(ag.grader_functions['test2'](["a"])['correct'])
        self.assertFalse(ag.grader_functions['test2']([])['correct'])
        self.assertTrue(ag.grade('test2',["b","c"])['correct'])
        self.assertFalse(ag.grade('test2',["a"])['correct'])
        self.assertEqual(ag.points('test2'),1)
        self.assertEqual(ag.question_points('problem_2'),1)

        
        #problem that doesn't exist
        self.assertEqual(ag.points('blah'),0)
        self.assertEqual(ag.question_points('blahblah'),0)

            #exception due to using an undefined input name
        with self.assertRaisesRegexp(AutoGraderGradingException, 'Input/Response name="notDef" is not defined in grading template'):
            ag.grade('notDef', ['a','b'])


    def test_parse_xml_question_metadata_no_id(self):
        """Tests for exception when parsing question metadata with no id"""
        
        xml = """
            <exam_metadata>
            <question_metadata>
            </question_metadata>
            </exam_metadata>
            """
        with self.assertRaisesRegexp(AutoGraderMetadataException, 'A <question_metadata> tag has no "id" attribute!'):
            ag = AutoGrader(xml)


    def test_parse_xml_question_metadata_no_response(self):
        """Tests for exception when parsing question metadata with no responses"""
        
        xml = """
            <exam_metadata>
            <question_metadata id="q1">
            </question_metadata>
            </exam_metadata>
            """
        with self.assertRaisesRegexp(AutoGraderMetadataException, '<question_metadata id="q1"> has no <response> child tags!'):
            ag = AutoGrader(xml)

    def test_parse_xml_response_no_name(self):
        """Tests for exception when parsing response with no name"""
        
        xml = """
            <exam_metadata>
            <question_metadata id="q1">
                <response answertype="multiplechoiceresponse"/>
            </question_metadata>
            </exam_metadata>
            """
        with self.assertRaisesRegexp(AutoGraderMetadataException, '.*no name attribute.*'):
            ag = AutoGrader(xml)


    def test_parse_xml_question_response_no_type(self):
        """Tests for exception when parsing response with no answertype"""
        
        xml = """
            <exam_metadata>
            <question_metadata id="q1">
                <response name="foo" />
            </question_metadata>
            </exam_metadata>
            """
        with self.assertRaisesRegexp(AutoGraderMetadataException, '.*no "answertype" attribute.*'):
            ag = AutoGrader(xml)

    def test_parse_xml_question_dup_response(self):
        """
        Tests for exception when parsing XML with duplicate response names
        NOTE: This is not okay even across different questions.
        """
        
        xml = """
            <exam_metadata>
            <question_metadata id="q1">
                <response name="foo" answertype="multiplechoiceresponse">
                    <choice value="a" correct="true" />
                </response>
            </question_metadata>
            <question_metadata id="q2">
                <response name="foo" answertype="multiplechoiceresponse">
                    <choice value="a" correct="true" />
                </response>
            </question_metadata>
            </exam_metadata>
            """
        with self.assertRaisesRegexp(AutoGraderMetadataException, 'Duplicate name "foo".*<response>.*'):
            ag = AutoGrader(xml)


    def test_parse_xml_question_response_no_choices(self):
        """Tests for exception when parsing response with no choices"""
        
        xml = """
            <exam_metadata>
            <question_metadata id="q1">
                <response name="foo" answertype="multiplechoiceresponse" />
            </question_metadata>
            </exam_metadata>
            """
        with self.assertRaisesRegexp(AutoGraderMetadataException, '.*no <choice> descendants.*'):
            ag = AutoGrader(xml)

    def test_parse_xml_question_response_dup_choice(self):
        """
            Tests for exception when parsing response with duplicate choice id
            NOTE: it is okay to duplicate response ids across choices
        """
        
        xml = """
            <exam_metadata>
            <question_metadata id="q1">
                <response name="foo" answertype="multiplechoiceresponse">
                    <choice value="a" correct="true" />
                    <choice value="a" correct="false" />
                </response>
            </question_metadata>
            <question_metadata id="q2">
                <response name="foo2" answertype="multiplechoiceresponse">
                    <choice value="a" correct="true" />
                </response>
            </question_metadata>
            </exam_metadata>
            """
        with self.assertRaisesRegexp(AutoGraderMetadataException, '.*<choice> tags with duplicate value "a"'):
            ag = AutoGrader(xml)

    def test_parse_xml_question_response_no_choice_id(self):
        """
        Tests for exception when parsing choice with no id
        """
        
        xml = """
              <exam_metadata>
              <question_metadata id="q1">
                  <response name="foo" answertype="multiplechoiceresponse">
                      <choice value="a" correct="true"></choice>
                      <choice correct="false"></choice>
                  </response>
              </question_metadata>
              </exam_metadata>
              """
        with self.assertRaisesRegexp(AutoGraderMetadataException, '.*<choice> tag with no "value".*'):
            ag = AutoGrader(xml)

    def test_numericresponse_metadata_errors(self):
        """
        Tests exceptions for numeric responses
        """
        xml1 = """
                <exam_metadata>
                <question_metadata id="problem_4" data-report="Short-answer2">
                    <response name="q4d" answertype="numericalresponse" answer="3.14159" data-report="Value of Pi"
                    correct-points="139" wrong-points="-23">
                        <responseparam type="tolerance" default=".02"></responseparam>
                    </response>
                    <response name="q4e" answertype="numericalresponse"
                    data-report="value of 502*9">
                        <responseparam type="tolerance" default="15%"></responseparam>
                    </response>
                    <response name="q4f" answertype="numericalresponse" answer="5" data-report="number of fingers on a hand"></response>
                </question_metadata>
                </exam_metadata>
              """
        xml2 = """
            <exam_metadata>
            <question_metadata id="problem_4" data-report="Short-answer2">
                <response name="q4d" answertype="numericalresponse" answer="3.1415b9" data-report="Value of Pi"
                correct-points="139" wrong-points="-23">
                    <responseparam type="tolerance" default=".02"></responseparam>
                </response>
            </question_metadata>
            </exam_metadata>
            """

        xml3 = """
            <exam_metadata>
            <question_metadata id="problem_4" data-report="Short-answer2">
                <response name="q4d" answertype="numericalresponse" answer="3.14159" data-report="Value of Pi"
                correct-points="139" wrong-points="-23">
                    <responseparam type="tolerance" default=".0b2"></responseparam>
                </response>
            </question_metadata>
            </exam_metadata>
            """

        with self.assertRaisesRegexp(AutoGraderMetadataException, '.*<response name="q4e"> has no specified answer.*'):
            ag = AutoGrader(xml1)
        
        with self.assertRaisesRegexp(AutoGraderMetadataException, '.*<response name="q4d">, cannot convert answer to number.*'):
            ag = AutoGrader(xml2)

        with self.assertRaisesRegexp(AutoGraderMetadataException, '.*<response name="q4d">, cannot convert tolerance to number.*'):
            ag = AutoGrader(xml3)



    def test_parse_numericresponse_metadata(self):
        """
        Testing driver for numerical response development
        """

        xml = """
            <exam_metadata>
            <question_metadata id="problem_4" data-report="Short-answer2">
                <response name="q4d" answertype="numericalresponse" answer="3.14159" data-report="Value of Pi" 
                          correct-points="139" wrong-points="-23">
                    <responseparam type="tolerance" default=".02"></responseparam>
                </response>
                <response name="q4e" answertype="numericalresponse" answer="4518"
                    data-report="value of 502*9">
                    <responseparam type="tolerance" default="15%"></responseparam>
                </response>
                <response name="q4f" answertype="numericalresponse" answer="5" data-report="number of fingers on a hand"></response>
            </question_metadata>
            </exam_metadata>
            """
        ag = AutoGrader(xml)
        self.assertEqual(ag.grade('q4d', "3.14159"), {'correct':True, 'score':139})
        self.assertTrue(ag.grade('q4d', str(3.14159+0.02))['correct'])
        self.assertTrue(ag.grade('q4d', str(3.14159-0.02))['correct'])
        self.assertEqual(ag.grade('q4d',"3.5"), {'correct':False,'score':-23})
        self.assertFalse(ag.grade('q4d',"3.0")['correct'])
    
        self.assertEqual(ag.grade('q4e', "4518"), {'correct':True, 'score':1})
        self.assertTrue(ag.grade('q4e', str(4518*1.149))['correct'])
        self.assertTrue(ag.grade('q4e', str(4518*0.851))['correct'])
        self.assertEqual(ag.grade('q4e',str(4518*1.151)), {'correct':False, 'score':0})
        self.assertFalse(ag.grade('q4e',str(4518*1.849))['correct'])

        self.assertTrue(ag.grade('q4f', "5")['correct'])
        self.assertFalse(ag.grade('q4f', "4")['correct'])
        self.assertFalse(ag.grade('q4f', "6")['correct'])


    def test_default_with_numericresponse_metadata(self):
        """
        Using the numerical response XML, test AutoGraders with that return "True" and "False" responses if no autograder is defined for a matching
        problemID
        """
        
        xml = """
            <exam_metadata>
            <question_metadata id="problem_4" data-report="Short-answer2">
            <response name="q4d" answertype="numericalresponse" answer="3.14159" data-report="Value of Pi"
            correct-points="139" wrong-points="-23">
            <responseparam type="tolerance" default=".02"></responseparam>
            </response>
            <response name="q4e" answertype="numericalresponse" answer="4518"
            data-report="value of 502*9">
            <responseparam type="tolerance" default="15%"></responseparam>
            </response>
            <response name="q4f" answertype="numericalresponse" answer="5" data-report="number of fingers on a hand"></response>
            </question_metadata>
            </exam_metadata>
            """
        #basic, copied over tests
        ag = AutoGrader(xml)
        self.assertEqual(ag.grade('q4d', "3.14159"), {'correct':True, 'score':139})
        self.assertTrue(ag.grade('q4d', str(3.14159+0.02))['correct'])
        self.assertTrue(ag.grade('q4d', str(3.14159-0.02))['correct'])
        self.assertEqual(ag.grade('q4d',"3.5"), {'correct':False,'score':-23})
        self.assertFalse(ag.grade('q4d',"3.0")['correct'])
        #exception due to using an undefined input name
        with self.assertRaisesRegexp(AutoGraderGradingException, 'Input/Response name="randomDNE" is not defined in grading template'):
            ag.grade('randomDNE', "33")


        agt = AutoGrader(xml, default_return=True)
        self.assertEqual(agt.grade('q4d', "3.14159"), {'correct':True, 'score':139})
        self.assertTrue(agt.grade('q4d', str(3.14159+0.02))['correct'])
        self.assertTrue(agt.grade('q4d', str(3.14159-0.02))['correct'])
        self.assertEqual(agt.grade('q4d',"3.5"), {'correct':False,'score':-23})
        self.assertFalse(agt.grade('q4d',"3.0")['correct'])
        self.assertTrue(agt.grade('randomDNE',"33")['correct']) #This is the actual test

        agf = AutoGrader(xml, default_return=False)
        self.assertEqual(agf.grade('q4d', "3.14159"), {'correct':True, 'score':139})
        self.assertTrue(agf.grade('q4d', str(3.14159+0.02))['correct'])
        self.assertTrue(agf.grade('q4d', str(3.14159-0.02))['correct'])
        self.assertEqual(agf.grade('q4d',"3.5"), {'correct':False,'score':-23})
        self.assertFalse(agf.grade('q4d',"3.0")['correct'])
        self.assertFalse(agf.grade('randomDNE',"33")['correct']) #This is the actual test

        #test points function
        self.assertEqual(ag.points('q4d'),139)
        self.assertEqual(ag.points('q4e'),1)
        self.assertEqual(ag.points('q4f'),1)
        self.assertEqual(ag.points('kadsf'),0)
        self.assertEqual(ag.question_points('problem_4'),141)
        self.assertEqual(ag.question_points('DNE'),0)

    def float_compare(self, a, b, tolerance=0.001):
        print "(%f, %f)" % (a,b)
        return  b * (1-tolerance) <= a and a <= b * (1+tolerance)

    
    def test_resubmission_and_late_penalty(self):
        """Unit test for the discount function """
        #Only resub penalty
        self.assertTrue(self.float_compare(compute_penalties(100, 1, 0, False, 0), 100))
        self.assertTrue(self.float_compare(compute_penalties(100.0, 1, 0, False, 0), 100.0))
        self.assertTrue(self.float_compare(compute_penalties(100.0, 2, 15, False, 0), 85.0))
        self.assertTrue(self.float_compare(compute_penalties(100.0, 3, 15, False, 0), 72.25))
        self.assertTrue(self.float_compare(compute_penalties(100.0, 3, 150, False, 0), 0))
        #Only late penalty
        self.assertTrue(self.float_compare(compute_penalties(100.0, 1, 0, True, 50), 50.0))
        self.assertTrue(self.float_compare(compute_penalties(100.0, 1, 0, False, 50), 100.0))
        self.assertTrue(self.float_compare(compute_penalties(100.0, 1, 0, True, 150), 0))
        self.assertTrue(self.float_compare(compute_penalties(100.0, 1, 0, False, 150), 100.0))
        #Both penalties
        self.assertTrue(self.float_compare(compute_penalties(100.0, 2, 15, True, 50), 42.5))
        self.assertTrue(self.float_compare(compute_penalties(100.0, 3, 15, True, 50), 36.125))
        self.assertTrue(self.float_compare(compute_penalties(100.0, 3, 15, True, 150), 0))
        self.assertTrue(self.float_compare(compute_penalties(100.0, 3, 150, True, 50), 0))

    def test_daily_penalty(self):
        """Unit test for the discount function """
        #Only daily penalty and late penalty
        self.assertTrue(self.float_compare(compute_penalties(100, 1, 0, False, 0, late_days=0, daily_late_penalty=0), 100))
        self.assertTrue(self.float_compare(compute_penalties(100.0, 1, 0, True, 0, late_days=3, daily_late_penalty=10), 100*.9*.9*.9))
        self.assertTrue(self.float_compare(compute_penalties(100.0, 1, 0, True, 50, late_days=3, daily_late_penalty=10), 100*.5*.9*.9*.9))
        self.assertTrue(self.float_compare(compute_penalties(100.0, 1, 0, False, 50, late_days=3, daily_late_penalty=10), 100))
        self.assertTrue(self.float_compare(compute_penalties(100.0, 1, 0, True, 0, late_days=3, daily_late_penalty=110), 0))

        #all penalties
        self.assertTrue(self.float_compare(compute_penalties(100.0, 3, 15, True, 50, late_days=3, daily_late_penalty=10), 100*.85*.85*.5*.9*.9*.9))

    def test_regex_metadata_errors(self):
        """
            Tests exceptions for regex responses
        """
        xml1 = r"""
            <exam_metadata>
            <question_metadata id="problem_4" data-report="Short-answer2">
                <response name="q4d" answertype="regexresponse" correct-points="139" wrong-points="-23">
                </response>
            </question_metadata>
            </exam_metadata>
            """
        xml2 = r"""
            <exam_metadata>
            <question_metadata id="problem_4" data-report="Short-answer2">
                <response name="q4d" answertype="regexresponse" answer="\\(bbd" data-report="Value of Pi"
                correct-points="139" wrong-points="-23">
                </response>
            </question_metadata>
            </exam_metadata>
            """
        
        with self.assertRaisesRegexp(AutoGraderMetadataException, '.*<response name="q4d"> has no specified answer.*'):
            ag = AutoGrader(xml1)
        
        with self.assertRaisesRegexp(AutoGraderMetadataException, '.*<response name="q4d">, your regular expression could not be compiled.*'):
            ag = AutoGrader(xml2)

    def test_regex_responses(self):
        """
        Tests for regex response auto grading
        """
        xml = ur"""
            <exam_metadata>
                <question_metadata id="problem_4" data-report="Short-answer2">
                    <response name="q4d" answertype="regexresponse" answer="b" correct-points="139" wrong-points="-23">
                    </response>
                </question_metadata>
                <question_metadata id="problem_5" data-report="Short-answer3">
                    <response name="q5d" answertype="regexresponse" answer="\(\d*\)" correct-points="139" wrong-points="-23">
                    </response>
                </question_metadata>
                <question_metadata id="problem_6" data-report="Short-answer4">
                    <response name="q6d" answertype="regexresponse" answer="b" correct-points="139" wrong-points="-23">
                       <responseparam flag="IGNORECASE" />
                    </response>
                </question_metadata>
                <question_metadata id="problem_7" data-report="Short-answer5">
                    <response name="q7d" answertype="regexresponse" answer="\\cat" match="true" correct-points="139" wrong-points="-23">
                    </response>
                </question_metadata>
                <question_metadata id="problem_8" data-report="Short-answer6">
                    <response name="q8d" answertype="regexresponse" answer="\\cat" match="true" correct-points="139" wrong-points="-23">
                        <responseparam flag="IGNORECASE" />
                    </response>
                </question_metadata>
                <question_metadata id="problem_9" data-report="Short-answer7">
                    <response name="q9d" answertype="regexresponse" answer="^\([0-9b]*\)$" correct-points="139" wrong-points="-23">
                        <responseparam flag="IGNORECASE" />
                        <responseparam flag="MULTILINE" />
                    </response>
                </question_metadata>
                <question_metadata id="problem_10" data-report="Short-answer8">
                    <response name="q10d" answertype="regexresponse" match="true" answer="^\([0-9b&amp;是]*\)$" correct-points="139" wrong-points="-23">
                        <responseparam flag="IGNORECASE" />
                        <responseparam flag="MULTILINE" />
                        <responseparam flag="UNICODE" />
                    </response>
                </question_metadata>
                <question_metadata id="problem_11" data-report="Short-answer9">
                    <response name="q11d" answertype="regexresponse" answer="&quot;&amp;&lt;是" correct-points="139" wrong-points="-23">
                    </response>
                </question_metadata>
            </exam_metadata>
            """
        
        ag = AutoGrader(xml)
        #No flags, basic testing whether answer contains b
        self.assertTrue(ag.grade('q4d', "zbx")['correct'])
        self.assertTrue(ag.grade('q4d', "(90dbs)")['correct'])
        self.assertFalse(ag.grade('q4d', "(m)")['correct'])
        self.assertFalse(ag.grade('q4d', "")['correct'])
        
        #No flags, testing for special symbols and escaping with '\'
        self.assertTrue(ag.grade('q5d', "()")['correct'])
        self.assertTrue(ag.grade('q5d', "(5)")['correct'])
        self.assertTrue(ag.grade('q5d', "(523490)")['correct'])
        self.assertFalse(ag.grade('q5d', "(m)")['correct'])
        self.assertFalse(ag.grade('q5d', "(53m23)")['correct'])
        self.assertFalse(ag.grade('q5d', "(502")['correct'])
        self.assertFalse(ag.grade('q5d', "291)")['correct'])
    
        #IGNORECASE flag, testing whether answer contains b or B
        self.assertTrue(ag.grade('q6d', "bbx")['correct'])
        self.assertTrue(ag.grade('q6d', "(b90ds)")['correct'])
        self.assertTrue(ag.grade('q6d', "sBxd")['correct'])
        self.assertTrue(ag.grade('q6d', "(9Bds)")['correct'])
        self.assertFalse(ag.grade('q6d', "(m)")['correct'])
        self.assertFalse(ag.grade('q6d', "k*9dvj")['correct'])
        self.assertFalse(ag.grade('q6d', "")['correct'])

        #testing using `match` whether answer starts with \cat
        self.assertTrue(ag.grade('q7d', r"\catalog")['correct'])
        self.assertTrue(ag.grade('q7d', r"\catatonic")['correct'])
        self.assertTrue(ag.grade('q7d', r"\catalan(5)")['correct'])
        self.assertTrue(ag.grade('q7d', r"\cat")['correct'])
        self.assertFalse(ag.grade('q7d', r"a\cat")['correct'])
        self.assertFalse(ag.grade('q7d', r"catamaran")['correct'])
        self.assertFalse(ag.grade('q7d', r"\Catalan")['correct'])
        self.assertFalse(ag.grade('q7d', r"a\Catm")['correct'])
        self.assertFalse(ag.grade('q7d', r"a\concatentation")['correct'])
        self.assertFalse(ag.grade('q7d', r"")['correct'])

        #testing using `match` and IGNORECASE whether answer starts with \cAt
        self.assertTrue(ag.grade('q8d', r"\catalog")['correct'])
        self.assertTrue(ag.grade('q8d', r"\caTatonic")['correct'])
        self.assertTrue(ag.grade('q8d', r"\cAtalan(5)")['correct'])
        self.assertTrue(ag.grade('q8d', r"\Cat")['correct'])
        self.assertFalse(ag.grade('q8d', r"a\cat")['correct'])
        self.assertFalse(ag.grade('q8d', r"catamaran")['correct'])
        self.assertTrue(ag.grade('q8d', r"\Catalan")['correct'])
        self.assertFalse(ag.grade('q8d', r"a\Catm")['correct'])
        self.assertFalse(ag.grade('q8d', r"a\concatentation")['correct'])
        self.assertFalse(ag.grade('q8d', r"")['correct'])

        #testing with `search`, IGNORECASE and MULTILINE
        self.assertTrue(ag.grade('q9d', u"(5)")['correct'])
        self.assertTrue(ag.grade('q9d', u"(5bb1)\nagb")['correct'])
        self.assertTrue(ag.grade('q9d', u"agb\n(5bb1)")['correct'])
        self.assertTrue(ag.grade('q9d', u"agb\n\n(523B31)")['correct'])
        self.assertFalse(ag.grade('q9d', ur"a\cat")['correct'])
        self.assertFalse(ag.grade('q9d', u"(5c2)")['correct'])
        self.assertFalse(ag.grade('q9d', u"(5C2)")['correct'])
        self.assertFalse(ag.grade('q9d', u"")['correct'])
        self.assertFalse(ag.grade('q9d', u"k(5)")['correct'])
        self.assertFalse(ag.grade('q9d', u"agb\n4(5是bb1)")['correct'])
        self.assertFalse(ag.grade('q9d', u"agb\n(523B31)8")['correct'])

        #testing with `match`, IGNORECASE, UNICODE, MULTILINE
        self.assertTrue(ag.grade('q10d', u"(5)")['correct'])
        self.assertTrue(ag.grade('q10d', u"(5是)")['correct'])
        self.assertTrue(ag.grade('q10d', u"(5b&)")['correct'])
        self.assertTrue(ag.grade('q10d', u"(5b&b1是)\nagb")['correct'])
        self.assertFalse(ag.grade('q10d', u"agb\n(5B&b1)")['correct'])
        self.assertFalse(ag.grade('q10d', u"agb\n\n(523B31)")['correct'])
        self.assertFalse(ag.grade('q10d', ur"a\cat")['correct'])
        self.assertFalse(ag.grade('q10d', u"(5c是2)")['correct'])
        self.assertFalse(ag.grade('q10d', u"(5C2)")['correct'])
        self.assertFalse(ag.grade('q10d', u"")['correct'])
        self.assertFalse(ag.grade('q10d', u"k(5是)")['correct'])
        self.assertFalse(ag.grade('q10d', u"4(5bb1)\n3")['correct'])
        self.assertFalse(ag.grade('q10d', u"(523B31)8\n3220")['correct'])

        #special testing for how to encode invalid characters in the answer attribute
        #also test that the scores are not screwed up
        self.assertEqual(ag.grade('q11d', u'"&<是'), {'correct':True, 'score':139})
        self.assertEqual(ag.grade('q11d', u'"&<是3'), {'correct':True, 'score':139})
        self.assertEqual(ag.grade('q11d', u'5"&<是3'), {'correct':True, 'score':139})
        self.assertEqual(ag.grade('q11d', u'5"&<否3'), {'correct':False, 'score':-23})
        self.assertEqual(ag.grade('q11d', u'"&fam是k<3'), {'correct':False, 'score':-23})
    
    def test_string_metadata_errors(self):
        """
        Tests exceptions for string responses
        """
        xml1 = r"""
            <exam_metadata>
                <question_metadata id="problem_4" data-report="Short-answer2">
                    <response name="q4d" answertype="stringresponse" correct-points="139" wrong-points="-23">
                    </response>
                </question_metadata>
            </exam_metadata>
            """
        xml2 = r"""
            <exam_metadata>
                <question_metadata id="problem_5" data-report="Short-answer3">
                    <response name="q4e" answertype="stringresponse" answer="" correct-points="139" wrong-points="-23">
                    </response>
                </question_metadata>
            </exam_metadata>
            """
        
        with self.assertRaisesRegexp(AutoGraderMetadataException, '.*<response name="q4d"> has no specified answer.*'):
            ag = AutoGrader(xml1)

        with self.assertRaisesRegexp(AutoGraderMetadataException, '.*<response name="q4e"> has no specified answer.*'):
            ag = AutoGrader(xml2)

    def test_string_responses(self):
        """
            Tests string responses
        """
        xml = ur"""
            <exam_metadata>
                <question_metadata id="problem_4" data-report="Short-answer2">
                    <response name="q4d" answertype="stringresponse" answer="¡TheRightAnswer是!" correct-points="139" wrong-points="-23">
                    </response>
                </question_metadata>
                <question_metadata id="problem_5" data-report="Short-answer3">
                    <response name="q5d" answertype="stringresponse" answer="    ¡TheRightAnswer是!  " correct-points="139" wrong-points="-23">
                    </response>
                </question_metadata>
                <question_metadata id="problem_6" data-report="Short-answer4">
                    <response name="q6d" answertype="stringresponse" answer="¡TheRightAnswer是!" ignorecase="true" correct-points="139" wrong-points="-23">
                    </response>
                </question_metadata>
                <question_metadata id="problem_7" data-report="Short-answer5">
                    <response name="q7d" answertype="stringresponse" answer="    ¡TheRightAnswer是!  " ignorecase="true" correct-points="139" wrong-points="-23">
                    </response>
                </question_metadata>
            </exam_metadata>
            """
        ag = AutoGrader(xml)
        #basic test, including unicode
        self.assertEqual(ag.grade("q4d", u"¡TheRightAnswer是!"),         {'correct':True, 'score':139})
        self.assertEqual(ag.grade("q4d", u"    ¡TheRightAnswer是!  "),  {'correct':True, 'score':139})
        self.assertEqual(ag.grade("q4d", u"¡therightanswer是!"),         {'correct':False, 'score':-23})
        self.assertEqual(ag.grade("q4d", u"TheWrongAnswer是!"),          {'correct':False, 'score':-23})
        #testing strip() in answer xml, including unicode
        self.assertEqual(ag.grade("q5d", u"¡TheRightAnswer是!"),         {'correct':True, 'score':139})
        self.assertEqual(ag.grade("q5d", u"    ¡TheRightAnswer是!  "),  {'correct':True, 'score':139})
        self.assertEqual(ag.grade("q5d", u"¡therightanswer是!"),         {'correct':False, 'score':-23})
        self.assertEqual(ag.grade("q5d", u"TheWrongAnswer是!"),          {'correct':False, 'score':-23})
        #case-insensitive test, including unicode
        self.assertEqual(ag.grade("q6d", u"¡TheRightAnswer是!"),         {'correct':True, 'score':139})
        self.assertEqual(ag.grade("q6d", u"    ¡TheRightAnswer是!  "),  {'correct':True, 'score':139})
        self.assertEqual(ag.grade("q6d", u"¡therightanswer是!"),         {'correct':True, 'score':139})
        self.assertEqual(ag.grade("q6d", u"TheWrongAnswer是!"),          {'correct':False, 'score':-23})
        #case insensitive testing strip() in answer xml, including unicode
        self.assertEqual(ag.grade("q7d", u"¡TheRightAnswer是!"),         {'correct':True, 'score':139})
        self.assertEqual(ag.grade("q7d", u"    ¡TheRightAnswer是!  "),  {'correct':True, 'score':139})
        self.assertEqual(ag.grade("q7d", u"¡therightanswer是!"),         {'correct':True, 'score':139})
        self.assertEqual(ag.grade("q7d", u"TheWrongAnswer是!"),          {'correct':False, 'score':-23})

    

    ### INTERACTIVE AUTOGRADER ###

    interactive_xml = """
<exam_metadata>

    <question_metadata id="q1" data-report="q1">
        <solution></solution>
        <response name="q1b" answertype="dbinteractiveresponse">
            <grader_name>SQL_Grader_schroot</grader_name>
            <database-file>sql-social-query2.db</database-file>
            <answer-file>sql-social-query-ans2.txt</answer-file>
            <select_dict></select_dict>
            <parameters>
                <qnum>1</qnum>
                <answer-text>Enter your SQL query here</answer-text>
            </parameters>
        </response>
    </question_metadata>

    <question_metadata id="q2" data-report="q2">
        <solution></solution>
        <response name="q2b" answertype="dbinteractiveresponse">
            <grader_name>SQL_Grader_schroot</grader_name>
            <database-file>sql-social-query2.db</database-file>
            <answer-file>sql-social-query-ans2.txt</answer-file>
            <select_dict></select_dict>
            <parameters>
                <qnum>2</qnum>
                <answer-text>Enter your SQL query here</answer-text>
            </parameters>
        </response>
    </question_metadata>

</exam_metadata>
"""

    def test_interactive_grader_required_elements(self):
        """Interactive grader requires some XML elements"""

        elements = ["database-file", "parameters", "select_dict", "answer-file"]
        for elem in elements:
            open_tag = "<" + elem + ">"
            close_tag = "</" + elem + ">"
            # re.S flag so the regexp can match newlines between elements
            partial_xml = re.sub("%s.*%s" % (open_tag, close_tag), 
                    "", self.interactive_xml, flags=re.S)
            with self.assertRaisesRegexp(AutoGraderMetadataException,
                    ".*A <%s> element is required" % elem):
                AutoGrader(partial_xml)


    def test_interactive_grader_basic(self):
        """
        Interactive autograder with fake remote endpoint (basic)

        Uses some XML from a db class interactive exercise, but the actual values
        aren't used since we just fake out the endpoint.

        The trick here is overriding the global method that urllib2 uses to open
        files.  You have to remember to restore urllib2 to a good state before 
        finishing though otherwise urllib2 will be horked.  Method cribbed from:
            http://stackoverflow.com/questions/2276689/how-do-i-unit-test-a-module-that-relies-on-urllib2

        Work for this is done in fake_remote_grader.py
        """

        ag = AutoGrader(self.interactive_xml)

        self.assertEqual(ag.points_possible, 2.0)
        self.assertEqual(len(ag.grader_functions), 2)

        # the feedback is opaque, so just carry that around
        fb = [{"user_answer": "user-input", "explanation": "grader-output", "score": 0}]
        fbstr = json.dumps(fb)

        with fake_remote_grader('{"score":0, "maximum-score":1, "feedback":%s}' % fbstr):
            g = ag.grade("q1b", "should_fail")
            self.assertEqual(g, {'correct': False, 'score': 0, 'feedback': fb})

        with fake_remote_grader('{"score":1, "maximum-score":1, "feedback":%s}' % fbstr):
            g = ag.grade("q1b", "should_succeed")
            self.assertEqual(g, {'correct': True, 'score': 1, 'feedback': fb})

        with fake_remote_grader('{"score":10, "maximum-score":10, "feedback":%s}' % fbstr):
            g = ag.grade("q1b", "should_succeed")
            self.assertEqual(g, {'correct': True, 'score': 1, 'feedback': fb})

            g = ag.grade("q2b", "should_succeed")
            self.assertEqual(g, {'correct': True, 'score': 1, 'feedback': fb})

        with fake_remote_grader('{"score":1, "feedback":%s}' % fbstr):
            g = ag.grade("q1b", "should_succeed")
            self.assertEqual(g, {'correct': True, 'score': 1, 'feedback': fb})

        with fake_remote_grader('{"score":0, "feedback":%s}' % fbstr):
            g = ag.grade("q1b", "should_fail")
            self.assertEqual(g, {'correct': False, 'score': 0, 'feedback': fb})


    def test_interactive_grader_unicode(self):
        """Interactive autograder with fake remote endpoint (unicode)"""

        ag = AutoGrader(self.interactive_xml)

        ascii_string = "ascii test string"
        unicode_string = u'娱乐资讯请点击'    # "click infotainment" from china.com homepage

        fb = [{"user_answer": "user-input", "explanation": "grader-output", "score": 0}]
        fbstr = json.dumps(fb)

        with fake_remote_grader('{"score":0, "feedback":%s}' % fbstr):
            g = ag.grade("q1b", ascii_string)
            self.assertEqual(g, {'correct': False, 'score': 0, 'feedback': fb})

        with fake_remote_grader('{"score":0, "feedback":%s}' % fbstr):
            g = ag.grade("q1b", unicode_string)
            self.assertEqual(g, {'correct': False, 'score': 0, 'feedback': fb})

    @attr('slow')
    def test_interactive_bad_input(self):
        """Interactive autograder error handling, bad input

        The interactive autograder needs to handle all sorts of
        cases where the remote grader fails.  The right behavior
        is to retry until it can get a valid grade, and if it can't,
        give up instead of scoring a failure.
        """

        ag = AutoGrader(self.interactive_xml)

        # we've seen a sick grader time out like this -- shouldn't grade
        bad_return = r'{"score":0,"maximum-score":1,"feedback":[{"user_answer":"<result> {for $c1 in doc(\"countries.xml\")//country let $d1 := ($c1/@population div $c1/@area) for $c2 in doc(\"countries.xml\")//country let $d2:= ($c2/@population div $c2/@area) where $d1 >= $d2 return <highest density = \"{$d1}\">{data($c1/@name)} </highest>}  {for $c1 in doc(\"countries.xml\")//country let $d1 := ($c1/@population div $c1/@area) for $c2 in doc(\"countries.xml\")//country let $d2:= ($c2/@population div $c2/@area) where $d1 <= $d2 return <lowest density = \"{$d1}\">{data($c1/@name)} </lowest>} </result>","score":0,"explanation":"Timeout Error"}]}'
        with fake_remote_grader(bad_return):
            with self.assertRaises(AutoGraderGradingException):
                g = ag.grade("q1b", "should throw exception")

        # we've seen a sick grader time out like this too
        no_explanation_score0 = r'{"score":0, "maximum":1, "feedback":[{"explanation":""}]}'
        with fake_remote_grader(no_explanation_score0):
            with self.assertRaises(AutoGraderGradingException):
                g = ag.grade("q1b", "should throw exception")

        # but same thing with score=1 should be OK though (never penalize for no explanation)
        no_explanation_score1 = r'{"score":1.0, "maximum":1, "feedback":[{"explanation":""}]}'
        with fake_remote_grader(no_explanation_score1):
            g = ag.grade("q1b", "should be OK")
            self.assertEqual(g, {'correct': True, 'score': 1.0, 'feedback': [{"explanation": ""}] })

    @attr('slow')
    def test_interactive_retries(self):
        """Interactive autograder error handling, retry logic"""

        fb = [{"user_answer": "user-input", "explanation": "grader-output", "score": 0}]
        fbstr = json.dumps(fb)
        ag = AutoGrader(self.interactive_xml)

        for i in range(3):
            # up to four attempts are allowed
            with fake_remote_grader_fails('{"score":0, "feedback":%s}' % fbstr, fail_for=i+1):
                g = ag.grade("q1b", "should eventually score, incorrectly")
                self.assertEqual(g, {'correct': False, 'score': 0, 'feedback': fb})

        with fake_remote_grader_fails('{"score":0, "feedback":%s}' % fbstr, fail_for=4):
            with self.assertRaises(AutoGraderGradingException):
                g = ag.grade("q1b", "should eventually score, incorrectly")

    @attr('slow')
    def test_grader_caching(self):
        """interactive autograder caching
        
        This test relies on the fake grader that will succeed only n times.
        this can test if we are hitting the cache or not.
        """

        fb = [{"user_answer": "user-input", "explanation": "grader-output", "score": 0}]
        fbstr = json.dumps(fb)
        ag = AutoGrader(self.interactive_xml)

        # this one should succeed: grade twice, same key, cache hit
        with fake_remote_grader_fails('{"score":0, "feedback":%s}' % fbstr, fail_after=1):
            g = ag.grade("q1b", "same thing twice, should work because second hits the cache")
            self.assertEqual(g, {'correct': False, 'score': 0, 'feedback': fb})

            g = ag.grade("q1b", "same thing twice, should work because second hits the cache")
            self.assertEqual(g, {'correct': False, 'score': 0, 'feedback': fb})

        # this one should fail: grade twice, different keys, cache miss
        with fake_remote_grader_fails('{"score":0, "feedback":%s}' % fbstr, fail_after=1):
            g = ag.grade("q1b", "normal request")
            self.assertEqual(g, {'correct': False, 'score': 0, 'feedback': fb})

            with self.assertRaises(AutoGraderGradingException):
                g = ag.grade("q1b", "another request, different cache key = cache miss")

########NEW FILE########
__FILENAME__ = views
import copy
import csv
import datetime
import HTMLParser
import json
import logging
import markdown
import operator
import math
from pytz import timezone

from django.db.models import Max, F

import settings

FILE_DIR = getattr(settings, 'FILE_UPLOAD_TEMP_DIR', '/tmp')
AWS_ACCESS_KEY_ID = getattr(settings, 'AWS_ACCESS_KEY_ID', '')
AWS_SECRET_ACCESS_KEY = getattr(settings, 'AWS_SECRET_ACCESS_KEY', '')
AWS_SECURE_STORAGE_BUCKET_NAME = getattr(settings, 'AWS_SECURE_STORAGE_BUCKET_NAME', '')

logger = logging.getLogger(__name__)

from c2g.models import ContentGroup, Exam, ExamRecord, ExamScore, ExamScoreField, ExamRecordScore, ExamRecordScoreField, ExamRecordFieldLog, ExamRecordScoreFieldChoice, ContentSection, PageVisitLog, parse_video_exam_metadata, StudentExamStart
from django.contrib.auth.models import User
from django.http import HttpResponse, HttpResponseBadRequest, Http404, HttpResponseRedirect
from django.shortcuts import render_to_response
from django.template import RequestContext
from django.core.validators import validate_slug, ValidationError
from courses.actions import always_switch_mode, auth_view_wrapper, auth_is_course_admin_view_wrapper, create_contentgroup_entries_from_post
from django.views.decorators.http import require_POST
from django.core.urlresolvers import reverse
from courses.exams.autograder import AutoGrader, AutoGraderGradingException 
from courses.course_materials import get_course_materials
from storages.backends.s3boto import S3BotoStorage
from django.utils.timezone import get_default_timezone_name
from courses.exams.tasks import generate_submission_csv_task
from django.contrib import messages


@auth_view_wrapper
def listAll(request, course_prefix, course_suffix, show_types=["exam",]):
    
    cpd    = request.common_page_data
    course = cpd['course']

    if course.mode == "draft":         # draft mode, lists grades
        exams = list(Exam.objects.filter(course=course, is_deleted=0, exam_type__in=show_types))

        scores = []
        for e in exams:
            score = ExamScore.objects.filter(course=course, exam=e, student=request.user) #unique_together = ("exam", "student")
            if score:
                sc = score[0].score
                if score[0].examrecordscore:
                    max_score = score[0].examrecordscore.record.get_total_score() #this is only edit mode, so not gonna optimize
                else:
                    max_score = e.max_score
                pair = (sc, max_score)
            scores.append(pair if score else None)

        return render_to_response('exams/list.html',
                                  {'common_page_data':cpd,
                                  'exams_and_scores':zip(exams,scores)},
                                  RequestContext(request))

    else:                              # ready mode, uses section structures
        section_structures = get_course_materials(common_page_data=cpd, get_exam_content=True, exam_types=show_types)
        ex_type = show_types[0] if show_types else "exam" 
        
        return render_to_response('exams/ready/list.html', 
                                  {'common_page_data': cpd, 
                                   'section_structures':section_structures, 
                                   'reverse_show':ex_type+'_show', 
                                  }, 
                                  context_instance=RequestContext(request))

@auth_view_wrapper
def confirm(request, course_prefix, course_suffix, exam_slug):
    
    course = request.common_page_data['course']
        
    try:
        exam = Exam.objects.get(course=course, is_deleted=0, slug=exam_slug)
    except Exam.DoesNotExist:
        raise Http404

    slug_for_leftnav = exam_slug

    ready_section = exam.section
    if ready_section and ready_section.mode == "draft":
        ready_section = ready_section.image

    minutesallowed = exam.minutesallowed if exam.minutesallowed else 999

    allowed_timedelta = datetime.timedelta(minutes=minutesallowed)

    endtime = datetime.datetime.now() + allowed_timedelta
    
    endtime = min(endtime, exam.partial_credit_deadline)

    return render_to_response('exams/confirm.html',
                              {'common_page_data':request.common_page_data, 'course': course, 'exam':exam, 'ready_section':ready_section,
                              'endtime': endtime, 'slug_for_leftnav':slug_for_leftnav, 'minutesallowed':minutesallowed,
                              }, RequestContext(request))

@auth_view_wrapper
def show_exam(request, course_prefix, course_suffix, exam_slug):
    course = request.common_page_data['course']
    
    try:
        exam = Exam.objects.get(course=course, is_deleted=0, slug=exam_slug)
    except Exam.DoesNotExist:
        raise Http404

    too_many_attempts = exam.max_attempts_exceeded(request.user)

    too_recent = False
    last_record = last_completed_record(exam, request.user, include_contentgroup=True)

    if last_record and (datetime.datetime.now() - last_record.last_updated) < datetime.timedelta(minutes=exam.minutes_btw_attempts):
        too_recent = True

    if (not too_many_attempts) and (not too_recent) and exam.timed \
        and request.GET.get("confirm", "") != "True" and not StudentExamStart.objects.filter(student=request.user, exam=exam).exists():
        return HttpResponseRedirect(reverse('confirm_exam_start', args=(course.prefix, course.suffix, exam.slug)))

    if not request.common_page_data['is_course_admin']:
        visit_log = PageVisitLog(
            course = request.common_page_data['ready_course'],
            user = request.user,
            page_type = exam.exam_type,
            object_id = str(exam.id),
        )
        visit_log.save()

    ready_section = exam.section
    if ready_section and ready_section.mode == "draft":
        ready_section = ready_section.image

    #Get the slug of the parent exam of all variations, which we need to highlight in the left navbar
    try:
        cginfo = ContentGroup.groupinfo_by_id('exam', exam.id)
        parent_tag = cginfo.get('__parent_tag', '')
        parent = cginfo.get('__parent', None)
        if parent_tag != 'exam':
            slug_for_leftnav = exam.slug
        elif not parent:
            slug_for_leftnav = exam.slug
        else:
            slug_for_leftnav = parent.slug
    except ContentGroup.DoesNotExist:
        slug_for_leftnav = exam.slug

    incomplete_record = get_or_update_incomplete_examrecord(course, exam, request.user)

    #if the student has a saved ExamRecord, use the __renderedQuestions field of json_score_data
    #in that saved ExamRecord, otherwise we choose randomly
    rendered_questions = incomplete_record.get_rendered_questions()

    if isinstance(rendered_questions, list):
        retv = exam.getHTML(question_ids=rendered_questions)
        rendered_exam_html = retv['html']
        rendered_questions = json.dumps(retv['question_ids'])
    else:
        #Now we have to figure out which questions to show
        #First see if there is a choosenquestions parameter
        if exam.num_random_questions():
            retv = exam.getHTML()
            rendered_exam_html = retv['html']
            rendered_questions = json.dumps(retv['question_ids'])
        else:
            #nothing random.  just serve content as is
            rendered_exam_html = exam.html_content
            rendered_questions = ""


    #Code for timed exam
    timeopened = datetime.datetime.now()

    editable = not exam.past_all_deadlines()  #editable controls whether the inputs are enabled or disabled
    allow_submit = not exam.past_all_deadlines() #allow submit controls whether diabled inputs can be reenabled and whether to show the submit button

    if exam.timed:
        startobj, created = StudentExamStart.objects.get_or_create(student=request.user, exam=exam)
        endtime = startobj.time_created + datetime.timedelta(minutes=exam.minutesallowed)
        endtime = min(endtime, exam.partial_credit_deadline)
        
        if timeopened > endtime :
            editable = False
            allow_submit = False
                
    else:
        endtime = None

    

    return render_to_response('exams/view_exam.html', {'common_page_data':request.common_page_data,
                              'json_pre_pop':incomplete_record.json_data, 'too_recent':too_recent,
                              'last_record':last_record, 'ready_section':ready_section, 'slug_for_leftnav':slug_for_leftnav,
                              'scores':"{}",'editable':editable,'single_question':exam.display_single,'videotest':False,
                              'allow_submit':allow_submit, 'too_many_attempts':too_many_attempts,
                              'endtime':endtime, 'timeopened':timeopened, 'rendered_exam_html':rendered_exam_html,
                              'rendered_questions':rendered_questions,
                              'exam':exam,}, RequestContext(request))


def last_completed_record(exam, student, include_contentgroup=False):
    """Helper function to get the last completed record of this exam.
       If include_contentgroup is True, will include records from
       all of the other exams in the contentgroup.
    """
    try:
        if include_contentgroup:
            cginfo = ContentGroup.groupinfo_by_id('exam',exam.id)
            exam_list = cginfo.get('exam',[exam]) # default to a 1-item list with only this exam
            record = ExamRecord.objects.filter(exam__in=exam_list, complete=True, student=student).latest('last_updated')
        else:
            record = ExamRecord.objects.filter(exam=exam, complete=True, student=student).latest('last_updated')
        return record

    except ExamRecord.DoesNotExist:
        return None

@require_POST
@auth_view_wrapper
def show_populated_exam(request, course_prefix, course_suffix, exam_slug):
    course = request.common_page_data['course']
    parser = HTMLParser.HTMLParser()
    json_pre_pop = parser.unescape(request.POST['json-pre-pop'])
    json_pre_pop_correx = parser.unescape(request.POST['json-pre-pop-correx'])
    scores = request.POST.get('scores',"{}")
    editable = request.POST.get('latest', False)
 
    try:
        exam = Exam.objects.get(course=course, is_deleted=0, slug=exam_slug)
    except Exam.DoesNotExist:
        raise Http404

    too_many_attempts = exam.max_attempts_exceeded(request.user)

    ready_section = exam.section
    if ready_section and ready_section.mode == "draft":
        ready_section = ready_section.image

    #Get the slug of the parent exam of all variations, which we need to highlight in the left navbar
    try:
        cginfo = ContentGroup.groupinfo_by_id('exam', exam.id)
        parent_tag = cginfo.get('__parent_tag', '')
        parent = cginfo.get('__parent', None)
        if parent_tag != 'exam':
            slug_for_leftnav = exam.slug
        elif not parent:
            slug_for_leftnav = exam.slug
        else:
            slug_for_leftnav = parent.slug
    except ContentGroup.DoesNotExist:
        slug_for_leftnav = exam.slug

    #if the student has a saved ExamRecord, use the __renderedQuestions field of json_score_data
    #in that saved ExamRecord, otherwise we choose randomly
    try:
        correx_obj = json.loads(json_pre_pop_correx)
    except ValueError:
        correx_obj = {}
    
    
    #Now we have to figure out which questions to show
    #First see if there is a choosenquestions parameter
    if isinstance(correx_obj, dict) and isinstance(correx_obj.get('__rendered_questions'), list):
        retv = exam.getHTML(question_ids=correx_obj.get('__rendered_questions'))
        rendered_exam_html = retv['html']
        rendered_questions = json.dumps(correx_obj.get('__rendered_questions'))
    else:
        #serve content as is
        rendered_exam_html = exam.html_content
        rendered_questions = ""

    
    #Code for timed exams
    allow_submit = not exam.past_all_deadlines() #allow submit controls whether diabled inputs can be reenabled and whether to show the submit button
        
    timeopened = datetime.datetime.now()
    
    if exam.timed:
        startobj, created=StudentExamStart.objects.get_or_create(student=request.user, exam=exam)
        endtime = startobj.time_created + datetime.timedelta(minutes=exam.minutesallowed)
        endtime = min(endtime, exam.partial_credit_deadline)

        if timeopened > endtime :
            editable = False
            allow_submit = False
    else:
        endtime = None


    return render_to_response('exams/view_exam.html', {'common_page_data':request.common_page_data, 'exam':exam, 'json_pre_pop':json_pre_pop,
                                                       'slug_for_leftnav':slug_for_leftnav, 'ready_section':ready_section, 
                                                       'json_pre_pop_correx':json_pre_pop_correx, 'scores':scores, 'editable':editable, 'endtime':endtime,
                                                       'allow_submit':allow_submit, 'timeopened':timeopened, 'too_many_attempts':too_many_attempts,
                                                       'rendered_exam_html':rendered_exam_html, 'rendered_questions':rendered_questions,},
                              RequestContext(request))

@auth_view_wrapper
def show_graded_exam(request, course_prefix, course_suffix, exam_slug, type="exam"):
    course = request.common_page_data['course']
    
    try:
        exam = Exam.objects.get(course=course, is_deleted=0, slug=exam_slug)
    except Exam.DoesNotExist:
        raise Http404

    try:
        record = ExamRecord.objects.filter(course=course, exam=exam, student=request.user, complete=True, time_created__lt=exam.grace_period).latest('time_created')
        #call show_graded_record to for code reuse
        return show_graded_record(request, course_prefix, course_suffix, exam_slug, record.id, type=type)
        
    except ExamRecord.DoesNotExist:
        raise Http404


@auth_view_wrapper
def show_graded_record(request, course_prefix, course_suffix, exam_slug, record_id, type="exam"):
    course = request.common_page_data['course']
    
    try:
        exam = Exam.objects.get(course=course, is_deleted=0, slug=exam_slug)
    except Exam.DoesNotExist:
        raise Http404
    
    try:
        #the addition of the user filter performs access control
        record = ExamRecord.objects.get(id=record_id, course=course, exam=exam, student=request.user, complete=True)
        json_pre_pop = record.json_data
        if record.json_score_data:
            correx_obj = json.loads(record.json_score_data)
        else:
            correx_obj = {}

        correx_obj['__metadata__'] = exam.xml_metadata if exam.xml_metadata else "<empty></empty>"
        json_pre_pop_correx = json.dumps(correx_obj)
        score = record.score
        
        share_block_title = None
        share_block_type = 'standard'
        if score:
            share_block_title = 'Share your Results!'
            share_block_type = 'score'

    except ExamRecord.DoesNotExist:
        raise Http404


    try:
        score_obj = ExamRecordScore.objects.get(record=record)
        raw_score = score_obj.raw_score
        score_fields = {}
        for s in list(ExamRecordScoreField.objects.filter(parent=score_obj)):
            score_fields[s.field_name] = s.subscore
        scores_json = json.dumps(score_fields)

    except ExamRecordScore.DoesNotExist, ExamRecordScore.MultipleObjectsReturned:
        raw_score = None
        scores_json = "{}"

    ready_section = exam.section
    if ready_section and ready_section.mode == "draft":
        ready_section = ready_section.image

    #Get the slug of the parent exam of all variations, which we need to highlight in the left navbar
    try:
        cginfo = ContentGroup.groupinfo_by_id('exam', exam.id)
        parent_tag = cginfo.get('__parent_tag', '')
        parent = cginfo.get('__parent', None)
        if parent_tag != 'exam':
            slug_for_leftnav = exam.slug
        elif not parent:
            slug_for_leftnav = exam.slug
        else:
            slug_for_leftnav = parent.slug
    except ContentGroup.DoesNotExist:
        slug_for_leftnav = exam.slug

    #Now we have to figure out which questions to show
    #First see if there is a choosenquestions parameter
    rendered_questions = record.get_rendered_questions()

    if isinstance(rendered_questions, list):
        retv = exam.getHTML(question_ids=rendered_questions)
        rendered_exam_html = retv['html']
        rendered_questions = json.dumps(retv['question_ids'])
        total_score = record.get_total_score()
    else:
        rendered_exam_html = exam.html_content
        rendered_questions = ""
        total_score = exam.total_score


    return render_to_response('exams/view_exam.html', {
        'common_page_data':      request.common_page_data,
        'exam':                  exam,
        'json_pre_pop':          json_pre_pop,
        'scores':                scores_json,
        'score':                 score,
        'share_block_title':     share_block_title,
        'share_block_type':      share_block_type,
        'total_score':           total_score,
        'json_pre_pop_correx':   json_pre_pop_correx,
        'editable':              False,
        'raw_score':             raw_score,
        'allow_submit':          False,
        'ready_section':         ready_section,
        'slug_for_leftnav':      slug_for_leftnav,
        'rendered_exam_html':    rendered_exam_html,
        'rendered_questions':    rendered_questions,
    }, RequestContext(request))


@auth_view_wrapper
def view_my_submissions(request, course_prefix, course_suffix, exam_slug):
    course = request.common_page_data['course']
    
    try:
        exam = Exam.objects.get(course=course, is_deleted=0, slug=exam_slug)
    except Exam.DoesNotExist:
        raise Http404

    subs = list(ExamRecord.objects.filter(course=course, exam=exam, student=request.user, complete=True, time_created__lt=exam.grace_period).order_by('-time_created'))

    my_subs = map(lambda s: my_subs_helper(s), subs)

    try:
        score_obj = ExamScore.objects.get(course=course, exam=exam, student=request.user)
        score = score_obj.score
        score_fields = {}
        for s in list(ExamScoreField.objects.filter(parent=score_obj)):
            score_fields[s.field_name] = s.subscore

    except ExamScore.DoesNotExist, ExamScore.MultipleObjectsReturned:
        score = None
        score_fields = {}

    return render_to_response('exams/view_my_submissions.html', {'common_page_data':request.common_page_data, 'exam':exam, 'my_subs':my_subs,
                              'score_fields':json.dumps(score_fields), 'score':score,}, RequestContext(request) )

def my_subs_helper(s):
    """Helper function to handle badly formed JSON stored in the database"""
    try:
        return {'time_created':s.time_created, 'json_obj':sorted(json.loads(s.json_data).iteritems(), key=operator.itemgetter(0)), 'plain_json_obj':json.dumps(json.loads(s.json_data)),'id':s.id, 'json_score_data':s.json_score_data}
    except ValueError:
        return {'time_created':s.time_created, 'json_obj':"__ERROR__", 'plain_json_obj':"__ERROR__", 'id':s.id}

@auth_is_course_admin_view_wrapper
def view_submissions_to_grade(request, course_prefix, course_suffix, exam_slug):
    course = request.common_page_data['course']
    
    try:
        exam = Exam.objects.get(course=course, is_deleted=0, slug=exam_slug)
    except Exam.DoesNotExist:
        raise Http404

    if exam.mode=="draft":
        exam = exam.image

    generate_submission_csv_task.delay(course.id, exam.id, request.user.email)

    messages.add_message(request, messages.INFO, 'Generating submission CSV for %s.  You will receive an email when it is ready.' \
                         % exam.title)

    return HttpResponseRedirect(reverse(exam.list_view, args=[course_prefix, course_suffix]))


@require_POST
@auth_view_wrapper
def collect_data(request, course_prefix, course_suffix, exam_slug):
    
    course = request.common_page_data['course']
    user = request.user
    try:
        exam = Exam.objects.get(course = course, is_deleted=0, slug=exam_slug)
    except Exam.DoesNotExist:
        raise Http404

    postdata = request.POST['json_data'] #will return an error code to the user if either of these fail (throws 500)
    json_obj=json.loads(postdata)

    #e.g. PST or PDT
    tz = timezone(get_default_timezone_name())
    tz_string1 = tz.tzname(exam.partial_credit_deadline)

    if exam.mode == "ready" and exam.past_all_deadlines():
        return HttpResponseBadRequest("Sorry!  This submission is past the last deadline of %s" % \
                                      datetime.datetime.strftime(exam.partial_credit_deadline, "%m/%d/%Y %H:%M " + tz_string1))

    if exam.timed:
        try:
            started = StudentExamStart.objects.get(exam=exam, student=user)
            endtime = started.time_created + datetime.timedelta(minutes = (exam.minutesallowed+1))
            tz_string2 = tz.tzname(endtime)
            if datetime.datetime.now() > endtime:
                return HttpResponseBadRequest("Sorry!  This submission is past your submission window, which ended at %s" % \
                                              datetime.datetime.strftime(endtime, "%m/%d/%Y %H:%M " + tz_string2))
        except StudentExamStart.DoesNotExist:
            pass #somehow we didn't record a start time for the student.  So we just let them submit.

    attempt_number = exam.num_of_student_records(user)+1

    if attempt_number > exam.submissions_permitted:
        return HttpResponseBadRequest("Sorry!  Your submission #%d has exceed the maximum allowed: %d" % (attempt_number, exam.submissions_permitted))

    onpage = request.POST.get('onpage','')

    try:
        rendered_questions = json.loads(request.POST.get('renderedQuestions', ''))
    except (TypeError, ValueError):
        rendered_questions = None

    feedback = {}
    if isinstance(rendered_questions, list):
        feedback['__rendered_questions'] = rendered_questions

    record = ExamRecord(course=course, exam=exam, student=user, json_data=postdata, json_score_data = json.dumps(feedback),
                        onpage=onpage, attempt_number=attempt_number, late=exam.past_due())
    record.save()

    #now delete any incomplete attempts, since there is now a complete one. (Also so we don't show the same set
    #of randomized questions again)
    ExamRecord.objects.filter(course=course, exam=exam, student=user, complete=False).delete()

    autograder = None

    if exam.exam_type == "survey" and not exam.autograde:
        autograder = AutoGrader("<null></null>", default_return=True) #create a null autograder that always returns the "True" object
    elif exam.autograde:
        try:
            autograder = AutoGrader(exam.xml_metadata, default_return=True)
        except Exception as e: #Pass back all the exceptions so user can see
            return HttpResponseBadRequest(unicode(e))

    if autograder:

        record_score = ExamRecordScore(record = record)
        record_score.save()

        total_score = 0
        for prob,v in json_obj.iteritems():  #prob is the "input" id, v is the associated value,
                                             #which can be an object (input box) or a list of objects (multiple-choice)
            try:
                if isinstance(v,list): #multiple choice case
                    submission = map(lambda li: li['value'], v)
                    feedback[prob] = autograder.grade(prob, submission)
                    field_obj = ExamRecordScoreField(parent=record_score,
                                                     field_name = prob,
                                                     human_name=v[0].get('questionreport', "") if len(v)>0 else "",
                                                     subscore = feedback[prob]['score'],
                                                     value = map(lambda li:li.encode('utf-8'),submission),
                                                     correct = feedback[prob]['correct'],
                                                     comments="",
                                                     associated_text = v[0].get('associatedText', "") if len(v)>0 else "",
                                                     )
                    field_obj.save()
                    for li in v:
                        if 'correct_choices' not in feedback[prob]:
                            is_correct = None
                        else:
                            is_correct = li['value'] in feedback[prob]['correct_choices']                        
                        fc = ExamRecordScoreFieldChoice(parent=field_obj,
                                                        choice_value=li['value'],
                                                        correct=is_correct,
                                                        human_name=li.get('report',""),
                                                        associated_text=li.get('associatedText',""))
                        fc.save()
                
                else: #single answer
                    submission = v['value']
                    feedback[prob] = autograder.grade(prob, submission)
                    field_obj = ExamRecordScoreField(parent=record_score,
                                 field_name = prob,
                                 human_name=v.get('report', ""),
                                 subscore = feedback[prob]['score'],
                                 value = submission,
                                 correct = feedback[prob]['correct'],
                                 comments="",
                                 associated_text = v.get('associatedText', ""))
                    field_obj.save()
            except AutoGraderGradingException as e:
                #TODO: need to handle v is a list case, otherwise gives 500
                feedback[prob]={'correct':False, 'score':0}
                field_obj = ExamRecordScoreField(parent=record_score,
                                 field_name = prob,
                                 human_name=v.get('report', ""),
                                 subscore = 0,
                                 correct = feedback[prob]['correct'],
                                 comments = unicode(e),
                                 associated_text = v.get('associatedText', ""))
                field_obj.save()
            #This is when using code indents to denote blocks is a bit hairy
            #supposed to be at the same level as try...except.  Run once per prob,v
            total_score += feedback[prob]['score']

        #Set raw score for ExamRecordScore
        record_score.raw_score = total_score
        record_score.save()

        #calculate total
        if isinstance(rendered_questions, list):
            ts = 0
            for q in rendered_questions:
                ts += autograder.question_points(q.strip())
            feedback["__total_score"] = ts
        else:
            feedback["__total_score"] = exam.total_score

        #Set penalty inclusive score for ExamRecord
        record.json_score_data = json.dumps(feedback)

        #apply penalties
        days_late = record.days_late(grace_period=exam.grace_period)
        record.score = compute_penalties(total_score, attempt_number, exam.resubmission_penalty,
                                         record.late, exam.late_penalty,
                                         late_days=days_late,
                                         daily_late_penalty=exam.daily_late_penalty)
        record.save()
        
        #Set ExamScore.score to max of ExamRecord.score for that student, exam. 
        exam_score, created = ExamScore.objects.get_or_create(course=course, exam=exam, student=user)
        exam_score.setScore()

        return HttpResponse(reverse(exam.record_view, args=[course.prefix, course.suffix, exam.slug, record.id]))

    else:
        return HttpResponse("Submission has been saved.")


def compute_penalties(raw_score, attempt_number, resubmission_penalty, is_late, late_penalty, late_days=0, daily_late_penalty=0):
    """Helper function to factor out resubmission and late penalty calculations, 
       so I can write a few unit tests for it
    """
    resubmission_discount = pow(max(0.0, (100.0 - resubmission_penalty)/100.0), (attempt_number - 1))
    score = raw_score * resubmission_discount
    late_discount = max(0.0, 100.0 - late_penalty)/100.0
    if is_late:
        score *= late_discount
        if late_days:
            daily_discount = pow(max(0.0, (100.0 - daily_late_penalty)/100.0), late_days)
            score *= daily_discount
    return max(score, 0.0)

@require_POST
@auth_is_course_admin_view_wrapper
def edit_exam_ajax_wrapper(request, course_prefix, course_suffix, exam_slug):
    return save_exam_ajax(request, course_prefix, course_suffix, create_or_edit="edit", old_slug=exam_slug)


@require_POST
@auth_is_course_admin_view_wrapper
@always_switch_mode
def save_exam_ajax(request, course_prefix, course_suffix, create_or_edit="create", old_slug=""):

    course = request.common_page_data['course']
    if course.mode == "ready":
        course = course.image
    
    old_slug = old_slug.strip()
    slug = request.POST.get('slug','').strip()
    title = request.POST.get('title', '')
    description = request.POST.get('description', '')
    metaXMLContent = request.POST.get('metaXMLContent', '')
    htmlContent = request.POST.get('htmlContent', '')
    xmlImported = request.POST.get('xmlImported','')
    quizdown = request.POST.get('quizdown','')
    due_date = request.POST.get('due_date', '')
    grace_period = request.POST.get('grace_period', '')
    partial_credit_deadline =  request.POST.get('partial_credit_deadline', '')
    late_penalty = request.POST.get('late_penalty', '')
    daily_late_penalty = request.POST.get('daily_late_penalty', '')
    num_subs_permitted = request.POST.get('num_subs_permitted','')
    resubmission_penalty = request.POST.get('resubmission_penalty','')
    assessment_type = request.POST.get('assessment_type','')
    section=request.POST.get('section','')
    invideo_val=request.POST.get('invideo','')
    hide_grades_val=request.POST.get('hide_grades','')

    if invideo_val and invideo_val == "true":
        invideo = True
    else:
        invideo = False

    if hide_grades_val and hide_grades_val == "true":
        hide_grades = True
    else:
        hide_grades = False

    #########Validation, lots of validation#######
    if not slug:
        return HttpResponseBadRequest("No URL identifier value provided")
    try:
        validate_slug(slug)
    except ValidationError as ve:
        return HttpResponseBadRequest(unicode(ve))

    ###now validate slug uniqueness ####
    num_exams = Exam.objects.filter(course=course, slug=slug, is_deleted=False).count()
    num_allowed = 1 if (old_slug and old_slug == slug) else 0
    if num_exams > num_allowed:
        return HttpResponseBadRequest("An exam with this URL identifier already exists in this course")

    if not title:
        return HttpResponseBadRequest("No Title value provided")
    if not metaXMLContent:
        return HttpResponseBadRequest("No metadataXML provided")
    try:
        grader = AutoGrader(metaXMLContent)
    except Exception as e: #Since this is just a validator, pass back all the exceptions
        return HttpResponseBadRequest(unicode(e))

    total_score = grader.points_possible

    if not htmlContent:
        return HttpResponseBadRequest("No Exam HTML provided")
    if not due_date:
        return HttpResponseBadRequest("No due date provided")
    if not grace_period:
        return HttpResponseBadRequest("No grace period provided")
    if not partial_credit_deadline:
        return HttpResponseBadRequest("No hard deadline provided")
    if not section:
        return HttpResponseBadRequest("Bad section provided!")

    try:
        contentsection = ContentSection.objects.get(id=section, course=course, is_deleted=False)
    except ContentSection.DoesNotExist:
        return HttpResponseBadRequest("Bad section provided!")

    dd = datetime.datetime.strptime(due_date, "%m/%d/%Y %H:%M")
    gp = datetime.datetime.strptime(grace_period, "%m/%d/%Y %H:%M")
    pcd = datetime.datetime.strptime(partial_credit_deadline, "%m/%d/%Y %H:%M")

    if assessment_type == "summative":
        autograde = True
        display_single = False
        grade_single = False
        exam_type = "problemset"
    elif assessment_type == "formative":
        autograde = True
        display_single = True
        grade_single = False #We will eventually want this to be True
        exam_type = "problemset"
    elif assessment_type == "interactive":
        autograde = True
        display_single = True
        grade_single = False
        exam_type = "interactive_exercise"
    elif assessment_type == "exam-autograde":
        autograde = True
        display_single = False
        grade_single = False
        exam_type = "exam"
    elif assessment_type == "exam-csv":
        autograde = False
        display_single = False
        grade_single = False
        exam_type = "exam"
    elif assessment_type == "survey":
        autograde = False
        display_single = False
        grade_single = False
        exam_type = "survey"
    elif assessment_type == "graded-survey":
        autograde = True
        display_single = False
        grade_single = False
        exam_type = "survey"
    else:
        return HttpResponseBadRequest("A bad assessment type (" + assessment_type  + ") was provided")

    if not late_penalty:
        lp = 0
    else:
        try:
            lp = int(late_penalty)
        except ValueError:
            return HttpResponseBadRequest("A non-numeric late penalty (" + late_penalty  + ") was provided")

    if not daily_late_penalty:
        dlp = 0
    else:
        try:
            dlp = int(daily_late_penalty)
        except ValueError:
            return HttpResponseBadRequest("A non-numeric daily late penalty (" + daily_late_penalty  + ") was provided")


    if not num_subs_permitted:
        sp = 999
    else:
        try:
            sp = int(num_subs_permitted)
        except ValueError:
            return HttpResponseBadRequest("A non-numeric number of submissions permitted (" + sp  + ") was provided")

    if not resubmission_penalty:
        rp = 0
    else:
        try:
            rp = int(resubmission_penalty)
        except ValueError:
            return HttpResponseBadRequest("A non-numeric resubmission penalty (" + resubmission_penalty  + ") was provided")

    #create or edit the Exam
    if create_or_edit == "create":
        exam_obj = Exam(course=course, slug=slug, title=title, description=description, html_content=htmlContent, xml_metadata=metaXMLContent,
                        due_date=dd, assessment_type=assessment_type, mode="draft", total_score=total_score, grade_single=grade_single,
                        grace_period=gp, partial_credit_deadline=pcd, late_penalty=lp, daily_late_penalty=dlp, submissions_permitted=sp,
                        resubmission_penalty=rp,
                        exam_type=exam_type, autograde=autograde, display_single=display_single, invideo=invideo, section=contentsection,
                        xml_imported=xmlImported, quizdown=quizdown, hide_grades=hide_grades
                        )

        exam_obj.save()
        exam_obj.create_ready_instance()        

        # Set parent/child relationships
        create_contentgroup_entries_from_post(request, 'parent', exam_obj.image, 'exam', display_style='list')

        #Now set the video associations
        exam_obj.sync_videos_foreignkeys_with_metadata()
        vid_status_obj = exam_obj.image.sync_videos_foreignkeys_with_metadata()
        vid_status_string = ""
        if vid_status_obj['video_slugs_set']:
            exam_obj.invideo=True
            exam_obj.image.invideo=True
            exam_obj.save()
            exam_obj.image.save()
            vid_status_string = "This exam was successfully associated with the following videos:\n" + \
                            ", ".join(vid_status_obj['video_slugs_set']) + "\n"
        if vid_status_obj['video_slugs_not_set']:
            vid_status_string += "The following videos WERE NOT automatically associated with this exam:\n" + \
                ", ".join(vid_status_obj['video_slugs_not_set']) + "\n\n" + \
                "You may have provided the wrong url-identifier or have not yet uploaded the video"


        return HttpResponse("Exam " + title + " created. \n" + unicode(grader) + "\n\n" + vid_status_string)
    else:
        try: #this is nasty code, I know.  It should at least be moved into the model somehow
            exam_obj = Exam.objects.get(course=course, is_deleted=0, slug=old_slug)
            exam_obj.slug=slug
            exam_obj.title=title
            exam_obj.description=description
            exam_obj.html_content=htmlContent
            exam_obj.xml_metadata=metaXMLContent
            exam_obj.xml_imported=xmlImported
            exam_obj.quizdown=quizdown
            exam_obj.due_date=dd
            exam_obj.total_score=total_score
            exam_obj.assessment_type=assessment_type
            exam_obj.grace_period=gp
            exam_obj.partial_credit_deadline=pcd
            exam_obj.late_penalty=lp
            exam_obj.daily_late_penalty=dlp
            exam_obj.submissions_permitted=sp
            exam_obj.resubmission_penalty=rp
            exam_obj.exam_type=exam_type
            exam_obj.autograde=autograde
            exam_obj.display_single=display_single
            exam_obj.grade_single=grade_single
            exam_obj.invideo=invideo
            exam_obj.hide_grades=hide_grades
            exam_obj.section=contentsection
            exam_obj.save()
            exam_obj.commit()

            # Set parent/chlid relationships for this exam
            create_contentgroup_entries_from_post(request, 'parent', exam_obj.image, 'exam', display_style='list')

            #Now set the video associations
            exam_obj.sync_videos_foreignkeys_with_metadata()
            vid_status_obj = exam_obj.image.sync_videos_foreignkeys_with_metadata()
            vid_status_string = ""
            if vid_status_obj['video_slugs_set']:
                exam_obj.invideo=True
                exam_obj.image.invideo=True
                exam_obj.save()
                exam_obj.image.save()
                vid_status_string = "This exam was successfully associated with the following videos:\n" + \
                ", ".join(vid_status_obj['video_slugs_set']) + "\n\n"
            if vid_status_obj['video_slugs_not_set']:
                vid_status_string += "The following videos WERE NOT automatically associated with this exam:\n" + \
                    ", ".join(vid_status_obj['video_slugs_not_set']) + "\n" + \
                    "You may have provided the wrong url-identifier or have not yet uploaded the video"

            return HttpResponse("Exam " + title + " saved. \n" + unicode(grader) + "\n\n" + vid_status_string)

        except Exam.DoesNotExist:
            return HttpResponseBadRequest("No exam exists with URL identifier %s" % old_slug)


@require_POST
@auth_is_course_admin_view_wrapper
def check_metadata_xml(request, course_prefix, course_suffix):
    xml = request.POST.get('metaXMLContent')
    if not xml:
        return HttpResponseBadRequest("No metaXMLContent provided")
    try:
        grader = AutoGrader(xml)
    except Exception as e: #Since this is just a validator, pass back all the exceptions
        return HttpResponseBadRequest(unicode(e))
    
    videos_obj = parse_video_exam_metadata(xml)
    return HttpResponse("Metadata XML is OK.\n" + unicode(grader) + "\n" + videos_obj['description'])



@auth_is_course_admin_view_wrapper
def create_exam(request, course_prefix, course_suffix):
    
    course = request.common_page_data['course']
    
    sections = ContentSection.objects.getByCourse(course)
    
    returnURL = reverse('courses.views.course_materials',args=[course_prefix, course_suffix])
    
    return render_to_response('exams/create_exam.html', {'common_page_data':request.common_page_data,
                              'course':course,
                              'sections':sections,
                              'returnURL':returnURL},
                              RequestContext(request))

@auth_is_course_admin_view_wrapper
def edit_exam(request, course_prefix, course_suffix, exam_slug):
    
    course = request.common_page_data['course']

    try:
        exam = Exam.objects.get(course=course, is_deleted=0, slug=exam_slug)
    except Exam.DoesNotExist:
        raise Http404
    
    sections = ContentSection.objects.getByCourse(course)
    returnURL = reverse('courses.views.course_materials', args=[course_prefix, course_suffix])

    data={'title':exam.title, 'slug':exam.slug, 'due_date':datetime.datetime.strftime(exam.due_date, "%m/%d/%Y %H:%M"),
          'grace_period':datetime.datetime.strftime(exam.grace_period, "%m/%d/%Y %H:%M"),
          'partial_credit_deadline':datetime.datetime.strftime(exam.partial_credit_deadline, "%m/%d/%Y %H:%M"),
          'assessment_type':exam.assessment_type, 'late_penalty':exam.late_penalty, 'num_subs_permitted':exam.submissions_permitted,
          'resubmission_penalty':exam.resubmission_penalty, 'description':exam.description, 'section':exam.section.id,'invideo':exam.invideo,
          'metadata':exam.xml_metadata, 'htmlContent':exam.html_content, 'xmlImported':exam.xml_imported, 'quizdown':exam.quizdown,
          'hide_grades':exam.hide_grades, 'daily_late_penalty':exam.daily_late_penalty}

    groupable_exam = exam
    if exam.mode != 'ready':
        groupable_exam = exam.image
    cg_info = ContentGroup.groupinfo_by_id('exam', groupable_exam.id)
    parent = cg_info.get('__parent', None)
    parent_val = "none,none"
    if parent:
        parent_val = "%s,%d" % (cg_info['__parent_tag'], parent.image.id)

    return render_to_response('exams/create_exam.html', {'common_page_data':request.common_page_data, 'returnURL':returnURL,
                                                         'course':course, 'sections':sections, 'parent_val': parent_val,
                                                         'edit_mode':True, 'prepop_json':json.dumps(data), 'slug':exam_slug,
                                                         'exam_section':exam.section, 'exam_title':exam.title, },
                                                        RequestContext(request))


def show_test_xml(request):
    return render_to_response('exams/test_xml.html', {'message':'what up G?'}, RequestContext(request))

@auth_is_course_admin_view_wrapper
def view_csv_grades(request, course_prefix, course_suffix, exam_slug):
    course = request.common_page_data['course']
    
    try:
        exam = Exam.objects.get(course=course, is_deleted=0, slug=exam_slug)
    except Exam.DoesNotExist:
        raise Http404

    if course.mode=="draft":
        course = course.image

    if exam.mode=="draft":
        exam = exam.image

    # Find the appropriate ExamRecord, for each student. In this case, appropriate
    # means the last submission prior to the grace_period.
    exam_record_ptrs = ExamRecord.objects.values('student__username').filter(exam=exam, complete=True, exam__grace_period__gt=F('time_created')).annotate(last_submission_id=Max('id'))
    fname = course_prefix+"-"+course_suffix+"-"+exam_slug+"-grades-"+datetime.datetime.now().strftime("%Y-%m-%d-%H-%M-%S")+".csv"
    outfile = open(FILE_DIR+"/"+fname,"w+")

    could_not_parse = ""

    file_content = False
    for exam_record_ptr in exam_record_ptrs:
        ers = ExamRecordScore.objects.filter(record_id=exam_record_ptr['last_submission_id'])
        
        #The ExamRecordScore will not exist for csv-graded exams if there has not been a csv grade import for this user.
        if ers:
            ersfs = ExamRecordScoreField.objects.filter(parent=ers)
        
            for ersf in ersfs:
                outstring = '"%s","%s","%s"\n' % (exam_record_ptr['student__username'], ersf.field_name, str(ersf.subscore))
                outfile.write(outstring)
                file_content = True
            
    if not file_content:
        outfile.write("\n")

    #write to S3
    secure_file_storage = S3BotoStorage(bucket=AWS_SECURE_STORAGE_BUCKET_NAME, access_key=AWS_ACCESS_KEY_ID, secret_key=AWS_SECRET_ACCESS_KEY)
    s3file = secure_file_storage.open("/%s/%s/reports/exams/%s" % (course_prefix, course_suffix, fname),'w')
    outfile.seek(0)
    s3file.write(outfile.read())
    s3file.close()
    outfile.close()
    return HttpResponseRedirect(secure_file_storage.url_monkeypatched("/%s/%s/reports/exams/%s" % (course_prefix, course_suffix, fname), response_headers={'response-content-disposition': 'attachment'}))




@require_POST
@auth_view_wrapper
def post_csv_grades(request, course_prefix, course_suffix, exam_slug):
    
    course = request.common_page_data['course']
    try:
        exam = Exam.objects.get(course = course, is_deleted=0, slug=exam_slug)
    except Exam.DoesNotExist:
        raise Http404

    #Only process ready mode exams and courses

    if course.mode == "draft":
        course = course.image
            
    if exam.mode == "draft":
        exam = exam.image

        
    good_count = 0
    exam_scores = {} #this will be the student score created
    bad_rows = []

    db_hits = 0

    if request.FILES:
        row_count=0;
        #We build up the records to be saved as a dict
        for f in request.FILES.itervalues():
            reader = csv.reader(f)
            for row in reader:  # each row should be: "<student_username>", "<field_name>", "subscore"
                row_count += 1
                valid, output = validate_row(row)
                if not valid:
                    bad_rows.append(str(row_count) + ":" + str(row) + " => " + output)
                    logger.error(str(row_count) + ":" + str(row) + " => " + output)
                else:
                    (username, field_name, score) = output
                    
                    if username in exam_scores:
                        exam_scores[username]['fields'].append({'name':field_name, 'score':score})
                        exam_scores[username]['total'] += score #increment total score
                    else:
                        exam_scores[username]={'fields':[{'name':field_name, 'score':score}], 'total':score} #initialize
                    
                    good_count += 1

                    if good_count % 100 == 0:
                        print str(good_count)

    # Find the appropriate ExamRecord, for each student, to update. In this case, appropriate
    # means the last submission prior to the grace_period.
    exam_record_ptrs = ExamRecord.objects.values('student__username').filter(exam=exam, exam__grace_period__gt=F('time_created')).annotate(last_submission_id=Max('id'))

    student_count = 0
    for username, record in exam_scores.iteritems():
        try:
            user = User.objects.get(username=username)
            user_score, created = ExamScore.objects.get_or_create(course=course, exam=exam, student=user)
            db_hits += 2
            
            #Total score for this user
            total_score = sum(map(lambda r:r['score'], record['fields']))
            if total_score != record['total']:
                bad_rows.append(username + ": total does not match sum of subscores.  Sum:" + str(total_score) + " Total:" + str(record['total']))
                logger.error(username + ": total does not match sum of subscores.  Sum:" + str(total_score) + " Total:" + str(record['total']))
            total_score = max(record['total'],0) #0 is the floor score
            
            #Find the ExamRecord for this user
            for exam_record_ptr in exam_record_ptrs:
                if exam_record_ptr['student__username'] == username:
                    break
                else:
                   exam_record_ptr = None
            
            ers = None 
            if exam_record_ptr:
                if not created:
                    #Delete the ExamRecordScore, ExamRecordScoreFields and ExamRecordScoreFieldChoices
                    ExamRecordScoreFieldChoice.objects.filter(parent__parent__record_id=exam_record_ptr['last_submission_id']).delete()
                    ExamRecordScoreField.objects.filter(parent__record_id=exam_record_ptr['last_submission_id']).delete()
                    ExamRecordScore.objects.filter(record_id=exam_record_ptr['last_submission_id']).delete()
                    db_hits += 3
                
                #Create the new ExamRecordScore
                ers = ExamRecordScore(record_id=exam_record_ptr['last_submission_id'], raw_score=total_score, csv_imported=True)
                ers.save()
                db_hits += 1
                        
                #Create the new ExamRecordscoreFields
                field_objs = map(lambda f:ExamRecordScoreField(parent=ers, field_name=f['name'], subscore=f['score']), record['fields']) 
                ExamRecordScoreField.objects.bulk_create(field_objs)
                db_hits += 1
                                         
                #Update score for ExamRecord
                er = ExamRecord.objects.get(id=exam_record_ptr['last_submission_id'])
                er.score = total_score
                er.save()
                db_hits += 1
                                         
            #Set score for ExamScore
            user_score.score = total_score
            user_score.csv_imported = True
            #If ers is None, it means the grades are being set for a student who has not
            #attempted this exam yet.
            if ers:
                user_score.examrecordscore = ers
            user_score.save()
            db_hits += 1
        
            student_count += 1
            if student_count % 100 == 0:
                print str(student_count)
        
        except User.DoesNotExist:
            bad_rows.append(username + " not found in students list!")
            logger.error(username + " not found in students list!")

    logger.info("Good count: %d  Student count: %d  DB Hits: %d  Bad rows:%s" % (good_count, student_count, db_hits, str(bad_rows)))

    return render_to_response('exams/csv_upload_confirm.html',
                              {'common_page_data':request.common_page_data,
                               'exam':exam,
                               'good_count':good_count,
                               'db_hits':db_hits,
                               'student_count':student_count,
                               'bad_rows':bad_rows},
                              RequestContext(request))



def validate_row(row):
    """
        Helper function to validate a row read in from CSV.
        If validation fails, returns tuple of (False, error message).
        If validation succeeds, returns tuple of (True, (username, field_name, score))
    """

    if not isinstance(row, list):
        return (False, "Badly formatted row")

    if len(row) != 3:
        return  (False, "Too few or too many items in row (should be 3)")

    [username, field_name, score_str] = row
        
    if not isinstance(username, str):
        return (False, "Username is not a string")
            
    if not username:
        return (False, "Username is empty string")

    if not isinstance(field_name, str):
        return (False, "Field name is not a string")

    if not field_name:
        return (False, "Field name is empty string")

    try:
        score = float(score_str)
        if score > 10000 or score < -10000:
            return (False, "The score must be between -10000 and 10000")
    except ValueError:
        return (False, "Score cannot be converted to floating point")

    return (True, (username, field_name, score))


def log_attempt(course, exam, student, student_input, human_name, field_name, graded_obj):
    """
    ExamRecordFieldLog stores one record (row) for every attempt
    at something that can be graded problem-by-problem, currently
    interactive exercises and in-video (formative) exercises.  It
    is meant to have more info than the ExamRecord table, but to
    be useful for analytics, not scoring or reporting per se.
    """
    examLogRow = ExamRecordFieldLog(course=course,
            exam=exam, 
            student=student, 
            field_name=field_name,
            human_name=human_name, 
            value=student_input,
            raw_score=graded_obj['score'])
    examLogRow.save()


def get_or_update_incomplete_examrecord(course, exam, student):
    """Helper function that mimics get_or_update.  Creates or gets an incomplete
       examrecord for the student on exam, but deletes everything but the most
       recent if more than 1 incomplete record is found
    """
    exam_rec_queryset = ExamRecord.objects.\
    filter(course=course, exam=exam, student=student, complete=False).\
    order_by('-last_updated')   # descending by update date so first is latest

    if len(exam_rec_queryset) == 0:
        # no prior incomplete exam record found, create it
        exam_rec = ExamRecord(course=course, exam=exam, student=student, complete=False,
                              score=0.0, json_data='{}', json_score_data='{}')
    elif len(exam_rec_queryset) == 1:
        # exactly one found, this is the one we will update
        exam_rec = exam_rec_queryset[0]
    else:
        # >1 found, use the latest-updated and delete the rest. Log this as an error
        # since it is data inconsistency, even if we can clean up the mess now.
        logger.error("Found %d incomplete exam records for student=%d, exam=%d, course=%d (%s), cleaning up all but the latest-updated"
               % (len(exam_rec_queryset), student.id, exam.id, course.id, course.handle))
        exam_rec_list = list(exam_rec_queryset)
        exam_rec = exam_rec_list.pop(0)
        map(ExamRecord.delete, exam_rec_list)
    return exam_rec

def update_score(course, exam, student, student_input, field_name, graded_obj):
    """
    The ExamRecord table stores the cumulative score for this problem
    set, exercise, etc.  Update this table for things graded
    problem-by-problem (interactive exercises, in-video exercises)
    with the score for this problem.

    By convention these types of exercises are never complete, ie.
    there is never a final score.  Score here is more of a running
    tally of plus and minus points accrued.
    """
    exam_rec = get_or_update_incomplete_examrecord(course, exam, student)

    exam_rec.complete = False
    exam_rec.score = float(exam_rec.score) + float(graded_obj['score'])

    # append to json_data -- the student input
    try:
        field_student_data_obj = json.loads(exam_rec.json_data)
    except (TypeError, ValueError) as e:
        field_student_data_obj = {}  # better to ignore prior bad data than to die
    field_student_data_obj[field_name] = json.loads(student_input).get(field_name,{})
    exam_rec.json_data = json.dumps(field_student_data_obj)

    # append to json_score_data -- what the grader came back with
    try:
        field_graded_data_obj = json.loads(exam_rec.json_score_data)
    except (TypeError, ValueError) as e:
        field_graded_data_obj = {}

    # we don't want to store the whole feedback, so need to make a deep copy
    smaller_graded = copy.deepcopy(graded_obj)
    if 'feedback' in smaller_graded:
        del smaller_graded['feedback'] 
    field_graded_data_obj[field_name] = smaller_graded
    exam_rec.json_score_data = json.dumps(field_graded_data_obj)
    exam_rec.save()

    (exam_score_rec, created) = ExamRecordScore.objects.get_or_create(record=exam_rec)
    exam_score_rec.save()

 
@require_POST
@auth_view_wrapper
def exam_feedback(request, course_prefix, course_suffix, exam_slug):
    """
    This is the endpoint that will be hit from an AJAX call from
    the front-end when the users pushes the "Check Answer" button
    on an interactive or in-video exercise.  For all problems
    submitted, do three things:

      1. instantiate and call the autograder
      2. write a log entry storing the attempt
      3. update the score table with the latest score

    While this will score and report results back for multiple
    problems, that isn't typical.
    """
    course = request.common_page_data['course']
    try:
        exam = Exam.objects.get(course = course, is_deleted=0, slug=exam_slug)
    except Exam.DoesNotExist:
        raise Http404

    submissions = json.loads(request.POST['json_data'])

    autograder = None
    if exam.autograde:
        try:
            autograder = AutoGrader(exam.xml_metadata)
        except Exception as e:
            return HttpResponseBadRequest(unicode(e))
    else:
        autograder = AutoGrader("<null></null>", default_return=True) #create a null autograder that always returns the "True" object
    if not autograder:
        return Http500("Could not create autograder")

    feedback = {}
    for prob, v in submissions.iteritems():
        if prob == "__metadata__":    # shouldn't happen, being careful
            next
        try:
            if isinstance(v,list):    # multiple choice case
                student_input = map(lambda li: li['value'], v)
                feedback[prob] = autograder.grade(prob, student_input)
            else:                     # single answer case
                student_input = v['value']
                feedback[prob] = autograder.grade(prob, student_input)
        except AutoGraderGradingException as e:
            logger.error(e)
            return HttpResponse(e, status=500)
        if 'questionreport' in v:
            human_name = v['questionreport']
        else:
            human_name = ""
        log_attempt(course, exam, request.user, student_input, human_name, prob, feedback[prob])
        update_score(course, exam, request.user, request.POST.get('json_data','{}'), prob, feedback[prob])

    feedback['__metadata__'] = exam.xml_metadata if exam.xml_metadata else "<empty></empty>"
    return HttpResponse(json.dumps(feedback))

@require_POST
@auth_view_wrapper
def student_save_progress(request, course_prefix, course_suffix, exam_slug):
    """This is the endpoint for the "Save" button in the exam.  It just
       saves what they did, without any grading activity
    """
    course = request.common_page_data['course']
    try:
        exam = Exam.objects.get(course = course, is_deleted=0, slug=exam_slug)
    except Exam.DoesNotExist:
        raise Http404

    try:
        rendered_questions = json.loads(request.POST.get('renderedQuestions', ''))
    except (TypeError, ValueError):
        rendered_questions = None


    exam_rec = get_or_update_incomplete_examrecord(course, exam, request.user)
    exam_rec.json_data = request.POST.get('json_data',"{}")

    if isinstance(rendered_questions, list):
        tmpobj = {}
        tmpobj['__rendered_questions'] = rendered_questions
        exam_rec.json_score_data = json.dumps(tmpobj)

    exam_rec.save()
    return HttpResponse("OK")


@require_POST
def parse_markdown(request):
    """Using a python parser for markdown.  This seems like the most stable version thus
       far.
    """
    md = markdown.Markdown(extensions = ['meta'], output_format = "html")
    mkd = request.POST.get('markdown',"")
    html = md.convert(mkd)
    returnobj = {'html':html, 'meta':md.Meta}
    return HttpResponse(json.dumps(returnobj))


def quizdown_preview(request):
    return render_to_response('exams/qd_preview.html', {}, RequestContext(request))


@require_POST
def check_metadata_xml_no_course(request):
    xml = request.POST.get('metaXMLContent')
    if not xml:
        return HttpResponseBadRequest("No metaXMLContent provided")
    try:
        grader = AutoGrader(xml)
    except Exception as e: #Since this is just a validator, pass back all the exceptions
        return HttpResponseBadRequest(unicode(e))
    
    return HttpResponse("Metadata XML is OK.\n" + unicode(grader) + "\n" )

########NEW FILE########
__FILENAME__ = models
from django.db import models

# Create your models here.

########NEW FILE########
__FILENAME__ = tests
"""
This file demonstrates writing tests using the unittest module. These will pass
when you run "manage.py test".

Replace this with more appropriate tests for your application.
"""

#from django.test import TestCase
#
#
#class SimpleTest(TestCase):
#    def test_basic_addition(self):
#        """
#        Tests that 1 + 1 always equals 2.
#        """
#        self.assertEqual(1 + 1, 2)


########NEW FILE########
__FILENAME__ = views
# Create your views here.
import sys
import traceback
import logging
logger = logging.getLogger(__name__)

from c2g.models import Exercise, Video, VideoToExercise, ProblemSet, ProblemSetToExercise, Exam, ExamRecord
from django.http import HttpResponse, HttpResponseBadRequest, Http404
from django.shortcuts import render_to_response
from django.template import Context, loader
from django.template import RequestContext
from django.core.exceptions import MultipleObjectsReturned 
from courses.actions import auth_view_wrapper, auth_is_course_admin_view_wrapper
from django.views.decorators.http import require_POST
from django.core.files.storage import default_storage
from django.core.files.base import ContentFile
from django.core.urlresolvers import reverse

from django.views.decorators.csrf import csrf_protect

def show_new_ui(request):
    return render_to_response('exercises/new-ui.html', RequestContext(request))

    


def edit(request, course_prefix, course_suffix, filename):
    course = request.common_page_data['course']
    handle = course_prefix+'--'+course_suffix
    try:
        exercise = Exercise.objects.get(handle=handle, fileName=filename)
    except Exercise.DoesNotExist:
        raise Http404("This exercise does not exist")
    #not catching MultipleObjectsReturned because that indicates db integrity issues and should get through as a 500

    if request.GET['return']:
        returnurl = request.GET['return']
    else:
        returnurl = reverse('courses.views.course_materials', args=[course_prefix,course_suffix])
    return render_to_response('exercises/edit.html',
                              {'common_page_data':request.common_page_data,
                              'filename':filename,
                              'returnURL':returnurl,
                              'file_content':exercise.file.read(),},
                              RequestContext(request))

@auth_is_course_admin_view_wrapper
@require_POST
@csrf_protect
def save(request, course_prefix, course_suffix, filename):
    course = request.common_page_data['course']
    handle = course_prefix+'--'+course_suffix
    try:
        exercise = Exercise.objects.get(handle=handle, fileName=filename)
    except Exercise.DoesNotExist:
        raise Http404("This exercise does not exist")
    #not catching MultipleObjectsReturned because that indicates db integrity issues and should get through as a 500

    try:
       newfile = default_storage.open(exercise.file.name,'rw+')
       newfile.seek(0)
       newfile.write(request.POST['content'].encode('utf-8'))
       newfile.truncate()
       newfile.close()
       exercise.file.save(filename, newfile)
    except BaseException as e:
        #yes, we're catching all exceptions, but this is for the purpose of sending back an understandable
        #ajax error message.  We'll log the exception which causes email to be sent
        type, value = sys.exc_info()[:2] #per http://docs.python.org/library/sys.html#sys.exc_info
        logger.exception(str(type)+str(value))
        return HttpResponseBadRequest(unicode(e))

    return HttpResponse(exercise.file.name)

########NEW FILE########
__FILENAME__ = actions
from django.http import Http404
from django.shortcuts import render, redirect

from c2g.models import ContentGroup
from courses.actions import auth_is_course_admin_view_wrapper, create_contentgroup_entries_from_post, always_switch_mode
from courses.common_page_data import get_common_page_data
from courses.files.forms import *


@auth_is_course_admin_view_wrapper
@always_switch_mode
def upload(request):
    course_prefix = request.POST.get("course_prefix")
    course_suffix = request.POST.get("course_suffix")
    common_page_data = get_common_page_data(request, course_prefix, course_suffix)

    if request.method == "POST":
        form = FileUploadForm(request.POST, request.FILES, course=common_page_data['course'])
        if form.is_valid():
            new_file = form.save(commit=False)
            new_file.course = common_page_data['course']
            new_file.index = new_file.section.getNextIndex()
            new_file.mode = 'draft'
            new_file.handle = course_prefix + "--" + course_suffix

            new_file.save()
            new_file.create_ready_instance()

            create_contentgroup_entries_from_post(request, 'parent', new_file.image, 'file', request.POST.get('display_style','list'))

            return redirect('courses.views.course_materials', course_prefix, course_suffix)

    form = FileUploadForm(course=common_page_data['course'])
    reverseview = 'courses.files.actions.upload'
    return render(request, 
                  'files/upload.html',
                  { 'reverseview':      reverseview,
                    'common_page_data': common_page_data,
                    'form':             form, } )

@auth_is_course_admin_view_wrapper
@always_switch_mode
def edit(request):
    course_prefix = request.POST.get("course_prefix")
    course_suffix = request.POST.get("course_suffix")
    file_id = request.POST.get("file_id","-1")
    common_page_data = get_common_page_data(request, course_prefix, course_suffix)
    try:
        file=File.objects.get(id=int(file_id), course=common_page_data['draft_course'])
    except File.DoesNotExist:
        raise Http404

    if request.method == "POST":
        form = FileEditForm(request.POST, course=common_page_data['draft_course'], instance=file)
        if form.is_valid():
            form.save()
            file.commit()
            
            parent_type = request.POST.get('parent')
            if parent_type and parent_type[:4] != 'none':
                parent_type, parent_id = parent_type.split(',')
            else:
                parent_type, parent_id = None, None
            if parent_type:
                parent_ref = ContentGroup.groupable_types[parent_type].objects.get(id=long(parent_id))
                if parent_ref != file:
                    # Don't bother updating the ContentGroup if self this is already the parent of the group
                    # (which is implicitly the case for all non-grouped items)
                    content_group_groupid = ContentGroup.add_parent(file.image.course, parent_type, parent_ref.image)
                    ContentGroup.add_child(content_group_groupid, 'file', file.image, display_style=request.POST.get('display_style','list'))
            else: #file should have no parents, so delete its place in a contentgroup if it's a child
                try:
                    cgobj = file.image.contentgroup_set.get()
                    if cgobj.level != 1:
                        cgobj.delete()
                except ContentGroup.DoesNotExist: #nothing to do if the file is not in a contentgroup
                    pass
            return redirect('courses.views.course_materials', course_prefix, course_suffix)
    else:
        form = FileEditForm(instance=file, course=common_page_data['course'])

    reverseview = 'courses.files.actions.edit'
    cg_info = ContentGroup.groupinfo_by_id('file', file.image.id)
    parent = cg_info.get('__parent', None)
    if not parent:
        parent_val = "none,none"
    else:
        parent_val = "%s,%d" % (cg_info['__parent_tag'], parent.image.id)

    return render(request, 'files/upload.html',
                  {'file':file,
                  'parent_val':parent_val,
                  'reverseview': reverseview,
                  'common_page_data': common_page_data,
                  'form': form,
                  })

@auth_is_course_admin_view_wrapper
@always_switch_mode
def delete_file(request):
    try:
        common_page_data = get_common_page_data(request, request.POST.get("course_prefix"), request.POST.get("course_suffix"))
    except:
        raise Http404

    file = File.objects.get(id=request.POST.get("file_id"))
    file.delete()
    file.image.delete()

    return redirect(request.META['HTTP_REFERER'])

########NEW FILE########
__FILENAME__ = forms
from django import forms
from c2g.models import ContentSection, File

class FileUploadForm(forms.ModelForm):
    def __init__(self, *args, **kwargs):
        course = kwargs.pop('course')
        super(FileUploadForm, self).__init__(*args, **kwargs)
        self.fields['section'] = forms.ModelChoiceField(ContentSection.objects.filter(course=course, is_deleted=False), empty_label=None)

    class Meta:
        model = File
        fields = ('title', 'section', 'file', 'live_datetime')
        widgets = {
            'live_datetime': forms.widgets.DateTimeInput(format='%m/%d/%Y %H:%M', attrs={'data-datetimepicker':''}),
        }

class FileEditForm(forms.ModelForm):
    def __init__(self, *args, **kwargs):
        course = kwargs.pop('course')
        super(FileEditForm, self).__init__(*args, **kwargs)
        self.fields['section'] = forms.ModelChoiceField(ContentSection.objects.filter(course=course, is_deleted=False), empty_label=None)
    
    class Meta:
        model = File
        fields = ('title', 'section', 'live_datetime')
        widgets = {
            'live_datetime': forms.widgets.DateTimeInput(format='%m/%d/%Y %H:%M', attrs={'data-datetimepicker':''}),
    }

########NEW FILE########
__FILENAME__ = views
from django.http import Http404
from django.shortcuts import render

from c2g.models import File, ContentGroup
from courses.actions import auth_is_course_admin_view_wrapper
from courses.files.forms import *


@auth_is_course_admin_view_wrapper
def upload(request, course_prefix, course_suffix):

    common_page_data = request.common_page_data
    
    form = FileUploadForm(course=common_page_data['course'])

    reverseview = 'courses.files.actions.upload'
    
    return render(request, 'files/upload.html',
            {'reverseview': reverseview,
             'common_page_data': common_page_data,
             'form': form,
             })

@auth_is_course_admin_view_wrapper
def edit(request, course_prefix, course_suffix, file_id):

    common_page_data=request.common_page_data

    try:
        file=File.objects.get(id=file_id, course=common_page_data['draft_course'])
    except File.DoesNotExist:
        raise Http404
                         
    form = FileEditForm(instance=file, course=common_page_data['draft_course'])

    reverseview = 'courses.files.actions.edit'
    cg_info = ContentGroup.groupinfo_by_id('file', file.image.id)
    parent = cg_info.get('__parent', None)
    if not parent:
        parent_val = "none,none"
    else:
        parent_val = "%s,%d" % (cg_info['__parent_tag'], parent.image.id)
    return render(request, 'files/upload.html',
            {'file':file,
             'parent_val':parent_val,
             'reverseview': reverseview,
             'common_page_data': common_page_data,
             'form': form,
             })

########NEW FILE########
__FILENAME__ = forms
from django import forms

class LiveDateForm(forms.Form):
    live_datetime = forms.DateTimeField(required=False, widget=forms.widgets.DateTimeInput(format='%m/%d/%Y %H:%M', attrs={'data-datetimepicker':''}))

########NEW FILE########
__FILENAME__ = forms
from django import forms

class PiazzaAuthForm(forms.Form):
    # User Info
    user_id = forms.CharField()
    lis_person_contact_email_primary = forms.CharField()
    #lis_person_name_given = forms.CharField()
    #lis_person_name_family = forms.CharField()
    lis_person_name_full = forms.CharField()
    lis_person_sourcedid = forms.CharField()
    roles = forms.CharField()
    resource_link_id = forms.CharField()
    resource_link_title = forms.CharField()
    resource_link_description = forms.CharField()
    tool_consumer_instance_guid = forms.CharField()
    tool_consumer_instance_description = forms.CharField()

    ext_submit = forms.CharField()

    # Class Info
    context_id = forms.CharField()
    context_label = forms.CharField()
    context_title = forms.CharField()

    # LTI
    lti_message_type = forms.CharField()
    lti_version = forms.CharField()

    # OAuth Signature
    oauth_callback = forms.CharField()
    oauth_version = forms.CharField()
    oauth_nonce = forms.CharField()
    oauth_timestamp = forms.CharField()
    oauth_consumer_key = forms.CharField()
    oauth_signature_method = forms.CharField()
    oauth_signature = forms.CharField()


########NEW FILE########
__FILENAME__ = models

########NEW FILE########
__FILENAME__ = OAuthSimple
#!/usr/bin/env python -tt

import base64
import hashlib
import hmac
import random
import re
import time
import urllib2
import urlparse
import string

import OAuthSimpleException


class OAuthSimple:
    _secrets = {}
    _parameters = {}
    _default_signature_method = "HMAC-SHA1"
    _action = "GET"
    _nonce_characters = string.digits + string.letters
    sbs = ""
    _path = ""

    def __init__(self, apiKey=None, sharedSecret=None):
        if apiKey:
            self._secrets['oauth_consumer_key'] = apiKey
        if sharedSecret:
            self._secrets['shared_secret'] = sharedSecret
        return

    def reset(self):
        self._parameters = {}
        self.path = {}
        self.sbs = {}
        return self

    def setParameters(self, parameters={}):
        if parameters:
            if type(parameters) == type(""):
                parameters = self._parseParameterString(parameters)
            if not self._parameters:
                self._parameters = parameters
            elif parameters:
                self._parameters = self._arrayMerge(self._parameters,
                        parameters)
        if not self._parameters.get('oauth_nonce'):
            self._getNonce()
        if not self._parameters.get('oauth_timestamp'):
            self._getTimeStamp()
        if not self._parameters.get('oauth_consumer_key'):
            self._getApiKey()
        if not self._parameters.get('oauth_token'):
            self._getAccessToken()
        if not self._parameters.get('oauth_signature_method'):
            self.setSignatureMethod()
        if not self._parameters.get('oauth_version'):
            self._parameters['oauth_version'] = '1.0'
        return self

    def setPath(self, path):
        if not path:
            raise OAuthSimpleException('No path specified')
        self._path = path
        return self

    def setAction(self, action):
        action = action.upper()
        if re.match('[^A-Z]', action):
            raise OAuthSimpleException(
                    'Invalid action specified for OAuthSimple.setAction')
        self._action = action
        return self

    def signatures(self, signatures):
        if signatures and (type(signatures) != type({})):
            raise OAuthSimpleException(
                    'Must pass Dict to OAuthSimple.signatures')

        if signatures:
            self._secrets = self._arrayMerge(signatures, self._secrets)

        # swap keys
        swap = (('api_key', 'oauth_consumer_key'),
                 ('consumer_key', 'oauth_consumer_key'),
                 ('access_token', 'oauth_token'),
                 ('access_token_secret', 'oauth_secret'))
        for swapable in swap:
            if (self._secrets.get(swapable[0])):
                self._secrets[swapable[1]] = self._secrets[swapable[0]]
                del self._secrets[swapable[0]]
        if not self._secrets.get('oauth_consumer_key'):
            raise OAuthSimpleException('Missing required oauth_consumer_key')
        if not self._secrets.get('shared_secret'):
            raise OAuthSimpleException('Missing required shared_secret')
        if (self._secrets.get('oauth_token') and
                not self._secrets.get('oauth_secret')):
            raise OAuthSimpleException(
                    'Missing oauth_secret for supplied oauth_token')
        return self

    def setSignatureMethod(self, method=None):
        if not method:
            method = self._default_signature_method
        method = method.upper()
        if method not in ('PLAINTEXT', 'HMAC-SHA1'):
            raise OAuthSimpleException('Invalid Signature method specified ')
        self._parameters['oauth_signature_method'] = method
        return self

    def sign(self, args={}):
        if args.get('action'):
            self.setAction(args['action'])
        if args.get('path'):
            self.setPath(args['path'])
        if args.get('method'):
            self.setSignatureMethod(args['method'])
        if args.get('signatures'):
            self.signatures(args.get('signatures'))
        self.setParameters(args.get('parameters'))
        normParamString = self._normalizeParameters()
        self._parameters['oauth_signature'] = \
            self._generateSignature(normParamString)
        return {'parameters': self._parameters,
                'signature': self._oauthEscape(
                    self._parameters['oauth_signature']),
                'signed_url': '%s?%s' % (self._path,
                    self._normalizeParameters()),
                'header': self.getHeaderString(),
                'sbs': self.sbs}

    def getHeaderString(self, args={}):
        result = []

        if not self._parameters.get('oauth_signature'):
            self.sign(args)

        for pName in self._parameters:
            if not pName.startswith('oauth_'):
                continue
            pValue = self._parameters.get(pName)
            if type(pValue) == type([]):
                for val in pValue:
                    result.append('%s="%s"' % (pName,
                        self._oauthEscape(val)))
            else:
                result.append('%s="%s"' % (pName,
                    self._oauthEscape(str(pValue))))
        return 'OAuth %s' % (', '.join(result))

    def _arrayMerge(self, target, source):
        for skey in source.keys():
            target[skey] = source.get(skey)
        return target

    def _parseParameterString(self, paramString):
        return urlparse.parse_qs(paramString, True)

    def _oauthEscape(self, string):
        if not string:
            return ''

        string = urllib2.quote(string)
        return string.replace('/', '%2F').replace('+', '%20')\
                .replace('!', '%21').replace('*', '%2A')\
                .replace('\\', '%27').replace('(', '%28').\
                replace(')', '%29')

    def _getApiKey(self):
        if 'oauth_consumer_key' not in self._parameters:
            if not self._secrets.get('oauth_consumer_key'):
                raise OAuthSimpleException('No oauth_consumer_key set')
            self._parameters['oauth_consumer_key'] = \
                    self._secrets.get('oauth_consumer_key')
        return self._parameters.get('oauth_consumer_key')

    def _getAccessToken(self):
        if 'oauth_secret' not in self._secrets:
            return ''
        if 'oauth_access_token' not in self._parameters:
            if not self._secrets.get('oauth_access_token'):
                raise OAuthSimpleException('No oauth_access_token set')
            self._parameters['oauth_access_token'] = \
                    self._secrets.get('oauth_access_token')
        return self._parameters.get('oauth_access_token')

    def _getNonce(self, length=5):
        result = []
        cLength = len(self._nonce_characters)

        for i in range(0, length):
            rnd = random.randint(0, cLength - 1)
            result.append(self._nonce_characters[rnd])
        self._parameters['oauth_nonce'] = ''.join(result)
        return self._parameters['oauth_nonce']

    def _getTimeStamp(self):
        """ return the top UTC time integer as a string """
        self._parameters['oauth_timestamp'] = int(time.time())
        return self._parameters['oauth_timestamp']

    def _normalizeParameters(self):
        elements = []
        if not self._parameters:
            return ''
        pKeys = self._parameters.keys()
        pKeys.sort()
        for paramName in pKeys:
            if paramName.find('_secret') > 0:
                continue
            paramValue = self._parameters.get(paramName)
            if type(paramValue) == type([]):
                paramValue.sort()
                for value in paramValue:
                    elements.append('%s=%s' % (self._oauthEscape(paramName),
                        self._oauthEscape(value)))
                next
            else:
                elements.append('%s=%s' % (self._oauthEscape(paramName),
                    self._oauthEscape(str(paramValue))))
        return '&'.join(elements)

    def _generateSignature(self, normParamString):
        secretKey = ''

        if self._secrets.get('shared_secret'):
            secretKey = self._oauthEscape(self._secrets['shared_secret'])

        secretKey += '&'

        if self._secrets.get('oauth_secret'):
            secretKey += self._oauthEscape(self._secrets['oauth_secret'])

        if (self._parameters['oauth_signature_method'] == 'PLAINTEXT'):
            return secretKey
        elif (self._parameters['oauth_signature_method'] == 'HMAC-SHA1'):
            self.sbs = '&'.join([self._oauthEscape(self._action),
                                self._oauthEscape(self._path),
                                self._oauthEscape(normParamString)])
        return base64.b64encode(hmac.new(secretKey,
                                self.sbs,
                                hashlib.sha1).digest())

########NEW FILE########
__FILENAME__ = OAuthSimpleException
#! /usr/bin/env python


class OAuthSimpleException(Exception):
    def __init__(self, value):
        self.msg = value

    def __str__(self):
        return repr(self.msg)

########NEW FILE########
__FILENAME__ = tests
"""
This file demonstrates writing tests using the unittest module. These will pass
when you run "manage.py test".

Replace this with more appropriate tests for your application.
"""

#from django.test import TestCase
#
#
#class SimpleTest1(TestCase):
#    def test_basic_addition(self):
#        """
#        Tests that 1 + 1 always equals 2.
#        """
#        print "test case in courses/forums/tests/"
#        self.assertEqual(1 + 1, 2)


########NEW FILE########
__FILENAME__ = tests
#!/usr/bin/env python -tt
import unittest;
import urllib2;
import json;

from OAuthSimple import OAuthSimple

class TestOAuth(unittest.TestCase):
    
    signatures = {'consumer_key': 'v9s778n692e9qvd83wfj9t8c',
            'shared_secret':'54XqbMADta'};
    test_url = 'http://api.netflix.com/catalog/titles';
    parameters = \
        'term=mac%20and+me&expand=formats,' +\
        'synopsis&max_results=1&v=2.0&output=json';
    
    def setUp(self):
        self.o1 = OAuthSimple()
        
    def testUtils(self):
        self.assertEqual(self.o1._oauthEscape('a b+c!d*\\e(f)g+h'), 
                'a%20b%2Bc%21d%2A%5Ce%28f%29g%2Bh');
        self.assertEqual(self.o1._arrayMerge({'a': 0, 'b': 2, 'c': 3},
            {'a': 1, 'd': 4}),
            {'a': 1, 'b': 2, 'c': 3, 'd': 4});
        self.o1.signatures({'api_key': '123', 'shared_secret': '456'})
        self.o1.setParameters({'a': 1, 'b': 2});
        self.assertEqual(self.o1._secrets['oauth_consumer_key'], '123');
        self.assertEqual(self.o1._secrets['shared_secret'], '456')
        self.assertEqual(len(self.o1._getNonce(10)), 10);
        self.assertNotEqual(self.o1._getNonce(),self.o1._getNonce())
        self.o1.reset();
        self.assertTrue(len(self.o1._parameters) == 0)

    def testSimple(self):
        self.o1.reset();
        signed = self.o1.sign({'signatures': self.signatures, 
            'parameters': self.parameters,
            'path': self.test_url});
       # import pdb; pdb.set_trace();
        self.assertTrue(len(signed.get('signature')) > 0)
        self.assertTrue(len(signed.get('signed_url')) > 0)
        # send the link.
        try:
            rsp=urllib2.urlopen(signed.get('signed_url'))
        except urllib2.HTTPError, ex:
            if (ex.headers.get('x-mashery-error-code') == 
                    'ERR_401_TIMESTAMP_IS_INVALID'):
                print "Your clock is off. Check and retry."
                raise
            print ex
            raise
        content = json.loads(rsp.read())
        self.assertTrue(content.get('catalog')[0].get('id') == 
                u'http://api.netflix.com/catalog/titles/movies/60035973')
    
    def testComplex(self):
        self.o1.reset();
        self.o1.signatures(self.signatures);
        self.o1.setPath(
                'http://api.netflix.com/catalog/titles/movies/60035973');
        self.o1.setParameters({'expand': 'all',
                               'v': '2.0',
                               'output': 'json'});
        signed = self.o1.sign();
        content = json.loads(urllib2.urlopen(signed.get('signed_url')).read())
        # This is probably testing Netflix's API more than mine.
        self.assertEqual(content['catalog_title']['directors'][0]['name'], 
                u'Stewart Raffill')
        
       
if (__name__ == '__main__'):
    unittest.main()
    

########NEW FILE########
__FILENAME__ = views
from django.http import HttpResponse
from django.shortcuts import render_to_response
from django.template import Context, loader
from django.template import RequestContext
from courses.actions import auth_view_wrapper
from courses.forums.forms import PiazzaAuthForm
from c2g.models import PageVisitLog
from database import PIAZZA_ENDPOINT, PIAZZA_KEY, PIAZZA_SECRET
from OAuthSimple import OAuthSimple

@auth_view_wrapper
def view(request, course_prefix, course_suffix):
    # Only use the ready course (for the piazza_id) since Piazza has no notion
    # of draft/live.
    course = request.common_page_data['ready_course']

    lti_params = {
        "lti_message_type": "basic-lti-launch-request",
        "lti_version": "LTI-1p0",
        "lis_person_sourcedid": "class2go:user",
        "resource_link_id": "class2go-forum",
        "resource_link_title": "Class2Go",
        "resource_link_description": "Class2Go Forum",
        "tool_consumer_instance_guid": "class2go guid",
        "tool_consumer_instance_description": "Class2Go",
        "oauth_callback": "about:blank",
        "ext_submit": "Press To Launch"
    }
    lti_params['user_id'] = request.user.id

    # TODO: once we get course policies in place, provide an override to enable using real
    # names (see #578)
    # 
    # lti_params['lis_person_name_family'] = request.user.last_name
    # lti_params['lis_person_name_given'] = request.user.first_name
    # lti_params['lis_person_name_full'] = request.user.first_name + " " + request.user.last_name
            
    profile = request.user.get_profile()
    show_confirmation = False
    if (not profile.piazza_name):
        show_confirmation = True
        fullname = request.user.first_name + " " + request.user.last_name
        lti_params['lis_person_name_full'] = fullname.encode("utf-8")
    else:
        lti_params['lis_person_name_full'] = profile.piazza_name.encode("utf-8")
        
    if (not profile.piazza_email):
        show_confirmation = True
        lti_params['lis_person_contact_email_primary'] = request.user.email
    else:
        lti_params['lis_person_contact_email_primary'] = profile.piazza_email
            

    # Piazza only supports two roles, instructor and strudent; TA's (readonly too) are instructors. 
    if request.common_page_data['is_course_admin']:
        lti_params['roles'] = "Instructor"
    else:
        lti_params['roles'] = "Student"
        visit_log = PageVisitLog(
            course = course,
            user = request.user,
            page_type= 'forum',
        )
        visit_log.save()

    lti_params['context_id'] = course.piazza_id
    lti_params['context_label'] = request.common_page_data['course_prefix']
    lti_params['context_title'] = course.title

    # Use OAuthSimple to sign the request. 
    signatures = {
        'consumer_key': PIAZZA_KEY,
        'shared_secret': PIAZZA_SECRET,
    }
    oauthsimple = OAuthSimple()
    signed_request = oauthsimple.sign({
        'path': PIAZZA_ENDPOINT,
        'action': "POST",
        'parameters': lti_params, 
        'signatures': signatures,
    })

    form = PiazzaAuthForm(initial=signed_request['parameters'])

    querystring = request.META['QUERY_STRING']

    # Set common_page_data['can_switch_mode'] to false to hide mode switcher on this page.
    request.common_page_data['can_switch_mode'] = False
    
    return render_to_response('forums/piazza.html', {
            'common_page_data': request.common_page_data,
            'show_confirmation': show_confirmation,
            'form': form,
            'piazza_target_url': PIAZZA_ENDPOINT,
            'querystring': querystring,
        }, context_instance=RequestContext(request))


########NEW FILE########
__FILENAME__ = views
from django.shortcuts import render_to_response
from django.template import RequestContext
from django.conf import settings
from c2g.models import Course
from django.db.models import Q

def landing(request):
    """For normal servers, return our project landing page.  For maint servers,
    show our maintenance page.  Hiring shows a little banner stripe."""
    hiring=True
    context = RequestContext(request)

    """ if logged in show institution courses if appropriate 
        other rules: superuser - sees all
                     staff - sees all from institution?
    """

    if not request.user.is_authenticated():
        course_list = Course.objects.filter(mode='ready', 
                institution_only = 0)
    else:
        course_list = Course.objects.filter(Q(mode='ready', 
                institution_only = 0) | Q(mode='ready', institution__id__in=request.user.get_profile().institutions.all()))
        
    r = render_to_response("landing.html",
            {'hiring': hiring, 
             'course_list':course_list,
             'display_login': request.GET.__contains__('login')},
             context_instance=context)
    return r
    

def hiring(request):
    context = RequestContext(request)
    return render_to_response("hiring.html", context_instance=context)

########NEW FILE########
__FILENAME__ = aggregate_scores
from optparse import make_option

from django.core.management.base import BaseCommand, CommandError
from c2g.models import Course
from django.contrib.auth.models import User
from courses.exams.aggregator import ScoreAggregator

class Command(BaseCommand):
    args = "<course_handle>"
    help = "Aggregates assessment scores (ExamScore) for course <course_handle> according to the default course formulas.\nBy default a dry-run unless you use the -u or --update options."

    option_list = (
        make_option("-t", "--tag", dest="tag",
            help="If tag is specified, will aggregate using formula loaded from <file> with tag <tag>.  Must be used in conjuction with -f"),
        make_option("-f", "--file", dest="file",
            help="If file is specified, will aggregate using formula loaded from <file> with tag <tag>.  Must be used in conjuction with -t"),
        make_option("-u", "--update", dest="update", action="store_true",
            help="If update is specified, will write to CourseStudentScore table after the result of aggregation calculations.  The default tags (or the one specified with -t) will be used for the tag column."),
        make_option("-s", "--student", dest="username", default="",
            help="If <student> is specified, only aggregate for student with username=<student>, rather than the entire student roster."),
    ) + BaseCommand.option_list

    def handle(self, *args, **options): 
        if len(args) != 1:
           raise CommandError("Wrong number of arguments.  Should be exactly 1: <course_handle>")
        
        
        try:
            course = Course.objects.get(handle=args[0], mode="ready")
            print ("Aggregating grades for %s" % unicode(course))
        except Course.DoesNotExist:
            raise CommandError("The specified course_id %s does not exist." % args[0])

        if options['file'] is not None and options['tag'] is None or \
           options['file'] is None and options['tag'] is not None:
            raise CommandError("You must use -t and -f together")
    
        student = None
        if options['username']:
            try:
                student = User.objects.get(username=options['username'])
            except User.DoesNotExist:
                raise CommandError("No user with username %s" % options['username'])

        if options['file']:
            file = open(options['file']) #just let any exceptions here propagate
            formula_str = file.read()
            file.close()
            tag = options['tag']
            print("Creating aggregator %s" % tag)
            agg = ScoreAggregator(course, formulas={tag: formula_str})
            print(unicode(agg))
        else:
            quiz_formula = ScoreAggregator.generate_default_quiz_formula(course)
            exam_formula = ScoreAggregator.generate_default_exam_formula(course)
            core_ex_formula = ScoreAggregator.generate_core_db_exercise_formula(course)
            challenge_ex_formula = ScoreAggregator.generate_challenge_db_exercise_formula(course)
            db_formula = ScoreAggregator.generate_db_course_formula(course)
            agg=ScoreAggregator(course, formulas=\
                                {'quizzes' : quiz_formula,
                                 'exams'   : exam_formula,
                                 'core-exercises' : core_ex_formula,
                                 'accomplishment' : db_formula,
                                 'challenge-exercises': challenge_ex_formula})
            print(unicode(agg))

        if student:
            agg.aggregate(student, writeDB=options['update'])
        else:
            agg.aggregate_all(writeDB=options['update'])

########NEW FILE########
__FILENAME__ = exam_edit
from optparse import make_option
from textwrap import wrap
from collections import namedtuple
from pprint import pprint
import sys
from datetime import datetime

from django.core.management.base import BaseCommand, CommandError

from c2g.models import Exam


class Command(BaseCommand):
    """
    Define the edit_exam manamagement command: bulk updates of exam settings.
    """

    # instantiate a dummy exam so we can inspect it
    testexam=Exam()
    exam_attrs = [a for a in vars(testexam) \
                    if not callable(getattr(testexam,a)) \
                    and not a.startswith('_')]
    exam_types = [t[0] for t in Exam.EXAM_TYPE_CHOICES]

    help = "Make bulk exam changes. With the -u option update the database. " \
            " PLEASE BE CAREFUL." \
            "\n\nSelect which exams to change with one or more of " \
            "-e, -c, and -t. At least one of -e or -c must be used." \
            "\n\nThe list of Exam columns are:\n%s" % "\n".join(wrap(", ".join(sorted(exam_attrs))))

    option_list = (
        # Select
        make_option("-e", "--examids", dest="exam_ids", type="string",
            help="Select by comma-separated list of exam ID's"),
        make_option("-c", "--courseid", dest="course_id", type="int", 
            help="Select by course.  If only this option is chosen, all exams " \
                    "for that course will be selected."),
        make_option("-t", "--type", dest="examtype", type="string",
            help="Select by type, valid values are: %s" \
                    % ", ".join(sorted(exam_types))),

        # Change
        make_option("-s", "--set", action="append", dest="setlist", 
            default=[], metavar="NAME=\"VAL\"",
            help="Set this to that for every exam that matches your search. "  \
                 "Specify this multiple times to update multiple columns. " \
                 "The quotes around the value are optional."),

        # Do It!
        make_option("-u", "--update", action="store_false", dest="dryrun", default=True,
            help="actually update database (default is dry run)."),

    ) + BaseCommand.option_list


    def validate_selector(self, options):
        """
        Make sure we have a valid set of things to select on, and if we do,
        return a named tuple like this:
          Selector(exam_ids=[840, 841], course_id=11, type='survey')
        """
        if not (options['exam_ids'] or options['course_id']):
            raise CommandError("At least one of exam_ids (-e) or course_id (-c) is required.")

        Selector = namedtuple('Selector', 'exam_ids, course_id, examtype')

        result_exam_id_list = []
        if options['exam_ids']:
            exid_strings = options['exam_ids'].split(',')
            for exid_str in exid_strings:
                errstr = None
                try:
                    exid = int(exid_str)
                    if exid == 0:
                        errstr = "exam id \"%s\" is invalid"
                except ValueError as e:
                    errstr = e
                if errstr:
                    raiseCommandError("Exam ID parsing error, %s" % errstr)
                result_exam_id_list.append(exid)

        if options['examtype']:
            if options['examtype'] not in self.exam_types:
                raise CommandError("Invalid exam type \"%s\" given, allowed types are: %s"
                    % (options['examtype'], ", ".join(sorted(self.exam_types))))

        return Selector(exam_ids=result_exam_id_list, 
                course_id=options['course_id'], 
                examtype=options['examtype'])


    def validate_setters(self, options):
        """
        Decide what we're going to set for each of the exams we select.  Returns
        a dict with columns and settings for each.
        """
        resultdict = {}

        if not options['setlist']:
            raise CommandError("you must specify at least one set (-s) command")

        for cmd in options['setlist']:
            splitcmd = cmd.split('=')
            if len(splitcmd) != 2:
                raise CommandError("cannot parse \"%s\", commands must be of the form NAME=VAL"
                        % cmd)
            (name, val) = splitcmd
            if name not in self.exam_attrs:
                raise CommandError("value \"%s\" isn't a valid property of Exam, valid values are %s"
                        % (splitcmd[0], self.exam_attrs))
            resultdict[name] = val

        return resultdict


    def handle(self, *args, **options):
        """The actual exam_edit command"""

        selector = self.validate_selector(options)
        pprint(selector)

        setter_dict = self.validate_setters(options)
        sys.stdout.write("Setters = ")
        pprint(setter_dict)
                
        exams = Exam.objects.all()
        if selector.course_id:
            exams = exams.filter(course=selector.course_id)
        if selector.exam_ids:
            exams = exams.filter(id__in=selector.exam_ids)
        if selector.examtype:
            exams = exams.filter(exam_type=selector.examtype)

        if options['dryrun']:
            matches = len(exams)
            print "dryrun matches = %d" % matches
        else:
            updates = exams.update(**setter_dict)
            print "updated = %d" % updates

        for exam in exams:
            sys.stdout.write("%d: " % exam.id)
            pprint(exam)


########NEW FILE########
__FILENAME__ = gen_active_course_reports
from django.core.management.base import BaseCommand, CommandError
from c2g.models import *
from django.contrib.auth.models import User,Group
from django.db import connection, transaction
from django.conf import settings
from courses.reports.tasks import generate_and_email_reports
from datetime import datetime, timedelta


class Command(BaseCommand):
    help = "Generates course_dashboard and course_quizzes reports _for_courses_that_are_currently_active_. Syntax: manage.py gen_active_course_reports\n"
        
    def handle(self, *args, **options):
        now = datetime.now()
        active_courses = Course.objects.filter(mode='ready', calendar_end__gt=now)
        
        for ready_course in active_courses:
            email_title = "[Class2Go] Daily %s Reports" % ready_course.handle.replace('--', '-')
            email_message = "To generate or download any of Class2Go's report types, please visit your course's reports page from Course Administration->Reports, or by visiting https://class.stanford.edu/%s/browse_reports." % ready_course.handle.replace('--', '/')
            params = [{'type':'dashboard'}, {'type':'course_quizzes'}]
            if settings.AWS_ACCESS_KEY_ID == 'local':
                # do right here (note missing "delay" in next line)
                generate_and_email_reports('c2g_daily_report_mailer',
                        ready_course.handle, params, email_title, email_message)
            else:
                # queue and run on util machine
                generate_and_email_reports.delay('c2g_daily_report_mailer', 
                        ready_course.handle, params, email_title, email_message)

########NEW FILE########
__FILENAME__ = gen_course_dashboard_report
from django.core.management.base import BaseCommand, CommandError
from c2g.models import *
from django.contrib.auth.models import User,Group
from django.db import connection, transaction
from courses.reports.generation.gen_course_dashboard_report import *

class Command(BaseCommand):
    help = "Get course dashboard stats.\nUsage: manage.py gen_course_dashboard_report course_handle [save_to_s3]\nIf save_to_s3 is 1, the file will be saved to s3. Otherwise, it will be output to console.\n"
        
    def handle(self, *args, **options):
        if len(args) == 0:
            print "No course handle supplied!"
            
        try:
            course = Course.objects.get(handle= args[0], mode='ready')
        except Course.DoesNotExist:
            print "Failed to find course with given handle"
            return
        
        save_to_s3 = False
        if len(args) > 1: save_to_s3 = True if (args[1] == '1') else False
        
        report = gen_course_dashboard_report(course, save_to_s3)
        if save_to_s3:
            if report['path']: print "Report successfully written to: %s" % report['path']
            else: print "Failed to generate report or write it to S3!"
########NEW FILE########
__FILENAME__ = gen_course_quizzes_report
from django.core.management.base import BaseCommand, CommandError
from c2g.models import *
from django.contrib.auth.models import User,Group
from django.db import connection, transaction
from courses.reports.generation.gen_quiz_summary_report import *

class Command(BaseCommand):
    help = "Get quiz stats for the course. Syntax: manage.py gen_course_quizzes_report <course_handle> [save_to_s3 (1 or 0)]\n"
        
    def handle(self, *args, **options):
        if len(args) == 0:
            print "No course handle supplied!"
            
        try:
            course = Course.objects.get(handle= args[0], mode='ready')
        except Course.DoesNotExist:
            print "Failed to find course with given handle"
            return
        
        save_to_s3 = False
        if len(args) > 1: save_to_s3 = True if (args[1] == '1') else False
        
        report = gen_course_quizzes_report(course, save_to_s3)
        if save_to_s3:
            if report['path']: print "Report successfully written to: %s" % report['path']
            else: print "Failed to generate report or write it to S3!"
########NEW FILE########
__FILENAME__ = gen_quiz_full_report
from django.core.management.base import BaseCommand, CommandError
from c2g.models import *
from django.contrib.auth.models import User,Group
from django.db import connection, transaction
from courses.reports.generation.gen_quiz_full_report import *


class Command(BaseCommand):
    help = "Get quiz data report. Syntax: manage.py gen_quiz_report_report <course_handle> <type {'video' | 'problemset'}> <quiz_slug> [save_to_s3 (1 or 0)]\n"
        
    def handle(self, *args, **options):
        if len(args) < 3:
            print "Missing course or quiz handle or quiz type!"
        
        try:
            ready_course = Course.objects.get(handle= args[0], mode='ready')
        except Course.DoesNotExist:
            print "Failed to find course with given handle"
            return

        if args[1] == 'video':
            try:
                ready_quiz = Video.objects.get(course=ready_course, slug=args[2])
            except Video.DoesNotExist:
                print "Failed to find video with given slug"
                return
        elif args[1] == 'problemset':
            try:
                ready_quiz = ProblemSet.objects.get(course=ready_course, slug=args[2])
            except ProblemSet.DoesNotExist:
                print "Failed to find problemset with given slug"
                return
        else:
            print "Second arg must be either 'video' or 'problemset'"
            return
        
        save_to_s3 = True if (len(args) > 3 and args[3] == '1') else False
        
        report = gen_quiz_full_report(ready_course, ready_quiz, save_to_s3)
        if save_to_s3:
            if report['path']: print "Report successfully written to: %s" % report['path']
            else: print "Failed to generate report or write it to S3!"
        
########NEW FILE########
__FILENAME__ = gen_quiz_summary_report
from django.core.management.base import BaseCommand, CommandError
from c2g.models import *
from django.contrib.auth.models import User,Group
from django.db import connection, transaction
from courses.reports.generation.gen_quiz_summary_report import *


class Command(BaseCommand):
    help = "Get quiz summary. Syntax: manage.py gen_quiz_summary_report <course_handle> <type {'video' | 'problemset'}> <quiz_slug> [save_to_s3 (1 or 0)]\n"
        
    def handle(self, *args, **options):
        if len(args) < 3:
            print "Missing course or quiz handle or quiz type!"
        
        try:
            ready_course = Course.objects.get(handle= args[0], mode='ready')
        except Course.DoesNotExist:
            print "Failed to find course with given handle"
            return

        if args[1] == 'video':
            try:
                ready_quiz = Video.objects.get(course=ready_course, slug=args[2])
            except Video.DoesNotExist:
                print "Failed to find video with given slug"
                return
        elif args[1] == 'problemset':
            try:
                ready_quiz = ProblemSet.objects.get(course=ready_course, slug=args[2])
            except ProblemSet.DoesNotExist:
                print "Failed to find problemset with given slug"
                return
        else:
            print "Second arg must be either 'video' or 'problemset'"
            return
        
        save_to_s3 = True if (len(args) > 3 and args[3] == '1') else False
        
        report = gen_quiz_summary_report(ready_course, ready_quiz, save_to_s3)
        if save_to_s3:
            if report['path']: print "Report successfully written to: %s" % report['path']
            else: print "Failed to generate report or write it to S3!"
        
########NEW FILE########
__FILENAME__ = hitgrader
#!/usr/bin/env python
#

import os
import time
import urllib
import re
import boto

from django.core.management.base import BaseCommand, CommandError
from django.conf import settings
from optparse import make_option

from courses.exams.autograder import *
from pprint import pprint

class Command(BaseCommand):
    help = """
    """

    option_list = (
        # Main options
        make_option("-g", "--grader", dest="grader",
            help="IP or DNS name of grader to hit"),
        make_option("-q", "--question", dest="question", default="dtd3",
            help="question name (default: dtd3)"),
    ) + BaseCommand.option_list


    def handle(self, *args, **options):

        xml = {}
        answer = {}

        xml['sql'] = """
<exam_metadata>
    <question_metadata id="q1" data-report="q1">
        <solution></solution>
        <response name="q1b" answertype="dbinteractiveresponse">
            <grader_name>SQL_Grader_schroot</grader_name>
            <database-file>sql-social-query2.db</database-file>
            <answer-file>sql-social-query-ans2.txt</answer-file>
            <select_dict></select_dict>
            <parameters>
                <qnum>1</qnum>
                <answer-text>Enter your SQL query here</answer-text>
            </parameters>
        </response>
    </question_metadata>
</exam_metadata>"""
        answer['sql'] = """
        """

        xml['dtd3'] = """
    <question_metadata id="q44eb4ddedb49455b08666f30a4c55108" data-report="q44eb4ddedb49455b08666f30a4c55108">
        <solution></solution>
        <response name="dtd3" answertype="dbinteractiveresponse">
            <grader_name>DTD_Grader_schroot</grader_name>
            <database-file>countries.xml</database-file>
            <answer-file>DTD</answer-file>
            <select_dict></select_dict>
            <parameters>
                <qnum>3</qnum>
                <answer-text>Enter your DTD here</answer-text>
                <runquery-tag>Validate</runquery-tag>
            </parameters>
        </response>
    </question_metadata>
        """
        answer['dtd3'] = """
<!ELEMENT countries (country*)>
<!ELEMENT country (city*, religion*, language*)>
<!ATTLIST country name CDATA #REQUIRED
                  population CDATA #REQUIRED
                  area CDATA #REQUIRED>
<!ELEMENT city (name, population)>
<!ELEMENT name (#PCDATA)>
<!ELEMENT population (#PCDATA)>
<!ELEMENT language (#PCDATA)>
<!ATTLIST language percentage CDATA #REQUIRED>
    """

        if 'grader' in options and options['grader']:
            url = "http://%s/AJAXPostHandler.php" % options['grader']
            settings.GRADER_ENDPOINT = url

        q = options['question'] 
        ag = AutoGrader(xml[q])
        graded = ag.grade(q, answer[q])
        # pprint(graded)
        print "%s: correct = %s, score = %s" % (str(datetime.now()), graded['correct'], graded['score'])


########NEW FILE########
__FILENAME__ = regrade
try:
    from dateutil import parser
except ImportError, msg:
    parser = False
from optparse import make_option

from django.core.management.base import BaseCommand, CommandError

from c2g.models import ExamRecord, Exam, ExamScore, ExamRecordScore
from courses.exams.autograder import *
from courses.exams.views import compute_penalties

class Command(BaseCommand):
    args = "<exam id>"
    help = "Regrade all results for an exam and report scores that are incorrect. With the -u option update the database."

    option_list = (
        make_option("-u", "--update", action="store_false", dest="dryrun", default=True,
            help="update regraded rows in database (default is dry run)"),
        make_option("-n", "--no_penalties", action="store_false", dest="penalties", default=True,
            help="don't calculate with late or attempt limit penalties"),
        make_option("-s", "--student", dest="student_ids",
            help="comma-separated list of students, identified by ids"),
        make_option("--start", dest="start_time",
            help="consider entries no earlier than X, eg \"2/17/2013\" or \"1/1/2012 14:40\". We use the python dateutil parser on dates, see http://labix.org/python-dateutil"),
        make_option("--end", dest="end_time",
            help="consider entries no later than X"),
    ) + BaseCommand.option_list

    def handle(self, *args, **options):
        errors = 0
        regrades = 0
        updates = 0

        if len(args) != 1:
           raise CommandError("exam id is required")
        examid = args[0]

        exam_obj = Exam.objects.get(id__exact=examid) 
        autograder = AutoGrader(exam_obj.xml_metadata)

        examRecords = ExamRecord.objects \
                .select_related('examrecordscore', 'student') \
                .filter(exam_id__exact=examid, complete=True)
        if not parser and (options['start_time'] or options['end_time']):
            raise CommandError("Can't parse start and end times without having 'dateutil' installed.\nSee http://labix.org/python-dateutil")
        if options['start_time']:
            start = parser.parse(options['start_time'])
            examRecords = examRecords.filter(time_created__gt=start)
        if options['end_time']:
            end = parser.parse(options['end_time'])
            examRecords = examRecords.filter(time_created__lt=end)
        if options['student_ids']:
            sidlist = options['student_ids'].split(',')
            examRecords = examRecords.filter(student__in=sidlist)
        # search in reverse ID order so that the latest attempts get precedence.  If two 
        # attempts have the same score, then want the latest attempt to be the one that 
        # matters.
        examRecords = examRecords.order_by('-id')
        
        # this executes the query
        if len(examRecords) == 0:
            print "warning: no exam records found, is that what you intended?"
            return

        count = 1
        for er in examRecords:
            ers_created = False
            ers = er.examrecordscore
            if ers is None:
                ers = ExamRecordScore(record=er, raw_score=0.0)
                ers_id_string = "new"
                ers_created = True
            else:
                ers_id_string = str(ers.id)
            print "ExamRecord %d, %d of %d".encode('ascii','ignore') % (er.id, count, len(examRecords))
            count += 1
            try:
                score_before = er.score
                rawscore_before = ers.raw_score
                if score_before == None:     # scores of 0 come back from model as None
                    score_before = 0.0       # not sure why but they do
                if rawscore_before == None:
                    rawscore_before = 0.0
                score_after = 0.0
                rawscore_after = 0.0
                submitted = json.loads(er.json_data)
                regrade = {}
                for prob, v in submitted.iteritems():
                    if isinstance(v,list):    # multiple choice case
                        student_input = map(lambda li: li['value'], v)
                        regrade[prob] = autograder.grade(prob, student_input)
                    else:                     # single answer case
                        student_input = v['value']
                        regrade[prob] = autograder.grade(prob, student_input)
                    if 'feedback' in regrade[prob]:
                        del regrade[prob]['feedback']   # remove giant feedback field
                    if 'score' in regrade[prob]:
                        rawscore_after += float(regrade[prob]['score'])
            
                is_late = er.time_created > exam_obj.grace_period
                if er.attempt_number == 0:
                    print "ERROR: examrecord %d: skip, attempt_number=0".encode('ascii','ignore') \
                            % er.id
                    errors += 1
                    continue
                if options['penalties']:
                    days_late = er.days_late(grace_period=exam_obj.grace_period)
                    score_after = compute_penalties(rawscore_after, er.attempt_number,
                                                    exam_obj.resubmission_penalty,
                                                    is_late, exam_obj.late_penalty,
                                                    late_days=days_late,
                                                    daily_late_penalty=exam_obj.daily_late_penalty)
                else:
                    score_after = rawscore_after
                s = er.student

                try:
                    es = ExamScore.objects.get(exam=exam_obj, student=s)
                    es_id_string = str(es.id)
                    examscore_before = es.score
                except ExamScore.DoesNotExist:
                    es = ExamScore(course=er.course, exam=exam_obj, student=s)
                    es_id_string = "new"
                    examscore_before = -1
                examscore_after = max(examscore_before, score_after)
                
                #raw = raw score, score = with penalties, agg = exam_score, over all attempts
                status_line =  u"\"%s\", \"%s\", %s, %s, %s, " \
                        % (s.first_name, s.last_name, s.username, s.email, er.time_created)
                status_line += u"raw[%s]:%0.1f->%0.1f " \
                        % (ers_id_string, rawscore_before, rawscore_after)
                status_line += u"score[%d]:%0.1f->%0.1f " \
                        % (er.id, score_before, score_after)
                status_line += u"agg[%s]:%0.1f->%0.1f " \
                        % (es_id_string, examscore_before, examscore_after)
                status_line += u"late:%d->%d" \
                        % (er.late, is_late)
                        
                if score_before == score_after and rawscore_before == rawscore_after \
                   and examscore_before == examscore_after and is_late == er.late :
                    print "OK: " +  status_line.encode('ascii','ignore')
                    continue

                regrades += 1
                print "REGRADE: " + status_line.encode('ascii','ignore') 

                if not options['dryrun']:
                    if score_before != score_after or is_late != er.late:
                        er.json_score_data = json.dumps(regrade)
                        er.score = score_after
                        er.late = is_late
                        er.save()
                        updates += 1
                    if ers_created or rawscore_before != rawscore_after:
                        ers.raw_score = rawscore_after
                        ers.save()
                        updates += 1
                    if examscore_before != examscore_after:
                        es.score = examscore_after
                        es.examrecordscore = ers
                        es.save()
                        updates += 1

            # exception handler around big ExamRecords loop -- trust me, it lines up
            # this just counts and skips offending rows so we can keep making progress
            except Exception as e:
                print u"ERROR: examrecord %d: cannot regrade: %s".encode('ascii','ignore') \
                        % (er.id, unicode(e))
                errors += 1
                continue

        print
        print "## SUMMARY ##"
        print "# Errors: %d" % errors
        print "# Regrades: %d" % regrades
        print "# Database rows updated: %d" % updates



########NEW FILE########
__FILENAME__ = test_gen_all_reports
from django.core.management.base import BaseCommand, CommandErrorfrom c2g.models import *from django.contrib.auth.models import User,Groupfrom django.db import connection, transactionfrom datetime import datetime, timedeltafrom courses.reports.generation.gen_course_dashboard_report import *from courses.reports.generation.gen_quiz_summary_report import *from courses.reports.generation.gen_quiz_full_report import *class Command(BaseCommand):    help = "Test generate one instance of every possible report for a single course (if arg supplied), or all courses\n"        def handle(self, *args, **options):        save_to_s3 = True                if len(args) == 0:            now = datetime.now()            courses = Course.objects.filter(mode='ready', calendar_end__gt=now)        else:                try:                courses = [Course.objects.get(handle= args[0], mode='ready')]            except Course.DoesNotExist:                print "Failed to find course with given handle"                return        for ready_course in courses:            # Generate course dashboard report            report = gen_course_dashboard_report(ready_course, save_to_s3)            if save_to_s3:                if report['path']: print "Report successfully written to: %s" % report['path']                else: print "Failed to generate report or write it to S3!"                            # Generate Courser quizzes summary report            report = gen_course_quizzes_report(ready_course, save_to_s3)            if save_to_s3:                if report['path']: print "Report successfully written to: %s" % report['path']                else: print "Failed to generate report or write it to S3!"                            # Video reports            videos = Video.objects.getByCourse(course=ready_course).order_by('-live_datetime')                        for ready_quiz in videos:                report = gen_quiz_full_report(ready_course, ready_quiz, save_to_s3)                if save_to_s3:                    if report['path']: print "Report successfully written to: %s" % report['path']                    else: print "Failed to generate report or write it to S3!"                                    report = gen_quiz_summary_report(ready_course, ready_quiz, save_to_s3)                if save_to_s3:                    if report['path']: print "Report successfully written to: %s" % report['path']                    else: print "Failed to generate report or write it to S3!"                                # Problemsets            problem_sets = ProblemSet.objects.getByCourse(course=ready_course).order_by('-live_datetime')            for ready_quiz in problem_sets:                report = gen_quiz_full_report(ready_course, ready_quiz, save_to_s3)                if save_to_s3:                    if report['path']: print "Report successfully written to: %s" % report['path']                    else: print "Failed to generate report or write it to S3!"                                    report = gen_quiz_summary_report(ready_course, ready_quiz, save_to_s3)                if save_to_s3:                    if report['path']: print "Report successfully written to: %s" % report['path']                    else: print "Failed to generate report or write it to S3!"            
########NEW FILE########
__FILENAME__ = tasks
from celery import task
from django.contrib.auth.models import User
from courses.actions import is_member_of_course
from django.template.loader import render_to_string
from django.core.mail import EmailMultiAlternatives, get_connection
from django.core.mail import send_mail
from django.db.models import Q
from django.contrib import messages
from django.core.urlresolvers import reverse
from c2g.models import Course, StudentInvitation
from urllib import quote_plus

import settings
import re

@task()
def add_student_task(request, course, new_student_email, send_email, batched=False):
    """
        This is a factored-out helper function that takes an email address of an
        invited student and determines whether to add the student to the course or
        send the student an email about creating an account, etc.
        
        This has been made into a celery task. Calling this task with
        using a dummy/stripped down request would be useful to reduce pickled
        datastructure size.  The task should be called with batched=True and
        a request that only needs to be used for build_absolute_uri 
        (has META['HTTP_HOST'])
    """
    #First search for matching students
    new_students = User.objects.filter(Q(username__iexact=new_student_email) | Q(email__iexact=new_student_email))
    if new_students.exists():
        #this is the case where we don't need to create users
        for student in new_students:
            if not is_member_of_course(course, student):
                course.student_group.user_set.add(student)
                if send_email:
                    email_existing_student_enrollment(request, course, student)
                if not batched:
                    messages.add_message(request, messages.INFO, 'Successfully enrolled student %s in course' % student.username)
            else:
                if not batched:
                    messages.add_message(request, messages.WARNING, 'Student %s is already a course member' % student.username)
    else:
        #this is the case where there is no existing user, so we send an invitation
        invite, created = StudentInvitation.objects.get_or_create(course=course, email=new_student_email)
        if created and not batched:
            messages.add_message(request, messages.INFO, 'Successfully invited student %s to create a Class2Go account for the course' \
                                 % new_student_email)
        elif not batched:
            messages.add_message(request, messages.WARNING, '%s has already been invited to the course.  An invitation email has been re-sent' \
                                 % new_student_email)
        
        #in the case of an invitation to create a new account, we have to send email no matter the checkbox
        email_new_student_invite(request,invite)


def email_new_student_invite(request, invite):
    course = invite.course
    email_text = render_to_string('member_management/student_invite.txt',
                                  {'title':course.title,
                                  'registration_url':request.build_absolute_uri(reverse('registration_register')) \
                                  + "?invite=%s" % quote_plus(invite.email),
                                  'course_url':request.build_absolute_uri(reverse('courses.views.main', args=[course.prefix, course.suffix])),
                                  'institution':settings.SITE_TITLE,
                                  'email':invite.email,
                                  })
    email_html = render_to_string('member_management/student_invite.html',
                                  {'title':course.title,
                                  'registration_url':request.build_absolute_uri(reverse('registration_register')) \
                                  + "?invite=%s" % quote_plus(invite.email),
                                  'course_url':request.build_absolute_uri(reverse('courses.views.main', args=[course.prefix, course.suffix])),
                                  'institution':settings.SITE_TITLE,
                                  'email':invite.email,
                                  })
    subject = "You have been invited to register for " + course.title
    
    staff_email = settings.SERVER_EMAIL
    course_title_no_quotes = re.sub(r'"', '', course.title) # strip out all quotes
    from_addr = '"%s" Course Staff <%s>' % (course_title_no_quotes, staff_email) #make certain that we quote the name part of the email address
    email_helper(subject, email_text, email_html, from_addr, invite.email)


def email_existing_student_enrollment(request, course, user):
    email_text = render_to_string('member_management/existing_student_enroll.txt',
                                  {'user':user,
                                  'title':course.title,
                                  'url':request.build_absolute_uri(reverse('courses.views.main', args=[course.prefix, course.suffix])),
                                  'institution':settings.SITE_TITLE,
                                  })
    email_html = render_to_string('member_management/existing_student_enroll.html',
                                  {'user':user,
                                  'title':course.title,
                                  'url':request.build_absolute_uri(reverse('courses.views.main', args=[course.prefix, course.suffix])),
                                  'institution':settings.SITE_TITLE,
                                  })
    subject = "You have been enrolled in " + course.title
    
    staff_email = settings.SERVER_EMAIL
    course_title_no_quotes = re.sub(r'"', '', course.title) # strip out all quotes
    from_addr = '"%s" Course Staff <%s>' % (course_title_no_quotes, staff_email) #make certain that we quote the name part of the email address
    email_helper(subject, email_text, email_html, from_addr, user.email)


def email_helper(subject, email_text, email_html, from_addr, to_addr):
    connection = get_connection() #get connection from settings
    connection.open()
    msg = EmailMultiAlternatives(subject, email_text, from_addr, [to_addr], connection=connection)
    msg.attach_alternative(email_html,'text/html')
    connection.send_messages([msg])
    connection.close()


########NEW FILE########
__FILENAME__ = views
# Create your views here.
from c2g.models import *
from django.contrib.auth.models import User
from django.http import HttpResponse, HttpResponseBadRequest, Http404, HttpResponseRedirect, HttpRequest
from django.shortcuts import render_to_response
from django.template import RequestContext
from courses.actions import auth_is_course_admin_view_wrapper, is_member_of_course
from django.views.decorators.http import require_POST
from django.core.urlresolvers import reverse
from django.core.paginator import Paginator, EmptyPage, PageNotAnInteger
from django.contrib import messages
from django.core.validators import validate_email
from django.core.exceptions import ValidationError
from django.db.models import Q
from courses.member_management.tasks import add_student_task, email_new_student_invite
import csv

@auth_is_course_admin_view_wrapper
def listAll(request, course_prefix, course_suffix):
    """
    This view can be used to list all members of a course.
    It will only paginate students.    
    """
    course = request.common_page_data['course']
    instructors = course.instructor_group.user_set.all()
    tas = course.tas_group.user_set.all()
    students = course.get_all_students().order_by('username')
    invites = StudentInvitation.objects.filter(course=course)
    per_page_str = request.GET.get('per_page', '25')
    page_str = request.GET.get('page')
    invite_page_str = request.GET.get('invite_page')
    
    try:
        per_page = int(per_page_str)
    except ValueError:
        #just go with the defaults here
        per_page = 25

    student_filter = request.GET.get('student_filter', '')
    if student_filter:
        students = students.filter(Q(username__icontains=student_filter) | Q(email__icontains=student_filter))

    num_students = students.count()

    paginator = Paginator(students, per_page)

    try:
        student_page = paginator.page(page_str)
    except PageNotAnInteger:
        student_page = paginator.page(1)
    except EmptyPage:
        student_page = paginator.page(paginator.num_pages)

    invite_filter = request.GET.get('invite_filter', '')
    if invite_filter:
        invites = invites.filter(email__icontains=invite_filter)

    num_invites = invites.count()

    invite_paginator = Paginator(invites, per_page)

    try:
        invite_page = invite_paginator.page(invite_page_str)
    except PageNotAnInteger:
        invite_page = invite_paginator.page(1)
    except EmptyPage:
        invite_page = invite_paginator.page(invite_paginator.num_pages)

    return render_to_response('member_management/list.html',
                                {'common_page_data':request.common_page_data,
                                 'course':course,
                                 'instructors':instructors,
                                 'tas':tas,
                                 'num_students':num_students,
                                 'student_page':student_page,
                                 'student_filter':student_filter,
                                 'num_invites':num_invites,
                                 'invite_page':invite_page,
                                 'invite_filter':invite_filter,
                                 'per_page':per_page},
                               context_instance=RequestContext(request))

@require_POST
@auth_is_course_admin_view_wrapper
def unenroll_student(request, course_prefix, course_suffix):
    """This view allows course admins to unenroll students"""
    course = request.common_page_data['course']
    username = request.POST.get('remove_username')
    try:
        student = User.objects.get(username=username)
        if course.student_group in student.groups.all():
            course.student_group.user_set.remove(student)
            messages.add_message(request, messages.INFO, 'Student %s has been removed from this course' % username)

    except User.DoesNotExist, User.MultipObjectsReturned:
        pass

    return HttpResponseRedirect(reverse('courses.member_management.views.listAll', args=[course_prefix, course_suffix]) + "#students")


@require_POST
@auth_is_course_admin_view_wrapper
def reclassify_member(request, course_prefix, course_suffix):
    """This view allows course admins to reclassify a course member as a student/ta/readonly-ta/instructor"""
    course = request.common_page_data['course']
    username = request.POST.get('username')
    # will be one of "student", "instructor", "ta", "readonly_ta"
    to_group = request.POST.get('to_group')
    
    #validate username
    try:
        user = User.objects.get(username=username)
    except User.DoesNotExist:
        messages.add_message(request, messages.ERROR, 'Username "%s" does not correspond to a user in the system' % username)
        return HttpResponseRedirect(reverse('courses.member_management.views.listAll', args=[course_prefix, course_suffix]) + "#students")
    if not is_member_of_course(course, user):
        messages.add_message(request, messages.ERROR, 'User "%s" is not a member of this course!' % username)
        return HttpResponseRedirect(reverse('courses.member_management.views.listAll', args=[course_prefix, course_suffix]) + "#students")

    #validate to_group
    poss_groups = { "students" : course.student_group,
                    "instructors" : course.instructor_group,
                    "tas" : course.tas_group,
                    "readonly_tas" : course.readonly_tas_group
                  }

    if to_group not in poss_groups:
        messages.add_message(request, messages.ERROR, 'You have specified an invalid course role for this course member %s' % username)
        return HttpResponseRedirect(reverse('courses.member_management.views.listAll', args=[course_prefix, course_suffix]) + "#students")

    for desc, group in poss_groups.iteritems():
        if to_group == desc:
            group.user_set.add(user)
        else:
            group.user_set.remove(user)

    messages.add_message(request, messages.INFO, 'Successfully made %s a %s for %s' % (username, to_group, course.title))
    return HttpResponseRedirect(reverse('courses.member_management.views.listAll', args=[course_prefix, course_suffix]) + "#" + to_group)




@require_POST
@auth_is_course_admin_view_wrapper
def resend_invite(request, course_prefix, course_suffix):
    """This view allows course admins to resend invitation emails"""
    course = request.common_page_data['course']
    email = request.POST.get('resend_email')
    invites = StudentInvitation.objects.filter(course=course, email=email)
    for invite in invites:
        email_new_student_invite(request, invite)
        messages.add_message(request, messages.INFO, 'Re-sent invitation email to %s' % email)
    return HttpResponseRedirect(reverse('courses.member_management.views.listAll', args=[course_prefix, course_suffix]) + "#invited")

@require_POST
@auth_is_course_admin_view_wrapper
def uninvite(request, course_prefix, course_suffix):
    """This view allows course admins to rescind invitations"""
    course = request.common_page_data['course']
    email = request.POST.get('uninvite_email')
    invites = StudentInvitation.objects.filter(course=course, email=email)
    for invite in invites:
        invite.delete()
        messages.add_message(request, messages.INFO, 'The invitation for %s to join this course has been rescinded' % email)
    return HttpResponseRedirect(reverse('courses.member_management.views.listAll', args=[course_prefix, course_suffix]) + "#invited")



@require_POST
@auth_is_course_admin_view_wrapper
def enroll_students(request, course_prefix, course_suffix):
    """This view allows course admins to enroll a single or a csv-batch of students"""
    course = request.common_page_data['course']
    send_email = request.POST.get('send_email')

    #If it's a CSV-file batch, use the helper
    if request.FILES:
        return csv_enroll_helper(request, course, send_email)

    #a little bit of validation
    new_student_email = request.POST.get('new_email')
    if not new_student_email:
        messages.add_message(request, messages.ERROR, 'Please enter an email for the new student or choose a CSV file')
        return HttpResponseRedirect(reverse('courses.member_management.views.listAll', args=[course_prefix, course_suffix]))

    new_student_email = new_student_email.strip()
    
    try:
        validate_email(new_student_email)
    except ValidationError:
        messages.add_message(request, messages.ERROR, 'Please enter a valid email for the new student')
        return HttpResponseRedirect(reverse('courses.member_management.views.listAll', args=[course_prefix, course_suffix]))

    #now actually add the student(s).
    add_student_task(request, course, new_student_email, send_email)

    return HttpResponseRedirect(reverse('courses.member_management.views.listAll', args=[course_prefix, course_suffix]))


def csv_enroll_helper(request, course, send_email):
    """This helper function handles batch enrollment/inviting via a CSV file"""
    
    dummy_request = HttpRequest()
    dummy_request.META['HTTP_HOST'] = request.META['HTTP_HOST']
    
    if request.FILES:
        good_count=0;
        #We build up the records to be saved as a dict
        for f in request.FILES.itervalues():
            row_count=0;
            reader = csv.reader(f)
            for row in reader:  # each row should be: "<new_student_email>"
                row_count += 1
                valid, output = validate_row(row, row_count)
                if not valid:
                    messages.add_message(request, messages.WARNING, output)
                else:
                    add_student_task.delay(dummy_request, course, output, send_email, batched=True)
                    good_count += 1

        messages.add_message(request, messages.INFO, "Successfully queued %d students to be added" % good_count)
    return HttpResponseRedirect(reverse('courses.member_management.views.listAll', args=[course.prefix, course.suffix]))


def validate_row(row, row_num):
    """
        Helper function to validate a row read in from CSV.
        If validation fails, returns tuple of (False, error message).
        If validation succeeds, returns tuple of (True, email)
    """

    if not isinstance(row, list):
        return (False, "Badly formatted CSV row %d" % row_num)
    
    try:
        validate_email(row[0].strip())
    except ValidationError:
        return (False, "CSV row %d contains invalid email address: %s" % (row_num,row[0]))
                
    return (True, row[0].strip())




########NEW FILE########
__FILENAME__ = models
from django.db import models
from django.dispatch import receiver
from registration.signals import user_registered
# Create your models here.

########NEW FILE########
__FILENAME__ = models
from django.db import models

# Create your models here.

########NEW FILE########
__FILENAME__ = tests
"""
This file demonstrates writing tests using the unittest module. These will pass
when you run "manage.py test".

Replace this with more appropriate tests for your application.
"""

#from django.test import TestCase
#
#
#class SimpleTest(TestCase):
#    def test_basic_addition(self):
#        """
#        Tests that 1 + 1 always equals 2.
#        """
#        self.assertEqual(1 + 1, 2)

########NEW FILE########
__FILENAME__ = views
# Create your views here.

from registration.forms import RegistrationFormUniqueEmail
from registration.backends import get_backend
from django.shortcuts import redirect
from django.shortcuts import render_to_response
from django.template import RequestContext
from django.core.urlresolvers import reverse
from registration.backends import get_backend
from django.views.decorators.http import require_POST
from django.views.decorators.csrf import csrf_protect
from datetime import date
from django.contrib.auth.forms import AuthenticationForm
from django.views.decorators.cache import never_cache
from django.contrib.auth import login as auth_login
from django.conf import settings
from c2g.util import upgrade_to_https_and_downgrade_upon_redirect
from django.views.decorators.debug import sensitive_post_parameters
from c2g.models import Video, CourseInstructor

import os.path

import logging
logger=logging.getLogger("foo")

backend = get_backend('registration.backends.simple.SimpleBackend')
form_class = RegistrationFormUniqueEmail


@upgrade_to_https_and_downgrade_upon_redirect
def preview(request, course_prefix, course_suffix):
    """
    Much code borrowed from registration.views.register
    """
    if request.common_page_data['is_course_admin']:
        return redirect('http://'+request.get_host()+reverse('courses.views.main', args=[course_prefix, course_suffix]))
    
    if request.common_page_data['is_course_member'] and not request.common_page_data['course'].preview_only_mode and \
       date.today() >= request.common_page_data['course'].calendar_start :
        return redirect('http://'+request.get_host()+reverse('courses.views.main', args=[course_prefix, course_suffix]))

    if not backend.registration_allowed(request):
        return redirect(disallowed_url)
    
    try:
        video = Video.objects.getByCourse(course=request.common_page_data['course']).get(slug='intro')
    except Video.DoesNotExist:
        video = None
        
    course_instructors = CourseInstructor.objects.getByCourse(course=request.common_page_data['course'])
    instructors = []
    
    for ci in course_instructors:
        instructors.append(ci.instructor)
              
    form = form_class(initial={'course_prefix':course_prefix,'course_suffix':course_suffix})
    login_form = AuthenticationForm(request)
    context = RequestContext(request)

    # default template, unless there is one in the soruce tree, then use that
    template_name='previews/default.html'
    class_template='previews/'+request.common_page_data['course'].handle+'.html'
    dirs = getattr(settings,'TEMPLATE_DIRS', [])
    for dir in dirs:
        if os.path.isfile(dir+'/'+class_template):
            template_name=class_template


    return render_to_response(template_name,
                              {'form': form,
                               'login_form': login_form,
                               'video':video,
                               'instructors':instructors,
                               'common_page_data': request.common_page_data,
                               'course': request.common_page_data['course'],
                               'display_login': request.GET.__contains__('login')},
                               context_instance=context)

@sensitive_post_parameters()
@never_cache
@require_POST
@csrf_protect
@upgrade_to_https_and_downgrade_upon_redirect
def preview_login(request, course_prefix, course_suffix):
    """
    Login to c2g in preview mode
    """
    login_form = AuthenticationForm(data=request.POST)
    if login_form.is_valid():
        auth_login(request, login_form.get_user())
        if not request.common_page_data['course'].preview_only_mode and \
           date.today() >= request.common_page_data['course'].calendar_start :
            redirect_to = 'courses.views.main'
        else:
            redirect_to = 'courses.preview.views.preview'
        return redirect(reverse(redirect_to, args=[course_prefix, course_suffix]))
    else:
        form = form_class(initial={'course_prefix':course_prefix,'course_suffix':course_suffix})
        context = RequestContext(request)
        # default template, unless there is one in the soruce tree, then use that
        template_name='previews/default.html'
        class_template='previews/'+request.common_page_data['course'].handle+'.html'
        dirs = getattr(settings,'TEMPLATE_DIRS', [])
        for dir in dirs:
            if os.path.isfile(dir+'/'+class_template):
                template_name=class_template
        return render_to_response(template_name,
                                  {'form': form,
                                   'login_form': login_form,
                                   'common_page_data': request.common_page_data,
                                   'display_login': True},
                                  context_instance=context)

@sensitive_post_parameters()
@require_POST
@csrf_protect
@never_cache
@upgrade_to_https_and_downgrade_upon_redirect
def preview_reg(request, course_prefix, course_suffix):
    """
    Registering for a course in preview mode
    """
    form = form_class(data=request.POST, files=request.FILES)
    if form.is_valid():
        new_user = backend.register(request, **form.cleaned_data)
        course_group = request.common_page_data['course'].student_group
        course_group.user_set.add(new_user)
        if not request.common_page_data['course'].preview_only_mode and \
           date.today() >= request.common_page_data['course'].calendar_start :
            redirect_to = 'courses.views.main'
        else:
            redirect_to = 'courses.preview.views.preview'
        return redirect(reverse(redirect_to, args=[course_prefix, course_suffix]))
    else:
        login_form = AuthenticationForm(data=request.POST)
        context = RequestContext(request)
        # default template, unless there is one in the soruce tree, then use that
        template_name='previews/default.html'
        class_template='previews/'+request.common_page_data['course'].handle+'.html'
        dirs = getattr(settings,'TEMPLATE_DIRS', [])
        for dir in dirs:
            if os.path.isfile(dir+'/'+class_template):
                template_name=class_template

        return render_to_response(template_name,
                                      {'form': form,
                                      'login_form': login_form,
                                      'common_page_data': request.common_page_data,
                                      'display_login': False},
                                      context_instance=context)

########NEW FILE########
__FILENAME__ = C2GReportWriter
import logging
import csv
import re
from cStringIO import StringIO
from settings import AWS_ACCESS_KEY_ID, AWS_SECRET_ACCESS_KEY, AWS_SECURE_STORAGE_BUCKET_NAME
from storages.backends.s3boto import S3BotoStorage
from django.core.files.storage import default_storage
from datetime import datetime, timedelta

logger = logging.getLogger(__name__)
    
class C2GReportWriter:
    def __init__(self, save_to_s3_arg, s3_filepath = ''):
        self.save_to_s3 = save_to_s3_arg
        self.report_str = StringIO()
        self.csv_writer = csv.writer(self.report_str)
            
        if self.save_to_s3:
            self.s3_filepath = s3_filepath
            if AWS_SECURE_STORAGE_BUCKET_NAME == 'local': self.secure_file_storage = default_storage
            else: self.secure_file_storage = S3BotoStorage(bucket=AWS_SECURE_STORAGE_BUCKET_NAME, access_key=AWS_ACCESS_KEY_ID, secret_key=AWS_SECRET_ACCESS_KEY)

            
    def write(self, content=[], indent = 0, nl = 0):
        padded_content = [""] * indent
        for item in content:
            if isinstance(item, (int, long)): padded_content.append(str(item))
            elif isinstance(item, float): padded_content.append("%.2f" % item)
            else: padded_content.append(item)
        
        try:
            self.csv_writer.writerow(padded_content)
        except UnicodeEncodeError:
            logger.info("Failed to write row for file {0} due to unicode encode error.".format(self.s3_filepath))
            
        for i in range(nl): self.csv_writer.writerow([""])
        
    def writeout(self):
        content = self.report_str.getvalue()
        if self.save_to_s3:
            s3_file = self.secure_file_storage.open(self.s3_filepath, 'wb')
            s3_file.write(content)
            s3_file.close()
        
        return content

########NEW FILE########
__FILENAME__ = gen_class_roster
from c2g.models import *
from django.contrib.auth.models import User,Group
from courses.reports.generation.C2GReportWriter import *
from c2g.readonly import use_readonly_database

@use_readonly_database
def gen_class_roster(ready_course, save_to_s3=False):
    dt = datetime.now()
    course_prefix = ready_course.handle.split('--')[0]
    course_suffix = ready_course.handle.split('--')[1]
    
    report_name = "%02d_%02d_%02d__%02d_%02d_%02d-%s-Class-Roster.csv" % (dt.year, dt.month, dt.day, dt.hour, dt.minute, dt.second, course_prefix+'_'+course_suffix)
    s3_filepath = "%s/%s/reports/class_roster/%s" % (course_prefix, course_suffix, report_name)
    
    rw = C2GReportWriter(save_to_s3, s3_filepath)
    
    # Title
    rw.write(content = ["Class Roster for %s (%s %d) as of %02d/%02d/%d" % (ready_course.title, ready_course.term.title(), ready_course.year, dt.month, dt.day, dt.year)], nl = 1)
    
    # Members
    students = ready_course.student_group.user_set.order_by('username').all().order_by('last_name').values_list('first_name', 'last_name', 'email', 'username')
    
    rw.write(content = ["Num. Students:", "", len(students)], nl=1)
    
    rw.write(content = ["First namme", "Last name", "Email", "Username"])
    for s in students:
        rw.write(content = [s[0], s[1], s[2], s[3]])
    
    report_content = rw.writeout()
    return {'name': "%02d_%02d_%02d__%02d_%02d_%02d-%s-Class-Roster.csv" % (dt.year, dt.month, dt.day, dt.hour, dt.minute, dt.second, course_prefix+'_'+course_suffix), 'content': report_content, 'path': s3_filepath}


########NEW FILE########
__FILENAME__ = gen_course_dashboard_report
from c2g.models import *
from django.contrib.auth.models import User,Group
from datetime import datetime, timedelta
from courses.reports.generation.C2GReportWriter import *


def gen_course_dashboard_report(ready_course, save_to_s3=False):
    dt = datetime.now()
    course_prefix = ready_course.handle.split('--')[0]
    course_suffix = ready_course.handle.split('--')[1]
    
    report_name = "%02d_%02d_%02d__%02d_%02d_%02d-%s-Dashboard.csv" % (dt.year, dt.month, dt.day, dt.hour, dt.minute, dt.second, course_prefix+'_'+course_suffix)
    s3_filepath = "%s/%s/reports/dashboard/%s" % (course_prefix, course_suffix, report_name)
    
    rw = C2GReportWriter(save_to_s3, s3_filepath)
    
    # Title
    rw.write(content = ["Dashboard for %s (%s %d)" % (ready_course.title, ready_course.term.title(), ready_course.year)], nl = 1)
    
    # Members
    num_prof = ready_course.instructor_group.user_set.all().count()
    num_stud = ready_course.student_group.user_set.all().count()
    num_tas = ready_course.tas_group.user_set.all().count()
    num_rota = ready_course.readonly_tas_group.user_set.all().count()
    
    rw.write(content = ["Members"])
    rw.write(content = ["Students", num_stud, "Professors", num_prof, "TAs", num_tas, "Readonly TAs", num_rota], indent = 1, nl = 1)
    
    # Content
    live_exam_objects = Exam.objects.getByCourse(course=ready_course)
    all_exam_objects = Exam.objects.getByCourse(course=ready_course.image)
    exam_types = [li[0] for li in Exam.EXAM_TYPE_CHOICES]
    exam_content = {}
    for exam_type in exam_types:
        content_tuple = (all_exam_objects.filter(exam_type=exam_type), live_exam_objects.filter(exam_type=exam_type))
        exam_content[exam_type] = content_tuple

    num_all_formative_problem_sets = exam_content["problemset"][0].filter(assessment_type="formative").count()
    num_live_formative_problem_sets = exam_content["problemset"][1].filter(assessment_type="formative").count()
    num_all_summative_problem_sets = exam_content["problemset"][0].filter(assessment_type="summative").count()
    num_live_summative_problem_sets = exam_content["problemset"][1].filter(assessment_type="summative").count()
    num_all_videos = Video.objects.getByCourse(course=ready_course.image).count()
    live_videos = Video.objects.getByCourse(course=ready_course)
    num_live_videos = live_videos.count()
    num_all_pages = AdditionalPage.objects.getByCourse(course=ready_course.image).count()
    live_additional_pages = AdditionalPage.objects.getByCourse(course=ready_course)
    num_live_pages = live_additional_pages.count()
    num_all_files = File.objects.getByCourse(course=ready_course.image).count()
    num_live_files = File.objects.getByCourse(course=ready_course).count()
    
    rw.write(content = ["Content"])
    rw.write(content = ["Formative Quizzes", "Summative Quizzes", "Interactive Exercises", "Exams", "Surveys",  "Videos", "Content Pages", "Files"], indent = 2)
    rw.write(content = ["All", num_all_formative_problem_sets, num_all_summative_problem_sets, exam_content["interactive_exercise"][0].count(), exam_content["exam"][0].count(), exam_content["survey"][0].count(), num_all_videos, num_all_pages, num_all_files], indent = 1)
    rw.write(content = ["Live", num_live_formative_problem_sets, num_live_summative_problem_sets, exam_content["interactive_exercise"][1].count(), exam_content["exam"][1].count(), exam_content["survey"][1].count(), num_live_videos, num_live_pages, num_live_files], indent = 1)
    
    # Activity
    rw.write(content = ["Page Visits (Only live items are shown)"], nl = 1)

    visits = {}
    for exam_type in exam_types:
        visits[Exam.Exam_HUMAN_TYPES_PLURAL[exam_type]] = get_visit_information(ready_course, exam_content[exam_type][1], exam_type)
    visits["Videos"] = get_visit_information(ready_course, live_videos, 'video')
    visits["Content pages"] = get_visit_information(ready_course, live_additional_pages, 'additional_page')
    visits["Forum"] = get_visit_information(ready_course, None, 'forum')

    content_types = ["Forum", "Quizzes", "Interactive Exercises", "Exams", "Surveys", "Videos", "Content pages"]    
    for content_type in content_types:
        rw.write(content = [content_type], indent = 1)
        if content_type == "Forum":
            rw.write(content = ["", "", "", "Past day total", "Past day unique", "", "Past week total", "Past week unique", "", "all_time_total", "all_time_unique"], indent = 1)
            rw.write(content = ["", "", "", visits["Forum"][0]['past_day_total'], visits["Forum"][0]['past_day_unique'], "", visits["Forum"][0]['past_week_total'], visits["Forum"][0]['past_week_unique'], "", visits["Forum"][0]['all_time_total'], visits["Forum"][0]['all_time_unique']], indent = 1)
        else:
            if len(visits[content_type]) > 0:
                rw.write(content = ["URL ID", "Title", "", "Past day total", "Past day unique", "", "Past week total", "Past week unique", "", "all_time_total", "all_time_unique"], indent = 1)
                for item in visits[content_type]:
                    rw.write(content = [item['item'].slug, item['item'].title, "", item['past_day_total'], item['past_day_unique'], "", item['past_week_total'], item['past_week_unique'], "", item['all_time_total'], item['all_time_unique']], indent = 1)                
            else:
                rw.write(content = ["No live " + content_type.lower() + " yet."], indent = 2)
        rw.write([""])
    
    report_content = rw.writeout()
    return {'name': "%02d_%02d_%02d__%02d_%02d_%02d-%s-Dashboard.csv" % (dt.year, dt.month, dt.day, dt.hour, dt.minute, dt.second, course_prefix+'_'+course_suffix), 'content': report_content, 'path': s3_filepath}
    

def get_visit_information(ready_course, items, page_type):
    if items == None:
        visits_ = PageVisitLog.objects.filter(course=ready_course, page_type = page_type)
        visit_counts = analyze_visits(visits_)
        return [dict({'item': None}.items() + visit_counts.items())]
    else:
        visits = []
        for item in items:
            visits_ = PageVisitLog.objects.filter(course=ready_course, page_type = page_type, object_id=str(item.id))
            visit_counts = analyze_visits(visits_)
            visits.append(dict({'item': item}.items() + visit_counts.items()))
        return visits
            

def analyze_visits(visits_):
    now = datetime.now()
    now_minus_24_hours = now - timedelta(days=1)
    now_minus_1_week = now - timedelta(days=7)
    past_24_hours_total_visitors = visits_.filter(time_created__gt = now_minus_24_hours).values_list('user', flat=True)
    past_1_week_total_visitors = visits_.filter(time_created__gt = now_minus_1_week).values_list('user', flat=True)
    all_time_total_visitors = visits_.values_list('user', flat=True)
    
    past_24_hours_unique_visitors = set(past_24_hours_total_visitors)
    past_1_week_unique_visitors = set(past_1_week_total_visitors)
    all_time_unique_visitors = set(all_time_total_visitors)
    
    return {'past_day_total': len(past_24_hours_total_visitors), 'past_week_total': len(past_1_week_total_visitors), 'all_time_total': len(all_time_total_visitors), 'past_day_unique': len(past_24_hours_unique_visitors), 'past_week_unique': len(past_1_week_unique_visitors), 'all_time_unique': len(all_time_unique_visitors)}
    

########NEW FILE########
__FILENAME__ = gen_in_line_reports
from __future__ import division
from c2g.models import Exam, ExamScore
from c2g.readonly import use_readonly_database
from django.db.models import Count, Q
from datetime import datetime
from courses.reports.generation.get_quiz_data import get_student_scores
from courses.reports.generation.gen_quiz_summary_report import construct_scores_dict

@use_readonly_database
def gen_spec_in_line_report(report_name, course, username, green_param, blue_param):

    if report_name == 'quizzes_summary': 
        
        now = datetime.now()       
        exams = Exam.objects.values('title', 'slug').filter(~Q(exam_type='survey'), course=course, is_deleted=0, section__is_deleted=0, live_datetime__lt=now, invideo=0).order_by('title')

        headings = {}
        count_gt_67 = {}
        count_gt_34 = {}
        count_lt_34 = {}
        total_students = {}
        row_color = {}
        
        headings = ['Quiz Title', '# Students <33%', '33%< # Students <67%', '# Students >67%', 'Total # Students']

        students_gt_67 = ExamScore.objects.values('exam__title').select_related('student', 'exam').filter(~Q(exam__exam_type='survey'), course=course, exam__is_deleted=0, exam__section__is_deleted=0, exam__live_datetime__lt=now, exam__invideo=0).annotate(num_students=Count('student')).extra(where=["total_score*(66.7/100) <= score"])
        for row in students_gt_67:
            count_gt_67[row['exam__title']] = row['num_students']
        
        students_gt_34 = ExamScore.objects.values('exam__title').select_related('student', 'exam').filter(~Q(exam__exam_type='survey'), course=course, exam__is_deleted=0, exam__section__is_deleted=0, exam__live_datetime__lt=now, exam__invideo=0).annotate(num_students=Count('student')).extra(where=["total_score*(33.4/100) <= score and total_score*(66.7/100) > score"])
        for row in students_gt_34:
            count_gt_34[row['exam__title']] = row['num_students']
            
        students_lt_34 = ExamScore.objects.values('exam__title').select_related('student', 'exam').filter(~Q(exam__exam_type='survey'), course=course, exam__is_deleted=0, exam__section__is_deleted=0, exam__live_datetime__lt=now, exam__invideo=0).annotate(num_students=Count('student')).extra(where=["total_score*(33.4/100) > score"])
        for row in students_lt_34:
            count_lt_34[row['exam__title']] = row['num_students']            
        
        for exam in exams:
            total = 0
            total_gt_67 = 0
            
            total = count_gt_67.setdefault(exam['title'], 0)
            total += count_gt_34.setdefault(exam['title'], 0)
            total += count_lt_34.setdefault(exam['title'], 0)
                            
            #Populate total students dict
            total_students[exam['title']] = total
             
            total_gt_67 = count_gt_67.setdefault(exam['title'], 0)
            
            if (total < 20):
                row_color[exam['title']] = "grey"
            elif (total_gt_67 > 0) and ((total_gt_67/total)*100 >= int(green_param)):
                row_color[exam['title']] = "green"
            elif (total_gt_67 > 0) and ((total_gt_67/total)*100 >= int(blue_param)):
                row_color[exam['title']] = "blue"
            else:
                row_color[exam['title']] = "red"
        
           
        report_results = {}        
        report_results['headings'] = headings
        report_results['exam_titles'] = exams
        report_results['count_gt_67'] = count_gt_67
        report_results['count_gt_34'] = count_gt_34
        report_results['count_lt_34'] = count_lt_34
        report_results['total_students'] = total_students
        report_results['row_color'] = row_color
        
        return report_results
    
    elif report_name == 'student_scores':
        
        exams, student_scores = get_student_scores(course, username)
        scores_dict = construct_scores_dict(student_scores)
        
        titles = ["Username", "Title"]
        max_scores = ["", "Max Score"]
        for exam in exams:
            titles += [exam['title']]
            max_scores += [exam['total_score']]
            
        row = []
        rows = []
        for username, scores in sorted(scores_dict.iteritems()):
            row += [username]
            row += [scores['name']]
            for title in titles:
                if scores.get(title, False):
                    row += [str(scores.get(title))]
                elif titles.index(title) not in [0, 1]:
                    row += [""]
            
            rows.append(row)
            row = []
         
        report_results = {}
        report_results['headings'] = titles
        report_results['max_scores'] = max_scores
        report_results['rows'] = rows
        
        return report_results
        

########NEW FILE########
__FILENAME__ = gen_quiz_full_report
from c2g.models import *
from datetime import datetime
from courses.reports.generation.C2GReportWriter import *
from courses.reports.generation.get_quiz_data import *
from c2g.readonly import use_readonly_database

@use_readonly_database
def gen_quiz_full_report(ready_course, ready_quiz, save_to_s3=False):

    ### 1- Create the S3 file name and report writer object
    dt = datetime.now()
    course_prefix = ready_course.handle.split('--')[0]
    course_suffix = ready_course.handle.split('--')[1]
    is_video = isinstance(ready_quiz, Video)
    is_summative = (not is_video) and (ready_quiz.assessment_type == 'assessive')
    
    report_name = "%02d_%02d_%02d__%02d_%02d_%02d-%s.csv" % (dt.year, dt.month, dt.day, dt.hour, dt.minute, dt.second, ready_quiz.slug)
    if is_video:
        s3_filepath = "%s/%s/reports/videos/%s" % (course_prefix, course_suffix, report_name)
    else:
        s3_filepath = "%s/%s/reports/problemsets/%s" % (course_prefix, course_suffix, report_name)
    
    rw = C2GReportWriter(save_to_s3, s3_filepath)
    
    ### 2- Get the quiz data
    quiz_data = get_quiz_data(ready_quiz, get_visits = True)
    per_student_data = quiz_data['per_student_data']
    exercise_summaries = quiz_data['exercise_summaries']
    ex_ids = [ex_summ['id'] for ex_summ in exercise_summaries]
    
    ### 3- Writeout
    rw.write(["Activity for %s" % quiz_data['quiz_summary']['title']], nl = 1) 

    # Sort students by username
    sorted_usernames = sorted(per_student_data.keys())
    
    # If no activity, do not type anything unneeded.
    if not has_activity(per_student_data):
        rw.write(content=["No activity yet."], indent=1)
        report_content = rw.writeout()
        return {'name': report_name, 'path': s3_filepath, 'content': report_content}
        
    header1 = ["", ""]
    header2 = ["", ""]
    
    header1.extend(["", "Total score / %d"  % len(exercise_summaries)])
    header2.extend(["", ""])
    if is_summative:
        header1.extend(["Total score after late penalty"])
        header2.extend([""])
    
    header1.extend(["", "Num page visits", "Visit date/times"])
    header2.extend(["", "", ""])
        
    for ex_summary in exercise_summaries:
        header1.extend(["", "", ex_summary['slug'], "", "", ""])
        header2.extend(["", "", "Completed", "Attempts", "Score", "Median attempt time"])
        if is_summative:
            header1.extend(["",""])
            header2.extend(["First correct attempt timestamp", "Score after late penalty"])
    
    rw.write(header1)
    rw.write(header2)
    
    for u in sorted_usernames:
        stud_quiz_data = per_student_data[u]
        
        if len(stud_quiz_data['visits']) == 0 and len(stud_quiz_data['exercise_activity']) == 0:
            continue
        
        stud_score = 0
        stud_score_after_late_penalty = 0
        
        # User- and full name
        content = [u, stud_quiz_data['name']]
        
        # Total scores
        for ex_id in ex_ids:
            if ex_id in stud_quiz_data['exercise_activity']:
                ex_res = stud_quiz_data['exercise_activity'][ex_id]
            
                stud_score += (ex_res['score'] if isinstance(ex_res['score'], float) else 0)
                if is_summative and isinstance(ex_res['score_after_late_penalty'], float):
                    stud_score_after_late_penalty += ex_res['score_after_late_penalty']
        
        content.extend(["", stud_score])
        if is_summative:
            content.append(stud_score_after_late_penalty)
            
        
        # Student visit data
        content.extend(["", len(stud_quiz_data['visits']), ", ".join(stud_quiz_data['visits']) ])
        
        for ex_id in ex_ids:
            if ex_id in stud_quiz_data['exercise_activity']: ex_res = stud_quiz_data['exercise_activity'][ex_id]
            else: ex_res = {'completed': '', 'attempts': '', 'score': '', 'last_attempt_timestamp': '', 'score_after_late_penalty': '', 'median_attempt_time': ''}
            
            content.extend(["", "", 'y' if ex_res['completed'] else 'n', ex_res['attempts'], ex_res['score'], ex_res['median_attempt_time']])
            if is_summative:
                first_correct_attempt_timestamp = get_friendly_datetime(ex_res['last_attempt_timestamp']) if ex_res['completed'] else ""
                content.extend([first_correct_attempt_timestamp, ex_res['score_after_late_penalty']])
            
        rw.write(content)
        
    report_content = rw.writeout()
    return {'name': report_name, 'content': report_content, 'path': s3_filepath}

def get_friendly_datetime(dt):
    if isinstance(dt, datetime):
        return "{0}-{1}-{2} at {3}:{4}".format(dt.month, dt.day, dt.year, dt.hour, dt.minute)
    else:
        return ""
        
def has_activity(per_student_data):
    for u in per_student_data.keys():
        if len(per_student_data[u]['visits']) > 0 or len(per_student_data[u]['exercise_activity']) > 0:
            return True
            
    return False

@use_readonly_database
def gen_assessment_full_report(ready_course, ready_exam, save_to_s3=False):

    ### 1- Create the S3 file name and report writer object
    dt = datetime.now()
    course_prefix = ready_course.handle.split('--')[0]
    course_suffix = ready_course.handle.split('--')[1]
    
    is_video = ready_exam.invideo
    assessment_type = ready_exam.assessment_type
    
    report_name = "%02d_%02d_%02d__%02d_%02d_%02d-%s.csv" % (dt.year, dt.month, dt.day, dt.hour, dt.minute, dt.second, ready_exam.slug)
    
    #I'm pretty sure we want to put all the assessment reports in one place and should be classified as problemset reports.
#    if is_video:
#        s3_filepath = "%s/%s/reports/videos/%s" % (course_prefix, course_suffix, report_name)
#    else:
    s3_filepath = "%s/%s/reports/problemsets/%s" % (course_prefix, course_suffix, report_name)
    
    rw = C2GReportWriter(save_to_s3, s3_filepath)
    
    ### 2- Get the exam data
    student_scores, student_field_scores = get_full_assessment_data(ready_exam)
    
    ### 3- Writeout
    rw.write(["Activity for %s" % ready_exam.title], nl = 1)
    
    content = []
    content = ["", "Field", "Correct", "# Attempts", "Sub score", "Total score", "Max possible score"]
    rw.write(content, indent = 1)
    content = []
    
    for student_score in student_scores:
        name = student_score['student__first_name'] + " " + student_score['student__last_name']
        content.extend([student_score['student__username'], 
                        name,
                        "",
                        "",
                        "",
                        "",
                        student_score['score'],
                        ready_exam.total_score])
        rw.write(content)
        content = []
        
        for student_field_score in student_field_scores:
            if student_score['student__username'] == student_field_score['parent__record__student__username']:
                field_name = student_field_score['human_name']
                if not field_name:
                    field_name = student_field_score['field_name']
                content.extend([field_name,
                                student_field_score['correct'],
                                student_field_score['total_attempts'],
                                student_field_score['sub_score']])
                rw.write(content, indent=2)
                content = []
          
    
    report_content = rw.writeout()
    return {'name': report_name, 'content': report_content, 'path': s3_filepath}

########NEW FILE########
__FILENAME__ = gen_quiz_summary_report
import math
import json

from c2g.models import *
from courses.reports.generation.C2GReportWriter import *
from courses.reports.generation.get_quiz_data import *
from c2g.readonly import use_readonly_database

mean = lambda k: sum(k)/len(k)

@use_readonly_database
def gen_course_quizzes_report(ready_course, save_to_s3=False):
    
    ### 1- Compose the report file name and instantiate the report writer object
    dt = datetime.now()
    course_prefix = ready_course.handle.split('--')[0]
    course_suffix = ready_course.handle.split('--')[1]
    
    report_name = "%02d_%02d_%02d__%02d_%02d_%02d-%s-Course-Quizzes.csv" % (dt.year, dt.month, dt.day, dt.hour, dt.minute, dt.second, course_prefix+'_'+course_suffix)
    s3_filepath = "%s/%s/reports/course_quizzes/%s" % (course_prefix, course_suffix, report_name)
    
    rw = C2GReportWriter(save_to_s3, s3_filepath)
    
    ### 2- Write the Report Title
    rw.write(content = ["Course Quiz Summaries for %s (%s %d)" % (ready_course.title, ready_course.term.title(), ready_course.year)], nl = 1)
    
    ### 3- Write problem set reports
    rw.write(content = ["Problem sets"], nl = 1)
    
    problemsets = ProblemSet.objects.getByCourse(course=ready_course).order_by('section__index', 'index')
    for q in problemsets:
        WriteQuizSummaryReportContent(q, rw, full=False)
    
    ### 4- Write video reports
    rw.write(content = ["Videos"], nl = 1)
    
    videos = Video.objects.getByCourse(course=ready_course).order_by('section__index', 'index')
    for q in videos:
        WriteQuizSummaryReportContent(q, rw, full=False)
    
    
    ### 5- Proceed to write out and return
    report_content = rw.writeout()
    return {'name': report_name, 'content': report_content, 'path': s3_filepath}


@use_readonly_database
def gen_quiz_summary_report(ready_course, ready_quiz, save_to_s3=False):
    
    ### 1- Create the S3 file name and report writer object
    dt = datetime.now()
    course_prefix = ready_course.handle.split('--')[0]
    course_suffix = ready_course.handle.split('--')[1]
    is_video = isinstance(ready_quiz, Video)
    is_summative = (not is_video) and (ready_quiz.assessment_type == 'assessive')
    
    report_name = "%02d_%02d_%02d__%02d_%02d_%02d-%s.csv" % (dt.year, dt.month, dt.day, dt.hour, dt.minute, dt.second, ready_quiz.slug)
    if is_video:
        s3_filepath = "%s/%s/reports/videos_summary/%s" % (course_prefix, course_suffix, report_name)
    else:
        s3_filepath = "%s/%s/reports/problemsets_summary/%s" % (course_prefix, course_suffix, report_name)
    
    rw = C2GReportWriter(save_to_s3, s3_filepath)
    
    ### 2- Get the quiz data
    quiz_data = get_quiz_data(ready_quiz)
    per_student_data = quiz_data['per_student_data']
    exercise_summaries = quiz_data['exercise_summaries']
    
    ### 4- Write out the report content
    WriteQuizSummaryReportContent(ready_quiz, rw, full=False)

    ### 5- Proceed to write out and return
    report_content = rw.writeout()
    return {'name': report_name, 'content': report_content, 'path': s3_filepath}


def gen_course_assessments_report(ready_course, save_to_s3=False):
    
    ### 1- Compose the report file name and instantiate the report writer object
    dt = datetime.now()
    course_prefix = ready_course.handle.split('--')[0]
    course_suffix = ready_course.handle.split('--')[1]
    
    report_name = "%02d_%02d_%02d__%02d_%02d_%02d-%s-Course-Assessments.csv" % (dt.year, dt.month, dt.day, dt.hour, dt.minute, dt.second, course_prefix+'_'+course_suffix)
    s3_filepath = "%s/%s/reports/course_assessments/%s" % (course_prefix, course_suffix, report_name)
    
    rw = C2GReportWriter(save_to_s3, s3_filepath)
    
    ### 2- Write the Report Title
    rw.write(content = ["Course Assessment Summaries for %s (%s %d)" % (ready_course.title, ready_course.term.title(), ready_course.year)], nl = 1)
    
    ### 3- Write problem set reports
    rw.write(content = ["Assessments"], nl = 1)
    
    exams = Exam.objects.getByCourse(course=ready_course).order_by('section__index', 'index')
    for exam in exams:
        WriteAssessmentSummaryReportContent(exam, rw, full=False, csv=True)
    
    ### 4- Proceed to write out and return
    report_content = rw.writeout()
    return {'name': report_name, 'content': report_content, 'path': s3_filepath}

def gen_assessment_summary_report(ready_course, exam, save_to_s3=False):
    
    ### 1- Compose the report file name and instantiate the report writer object
    dt = datetime.now()
    course_prefix = ready_course.handle.split('--')[0]
    course_suffix = ready_course.handle.split('--')[1]
    
    report_name = "%02d_%02d_%02d__%02d_%02d_%02d-%s.csv" % (dt.year, dt.month, dt.day, dt.hour, dt.minute, dt.second, exam.slug)
    s3_filepath = "%s/%s/reports/problemsets_summary/%s" % (course_prefix, course_suffix, report_name)
    
    rw = C2GReportWriter(save_to_s3, s3_filepath)
    
    ### 2- Write the Report Title
    rw.write(content = ["Assessment Summary for %s (%s %d)" % (ready_course.title, ready_course.term.title(), ready_course.year)], nl = 1)
    
    ### 3- Write problem set reports
    WriteAssessmentSummaryReportContent(exam, rw, full=False, csv=True)
    
    ### 4- Proceed to write out and return
    report_content = rw.writeout()
    return {'name': report_name, 'content': report_content, 'path': s3_filepath}

def gen_survey_summary_report(ready_course, survey, save_to_s3=False):
    
    ### 1- Compose the report file name and instantiate the report writer object
    dt = datetime.now()
    course_prefix = ready_course.handle.split('--')[0]
    course_suffix = ready_course.handle.split('--')[1]
    
    report_name = "%02d_%02d_%02d__%02d_%02d_%02d-%s.csv" % (dt.year, dt.month, dt.day, dt.hour, dt.minute, dt.second, survey.slug)
    s3_filepath = "%s/%s/reports/survey_summary/%s" % (course_prefix, course_suffix, report_name)
    
    rw = C2GReportWriter(save_to_s3, s3_filepath)
    
    ### 2- Write the Report Title
    rw.write(content = ["Survey Summary for %s (%s %d)" % (ready_course.title, ready_course.term.title(), ready_course.year)], nl = 1)
    
    ### 3- Write survey report
    WriteSurveySummaryReportContent(survey, rw, full=False)
    
    ### 4- Proceed to write out and return
    report_content = rw.writeout()
    return {'name': report_name, 'content': report_content, 'path': s3_filepath}

def gen_assessment_student_scores_report(ready_course, save_to_s3=False):
    
    ### 1- Compose the report file name and instantiate the report writer object
    dt = datetime.now()
    course_prefix = ready_course.handle.split('--')[0]
    course_suffix = ready_course.handle.split('--')[1]
    
    report_name = "%02d_%02d_%02d__%02d_%02d_%02d.csv" % (dt.year, dt.month, dt.day, dt.hour, dt.minute, dt.second)
    s3_filepath = "%s/%s/reports/assessment_student_scores/%s" % (course_prefix, course_suffix, report_name)
    
    rw = C2GReportWriter(save_to_s3, s3_filepath)
    
    ### 2- Write the Report Title
    rw.write(content = ["Student Scores for %s (%s %d)" % (ready_course.title, ready_course.term.title(), ready_course.year)], nl = 1)
    rw.write(content= ["All student scores shown are with all penalties included"])
    
    ### 3- Write survey report
    WriteAssessmentStudentScoresReportContent(ready_course, rw, full=False)
    
    ### 4- Proceed to write out and return
    report_content = rw.writeout()
    return {'name': report_name, 'content': report_content, 'path': s3_filepath}

def WriteQuizSummaryReportContent(ready_quiz, rw, full=False):
    ### 1- Get the quiz data
    quiz_data = get_quiz_data(ready_quiz)
    quiz_summary = quiz_data['quiz_summary']
    exercise_summaries = quiz_data['exercise_summaries']
    
    ### 2- Write the title line
    rw.write([quiz_summary['title']])
    
    ### 3- Write out per-exercise report content
    if len(exercise_summaries) == 0:
        rw.write(content = ["No exercises have been added yet."], indent = 1, nl = 1)
        return
    
    # Summative problem sets get their mean and max scores written in the report
    if quiz_summary['assessment_type'] == 'summative':
        if len(quiz_summary['scores']) > 0:
            rw.write([
                "Mean score", mean(quiz_summary['scores']),
                "Max score", max(quiz_summary['scores']),
                "",
                "Mean score after late penalty", mean(quiz_summary['scores_after_late_penalty']),
                "Max score after late penalty", max(quiz_summary['scores_after_late_penalty']),
            ], indent = 1, nl = 1)
        
    # Exercise summary table header
    content = ["Exercise"]
    if quiz_summary['assessment_type'] == 'summative': content.extend(["Mean score", "Max score"])
    content.extend([
        "Total attempts",
        "Students who have attempted",
        "Correct attempts",
        "Correct 1st attempts",
        "Correct 2nd attempts",
        "Correct 3rd attempts",
        "Median attempts to (and including) first correct attempt",
        "Median attempt time",
        "Most freq incorrect answer",
    ])
    rw.write(content, indent = 1)
    
    # Exercise summary table rows
    for ex_summary in exercise_summaries:
        content = [ex_summary['slug']]
        if quiz_summary['assessment_type'] == 'summative':
            if len(ex_summary['scores']) > 0:
                content.extend([mean(ex_summary['scores']), max(ex_summary['scores'])])
            else:
                content.extend(["", ""])
        
        most_freq_inc_ans_str = "Too few, or no high freq, incorrect attempts"
        if len(ex_summary['most_frequent_incorrect_answers']) > 0:
            most_freq_inc_ans_content = ex_summary['most_frequent_incorrect_answers'][0][0]
            most_freq_inc_ans_percent = ex_summary['most_frequent_incorrect_answers'][0][1]
            most_freq_inc_ans_str = "%s (%.2f%% of all incorrect attempts)" % (most_freq_inc_ans_content, most_freq_inc_ans_percent)
            
        content.extend([
            ex_summary['num_attempts'],
            ex_summary['num_attempting_students'],
            ex_summary['num_correct_attempts'],
            ex_summary['num_correct_first_attempts'],
            ex_summary['num_correct_second_attempts'],
            ex_summary['num_correct_third_attempts'],
            ex_summary['median_num_attempts_to_fca'],
            ex_summary['median_attempt_time'],
            json.dumps(most_freq_inc_ans_str),
        ])
        
        rw.write(content, indent = 1)
        
    rw.write([""])
    

def WriteSurveySummaryReportContent(ready_survey, rw, full=False):
    
    ### 1- Get the survey data
    tally, errors, question_reports = get_survey_data(ready_survey)
    
    ### 2- Write the title line
    rw.write([ready_survey.title])
    
    ### 3- Write the content
    for question, responses in tally.iteritems():
        
        if question_reports and (question in question_reports):
            content = ["question: " + question, question_reports[question]]
        else:
            content = ["question: " + question]
        
        rw.write(content)
        for response, count in responses.iteritems():
            if response != '+total+':
                content = [response, count]
                rw.write(content, indent = 1)
        content = []
        content = ['Total', "", str(responses['+total+'])]
        rw.write(content, nl = 1)
        
    content = []
    content = [str(errors) + " errors found in parsing the data"]
    rw.write(content)
    rw.write([""])
    
def WriteAssessmentStudentScoresReportContent(ready_course, rw, full=False):
    
    ### 1- Get the exams, excluding surveys, and student score data
    exams, student_scores = get_student_scores(ready_course)
    
    ### 2- Construct scores dictionary
    scores_dict = construct_scores_dict(student_scores)
    
    ### 3- Construct column title array and max_scores array and print them.
    titles = ["", "Title"]
    max_scores = ["", "Max Score"]
    for exam in exams:
        titles += [exam['title']]
        max_scores += [exam['total_score']]
    rw.write(titles)
    rw.write(max_scores)
    rw.write([""])
    
    ### 4- Print the sorted scores_dict matching exam titles as we go.
    row = []
    for username, scores in sorted(scores_dict.iteritems()):
        row += [username]
        row += [scores['name']]
        for title in titles:
            if scores.get(title, False):
                row += [str(scores.get(title))]
            elif titles.index(title) not in [0, 1]:
                row += [""]
            
        rw.write(row)
        row = []  
        
    rw.write([""])
    
def construct_scores_dict(student_scores):
    # scores_dict is a dict of dicts. Each dict represents a row in the report for a
    # username. All this block does is convert rows from the returned queryset into
    # columns for the report.
    # Each dict contains <exam title>:<score> key:value pairs.
    scores_dict = {}
    last_username = ""
    for student_score in student_scores:
        username = student_score['student__username']
        if username != last_username:
            scores_dict[username] = {}
            scores_dict[username]['username'] = username
            scores_dict[username]['name'] = student_score['student__first_name'] + " " + student_score['student__last_name']
        
        scores_dict[username][student_score['exam__title']] = student_score['score']
        last_username = username
        
    return scores_dict


def WriteAssessmentSummaryReportContent(ready_exam, rw, full=False, csv=True):
    ### 1- Get the assessment data
    exam_summary = get_assessment_data(ready_exam)
    
    headings = []
    rows = []
    
    ### 2- Write the title line
    if csv:
        rw.write([exam_summary['title']])

    # Field summary table header
    content = ["Field"]
    if exam_summary['assessment_type'] == 'summative': content.extend(["Mean score", "Max score"])
    content.extend([
        "Total attempts",
        "Students who have attempted",
        "Correct attempts",
        "Correct 1st attempts",
        "Correct 2nd attempts",
        "Correct 3rd attempts",
    ])
    
    if csv:
        rw.write(content, indent = 1, nl=1)
    else:
        headings = content
        
    content = []
    # Fill in the values
    for key, value in exam_summary['total_attempts'].iteritems():
        field_name = exam_summary['human_field'].get(key)
        if not field_name:
            field_name = key

        content.extend([field_name])
        
        if exam_summary['assessment_type'] == 'summative':
            content.extend([
                round(exam_summary['mean_score'].get(key, 0), 2),
                exam_summary['max_score'].get(key, 0),
                ])
        
        content.extend([
            value,
            exam_summary['distinct_students'].get(key, 0),
            exam_summary['correct_attempts'].get(key,0),
            exam_summary['correct_first_attempts'].get(key, 0),
            exam_summary['correct_second_attempts'].get(key, 0),
            exam_summary['correct_third_attempts'].get(key, 0),
        ])
        
        if csv:
            rw.write(content, indent = 1)
        else:
            rows.append(content)
        content = []
        
    if csv:    
        rw.write(content, indent = 1)
        rw.write([""])
        
    else:
        return headings, rows    
########NEW FILE########
__FILENAME__ = get_quiz_data
import json
import re
from datetime import datetime
from operator import itemgetter

from c2g.models import *
from django.db.models import Count, Avg, Q

mean = lambda k: sum(k)/len(k)

def sanitize_string(s):
    return s.replace("\r", "").replace("\n", ";")

def get_quiz_data(ready_quiz, get_visits = False):
    # get_quiz_data: Returns a dict of dicts with quiz and quiz exercise information and per-student quiz data
    # The format of the output will be as follows. Every item in the outer dict has a key equal to a student username, and its value is an inner dict with the following kv_pairs:
    #   quiz:
    #       title (and type)
    #       assessment_type
    #       due date
    #       resubmission penalty (for summative psets only)
    #       submissions permitted (for summative psets only)
    #       grace period (for summative psets only)
    #       partial_credit_deadline (for summative psets only)
    #       late penalty (for summative psets only)
    #       scores
    #       scores_after_late_penalty
    #       total num students with at least one attempt
    #       total num students with attempts
    #
    #   exercises: A dict with one dict per exercise_id detailing the following:
    #       slug
    #       num_attempts (total)
    #       num_attempting_students
    #       num_correct_attempts
    #       num_correct_first_attempts
    #       num_correct_second_attempts
    #       num_correct_third_attempts
    #       median number of attempts
    #       median number of attempts upto and including first correct attempt
    #       median_attempt_time
    #       scores
    #       scores_with_late_penalty
    #       most_frequent_incorrect_answers (if at least one answer exceeds 5% of the total)
    #       
    #   per_student:
    #       username: Student username
    #       name: Student full name
    #       visits (if get_visits is true): will be a list of the dates/times at which the student visited the quiz
    #       exercise_activity: A dict where the keys are exercise IDs, and the values are dictionaries with the following k-v pairs:
    #           completed: 'y' if the student has completed the exercise, and 'n' otherwise
    #           attempts: a list of attempts _up_to_the_first_correct_attempt_.
    #           median_attempt_time
    #           last_attempt_timestamp
    #           score: The score of the student for the exercise
    #           score_after_late_penalty: for summative problem sets, this is the score adjusted by late penalties
    #       quiz_score: The total score of the student in the quiz
    #       quiz_score_after_late_penalty: Same as above, with late penalty applied (for summative psets)
    #       has_attempts: true if the student has at least one attempt for the quiz
    
    per_student_data = {}
    
    ### 1- Pre-populate per_student_data with a list of all students and empty fields
    students = ready_quiz.course.student_group.user_set.order_by('username').all().values_list('id', 'username', 'first_name', 'last_name')
    course_students = {}
    for s in students:
        s = (s[0], sanitize_string(s[1]), sanitize_string(s[2]), sanitize_string(s[3]))
        course_students[s[0]] = s[1]
        per_student_data[s[1]] = {
            'name': s[2] + " " + s[3],
            'visits':[],
            'exercise_activity': {},
            'quiz_score': 0,
            'quiz_score_after_late_penalty': 0,
            'has_attempts': False,
        }
    
    
    ### 2- Gather required information about the quiz object
    is_video = False
    is_summative = False
    is_formative = False
    is_survey = False
    
    if isinstance(ready_quiz, Video):
        is_video = True
        type="Video"
        assessment_type = "formative"
    else:
        if ready_quiz.assessment_type == 'assessive':
            is_summative = True
            type = "Summative Problem Set"
            assessment_type = "summative"
        elif ready_quiz.assessment_type == 'formative':
            is_formative = True
            type = "Formative Problem Set"
            assessment_type = "formative"
        else:
            is_survey = True
            type = "Survey"
            assessment_type = "survey"
    
    if is_summative:
        submissions_permitted = ready_quiz.submissions_permitted
        if submissions_permitted == 0: submissions_permitted = 100000
        resubmission_penalty = ready_quiz.resubmission_penalty/100.0
        grace_deadline = ready_quiz.grace_period
        if not grace_deadline: grace_deadline = ready_quiz.due_date
        partial_credit_deadline = ready_quiz.partial_credit_deadline
        late_penalty = ready_quiz.late_penalty / 100.0
    
    ### 3- Get visit data
    if get_visits:
        page_type = ('video' if is_video else 'problemset')
        visits = PageVisitLog.objects.filter(page_type = page_type, object_id = str(ready_quiz.id)).order_by('user', 'time_created')
        
        for visit in visits:
            username = visit.user.username
            if not username in per_student_data: continue # Visit is by a non course-student
            per_student_data[username]['visits'].append(format_datetime(visit.time_created))
    
    ### 4- Get all relationships to exercises
    if is_video:
        rlns = VideoToExercise.objects.filter(video=ready_quiz, is_deleted=0).order_by('video_time')
    else:
        rlns = ProblemSetToExercise.objects.filter(problemSet=ready_quiz, is_deleted=0).order_by('number')

    ### 5- Get student exercise activity for each student and each exercise
    exercises = []
    exs_median_attempt_times = {}
    exs_most_frequent_incorrect_answers = {}
    exs_nums_attempts = {}
    exs_nums_attempts_to_fca = {}
    exs_scores = {}
    exs_scores_after_late_penalty = {}
    
    for rln in rlns:
        ex = rln.exercise
        exercises.append(ex)
        
        if is_video:
            ex_atts = ProblemActivity.objects.select_related('video', 'exercise').filter(video_to_exercise__exercise__fileName=ex.fileName, video_to_exercise__video=ready_quiz).order_by('student', 'time_created').values_list('student_id', 'complete', 'time_taken', 'attempt_content', 'time_created')
        else:
            ex_atts = ProblemActivity.objects.select_related('problemSet', 'exercise').filter(problemset_to_exercise__exercise__fileName=ex.fileName, problemset_to_exercise__problemSet=ready_quiz).order_by('student', 'time_created').values_list('student_id', 'complete', 'time_taken', 'attempt_content', 'time_created')
        
        num_ex_atts = len(ex_atts)
        
        ex_submitters = [item[0] for item in ex_atts]
        ex_completes = [item[1] for item in ex_atts]
        ex_times_taken = [item[2] for item in ex_atts]
        ex_attempts_content = [item[3] for item in ex_atts]
        ex_times_created = [item[4] for item in ex_atts]
        
        for i in range(len(ex_attempts_content)):
            ex_attempts_content[i] = sanitize_string(ex_attempts_content[i])
        
        exs_nums_attempts[ex.id] = [] # We will not count any attempts after a student's first correct one
        exs_nums_attempts_to_fca[ex.id] = []
        exs_median_attempt_times[ex.id] = median(ex_times_taken)
        exs_most_frequent_incorrect_answers[ex.id] = get_most_freq_inc_attempts(ex_attempts_content, ex_completes)
        exs_scores[ex.id] = []
        exs_scores_after_late_penalty[ex.id] = []
        
        for i in range(num_ex_atts):
            if not (ex_submitters[i] in course_students): continue # Do not include attempts by non course-students in the report
            
            is_student_first_attempt = (i == 0) or (ex_submitters[i] != ex_submitters[i-1])
            if is_student_first_attempt:
                stud_username = course_students[ex_submitters[i]]
                
                stud_attempt_number = 0
                stud_is_completed = False
                stud_attempts = []
                stud_attempt_times = []
                stud_score = 0
                stud_score_after_late_penalty = 0
            
            if stud_is_completed:
                continue # Skip all attempts after a first correct attempt has been found for the student
            
            stud_attempt_number += 1
            stud_attempt_times.append(ex_times_taken[i])
            stud_attempts.append(ex_attempts_content[i])
            
            if ex_completes[i] == 1:
                stud_is_completed = True

                if is_summative:
                    (stud_score, stud_score_after_late_penalty) = compute_score_summative(stud_attempt_number, ex_times_created[i], resubmission_penalty, submissions_permitted, grace_deadline, partial_credit_deadline, late_penalty)
                if is_formative or is_video:
                    stud_score = 1.0
                    stud_score_after_late_penalty = 1.0

            is_student_last_attempt = (i == num_ex_atts-1) or (ex_submitters[i] != ex_submitters[i+1])
            if stud_is_completed or is_student_last_attempt:
                per_student_data[stud_username]['exercise_activity'][ex.id] = {
                    'completed': stud_is_completed,
                    'attempts': json.dumps(stud_attempts),
                    'median_attempt_time': median(stud_attempt_times),
                    'last_attempt_timestamp': ex_times_created[i],
                    'score': stud_score,
                    'score_after_late_penalty': stud_score_after_late_penalty,
                }
                
                per_student_data[stud_username]['quiz_score'] += stud_score
                per_student_data[stud_username]['quiz_score_after_late_penalty'] += stud_score_after_late_penalty
                per_student_data[stud_username]['has_attempts'] = True
                
                exs_nums_attempts[ex.id].append(stud_attempt_number)
                if stud_is_completed: exs_nums_attempts_to_fca[ex.id].append(stud_attempt_number)
                exs_scores[ex.id].append(stud_score)
                exs_scores_after_late_penalty[ex.id].append(stud_score_after_late_penalty)

            # End of loop on exercise attempts
    
        # End of loop on quiz exercises
        
    ### 6- Get quiz stats
    quiz_scores = [per_student_data[username]['quiz_score'] for username in per_student_data]
    quiz_scores_after_late_penalty = [per_student_data[username]['quiz_score_after_late_penalty'] for username in per_student_data]
    num_students_with_attempts = 0
    for username in per_student_data:
        if per_student_data[username]['has_attempts']:
            num_students_with_attempts += 1
    
    quiz_summary = {
        'title': "%s (%s)" % (ready_quiz.title, type),
        'assessment_type': assessment_type,
        'scores': quiz_scores,
        'scores_after_late_penalty': quiz_scores_after_late_penalty,
        'total_num_students_with_attempts': num_students_with_attempts,
    }
    if is_summative:
        quiz_summary['due_date'] = format_datetime(ready_quiz.due_date)
        quiz_summary['resubmission_penalty'] = ready_quiz.resubmission_penalty
        quiz_summary['submissions_permitted'] = ready_quiz.submissions_permitted
        quiz_summary['grace_period'] = format_datetime(ready_quiz.grace_period)
        quiz_summary['partial_credit_deadline'] = format_datetime(ready_quiz.partial_credit_deadline)
        quiz_summary['late_penalty'] = ready_quiz.late_penalty
    
    ### 7- Get exercise stats
    exercise_summaries = []
    for ex in exercises:
        exercise_summaries.append({
            'id': ex.id,
            'slug': ex.get_slug(),
            'num_attempts': sum(exs_nums_attempts[ex.id]),
            'num_attempting_students': len(exs_nums_attempts[ex.id]),
            'median_num_attempts': median(exs_nums_attempts[ex.id]),
            'num_correct_attempts': len(exs_nums_attempts_to_fca[ex.id]),
            'median_num_attempts_to_fca': median(exs_nums_attempts_to_fca[ex.id]),
            'num_correct_first_attempts': exs_nums_attempts_to_fca[ex.id].count(1),
            'num_correct_second_attempts': exs_nums_attempts_to_fca[ex.id].count(2),
            'num_correct_third_attempts': exs_nums_attempts_to_fca[ex.id].count(3),
            'median_attempt_time': exs_median_attempt_times[ex.id],
            'scores': exs_scores[ex.id],
            'scores_after_late_penalty': exs_scores_after_late_penalty[ex.id],
            'most_frequent_incorrect_answers': exs_most_frequent_incorrect_answers[ex.id],
        })
        
    return {'quiz_summary': quiz_summary, 'exercise_summaries': exercise_summaries, 'per_student_data': per_student_data}
    

def get_assessment_data(ready_exam, get_visits = False):
    # get_assessment_data: Returns a dict of dicts with assessment data
    # The format of the output will be as follows. 
    # exam_summary contains for each field:
    #     total_attempts{human_name, # total attempts}
    #     distinct_students{human_name, # distinct students}
    #     mean_score{human_name, mean score}
    #     max_score{human_name, max score}
    #     correct_attempts{human_name, # correct attempts}
    #     correct_first_attempts{human_name, # correct first attempts}
    #     correct_second_attempts{human_name, # correct second attempts}
    #     correct_third_attempts{human_name, # correct third attempts}
    
    total_attempts = {}
    human_field = {}
    distinct_students = {}
    mean_score = {}
    max_score = {}
    correct_attempts = {}
    correct_first_attempts = {}
    correct_second_attempts = {}
    correct_third_attempts = {}
    
    #Get total_attempts and unique students
    field_attempts = ExamRecordScoreField.objects.values('human_name', 'field_name').select_related('parent').filter(parent__record__exam_id=ready_exam.id).annotate(total_attempts=Count('parent__record__attempt_number'), unique_students=Count('parent__record__student', distinct=True), mean_score=Avg('subscore'), max_score=Max('subscore'))
    for field_attempt in field_attempts:
        total_attempts[field_attempt['field_name']] = field_attempt['total_attempts']
        human_field[field_attempt['field_name']] = field_attempt['human_name']
        distinct_students[field_attempt['field_name']] = field_attempt['unique_students']
        mean_score[field_attempt['field_name']] = field_attempt['mean_score']
        max_score[field_attempt['field_name']] = field_attempt['max_score']
    
    #Get correct attempts
    field_correct_attempts = ExamRecordScoreField.objects.values('human_name', 'field_name').select_related('parent').filter(parent__record__exam_id=ready_exam.id, correct=1).annotate(correct_attempts=Count('correct'))
    for field_correct_attempt in field_correct_attempts:
        correct_attempts[field_correct_attempt['field_name']] = field_correct_attempt['correct_attempts']
    
    #Get correct first attempts
    field_correct_first_attempts = ExamRecordScoreField.objects.values('human_name', 'field_name').select_related('parent').filter(parent__record__exam_id=ready_exam.id, correct=1, parent__record__attempt_number=1).annotate(correct_first_attempts=Count('correct'))
    for field_correct_first_attempt in field_correct_first_attempts:
        correct_first_attempts[field_correct_first_attempt['field_name']] = field_correct_first_attempt['correct_first_attempts']
    
    #Get correct second attempts
    field_correct_second_attempts = ExamRecordScoreField.objects.values('human_name', 'field_name').select_related('parent').filter(parent__record__exam_id=ready_exam.id, correct=1, parent__record__attempt_number=2).annotate(correct_second_attempts=Count('correct'))
    for field_correct_second_attempt in field_correct_second_attempts:
        correct_second_attempts[field_correct_second_attempt['field_name']] = field_correct_second_attempt['correct_second_attempts']
    
    #Get correct third attempts
    field_correct_third_attempts = ExamRecordScoreField.objects.values('human_name', 'field_name').select_related('parent').filter(parent__record__exam_id=ready_exam.id, correct=1, parent__record__attempt_number=3).annotate(correct_third_attempts=Count('correct'))
    for field_correct_third_attempt in field_correct_third_attempts:
        correct_third_attempts[field_correct_third_attempt['field_name']] = field_correct_third_attempt['correct_third_attempts']
    
    exam_summary = {}
    exam_summary['title'] = ready_exam.title
    exam_summary['assessment_type'] = ready_exam.assessment_type
    exam_summary['total_attempts'] = total_attempts
    exam_summary['human_field'] = human_field
    exam_summary['distinct_students'] = distinct_students
    exam_summary['mean_score'] = mean_score
    exam_summary['max_score'] = max_score
    exam_summary['correct_attempts'] = correct_attempts
    exam_summary['correct_first_attempts'] = correct_first_attempts
    exam_summary['correct_second_attempts'] = correct_second_attempts
    exam_summary['correct_third_attempts'] = correct_third_attempts
    
    return exam_summary

def get_full_assessment_data(ready_exam, get_visits = False):

    #Get total score for each student that has attempted the exam
    student_scores = ExamScore.objects.values('student__username', 'student__first_name', 'student__last_name', 'score').select_related('student').filter(exam_id=ready_exam.id).order_by('student__username')

    #Get data for each field attempted
    student_field_scores = ExamRecordScoreField.objects.values('human_name', 'field_name', 'parent__record__student__username', 'parent__record__student__first_name', 'parent__record__student__last_name').select_related('parent').filter(parent__record__exam_id=ready_exam.id).annotate(correct=Max('correct'), sub_score=Max('subscore'), total_attempts=Count('parent__record__attempt_number')).order_by('parent__record__student__username')
    
    return student_scores, student_field_scores
    
def get_survey_data(ready_survey, get_visits = False):
    
    errors = 0
    
    #List of responses, with count, for each question
    tally = {}
    
    #Report friendly questions
    question_reports = {}
    
    #Get all the submissions for this survey
    exam_records = ExamRecord.objects.filter(exam=ready_survey)
    
    for exam_record in exam_records:
        json_row = exam_record.json_data
        
        try:
            data = json.loads(json_row)
            
        except ValueError:
            errors +=1
            
        else:
            for question in data.keys():
                answer = None
                question_report = None
                
                if type(data[question]) is dict and data[question].get('value', False):
                    #Single answer
                    
                    answer = data[question].get('value')
                    
                    if data[question].get('report', False):
                        question_report =  data[question].get('report')   
                    elif data[question].get('questionreport', False):
                        question_report =  str(question) + " : " + data[question].get('questionreport')
                    else:    
                        question_report = question
                        
                    question_reports[question] = question_report
                    tally = store_answer(tally, question, answer)
            
                else:
                    #Multiple answers
                    
                    list_of_dicts = data[question]    
                    for multi_answer_dict in list_of_dicts:                      
                        
                        if type(multi_answer_dict) is dict and multi_answer_dict.get('value', False):
                            
                            if multi_answer_dict.get('report', False):
                                answer = multi_answer_dict.get('report')
                            else:
                                answer = multi_answer_dict.get('value')
                                
                        if multi_answer_dict.get('questionreport', False):
                            question_report = multi_answer_dict.get('questionreport')
                        else:
                            question_report = question
                        
                        question_reports[question] = question_report
                        tally = store_answer(tally, question, answer)
    
    return tally, errors, question_reports
    

def get_student_scores(ready_course, username=None):
    
    now = datetime.now()
    exams = Exam.objects.values('title', 'total_score').filter(~Q(exam_type='survey'), course=ready_course, is_deleted=0, section__is_deleted=0, live_datetime__lt=now).order_by('title')
    if username:
        username_list = re.sub(r'\s+', '', username).split(',')
        student_scores = ExamScore.objects.values('student__username', 'student__first_name', 'student__last_name', 'exam__title', 'score').select_related('student', 'exam').filter(~Q(exam__exam_type='survey'), course=ready_course, exam__is_deleted=0, exam__section__is_deleted=0, exam__live_datetime__lt=now, student__username__in=username_list).order_by('student__username')
    else:
        student_scores = ExamScore.objects.values('student__username', 'student__first_name', 'student__last_name', 'exam__title', 'score').select_related('student', 'exam').filter(~Q(exam__exam_type='survey'), course=ready_course, exam__is_deleted=0, exam__section__is_deleted=0, exam__live_datetime__lt=now).order_by('student__username')
    
    return exams, student_scores
        
    
def store_answer(tally, question, answer):

    if question in tally:
        tally[question]['+total+'] += 1
    else:
        tally[question] = {}
        tally[question]['+total+'] = 1

    if answer and answer not in tally[question]:
        tally[question][answer] = {}
        tally[question][answer] = 1                    
    elif answer:
        tally[question][answer] += 1
        
    return tally


def compute_score_summative(first_correct_attempt_number, first_correct_attempt_time_created, resubmission_penalty, submissions_permitted, grace_deadline, partial_credit_deadline, late_penalty):
    if (first_correct_attempt_number > submissions_permitted):
        return (0.0, 0.0)
        
    score = 1.0 - (first_correct_attempt_number - 1) * resubmission_penalty
    if score < 0:
        score = 0.0
    
    score_after_late_penalty = score
    # Apply late penalty if necessary
    if first_correct_attempt_time_created > partial_credit_deadline:
        if partial_credit_deadline: score_after_late_penalty = 0
    elif first_correct_attempt_time_created > grace_deadline:
        if grace_deadline: score_after_late_penalty = score * (1-late_penalty)
    
    return (score, score_after_late_penalty)
    
def median(l):
    if len(l) == 0: return None
    
    l = sorted(l)
    if (len(l)%2) == 0: return (l[len(l)/2] + l[(len(l)-1)/2]) / 2.0
    else:
        return l[(len(l)-1)/2]
        
def format_datetime(dt):
    if dt:
        return "%s-%s-%s at %s:%s" % (dt.year, dt.month, dt.day, dt.hour, dt.minute)
    else:
        return ""
        
def get_most_freq_inc_attempts(attempts, completes):
    incorrect_attempts_freqs = {}
    num_incorrect_attempts = 0
    for i in range(len(attempts)):
        if completes[i] == 0:
            if not attempts[i] in incorrect_attempts_freqs:
                incorrect_attempts_freqs[attempts[i]] = 0
            incorrect_attempts_freqs[attempts[i]] += 1
            num_incorrect_attempts += 1
            
    if num_incorrect_attempts > 20: # Results may not make sense for very few incorrect attempts
        sorted_tuples = sorted(incorrect_attempts_freqs.iteritems(), key = itemgetter(1), reverse = True)
        num_tuples = len(sorted_tuples)
        output_tuples = []
        for i in range(num_tuples):
            sorted_tuples[i] = (sorted_tuples[i][0], 100.0 * sorted_tuples[i][1] / num_incorrect_attempts)
            if sorted_tuples[i][1] > 5 and i <=3:
                output_tuples.append(sorted_tuples[i])
    
        return output_tuples
    else:
        return []

########NEW FILE########
__FILENAME__ = tasks
import logging
from celery import task
from courses.reports.generation.gen_course_dashboard_report import *
from courses.reports.generation.gen_quiz_summary_report import *
from courses.reports.generation.gen_quiz_full_report import *
from courses.reports.generation.gen_class_roster import *

from django.core.mail import EmailMessage
from django.conf import settings

logger = logging.getLogger(__name__)

@task
@use_readonly_database
def generate_and_email_reports(username, course_handle, requested_reports, email_title, email_message, attach_reports_to_email = True):
    # Generates the list of reports in requested_reports, and sends it to the staff of the given course.
    ready_course = Course.objects.get(handle=course_handle, mode='ready')
    
    # Generate requested reports
    reports = []
    for rr in requested_reports:
        if rr['type'] == 'dashboard':
            logger.info("User %s requested to generate dashboard report for course %s." % (username, course_handle))
            report = gen_course_dashboard_report(ready_course, save_to_s3=True)
            report['type'] = rr['type']
            if report:
                reports.append(report)
                logger.info("Dashboard report for course %s generated successfully for user %s." % (course_handle, username))
            else:
                logger.info("Failed to generate dashboard report for course %s for user %s." % (course_handle, username))
            
        elif rr['type'] == 'video_full':
            if (not 'slug' in rr) or (not rr['slug']):
                logger.info("Missing slug -- Failed to generate video full report")
            else:
                slug = rr['slug']
                logger.info("User %s requested to generate video full report for course %s video slug %s." % (username, course_handle, slug))
                # If instructors ask for a report for a quiz that doesn't have a live instance, pass the draft instance instead. The report generators will handle this special case
                try:
                    quiz = Video.objects.get(course=ready_course, slug=slug)
                except Video.DoesNotExist:
                    quiz = Video.objects.get(course=ready_course.image, slug=slug)
                    
                report = gen_quiz_full_report(ready_course, quiz, save_to_s3=True)
                report['type'] = rr['type']
                if report:
                    reports.append(report)
                    logger.info("Video full report for course %s video %s generated successfully for user %s." % (course_handle, slug, username))
                else:
                    logger.info("Failed to generate video full report for course %s video %s for user %s." % (course_handle, slug, username))
                    
        elif rr['type'] == 'video_summary':
            if (not 'slug' in rr) or (not rr['slug']):
                logger.info("Missing slug -- Failed to generate video report")
            else:
                slug = rr['slug']
                logger.info("User %s requested to generate video summary report for course %s video slug %s." % (username, course_handle, slug))
                # If instructors ask for a report for a quiz that doesn't have a live instance, pass the draft instance instead. The report generators will handle this special case
                try:
                    quiz = Video.objects.get(course=ready_course, slug=slug)
                except Video.DoesNotExist:
                    quiz = Video.objects.get(course=ready_course.image, slug=slug)
                    
                report = gen_quiz_summary_report(ready_course, quiz, save_to_s3=True)
                report['type'] = rr['type']
                if report:
                    reports.append(report)
                    logger.info("Video summary report for course %s video %s generated successfully for user %s." % (course_handle, slug, username))
                else:
                    logger.info("Failed to generate video summary report for course %s video %s for user %s." % (course_handle, slug, username))
                    
        elif rr['type'] == 'class_roster':
            logger.info("User %s requested to generate class roster for course %s." % (username, course_handle))
            report = gen_class_roster(ready_course, save_to_s3=True)
            report['type'] = rr['type']
            if report:
                reports.append(report)
                logger.info("Class roster for course %s generated successfully for user %s." % (course_handle, username))
            else:
                logger.info("Failed to generate class roster for course %s for user %s." % (course_handle, username))
                    
        elif rr['type'] == 'course_assessments':
            logger.info("User %s requested to generate course assessments report for course %s." % (username, course_handle))
            report = gen_course_assessments_report(ready_course, save_to_s3=True)
            report['type'] = rr['type']
            if report:
                reports.append(report)
                logger.info("Course assessments report for course %s generated successfully for user %s." % (course_handle, username))
            else:
                logger.info("Failed to generate course assessments report for course %s for user %s." % (course_handle, username))
                
        elif rr['type'] == 'assessment_full':
            if (not 'slug' in rr) or (not rr['slug']):
                logger.info("Missing slug -- Failed to generate assessment full report")
            else:
                slug = rr['slug']
                logger.info("User %s requested to generate assessment full report for course %s assessment slug %s." % (username, course_handle, slug))
                
                # If instructors ask for a report for an exam that doesn't have a live instance, pass the draft instance instead. The report generators will handle this special case
                try:
                    exam = Exam.objects.get(course=ready_course, slug=slug)
                except Exam.DoesNotExist:
                    exam = Exam.objects.get(course=ready_course.image, slug=slug)
                    
                report = gen_assessment_full_report(ready_course, exam, save_to_s3=True)
                report['type'] = rr['type']
                if report:
                    reports.append(report)
                    logger.info("Assessment full report for course %s assessment %s generated successfully for user %s." % (course_handle, slug, username))
                else:
                    logger.info("Failed to generate assessment full report for course %s assessment %s for user %s." % (course_handle, slug, username))
                    
        elif rr['type'] == 'assessment_summary':
            if (not 'slug' in rr) or (not rr['slug']):
                logger.info("Missing slug -- Failed to generate assessment summary report")
            else:
                slug = rr['slug']
                logger.info("User %s requested to generate assessment summary report for course %s assessment slug %s." % (username, course_handle, slug))
                
                # If instructors ask for a report for a quiz that doesn't have a live instance, pass the draft instance instead. The report generators will handle this special case
                try:
                    exam = Exam.objects.get(course=ready_course, slug=slug)
                except Exam.DoesNotExist:
                    exam = Exam.objects.get(course=ready_course.image, slug=slug)
                    
                report = gen_assessment_summary_report(ready_course, exam, save_to_s3=True)
                report['type'] = rr['type']
                if report:
                    reports.append(report)
                    logger.info("Assessment summary report for course %s assessment %s generated successfully for user %s." % (course_handle, slug, username))
                else:
                    logger.info("Failed to generate assessment summary report for course %s assessment %s for user %s." % (course_handle, slug, username))
                            

        elif rr['type'] == 'survey_summary':
            if (not 'slug' in rr) or (not rr['slug']):
                logger.info("Missing slug -- Failed to generate survey summary report")
            else:
                slug = rr['slug']
                logger.info("User %s requested to generate survey summary report for course %s survey slug %s." % (username, course_handle, slug))
                
                # If instructors ask for a report for a survey that doesn't have a live instance, pass the draft instance instead. The report generators will handle this special case
                try:
                    survey = Exam.objects.get(course=ready_course, slug=slug)
                except Exam.DoesNotExist:
                    survey = Exam.objects.get(course=ready_course.image, slug=slug)
                    
                report = gen_survey_summary_report(ready_course, survey, save_to_s3=True)
                report['type'] = rr['type']
                
                reports.append(report)
                logger.info("Survey summary report for course %s assessment %s generated successfully for user %s." % (course_handle, slug, username))
            
            
        elif rr['type'] == 'assessment_student_scores':
            logger.info("User %s requested to generate assessment student scores report for course %s." % (username, course_handle))
            report = gen_assessment_student_scores_report(ready_course, save_to_s3=True)
            report['type'] = rr['type']
            
            reports.append(report)
            logger.info("Assessment student scores report for course %s generated successfully for user %s." % (course_handle, username))            
            
    send_emails = getattr(settings, 'EMAIL_NIGHTLY_REPORTS', False)
    if send_emails:
        # Email Generated Reports
        staff_email = ready_course.contact
        if not staff_email:
            logger.info("Failed to email reports for course %s -- Missing course contact email" % (course_handle))
        else:
            if len(reports) == 0:
                logger.info("Not sending reports email to %s, because no reports were generated." % staff_email)
                return
                
            email = EmailMessage(
                email_title,             # Title
                email_message,           # Message
                settings.SERVER_EMAIL,   # From
                [staff_email, ],         # To
            )
            if attach_reports_to_email:
                for report in reports:
                    if report['type'] in ['problemset_summary', 'video_summary']:
                        report_name = report['name'][:-4] + '_summary.csv'
                    else:
                        report_name = report['name']
                        
                    email.attach(report_name, report['content'], 'text/csv')
                
            email.send()
        

########NEW FILE########
__FILENAME__ = views
import re
import mimetypes
from c2g.models import *
from django.http import HttpResponse, Http404
from django.shortcuts import render_to_response, redirect
from django.template import Context, loader
from django.template import RequestContext
from courses.actions import auth_is_course_admin_view_wrapper
from courses.reports.tasks import generate_and_email_reports
from storages.backends.s3boto import S3BotoStorage
from settings import AWS_ACCESS_KEY_ID, AWS_SECRET_ACCESS_KEY, AWS_SECURE_STORAGE_BUCKET_NAME
from courses.reports.generation.gen_in_line_reports import *
from courses.reports.generation.gen_quiz_summary_report import WriteAssessmentSummaryReportContent

secure_file_storage = S3BotoStorage(bucket=AWS_SECURE_STORAGE_BUCKET_NAME, access_key=AWS_ACCESS_KEY_ID, secret_key=AWS_SECRET_ACCESS_KEY)
re_prog = re.compile(r'([\d]{4})_([\d]{2})_([\d]{2})__([\d]{2})_([\d]{2})_([\d]{2})')
    
@auth_is_course_admin_view_wrapper
def main(request, course_prefix, course_suffix):
    
    course = request.common_page_data['ready_course']
    course_prefix = course.handle.split('--')[0]
    course_suffix = course.handle.split('--')[1]
    
    
    # 1- List all problem sets and videos, since instructors may let something fo non-live then try to get its report. If instructors try to generate a report for something that doesn't have a live instance, we will write that in the report
    videos = Video.objects.getByCourse(course=course.image).order_by('-live_datetime', 'title')
    exams = Exam.objects.getByCourse(course=course.image).order_by('-live_datetime', 'title')
    surveys = exams.filter(exam_type='survey')
    
    # 2- Read a list of all reports for that course that are on the server
    dashboard_reports = list_reports_in_dir("%s/%s/reports/dashboard/" % (course_prefix, course_suffix))
    video_full_reports = list_reports_in_dir("%s/%s/reports/videos/" % (course_prefix, course_suffix))
    video_summ_reports = list_reports_in_dir("%s/%s/reports/videos_summary/" % (course_prefix, course_suffix))
    class_rosters = list_reports_in_dir("%s/%s/reports/class_roster/" % (course_prefix, course_suffix))
    
    #For new assessment reports
    course_assessment_reports = list_reports_in_dir("%s/%s/reports/course_assessments/" % (course_prefix, course_suffix))
    assessment_full_reports = list_reports_in_dir("%s/%s/reports/problemsets/" % (course_prefix, course_suffix))
    assessment_summ_reports = list_reports_in_dir("%s/%s/reports/problemsets_summary/" % (course_prefix, course_suffix))
    survey_summ_reports = list_reports_in_dir("%s/%s/reports/survey_summary/" % (course_prefix, course_suffix))
    assessment_student_scores_reports = list_reports_in_dir("%s/%s/reports/assessment_student_scores/" % (course_prefix, course_suffix))
    
    
    # 3- Divide ps and video reports into lists of dicts ready for grouped display by object
    vd_quiz_full_reports_list_of_dicts = ClassifyReportsBySlug(videos, video_full_reports)
    vd_quiz_summ_reports_list_of_dicts = ClassifyReportsBySlug(videos, video_summ_reports)
    
    assessment_full_reports_list_of_dicts = ClassifyReportsBySlug(exams, assessment_full_reports)
    assessment_summ_reports_list_of_dicts = ClassifyReportsBySlug(exams, assessment_summ_reports)
    survey_summ_reports_list_of_dicts = ClassifyReportsBySlug(surveys, survey_summ_reports)
    
    
    # 4- Render to response
    return render_to_response('reports/main.html', {
        'common_page_data':request.common_page_data,
        'dashboard_reports': dashboard_reports,
        'class_rosters': class_rosters,
        'vd_quiz_full_reports': vd_quiz_full_reports_list_of_dicts,
        'vd_quiz_summ_reports': vd_quiz_summ_reports_list_of_dicts,
        'videos': videos.order_by('title'),
        'course_assessment_reports': course_assessment_reports,
        'exams': exams.order_by('title'),
        'assessment_full_reports': assessment_full_reports_list_of_dicts,
        'assessment_summ_reports': assessment_summ_reports_list_of_dicts,
        'survey_summ_reports': survey_summ_reports_list_of_dicts,
        'surveys': surveys.order_by('title'),
        'assessment_student_scores_reports': assessment_student_scores_reports,
    }, context_instance=RequestContext(request))
    
    
def ClassifyReportsBySlug(objs, reports):
    reports_dict = {}
    for obj in objs: reports_dict[obj.slug] = {'title': obj.title, 'reports': []}
    
    for report in reports:
        slug = get_slug_from_report_name(report['s3_name'])
        if slug in reports_dict:
            reports_dict[slug]['reports'].append(report)
        
    reports_list_of_dicts = []
    for obj in objs:
        reports_list_of_dicts.append(reports_dict[obj.slug])
        
    return reports_list_of_dicts
        

#@auth_is_course_admin_view_wrapper
def generate_report(request):
    report_type = request.POST["type"]
    course_handle = request.POST["course_handle"]
    course_handle_pretty = course_handle.replace('--','-')
    url_suffix = ''
    
    email_message = "The report is attached. You can also download it by going to the reports page under Course Administration->Reports, or by visiting https://class.stanford.edu/%s/browse_reports." % course_handle.replace('--', '/')
    attach_reports_to_email = True
    
    if report_type == 'dashboard':
        email_title = "[Class2Go] Dashboard Report for %s" % course_handle_pretty
        req_reports = [{'type': 'dashboard'}]
        url_suffix = '#' + 'dashboard'
        
    elif report_type == 'video_full':
        slug = request.POST["slug"]
        email_title = "[Class2Go] Video Full Report for %s %s" % (course_handle_pretty, slug)
        # TODO: Remove the following message and attachment flag override after report email attachment is fixed
        attach_reports_to_email = False
        email_message = "The report has been generated. You can download it by going to the reports page under Course Administration->Reports, or by visiting https://class.stanford.edu/%s/browse_reports." % course_handle.replace('--', '/')
        req_reports = [{'type': 'video_full', 'slug': slug}]
        url_suffix = '#' + 'videos_full'
        
    elif report_type == 'video_summary':
        slug = request.POST["slug"]
        email_title = "[Class2Go] Video Summary Report for %s %s" % (course_handle_pretty, slug)
        req_reports = [{'type': 'video_summary', 'slug': slug}]
        url_suffix = '#' + 'videos_summary'
        
    elif report_type == 'class_roster':
        email_title = "[Class2Go] Class Roster for %s" % (course_handle_pretty)
        req_reports = [{'type': 'class_roster'}]
        url_suffix = '#' + 'class_roster'
    
    #Reports for the new assessments
    elif report_type == 'course_assessments':
        email_title = "[Class2Go] Course Assessments Report for %s" % course_handle_pretty
        req_reports = [{'type': 'course_assessments'}]
        url_suffix = '#' + 'aggregated_attempts_by_a'
    
    elif report_type == 'assessment_full':
        slug = request.POST["slug"]
        email_title = "[Class2Go] Assessment Full Report for %s %s" % (course_handle_pretty, slug)
        # TODO: Remove the following message  and attachment flag override after report email attachment is fixed
        attach_reports_to_email = False
        email_message = "The report has been generated. You can download it by going to the reports page under Course Administration->Reports, or by visiting https://class.stanford.edu/%s/browse_reports." % course_handle.replace('--', '/')
        req_reports = [{'type': 'assessment_full', 'slug': slug}]
        url_suffix = '#' + 'individual_student_scores_q'
    
    elif report_type == 'assessment_summary':
        slug = request.POST["slug"]
        email_title = "[Class2Go] Assessment Summary Report for %s %s" % (course_handle_pretty, slug)
        req_reports = [{'type': 'assessment_summary', 'slug': slug}]
        url_suffix = '#' + 'aggregated_attempts_by_q'
        
    elif report_type == 'survey_summary':
        slug = request.POST["slug"]
        email_title = "[Class2Go] Survey Summary Report for %s %s" % (course_handle_pretty, slug)
        req_reports = [{'type': 'survey_summary', 'slug': slug}]
        url_suffix = '#' + 'survey_summary'
    
    elif report_type == 'assessment_student_scores':
        email_title = "[Class2Go] Assessment Student Scores Report for %s" % (course_handle_pretty)
        req_reports = [{'type': 'assessment_student_scores'}]
        url_suffix = '#' + 'individual_student_scores_a'
    
    generate_and_email_reports.delay(request.user.username, course_handle, req_reports, email_title, email_message, attach_reports_to_email)
    
    return redirect(request.META.get('HTTP_REFERER', None) + url_suffix)


@auth_is_course_admin_view_wrapper  
def download_report(request, course_prefix, course_suffix, report_subfolder, report_name):
    #secure_file_storage = S3BotoStorage(bucket=AWS_SECURE_STORAGE_BUCKET_NAME, access_key=AWS_ACCESS_KEY_ID, secret_key=AWS_SECRET_ACCESS_KEY)
    report_path = "%s/%s/reports/%s/%s" % (course_prefix, course_suffix, report_subfolder, report_name)
    
    try:
        report_file= secure_file_storage.open(report_path, 'rb')
    except:
        return Http404
    
    report_content = report_file.read()
    
    if report_subfolder in ['problemsets_summary', 'videos_summary']:
        report_name = report_name[:-4] + '_summary.csv'
    
    response = HttpResponse(report_content, content_type='text/csv')
    response['Content-Disposition'] = 'attachment; filename=' + report_name
    response['Content-Length'] = str(len(report_content))
    
    return response


def list_reports_in_dir(dirname):
    report_s3list = secure_file_storage.listdir(dirname)
    report_s3list = sorted(report_s3list[1], reverse=True)
    
    reports = []
    for rep_item in report_s3list:
        if len(rep_item) > 0 and isinstance(rep_item, unicode):
            res = re_prog.match(rep_item)
            if res:
                dt_parts = res.groups(0)
                reports.append({'name': "%s-%s-%s at %s:%s" % (dt_parts[1], dt_parts[2], dt_parts[0], dt_parts[3], dt_parts[4]), 's3_name': rep_item})
    
    return reports

def get_report_date(rep_name):
    return {'year': rep_name[0:4], 'month': rep_name[6:8], 'day': rep_name[9:11], 'hour': rep_name[13:15], 'minute': rep_name[16:18], 'second': rep_name[19:21]}

    
def get_slug_from_report_name(rep_name):
    return rep_name[21:-4]


@auth_is_course_admin_view_wrapper    
def generate_in_line_report(request, course_prefix, course_suffix):
    
    if request.POST.get("report_name", False): 
        report_name = request.POST["report_name"]
    else:
        report_name = ''
    
    if request.POST.get("filter", False) and request.POST["filter"] != 'None':
        username = request.POST["filter"]
    else:
        username = None
        
    if request.POST.get("green_param", False):
        green_param = request.POST["green_param"]
    else:
        green_param = 67
        
    if request.POST.get("blue_param", False):
        blue_param = request.POST["blue_param"]
    else:
        blue_param = 34
        
    course = request.common_page_data['ready_course']
    
    report_label = None
    explanation = ""
    report_data = {}
    headings = {}
    max_scores = {}
    column1 = {}
    column2 = {}
    column3 = {}
    column4 = {}
    column5 = {}
    column6 = {}
    row_color = {}
    rows = {}
    
    we_have_data = False
    report_data = gen_spec_in_line_report(report_name, course, username, green_param, blue_param)
    if report_name == 'quizzes_summary':
        if report_data:
            report_label = "Quizzes Summary"
            explanation = "Number of students whose best score, compared against maximum possible score, falls into each given category"
            headings = report_data['headings']
            column1 = report_data['exam_titles']
            column2 = report_data['count_lt_34']
            column3 = report_data['count_gt_34']
            column4 = report_data['count_gt_67']
            column5 = report_data['total_students']
            row_color = report_data['row_color']
            we_have_data = True

    elif report_name == 'student_scores':
        if report_data:
            report_label = "Student Scores"
            explanation = "Student's best score for each assessment"
            headings = report_data['headings']
            max_scores = report_data['max_scores']
            rows = report_data['rows']
            we_have_data = True
    
    return render_to_response('reports/in_line.html', {
        'common_page_data':request.common_page_data,
        'we_have_data':we_have_data,
        'report_label':report_label,
        'explanation':explanation,
        'report_name':report_name,
        'headings':headings,
        'column1':column1,
        'column2':column2,
        'column3':column3,
        'column4':column4,
        'column5':column5,
        'column6':column6,
        'row_color':row_color,
        'green_param':green_param,
        'blue_param':blue_param,
        'username':username,
        'max_scores':max_scores,
        'rows':rows
        
    }, context_instance=RequestContext(request))
    
    
@auth_is_course_admin_view_wrapper    
def summary_report(request, course_prefix, course_suffix, exam_slug):
        
    course = request.common_page_data['ready_course']
    exam = Exam.objects.get(course=course, slug=exam_slug)
 
    we_have_data = False
    headings, rows = WriteAssessmentSummaryReportContent(exam, None, False, False)
    if rows:
        we_have_data = True
    
    return render_to_response('reports/drill_downs/assessment_summary.html', {
        'we_have_data':we_have_data,
        'common_page_data':request.common_page_data,
        'headings':headings,
        'rows':rows,
        'exam':exam
        
    }, context_instance=RequestContext(request))
    
    

########NEW FILE########
__FILENAME__ = test_course_materials
import datetime

from django.core.urlresolvers import reverse

from c2g.models import File as FileModel
from c2g.models import Course as CourseModel
from test_harness.test_base import AuthenticatedTestBase
from django.core.files.base import ContentFile
from django.db.models.fields.files import FieldFile, FileField

class CourseMaterialsPageAndContentsTest(AuthenticatedTestBase):
    course_name="Natural Language Processing"

    def __init__(self, *arrgs, **kwargs):
        config = { 'username' : 'professor_0',
                   'password' : 'class2go',
                   'course_prefix' :'networking',
                   'course_suffix' :'Fall2012',
                   'mode' : 'draft' }
        if kwargs != None:
            kwargs.update(config)
        else:
            kwargs = config
        super(CourseMaterialsPageAndContentsTest, self).__init__(*arrgs, **kwargs)

    def setUp(self):
        super(CourseMaterialsPageAndContentsTest, self).setUp()
        self.course = CourseModel.objects.get(id=1)
        self.section = self.course.contentsection_set.all()[0]
        self.poorfile = FileModel(course=self.course, 
                                  section=self.section, 
                                  handle=self.course.handle, 
                                  live_datetime = datetime.datetime(9999, 12, 12, 1, 1, 1), 
                                  title="XXXDELETEMETESTXXX")
        self.poorfile.save()
        self.poorfile.create_ready_instance()
        self.poorfile.image.save()
	
        self.poorfile.file.save("NAMEME", ContentFile("hello world"), save=False)
        self.poorfile.save()
        self.poorfile.image.file.save("NAMEME", ContentFile("hello world"), save=False)
        self.poorfile.image.save()


    def tearDown(self):
        FileModel.objects.filter(title="XXXDELETEMETESTXXX").delete()
        super(CourseMaterialsPageAndContentsTest, self).tearDown()

    def test_course_materials_draft_with_futurefile(self):
        """
        Tests the display of course materials in draft mode with one nonlive file
        """
        response = self.client.get(reverse('course_materials',
                                           kwargs={'course_prefix' : self.coursePrefix,
                                                   'course_suffix' : self.courseSuffix }),
                                   follow=True,                      # Course Materials page always does redirect temporary
                                   HTTP_USER_AGENT=self.userAgent)   # exception handler throws exception if agent not set

        self.assertEqual(response.status_code, 200)

        course_title_search_string = self.course_name + "</title>"
        self.assertRegexpMatches(response.content, 
                course_title_search_string,
                msg="Couldn't find course name in '%s'" % reverse('course_materials',
                                           kwargs={'course_prefix' : self.coursePrefix,
                                                   'course_suffix' : self.courseSuffix }))

        not_live_search_string = "<span style='color:#A07000;'>Live 9999-12-12 at 01:01</span>"
        self.assertRegexpMatches(response.content, 
                                 not_live_search_string,
                                 msg="Couldn't find future date in '%s'" % reverse('course_materials',
                                                                           kwargs={'course_prefix' : self.coursePrefix,
                                                                                   'course_suffix' : self.courseSuffix }))


########NEW FILE########
__FILENAME__ = test_course_name
from django.core.urlresolvers import reverse
from test_harness.test_base import AuthenticatedTestBase

class SimpleTest(AuthenticatedTestBase):
    course_name="Natural Language Processing"

    def __init__(self, *arrgs, **kwargs):
        config = { 'username' : 'professor_0',
                   'password' : 'class2go',
                   'course_prefix' :'networking',
                   'course_suffix' :'Fall2012',
                   'mode' : 'draft' }
        if kwargs != None:
            kwargs.update(config)
        else:
            kwargs = config
        super(SimpleTest, self).__init__(*arrgs, **kwargs)


    def test_course_main(self):
        """
        Tests the display of the main course page
        """
        response = self.client.get(reverse('course_main',
                                           kwargs={'course_prefix' : self.coursePrefix,
                                                   'course_suffix' : self.courseSuffix }),
                                   HTTP_USER_AGENT=self.userAgent)
        self.assertEqual(response.status_code, 200)

        course_title_search_string = "<h2>" + self.course_name + "</h2>"
        self.assertRegexpMatches(response.content, 
                course_title_search_string,
                msg="Couldn't find course name in '%s'" % reverse('course_main',
                                           kwargs={'course_prefix' : self.coursePrefix,
                                                   'course_suffix' : self.courseSuffix }))

    def test_course_materials(self):
        """
        Tests the display of course materials
        """
        response = self.client.get(reverse('course_materials',
                                           kwargs={'course_prefix' : self.coursePrefix,
                                                   'course_suffix' : self.courseSuffix }),
                                   HTTP_USER_AGENT=self.userAgent)
        self.assertEqual(response.status_code, 200)

        course_title_search_string = self.course_name + "</title>"
        self.assertRegexpMatches(response.content, 
                course_title_search_string,
                msg="Couldn't find course name in '%s'" % reverse('course_materials',
                                           kwargs={'course_prefix' : self.coursePrefix,
                                                   'course_suffix' : self.courseSuffix }))


########NEW FILE########
__FILENAME__ = urls
from django.conf.urls.defaults import patterns, url

urlpatterns = patterns('',
    
)

########NEW FILE########
__FILENAME__ = user_profiling_middleware

from django.contrib.auth.models import User
from django.conf import settings
from c2g.models import UserProfile

from datetime import datetime, timedelta

import logging
logger = logging.getLogger(__name__)


class user_profiling(object):
    """
    Middleware to keep track of useful stuff about the user.  Only update once 
    per day (overrideable).  The results end up in the UserProfile model.

    Note that we use the last_update timestamp for this, which will be updated
    by *anything* writing to the UserProfile model.  So if there is something
    else writing to this table frequently then we will stop updating this client
    information.  Fix for this would be to track a separate timestamp for client
    info tracking time -- that feels like overkill for now.
    """
    def process_view (self, request, view_func, view_args, view_kwargs):
        if request.user.is_authenticated():
            try:
                profile = request.user.get_profile()

                # don't update client data too frequently, bad for performance
                # by defaut, once per day
                resolution = getattr(settings, "PROFILE_UPDATE_RESOLUTION", 86400)
                delta = datetime.now()-profile.last_updated
                diff = timedelta(seconds=resolution)
                if delta < diff:
                    return

                try:
                    profile.client_ip = request.META['HTTP_X_FORWARDED_FOR']
                except KeyError:
                    try:
                        profile.client_ip = request.META['REMOTE_ADDR']
                    except KeyError:
                        pass

                try:
                    profile.referrer = request.META['HTTP_REFERER']
                except KeyError:
                    pass

                try:
                    profile.user_agent = request.META['HTTP_USER_AGENT']
                except KeyError:
                    pass
                
                try:
                    profile.accept_language = request.META['HTTP_ACCEPT_LANGUAGE']
                except KeyError:
                    pass

                if profile.client_ip_first is None:
                    profile.client_ip_first = profile.client_ip
                    profile.user_agent_first = profile.user_agent
                    profile.referrer_first = profile.referrer
                    profile.accept_language_first = profile.accept_language

                profile.save()

            except UserProfile.DoesNotExist:
                # Some users might not have a user profile object
                # that's OK, don't do any tracking for those
                pass


########NEW FILE########
__FILENAME__ = actions
from atom import ExtensionElement
from gdata.media import YOUTUBE_NAMESPACE
import gdata.youtube
import gdata.youtube.service
import re
import urllib2, urllib, json

from django.core.urlresolvers import reverse
from django.http import HttpResponse, Http404, HttpResponseBadRequest
from django.shortcuts import render, render_to_response, redirect, HttpResponseRedirect
from django.template import RequestContext
from django.views.decorators.http import require_POST

from c2g.models import Exam, Video, VideoActivity, VideoDownload
from courses.actions import always_switch_mode, auth_is_course_admin_view_wrapper
from courses.common_page_data import get_common_page_data
from courses.videos.forms import *
import kelvinator.tasks
import settings


### Videos ###

@require_POST
def switch_quiz_mode(request):
    request.session['video_quiz_mode'] = request.POST.get('to_mode')
    return redirect(request.META['HTTP_REFERER'])

@require_POST
@auth_is_course_admin_view_wrapper
@always_switch_mode     # Not strictly necessary but good for consistency
def add_video(request):
    course_prefix = request.POST.get("course_prefix")
    course_suffix = request.POST.get("course_suffix")
    common_page_data = get_common_page_data(request, course_prefix, course_suffix)

    if not common_page_data['is_course_admin']:
        return redirect('courses.views.view', course_prefix, course_suffix)

    index = len(Video.objects.filter(topic_id=request.POST.get("topic_id")))

    draft_video = Video(
        course=common_page_data['draft_course'],
        topic_id=int(request.POST.get("topic_id")),
        title=request.POST.get("title"),
        #description=request.POST.get("description"),
        type='youtube',
        url=request.POST.get("yt_id"),
        slug=request.POST.get("slug"),
        mode='draft',
        index=index
    )
    draft_video.save()

    draft_video.create_ready_instance()

    return redirect(request.META['HTTP_REFERER'])

@require_POST
@auth_is_course_admin_view_wrapper
@always_switch_mode
def edit_video(request, course_prefix, course_suffix, slug):
    common_page_data = request.common_page_data
    video = common_page_data['course'].video_set.all().get(slug=slug)
    exam_id = request.POST.get("exam_id")

    action = request.POST['action']
    form = S3UploadForm(request.POST, request.FILES, course=common_page_data['course'], instance=video)
    if form.is_valid():
        form.save()
        
        if action == "Save":
            video.commit()

        if exam_id:
            try:
                exam = Exam.objects.get(id=exam_id)
                exam.live_datetime = video.live_datetime
                exam.save()
                exam.image.live_datetime = video.live_datetime
                exam.image.save()
                video.exam = exam
                video.save()
                video.commit()
            except Exam.DoesNotExist:
                raise Http404

        # Make sure slug is same for draft and ready versions
        if video.slug != video.image.slug:
            video.image.slug = video.slug
            video.image.save()
        return redirect('courses.videos.views.list', course_prefix, course_suffix)

    return render(request, 'videos/edit.html',
                  {'common_page_data': common_page_data,
                   'slug': slug,
                   'form': form,
                   })

@require_POST
@auth_is_course_admin_view_wrapper
@always_switch_mode
def reset_video(request, course_prefix, course_suffix, slug):
    common_page_data = request.common_page_data
    video = common_page_data['course'].video_set.all().get(slug=slug)
    video.revert()
    form = S3UploadForm(course=common_page_data['course'], instance=video)
    return render(request, 'videos/edit.html',
                  {'common_page_data': common_page_data,
                   'slug': slug,
                   'form': form,
                   })

@require_POST
@auth_is_course_admin_view_wrapper
@always_switch_mode
def delete_video(request):
    try:
        common_page_data = get_common_page_data(request, request.POST.get("course_prefix"), request.POST.get("course_suffix"))
    except:
        raise Http404

    if not common_page_data['is_course_admin']:
        return redirect('courses.views.main', request.POST.get("course_prefix"), request.POST.get("course_suffix"))

    video = Video.objects.get(id=request.POST.get("video_id"))
    video.delete()
    video.image.delete()

    return redirect(request.META['HTTP_REFERER'])

@require_POST
def save_video_progress(request):

    videoRecId = request.POST['videoRec']
    playTime = request.POST['playTime']
    videoRec = VideoActivity.objects.get(id=videoRecId)
    if not videoRec.video.duration:
        duration = request.POST.get('duration')
        video = Video.objects.get(id=videoRec.video_id)
        if duration: #this is going to be some string that looks like a float
            video.duration = int(float(duration)) #type conversion first to float then to int
            video.save()
    if videoRec.start_seconds != long(playTime):
        videoRec.start_seconds = playTime
        if long(playTime) > videoRec.max_end_seconds:
            videoRec.max_end_seconds = playTime
        videoRec.save()
    return HttpResponse("saved")

@require_POST
def record_download(request):

    video_id = request.POST['video_id']
    user_id = request.POST['user_id']
    course_id = request.POST['course_id']
    format = request.POST['format']
    
    video_download = VideoDownload(student_id = user_id, video_id = video_id, course_id = course_id, format = format)
    video_download.save()
    
    return HttpResponse("")

def oauth(request):
    if 'code' in request.GET:
        code = request.GET.get('code')
        client_id = settings.GOOGLE_CLIENT_ID
        client_secret = settings.GOOGLE_CLIENT_SECRET
        redirect_uri = "http://" + request.META['HTTP_HOST'] + "/oauth2callback"

        post_data = [('code', code), ('client_id', client_id), ('client_secret', client_secret), ('redirect_uri', redirect_uri), ('grant_type', 'authorization_code')]
        result = urllib2.urlopen('https://accounts.google.com/o/oauth2/token', urllib.urlencode(post_data))
        content = json.loads(result.read())

        yt_service = gdata.youtube.service.YouTubeService(additional_headers={'Authorization': "Bearer "+content['access_token']})
        yt_service.developer_key = settings.YT_SERVICE_DEVELOPER_KEY

        video = Video.objects.get(pk=request.GET.get('state'))

        my_media_group = gdata.media.Group(
            title=gdata.media.Title(text=video.title),
            description=gdata.media.Description(description_type='plain',
                                                text=video.description),
            category=[gdata.media.Category(
                    text='Education',
                    label='Education')],
            )
        
        if request.session['video_privacy'] == "public":
            video_entry = gdata.youtube.YouTubeVideoEntry(media=my_media_group)
        else:
            #upload as unlisted
            extension = ExtensionElement('accessControl', namespace=YOUTUBE_NAMESPACE, attributes={'action': 'list', 'permission': 'denied'})
            video_entry = gdata.youtube.YouTubeVideoEntry(media=my_media_group, extension_elements=[extension])

        video.file.len = video.file.size # monkeypatch bug in InsertVideoEntry
        entry = yt_service.InsertVideoEntry(video_entry, video.file)
        match = re.search('http://gdata.youtube.com/feeds/api/videos/([a-zA-Z0-9_-]+)</ns0:id>', entry.id.ToString())
        video.url = match.group(1)
        video.duration = entry.media.duration.seconds
        video.save()
        video.image.url = video.url
        video.image.duration = video.duration
        video.image.save()

        parts = str(video.handle).split("--")
        return HttpResponseRedirect(reverse('courses.videos.views.list', args=(parts[0], parts[1])))


def GetOAuth2Url(request, video):
    client_id = settings.GOOGLE_CLIENT_ID
    redirect_uri = "http://" + request.META['HTTP_HOST'] + "/oauth2callback"
    response_type = "code"
    scope = "https://gdata.youtube.com"
    state = str(video.id)

    return "https://accounts.google.com/o/oauth2/auth?client_id=" + client_id + "&redirect_uri=" + redirect_uri + "&scope=" + scope + "&response_type=" + response_type + "&state=" + state

@require_POST
@auth_is_course_admin_view_wrapper
@always_switch_mode
def upload(request):
    course_prefix = request.POST.get("course_prefix")
    course_suffix = request.POST.get("course_suffix")
    exam_id = request.POST.get("exam_id",'')
    common_page_data = get_common_page_data(request, course_prefix, course_suffix)

    data = {'common_page_data': common_page_data}

    if request.method == 'POST':
        request.session['video_privacy'] = request.POST.get("video_privacy")

        # Need partial instance with course for form slug validation
        new_video = Video(course=common_page_data['course'])
        form = S3UploadForm(request.POST, request.FILES, course=common_page_data['course'], instance=new_video)
        if form.is_valid():
            new_video.index = new_video.section.getNextIndex()
            new_video.mode = 'draft'
            new_video.handle = course_prefix + "--" + course_suffix

            if exam_id:
                try:
                    exam = Exam.objects.get(id=exam_id)
                except Exam.DoesNotExist:
                    return HttpResponseBadRequest("The exam you wanted to link to this video was not found!")
                new_video.exam = exam
            
                exam.live_datetime = new_video.live_datetime
                exam.save()
                if exam.image:
                    exam.image.live_datetime = new_video.live_datetime
                    exam.image.save()

            # Bit of jiggery pokery to so that the id is set when the upload_path function is called.
            # Now storing file with id appended to the file path so that thumbnail and associated manifest files
            # are easily associated with the video by putting them all in the same directory.
            new_video.file = None
            new_video.save()
            new_video.create_ready_instance()
            new_video.file = form.cleaned_data['file']
            new_video.save()
            new_video.commit()

            # kick off remote jobs
            kelvinator.tasks.kelvinate.delay(new_video.file.name)
            kelvinator.tasks.resize.delay(new_video.file.name, "large")
            kelvinator.tasks.resize.delay(new_video.file.name, "small")

            if new_video.url:
                return redirect('courses.videos.views.list', course_prefix, course_suffix)

            authUrl = GetOAuth2Url(request, new_video)
            #eventually should store an access token, so they don't have to give permission everytime
            return redirect(authUrl)
    else:
        form = S3UploadForm(course=common_page_data['course'])
    data['form'] = form

    return render_to_response('videos/s3upload.html',
                              data,
                              context_instance=RequestContext(request))

########NEW FILE########
__FILENAME__ = forms
from django import forms
from c2g.models import ContentSection, Video, Exercise, Course
# import the logging library
#import logging
#logger = logging.getLogger('django')

import gdata.youtube.service

class S3UploadForm(forms.ModelForm):

    def __init__(self, *args, **kwargs):
        #logger.warning('test')
        course = kwargs.pop('course')
        super(S3UploadForm, self).__init__(*args, **kwargs)
        self.fields['section'] = forms.ModelChoiceField(ContentSection.objects.filter(course=course, is_deleted=False), empty_label=None)
        instance = getattr(self, 'instance', None)
        if instance and instance.id:
            del self.fields['file']
        else:
            self.fields['file'].help_text = "Select the mp4 video file on your machine to upload - you need to do this even if the file is already on YouTube so that we can provide downloads and generate a thumbnail index."
        self.fields['slug'].help_text = "A unique identifier that will be shown in the URL"
    
    def clean_url(self):
        url = self.cleaned_data['url']
        if url:
            yt_service = gdata.youtube.service.YouTubeService()
            try:
                entry = yt_service.GetYouTubeVideoEntry(video_id=url)
                self.instance.duration = entry.media.duration.seconds
            except gdata.service.RequestError:
                raise forms.ValidationError('Invalid YouTube video ID.')
        return url

    class Meta:
        model = Video
        fields = ('title', 'slug', 'section', 'description', 'file', 'url', 'live_datetime')
        widgets = {
            'live_datetime': forms.widgets.DateTimeInput(format='%m/%d/%Y %H:%M', attrs={'data-datetimepicker':''})
        }

class ManageExercisesForm(forms.Form):
    file = forms.FileField()
    video_time = forms.IntegerField(min_value=0)
    course = forms.CharField(widget=(forms.HiddenInput()))

class AdditionalExercisesForm(forms.Form):
    def __init__(self, *args, **kwargs):
        used_exercises = kwargs.pop('used_exercises', None)
        super(AdditionalExercisesForm, self).__init__(*args, **kwargs)
        self.fields['exercise'] = forms.ModelMultipleChoiceField(used_exercises)
#        for used_exercise in used_exercises:
#            check = 'check' + str(used_exercise.id)
#            video_time = 'time' + str(used_exercise.id)
#            self.fields[check] = forms.BooleanField(required=False)
#            self.fields[video_time] = forms.IntegerField(required=False)

    def clean(self):
        cleaned_data = super(AdditionalExercisesForm, self).clean()
        check = cleaned_data.get('check')
        poo = cleaned_data.get('poo')
        if check and not poo:
            self._errors['poo'] = self.error_class(['Dont be so poopy'])
        return cleaned_data

class ReorderExercisesForm(forms.Form):
    def __init__(self, *args, **kwargs):
        current_exercises = kwargs.pop('current_exercises', None)
        super(ReorderExercisesForm, self).__init__(*args, **kwargs)
        for current_exercise in current_exercises:
            self.fields[current_exercise.exercise.fileName] = forms.IntegerField(initial=current_exercise.video_time)

########NEW FILE########
__FILENAME__ = models

########NEW FILE########
__FILENAME__ = test_video_list
from test_harness.test_base import AuthenticatedTestBase

__all__ = ['VideoListStudentReadyModeTest']

class VideoListStudentReadyModeTest(AuthenticatedTestBase):
    """Simple existence checks for various features of video list page."""

    def __init__(self, *arrgs, **kwargs):
        config = { 'username' : 'student_0',
                   'password' : 'class2go',
                   'course_prefix' :'networking',
                   'course_suffix' :'Fall2012',
                   'mode' : 'ready' }
        if kwargs != None:
            kwargs.update(config)
        else:
            kwargs = config
        super(VideoListStudentReadyModeTest, self).__init__(*arrgs, **kwargs)

    def test_basic_page_access(self):
        """Tests that we can access the video list page

        url(r'^(?P<course_prefix>[a-zA-Z0-9_-]+)/(?P<course_suffix>[a-zA-Z0-9_-]+)/videos/?$', 'courses.videos.views.list'),
        """
        resp = self.client.get('/networking/Fall2012/videos' )
        self.assertEqual(resp.status_code, 200)

    def test_javascript_delivery(self):
        """Make sure video list js content is delivered exactly once"""
        resp = self.client.get('/networking/Fall2012/videos' )
        self.assertEqual(resp.content.count("function record_video_download("), 1)


########NEW FILE########
__FILENAME__ = test_views
from django.core.urlresolvers import reverse
from lxml import etree
from test_harness.test_base import AuthenticatedTestBase

class StudentVideoTest(AuthenticatedTestBase):
    course_name="Natural Language Processing"
    fixtures = ['db_snapshot_video_tests.json']

    def __init__(self, *arrgs, **kwargs):
        config = { 'username' : 'student_1',
                   'password' : 'class2go',
                   'course_prefix' :'networking',
                   'course_suffix' :'Fall2012',
                   'mode' : 'ready' }
        if kwargs != None:
            kwargs.update(config)
        else:
            kwargs = config
        super(StudentVideoTest, self).__init__(*arrgs, **kwargs)


    def test_course_video_list(self):
        """
        Tests the display of the course video list page
        """
        # build the url once
        test_url = reverse('course_video_list',
                           kwargs={'course_prefix' : self.coursePrefix,
                                   'course_suffix' : self.courseSuffix })

        # fetch the response
        response = self.client.get(test_url,
                                   HTTP_USER_AGENT=self.userAgent )
        self.assertEqual(response.status_code, 200)

        # ensure we got the correct page by matching the title
        course_title_search_string = "<title>Video | " + self.course_name + "</title>"
        self.assertRegexpMatches(response.content, 
                course_title_search_string,
                msg="Couldn't find the title %s in '%s'" % (course_title_search_string, test_url ))

        # parse the html into a tree and run an xpath for video list items.
        # there should be 3 live videos in the content
        tree = etree.HTML(response.content)
        result = tree.xpath('//li[contains(@class, "course-list-item")]')
        self.assertEqual(len(result), 3, msg="Wrong number of live videos.")


########NEW FILE########
__FILENAME__ = test_views_selenium
from django.core.urlresolvers import reverse
from lxml import etree
from nose.plugins.attrib import attr
from selenium.webdriver.support.ui import WebDriverWait # available since 2.4.0
from test_harness.test_base_selenium import InstructorBase, StudentBase


def DEBUG(s):
    """A useful method for adding tracing to help figure out why tests go bad

    Particularly helpful for working with remote test services that capture
    output, like travis-ci."""
    import sys
    sys.stderr.write(s)


class InstructorVideoTest(InstructorBase):

    @attr('selenium')
    @attr(user='instructor')
    def test_course_video_problem_set(self):
        """[sel] Test an instructor can load and display a video problemset"""
        # log in to the site before loading a page
        self.do_login()
        browser = self.browser

        # load the problem set for video 4
        list_url = reverse('course_video_pset',
                           kwargs={'course_prefix' : self.course_prefix,
                                   'course_suffix' : self.course_suffix,
                                   'video_id' : 4 })
        browser.get('%s%s' % (self.live_server_url, list_url))
        WebDriverWait(browser, 15).until(lambda browser : browser.find_element_by_xpath('//body'))

        # make sure we have an exercise div
        self.assertTrue(browser.find_element_by_xpath('//div[contains(@class, "exercise")]'))
        # pull the data-name attributes from exercise divs
        tree = etree.HTML(browser.page_source)
        result = tree.xpath('//div[contains(@class, "exercise")]/@data-name')
        # check that we got the right number of exercises - TODO: use the ORM to get the count
        self.assertEqual(len(result), 1, msg="Unexpected number of divs with data.")
        # check that we got the right exercise - TODO: use the ORM to get the name
        self.assertEqual('xx_P1_Regexp', result[0])


class StudentVideoTest(StudentBase):

    @attr('selenium')
    @attr(user='student')
    def test_course_video(self):
        """[sel] Tests that a student can display an individual video"""
        self.do_login()
        browser = self.browser

        # get the list of videos
        list_url = reverse('course_video_list',
                           kwargs={'course_prefix' : self.course_prefix,
                                   'course_suffix' : self.course_suffix })
        browser.get('%s%s' % (self.live_server_url, list_url))
        WebDriverWait(browser, 15).until(lambda browser : browser.find_element_by_xpath('//body'))

        # pull the urls of each video from the in-page list
        tree = etree.HTML(browser.page_source)
        # pull the href from the anchor contained in the course-list-content
        urls = tree.xpath('//div[@class="course-list-content"]//a/@href')
        self.assertEqual(len(urls), 3, msg="Wrong number of live videos.")

        url = urls[1]   # An essentially random, yet reproducible, choice
        browser.get('%s%s' % (self.live_server_url, url))
        # When loaded we should have an iframe that contains the youtube content
        WebDriverWait(browser, 15).until(lambda browser : browser.find_element_by_tag_name('iframe'))
        # switch to the iframe for the youtube player and find the embeded player
        browser.switch_to_frame(browser.find_element_by_tag_name('iframe'))
        self.assertTrue(browser.find_element_by_xpath('//embed[@id="video-player"]'))


########NEW FILE########
__FILENAME__ = views
import json

from django.core.urlresolvers import reverse
from django.db.models import Q
from django.http import HttpResponse, Http404
from django.shortcuts import render, render_to_response, redirect, HttpResponseRedirect
from django.template import RequestContext

from c2g.models import ContentGroup, ContentSection, Exam, ExamRecord, Exercise, PageVisitLog, ProblemActivity, Video, VideoActivity, VideoToExercise, videos_in_exam_metadata
from courses.actions import auth_view_wrapper, auth_is_course_admin_view_wrapper
from courses.common_page_data import get_common_page_data
from courses.course_materials import get_course_materials
from courses.videos.forms import *
from courses.forms import *


@auth_view_wrapper
def list(request, course_prefix, course_suffix):
    try:
        common_page_data = get_common_page_data(request, course_prefix, course_suffix)
    except:
        raise Http404

    if 'id' in request.GET:
        #process Video model instance with this youtube id
        #and other stuff
        try:
            video = Video.objects.get(pk=request.GET['vid'])
        except Video.DoesNotExist:
            raise Http404

        video.url = request.GET['id']
        video.save()
        video.create_ready_instance()

    section_structures = get_course_materials(common_page_data=common_page_data, get_video_content=True)

    form = None
    if request.common_page_data['course_mode'] == "draft":
        form = LiveDateForm()

    return render_to_response('videos/'+common_page_data['course_mode']+'/list.html', {'common_page_data': common_page_data, 'section_structures':section_structures, 'context':'video_list', 'form': form}, context_instance=RequestContext(request))

@auth_view_wrapper
def view(request, course_prefix, course_suffix, slug):

    common_page_data = request.common_page_data
    
    try:
        #getByCourse takes care of checking for draft vs live, is_deleted and live times
        video = Video.objects.getByCourse(course=common_page_data['course']).get(slug=slug)
    except Video.DoesNotExist:
        raise Http404
    
    if not common_page_data['is_course_admin']:
        visit_log = PageVisitLog(
            course = common_page_data['ready_course'],
            user = request.user,
            page_type= 'video',
            object_id = str(video.id),
        )
        visit_log.save()

    if not 'video_quiz_mode' in request.session:
        #Default to include quizzes in viewing videos
        request.session['video_quiz_mode'] = "quizzes included"

    videos = Video.objects.getByCourse(course=common_page_data['course'])
    #Get index of current video
    cur_index = None #just code safety
    for index, item in enumerate(videos):
        if item == video:
            cur_index = index
            break

    ready_section = video.section
    if ready_section and ready_section.mode == "draft":
        ready_section = ready_section.image

    #code safety
    next_slug = None
    prev_slug = None

    if cur_index is not None:
        if cur_index > 0:
            prev_slug = videos[cur_index-1].slug
        else:
            prev_slug = None
        if cur_index < videos.count() - 1:
            next_slug = videos[cur_index+1].slug
        else:
            next_slug = None

    video_rec = request.user.videoactivity_set.filter(video=video)
    if video_rec:
        video_rec = video_rec[0]
    else:
        #note student field to be renamed to user, VideoActivity for all users now
        video_rec = VideoActivity(student=request.user, course=common_page_data['course'], video=video)
        video_rec.save()
        
    course = common_page_data['course']

    key = ('video', video.id)
    l1items, l2items = get_contentgroup_data(course=course)
    downloadable_content = get_children(key, l1items, l2items)

    if video.exam:
        try:
            exam = video.exam
            video_obj = videos_in_exam_metadata(exam.xml_metadata, times_for_video_slug=video.slug)
            question_times = video_obj['question_times']

        except Exam.DoesNotExist:
            raise Http404
    else:
        sections = ContentSection.objects.getByCourse(course) 
        section = sections[0]
        # create fake exam as exam template (which is what displays all videos) needs exam data to function
        # correctly (TODO: Refactor this)
        exam = Exam(course=course, slug=slug, title=video.title, description="Empty Exam", html_content="", xml_metadata="", due_date='', assessment_type="survey", mode="draft", total_score=0, grade_single=0, grace_period='', partial_credit_deadline='', late_penalty=0, submissions_permitted=0, resubmission_penalty=0, exam_type="survey", autograde=0, display_single=0, invideo=1, section=section,)
        exam.live_datetime = video.live_datetime    # needed so video shows up
        question_times = ""

    return render_to_response('exams/view_exam.html', 
                              {
                               'common_page_data':    common_page_data, 
                               'video':               video,
                               'ready_section':       ready_section,
                               'video_rec':           video_rec, 
                               'prev_slug':           prev_slug, 
                               'next_slug':           next_slug, 
                               'downloadable_content':downloadable_content,
                               'json_pre_pop':"{}",
                               'scores':"{}",
                               'editable':True,
                               'single_question':exam.display_single,
                               'videotest':exam.invideo,
                               'question_times':json.dumps(question_times),
                               'allow_submit':True,
                               'children': downloadable_content,
                               'exam':exam,
                              },
                              context_instance=RequestContext(request))



@auth_is_course_admin_view_wrapper
def edit(request, course_prefix, course_suffix, slug):
    common_page_data = request.common_page_data
    video = common_page_data['course'].video_set.all().get(slug=slug)
    form = S3UploadForm(course=common_page_data['course'], instance=video)
    try:
        psets = Exam.objects.filter(course_id=common_page_data['course'].id, invideo=True, is_deleted=0)
    except:
        raise Http404 

    return render(request, 'videos/edit.html',
            {'common_page_data': common_page_data,
             'slug': slug,
             'form': form,
             'video': video,
             'psets': psets,
             })

@auth_is_course_admin_view_wrapper
def upload(request, course_prefix, course_suffix):
    try:
        common_page_data = get_common_page_data(request, course_prefix, course_suffix)
    except:
        raise Http404

    data = {'common_page_data': common_page_data}

    try:
        exam = Exam.objects.filter(course_id=common_page_data['course'].id, invideo=True)
    except:
        raise Http404 

    form = S3UploadForm(course=common_page_data['course'])
    data['form'] = form
    data['psets'] = exam 

    return render_to_response('videos/s3upload.html',
                              data,
                              context_instance=RequestContext(request))


@auth_view_wrapper
def manage_exercises(request, course_prefix, course_suffix, video_slug):
    #Get all necessary information about the problemset
    try:
        common_page_data = get_common_page_data(request, course_prefix, course_suffix)
    except:
        raise Http404
    data = {'common_page_data': common_page_data}
    manage_form = ManageExercisesForm(initial={'course':common_page_data['course'].id})
    try:
        video = Video.objects.getByCourse(common_page_data['course']).get(slug=video_slug)
    except Video.DoesNotExist:
        raise Http404

    videoToExs = VideoToExercise.objects.filter(video__course=common_page_data['course'], is_deleted=False, video__slug=video_slug).order_by('video_time')
    used_exercises = []
    exercise_attempted = False
    if ProblemActivity.objects.filter(video_to_exercise__video=video.image).exists():
        exercise_attempted = True
    #Get the list of exercises currently in this problem set
    for videoToEx in videoToExs:
        used_exercises.append(videoToEx.exercise.id)
    #Get all the exercises in the course but not in this problem set to list in add from existing
    #Q objects allow queryset objects to be ORed together
    exercises = Exercise.objects.all().filter(Q(problemSet__course=common_page_data['course'])|Q(video__course=common_page_data['course'])).exclude(id__in=used_exercises).distinct()
    additional_form = AdditionalExercisesForm(initial={'course':common_page_data['course'].id}, used_exercises=exercises)
    reorder_form = ReorderExercisesForm(current_exercises=videoToExs)

    #Form processing action if form was submitted
    if request.method == 'POST':
        manage_form = ManageExercisesForm(request.POST, request.FILES)
        additional_form = AdditionalExercisesForm(request.POST, used_exercises=exercises)

        if manage_form.is_valid():
            
            #don't catch video DoesNotExist here because we want some tangible error to happen if
            #the video id changes in form submission, like emailing us
            video = Video.objects.get(id=request.POST['video_id'])
            video_time = request.POST['video_time']
            file_content = request.FILES['file']
            file_name = file_content.name

            exercises = Exercise.objects.filter(handle=course_prefix+"--"+course_suffix,is_deleted=0)
            exercise_exists = False
            for exercise in exercises:
                if exercise.fileName == file_name:
                    #We don't wipe out all problem activites associated with this
                    #existing exercise, but if it's a nontrivial overwrite, should we?
                    exercise.file = file_content
                    exercise.save()
                    exercise_exists = True

                    #If exercise already in video, don't need to create new videoToEx, just update video_time
                    #If exercise already in video but deleted, undelete
                    #Otherwise create new videoToEx
                    queryVideoToEx = VideoToExercise.objects.filter(video=video, exercise=exercise, mode='draft').order_by('-id')
                    if queryVideoToEx.exists():
                        existingVideoToEx = queryVideoToEx[0]
                        if existingVideoToEx.is_deleted == 1:
                            existingVideoToEx.is_deleted = 0
                            existingVideoToEx.video_time = video_time
                            existingVideoToEx.save()
                        else:
                            existingVideoToEx.video_time = video_time
                            existingVideoToEx.save()
                    else:
                        videoToEx = VideoToExercise(video=video, exercise=exercise, video_time=video_time, is_deleted=0, mode='draft')
                        videoToEx.save()
                    break

            if not exercise_exists:
                exercise = Exercise()
                exercise.handle = request.POST['course_prefix'] + '--' + request.POST['course_suffix']
                exercise.fileName = file_name
                exercise.file.save(file_name, file_content)
                exercise.save()

                videoToEx = VideoToExercise(video=video, exercise=exercise, video_time=video_time, is_deleted=0, mode='draft')
                videoToEx.save()
            return HttpResponseRedirect(reverse('courses.videos.views.manage_exercises', args=(request.POST['course_prefix'], request.POST['course_suffix'], video.slug,)))

    #If form was not submitted then the form should be displayed or if there were errors the page needs to be rendered again
    data['manage_form'] = manage_form
    data['additional_form'] = additional_form
    data['reorder_form'] = reorder_form
    data['course_prefix'] = course_prefix
    data['course_suffix'] = course_suffix
    data['video'] = video
    data['videoToExs'] = videoToExs
    data['exercise_attempted'] = exercise_attempted
    data['exercises'] = exercises
    data['exercise_attempted'] = exercise_attempted
    return render_to_response('videos/manage_exercises.html', data, context_instance=RequestContext(request))

@auth_is_course_admin_view_wrapper
def add_exercise(request):
#    try:
#        common_page_data = get_common_page_data(request, course_prefix, course_suffix)
#    except:
#        raise Http404

    #don't catch video DoesNotExist here because we want some tangible error to happen if
    #the video id changes in form submission, like emailing us
    video = Video.objects.get(id=request.POST['video_id'])

    video_time = request.POST['videotime']

    file_content = request.FILES['exercise']
    file_name = file_content.name

    exercise = Exercise()
    exercise.handle = request.POST['course_prefix'] + '--' + request.POST['course_suffix']
    exercise.fileName = file_name
    exercise.file.save(file_name, file_content)
    exercise.save()

    videoToEx = VideoToExercise(video=video, exercise=exercise, is_deleted=False, video_time=video_time)
    videoToEx.save()
    return HttpResponseRedirect(reverse('courses.videos.views.manage_exercises', args=(request.POST['course_prefix'], request.POST['course_suffix'], video.slug,)))

@auth_is_course_admin_view_wrapper
def add_existing_exercises(request):

    #don't catch video DoesNotExist here because we want some tangible error action to happen if
    #the video id changes in form submission, like mailing us
    video = Video.objects.get(id=request.POST['video_id'])

    exercise_ids = request.POST.getlist('exercise')
    exercises = Exercise.objects.filter(id__in=exercise_ids)
    for exercise in exercises:
        #if this exercise has been deleted previously then just un-delete it
        videoToExs = VideoToExercise.objects.filter(video=video, exercise_id=exercise.id, mode = 'draft', is_deleted=1).order_by('-id')
        if videoToExs.exists():
            videoToEx = videoToExs[0]
            videoToEx.is_deleted = 0
            videoToEx.video_time = 0
            videoToEx.save()
        #else create a new one
        else:
            videoToEx = VideoToExercise(video=video, exercise=exercise, is_deleted=0, video_time=0, mode='draft')
            videoToEx.save()       
        
    return HttpResponseRedirect(reverse('courses.videos.views.manage_exercises', args=(request.POST['course_prefix'], request.POST['course_suffix'], video.slug,)))


@auth_is_course_admin_view_wrapper
def save_exercises(request):
    #Function should only be accessed from submitting a form
    if request.method != 'POST':
        return redirect(request.META['HTTP_REFERER'])

    #don't catch video DoesNotExist here because we want some tangible error action to happen if
    #the video id changes in form submission, like mailing us
    video = Video.objects.get(id=request.POST['video_id'])

    action = request.POST['action']
    if action == 'Reset to Ready':
        video.revert()
        return HttpResponseRedirect(reverse('courses.videos.views.manage_exercises', args=(request.POST['course_prefix'], request.POST['course_suffix'], video.slug,)))
    else:
        videoToExs = VideoToExercise.objects.getByVideo(video)
        for videoToEx in videoToExs:
            videoToEx.video_time = request.POST[videoToEx.exercise.fileName]
            videoToEx.save()
        if action == 'Save and Set as Ready':
            video.commit()
        return HttpResponseRedirect(reverse('courses.videos.views.list', args=(request.POST['course_prefix'], request.POST['course_suffix'],)))

def delete_exercise(request):
    try:
        handle = request.POST['course_prefix']+'--'+request.POST['course_suffix']
        toDelete = VideoToExercise.objects.get(exercise__handle=handle,exercise__fileName=request.POST['exercise_file'], mode='draft', is_deleted=False, video__slug=request.POST['video_slug'])
        toDelete.delete()
        toDelete.save()

    except VideoToExercise.DoesNotExist:
        pass  #Do nothing if asked to delete non-existent video-exercise-relationship

    return HttpResponseRedirect(reverse('courses.videos.views.manage_exercises', args=(request.POST['course_prefix'], request.POST['course_suffix'], request.POST['video_slug'],)))

#enforce order by sorting by video_time
def get_video_exercises(request):
    import json
    try:
        video = Video.objects.get(id = request.GET['video_id'])
    except Video.DoesNotExist:
        raise Http404
    
    videoToExs = VideoToExercise.objects.select_related('exercise', 'video').filter(video=video, is_deleted=False).order_by('video_time')
    json_list = {}
    order = 0
    for videoToEx in videoToExs:
        json_list[str(videoToEx.video_time)]={}
        json_list[str(videoToEx.video_time)]['time']=videoToEx.video_time
        json_list[str(videoToEx.video_time)]['problemDiv']=videoToEx.exercise_id
        json_list[str(videoToEx.video_time)]['order']=order
        json_list[str(videoToEx.video_time)]['fileName']=videoToEx.exercise.fileName

        order=order+1

    json_string = json.dumps(json_list)
    return HttpResponse(json_string)

#enforce order by sorting by video_time
@auth_view_wrapper
def load_video_problem_set(request, course_prefix, course_suffix, video_id):

    vex_list = VideoToExercise.objects.select_related('exercise', 'video').filter(video_id=video_id, is_deleted=False).order_by('video_time')

    file_names = []
    for vex in vex_list:
        #Remove the .html from the end of the file name
        file_names.append(vex.exercise.fileName[:-5])
    # assessment type is hard-coded because all in-video exercises are formative
    return render_to_response('problemsets/load_problem_set.html',{'file_names': file_names, 'assessment_type': 'formative'},context_instance=RequestContext(request))

####
# Extra utility methods not used by get_course_materials 
####
def get_contentgroup_data(course):
    """Old method of memoizing ContentGroup."""
    # TODO: figure out how to remove this and all its children
    l1_items = {}
    l2_items = {}
    for cgtype, cgtid, cgref, target, level, display in [__get_group_item_data(x, selfref=True) for x in 
                                                            ContentGroup.objects.getByCourse(course=course)]:
        if not target.is_live() or target.is_deleted:
            continue
        if level == 2:
            l2_items[(cgtype, cgtid)] = (cgref, target, level, display)
        else:
            l1_items[(cgtype, cgtid)] = cgref.group_id
    return l1_items, l2_items

def __get_group_item_data(group_item, selfref=False):
    ctype   = group_item.get_content_type()
    level   = group_item.level
    display = group_item.display_style or 'list'
    target  = getattr(group_item, ctype)
    cgid    = target.id
    if not selfref:
        return ctype, cgid, target, level, display
    return ctype, cgid, group_item, target, level, display

def get_children(key, level1_items, level2_items, user=None):

    def type_sorter(ci1, ci2):
        ci1_type = ci1['type']
        ci2_type = ci2['type']
        ci1_title = ci1['title']
        ci2_title = ci2['title']
        if ci1_type < ci2_type:
            return -1
        elif ci1_type > ci2_type:
            return +1
        else:
            # equal types, go by title
            if ci1_title < ci2_title:
                return -1
            elif ci1_title > ci2_title:
                return +1
            else:
                return 0

    def name_sorter(ci1, ci2):
        ci1_name = ci1['name']
        ci2_name = ci2['name']
        ci1_ext = ci1['ext']
        ci2_ext = ci2['ext']
        if ci1_name and ci2_name:
            if ci1_ext < ci2_ext:
                return -1
            elif ci1_ext > ci2_ext:
                return +1
            else:
                # equal extensions, go by filename
                if ci1_name < ci2_name:
                    return -1
                elif ci1_name > ci2_name:
                    return +1
                else:
                    return 0
        else:
            return 0

    children = []
    if level1_items.has_key(key):
        group_id = level1_items[key]
        children.extend([__augment_child_data(k, v, user) for k,v in level2_items.items() if v[0].group_id == group_id])
        children = sorted(sorted(children, type_sorter), name_sorter)
    return children

def __augment_child_data(key, value, user=None):
    class NoFile():
        name = ''
    cgtype = key[0]
    ref    = value[1]
    tmp_f  = getattr(ref, 'file', NoFile())
    name   = tmp_f.name.split('/').pop()
    ext    = name.split('.').pop().lower()

    #              target             target        this entry    target ref  
    child_data = {'type': cgtype, 'id': key[1], 'self': value[0], 'ref': ref, 'display': value[3], 'ext': ext,
                  'name': name, 'title': ref.title, 'url': ref.get_url(), 'index': ref.index, 'children': None, }
    child_data[cgtype] = ref      # TODO: set 'exam':exam - remove after making templates use 'ref'
    if cgtype == "exam" and user: # TODO: per-type special cases belong somewhere else?
        child_data['records'] = ExamRecord.objects.filter(course=ref.course, student=user, complete=True, exam=ref)
    return child_data
    

########NEW FILE########
__FILENAME__ = models
from django.db import models

# Create your models here.

########NEW FILE########
__FILENAME__ = tests
"""
This file demonstrates writing tests using the unittest module. These will pass
when you run "manage.py test".

Replace this with more appropriate tests for your application.
"""

#from django.test import TestCase
#
#
#class SimpleTest(TestCase):
#    def test_basic_addition(self):
#        """
#        Tests that 1 + 1 always equals 2.
#        """
#        self.assertEqual(1 + 1, 2)


########NEW FILE########
__FILENAME__ = views
from django.http import HttpResponse
from django.shortcuts import render_to_response
from django.template import Context, loader
from django.template import RequestContext

from c2g.models import Video
from courses.actions import auth_view_wrapper

@auth_view_wrapper
def view(request, course_prefix, course_suffix, video_id):
    video = Video.objects.get(id=video_id)
    return render_to_response('video_exercises/view.html', {'course_prefix': course_prefix, 'course_suffix': course_suffix, 'video': video, 'request': request}, context_instance=RequestContext(request))

########NEW FILE########
__FILENAME__ = views
from django.http import Http404
from django.shortcuts import render_to_response
from django.template import RequestContext
from c2g.models import *
from courses.course_materials import get_course_materials
from django.shortcuts import redirect
from django.core.urlresolvers import reverse
from django.views.decorators.http import require_POST
from django.views.decorators.csrf import csrf_protect
from django.views.decorators.cache import cache_page


from courses.forms import *

from courses.actions import auth_view_wrapper, is_member_of_course

from c2g.models import CurrentTermMap
import settings, logging
from datetime import date
from datetime import timedelta

logger = logging.getLogger(__name__)


def index(item): # define a index function for list items
 return item[1]


curTerm = 'Fall2012'

def current_redirects(request, course_prefix):
    try:
        suffix = CurrentTermMap.objects.get(course_prefix=course_prefix).course_suffix
    except CurrentTermMap.DoesNotExist:
        suffix = curTerm # Use this as default fallback

    scheme='https://' if request.is_secure() else 'http://'

    if Course.objects.filter(handle=course_prefix+'--'+suffix).exists():
        if suffix == 'Fall2012': #send requests to Fall2012 classes under the new codebase back to the old codebase
            http_host=re.sub(r'class2go\.', 'class.', request.META['HTTP_HOST'], flags=re.I)
        else:  #send everyone else to the new codebase
            http_host=re.sub(r'class\.', 'class2go.', request.META['HTTP_HOST'], flags=re.I)
        return redirect(scheme+http_host+reverse('courses.views.main',args=[course_prefix, suffix]))
    else: 
        raise Http404
    

def main(request, course_prefix, course_suffix):
    #Common page data is already run in middleware
    #try:
    #    common_page_data = get_common_page_data(request, course_prefix, course_suffix)
    #except Course.DoesNotExist:
    #    raise Http404

    common_page_data=request.common_page_data

    course = common_page_data['course']
    #determine whether to redirect to preview page
    #non-registered students on public courses should be redirected
    redirect_to_preview = course.preview_only_mode or (not course.institution_only) and (not common_page_data['is_course_member'])
    
    if redirect_to_preview:
        if not common_page_data['is_course_admin']: #keep this here as the only exception: course admins should be able to create content
            redir = reverse('courses.preview.views.preview',args=[course_prefix, course_suffix])
            if (settings.INSTANCE == 'stage' or settings.INSTANCE == 'prod'):
                redir = 'https://'+request.get_host()+redir
            return redirect(redir)

    course = common_page_data['course']
    announcement_list = Announcement.objects.getByCourse(course=common_page_data['course']).order_by('-time_created')[:11]
    if len(announcement_list) > 10:
        many_announcements = True
        announcement_overflow = len(announcement_list) - 10
        announcement_list = announcement_list[0:10]
    else:
        many_announcements = False
        announcement_overflow = 0
    
    course_cert = None
    share_block_title = None
    share_block_type = 'standard'
    
    if request.user.is_authenticated():
        is_logged_in = 1
        
        # Pass whether people get a cert and what it is to main page for when they finish course.
        user_certs = request.user.get_profile().certificates.all().filter(course=course)
        if user_certs:
            course_cert = (user_certs[0].type, user_certs[0].dl_link(request.user))
        
        if course_cert:
            share_block_title = 'Share your Achievement!'
            share_block_type = 'statement'
        else:
            share_block_title = 'Share Something!'
    else:
        is_logged_in = 0
    
    # Environment prep for jabber chat plugin. Uses '' == False.
    jabber_configured = getattr(settings, 'JABBER_DOMAIN', '')
        
    if (course.calendar_start > date.today()):
        share_block_type = 'join'

    headless = request.GET.get('headless')
    if headless is not None:
        if headless == '1':
            request.session['headless'] = headless
        elif headless == '0':
            #headless explicitly turned off
            request.session['headless'] = None

    return render_to_response('courses/view.html',
        {'common_page_data':       common_page_data,
        'course':                  course,
        'announcement_list':       announcement_list,
        'announcement_overflow':   announcement_overflow,
        'many_announcements':      many_announcements,
        'is_logged_in':            is_logged_in,
        'course_cert':             course_cert,
        'share_block_title':       share_block_title,
        'share_block_type':        share_block_type,
        'jabber_configured':       jabber_configured,
        },
        context_instance=RequestContext(request))

def get_upcoming_exams(course):
  end_date = date.today() + timedelta(weeks=2)
  exams = Exam.objects.filter(
    course=course,
    mode='ready',
    is_deleted=0,
    due_date__gte = date.today(),
    due_date__lte = end_date, 
    live_datetime__lte = date.today()
    ).order_by('due_date')
  return exams


@auth_view_wrapper
def course_materials(request, course_prefix, course_suffix, section_id=None):

    #Vars used for single section nav
    prev_section = None
    next_section = None

    if section_id:
        #If an instructor switches to edit view from a single section's materials page,
        #just redirect to display all sections, since section_id is for viewing sections in ready mode
        if request.common_page_data['course_mode'] == 'draft':
            return redirect('courses.views.course_materials', request.common_page_data['course_prefix'], request.common_page_data['course_suffix'])

        #Makes sure section_id is for a ready mode section
        try:
            section = ContentSection.objects.getByCourse(course=request.common_page_data['course']).get(pk=section_id)
        except ContentSection.DoesNotExist:
            raise Http404
        section_structures = get_course_materials(common_page_data=request.common_page_data, get_video_content=True, get_pset_content=False, get_additional_page_content=True, get_file_content=True, get_exam_content=True, SECTION=section)

        #Get prev/next nav links
        cur_index = None
        sections = request.common_page_data['content_sections']
        for index, item in enumerate(sections):
            if item == section:
                cur_index = index
                break
        if cur_index:
            if cur_index > 0:
                prev_section = sections[cur_index-1]
            if cur_index < len(sections) - 1:
                next_section = sections[cur_index+1]
    else:
        section_structures = get_course_materials(common_page_data=request.common_page_data, get_video_content=True, get_pset_content=False, get_additional_page_content=True, get_file_content=True, get_exam_content=True)

    form = None
    if request.common_page_data['course_mode'] == "draft":
        form = LiveDateForm()

    return render_to_response('courses/'+request.common_page_data['course_mode']+'/course_materials.html', {'common_page_data': request.common_page_data, 'section_structures':section_structures, 'context':'course_materials', 'form':form, 'prev_section':prev_section, 'next_section':next_section}, context_instance=RequestContext(request))

@cache_page(60*3, cache="view_store")
def leftnav(request, course_prefix, course_suffix):
    course = request.common_page_data['ready_course']
    full_contentsection_list, full_index_list = get_full_contentsection_list(course)
    return render_to_response('left_nav.html',
        {
            'PREFIX':              course_prefix,
            'SUFFIX':              course_suffix,
            'contentsection_list': full_contentsection_list,
            'full_index_list':     full_index_list,
        },
    context_instance=RequestContext(request))


@cache_page(60*60, cache="view_store")
def rightnav(request, course_prefix, course_suffix):
    course = request.common_page_data['ready_course']
    exams = get_upcoming_exams(course)
    exams = [exam for exam in exams if not exam.is_child()]
    return render_to_response('right_nav.html',
        {
            'common_page_data':   request.common_page_data,
            'assignments':        exams, #setting to True to get consistent, ok to show anon users links
        },
    context_instance=RequestContext(request))


@auth_view_wrapper
@require_POST
@csrf_protect
def unenroll(request, course_prefix, course_suffix):
    
    try:
        course = Course.objects.get(handle=course_prefix+'--'+course_suffix, mode='ready')
    except Course.DoesNotExist:
        raise Http404
            
    student_group = Group.objects.get(id=course.student_group_id)
    student_group.user_set.remove(request.user)
    
    return redirect(request.META['HTTP_REFERER'])



def get_full_contentsection_list(course, filter_children=True):
    """Return a list of ContentSections with material and a list of all material for this course."""

    level2_items = {}                            # level2_items gets filled lazily
    groups_with_children = set([])               # ContentGroups that have level2 items
    
    def filter_level2_contentgroup_entries(t, i):
        if level2_items.has_key(t): return i not in level2_items[t]
        else:                       return True

    desired_item = lambda t,i: True
    if filter_children:
        desired_item = filter_level2_contentgroup_entries
        # There's some django magic about using QuerySet in this position that
        # make 1 query instead of hundreds
        cg2_list = ContentGroup.objects.filter(course=course, level=2)
        for cg2 in cg2_list:
            cg2_t = cg2.get_content_type()
            #Using a pattern where we access the foreignkey ids directly from the
            #ContentGroup object. "cg.exam_id".  The bad way is to
            #do something like "cg.exam.id", which dereferences the foreignkey
            #as a select
            level2_items.setdefault(cg2_t, set([])).add(cg2.get_content_id())
            groups_with_children.add(cg2.group_id)

    parent_cgos = list(ContentGroup.objects.filter(course=course, level=1, group_id__in=groups_with_children))
    parents_as_tuple = set(map(lambda cgo: (cgo.get_content_type(), cgo.get_content_id()), parent_cgos))

    tagged_object_lists = {}
    for tag, cls in ContentGroup.groupable_types.iteritems():
        tagged_object_lists[tag] = cls.objects.getByCourse(course=course)
    
    full_index_list = {}
    full_contentsection_list=[]

    for contentsection in ContentSection.objects.getByCourse(course=course):
        index_list = []
        cs_id      = contentsection.id
        for tag in ContentGroup.groupable_types.keys():
            for obj in [o for o in tagged_object_lists[tag] if o.section_id == cs_id]:
                if desired_item(tag, obj.id):
                    is_parent = (tag, obj.id) in parents_as_tuple
                    if tag == 'file':
                        index_list.append({ 'type': tag, 'ref': obj, 'icon': obj.get_icon_type(), 'is_parent':is_parent })
                    else:
                        index_list.append({ 'type': tag, 'ref': obj, 'icon': None, 'is_parent':is_parent })

        index_list = sorted(index_list, cmp=lambda x,y: -1 if x['ref'].index < y['ref'].index else +1)
        # NB: B/c of for loops above, index_list is sorted by index, then by type tag
        full_index_list[cs_id] = index_list
        if index_list:                           # don't show empty sections
            full_contentsection_list.append(contentsection)
    return full_contentsection_list, full_index_list


########NEW FILE########
__FILENAME__ = database_example
import os

# Don't forget to actually create the database named NAME
DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.mysql', # Add 'postgresql_psycopg2', 'postgresql', 'mysql', 'sqlite3' or 'oracle'.
        'NAME': '',                      # Or path to database file if using sqlite3.
        'USER': '',                      # Not used with sqlite3.
        'PASSWORD': '',                  # Not used with sqlite3.
        'HOST': '',                      # Set to empty string for localhost. Not used with sqlite3.
        'PORT': '',                      # Set to empty string for default. Not used with sqlite3.
    },
    'celery': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': 'celerydb.sqlite',
    },
    # uncomment this section if you have a read-only replica that you'd like
    # to use for reporting.
    #'readonly': {
    #    'ENGINE': 'django.db.backends.mysql', 
    #    'NAME': '',                      
    #    'USER': '',                      
    #    'PASSWORD': '',                  
    #    'HOST': '',                      
    #    'PORT': '',                      
    # },
}

SECRET_KEY = ''

# Set PRODUCTION to True so we don't show stackdumps on errors
PRODUCTION = False
# Set this this to true if you want to show our maint page as root
MAINTENANCE_LANDING_PAGE = False

PROJECT_ROOT = os.path.abspath(os.path.join(os.path.dirname(__file__)))

LOGGING_DIR = os.path.join(PROJECT_ROOT, "logs")
LOCAL_CACHE_LOCATION = os.path.join(PROJECT_ROOT, "cache-default")
STATIC_ROOT = os.path.join(PROJECT_ROOT, "static")

# The instance is the group of servers correspond to a C2G stack.  Some good 
# values for this are:
#    "your_name" if you want to stay isolated (thi is the default if missing)
#    "dev" to use the stable dev network util server
#    "stage" or "prod" for something in produciton -- are you sure you want to do that?
INSTANCE="dev"

# Information about this site. Note that the short name here is used to
# build paths to site assets, so is specific and case-sensitive.
SITE_ID = 1
SITE_NAME_SHORT = 'Stanford'
SITE_NAME_LONG = 'Stanford University'
SITE_TITLE = 'Stanford Class2Go'
SITE_URL = 'https://class2go.stanford.edu'

# Put your name and email address here, so Django serious errors can come to you
# the trailing comma after the list is important so Python correctly interprets 
# this as a list of lists
ADMINS = (
        ('Class2Go Dev', "YOURNAME@stanford.edu"),
        )

# EMAIL ERROR PINGS
ERROR_SNIPPET_EMAILS = ['YOURNAME@stanford.edu',]

#########
# S3 Storage configuration. Read both stanzas so you understand what these do.
#########
# For using S3 Storage, specify these with real settings. The ACCESS virables
# are used for authorization to S3 and should be kept secret.
AWS_ACCESS_KEY_ID = 'AAAAAAAAAAAAAAAAAAAA'
AWS_SECRET_ACCESS_KEY = 'BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB'
##
# There are three buckets: STORAGE, SECURE_STORAGE, and RELEASE. STORAGE is
# used for storing public assets and instructor-uploaded material, such as
# downloadable files. SECURE_STORAGE should be configured with a more limited
# set of permissions (allowing download by instructors and not the general
# public), and is used for distributing things like student performance
# reports. RELEASE should be configured with the most limited set of
# permissions, only allowing dowload only from your production (and optionally
# developer) credentials. It is used for the distribution of materials used in
# release and deployment, like custom binaries, secondary authorization tokens,
# etc.
AWS_STORAGE_BUCKET_NAME = 'my-dev-bucket'
AWS_SECURE_STORAGE_BUCKET_NAME = 'my-secure-dev-bucket'
AWS_RELEASE_BUCKET_NAME = 'my-release-dev-bucket'
# For using Local btorage, set all of these variables to 'local'. You also
# must specify where you want files locally written (see MEDIA_ROOT, below)
##
# AWS_ACCESS_KEY_ID = 'local'
# AWS_SECRET_ACCESS_KEY = 'local'
# AWS_STORAGE_BUCKET_NAME = 'local'
# AWS_SECURE_STORAGE_BUCKET_NAME = 'local'
# AWS_RELEASE_BUCKET_NAME = 'local'
# MEDIA_ROOT = '/opt/class2go/uploads'

#########
# Celery configuration
#########
# Celery must run for file uploads to work properly and video resizing to take place, etc.
# If you have the above values set to 'local', then set this value to True:
# CELERY_ALWAYS_EAGER = False

# Place where Kelvinator should do its work
# if not specified, then under /tmp, but on Amazon, want to use ephemeral storage
# which is /mnt for some reason
# Generally don't need to set this in dev
# KELVINATOR_WORKING_DIR = '/mnt'

# Place where we should spool uploads.  Django defaults to /tmp, which is fine on
# dev machines, but in AWS we want this to be on ephemeral storage
# FILE_UPLOAD_TEMP_DIR = '/mnt'

# This is if you want to change to a different logging directory than the default,
# which is '/var/log/django/'
# Please keep the trailing '/'
# LOGGING_DIR = '/my/logging/dir/'

PIAZZA_ENDPOINT = "https://piazza.com/basic_lti"
PIAZZA_KEY = "class2go"
PIAZZA_SECRET = "piazza_xxxxxxx"

# SMTP INFO for SES -- Amazon Simple Email Service $1 per 10K recipients
SES_SMTP_USER = "USER"
SES_SMTP_PASSWD = "PWD"

# class2go relies on Youtube pretty heavily. You need to have an API key 
# with youtube application integration enabled
YT_SERVICE_DEVELOPER_KEY = 'xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx'
GOOGLE_CLIENT_ID = "NNNNNNNNNNNN.apps.googleusercontent.com"
GOOGLE_CLIENT_SECRET = "YYYYYYYYYYYYYYYYYYYYYYYY"

# Specify this if you want to hit this endpoint to do interactive grading. 
# If left blank, grading has a fallback "localhost" mode with dummy answers.
# GRADER_ENDPOINT = "nnnnnnnnnnnnnnnnnnnn.us-west-2.elb.amazonaws.com"

########NEW FILE########
__FILENAME__ = create_stanford_institution
from django.core.management.base import BaseCommand, CommandError
from c2g.models import Institution

#from django.contrib.sites.models import Site


class Command(BaseCommand):
    help = "Run this command on initial setup of an instance to create the Stanford institution."

    def handle(self, *args, **options):
        institution = Institution(
                                  title = "Stanford",
                                  country = "USA",
                                  city = "Palo Alto",
                                  domains = "stanford.edu")
                                  
        institution.save()
        print "Institution created successfully"
            
########NEW FILE########
__FILENAME__ = pop_test_emails
from django.core.management.base import BaseCommand, CommandError
from c2g.models import Course
from django.contrib.auth.models import User, Group
from django.db.utils import IntegrityError
class Command(BaseCommand):
    help = "Adds some random students, all with valid emails, to test course to test sending a ton of emails"

    def handle(self, *args, **options):
        try:
            course = Course.objects.get(title='test course',mode='ready')
        except Course.DoesNotExist:
            self.stderr.write('No Test Course, so bailing out')
            return
        for (name,email) in [
                             #('sef','sefklon@gmail.com'),
                             ('jbau','jbau@stanford.edu'),
                             #('david','dcadams@stanford.edu'),
                             #('wescott','mwescott@stanford.edu'),
                             #('sherif','halawa@stanford.edu'),
                             #('jane','jinpa@stanford.edu')
                             ]:
            for i in range(100):
                try:
                    user=User(username=name+str(i), email=email)
                    user.save()
                except IntegrityError:
                    user=User.objects.get(username=name+str(i))
                    

                course.student_group.user_set.add(user)


########NEW FILE########
__FILENAME__ = update_site
import sys

from django.core.management.base import BaseCommand, CommandError
from django.contrib.sites.models import Site

class Command(BaseCommand):
    help = """Run this command instance setup to set the site record correctly.

The site record is used to create self-reference URLs. For example,
./manage.py update_site localhost:8888 'Test Instance' 
will make all local URLs reference http://localhost:8888 and the words 
'Test Instance' should appear in the browser titlebar.

The arguments default to 'class.stanford.edu' and 'Stanford Online', respectively.
    """

    def handle(self, *args, **options):

        domainname = 'class.stanford.edu'
        sitename = 'Stanford Online'
        if len(args) == 1:
            domainname = args[0]
        elif len(args) == 2:
            domainname = args[0]
            sitename = args[1]
        elif len(args) > 2:
            print "Error; I don't know what to do with so many arguments"
            sys.exit(1)

        try:
            site = Site.objects.get(id=1)
            site.domain = domainname
            site.name = sitename
            site.save()
            print "Site updated successfully: %s - %s" % (site.name, site.domain)
        except:
            print "Error; the site record was not found with id = 1"
            sys.exit(1)

        sys.exit(0)


########NEW FILE########
__FILENAME__ = db_populate
from django.core.management.base import BaseCommand, CommandError, make_option
from c2g.models import *
from django.contrib.auth.models import User,Group
import time
from datetime import datetime, timedelta
from random import randrange, shuffle, randint
from django.db import connection, transaction
import math

class Command(BaseCommand):
    help = "Populates the db with test development data. \n This command is <not> available on ready for obvious reasons. \n Settings can be made in file db_test_data/management/commands/db_populate.py"
    
    option_list = BaseCommand.option_list + (
        make_option('--massive',
            action='store_true',
            dest='massive',
            default=False,
            help='Populate the DB with mass-scale data (Warning: Can take a very long time to create the data on slower machines)'),
        )
        
    def handle(self, *args, **options):
        delete_db_data()
        
        if ('massive' in options) and (options['massive']):
            # Don't create fewer than 4 profs, 4 tas, 4 readonly tas, and 40 students
            user_counts = {'num_professors':10, 'num_tas':10, 'num_readonly_tas':10, 'num_students':400}
            content_counts = {'num_massive_courses':1, 'num_sections_per_course':2, 'num_videos_per_section':5}
        else:
            user_counts = {'num_professors':4, 'num_tas':4, 'num_readonly_tas':4, 'num_students':40}
            content_counts = {'num_massive_courses':0, 'num_sections_per_course':2, 'num_videos_per_section':5}
            
        
        # Create users
        print "      Creating users \r"
        print "      ----------------- \r"
        users = create_users(user_counts)

        # Create institutions
        institutions = create_institutions()

        # Create courses
        create_courses(institutions, users, content_counts)
        
        print "      ----------------------------- \r"
        print "      Successfully populated the db \r"


def delete_db_data():

    #Since all tables are foreign key related, this deletes all data in all c2g tables
    Institution.objects.all().delete()

    # Nuke the data that we create below.  Order doesn't seem to matter.
    Course.objects.all().delete()
    AdditionalPage.objects.all().delete()
    Announcement.objects.all().delete()
    ContentSection.objects.all().delete()
    ProblemSet.objects.all().delete()
    Video.objects.all().delete()
    ProblemSetToExercise.objects.all().delete()
    Exercise.objects.all().delete()
    ProblemActivity.objects.all().delete()
    NewsEvent.objects.all().delete()

    PageVisitLog.objects.all().delete()
    
    Group.objects.all().delete()
    User.objects.all().delete()

    #reset auto-increment counters
    cursor = connection.cursor()

    # Data modifying operation - commit required
    cursor.execute('alter table c2g_videos auto_increment = 1')


def create_users(user_counts):

    # Create professor accounts
    professors = []
    for i in range(user_counts['num_professors']):
        professors.append(User.objects.create_user('professor_' + str(i)))
        professors[i].set_password('class2go')
        professors[i].first_name = "Tess"
        professors[i].last_name = "Teacher"
        professors[i].email = "professor_%d@stanford.edu" % i
        professors[i].is_staff = 1
        professors[i].save()
        
        if user_counts['num_professors'] > 500 and (i%500 == 0):
            print "      Creating users >> Creating professors >> (%d/%d)complete\r" % (i,user_counts['num_professors'])

    # Create TA accounts
    tas = []
    for i in range(user_counts['num_tas']):
        tas.append(User.objects.create_user('ta_' + str(i)))
        tas[i].set_password('class2go')
        tas[i].first_name = "Alan"
        tas[i].last_name = "Assistant"
        tas[i].email = "ta_%d@stanford.edu" % i
        tas[i].save()
        
        if user_counts['num_tas'] > 500 and (i%500 == 0):
            print "      Creating users >> Creating tas >> (%d/%d)complete\r" % (i,user_counts['num_tas'])

    # Create Readonly-TA accounts
    readonly_tas = []
    for i in range(user_counts['num_readonly_tas']):
        readonly_tas.append(User.objects.create_user('readonly_ta_' + str(i)))
        readonly_tas[i].set_password('class2go')
        readonly_tas[i].first_name = "Roger"
        readonly_tas[i].last_name = "Readonly"
        readonly_tas[i].email = "readonly_ta_%d@stanford.edu" % i
        readonly_tas[i].save()
        
        if user_counts['num_readonly_tas'] > 500 and (i%500 == 0):
            print "      Creating users >> Creating read-only tas >> (%d/%d)complete\r" % (i,user_counts['num_readonly_tas'])

    # Create student accounts
    students = []
    for i in range(user_counts['num_students']):
        students.append(User.objects.create_user('student_' + str(i)))
        students[i].set_password('class2go')
        students[i].first_name = "Sarah"
        students[i].last_name = "Student"
        students[i].email = "student_%d@stanford.edu" % i
        students[i].save()
        
        if user_counts['num_students'] > 500 and (i%500 == 0):
            print "      Creating users >> Creating students >> (%d/%d)complete\r" % (i,user_counts['num_students'])

    return {'professors':professors, 'tas':tas, 'readonly_tas':readonly_tas, 'students':students}


def create_institutions():
    institutions = []
    for n in range(1):
        title = "Institution_" + str(n)
        country = 'USA'
        city = 'Palo Alto'
        domains = 'stanford.edu'

        institution =Institution(
            title = title,
            country = country,
            city = city,
            domains = domains
        )
        institution.save()

        institutions.append(institution)

    return institutions

def create_courses(institutions,users,content_counts):
        
    # NLP Course
    data = {
        'institution': institutions[0],
        'title': 'Natural Language Processing',
        'description': 'Natural language processing is the technology for dealing with our most ubiquitous product: human language, as it appears in emails, web pages, tweets, product descriptions, newspaper stories, social media, and scientific articles, in thousands of languages and varieties. In the past decade, successful natural language processing applications have become part of our everyday experience, from spelling and grammar correction in word processors to machine translation on the web, from email spam detection to automatic question answering, from detecting people\'s opinions about products or services to extracting appointments from your email. In this class, you\'ll learn the fundamental algorithms and mathematical models for human alanguage processing and how you can use them to solve practical problems in dealing with language data wherever you encounter it.',
        'term': 'Fall',
        'year': 2012,
        'calendar_start': datetime(2013, 7, 27),
        'calendar_end': datetime(2013, 8, 12),
        'contact': 'nlp@123.com',
        'list_publicly': 1,
        'handle':'networking--Fall2012',
        'members': users,
    }
    print "      Creating networking course\r"
    print "      ------------------- \r"
    create_course_nlp(data, {'professors':users['professors'][0:3],'tas':users['tas'][0:3],'readonly_tas':users['readonly_tas'][0:3],'students':users['students'][0:39]})

    data = {
            'institution': institutions[0],
            'title': 'Introductory Cryptography',
            'description': 'Cryptography is an indispensable tool for protecting information in computer systems. This course explains the inner workings of cryptographic primitives and how to correctly use them. Students will learn how to reason about the security of cryptographic constructions and how to apply this knowledge to real-world applications. The course begins with a detailed discussion of how two parties who have a shared secret key can communicate securely when a powerful adversary eavesdrops and tampers with traffic. We will examine many deployed protocols and analyze mistakes in existing systems. The second half of the course discusses public-key techniques that let two or more parties generate a shared secret key. We will cover the relevant number theory and discuss public-key encryption, digital signatures, and authentication protocols. Towards the end of the course we will cover more advanced topics such as zero-knowledge, distributed protocols such as secure auctions, and a number of privacy mechanisms. Throughout the course students will be exposed to many exciting open problems in the field.The course will include written homeworks and programming labs. The course is self-contained, however it will be helpful to have a basic understanding of discrete probability theory.',
            'term': 'Fall',
            'year': 2012,
            'calendar_start': datetime(2013, 7, 27),
            'calendar_end': datetime(2013, 8, 12),
            'contact': 'crypto@123.com',
            'list_publicly': 1,
            'handle':'crypto--Fall2012',
            'members': users,
    }
    print "      Creating crypto course\r"
    print "      ---------------------- \r"
    create_course_crypto(data, {'professors':users['professors'][0:3],'tas':users['tas'][0:3],'readonly_tas':users['readonly_tas'][0:3],'students':users['students'][0:39]})
    
    # Massive: Create num_massive_courses massive courses
    for i in range(content_counts['num_massive_courses']):
        print "      Creating massive course %d of %d \r" % (i,content_counts['num_massive_courses'])
        print "      ------------------------------------- \r"
        create_course_massive(i, users, institutions, content_counts)
        
def create_course_massive(index, users, institutions, content_counts):
    
    terms = ["Fall", "Winter", "Spring", "Summer"]
    term_index = 0
    term = terms[term_index]
    
    year = 2012
    
    if term == "Fall":
        start_date = datetime(year, 9, randrange(1,21))
        end_date = datetime(year, 12, randrange(15,31))
    elif term == "Winter":
        start_date = datetime(year, 1, randrange(1,21))
        end_date = datetime(year, 3, randrange(15,31))
    elif term == "Spring":
        start_date = datetime(year, 4, randrange(1,21))
        end_date = datetime(year, 6, randrange(1,10))
    elif term == "Summer":
        start_date = datetime(year, 6, randrange(21,30))
        end_date = datetime(year, 9, randrange(1,4))

    # Create the course instances
    print "      Creating massive course %d of %d >> Creating course instances \r" % (index,content_counts['num_massive_courses'])
    student_group = Group.objects.create(name="Student Group for massive course " + " %d" % index)
    instructor_group = Group.objects.create(name="Instructor Group for massive course " + " %d" % index)
    tas_group = Group.objects.create(name="TAS Group for massive course " + " %d" % index)
    readonly_tas_group = Group.objects.create(name="Readonly TAS Group for massive course " + " %d" % index)
    
    course = Course(
            institution = institutions[0],
            student_group = student_group,
            instructor_group = instructor_group,
            tas_group = tas_group,
            readonly_tas_group = readonly_tas_group,
            title = "Massive Course %d" % index,
            description = "Massive course %d description" % index,
            term = term,
            year = year,
            calendar_start = start_date,
            calendar_end = end_date,
            list_publicly = 1,
            mode='draft',
            handle = "course"+str(index) + "--" + term + str(year)
        )

    course.save()
    course.create_ready_instance()
    
    # Add random users to course
    print "      Creating massive course %d of %d >> Adding Users >> Professors \r" % (index,content_counts['num_massive_courses'])
    for i in range(len(users['professors'])):
        instructor_group.user_set.add(users['professors'][i])
    
    print "      Creating massive course %d of %d >> Adding Users >> TAs \r" % (index,content_counts['num_massive_courses'])
    for i in range(len(users['tas'])):
        tas_group.user_set.add(users['tas'][i])
    
    print "      Creating massive course %d of %d >> Adding Users >> Read-only TAs \r" % (index,content_counts['num_massive_courses'])
    for i in range(len(users['readonly_tas'])):
        readonly_tas_group.user_set.add(users['readonly_tas'][i])
    
    print "      Creating massive course %d of %d >> Adding Users >> Students \r" % (index,content_counts['num_massive_courses'])  
    num_students = len(users['students'])
    for i in range(num_students):
        student_group.user_set.add(users['students'][i])
        if num_students > 500 and i%500 == 0:
            print "      Creating massive course %d of %d >> Adding Users >> Students >> (%d/%d) complete \r" % (index,content_counts['num_massive_courses'],i,num_students)
    
    print "      Creating massive course %d of %d >>  Adding course info pages\r" % (index,content_counts['num_massive_courses'])
    
    # Create atrifical forum visit data
    create_forum_visit_log_entries(course.image, users['students'])
    
    # Create the overview page
    str_ = ""
    for i in range(1000):
        str_ += "Overview for massive course %d" % index
        
    op = AdditionalPage(
        course=course,
        menu_slug='course_info',
        title="Overview for massive course %d" % index,
        description=str_,
        slug='overview',
        index=0,
        mode='draft',
    )
    op.save()
    op.create_ready_instance()
    
    # Create between 5 and 15 other course info menu pages
    num_pages = randrange(5,15)
    for i in range(num_pages):
        str_ = ""
        for j in range(1000):
            str_ += "Page %d for massive course %d" % (i, index)
            
        p = AdditionalPage(
            course=course,
            menu_slug='course_info',
            title= "Page %d for massive course %d" % (i, index),
            description=str_,
            slug='course_%d_page_%d' % (index, i),
            index=i+1,
            mode='draft',
        )
        p.save()
        p.create_ready_instance()
        
    # Add 20 announcements
    print "      Creating massive course %d of %d >>  Adding announcements\r" % (index,content_counts['num_massive_courses'])
    for i in range(20):
        str_ = ""
        for j in range(100):
            str_ += "Announcement %d for Course %d" % (i, index)
        
        a = Announcement(
            owner = course.instructor_group.user_set.all()[0],
            title = "Announcement %d for Course %d" % (i, index),
            description = str_,
            course = course
        )
        a.save()
        a.create_ready_instance()
        
        
    # Add exercises
    print "      Creating massive course %d of %d >>  Adding exercises\r" % (index,content_counts['num_massive_courses'])
    exercise1 = Exercise(
        fileName = "P1_Levenshtein.html",
        handle = "course"+str(index) + "--" + term + str(year)
    )
    exercise1.save()
    
    exercise2 = Exercise(
        fileName = "P1_Porter.html",
        handle = "course"+str(index) + "--" + term + str(year)
    )
    exercise2.save()
    
    exercise3 = Exercise(
        fileName = "P1_Regexp.html",
        handle = "course"+str(index) + "--" + term + str(year)
    )
    exercise3.save()
    
    exercise4 = Exercise(
        fileName = "P1_Tokenize.html",
        handle = "course"+str(index) + "--" + term + str(year)
    )
    exercise4.save()
    
    exercises = [exercise1, exercise2, exercise3, exercise4]
    exercise_answer_models = [
        {
            'answers': ['a','b','c','d'],
            'correct_answer': 'b',
            'answer_probabilities':[0.1,0.4,0.3,0.2],
            'mean_answer_time':20,
            'max_number_of_attempts': 5,
        },
        {
            'answers': ['1','2','3','4','5','6','7','8','9','10'],
            'correct_answer': '6',
            'answer_probabilities':[0.1,0.1,0.1,0.1,0.1,0.1,0.1,0.1,0.1,0.1],
            'mean_answer_time':30,
            'max_number_of_attempts': 2,
        },
        {
            'answers': ['1','2','3','4','5','6','7','8','9','10'],
            'correct_answer': '5',
            'answer_probabilities':[0.05,0.05,0.05,0.05,0.05,0.5,0.05,0.1,0.05,0.05],
            'mean_answer_time':25,
            'max_number_of_attempts': 6,
        },
        {
            'answers': ['a','b','c','d'],
            'correct_answer': 'c',
            'answer_probabilities':[0.1,0.5,0.2,0.2],
            'mean_answer_time':20,
            'max_number_of_attempts': 5,
        },
    ]
    
    
    # Sections, each with 5 videos, 1 problem set, and 1 static page
    yt_ids = ['BJiVRIPVNxU','dBVlwb15SBM','zJSqHRuD2C4','WMC3AjgYf3A','xOfEYI61f3k','Gh63CeMzav8','LRq7om7vMEc']
    durations = [722, 686, 366, 866, 426, 355, 522]
    print "      Creating massive course %d of %d >>  Adding content sections\r" % (index,content_counts['num_massive_courses'])
    
    for i in range(content_counts['num_sections_per_course']):
        draft_section = ContentSection(course=course, title="Section %d in Course %d" % (i, index), index=i, mode='draft')
        draft_section.save()
        draft_section.create_ready_instance()
        
        # Create 5 videos
        yt_index = randrange(0,6)
        for j in range(5):
            print "      Creating massive course %d of %d >>  Adding content section %d of %d >> Adding Video %d of 5\r" % (index,content_counts['num_massive_courses'], i, content_counts['num_sections_per_course'], j)
            print "      Creating massive course %d of %d >>  Adding content section %d of %d >> Adding Video %d of 5 >> Creating video objects\r" % (index,content_counts['num_massive_courses'], i, content_counts['num_sections_per_course'], j)
            video = Video(
                course = course,
                section = draft_section,
                title = "Video " + str(j) + " in Section " + str(i) + " in Course " +  str(index),
                description = "Description for Video " + str(j) + " in Section " + str(i) + " in Course " +  str(index),
                type = "youtube",
                url = yt_ids[yt_index],
                duration = durations[yt_index],
                slug = "section_" + str(i) + "_video_" + str(j),
                mode = 'draft',
                handle = "course"+str(index) + "--" + term + str(year),
                index = j,
            )
            video.save()
            video.create_ready_instance()
            prod = video.image; 
            r = randrange(0,100)
            if r < 33: prod.live_datetime = datetime.now()-timedelta(days=10);
            elif r < 67: prod.live_datetime = datetime.now()-timedelta(days=20);
            else: prod.live_datetime = datetime.now()+timedelta(days=20);
            prod.save();
            
            # Add Exercises to some of the videos
            if j >= 2:
                print "      Creating massive course %d of %d >>  Adding content section %d of %d >> Adding Video %d of 5 >> Adding exercises to video\r" % (index,content_counts['num_massive_courses'], i, content_counts['num_sections_per_course'], j)
                v2es = []
                for exercise in exercises:
                    v2e = VideoToExercise(video=video, exercise=exercise, video_time=randrange(10,durations[yt_index]-10), is_deleted=0, mode='draft')
                    v2e.save()
                    v2e = VideoToExercise(video=video.image, exercise=exercise, video_time=randrange(10,durations[yt_index]-10), is_deleted=0, mode='ready')
                    v2e.save()
                    v2es.append(v2e)
                
                # Create view progress and exercise attempts for 75% of the users
                stud_index = 0
                for student in course.student_group.user_set.all():
                    if randrange(0,3) > 0:
                        view_activity = VideoActivity(student = student, video = video.image, course = course.image, start_seconds = randrange(0,durations[yt_index]))
                        view_activity.save()
                        
                        create_video_view_log_entry(video=prod, user=student)
                        if randrange(0,4) > 3:
                            create_video_view_log_entry(video=prod, user=student)
                        
                        for k in range(len(v2es)):
                            if v2es[k].video_time < view_activity.start_seconds:
                                correct = False
                                attempts_exhausted = False
                                attempt_number = 0
                                while not (correct or attempts_exhausted):
                                    attempt = create_attempt(exercise_answer_models[k])
                                    problem_activity = ProblemActivity(
                                        student = student,
                                        video_to_exercise = v2es[k],
                                        attempt_content = attempt['attempt_content'],
                                        time_taken = attempt['time_taken'],
                                        complete = attempt['correct'],
                                    )
                                    problem_activity.save()
                                    correct = attempt['correct']
                                    attempt_number += 1
                                    attempts_exhausted = attempt_number >= exercise_answer_models[k]['max_number_of_attempts']
                                
                    stud_index += 1
                    if num_students > 500 and stud_index%500 == 0:
                        print "      Creating massive course %d of %d >>  Adding content section %d of %d >> Adding Video %d of 5 >> Adding student video activity (%d/%d)\r" % (index,content_counts['num_massive_courses'], i, content_counts['num_sections_per_course'], j, stud_index, num_students)
            
            
        # Create 1 static page
        print "      Creating massive course %d of %d >>  Adding content section %d of %d >> Adding 1 static page\r" % (index,content_counts['num_massive_courses'], i, content_counts['num_sections_per_course'])
        str_ = ""
        for j in range(1000):
            str_ += "Page for section %d in massive course %d" % (i, index)
            
        p = AdditionalPage(
            course=course,
            section = draft_section,
            title= "Page for section %d in massive course %d" % (i, index),
            description=str_,
            slug='course_%d_section_%d_page' % (index, i),
            index=6,
            mode='draft',
        )
        p.save()
        p.create_ready_instance()
        prod = p.image;
        r = randrange(0,100)
        if r < 33: prod.live_datetime = datetime.now()-timedelta(days=10);
        elif r < 67: prod.live_datetime = datetime.now()-timedelta(days=21);
        else: prod.live_datetime = datetime.now()+timedelta(days=101);
        prod.save()
        
        for student in course.student_group.user_set.all():
            create_additional_page_view_log_entry(additional_page=prod, user=student)
            if randrange(0,4) > 3:
                create_additional_page_view_log_entry(additional_page=prod, user=student)
                    
        # Create 1 problem set with student activity
        print "      Creating massive course %d of %d >>  Adding content section %d of %d >> Adding problem set 1\r" % (index,content_counts['num_massive_courses'], i, content_counts['num_sections_per_course'])
        ps = ProblemSet(
            course = course,
            section = draft_section,
            slug = "course_"+str(index)+"_section_"+str(i)+"_ps_1",
            title = "Problem set 1 for section %d" % i,
            description = "PS Description",
            due_date = datetime(2012, 9,19),
            grace_period = datetime(2012, 9,19),
            partial_credit_deadline = datetime(2012, 9,19),
            assessment_type = 'summative',
            late_penalty = 30,
            submissions_permitted = 3,
            resubmission_penalty = 30,
            randomize = False,
        )
        ps.save()
        ps.create_ready_instance()
        prod = ps.image;
        
        r = randrange(0,100)
        if r < 33: prod.live_datetime = datetime.now()-timedelta(days=10);
        elif r < 67: prod.live_datetime = datetime.now()-timedelta(days=19);
        else: prod.live_datetime = datetime.now()+timedelta(days=99);
        prod.save()
        
        for k in range(len(exercises)):
            ps2e = ProblemSetToExercise(problemSet=ps, exercise=exercises[k], number=k, is_deleted=0, mode='draft')
            ps2e.save()
            ps2e = ProblemSetToExercise(problemSet=ps.image, exercise=exercises[k], number=k, is_deleted=0, mode='ready')
            ps2e.save()
            
            stud_index = 0
            for student in course.student_group.user_set.all():
                if randrange(0,3) > 0:
                    correct = False
                    attempts_exhausted = False
                    attempt_number = 0
                    while not (correct or attempts_exhausted):
                        attempt = create_attempt(exercise_answer_models[k])
                        problem_activity = ProblemActivity(
                            student = student,
                            problemset_to_exercise = ps2e,
                            attempt_content = attempt['attempt_content'],
                            time_taken = attempt['time_taken'],
                            complete = attempt['correct'],
                        )
                        problem_activity.save()
                        correct = attempt['correct']
                        attempt_number += 1
                        attempts_exhausted = attempt_number >= exercise_answer_models[k]['max_number_of_attempts']
                    
                stud_index += 1
                if num_students > 500 and stud_index%500 == 0:
                    print "      Creating massive course %d of %d >>  Adding content section %d of %d >> Adding 1 problem set >> Exercise %d of 4 >> Student activity (%d/%d)\r" % (index,content_counts['num_massive_courses'], i, content_counts['num_sections_per_course'], k, stud_index, num_students)
            
        for student in course.student_group.user_set.all():
            create_problemset_view_log_entry(problemset=prod, user=student)
            if randrange(0,4) > 3:
                create_problemset_view_log_entry(problemset=prod, user=student)
                
        # Create 1 problem set with no student activity
        print "      Creating massive course %d of %d >>  Adding content section %d of %d >> Adding problem set 2\r" % (index,content_counts['num_massive_courses'], i, content_counts['num_sections_per_course'])
        ps = ProblemSet(
            course = course,
            section = draft_section,
            slug = "course_"+str(index)+"_section_"+str(i)+"_ps_2",
            title = "Problem set 2 for section %d" % i,
            description = "PS Description 2",
            due_date = datetime(2012, 9,19),
            grace_period = datetime(2012, 9,19),
            partial_credit_deadline = datetime(2012, 9,19),
            assessment_type = 'summative',
            late_penalty = 30,
            submissions_permitted = 3,
            resubmission_penalty = 30,
            randomize = False,
        )
        ps.save()
        ps.create_ready_instance()
        prod = ps.image;
        r = randrange(0,100)
        prod.live_datetime = datetime.now()-timedelta(days=10);
        prod.save()

def create_attempt(em):
    attempt = {}
    attempt['time_taken'] = randrange(math.floor(em['mean_answer_time']/2),math.floor(em['mean_answer_time']*1.5))
    cmf = [i*100 for i in em['answer_probabilities']]
    for i in range(1,len(cmf)): cmf[i] = cmf[i]+cmf[i-1]
    r = randint(0,100)
    selected_answer_index = 0
    for i in range(1,len(cmf)):
        if cmf[i-1] < r and r <= cmf[i]: selected_answer_index = i
     
    attempt['attempt_content'] = em['answers'][selected_answer_index]
    if attempt['attempt_content'] == em['correct_answer']: attempt['correct'] = 1
    else: attempt['correct'] = 0
    
    return attempt
    

def create_course_nlp(data, users):
    # Create the user groups
    r = randrange(0,100000000)
    student_group = Group.objects.create(name="Student Group for class2go course " + data['handle'] + " %d" % r)
    instructor_group = Group.objects.create(name="Instructor Group for class2go course " + data['handle'] + " %d" % r)
    tas_group = Group.objects.create(name="TAS Group for class2go course " + data['handle'] + " %d" % r)
    readonly_tas_group = Group.objects.create(name="Readonly TAS Group for class2go course " + data['handle'] + " %d" % r)

    # Join users to their groups
    for professor in users['professors']:
        instructor_group.user_set.add(professor)
    for ta in users['tas']:
        tas_group.user_set.add(ta)
    for readonly_ta in users['readonly_tas']:
        readonly_tas_group.user_set.add(readonly_ta)
    for student in users['students']:
        student_group.user_set.add(student)

    # Create the course instances
    course = Course(institution = data['institution'],
            student_group = student_group,
            instructor_group = instructor_group,
            tas_group = tas_group,
            readonly_tas_group = readonly_tas_group,
            title = data['title'],
            description = data['description'],
            term = data['term'],
            year = data['year'],
            calendar_start = data['calendar_start'],
            calendar_end = data['calendar_end'],
            list_publicly = data['list_publicly'],
            mode='draft',
            handle = data['handle'])

    course.save()
    course.create_ready_instance()

    # Create the overview page
    op = AdditionalPage(
        course=course,
        menu_slug='course_info',
        title='Overview',
        description='Natural language processing is the technology for dealing with our most ubiquitous product: human language, as it appears in emails, web pages, tweets, product descriptions, newspaper stories, social media, and scientific articles, in thousands of languages and varieties. In the past decade, successful natural language processing applications have become part of our everyday experience, from spelling and grammar correction in word processors to machine translation on the web, from email spam detection to automatic question answering, from detecting people\'s opinions about products or services to extracting appointments from your email. In this class, you\'ll learn the fundamental algorithms and mathematical models for human alanguage processing and how you can use them to solve practical problems in dealing with language data wherever you encounter it.',
        slug='overview',
        index=0,
        mode='draft',
    )
    op.save()
    op.create_ready_instance()

    # Create announcements
    titles = [
        'Welcome to Natural Language Processing!',
        'Assignment 1 Out',
        'Friday Lecture for 7/13 cancelled',
        'Lecture Room Moved'
    ]
    descriptions = [
        'Welcome to the course! Check out the links to announcements, news events, assignments and grades.',
        'The first assignment has been posted.  Visit the assignments link to see the list of assignments and instructions for each assignment.  Be sure to check the additional pages for additional help. If you have any question email us at nlp@stanford.edu.',
        'Because this Friday is Friday the 13th, we do not want to take any chances so class is cancelled. Post any questions on the discussion forum if you have any questions',
        'We will be moving the lecture room to the medical school. Sorry for any inconviniences. For those of you without a bike, I am even more sorry. See you next lecture!',
    ]
    for i in range(4):
        create_announcement(course, titles[i], descriptions[i], i, users['professors'][0])

    # Create content sections
    titles = ['Introduction and Regular Expressions', 'Tokenizations and Minimum Edit Distance', 'N-Grams']
    sections = []
    for i in range(3):
        sections.append(create_content_section(course, titles[i], i))

    # Create videos
    dicts = [
        {'course':course, 'section':sections[0], 'title':'Course Introduction','description':'Intro video by Professor Dan Jurafsky and Chris Manning','type':'youtube','url':'BJiVRIPVNxU', 'duration':772, 'slug':'intro', 'index':0},
        {'course':course, 'section':sections[0], 'title':'Regular Expressions','description':'Video on Regular Expressions','type':'youtube','url':'dBVlwb15SBM', 'duration':686, 'slug':'regexp', 'index':1},
        {'course':course, 'section':sections[0], 'title':'Regular Expressions in Practical NLP','description':'Video on Regular Expressions in Practical NLP','type':'youtube','url':'zJSqHRuD2C4', 'duration':366, 'slug':'regexp_in_practical_nlp', 'index':2},
        {'course':course, 'section':sections[1], 'title':'Word Tokenization','description':'Video on Word Tokenization','type':'youtube','url':'WMC3AjgYf3A', 'duration':866, 'slug':'tokenization', 'index':0},
        {'course':course, 'section':sections[1], 'title':'Defining Minimum Edit Distance','description':'Video on Defining Minimum Edit Distance','type':'youtube','url':'xOfEYI61f3k', 'duration':426, 'slug':'min_edit_distance', 'index':1},
        {'course':course, 'section':sections[1], 'title':'Computing Minimum Edit Distance','description':'Video on Computing Minimum Edit Distance','type':'youtube','url':'Gh63CeMzav8', 'duration':355, 'slug':'computing_min_edit_distance', 'index':2},
        {'course':course, 'section':sections[2], 'title':'Introduction to N-grams','description':'Video on Introduction to N-grams','type':'youtube','url':'LRq7om7vMEc', 'duration':522, 'slug':'ngrams', 'index':0},
    ]

    for i in range(7):
        create_video(dicts[i], users)

    # Create problem sets
    #Kelvin - Stopping the creation of problem sets because there's no easy way to add a file and you
    #can already use the gui to add problem sets and pick your own exercises.
    data['course'] = course
    data['section'] = sections[0]
    data['index'] = 3
    data['slug']='P1'
    data['description'] = 'This is the first problem set. Practice some question on Regular Expressions. Remember to work your problems out on a separate piece of paper first because you only get one try on these. Miss on and you have a D!'
    data['title'] = 'Problem Set 1: Regular Expressions'
    data['path']='/networking/Fall2012/problemsets/P1/load_problem_set'
    data['due_date']='2012-07-20'
    data['partial_credit_deadline']='2012-09-27'
    data['grace_period']='2012-10-27'
    data['late_penalty']=1
    data['submissions_permitted']=0
    data['resubmission_penalty']=25
    data['assessment_type']='formative'
    
    pset1 = create_problem_set(data, users)

    data['course'] = course
    data['section'] = sections[1]
    data['index'] = 3
    data['slug']='P2'
    data['description'] = 'This problem set will test your knowledge of Joint Probability. Each question is worth one point and your final exam is worth 100 points so these questions are basically useless. But you have to do them because an incomplete assignment disallows you from passing the class. Have fun with this problem set!'
    data['title']='Problem Set 2: Joint Probability'
    data['path']='/networking/Fall2012/problemsets/P2/load_problem_set'
    data['due_date']='2012-07-27'
    data['partial_credit_deadline']='2012-08-03'
    data['grace_period']='2012-10-27'
    data['late_penalty']=1
    data['submissions_permitted']=0
    data['resubmission_penalty']=25
    data['assessment_type']='formative'

    # Removing second problem set
    # KELVIN TODO -- fix create_problem_set so it handles two problem sets referencing the same exercises
    # duplicate exercise entries screws other things up.
    #
    pset2 = create_problem_set(data, users)

    #Create exercises
    exercise1_1 = save_exercise(pset1, "xx_P1_Regexp.html", 1, 'networking--Fall2012', 'networking/Fall2012/exercises/xx_P1_Regexp.html')
    exercise1_2 = save_exercise(pset1, "xx_P1_Tokenize.html", 2, 'networking--Fall2012', 'networking/Fall2012/exercises/xx_P1_Tokenize.html')

    exercise2_1 = save_exercise(pset2, "xx_P2_Lexical1.html", 1, 'networking--Fall2012', 'networking/Fall2012/exercises/xx_P2_Lexical1.html')

    # Create news events
    titles = [
        'Assignment 1 solutions and grades released',
        'Assignment 2 now available',
        'New video available: Ngrams',
    ]
    for i in range(3):
        create_news_event(course,titles[i])

def create_c2g_team():
    for (username,email,first,last) in [('sefk_auto','sefklon@gmail.com','Sef','Kloninger'),
                                        ('jbau_auto','jbau@stanford.edu','Jason','Bau'),
                                        ('wescott_auto','wescott@cs.stanford.edu','Mike','Wescott'),
                                        ('dcadams_auto','dcadams@stanford.edu','David','Adams'),
                                        ('jinpa_auto','jmanning@cs.stanford.edu','Jane','Manning'),
                                        ('halawa_auto','halawa@stanford.edu','Sherif','Halawa'),]:
        user=User.objects.create_user(username)
        user.set_password('class2go')
        user.first_name = first
        user.last_name = last
        user.email = email
        user.save()


def create_course_crypto(data, users):
    create_c2g_team()
    user1=User.objects.get(username='sefk_auto');
    user2=User.objects.get(username='jbau_auto');
    user3=User.objects.get(username='wescott_auto');
    user4=User.objects.get(username='dcadams_auto');
    user5=User.objects.get(username='jinpa_auto');
    user6=User.objects.get(username='halawa_auto');

    # Create the user groups
    r = randrange(0,100000000)
    student_group = Group.objects.create(name="Student Group for class2go course " + data['handle'] + " %d" % r)
    instructor_group = Group.objects.create(name="Instructor Group for class2go course " + data['handle'] + " %d" % r)
    tas_group = Group.objects.create(name="TAS Group for class2go course " + data['handle'] + " %d" % r)
    readonly_tas_group = Group.objects.create(name="Readonly TAS Group for class2go course " + data['handle'] + " %d" % r)

    # Join users to their groups
    for professor in [user2]:
        instructor_group.user_set.add(professor)
    for ta in [user1, user3]:
        tas_group.user_set.add(ta)
    for readonly_ta in [user4]:
        readonly_tas_group.user_set.add(readonly_ta)
    for student in [user5, user6]:
        student_group.user_set.add(student)

    # Create the course instances
    course = Course(institution = data['institution'],
            student_group = student_group,
            instructor_group = instructor_group,
            tas_group = tas_group,
            readonly_tas_group = readonly_tas_group,
            title = data['title'],
            description = data['description'],
            term = data['term'],
            year = data['year'],
            calendar_start = data['calendar_start'],
            calendar_end = data['calendar_end'],
            list_publicly = data['list_publicly'],
            mode='draft',
            handle = data['handle'])

    course.save()
    course.create_ready_instance()

    # Create the overview page
    op = AdditionalPage(
        course=course,
        menu_slug='course_info',
        title='Overview',
        description='Cryptography is an indispensable tool for protecting information in computer systems. This course explains the inner workings of cryptographic primitives and how to correctly use them. Students will learn how to reason about the security of cryptographic constructions and how to apply this knowledge to real-world applications.',
        slug='overview',
        index=0,
        mode='draft',
    )
    op.save()
    op.create_ready_instance()

    # Create announcements
    titles = [
        'Welcome to Crypto 223!',
        'Crypto: Assignment 1 Still Not Out',
        'Crypto: There is no lecture room for this course',
        'Crypto: Yet another assignment.'
    ]
    descriptions = [
        'Crypto: Welcome to the Crypto course! Check out the links to announcements, news events, assignments and grades.',
        'Crypto: The first assignment has been posted.  Visit the assignments link to see the list of assignments and instructions for each assignment.  Be sure to check the additional pages for additional help. If you have any question email us at nlp@stanford.edu.',
        'Crypto: Because this Friday is Friday the 13th, we do not want to take any chances so class is cancelled. Post any questions on the discussion forum if you have any questions',
        'Crypto: We will be moving the lecture room to the medical school. Sorry for any inconviniences. For those of you without a bike, I am even more sorry. See you next lecture!',
    ]
    for i in range(4):
        create_announcement(course, titles[i], descriptions[i], i, users['professors'][0])

    # Create content sections
    titles = ['Crypto: Introduction and md5', 'Crypto: md5 collisions', 'Crypto: Why not to use md5 any more']
    sections = []
    for i in range(3):
        sections.append(create_content_section(course, titles[i], i))

    # Create videos
    dicts = [
        {'course':course, 'section':sections[0], 'title':'Crypto: Course Introduction','description':'Intro video by Professor Dan Jurafsky and Chris Manning','type':'youtube','url':'BJiVRIPVNxU', 'duration':772, 'slug':'intro', 'index':0},
        {'course':course, 'section':sections[0], 'title':'Crypto: Regular Expressions','description':'Video on Regular Expressions','type':'youtube','url':'dBVlwb15SBM', 'duration':686, 'slug':'regexp', 'index':1},
        {'course':course, 'section':sections[0], 'title':'Crypto: Regular Expressions in Practical NLP','description':'Video on Regular Expressions in Practical NLP','type':'youtube','url':'zJSqHRuD2C4', 'duration':366, 'slug':'regexp_in_practical_nlp', 'index':2},
        {'course':course, 'section':sections[1], 'title':'Crypto: Word Tokenization','description':'Video on Word Tokenization','type':'youtube','url':'WMC3AjgYf3A', 'duration':866, 'slug':'tokenization', 'index':0},
        {'course':course, 'section':sections[1], 'title':'Crypto: Defining Minimum Edit Distance','description':'Video on Defining Minimum Edit Distance','type':'youtube','url':'xOfEYI61f3k', 'duration':426, 'slug':'min_edit_distance', 'index':1},
        {'course':course, 'section':sections[1], 'title':'Crypto: Computing Minimum Edit Distance','description':'Video on Computing Minimum Edit Distance','type':'youtube','url':'Gh63CeMzav8', 'duration':355, 'slug':'computing_min_edit_distance', 'index':2},
        {'course':course, 'section':sections[2], 'title':'Crypto: Introduction to N-grams','description':'Video on Introduction to N-grams','type':'youtube','url':'LRq7om7vMEc', 'duration':522, 'slug':'ngrams', 'index':0},
    ]

    for i in range(7):
        create_video(dicts[i], users)

    # Create problem sets
    #Kelvin - Stopping the creation of problem sets because there's no easy way to add a file and you
    #can already use the gui to add problem sets and pick your own exercises.
    data['course'] = course
    data['section'] = sections[0]
    data['index'] = 3
    data['slug']='P1'
    data['description'] = 'Crypto: This is the first problem set. Practice some question on Regular Expressions. Remember to work your problems out on a separate piece of paper first because you only get one try on these. Miss on and you have a D!'
    data['title'] = 'Crypto: Problem Set 1: Regular Expressions'
    data['path']='/static/latestKhan/exercises/P1.html'
    data['due_date']='2012-07-20'
    data['partial_credit_deadline']='2012-07-27'
    data['grace_period']='2013-07-27'
    data['late_penalty'] = 5
    data['submissions_permitted'] = 0
    data['resubmission_penalty'] = 10

  #  pset1 = create_problem_set(data, users)

    data['course'] = course
    data['section'] = sections[1]
    data['index'] = 3
    data['slug']='P2'
    data['description'] = 'Crypto: This problem set will test your knowledge of Joint Probability. Each question is worth one point and your final exam is worth 100 points so these questions are basically useless. But you have to do them because an incomplete assignment disallows you from passing the class. Have fun with this problem set!'
    data['title']='Crypto: Problem Set 2: Joint Probability'
    data['path']='/static/latestKhan/exercises/P2.html'
    data['due_date']='2012-07-27'
    data['partial_credit_deadline']='2012-08-03'

    # Create news events
    titles = [
        'Crypto: Assignment 1 solutions and grades released',
        'Crypto: Assignment 2 now available',
        'Crypto: New video available: Ngrams',
    ]
    for i in range(3):
        create_news_event(course,titles[i])



def create_announcement(course, title, description, index, owner):
    announcement = Announcement(
        course=course,
        title = title,
        description = description,
        index = index,
        owner = owner,
        mode = 'draft',
    )
    announcement.save()
    announcement.create_ready_instance()

def create_content_section(course, title, index):
    section = ContentSection(
        course=course,
        title=title,
        index=index,
        mode='draft',
    )
    section.save()
    section.create_ready_instance()
    return section

def create_additional_page_view_log_entry(additional_page, user):  
        if (not additional_page.live_datetime) or additional_page.live_datetime > datetime.now(): return
        
        visit_datetime_range_end = int(time.time())
        #visit_datetime_range_start = visit_datetime_range_end - 3*24*3600
        visit_datetime_range_start = int(time.mktime(additional_page.live_datetime.timetuple()))
        
        if randrange(0,3) < 2:
            visit_log = PageVisitLog(course = additional_page.course, page_type = 'additional_page', object_id = str(additional_page.id), user = user)
            visit_log.save()
            visit_log.time_created = datetime.fromtimestamp(randrange(visit_datetime_range_start, visit_datetime_range_end))
            visit_log.save()
            if randrange(0,4) == 3:
                visit_log = PageVisitLog(course = additional_page.course, page_type = 'additional_page', object_id = str(additional_page.id), user = user)
                visit_log.save()
                visit_log.time_created = datetime.fromtimestamp(randrange(visit_datetime_range_start, visit_datetime_range_end))
                visit_log.save()
    
def create_video(data, users):
    # Also creates random progress for each user for each video, and random visits to the video page
    video = Video(
        course=data['course'],
        section=data['section'],
        title=data['title'],
        description=data['description'],
        type=data['type'],
        url=data['url'],
        duration=data['duration'],
        slug=data['slug'],
        file="default",
        index=data['index'],
        mode='draft',
        handle=data['course'].handle,
    )
    video.save()
    video.create_ready_instance()
    
    for user in users['students']:
        video_activity = VideoActivity(
            student=user,
            course=data['course'],
            video=video.image,
            start_seconds = randrange(0,int(video.duration))
        )
        video_activity.save()

def create_video_view_log_entry(video, user):
    if (not video.live_datetime) or video.live_datetime > datetime.now(): return
    
    visit_datetime_range_end = int(time.time())
    #visit_datetime_range_start = visit_datetime_range_end - 3*24*3600
    visit_datetime_range_start = int(time.mktime(video.live_datetime.timetuple()))
    
    if randrange(0,3) < 2:
        visit_log = PageVisitLog(course = video.course, page_type = 'video', object_id = str(video.id), user = user)
        visit_log.save()
        visit_log.time_created = datetime.fromtimestamp(randrange(visit_datetime_range_start, visit_datetime_range_end))
        visit_log.save()
        if randrange(0,4) == 3:
            visit_log = PageVisitLog(course = video.course, page_type = 'video', object_id = str(video.id), user = user)
            visit_log.save()
            visit_log.time_created = datetime.fromtimestamp(randrange(visit_datetime_range_start, visit_datetime_range_end))
            visit_log.save()

def create_forum_visit_log_entries(course, students):
    
    visit_datetime_range_end = int(time.time())
    visit_datetime_range_start = visit_datetime_range_end - 14*24*3600
    
    for stud in students:
        num_visits = randrange(0,8)
        for i in range(0,num_visits):
            log_entry = PageVisitLog(course = course, page_type = 'forum', user = stud)
            log_entry.save()
            log_entry.time_created = datetime.fromtimestamp(randrange(visit_datetime_range_start,visit_datetime_range_end))
            log_entry.save()
        

def create_news_event(course,title):
    event = NewsEvent(
        course=course.image,
        event=title,
    )
    event.save()
    return event


def create_problem_set(data, users):
    problem_set = ProblemSet(
        course = data['course'],
        section = data['section'],
        slug = data['slug'],
        title = data['title'],
        path = data['path'],
        due_date = data['due_date'],
        partial_credit_deadline = data['partial_credit_deadline'],
        grace_period = data['grace_period'],
        late_penalty = data['late_penalty'],
        submissions_permitted = data['submissions_permitted'],
        resubmission_penalty = data['resubmission_penalty'],
        description = data['description'],
        mode='draft',
        index=data['index'],
        assessment_type=data['assessment_type']
    )
    problem_set.save()
    prod_instance =  problem_set.create_ready_instance()

    problem_set.save()

    return problem_set

def create_problemset_view_log_entry(problemset, user):
    if (not problemset.live_datetime) or problemset.live_datetime > datetime.now(): return
    
    visit_datetime_range_end = int(time.time())
    #visit_datetime_range_start = visit_datetime_range_end - 3*24*3600
    visit_datetime_range_start = int(time.mktime(problemset.live_datetime.timetuple()))
    
    if randrange(0,3) < 2:
        visit_log = PageVisitLog(course = problemset.course, page_type = 'problemset', object_id = str(problemset.id), user = user)
        visit_log.save()
        visit_log.time_created = datetime.fromtimestamp(randrange(visit_datetime_range_start, visit_datetime_range_end))
        visit_log.save()
        if randrange(0,4) == 3:
            visit_log = PageVisitLog(course = problemset.course, page_type = 'problemset', object_id = str(problemset.id), user = user)
            visit_log.save()
            visit_log.time_created = datetime.fromtimestamp(randrange(visit_datetime_range_start, visit_datetime_range_end))
            visit_log.save()

def save_exercise(problemSet, fileName, number, handle, file):
    ex = Exercise(fileName = fileName)
    ex.file = file
    ex.handle = handle
    ex.save()

    psetToEx = ProblemSetToExercise(problemSet = problemSet,
                                    exercise = ex,
                                    number = number,
                                    mode = 'draft')
    psetToEx.save()
    #psetToEx.create_ready_instance()

    return ex

def save_problem(exercise, slug):
    problem = Problem(exercise = exercise,
                    slug = slug)

    problem.save()

########NEW FILE########
__FILENAME__ = models
from django.db import models

# Create your models here.

########NEW FILE########
__FILENAME__ = tests
"""
This file demonstrates writing tests using the unittest module. These will pass
when you run "manage.py test".

Replace this with more appropriate tests for your application.
"""

#from django.test import TestCase
#
#
#class SimpleTest(TestCase):
#    def test_basic_addition(self):
#        """
#        Tests that 1 + 1 always equals 2.
#        """
#        self.assertEqual(1 + 1, 2)


########NEW FILE########
__FILENAME__ = views
# Create your views here.

########NEW FILE########
__FILENAME__ = midware
import socket, sys, traceback, datetime, re
import settings
from django.core.mail import send_mail
from django import http
from django.shortcuts import Http404, render
from django.utils.log import getLogger

logger = getLogger('django.request')

mailto_list = getattr(settings, 'ERROR_SNIPPET_EMAILS', [])
from_addr = getattr(settings, 'DEFAULT_FROM_EMAIL', "admin@localhost")

class error_ping(object):
    """
    This is a middleware class that sends short email snippets per uncaught exception
    """
    def process_exception(self, request, exception):
        if isinstance(exception, Http404):
            return None
        username = request.user.username if request.user.is_authenticated() else "Anonymous"
        datestring = datetime.datetime.isoformat(datetime.datetime.now())
        user_agent = request.META.get('HTTP_USER_AGENT', 'NO USER AGENT FOUND')
        exc_info = sys.exc_info()
        (type, value, tb) = exc_info
        (path, lineno, exc, text) = traceback.extract_tb(tb)[-1]
        email_subj = "%s on %s" % (repr(exception), repr(socket.gethostname()))
        email_subj = re.sub(r'\n','',email_subj)
        email_msg = "User: %s\nTime: %s\nUser-agent: %s\nFile path %s:%d\nLine text: %s\n" % (username, datestring, user_agent, path, lineno,  text)
        send_mail(email_subj, email_msg, from_addr, mailto_list)
        del tb
    
        u = request.user
        if not settings.DEBUG and u.is_authenticated() and (u.userprofile.is_instructor_list() or u.userprofile.is_tas_list() or u.userprofile.is_readonly_tas_list()):
            #if on production
            #want to return a different 500 msg for course staff.
            #but because we return a response instead of None, django's
            #default error handling (including logging and stacktrace email)
            #won't be invoked, so we have to do that manually.
            
            #cribbing from django/core/handlers/base.py
            logger.error('Internal Server Error: %s', request.path,
                exc_info=exc_info,
                extra={
                'status_code': 500,
                'request': request
                }
            )
            
            return render(request, '500_staff.html')
                
        return None

########NEW FILE########
__FILENAME__ = models
from django.db import models

# Create your models here.

########NEW FILE########
__FILENAME__ = tests
"""
This file demonstrates writing tests using the unittest module. These will pass
when you run "manage.py test".

Replace this with more appropriate tests for your application.
"""

#from django.test import TestCase
#
#
#class SimpleTest(TestCase):
#    def test_basic_addition(self):
#        """
#        Tests that 1 + 1 always equals 2.
#        """
#        self.assertEqual(1 + 1, 2)

########NEW FILE########
__FILENAME__ = views
# Create your views here.

########NEW FILE########
__FILENAME__ = database_ci
import os

DB_NAME = 'c2g_jenkins_'
if os.environ.has_key('JOB_NAME'):
  DB_NAME += os.environ.get('JOB_NAME')

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.mysql', # Add 'postgresql_psycopg2', 'postgresql', 'mysql', 'sqlite3' or 'oracle'.
        'NAME': DB_NAME,                      # Or path to database file if using sqlite3.
        'USER': 'root',                      # Not used with sqlite3.
        'PASSWORD': 'root',                  # Not used with sqlite3.
        'HOST': '',                      # Set to empty string for localhost. Not used with sqlite3.
        'PORT': '',                      # Set to empty string for default. Not used with sqlite3.
    }
}

SECRET_KEY = 'jenkins-test-secret-class2go'

# When PRODUCTION=True we don't show stackdumps on errors
PRODUCTION = False
INSTANCE = "jenkins"

# Put your name and email address here, so Django serious errors can come to you
ADMINS = (
        ('Class2Go Jenkins', 'c2g-dev@cs.stanford.edu')
        )

# Secrets used for S3 - Sef
AWS_ACCESS_KEY_ID = 'local'
AWS_SECRET_ACCESS_KEY = 'local'
AWS_STORAGE_BUCKET_NAME = 'local'

MEDIA_ROOT = '/var/lib/jenkins/test-data-sandbox/uploads'

PIAZZA_ENDPOINT = "https://piazza.com/basic_lti"
PIAZZA_KEY = "class2go.testing"
PIAZZA_SECRET = "piazza_secret_test"

# SMTP INFO for SES -- Amazon Simple Email Service $1 per 10K recipients
SES_SMTP_USER = ''
SES_SMTP_PASSWD = ''

# old credentials

# new credentials
YT_SERVICE_DEVELOPER_KEY = ''
GOOGLE_CLIENT_ID = ''
GOOGLE_CLIENT_SECRET = ''

GRADER_ENDPOINT='http://example.com/test'


########NEW FILE########
__FILENAME__ = kelvinate
try:
    import Image as PILImportTest
except ImportError, msg:
    PILImportTest = False
try:
    import numpy as numpyImportTest
except ImportError, msg:
    numpyImportTest = False
from optparse import make_option

from django.conf import settings
from django.core.exceptions import MultipleObjectsReturned
from django.core.management.base import BaseCommand, CommandError

from c2g.models import Video
from c2g.util import is_storage_local
import kelvinator.tasks 


bucket=getattr(settings, 'AWS_STORAGE_BUCKET_NAME')
instance=getattr(settings, 'INSTANCE')


class Command(BaseCommand):
    args="<prefix> <suffix> <slug>"
    help="""    Extract thumbnail images for a video given its course info (prefix
    and suffix) and slug.  All parameters are case sensitive.  Will
    decide to run local or remote (queued) based on your AWS settings
    in your database.py file, unless you override.

    Arguments:
        prefix     course short name, like "nlp"
        suffix     the term, like "Fall2012"
        slug       URL parameter for the video, like "lecture1"
    """

    option_list = (
        make_option("-l", "--local", dest="force_local", action="store_true", default=False,
                    help="Force run locally"),
        make_option("-r", "--remote", dest="force_remote", action="store_true", default=False,
                    help="Force run remote (queued)"),
        make_option("-f", "--frames", dest="target_frames", default=2, type="int",
                    help="Target number of thumbnails per minute (default=2)"),
        make_option("-n", "--notify", dest="notify_addr",  
                    help="Send mail to address when done"),
    ) + BaseCommand.option_list
        
    def handle(self, *args, **options):
        if len(args) != 3:
            raise CommandError("Wrong number of arguments, %d instead of 3" % len(args))
        if options['force_local'] and options['force_remote']:
            raise CommandError("Can't run both local and remote")
        if not PILImportTest:
            raise CommandError("Can't continue without having 'PIL' installed")
        if not numpyImportTest:
            raise CommandError("Can't continue without having 'numpy' installed")
        arg_prefix=args[0]
        arg_suffix=args[1]
        handle=arg_prefix+"--"+arg_suffix
        slug=args[2]

        try:
            video = Video.objects.get(course__handle=handle, slug=slug, mode='draft')
        except MultipleObjectsReturned:
            print "Found multiple videos named \"%s\"" % slug
            return
        except Video.DoesNotExist:
            print "Video \"%s\" not found for handle \"%s\"" % (slug, handle)
            return

        if video.file.name == "default":
            print "Video slug \"%s\" doesn't have a file listed in S3 (name=\"default\")" % slug
            return
            
        if (is_storage_local() or options['force_local']) and not options['force_remote']:
            media_root = getattr(settings, 'MEDIA_ROOT')
            local_path = media_root + "/" + video.file.name
            kelvinator.tasks.kelvinate(local_path, options['target_frames'], options['notify_addr'])
            print "Kelvination complete: %s" % video.file.name
        else:
            kelvinator.tasks.kelvinate.delay(video.file.name, options['target_frames'], options['notify_addr'])
            print "Kelvination queued (%s): %s" % (instance, video.file.name)


########NEW FILE########
__FILENAME__ = resize
from optparse import make_option

from django.conf import settings
from django.core.exceptions import MultipleObjectsReturned
from django.core.management.base import BaseCommand, CommandError

from c2g.models import Video
from c2g.util import is_storage_local
import kelvinator.tasks 


bucket=getattr(settings, 'AWS_STORAGE_BUCKET_NAME')
instance=getattr(settings, 'INSTANCE')


class Command(BaseCommand):
    args="<size> <prefix> <suffix> <slug>"
    help="""    Convert the video to a smaller size and store result in a directory right alongside
    the video.

    Arguments:
        size       'large' or 'small'
        prefix     course short name, like "nlp"
        suffix     the term, like "Fall2012"
        slug       URL parameter for the video, like "lecture1"
    """

    option_list = (
        make_option("-l", "--local", dest="force_local", action="store_true", default=False,
                    help="Force run locally"),
        make_option("-r", "--remote", dest="force_remote", action="store_true", default=False,
                    help="Force run remote (queued)"),
        make_option("-n", "--notify", dest="notify_addr",  
                    help="Send mail to address when done"),
    ) + BaseCommand.option_list
        
    def handle(self, *args, **options):
        if len(args) != 4:
            raise CommandError("Wrong number of arguments, %d instead of 4" % len(args))
        if options['force_local'] and options['force_remote']:
            raise CommandError("Can't run both local and remote")
        target=args[0]
        arg_prefix=args[1]
        arg_suffix=args[2]
        handle=arg_prefix+"--"+arg_suffix
        slug=args[3]

        try:
            video = Video.objects.get(course__handle=handle, slug=slug, mode='draft')
        except MultipleObjectsReturned:
            print "Found multiple videos named \"%s\"" % slug
            return
        except Video.DoesNotExist:
            print "Video \"%s\" not found for handle \"%s\"" % (slug, handle)
            return

        if video.file.name == "default":
            print "Video slug \"%s\" doesn't have a file listed in S3 (name=\"default\")" % slug
            return
            
        # FIXME: after confirming this works, remove these lines
        #where = getattr(settings, 'AWS_ACCESS_KEY_ID', 'local')
        #if options['force_local']: 
        #    where='local'
        #if options['force_remote']:
        #    where='remote'
        #if where == 'local':
        if (is_storage_local() or options['force_local']) and not options['force_remote']:
            media_root = getattr(settings, 'MEDIA_ROOT')
            local_path = media_root + "/" + video.file.name
            kelvinator.tasks.resize(local_path, target, options['notify_addr'])
            print "Resize complete: %s" % video.file.name
        else:
            kelvinator.tasks.resize.delay(video.file.name, target, options['notify_addr'])
            print "Resize queued (%s): %s" % (instance, video.file.name)




########NEW FILE########
__FILENAME__ = videocheck
#!/usr/bin/env python
#
# note total_ordering makes this Python 2.7 dependent.
#

import os
import time
import urllib
import re
import boto
from functools import total_ordering

from django.core.management.base import BaseCommand, CommandError
from django.conf import settings
from optparse import make_option

import kelvinator.tasks
from c2g.models import Video
from c2g.readonly import use_readonly_database

class Command(BaseCommand):
    help = """    Audit videos to see what commands need to be run to fix them
    out.  Looks out for missing thumbnails or smaller video files.
    Does this by comparing contents of database to what is in S3.
    Note that this doesn't do any *semantic* validation, just checks
    for presence of files.  For example, doesn't tell if they are
    good thumbnails, or even the right thumbnails, just that there
    are thumbnails.

    Output is a set of commands to be run to fix it up.
    """

    option_list = (
        # Main options
        make_option("-c", "--class", dest="class",
            help="restrict to class name, any term eg \"cs144\""),
        make_option("-t", "--term", dest="term",
            help="restrict to term, any class eg \"Fall2012\""),

        make_option("-q", "--quiet", dest="quiet", action="store_true",
                    help="don't print helpful warnings or summary info (still prints video names)"), 
    ) + BaseCommand.option_list


    @use_readonly_database
    def handle(self, *args, **options):

        @total_ordering
        class FoundVideo(object):
            """
            Simple class to store info about videos.  For identity and comparison, we use
            {prefix,suffix,video_id}.  But the params() command prints slug, since that's
            what's used for further commands.
            """

            def __init__(self, prefix, suffix, video_id, slug=None, file=None):
                self.prefix = str(prefix)
                self.suffix = str(suffix)
                self.video_id = str(video_id)
                self.slug = str(slug)
                if file != None:
                    self.file = str(file)

            def __eq__(self, other):
                return self.prefix == other.prefix \
                    and self.suffix == other.suffix \
                    and self.video_id == other.video_id

            def __lt__(self, other):
                return self.prefix < other.prefix \
                    and self.suffix < other.suffix \
                    and self.video_id < self.video_id

            def __hash__(self):
                return hash((self.prefix, self.suffix, self.video_id))

            def __str__(self):
                return "%s %s %s %s %s" % (self.prefix, self.suffix, self.video_id, self.slug, self.file)

            def fixup_params(self):
                return "%s %s %s" % (self.prefix, self.suffix, self.slug)

        def searchDatabase(limitClass=None, limitTerm=None):
            """
            Search the database and return the set of FoundVideo objects that we should
            consider when looking for problems. Optionally limit by course or by term
            (or both).  Limits are case insensitive.
            """
            if limitClass != None and limitTerm != None:
                limit = "%s--%s" %(limitClass, limitTerm)
                videosInDB = Video.objects.filter(is_deleted=0,mode="draft", course__handle__iexact=limit)
            elif limitClass != None:
                limit = "%s--" % limitClass
                videosInDB = Video.objects.filter(is_deleted=0,mode="draft", course__handle__istartswith=limit)
            elif limitTerm != None:
                limit = "--%s" % limitTerm
                videosInDB = Video.objects.filter(is_deleted=0,mode="draft", course__handle__iendswith=limit)
            else:
                videosInDB = Video.objects.filter(is_deleted=0,mode="draft")

            foundVideos=set([])
            for v in videosInDB:
                fv = FoundVideo(v.course.prefix, v.course.suffix, v.id, v.slug, v.file)
                foundVideos.add(fv)

            return foundVideos


        def searchStorage(awsKey, awsSecret, awsBucket, limitClass=None, limitTerm=None):
            """
            Search the S3 storage bucket to see what videos are.  Returns a bunch of sets
            for what's found in there:
               videos
               manifests -- proxy for existence of thumbnails
               small -- small size 
               large -- large / normal size 
            FoundVideo objects.  Optionally limit by course name, term, or both.

            Contents of S3 look like this: 
               nlp/Fall2012/videos/39/intro.m4v
               nlp/Fall2012/videos/39/small/intro.m4v
               nlp/Fall2012/videos/39/large/intro.m4v
               nlp/Fall2012/videos/39/jpegs/manifest.txt
            """
            store_contents=[]
            if awsKey == "local" or awsSecret == "local":
                media_root = getattr(settings, 'MEDIA_ROOT')
                for (path, dirs, files) in os.walk(media_root):
                    for f in files:
                        p=os.path.join(path, f)
                        if p.startswith(media_root + "/"):
                            p = p[len(media_root)+1:]
                        store_contents.append(p)
            else:
                conn=boto.connect_s3(awsKey, awsSecret)
                bucket_conn=conn.get_bucket(awsBucket)
                store_contents_s3=bucket_conn.list()
                store_contents=map(lambda x: x.name, store_contents_s3)

            def filterStoragePaths(paths, regexp):
                """
                Return set of FoundVideos for all paths matching regexp.  Expect RE has four 
                match sections: prefix, suffix, video_id, filename
                """
                foundSet=set([])
                path_regexp=re.compile(regexp)
                for store_entry in store_contents:
                    match = path_regexp.match(store_entry)
                    if match:
                        fv = FoundVideo(prefix=match.group(1),
                                        suffix=match.group(2),
                                        video_id=match.group(3),
                                        file=match.group(4))
                        if limitClass and limitClass.lower() != fv.prefix.lower():
                            next
                        if limitTerm and limitTerm.lower() != fv.suffix.lower():
                            next
                        foundSet.add(fv)
                return foundSet

            # remember that video regexp'es need to handle spaces in file names
            foundVideos = filterStoragePaths(store_contents, 
                    r"(\w*)/(\w*)/videos/(\w*)/([^/]+)$")
            foundManifests = filterStoragePaths(store_contents, 
                    r"(\w*)/(\w*)/videos/(\w*)/jpegs/(manifest.txt)$")   # dummy filename
            foundSmalls = filterStoragePaths(store_contents, 
                    r"(\w*)/(\w*)/videos/(\w*)/small/([^/]+)$")
            foundLarges = filterStoragePaths(store_contents, 
                    r"(\w*)/(\w*)/videos/(\w*)/large/([^/]+)$")

            return (foundVideos, foundManifests, foundSmalls, foundLarges)


        ## MAIN

        dbVideoSet=searchDatabase(options['class'], options['term'])
        if not options['quiet']: 
            print "Videos found in database: %d " % len(dbVideoSet)

        awsKey=getattr(settings, 'AWS_ACCESS_KEY_ID')
        awsSecret=getattr(settings, 'AWS_SECRET_ACCESS_KEY')
        awsBucket=getattr(settings, 'AWS_STORAGE_BUCKET_NAME')

        (storeVideoSet, storeManifestSet, storeSmallSet, storeLargeSet) = \
                searchStorage(awsKey, awsSecret, awsBucket, options['class'], options['term'])
        if not options['quiet']: 
            print "Bucket: " + awsBucket
            print "\tvideos found: %d" % len(storeVideoSet)
            print "\tmanifests found: %d" % len(storeManifestSet)
            print "\tsmall formats found: %d" % len(storeSmallSet)
            print "\tlarge formats found: %d" % len(storeLargeSet)

        missingVideoSet = dbVideoSet.difference(storeVideoSet)
        missingThumbSet = dbVideoSet.difference(missingVideoSet).difference(storeManifestSet)
        missingSmallSet = dbVideoSet.difference(missingVideoSet).difference(storeSmallSet)
        missingLargeSet = dbVideoSet.difference(missingVideoSet).difference(storeLargeSet)
        if not options['quiet']: 
            print "in database, but not in storage: %d" % len(missingVideoSet)
            print "in database and storage, but no thumbnails: %d" % len(missingThumbSet)
            print "in database and storage, but no small format: %d" % len(missingSmallSet)
            print "in database and storage, but no large format: %d" % len(missingSmallSet)
            print "=================================="

        problems = sorted(missingThumbSet.union(missingSmallSet).union(missingLargeSet))
        for p in problems:
            if p in missingThumbSet:
                print "./manage.py kelvinate %s     # id=%s file=%s" \
                        % (p.fixup_params(), p.video_id, p.file)
            if p in missingSmallSet:
                print "./manage.py resize small %s    # id=%s file=%s" \
                        % (p.fixup_params(), p.video_id, p.file)
            if p in missingLargeSet:
                print "./manage.py resize large %s    # id=%s file=%s" \
                        % (p.fixup_params(), p.video_id, p.file)

        for m in missingVideoSet:
            print "# missing video file \"%s\" for %s, id=%s" \
                    % (m.file, m.fixup_params(), m.video_id)


########NEW FILE########
__FILENAME__ = tasks
# Video handling utilities.
#
# Two things in this file
# 1. Kelvinator - simple method of extracting key frames for a video.  
# 2. Resize - simple transcoder to create smaller versions of videos.
#
# Requirements:
# 1. ffmpeg 
# 2. x264 for transcoding
# 3. Python Imaging: Install PIL
# 4. Python linear algebra: numpy
#
# For more info on transcoding, see: 
# - http://ffmpeg.org/trac/ffmpeg/wiki/x264EncodingGuide
# size abbreviations: 
# - http://linuxers.org/tutorial/how-extract-images-video-using-ffmpeg

try: 
    import Image
except ImportError, msg:
    Image = False
try:
    import numpy as np
except ImportError, msg:
    np = False
import math
import os
import operator
import shutil
import subprocess
import sys

from django.core.files.storage import default_storage
from django.conf import settings
from celery import task

from utility import *

##  KELVINATOR
##
def extract(notify_buf, working_dir, jpeg_dir, video_file, start_offset, extraction_frame_rate):
    infoLog(notify_buf, "Kicking off ffmpeg, hold onto your hats")
    cmdline = [ ffmpeg_cmd() ]
    cmdline += \
        [ '-i', working_dir + "/" + video_file, # input
          '-ss', str(start_offset),             # start a few seconds late
          '-r', str(extraction_frame_rate),     # thumbs per second to extract
          '-f', 'image2',                       # thumb format
          jpeg_dir + '/img%5d.jpeg',            # thumb filename template
        ]
    infoLog(notify_buf, "EXTRACT: " + " ".join(cmdline))
    returncode = subprocess.call(cmdline)

    if returncode == 0:
        infoLog(notify_buf, "ffmpeg completed, returncode %d" % returncode)
    else:
        errorLog(notify_buf, "ffmpeg completed, returncode %d" % returncode)
        cleanup_working_dir(notify_buf, working_dir)
        raise VideoError("ffmpeg error %d" % returncode)


def difference(notify_buf, working_dir, jpeg_dir, extraction_frame_rate, frames_per_minute_target):
    """Select targeted number of slides from candidate set of frames"""
    # It is an error to call this method without having numpy installed
    if not np:
        raise VideoError("Could not extract keyframes from video file without numpy")
    if not Image:
        raise VideoError("Could not extract keyframes from video file without PIL (Image)")

    # from http://mail.python.org/pipermail/image-sig/1997-March/000223.html
    def computeDiff(file1, file2):
        h1 = Image.open(file1).histogram()
        h2 = Image.open(file2).histogram()
        rms = math.sqrt(reduce(operator.add, map(lambda a,b: (a-b)**2, h1, h2))/len(h1))
        return rms

    # get local maximum values from an array, which are also larger the threshold. 
    # local maximum is extracted by comparing current with three neighbors in both directions. 
    def localMaximum(candidates, threshold):
        cuts = [];
        for i in range(3, len(candidates)-4):
            cur_score = candidates[i][0]
            if cur_score > threshold and cur_score > candidates[i-1][0] and cur_score > candidates[i-2][0] and cur_score > candidates[i-3][0] and cur_score > candidates[i+1][0] and cur_score > candidates[i+2][0] and cur_score > candidates[i+3][0] :
                cuts.append(candidates[i])
        return cuts

    image_list = os.listdir(jpeg_dir)
    if len(image_list) == 0:
        cleanup_working_dir(notify_buf, working_dir)
        raise VideoError("Failed to extract keyframes from video file")
        
    image_list.sort()
    infoLog(notify_buf, "Extraction frame rate: %d fps" % extraction_frame_rate)
    duration = len(image_list)/extraction_frame_rate    # in seconds
    infoLog(notify_buf, "Video duration: %d seconds" % duration)
    infoLog(notify_buf, "Initial keyframes: %d" % len(image_list))
    infoLog(notify_buf, "Target keyframes per minute: %d" % frames_per_minute_target) 
    max_keyframes = int(math.ceil(frames_per_minute_target * duration/60.0))
    infoLog(notify_buf, "Upper bound on number of keyframes kelvinator will output: %d" % max_keyframes)
    infoLog(notify_buf, "Internal differencing threshold: average of all scores")
    image_num = len(image_list)

    # window size, all the frames in the window centered at 
    # current frame are used to determine shot boundary. 
    # this value doesn't need to be changed for different videos.
    k = 5

    # calculate difference matrix
    difference_matrix = np.zeros((image_num,image_num))
    for i in range(0, image_num-1-k):
        for j in range(i+1, i+k):
            difference_matrix[i, j] = computeDiff(jpeg_dir+"/"+image_list[i], jpeg_dir+"/"+image_list[j])
    difference_matrix = difference_matrix + difference_matrix.transpose()
    
    # callate shot boundary scores for each frames, score = cut(A,B)/associate(A) + cut(A,B)/associate(B) 
    candidates = []
    for i in range(k, image_num-1-k):
        cutAB = np.sum(difference_matrix[i-k:i, i:i+k])
        assocA = np.sum(difference_matrix[i-k:i, i-k:i])
        assocB = np.sum(difference_matrix[i:i+k, i:i+k])
        if (assocA!=0) and (assocB!=0):
            score = cutAB/assocA + cutAB/assocB
        else:
            score = 0
        candidates.append((score, i))

    # extract local maximum as the shot boundaries.
    # the threshold is assigned to be the mean of all the scores. 
    # [important] we may want to change the threshold to control the number of key frames. 
    # higher threshold generates fewer shot boundaries.
    threshold = np.mean([pair[0] for pair in candidates]);
    cuts = localMaximum(candidates, threshold)

    # limit shot boundary number fewer than max_keyframes
    if len(cuts) >= max_keyframes :
        # sort key frames by score 
        cuts.sort(reverse=True)
        cuts = cuts[:max_keyframes];

    # select the 3nd frame after each shot boundary as the key frame.
    # alternatively, we can also select middle frame between two shot boundaries as the key frame.
    cut_offset = 2

    # below code is used to output keyframes.
    keep_frames = []
    keep_times = []
    jpeg_dir_parent = os.path.abspath(os.path.join(jpeg_dir, os.path.pardir))
    jpeg_dir_result = jpeg_dir_parent + "/tmp"
    if os.path.exists(jpeg_dir_result):
        pass
    else:
        os.mkdir(jpeg_dir_result)
    # sort key frames by index
    sorted(cuts, key=lambda x: x[1])     

    # move key frames into a tmp folder, then move back.
    for i in range(len(cuts)):
        index = min(cuts[i][1] + cut_offset, len(image_list) - 1)
        shutil.move(jpeg_dir+"/"+image_list[index], jpeg_dir_result)
        keep_frames.append(image_list[index])
        keep_times.append(index)

    cleanup_working_dir(notify_buf, jpeg_dir)
    os.rename(jpeg_dir_result, jpeg_dir)  

    return (keep_frames, keep_times)
    

def write_manifest(notify_buf, jpeg_dir, keep_frames, keep_times):
    outfile_name = jpeg_dir + "/manifest.txt"
    outfile = open(outfile_name, 'w')
    index = 0
    outfile.write("{")

    while(index < len(keep_frames)):
        outfile.write("\"")
        toWrite = str(keep_times[index])
        outfile.write(toWrite)
        outfile.write("\":{\"imgsrc\":\"")
        outfile.write(keep_frames[index])
        outfile.write("\"}")
        if index < len(keep_frames)-1:
            outfile.write(",")
        index += 1
    outfile.write("}")
    outfile.close()


def put_thumbs(notify_buf, jpeg_dir, prefix, suffix, video_id, store_loc):
    # I wish Filesystem API worked the same for local and remote, but it don't
    if store_loc == 'local':
        root = getattr(settings, 'MEDIA_ROOT')
        store_path = root + "/" + prefix + "/" + suffix + "/videos/" + str(video_id) + "/jpegs"
        if default_storage.exists(store_path):
            infoLog(notify_buf, "Found prior directory, removing: %s" % store_path)
            dirRemove(store_path) 
        os.mkdir(store_path)
    else:
        store_path = prefix + "/" + suffix + "/videos/" + str(video_id) + "/jpegs"
        default_storage.delete(store_path)

    # not doing write to tmp and then mv because the file storage API limitation
    image_list = os.listdir(jpeg_dir)
    image_list.sort()
    for fname in image_list:
        infoLog(notify_buf, "Uploading: %s" % fname)
        local_file = open(jpeg_dir + "/" + fname, 'rb')
        store_file = default_storage.open(store_path + "/" + fname, 'wb')
        file_data = local_file.read()
        store_file.write(file_data)
        local_file.close()
        store_file.close()
    infoLog(notify_buf, "Uploaded: %s files" % str(len(image_list)))


# Main Kelvinator Task (CELERY)
@task()
def kelvinate(store_path_raw, frames_per_minute_target=2, notify_addr=None):
    """
    Given a path to a video in a readable S3 bucket, extract the frames and 
    upload back to S3.

    store_path must be the full path to the video file, not just to its parent folder.
    """

    notify_buf = []

    if not np:
        sys.stderr.write("WARNING\nThe python library 'numpy' is not installed, so kelvinate function cannot run.\n")
        infoLog(notify_buf, "Kelvinate terminated: numpy not installed.")
        return False

    infoLog(notify_buf, "Kelvinate: extracting %s" % store_path_raw)

    extraction_frame_rate = 1   # seconds
    start_offset = 3            # seconds
    
    frames_per_minute_target = float(frames_per_minute_target)

    (store_path, course_prefix, course_suffix, video_id, video_filename) = splitpath(store_path_raw)

    store_loc = "remote"
    if getattr(settings, 'AWS_ACCESS_KEY_ID') == "local":
        store_loc = "local"

    work_dir = None
    try:
        (work_dir, jpegs) = create_working_dirs("kelvinator", notify_buf, "jpegs")
        get_video(notify_buf, work_dir, video_filename, store_path)
        extract(notify_buf, work_dir, jpegs, video_filename, start_offset, extraction_frame_rate)
        (thumbs, times) = difference(notify_buf, work_dir, jpegs, extraction_frame_rate, frames_per_minute_target)
        write_manifest(notify_buf, jpegs, thumbs, times)
        put_thumbs(notify_buf, jpegs, course_prefix, course_suffix, video_id, store_loc)
    except:
        if work_dir: cleanup_working_dir(notify_buf, work_dir)
        notify("Kelvinator", notify_buf, notify_addr, 
                course_prefix, course_suffix, video_filename, store_path) # in utilities.py
        raise

    cleanup_working_dir(notify_buf, work_dir)
    notify("Kelvinator", notify_buf, notify_addr, course_prefix, course_suffix, video_filename, store_path)

##
##  RESIZE

# video sizes we support: key is size name (used for target subdirectory) and value
# are the parameters (as a list) that we'll pass to ffmpeg.
sizes = { "large":  [ "-crf", "23", "-s", "1280x720" ],   # original size, compressed
          "medium": [ "-crf", "27", "-s", "852x480" ],    # wvga at 16:9
          "small":  [ "-crf", "30", "-s", "640x360" ],    
          "tiny":   [ "-crf", "40", "-s", "320x180" ],
        }


# Actually transcode the video down 
def do_resize(notify_buf, working_dir, target_dir, video_file, target_size):
    cmdline = [ ffmpeg_cmd() ]
    cmdline += [ "-i", working_dir + "/" + video_file,  # infile
                 "-c:v", "libx264",          # video codec
                 "-profile:v", "baseline",   # most compatible
                 "-strict", "-2",            # magic to allow aac audio enc
               ]
    cmdline += sizes[target_size]
    cmdline += [ target_dir + "/" + video_file ]  # outfile

    infoLog(notify_buf, "RESIZE: " + " ".join(cmdline))
    returncode = subprocess.call(cmdline)

    if returncode == 0:
        infoLog(notify_buf, "completed with returncode %d" % returncode)
    else:
        errorLog(notify_buf, "completed with returncode %d" % returncode)
        cleanup_working_dir(notify_buf, working_dir)
        raise VideoError("do_resize error %d" % returncode)


def upload(notify_buf, target_dir, target_part, prefix, suffix, video_id, video_file, store_loc):
    # I wish Filesystem API worked the same for local and remote, but it don't
    if store_loc == 'local':
        root = getattr(settings, 'MEDIA_ROOT')
        store_path = root + "/" + prefix + "/" + suffix + "/videos/" + str(video_id) + "/" + target_part
        if default_storage.exists(store_path):
            infoLog(notify_buf, "Found prior directory, removing: %s" % store_path)
            dirRemove(store_path) 
        os.mkdir(store_path)
    else:
        store_path = prefix + "/" + suffix + "/videos/" + str(video_id) + "/" + target_part
        default_storage.delete(store_path)

    statinfo = os.stat(target_dir + "/" + video_file)
    infoLog(notify_buf, "Final file size: %s" % str(statinfo.st_size))

    local_file = open(target_dir + "/" + video_file, 'rb')
    store_file = default_storage.open(store_path + "/" + video_file, 'wb')
    store_file.write(local_file.read())
    local_file.close()
    store_file.close()


# Main Resize Task (CELERY)
@task()
def resize(store_path_raw, target_raw, notify_addr=None):
    """
    Given a video path, scale it down and save the result alongside the original
    video.  So we can provide different download options.

    Preset is either "small" or "large".
    """

    notify_buf = []
    infoLog(notify_buf, "Resize: converting %s version of %s" % (target_raw, store_path_raw))

    target = target_raw.lower()
    if target not in sizes.keys():
        VideoError("Target size \"%s\" not supported" % target)

    (store_path, course_prefix, course_suffix, video_id, video_file) = splitpath(store_path_raw)

    store_loc = 'remote'
    if getattr(settings, 'AWS_ACCESS_KEY_ID') == 'local':
        store_loc = 'local'

    work_dir = None
    try:
        (work_dir, smaller_dir) = create_working_dirs("resize", notify_buf, target)
        get_video(notify_buf, work_dir, video_file, store_path)
        do_resize(notify_buf, work_dir, smaller_dir, video_file, target)
        upload(notify_buf, smaller_dir, target, course_prefix, course_suffix, video_id, video_file, store_loc)
    except:
        if work_dir: cleanup_working_dir(notify_buf, work_dir)
        notify("Resize (%s)" % target, notify_buf, notify_addr, course_prefix, course_suffix, 
               video_file, store_path)
        raise

    cleanup_working_dir(notify_buf, work_dir)
    notify("Resize (%s)" % target, notify_buf, notify_addr, course_prefix, course_suffix, 
           video_file, store_path)


########NEW FILE########
__FILENAME__ = utility
import sys, os, socket, shutil
import tempfile
import logging
import urllib, urllib2, urlparse

from django.core.files.storage import default_storage
from django.conf import settings
from django.core.mail import send_mail


logger = logging.getLogger(__name__)


def splitpath(raw):
    store_path = urlparse.urlsplit(raw).geturl()
    sp = store_path.split("/")
    course_prefix = sp[-5]
    course_suffix = sp[-4]
    video_id = sp[-2]
    video_filename = sp[-1]
    return (store_path, course_prefix, course_suffix, video_id, video_filename) 


def ffmpeg_cmd():
    if sys.platform == "darwin":
        cmd = "ffmpeg"
    elif sys.platform == "linux2":
        cmd = "/usr/local/bin/ffmpeg"   # hardcoded location since we need a special one
    else:
        VideoError("Platform not supported, got \"%s\" expected darwin or linux2" % sys.platform)
    return cmd


def create_working_dirs(job, notify_buf, subdir_name):
    """
    Create local temp director where we will do our work.  If this fails, we log 
    something but otherwise let the exception go since we want it to fail violently 
    which will leave the job on the work queue.
    """

    working_dir_parent = getattr(settings, "KELVINATOR_WORKING_DIR", "/tmp")
    try:
        working_dir=tempfile.mkdtemp(prefix=job+"-", dir=working_dir_parent,
                suffix="-" + str(os.getpid()))
    except:
        errorLog(notify_buf, "Kelvinator error when creating temp file in \"%s\"" % working_dir_parent)
        raise
    infoLog(notify_buf, "Working directory: " + working_dir)

    subdir = working_dir + "/" + subdir_name
    try:
        os.mkdir(subdir)
    except OSError:
        raise VideoError("cannot create \"%s\", potential collision" % subdir)
    if not os.path.isdir(subdir):
        raise VideoError("Unable to create dir: " + subdir)

    return (working_dir, subdir)


def cleanup_working_dir(notify_buf, working_dir):
    infoLog(notify_buf, "Cleaning up working dir: " + working_dir)
    dirRemove(working_dir)


def infoLog(buf, l):
    buf.append(l)
    logger.info(l)


def errorLog(buf, l):
    buf.append("ERROR: %s" % l)
    logger.error(l)


def dirRemove(path):
    if os.path.isdir(path):
        shutil.rmtree(path, ignore_errors=True)
        if os.path.isdir(path):
            raise VideoError("Unable to remove dir: %s" % path)


class VideoError(Exception):
     def __init__(self, value):
         self.value = value
     def __str__(self):
         return repr(self.value)


def get_video(notify_buf, working_dir, video_filename, source_path):
    infoLog(notify_buf, "Source file: " + source_path)
    source_file = default_storage.open(source_path)
    infoLog(notify_buf, "Original file size: %s" % str(default_storage.size(source_path)))

    video_file = working_dir + "/" + video_filename
    infoLog(notify_buf, "Writing to working (local) file: " + video_file)
    working_file = open(video_file, 'wb')
    working_file.write(source_file.read())
    working_file.close()
    source_file.close()
    
    # TODO: consider some retry logic here
    try:
        filesize = os.path.getsize(video_file)
    except os.error:
        errorLog(notify_buf, "Unable to download video file")
        cleanup_working_dir(notify_buf, working_dir)
        raise 

    if filesize == 0:
        cleanup_working_dir(notify_buf, working_dir)
        raise VideoError("file size zero, video file did not download properly")


def notify(task, notify_buf, notify_addr, prefix, suffix, filename, store_path):
    if notify_addr is None: return

    subject = "%s result: %s %s %s" % (task, prefix, suffix, filename)

    body =  "course: %s %s\n" % (prefix, suffix)
    body += "video file: %s\n" % store_path
    body += "machine: %s\n" % socket.gethostname()
    body += "\n"
    body += "-------- LOG --------\n"
    body += "\n"
    body += "\n".join(notify_buf)

    send_mail(subject, body, "noreply@class.stanford.edu", [ notify_addr, ])




########NEW FILE########
__FILENAME__ = manage
#!/usr/bin/env python
import os
import sys

if __name__ == "__main__":
    os.environ.setdefault("DJANGO_SETTINGS_MODULE", "settings")

    from django.core.management import execute_from_command_line

    execute_from_command_line(sys.argv)

########NEW FILE########
__FILENAME__ = manage_old
#!/usr/bin/env python
from django.core.management import execute_manager
import imp
try:
    imp.find_module('settings') # Assumed to be in the same directory.
except ImportError:
    import sys
    sys.stderr.write("Error: Can't find the file 'settings.py' in the directory containing %r. It appears you've customized things.\nYou'll have to run django-admin.py, passing it your settings module.\n" % __file__)
    sys.exit(1)

import settings

if __name__ == "__main__":
    execute_manager(settings)

########NEW FILE########
__FILENAME__ = monkeypatch
"""monkeypatch: the module of extreme evil.

When you find yourself tempted to patch a system library, go ahead and do that.
But then submit your code upstream. While you're waiting for review, add a 
monkeypatch here.
"""


def s3boto_dlurl(self, name, response_headers=None, querystring_auth=True):
    """Copy s3boto.S3BotoStorage.url() implementation with flexibility.
    
    response_headers is normally unsupported, but useful for creating URLs
    that point to resources with peculiar configurations, i.e., 
    'content-disposition': 'attachment'.

    querystring_auth is normally configured on S3BotoStorage via the
    environment, but defaults to True and it's handy to be able to override on
    a per-model basis.
    """
    name = self._normalize_name(self._clean_name(name))
    if self.custom_domain:
        return "%s://%s/%s" % ('https' if self.secure_urls else 'http',
                               self.custom_domain, name)
    # If response_headers are set, use class-default querysting_auth behavior
    if response_headers is not None:
        querystring_auth = self.querystring_auth

    return self.connection.generate_url(self.querystring_expire,
            method='GET', response_headers=response_headers, 
            bucket=self.bucket.name, key=self._encode_name(name),
            query_auth=querystring_auth, force_http=not self.secure_urls)
import storages.backends.s3boto
storages.backends.s3boto.S3BotoStorage.url_monkeypatched = s3boto_dlurl

### Now a section that pulls in unicode support for RegexField that has been
### incorporated into django itself (just not the version we run/develop on, 1.4)
### See https://github.com/django/django/pull/101/files and
### https://code.djangoproject.com/ticket/18409 for context

from django import forms
from django.core import validators
import re

def _set_regex_unicode(self, regex):
    if isinstance(regex, basestring):
        regex = re.compile(regex, re.UNICODE)
    self._regex = regex
    if hasattr(self, '_regex_validator') and self._regex_validator in self.validators:
        self.validators.remove(self._regex_validator)
    self._regex_validator = validators.RegexValidator(regex=regex)
    self.validators.append(self._regex_validator)

forms.RegexField._set_regex = _set_regex_unicode

########NEW FILE########
__FILENAME__ = actions
from django.http import HttpResponse
from django.shortcuts import render_to_response, redirect
from django.template import Context, loader
from django.template import RequestContext
from django.contrib.auth.models import User,Group
from courses.common_page_data import get_common_page_data
from c2g.models import *
from courses.actions import auth_is_course_admin_view_wrapper
from django.views.decorators.http import require_POST

@require_POST
@auth_is_course_admin_view_wrapper
def delete_problemset(request):
    try:
        common_page_data = get_common_page_data(request, request.POST.get("course_prefix"), request.POST.get("course_suffix"))
    except:
        raise Http404
        
    if not common_page_data['is_course_admin']:
        return redirect('courses.views.main', request.POST.get("course_prefix"), request.POST.get("course_suffix"))
        
    problemset = ProblemSet.objects.get(id=request.POST.get("problem_set_id"))
    problemset.delete()
    problemset.image.delete()
    
    return redirect(request.META['HTTP_REFERER'])
    

########NEW FILE########
__FILENAME__ = forms
from django import forms
from django.forms import Textarea
from c2g.models import ProblemSet, ContentSection, Exercise, Course
class CreateProblemSet(forms.ModelForm):
    def __init__(self, *args, **kwargs):
        course = kwargs.pop('course')
        super(CreateProblemSet, self).__init__(*args, **kwargs)
        self.fields['section'] = forms.ModelChoiceField(ContentSection.objects.filter(course=course, is_deleted=False).order_by('index'), empty_label=None)
        self.fields['live_datetime'].required = False

    assessment_type = forms.TypedChoiceField(choices=(('formative', 'Formative'), ('assessive', 'Summative'), ('survey', 'Survey')), widget=forms.RadioSelect)
    submissions_permitted = forms.IntegerField(min_value=0)
    resubmission_penalty = forms.IntegerField(min_value=0, max_value=100)

    class Meta:
        model = ProblemSet
        fields = ('title', 'slug', 'section', 'description', 'live_datetime', 'due_date', 'grace_period', 'partial_credit_deadline',
                'late_penalty', 'assessment_type', 'submissions_permitted', 'resubmission_penalty')
        widgets = {
                'description': Textarea(attrs={'cols': 20, 'rows': 10}),
                'live_datetime': forms.widgets.DateTimeInput(format='%m/%d/%Y %H:%M', attrs={'data-datetimepicker':''}),
                'due_date': forms.widgets.DateTimeInput(format='%m/%d/%Y %H:%M', attrs={'data-datetimepicker':''}),
                'grace_period': forms.widgets.DateTimeInput(format='%m/%d/%Y %H:%M', attrs={'data-datetimepicker':''}),
                'partial_credit_deadline': forms.widgets.DateTimeInput(format='%m/%d/%Y %H:%M', attrs={'data-datetimepicker':''})
        }


class ManageExercisesForm(forms.Form):
    file = forms.FileField()
    course = forms.CharField(widget=(forms.HiddenInput()))

########NEW FILE########
__FILENAME__ = models
from django.db import models

# Create your models here.

########NEW FILE########
__FILENAME__ = views_advanced
import unittest
from c2g.models import ProblemSet
from datetime import datetime, timedelta
from test_harness.test_base import AuthenticatedTestBase

__all__ = ['InstructorDraftModeTestAdv']

class InstructorDraftModeTestAdv(AuthenticatedTestBase):

    def __init__(self, *arrgs, **kwargs):
        config = { 'username' : 'professor_0',
                   'password' : 'class2go',
                   'course_prefix' :'networking',
                   'course_suffix' :'Fall2012',
                   'mode' : 'draft' }
        if kwargs != None:
            kwargs.update(config)
        else:
            kwargs = config
        super(InstructorDraftModeTestAdv, self).__init__(*arrgs, **kwargs)

    @unittest.skip('this is obsolete with the landing of exams')
    def test_create_problemset_action(self):
        """
        Tests the creation of a new problemset
        url(r'^createproblemsetaction/?',
            'problemsets.views.create_action'),
        """
        # Get the number of problemsets
        num_problem_sets = len(ProblemSet.objects.all())
        self.assertEqual(num_problem_sets, 4)
        self.assertEqual( len(ProblemSet.objects.filter(mode='ready')), num_problem_sets/2 )
        self.assertEqual( len(ProblemSet.objects.filter(mode='draft')), num_problem_sets/2 )
    
        # Create a new problemset
        resp = self.client.post('/createproblemsetaction/',
                                {'course_prefix': self.coursePrefix,
                                 'course_suffix': self.courseSuffix,
                                 'title': 'XXXXXXXXXX This is a test XXXXXXXX',
                                 'slug':'testPS',
                                 'assessment_type': 'formative',
                                 'submissions_permitted': 5,
                                 'late_penalty': 10,
                                 'section': '1',
                                 'resubmission_penalty': 10,
                                 'grace_period': datetime.strftime(datetime.today(), '%m/%d/%Y %H:%M'),
                                 'partial_credit_deadline': datetime.strftime(datetime.today()+timedelta(21), '%m/%d/%Y %H:%M'),
                                 'due_date':  datetime.strftime(datetime.today()+timedelta(7), '%m/%d/%Y %H:%M'),
                                },
                                HTTP_USER_AGENT=self.userAgent )

        # assert that we got redirected to the manage_exercises page
        self.assertEqual(resp.status_code, 302)
        self.assertEqual(resp['location'], 'http://testserver/networking/Fall2012/problemsets/testPS/manage_exercise')

        # assert that there are 2 more problemsets, one each for ready & draft
        self.assertEqual( len(ProblemSet.objects.all()), num_problem_sets+2 )
        self.assertEqual( len(ProblemSet.objects.filter(mode='ready')), (num_problem_sets/2)+1 )
        self.assertEqual( len(ProblemSet.objects.filter(mode='draft')), (num_problem_sets/2)+1 )


########NEW FILE########
__FILENAME__ = views_simple
import unittest
from test_harness.test_base import AuthenticatedTestBase

__all__ = ['test_standalone', 'InstructorDraftModeTest']

def test_standalone():
    """
    Tests standalone function inclusion
    """
    pass

class InstructorDraftModeTest(AuthenticatedTestBase):

    def __init__(self, *arrgs, **kwargs):
        config = { 'username' : 'professor_0',
                   'password' : 'class2go',
                   'course_prefix' :'networking',
                   'course_suffix' :'Fall2012',
                   'mode' : 'draft' }
        if kwargs != None:
            kwargs.update(config)
        else:
            kwargs = config
        super(InstructorDraftModeTest, self).__init__(*arrgs, **kwargs)

    @unittest.skip('this is obsolete with the landing of exams')
    def test_basic_page_access(self):
        """
        Tests that we can access the basic test problem set pages
        url(r'^(?P<course_prefix>[a-zA-Z0-9_-]+)/(?P<course_suffix>[a-zA-Z0-9_-]+)/
               problemsets/(?P<pset_slug>[a-zA-Z0-9_-]+)?$',
            'problemsets.views.show'),
        """

        # load the normal problem set page
        resp = self.client.get('/networking/Fall2012/problemsets/P2', HTTP_USER_AGENT=self.userAgent)
        self.assertEqual(resp.status_code, 200)
        self.assertTrue('pset_url' in resp.context)
        self.assertEqual(resp.context['pset_url'], '/networking/Fall2012/problemsets/P2/load_problem_set')

    @unittest.skip('this is obsolete with the landing of exams')
    def test_pset_load(self):
        """
        Tests that we can load the actual problem set 
        url(r'^(?P<course_prefix>[a-zA-Z0-9_-]+)/(?P<course_suffix>[a-zA-Z0-9_-]+)/
               problemsets/(?P<pset_slug>[a-zA-Z0-9_-]+)/
               load_problem_set?$', 'problemsets.views.load_problem_set'),
        """
        # load a page with just the problem set
        resp = self.client.get('/networking/Fall2012/problemsets/P2/load_problem_set', HTTP_USER_AGENT=self.userAgent)
        self.assertEqual(resp.status_code, 200)
        self.assertTrue('file_names' in resp.context)
        self.assertEqual(resp.context['file_names'][0], 'xx_P2_Lexical1')

    @unittest.skip('this is obsolete with the landing of exams')
    def test_load_all_psets(self):
        """
        Tests the view all problemset page
        url(r'^(?P<course_prefix>[a-zA-Z0-9_-]+)/(?P<course_suffix>[a-zA-Z0-9_-]+)/
               problemsets/?$',
            'problemsets.views.listAll'),
        """
        resp = self.client.get('/networking/Fall2012/problemsets/', HTTP_USER_AGENT=self.userAgent)
        self.assertEqual(resp.status_code, 200)

    @unittest.skip('this is obsolete with the landing of exams')
    def test_load_manage_exercises(self):
        """
        Tests the loading of the problemset manage exercises page
        url(r'^(?P<course_prefix>[a-zA-Z0-9_-]+)/(?P<course_suffix>[a-zA-Z0-9_-]+)/
               problemsets/(?P<pset_slug>[a-zA-Z0-9_-]+)/
               manage_exercises?$',
            'problemsets.views.manage_exercises'),
        """
        resp = self.client.get('/networking/Fall2012/problemsets/P2/manage_exercise', HTTP_USER_AGENT=self.userAgent)
        self.assertEqual(resp.status_code, 200)
        self.assertEqual(len(resp.context['exercises']), 2)

    @unittest.skip('this is obsolete with the landing of exams')
    def test_create_problemset_page(self):
        """
        Tests the display of the problemset creation page
        url(r'^(?P<course_prefix>[a-zA-Z0-9_-]+)/(?P<course_suffix>[a-zA-Z0-9_-]+)/
              createproblemset/?$',
            'problemsets.views.create_form'),
        """
        resp = self.client.get('/networking/Fall2012/createproblemset/', HTTP_USER_AGENT=self.userAgent)
        self.assertEqual(resp.status_code, 200)


########NEW FILE########
__FILENAME__ = views
from django.core.urlresolvers import reverse
from c2g.models import Exercise, PageVisitLog, ProblemActivity, ProblemSet, ProblemSetToExercise, VideoToExercise
from django.http import HttpResponse, Http404
from django.shortcuts import render_to_response, HttpResponseRedirect, render
from django.template import RequestContext
from courses.common_page_data import get_common_page_data
from courses.course_materials import get_course_materials
from django.views.decorators.csrf import csrf_exempt
from datetime import datetime, timedelta
from problemsets.forms import *
from django.db.models import Q
from courses.actions import auth_view_wrapper, auth_is_course_admin_view_wrapper
from django.views.decorators.http import require_POST
from courses.forms import *
from django.contrib import messages
from django.db import connection
from courses.views import get_full_contentsection_list

# Filters all ProblemActivities by problem set and student. For each problem set, finds out how
# many questions there are and how many were completed to calculate progress on
# each problem set. Packages this information along with problem set
# information about deadlines into a dictionary and passes it to the template.


@auth_view_wrapper
def listAll(request, course_prefix, course_suffix):
    common_page_data = request.common_page_data
   

    section_structures = get_course_materials(common_page_data=common_page_data, get_video_content=False, get_pset_content=True)

    form = None
    if request.common_page_data['course_mode'] == "draft":
        form = LiveDateForm()

    return render_to_response('problemsets/'+common_page_data['course_mode']+'/list.html', {'common_page_data': common_page_data, 'section_structures':section_structures, 'context':'exam_list', 'form': form}, context_instance=RequestContext(request))

@auth_view_wrapper
def show(request, course_prefix, course_suffix, pset_slug):
    
    def filename_in_deleted_list(filename, problem_set_id, deleted_exercise_list):
        """Used by course_materials templates for filtering"""
        for item in deleted_exercise_list:
            if item['filename'] == filename and item['problemset_id'] == problem_set_id:
                return True
        return False

    common_page_data = request.common_page_data 
    try:
        ps = ProblemSet.objects.getByCourse(course=common_page_data['course']).get(slug=pset_slug)
    except ProblemSet.DoesNotExist:
        messages.add_message(request,messages.ERROR, 'This Problemset is not visible in the student view at this time. Please note that students will not see this message.')
        return HttpResponseRedirect(reverse('problemsets.views.listAll', args=(course_prefix, course_suffix)))
    except ProblemSet.MultipleObjectsReturned:
        messages.add_message(request,messages.ERROR, 'We found multiple problem sets with the same slug.  Please try to delete one.  This most likely happened due to copying content from another course.')
        return HttpResponseRedirect(reverse('problemsets.views.listAll', args=(course_prefix, course_suffix)))

    if not common_page_data['is_course_admin']:
        visit_log = PageVisitLog(
            course = common_page_data['ready_course'],
            user = request.user,
            page_type = 'problemset',
            object_id = str(ps.id),
        )
        visit_log.save()
        
    activity_list = []
    
    cursor = connection.cursor()
    
    #Used to test for valid data
    cursor.execute("SELECT `c2g_problemset_to_exercise`.`problemSet_id`, `c2g_exercises`.`fileName`, c2g_problemset_to_exercise.number, \
                    min(case when c2g_problem_activity.complete = 1 then c2g_problem_activity.id else null end) as `first_correct_answer`, \
                    max(c2g_problem_activity.id) as `max_activity_id` \
                    FROM `c2g_problem_activity` \
                    LEFT OUTER JOIN `c2g_problemset_to_exercise` ON (`c2g_problem_activity`.`problemset_to_exercise_id` = `c2g_problemset_to_exercise`.`id`) \
                    INNER JOIN `c2g_problem_sets` ON (`c2g_problemset_to_exercise`.`problemSet_id` = `c2g_problem_sets`.`id`) \
                    INNER JOIN `c2g_exercises` ON (`c2g_problemset_to_exercise`.`exercise_id` = `c2g_exercises`.`id`) \
                    WHERE (`c2g_problemset_to_exercise`.`problemSet_id` = %s \
                    AND `c2g_problem_activity`.`student_id` = %s ) \
                    GROUP BY `c2g_problemset_to_exercise`.`problemSet_id`, `c2g_exercises`.`fileName`, c2g_problemset_to_exercise.number \
                    ORDER BY c2g_problemset_to_exercise.number", [ps.id, request.user.id])
    
    raw_activity_list = []
    for row in cursor.fetchall():
        problemset_id = row[0]
        filename = row[1]
        number = row[2]
        first_correct_answer = row[3]
        max_activity_id = row[4]                                
                                
        raw_activity_item = {'problemset_id' : problemset_id,
                             'filename' : filename,
                             'number' : number,
                             'first_correct_answer' : first_correct_answer,
                             'max_activity_id' : max_activity_id
                            }
        raw_activity_list.append(raw_activity_item)
            
    #Find deleted files
    cursor.execute("select e.fileName, p2e.problemSet_id, \
                                        count(case when p2e.is_deleted = 0 then 1 else null end) as `num_active` \
                                        from c2g_problemset_to_exercise p2e, c2g_exercises e \
                                        where p2e.exercise_id = e.id \
                                        and p2e.problemSet_id = %s \
                                        and p2e.mode = 'ready' \
                                        group by e.filename, p2e.problemSet_id \
                                        having num_active = 0", [ps.id])

    deleted_exercise_list = []
    for row in cursor.fetchall():
        filename = row[0]
        problemset_id = row[1]
        
        filename_item = {'filename' : filename,
                         'problemset_id' : problemset_id
                        }
        deleted_exercise_list.append(filename_item)                        
    
    for raw_activity_item in raw_activity_list:
        problemset_id = raw_activity_item['problemset_id']
        filename = raw_activity_item['filename']
        number = raw_activity_item['number']
        first_correct_answer = raw_activity_item['first_correct_answer']
        max_activity_id = raw_activity_item['max_activity_id']        
        
        if not filename_in_deleted_list(  filename, problemset_id, deleted_exercise_list):
            if first_correct_answer == None or first_correct_answer == max_activity_id:
                activity_item = ProblemActivity.objects.get(id=max_activity_id)
            else:
                activity_item = ProblemActivity.objects.get(id=first_correct_answer)
                
            activity_list.append((activity_item, number))

    course = common_page_data['course']
    full_contentsection_list, full_index_list = get_full_contentsection_list(course)

    if request.user.is_authenticated():
        is_logged_in = 1
    else:
        is_logged_in = 0

    return render_to_response('problemsets/problemset.html',
                              {'common_page_data':common_page_data,
                               'pset': ps,
                               'pset_url':ps.path,
                               'pset_type':ps.assessment_type,
                               'pset_penalty':ps.resubmission_penalty,
                               'pset_attempts_allowed':ps.submissions_permitted,
                               'activity_list': activity_list,
                               'contentsection_list': full_contentsection_list, 
                               'full_index_list': full_index_list,
                               'is_logged_in': is_logged_in
                              },
                              context_instance=RequestContext(request))


#CSRF Protected version, wrapped
@require_POST
#@auth_view_wrapper
def attempt_protect(request, problemId):
    return attempt(request, problemId)

@csrf_exempt
@require_POST
#@auth_view_wrapper
def attempt(request, problemId):
    user = request.user

    exercise_type = request.POST['exercise_type']
    if exercise_type == 'problemset':
        problemset_to_exercise = ProblemSetToExercise.objects.distinct().get(problemSet__id=request.POST['pset_id'], exercise__fileName=request.POST['exercise_filename'], is_deleted=False)
        attempts = ProblemActivity.objects.filter(problemset_to_exercise=problemset_to_exercise, student=request.user).exclude(attempt_content='hint').count()
        # Chokes if user_selection_val isn't provided, so set to blank
        post_selection_val = request.POST.get('user_selection_val', '')
        # Only increment attempts if it's not a hint request
        if request.POST['attempt_content'] != 'hint':
            attempts += 1
        problem_activity = ProblemActivity(student = user,
                                           problemset_to_exercise = problemset_to_exercise,
                                           complete = request.POST['complete'],
                                           attempt_content = request.POST['attempt_content'],
                                           count_hints = request.POST.get('count_hints', 0),
                                           time_taken = request.POST['time_taken'],
                                           seed = request.POST['seed'],
                                           attempt_number = attempts,
                                           problem_type = request.POST['problem_type'],
                                           user_selection_val = post_selection_val,
                                           user_choices = request.POST['user_choices'])

    elif exercise_type == 'video':
        video_to_exercise = VideoToExercise.objects.distinct().get(video__id=request.POST['video_id'], exercise__fileName=request.POST['exercise_filename'], is_deleted=False)
        attempts = ProblemActivity.objects.filter(video_to_exercise=video_to_exercise, student=request.user).exclude(attempt_content='hint').count()
        # Chokes if user_selection_val isn't provided, so set to blank
        post_selection_val = request.POST.get('user_selection_val', '')
        # Only increment attempts if it's not a hint request
        if request.POST['attempt_content'] != 'hint':
            attempts += 1
        problem_activity = ProblemActivity(student = user,
                                           video_to_exercise = video_to_exercise,
                                           complete = request.POST['complete'],
                                           attempt_content = request.POST['attempt_content'],
                                           count_hints = request.POST.get('count_hints', 0),
                                           time_taken = request.POST['time_taken'],
                                           seed = request.POST['seed'],
                                           attempt_number = attempts,
                                           problem_type = request.POST['problem_type'],
                                           user_selection_val = post_selection_val,
                                           user_choices = request.POST['user_choices'])

    problem_activity.save()
    if request.POST['complete'] == "1":
        activityConfirmation = '{"exercise_status":"complete", "attempt_num": ', problem_activity.attempt_number, '}'
    elif request.POST['attempt_content'] == "hint":
        activityConfirmation = '{"exercise_status":"hint", "attempt_num": ', problem_activity.attempt_number, '}'
    else:
        activityConfirmation = '{"exercise_status":"wrong", "attempt_num": ', problem_activity.attempt_number, '}'
    return HttpResponse(activityConfirmation)

@auth_is_course_admin_view_wrapper
def create_form(request, course_prefix, course_suffix):
    try:
        common_page_data = get_common_page_data(request, course_prefix, course_suffix)
    except:
        raise Http404

    data = {'common_page_data': common_page_data}
    form = CreateProblemSet(course=common_page_data['course'],
                            initial={'late_penalty':10,
                                    'assessment_type':'formative',
                                    'submissions_permitted':0,
                                    'resubmission_penalty':0,
                                    'due_date':(datetime.today()+timedelta(7)),
                                    'grace_period':(datetime.today()+timedelta(14)),
                                    'partial_credit_deadline':(datetime.today()+timedelta(21))
                                    })
    data['form'] = form
    data['course_prefix'] = course_prefix
    data['course_suffix'] = course_suffix
    return render_to_response('problemsets/create.html',
                              data,
                              context_instance=RequestContext(request))


@auth_is_course_admin_view_wrapper
def edit_form(request, course_prefix, course_suffix, pset_slug):
    try:
        common_page_data = get_common_page_data(request, course_prefix, course_suffix)
    except:
        raise Http404
    pset = ProblemSet.objects.get(course=common_page_data['course'], slug=pset_slug)
    data = {'common_page_data': common_page_data}
    form = CreateProblemSet(course=common_page_data['course'], instance=pset)
    data['form'] = form
    data['pset'] = pset
    data['course_prefix'] = course_prefix
    data['course_suffix'] = course_suffix
    return render_to_response('problemsets/edit.html', data, context_instance=RequestContext(request))

@require_POST
@auth_is_course_admin_view_wrapper
def create_action(request):
    course_prefix = request.POST.get("course_prefix")
    course_suffix = request.POST.get("course_suffix")
    common_page_data = get_common_page_data(request, course_prefix, course_suffix)
    data = {'common_page_data': common_page_data, 'course_prefix': course_prefix, 'course_suffix': course_suffix}
    
    if request.method == 'POST':
        pset = ProblemSet(course = common_page_data['course'])
        form = CreateProblemSet(request.POST, request.FILES, course=common_page_data['course'], instance=pset)
        if form.is_valid():
            new_pset = form.save(commit=False)
            new_pset.course = common_page_data['course']
            new_pset.mode = 'draft'
            new_pset.handle = course_prefix + "--" + course_suffix
            new_pset.path = "/"+request.POST['course_prefix']+"/"+request.POST['course_suffix']+"/problemsets/"+new_pset.slug+"/load_problem_set"

            new_pset.save()
            section = new_pset.section
            new_pset.index = section.getNextIndex()
            new_pset.save()
            new_pset.create_ready_instance()
            return HttpResponseRedirect(reverse('problemsets.views.manage_exercises', args=(request.POST['course_prefix'], request.POST['course_suffix'], new_pset.slug,)))

    else:
        form = CreateProblemSet(course=common_page_data['course'])
    data['form'] = form
    return render_to_response('problemsets/create.html', data, context_instance=RequestContext(request))

@require_POST
@auth_is_course_admin_view_wrapper
def edit_action(request):
    course_prefix = request.POST.get("course_prefix")
    course_suffix = request.POST.get("course_suffix")
    common_page_data = get_common_page_data(request, course_prefix, course_suffix)
    data = {'common_page_data': common_page_data, 'course_prefix': course_prefix, 'course_suffix': course_suffix}
    pset_id = request.POST.get("pset_id")

    if not common_page_data['is_course_admin']:
        return redirect('courses.views.main', course_prefix, course_suffix)

    if request.method == 'POST':
        pset = ProblemSet.objects.get(id=pset_id)

        action = request.POST['action']
        if action == "Reset to Ready":
            pset.revert()
            form = CreateProblemSet(course=common_page_data['course'], instance=pset)
        else:
            form = CreateProblemSet(request.POST, course=common_page_data['course'], instance=pset)
            if form.is_valid():
                form.save()
                pset.path = "/"+course_prefix+"/"+course_suffix+"/problemsets/"+pset.slug+"/load_problem_set"
                pset.save()
                if action == "Save and Set as Ready":
                    pset.commit()

                #Make sure slug is same for draft and ready versions
                if pset.slug != pset.image.slug:
                    pset.image.slug = pset.slug
                    pset.image.path = pset.path
                    pset.image.save()
                return HttpResponseRedirect(reverse('problemsets.views.listAll', args=(course_prefix, course_suffix)))

    data['form'] = form
    data['pset'] = pset
    return render(request, 'problemsets/edit.html', data)

@auth_is_course_admin_view_wrapper
def manage_exercises(request, course_prefix, course_suffix, pset_slug):
    #Get all necessary information about the problemset
    
    common_page_data = request.common_page_data
    
    data = {'common_page_data': common_page_data}
    form = ManageExercisesForm(initial={'course':common_page_data['course'].id})
    pset = ProblemSet.objects.getByCourse(common_page_data['course']).get(slug=pset_slug)
    psetToExs = ProblemSetToExercise.objects.getByProblemset(pset).select_related('exercise', 'problemSet')
    used_exercises = []
    problemset_taken = False
    if ProblemActivity.objects.filter(problemset_to_exercise__problemSet=pset.image).exists():
        problemset_taken = True
    #Get the list of exercises currently in this problem set
    for psetToEx in psetToExs:
        used_exercises.append(psetToEx.exercise.id)
    #Get all the exercises in the course but not in this problem set to list in add from existing
    #Q objects allow queryset filters to be ORed together
    exercises = Exercise.objects.all().filter(Q(problemSet__course=common_page_data['course'])|Q(video__course=common_page_data['course'])).exclude(id__in=used_exercises).distinct()

    #Form processing action if form was submitted
    if request.method == 'POST':
        form = ManageExercisesForm(request.POST, request.FILES)
        if form.is_valid():
            pset = ProblemSet.objects.get(id=request.POST['pset_id'])
            file_content = request.FILES['file']
            file_name = file_content.name

            exercises = Exercise.objects.filter(handle=course_prefix+"--"+course_suffix,is_deleted=0)
            exercise_exists = False
            for exercise in exercises:
                if exercise.fileName == file_name:
                    #We don't wipe out all problem activites associated with this
                    #existing exercise, but if it's a nontrivial overwrite, should we?
                    exercise.file = file_content
                    exercise.save()
                    exercise_exists = True

                    #If exercise already in pset, don't need to create new psetToEx
                    #If exercise already in pset but deleted, undelete
                    #Otherwise create new psetToEx
                    queryPsetToEx = ProblemSetToExercise.objects.filter(problemSet=pset, exercise=exercise, mode='draft').order_by('-id')
                    if queryPsetToEx.exists():
                        existingPsetToEx = queryPsetToEx[0]
                        if existingPsetToEx.is_deleted == 1:
                            existingPsetToEx.is_deleted = 0
                            existingPsetToEx.number = ProblemSetToExercise.objects.getByProblemset(pset).count()
                            existingPsetToEx.save()
                    else:
                        index = ProblemSetToExercise.objects.getByProblemset(pset).count()
                        psetToEx = ProblemSetToExercise(problemSet=pset, exercise=exercise, number=index, is_deleted=0, mode='draft')
                        psetToEx.save()                        
                    break

            if not exercise_exists:
                exercise = Exercise()
                exercise.handle = request.POST['course_prefix'] + '--' + request.POST['course_suffix']
                exercise.fileName = file_name
                exercise.file.save(file_name, file_content)
                exercise.save()

                index = ProblemSetToExercise.objects.getByProblemset(pset).count()
                psetToEx = ProblemSetToExercise(problemSet=pset, exercise=exercise, number=index, is_deleted=0, mode='draft')
                psetToEx.save()
            return HttpResponseRedirect(reverse('problemsets.views.manage_exercises', args=(request.POST['course_prefix'], request.POST['course_suffix'], pset.slug,)))

    #If form was not submitted then the form should be displayed or if there were errors the page needs to be rendered again
    data['form'] = form
    data['course_prefix'] = course_prefix
    data['course_suffix'] = course_suffix
    data['pset'] = pset
    data['psetToExs'] = psetToExs
    data['problemset_taken'] = problemset_taken
    data['exercises'] = exercises
    return render_to_response('problemsets/manage_exercises.html', data, context_instance=RequestContext(request))

@require_POST
@auth_is_course_admin_view_wrapper
def add_existing_exercises(request):
    pset = ProblemSet.objects.get(id=request.POST['pset_id'])
    exercise_ids = request.POST.getlist('exercise')
    exercises = Exercise.objects.filter(id__in=exercise_ids)
    for exercise in exercises:
        #if this exercise has been deleted previously then just un-delete it
        psetToExs = ProblemSetToExercise.objects.filter(problemSet=pset, exercise_id=exercise.id, mode = 'draft', is_deleted=1).order_by('-id')
        if psetToExs.exists():
            psetToEx = psetToExs[0]
            psetToEx.is_deleted = 0
            psetToEx.number = ProblemSetToExercise.objects.getByProblemset(pset).count()
            psetToEx.save()
        #else create a new one
        else:
            psetToEx = ProblemSetToExercise(problemSet=pset, exercise=exercise, number=ProblemSetToExercise.objects.getByProblemset(pset).count(), is_deleted=0, mode='draft')
            psetToEx.save()
    return HttpResponseRedirect(reverse('problemsets.views.manage_exercises', args=(request.POST['course_prefix'], request.POST['course_suffix'], pset.slug,)))

@require_POST
@auth_is_course_admin_view_wrapper
def delete_exercise(request):
    toDelete = ProblemSetToExercise.objects.get(id=request.POST['exercise_id'])
    toDelete.delete()
    toDelete.save()
    pset = toDelete.problemSet
    psetToExs = ProblemSetToExercise.objects.getByProblemset(pset)
    #Renumber exercise relationships
    index = 0
    for psetToEx in psetToExs:
        psetToEx.number = index
        psetToEx.save()
        index += 1
    return HttpResponseRedirect(reverse('problemsets.views.manage_exercises', args=(request.POST['course_prefix'], request.POST['course_suffix'], pset.slug,)))

@require_POST
@auth_is_course_admin_view_wrapper
def save_exercises(request):
    #Function should only be accessed from submitting a form
    if request.method != 'POST':
        return redirect(request.META['HTTP_REFERER'])

    course_prefix = request.POST['course_prefix']
    course_suffix = request.POST['course_suffix']
    common_page_data = get_common_page_data(request, course_prefix, course_suffix)
    pset = ProblemSet.objects.get(id=request.POST['pset_id'])
    action = request.POST['action']
    if action == 'Reset to Ready':
        pset.revert()
        return HttpResponseRedirect(reverse('problemsets.views.manage_exercises', args=(request.POST['course_prefix'], request.POST['course_suffix'], pset.slug,)))
    else:
        psetToExs = list(ProblemSetToExercise.objects.getByProblemset(pset))
        for n in range(0,len(psetToExs)):
            listName = "exercise_order[" + str(n) + "]"
            psetToExs[n].number = request.POST[listName]
            psetToExs[n].save()
        if action == 'Save and Set as Ready':
            pset.commit()
        return HttpResponseRedirect(reverse('problemsets.views.listAll', args=(request.POST['course_prefix'], request.POST['course_suffix'])))

@auth_view_wrapper
def read_exercise(request, course_prefix, course_suffix, exercise_name):
    try:
        common_page_data = get_common_page_data(request, course_prefix, course_suffix)
    except:
        raise Http404

    
    try:
        exercise = Exercise.objects.distinct().get(problemSet__course=common_page_data["course"], fileName=exercise_name)
    except Exercise.DoesNotExist:
        exercise = Exercise.objects.distinct().get(video__course=common_page_data["course"], fileName=exercise_name)
    # return the contents of the file as an HTTP response.  Trust that it's there.
    #
    # TODO: put exception handling around this, figure out how to handle S3 errors
    # (file not there...)
    return HttpResponse(exercise.file.file)


@auth_view_wrapper
def load_problem_set(request, course_prefix, course_suffix, pset_slug):
    try:
        common_page_data = get_common_page_data(request, course_prefix, course_suffix)
    except:
        raise Http404
    pset = ProblemSet.objects.get(course=common_page_data['course'], slug=pset_slug)
    psetToExs = ProblemSetToExercise.objects.getByProblemset(pset).select_related('exercise', 'problemSet')
    file_names = []
    for psetToEx in psetToExs:
        #Remove the .html from the end of the file name
        file_names.append(psetToEx.exercise.fileName[:-5])
    return render_to_response('problemsets/load_problem_set.html',{'file_names': file_names, 'assessment_type': pset.assessment_type},context_instance=RequestContext(request))

########NEW FILE########
__FILENAME__ = admin
from django.contrib import admin
from django.contrib.sites.models import RequestSite
from django.contrib.sites.models import Site
from django.utils.translation import ugettext_lazy as _

from registration.models import RegistrationProfile


class RegistrationAdmin(admin.ModelAdmin):
    actions = ['activate_users', 'resend_activation_email']
    list_display = ('user', 'activation_key_expired')
    raw_id_fields = ['user']
    search_fields = ('user__username', 'user__first_name', 'user__last_name')

    def activate_users(self, request, queryset):
        """
        Activates the selected users, if they are not alrady
        activated.
        
        """
        for profile in queryset:
            RegistrationProfile.objects.activate_user(profile.activation_key)
    activate_users.short_description = _("Activate users")

    def resend_activation_email(self, request, queryset):
        """
        Re-sends activation emails for the selected users.

        Note that this will *only* send activation emails for users
        who are eligible to activate; emails will not be sent to users
        whose activation keys have expired or who have already
        activated.
        
        """
        if Site._meta.installed:
            site = Site.objects.get_current()
        else:
            site = RequestSite(request)

        for profile in queryset:
            if not profile.activation_key_expired():
                profile.send_activation_email(site)
    resend_activation_email.short_description = _("Re-send activation emails")


admin.site.register(RegistrationProfile, RegistrationAdmin)

########NEW FILE########
__FILENAME__ = auth_urls
"""
URL patterns for the views included in ``django.contrib.auth``.

Including these URLs (via the ``include()`` directive) will set up the
following patterns based at whatever URL prefix they are included
under:

* User login at ``login/``.

* User logout at ``logout/``.

* The two-step password change at ``password/change/`` and
  ``password/change/done/``.

* The four-step password reset at ``password/reset/``,
  ``password/reset/confirm/``, ``password/reset/complete/`` and
  ``password/reset/done/``.

The default registration backend already has an ``include()`` for
these URLs, so under the default setup it is not necessary to manually
include these views. Other backends may or may not include them;
consult a specific backend's documentation for details.

"""

from registration.forms import *

from django.conf.urls.defaults import *

from django.contrib.auth import views as auth_views
from registration.login_wrapper import *
urlpatterns = patterns('',
                       url(r'^login/?$',
                           login,
                           {'template_name': 'registration/login.html'},
                           name='auth_login'),
                       url(r'^logout/?$',
                           auth_views.logout,
                           {'template_name': 'registration/logout.html',
                           'next_page': '/'},
                           name='auth_logout'),
                       url(r'^password/change/$',
                           password_change,
                           {'template_name': 'registration/password_change_form.html',
                             'password_change_form':PasswordChangeFormC2G},
                           name='auth_password_change'),
                       url(r'^password/change/done/$',
                           auth_views.password_change_done,
                           {'template_name': 'registration/password_change_done.html'},
                           name='auth_password_change_done'),
                       url(r'^password/reset/$',
                           auth_views.password_reset,
                           name='auth_password_reset'),
                       url(r'^password/reset/confirm/(?P<uidb36>[0-9A-Za-z]+)-(?P<token>.+)/$',
                           password_reset_confirm,
                           {'set_password_form':SetPasswordFormC2G},
                           name='auth_password_reset_confirm'),
                       url(r'^password/reset/complete/$',
                           auth_views.password_reset_complete,
                           name='auth_password_reset_complete'),
                       url(r'^password/reset/done/$',
                           auth_views.password_reset_done,
                           name='auth_password_reset_done'),
)

########NEW FILE########
__FILENAME__ = urls
"""
URLconf for registration and activation, using django-registration's
default backend.

If the default behavior of these views is acceptable to you, simply
use a line like this in your root URLconf to set up the default URLs
for registration::

    (r'^accounts/', include('registration.backends.default.urls')),

This will also automatically set up the views in
``django.contrib.auth`` at sensible default locations.

If you'd like to customize the behavior (e.g., by passing extra
arguments to the various views) or split up the URLs, feel free to set
up your own URL patterns for these views instead.

"""


from django.conf.urls.defaults import *
from django.views.generic.simple import direct_to_template

from registration.views import activate
from registration.views import register


urlpatterns = patterns('',
                       url(r'^activate/complete/$',
                           direct_to_template,
                           {'template': 'registration/activation_complete.html'},
                           name='registration_activation_complete'),
                       # Activation keys get matched by \w+ instead of the more specific
                       # [a-fA-F0-9]{40} because a bad activation key should still get to the view;
                       # that way it can return a sensible "invalid key" message instead of a
                       # confusing 404.
                       url(r'^activate/(?P<activation_key>\w+)/$',
                           activate,
                           {'backend': 'registration.backends.default.DefaultBackend'},
                           name='registration_activate'),
                       url(r'^register/$',
                           register,
                           {'backend': 'registration.backends.default.DefaultBackend'},
                           name='registration_register'),
                       url(r'^register/complete/$',
                           direct_to_template,
                           {'template': 'registration/registration_complete.html'},
                           name='registration_complete'),
                       url(r'^register/closed/$',
                           direct_to_template,
                           {'template': 'registration/registration_closed.html'},
                           name='registration_disallowed'),
                       (r'', include('registration.auth_urls')),
                       )

########NEW FILE########
__FILENAME__ = urls
"""
URLconf for registration and activation, using django-registration's
one-step backend.

If the default behavior of these views is acceptable to you, simply
use a line like this in your root URLconf to set up the default URLs
for registration::

    (r'^accounts/', include('registration.backends.simple.urls')),

This will also automatically set up the views in
``django.contrib.auth`` at sensible default locations.

If you'd like to customize the behavior (e.g., by passing extra
arguments to the various views) or split up the URLs, feel free to set
up your own URL patterns for these views instead.

"""


from django.conf.urls.defaults import *
from django.views.generic.simple import direct_to_template

from registration.views import activate
from registration.views import register


urlpatterns = patterns('',
                       url(r'^register/?$',
                           register,
                           {'backend': 'registration.backends.simple.SimpleBackend'},
                           name='registration_register'),
                       url(r'^register/closed/$',
                           direct_to_template,
                           {'template': 'registration/registration_closed.html'},
                           name='registration_disallowed'),
                       (r'', include('registration.auth_urls')),
                       )

########NEW FILE########
__FILENAME__ = forms
"""Forms and validation code for user registration."""

import datetime
import logging
logger = logging.getLogger('form')
 
from django import forms
from django.contrib.auth.forms import SetPasswordForm
from django.contrib.auth.models import User
from django.utils.translation import ugettext_lazy as _

# I put this on all required fields, because it's easier to pick up
# on them with CSS or JavaScript if they have a class of "required"
# in the HTML. Your mileage may vary. If/when Django ticket #3515
# lands in trunk, this will no longer be necessary.
attrs_dict = {'class': 'required'}


class RegistrationForm(forms.Form):
    """
    Form for registering a new user account.
    
    Validates that the requested username is not already in use, and
    requires the password to be entered twice to catch typos.
    
    Subclasses should feel free to add any additional validation they
    need, but should avoid defining a ``save()`` method -- the actual
    saving of collected user data is delegated to the active
    registration backend.
    
    """
    username = forms.RegexField(regex=r'^[\w.@+-]+$',
                                max_length=30,
                                widget=forms.TextInput(attrs=dict(attrs_dict,placeholder='')),
                                label=_("Choose a Username*"),
                                error_messages={'invalid': _("This value may contain only letters, numbers and @/./+/-/_ characters. No spaces.")})
    email = forms.EmailField(widget=forms.TextInput(attrs=dict(attrs_dict,
                                                               maxlength=75)),
                             label=_("E-mail*"))
    first_name = forms.RegexField(regex=r'^[\w\' -]+$',
                                  max_length=30,
                                  widget=forms.TextInput(attrs=attrs_dict),
                                  label=_("First Name*"),
                                  error_messages={'invalid': _("This value may contain only letters, spaces, dashes, and apostrophes.")})
    last_name = forms.RegexField(regex=r'^[\w\' -]+$',
                                  max_length=30,
                                  widget=forms.TextInput(attrs=attrs_dict),
                                  label=_("Last Name*"),
                                  error_messages={'invalid': _("This value may contain only letters, spaces, dashes, and apostrophes.")})
    max_age=110
    min_age=10
    first_year=datetime.date.today().year-max_age
    last_year=datetime.date.today().year-min_age
    YEARS=map(lambda y: (str(y),str(y)), range(last_year, first_year, -1))
    YEARS.insert(0,('decline',''))
    birth_year = forms.ChoiceField(label=_("Year of birth"),
                                   required=False,
                                   choices=YEARS)
    gender = forms.ChoiceField(label=_("Gender"), 
                               required=False,
                               choices=(('decline',''),
                                        ("Female","Female"),
                                        ("Male","Male"),
                                        ("Non-Traditional","Non-Traditional")))
    education = forms.ChoiceField(label=_("Highest degree received"), 
                                  required=False,
                                  choices=(('decline',''),
                                           ('Doctorate','Doctorate'),
                                           ('MastersOrProfessional','Masters or Professional'),
                                           ('Bachelors','Bachelors'),
                                           ('Associate','Associate'),
                                           ('HighSchool','Secondary/High School'),
                                           ('Middle','Middle school/Jr. High'),
                                           ('Elementary','Elementary'),
                                           ('None','None'),
                                           ('Other','Other'),))
    work = forms.ChoiceField(label=_("I am currently"), 
                             required=False,
                             choices=(('decline',''),
                                      ('undergrad','An undergraduate'),
                                      ('gradStudent','A graduate student'),
                                      ('HSStudent','A high school (or younger) student'),
                                      ('Unemployed','Unemployed'),
                                      ('Retired','Retired'),
                                      ('----','-------------------'),
                                      ('Software','In the software industry'),
                                      ('Hardware','In the hardware industry'),
                                      ('Legal','In the legal industry'),
                                      ('K12','In K-12 education'),
                                      ('PostSecondary','In post-secondary education'),
                                      ('ArtsDesignArchEntertainment','In the arts, design, architecture or entertainment industries'),
                                      ('LifePhysSci','In the life or physical sciences'),
                                      ('Healthcare','In the healthcare industry'),
                                      ('SocialServices','In social services'),
                                      ('RetailServicesTransportationFood','In the retail service, transportation or food industries'),
                                      ('ManufacturingConstruction','In manufacturing or construction'),
                                      ('AnotherIndustry','In another industry'),
                                      ('Other','Other'),))

    password1 = forms.RegexField(regex=r'(?=.*\d)',
                                 min_length=6,
                                 widget=forms.PasswordInput(attrs=attrs_dict, render_value=False),
                                 label=_("Password*"),
                                 error_messages={'invalid': _("Your password must contain at least one number (0-9)."), 'min_length': _("Your password must be at least 6 characters")})
    password2 = forms.CharField(widget=forms.PasswordInput(attrs=attrs_dict, render_value=False),
                                label=_("Password (again)*"))
    
    tos = forms.BooleanField(widget=forms.CheckboxInput(attrs=attrs_dict),
                                 label=_(u'I have read and agree to the Honor Code and Terms of Service'),
                                 error_messages={'required': _("You must agree in order to register.")})

    course_prefix = forms.CharField(widget=forms.HiddenInput(),required=False)
    course_suffix = forms.CharField(widget=forms.HiddenInput(),required=False)
    invite = forms.CharField(widget=forms.HiddenInput(),required=False)
    
    def clean_username(self):
        """Verify username is alphanumeric and not already in use."""
        existing = User.objects.filter(username__iexact=self.cleaned_data['username'])
        if existing.exists():
            raise forms.ValidationError(_("A user with that username already exists."))
        else:
            return self.cleaned_data['username']

    def clean_password2(self):
        """Verify both password fields match."""
        password1 = self.cleaned_data.get('password1', '')
        password2 = self.cleaned_data.get('password2', '')
        if not password2:
            raise forms.ValidationError(_("You must confirm your password."))
        if password1 != password2:
            raise forms.ValidationError(_("The two password fields didn't match."))
        return password2

#    def clean(self):
#        """
#        Verifiy that the values entered into the two password fields
#        match. Note that an error here will end up in
#        ``non_field_errors()`` because it doesn't apply to a single
#        field.
#        
#        """
#        #logger.info(self.cleaned_data['first_name'])
#        if 'password1' in self.cleaned_data and 'password2' in self.cleaned_data:
#            if self.cleaned_data['password1'] != self.cleaned_data['password2']:
#                raise forms.ValidationError(_("The two password fields didn't match."))
#        return self.cleaned_data


class RegistrationFormTermsOfService(RegistrationForm):
    """
    Subclass of ``RegistrationForm`` which adds a required checkbox
    for agreeing to a site's Terms of Service.
    
    """
    tos = forms.BooleanField(widget=forms.CheckboxInput(attrs=attrs_dict),
                             label=_(u'I have read and agree to the Terms of Service'),
                             error_messages={'required': _("You must agree to the terms to register.")})


class RegistrationFormUniqueEmail(RegistrationForm):
    """
    Subclass of ``RegistrationForm`` which enforces uniqueness of
    email addresses.
    
    """
    def clean_email(self):
        """
        Validate that the supplied email address is unique for the
        site.
        
        """
        if User.objects.filter(email__iexact=self.cleaned_data['email']):
            raise forms.ValidationError(_("This email address is already in use. Please supply a different email address."))
        return self.cleaned_data['email']


class RegistrationFormNoFreeEmail(RegistrationForm):
    """
    Subclass of ``RegistrationForm`` which disallows registration with
    email addresses from popular free webmail services; moderately
    useful for preventing automated spam registrations.
    
    To change the list of banned domains, subclass this form and
    override the attribute ``bad_domains``.
    
    """
    bad_domains = ['aim.com', 'aol.com', 'email.com', 'gmail.com',
                   'googlemail.com', 'hotmail.com', 'hushmail.com',
                   'msn.com', 'mail.ru', 'mailinator.com', 'live.com',
                   'yahoo.com']
    
    def clean_email(self):
        """
        Check the supplied email address against a list of known free
        webmail domains.
        
        """
        email_domain = self.cleaned_data['email'].split('@')[1]
        if email_domain in self.bad_domains:
            raise forms.ValidationError(_("Registration using free email addresses is prohibited. Please supply a different email address."))
        return self.cleaned_data['email']


class SetPasswordFormC2G(SetPasswordForm):
 #   """
 #       A form that lets a user change set his/her password without entering the
 #       old password
 #       """
    
    new_password1 = forms.RegexField(regex=r'(?=.*\d)',
                                  min_length=6,
                                 widget=forms.PasswordInput(attrs=attrs_dict, render_value=False),
                                label=_("Password*"),
                                error_messages={'invalid': _("Your password must contain at least one number (0-9)."), 'min_length': _("Your password must be at least 6 characters")})
    
    
    def __init__(self, user, *args, **kwargs):
        self.user = user
        super(SetPasswordForm, self).__init__(*args, **kwargs)


class PasswordChangeFormC2G(SetPasswordFormC2G):
    """
        A form that lets a user change his/her password by entering
        their old password.
        """
    error_messages = dict(SetPasswordFormC2G.error_messages, **{
                          'password_incorrect': _("Your old password was entered incorrectly. "
                                                  "Please enter it again."),
                          })
    old_password = forms.CharField(label=_("Old password"),
                                   widget=forms.PasswordInput)
    
    def clean_old_password(self):
        """
            Validates that the old_password field is correct.
            """
        old_password = self.cleaned_data["old_password"]
        if not self.user.check_password(old_password):
            raise forms.ValidationError(
                                        self.error_messages['password_incorrect'])
        return old_password
PasswordChangeFormC2G.base_fields.keyOrder = ['old_password', 'new_password1',
                                           'new_password2']


#######################################################################################

########NEW FILE########
__FILENAME__ = login_wrapper
from django.contrib.auth import views as auth_views

from django.views.decorators.debug import sensitive_post_parameters
from django.views.decorators.cache import never_cache
from django.views.decorators.csrf import csrf_protect

from django.contrib.auth import REDIRECT_FIELD_NAME
from django.contrib.auth.forms import AuthenticationForm, PasswordChangeForm, SetPasswordForm
from c2g.util import upgrade_to_https_and_downgrade_upon_redirect
from django.contrib.auth.tokens import default_token_generator
from django.contrib.auth.decorators import login_required


@sensitive_post_parameters()
@csrf_protect
@never_cache
@upgrade_to_https_and_downgrade_upon_redirect #here's the https wrapper
def login(request, template_name='registration/login.html',
                   redirect_field_name=REDIRECT_FIELD_NAME,
                   authentication_form=AuthenticationForm,
                   current_app=None, extra_context=None):
    return auth_views.login(request, template_name=template_name, redirect_field_name=redirect_field_name,  authentication_form=authentication_form, current_app=current_app, extra_context=extra_context)
    


@sensitive_post_parameters()
@csrf_protect
@login_required
@upgrade_to_https_and_downgrade_upon_redirect #here's the https wrapper
def password_change(request,
                   template_name='registration/password_change_form.html',
                   post_change_redirect=None,
                   password_change_form=PasswordChangeForm,
                   current_app=None, extra_context=None):
    return auth_views.password_change(request, template_name=template_name, post_change_redirect=post_change_redirect,
                                     password_change_form=password_change_form,current_app=current_app,
                                     extra_context=extra_context)


@sensitive_post_parameters()
@never_cache
@upgrade_to_https_and_downgrade_upon_redirect #here's the https wrapper
def password_reset_confirm(request, uidb36=None, token=None,
                           template_name='registration/password_reset_confirm.html',
                           token_generator=default_token_generator,
                           set_password_form=SetPasswordForm,
                           post_reset_redirect=None,
                           current_app=None, extra_context=None):
    return auth_views.password_reset_confirm(request, uidb36=uidb36, token=token, template_name=template_name,
                                             token_generator=token_generator, set_password_form=set_password_form,
                                             post_reset_redirect=post_reset_redirect, current_app=current_app,
                                             extra_context=extra_context)

########NEW FILE########
__FILENAME__ = cleanupregistration
"""
A management command which deletes expired accounts (e.g.,
accounts which signed up but never activated) from the database.

Calls ``RegistrationProfile.objects.delete_expired_users()``, which
contains the actual logic for determining which accounts are deleted.

"""

from django.core.management.base import NoArgsCommand

from registration.models import RegistrationProfile


class Command(NoArgsCommand):
    help = "Delete expired user registrations from the database"

    def handle_noargs(self, **options):
        RegistrationProfile.objects.delete_expired_users()

########NEW FILE########
__FILENAME__ = models
import datetime
import hashlib
import random
import re

from django.conf import settings
from django.contrib.auth.models import User
from django.db import models
from django.db import transaction
from django.template.loader import render_to_string
from django.utils.translation import ugettext_lazy as _

try:
    from django.utils.timezone import now as datetime_now
except ImportError:
    datetime_now = datetime.datetime.now


SHA1_RE = re.compile('^[a-f0-9]{40}$')


class RegistrationManager(models.Manager):
    """
    Custom manager for the ``RegistrationProfile`` model.
    
    The methods defined here provide shortcuts for account creation
    and activation (including generation and emailing of activation
    keys), and for cleaning out expired inactive accounts.
    
    """
    def activate_user(self, activation_key):
        """
        Validate an activation key and activate the corresponding
        ``User`` if valid.
        
        If the key is valid and has not expired, return the ``User``
        after activating.
        
        If the key is not valid or has expired, return ``False``.
        
        If the key is valid but the ``User`` is already active,
        return ``False``.
        
        To prevent reactivation of an account which has been
        deactivated by site administrators, the activation key is
        reset to the string constant ``RegistrationProfile.ACTIVATED``
        after successful activation.

        """
        # Make sure the key we're trying conforms to the pattern of a
        # SHA1 hash; if it doesn't, no point trying to look it up in
        # the database.
        if SHA1_RE.search(activation_key):
            try:
                profile = self.get(activation_key=activation_key)
            except self.model.DoesNotExist:
                return False
            if not profile.activation_key_expired():
                user = profile.user
                user.is_active = True
                user.save()
                profile.activation_key = self.model.ACTIVATED
                profile.save()
                return user
        return False
    
    def create_inactive_user(self, username, email, password,
                             site, send_email=True):
        """
        Create a new, inactive ``User``, generate a
        ``RegistrationProfile`` and email its activation key to the
        ``User``, returning the new ``User``.

        By default, an activation email will be sent to the new
        user. To disable this, pass ``send_email=False``.
        
        """
        new_user = User.objects.create_user(username, email, password)
        new_user.is_active = False
        new_user.save()

        registration_profile = self.create_profile(new_user)

        if send_email:
            registration_profile.send_activation_email(site)

        return new_user
    create_inactive_user = transaction.commit_on_success(create_inactive_user)

    def create_profile(self, user):
        """
        Create a ``RegistrationProfile`` for a given
        ``User``, and return the ``RegistrationProfile``.
        
        The activation key for the ``RegistrationProfile`` will be a
        SHA1 hash, generated from a combination of the ``User``'s
        username and a random salt.
        
        """
        salt = hashlib.sha1(str(random.random())).hexdigest()[:5]
        username = user.username
        if isinstance(username, unicode):
            username = username.encode('utf-8')
        activation_key = hashlib.sha1(salt+username).hexdigest()
        return self.create(user=user,
                           activation_key=activation_key)
        
    def delete_expired_users(self):
        """
        Remove expired instances of ``RegistrationProfile`` and their
        associated ``User``s.
        
        Accounts to be deleted are identified by searching for
        instances of ``RegistrationProfile`` with expired activation
        keys, and then checking to see if their associated ``User``
        instances have the field ``is_active`` set to ``False``; any
        ``User`` who is both inactive and has an expired activation
        key will be deleted.
        
        It is recommended that this method be executed regularly as
        part of your routine site maintenance; this application
        provides a custom management command which will call this
        method, accessible as ``manage.py cleanupregistration``.
        
        Regularly clearing out accounts which have never been
        activated serves two useful purposes:
        
        1. It alleviates the ocasional need to reset a
           ``RegistrationProfile`` and/or re-send an activation email
           when a user does not receive or does not act upon the
           initial activation email; since the account will be
           deleted, the user will be able to simply re-register and
           receive a new activation key.
        
        2. It prevents the possibility of a malicious user registering
           one or more accounts and never activating them (thus
           denying the use of those usernames to anyone else); since
           those accounts will be deleted, the usernames will become
           available for use again.
        
        If you have a troublesome ``User`` and wish to disable their
        account while keeping it in the database, simply delete the
        associated ``RegistrationProfile``; an inactive ``User`` which
        does not have an associated ``RegistrationProfile`` will not
        be deleted.
        
        """
        for profile in self.all():
            try:
                if profile.activation_key_expired():
                    user = profile.user
                    if not user.is_active:
                        user.delete()
                        profile.delete()
            except User.DoesNotExist:
                profile.delete()

class RegistrationProfile(models.Model):
    """
    A simple profile which stores an activation key for use during
    user account registration.
    
    Generally, you will not want to interact directly with instances
    of this model; the provided manager includes methods
    for creating and activating new accounts, as well as for cleaning
    out accounts which have never been activated.
    
    While it is possible to use this model as the value of the
    ``AUTH_PROFILE_MODULE`` setting, it's not recommended that you do
    so. This model's sole purpose is to store data temporarily during
    account registration and activation.
    
    """
    ACTIVATED = u"ALREADY_ACTIVATED"
    
    user = models.ForeignKey(User, unique=True, verbose_name=_('user'))
    activation_key = models.CharField(_('activation key'), max_length=40)
    
    objects = RegistrationManager()
    
    class Meta:
        verbose_name = _('registration profile')
        verbose_name_plural = _('registration profiles')
    
    def __unicode__(self):
        return u"Registration information for %s" % self.user
    
    def activation_key_expired(self):
        """
        Determine whether this ``RegistrationProfile``'s activation
        key has expired, returning a boolean -- ``True`` if the key
        has expired.
        
        Key expiration is determined by a two-step process:
        
        1. If the user has already activated, the key will have been
           reset to the string constant ``ACTIVATED``. Re-activating
           is not permitted, and so this method returns ``True`` in
           this case.

        2. Otherwise, the date the user signed up is incremented by
           the number of days specified in the setting
           ``ACCOUNT_ACTIVATION_DAYS`` (which should be the number of
           days after signup during which a user is allowed to
           activate their account); if the result is less than or
           equal to the current date, the key has expired and this
           method returns ``True``.
        
        """
        expiration_date = datetime.timedelta(days=settings.ACCOUNT_ACTIVATION_DAYS)
        return self.activation_key == self.ACTIVATED or \
               (self.user.date_joined + expiration_date <= datetime_now())
    activation_key_expired.boolean = True

    def send_activation_email(self, site):
        """
        Send an activation email to the user associated with this
        ``RegistrationProfile``.
        
        The activation email will make use of two templates:

        ``registration/activation_email_subject.txt``
            This template will be used for the subject line of the
            email. Because it is used as the subject line of an email,
            this template's output **must** be only a single line of
            text; output longer than one line will be forcibly joined
            into only a single line.

        ``registration/activation_email.txt``
            This template will be used for the body of the email.

        These templates will each receive the following context
        variables:

        ``activation_key``
            The activation key for the new account.

        ``expiration_days``
            The number of days remaining during which the account may
            be activated.

        ``site``
            An object representing the site on which the user
            registered; depending on whether ``django.contrib.sites``
            is installed, this may be an instance of either
            ``django.contrib.sites.models.Site`` (if the sites
            application is installed) or
            ``django.contrib.sites.models.RequestSite`` (if
            not). Consult the documentation for the Django sites
            framework for details regarding these objects' interfaces.

        """
        ctx_dict = {'activation_key': self.activation_key,
                    'expiration_days': settings.ACCOUNT_ACTIVATION_DAYS,
                    'site': site}
        subject = render_to_string('registration/activation_email_subject.txt',
                                   ctx_dict)
        # Email subject *must not* contain newlines
        subject = ''.join(subject.splitlines())
        
        message = render_to_string('registration/activation_email.txt',
                                   ctx_dict)
        
        self.user.email_user(subject, message, settings.DEFAULT_FROM_EMAIL)
    

########NEW FILE########
__FILENAME__ = signals
from django.dispatch import Signal


# A new user has registered.
user_registered = Signal(providing_args=["user", "request"])

# A user has activated his or her account.
user_activated = Signal(providing_args=["user", "request"])

########NEW FILE########
__FILENAME__ = backends
import datetime

from django.conf import settings
from django.contrib import admin
from django.contrib.auth.models import User
from django.contrib.sessions.middleware import SessionMiddleware
from django.contrib.sites.models import Site
from django.core import mail
from django.core.exceptions import ImproperlyConfigured
from django.core.handlers.wsgi import WSGIRequest
from django.core.urlresolvers import reverse

from django.test import Client
from django.test import TestCase

from registration import forms
from registration import signals
from registration.admin import RegistrationAdmin
from registration.backends import get_backend
from registration.backends.default import DefaultBackend
from registration.backends.simple import SimpleBackend
from registration.models import RegistrationProfile


class _MockRequestClient(Client):
    """
    A ``django.test.Client`` subclass which can return mock
    ``HttpRequest`` objects.
    
    """
    def request(self, **request):
        """
        Rather than issuing a request and returning the response, this
        simply constructs an ``HttpRequest`` object and returns it.
        
        """
        environ = {
            'HTTP_COOKIE': self.cookies,
            'PATH_INFO': '/',
            'QUERY_STRING': '',
            'REMOTE_ADDR': '127.0.0.1',
            'REQUEST_METHOD': 'GET',
            'SCRIPT_NAME': '',
            'SERVER_NAME': 'testserver',
            'SERVER_PORT': '80',
            'SERVER_PROTOCOL': 'HTTP/1.1',
            'wsgi.version': (1,0),
            'wsgi.url_scheme': 'http',
            'wsgi.errors': self.errors,
            'wsgi.multiprocess':True,
            'wsgi.multithread': False,
            'wsgi.run_once': False,
            'wsgi.input': None,
            }
        environ.update(self.defaults)
        environ.update(request)
        request = WSGIRequest(environ)

        # We have to manually add a session since we'll be bypassing
        # the middleware chain.
        session_middleware = SessionMiddleware()
        session_middleware.process_request(request)
        return request


def _mock_request():
    """
    Construct and return a mock ``HttpRequest`` object; this is used
    in testing backend methods which expect an ``HttpRequest`` but
    which are not being called from views.
    
    """
    return _MockRequestClient().request()


class BackendRetrievalTests(TestCase):
    """
    Test that utilities for retrieving the active backend work
    properly.

    """
    def test_get_backend(self):
        """
        Verify that ``get_backend()`` returns the correct value when
        passed a valid backend.

        """
        self.failUnless(isinstance(get_backend('registration.backends.default.DefaultBackend'),
                                   DefaultBackend))

    def test_backend_error_invalid(self):
        """
        Test that a nonexistent/unimportable backend raises the
        correct exception.

        """
        self.assertRaises(ImproperlyConfigured, get_backend,
                          'registration.backends.doesnotexist.NonExistentBackend')

    def test_backend_attribute_error(self):
        """
        Test that a backend module which exists but does not have a
        class of the specified name raises the correct exception.
        
        """
        self.assertRaises(ImproperlyConfigured, get_backend,
                          'registration.backends.default.NonexistentBackend')


class DefaultRegistrationBackendTests(TestCase):
    """
    Test the default registration backend.

    Running these tests successfully will require two templates to be
    created for the sending of activation emails; details on these
    templates and their contexts may be found in the documentation for
    the default backend.

    """
    backend = DefaultBackend()
    urls = 'registration.tests.urls_default'
    def setUp(self):
        """
        Create an instance of the default backend for use in testing,
        and set ``ACCOUNT_ACTIVATION_DAYS`` if it's not set already.

        """
        self.old_activation = getattr(settings, 'ACCOUNT_ACTIVATION_DAYS', None)
        if self.old_activation is None:
            settings.ACCOUNT_ACTIVATION_DAYS = 7 # pragma: no cover

    def tearDown(self):
        """
        Yank out ``ACCOUNT_ACTIVATION_DAYS`` back out if it wasn't
        originally set.

        """
        if self.old_activation is None:
            settings.ACCOUNT_ACTIVATION_DAYS = self.old_activation # pragma: no cover

    def test_registration(self):
        """
        Test the registration process: registration creates a new
        inactive account and a new profile with activation key,
        populates the correct account data and sends an activation
        email.

        """
        new_user = self.backend.register(_mock_request(),
                                         username='bob',
                                         first_name='bob',
                                         last_name='flambeur',
                                         email='bob@example.com',
                                         password1='secret')

        # Details of the returned user must match what went in.
        self.assertEqual(new_user.username, 'bob')
        self.failUnless(new_user.check_password('secret'))
        self.assertEqual(new_user.email, 'bob@example.com')

        # New user must not be active.
        self.failIf(new_user.is_active)

        # A registration profile was created, and an activation email
        # was sent.
        self.assertEqual(RegistrationProfile.objects.count(), 1)
        self.assertEqual(len(mail.outbox), 1)

    def test_registration_no_sites(self):
        """
        Test that registration still functions properly when
        ``django.contrib.sites`` is not installed; the fallback will
        be a ``RequestSite`` instance.
        
        """
        Site._meta.installed = False
        new_user = self.backend.register(_mock_request(),
                                         username='bob',
                                         first_name='bob',
                                         last_name='flambeur',
                                         email='bob@example.com',
                                         password1='secret')

        self.assertEqual(new_user.username, 'bob')
        self.failUnless(new_user.check_password('secret'))
        self.assertEqual(new_user.email, 'bob@example.com')

        self.failIf(new_user.is_active)

        self.assertEqual(RegistrationProfile.objects.count(), 1)
        self.assertEqual(len(mail.outbox), 1)
        
        Site._meta.installed = True

    def test_valid_activation(self):
        """
        Test the activation process: activating within the permitted
        window sets the account's ``is_active`` field to ``True`` and
        resets the activation key.

        """
        valid_user = self.backend.register(_mock_request(),
                                           username='alice',
                                           email='alice@example.com',
                                           first_name='alice',
                                           last_name='wonderland',
                                           password1='swordfish')

        valid_profile = RegistrationProfile.objects.get(user=valid_user)
        activated = self.backend.activate(_mock_request(),
                                          valid_profile.activation_key)
        self.assertEqual(activated.username, valid_user.username)
        self.failUnless(activated.is_active)

        # Fetch the profile again to verify its activation key has
        # been reset.
        valid_profile = RegistrationProfile.objects.get(user=valid_user)
        self.assertEqual(valid_profile.activation_key,
                         RegistrationProfile.ACTIVATED)

    def test_invalid_activation(self):
        """
        Test the activation process: trying to activate outside the
        permitted window fails, and leaves the account inactive.

        """
        expired_user = self.backend.register(_mock_request(),
                                             username='bob',
                                             email='bob@example.com',
                                             first_name='bob',
                                             last_name='flambeur',
                                             password1='secret')

        expired_user.date_joined = expired_user.date_joined - datetime.timedelta(days=settings.ACCOUNT_ACTIVATION_DAYS)
        expired_user.save()
        expired_profile = RegistrationProfile.objects.get(user=expired_user)
        self.failIf(self.backend.activate(_mock_request(),
                                          expired_profile.activation_key))
        self.failUnless(expired_profile.activation_key_expired())

    def test_allow(self):
        """
        Test that the setting ``REGISTRATION_OPEN`` appropriately
        controls whether registration is permitted.

        """
        old_allowed = getattr(settings, 'REGISTRATION_OPEN', True)
        settings.REGISTRATION_OPEN = True
        self.failUnless(self.backend.registration_allowed(_mock_request()))

        settings.REGISTRATION_OPEN = False
        self.failIf(self.backend.registration_allowed(_mock_request()))
        settings.REGISTRATION_OPEN = old_allowed

    def test_form_class(self):
        """
        Test that the default form class returned is
        ``registration.forms.RegistrationForm``.

        """
        self.failUnless(self.backend.get_form_class(_mock_request()) is forms.RegistrationForm)

    def test_post_registration_redirect(self):
        """
        Test that the default post-registration redirect is the named
        pattern ``registration_complete``.

        """
        self.assertEqual(self.backend.post_registration_redirect(_mock_request(), User()),
                         ('registration_complete', (), {}))

    def test_registration_signal(self):
        """
        Test that registering a user sends the ``user_registered``
        signal.
        
        """
        def receiver(sender, **kwargs):
            self.failUnless('user' in kwargs)
            self.assertEqual(kwargs['user'].username, 'bob')
            self.failUnless('request' in kwargs)
            self.failUnless(isinstance(kwargs['request'], WSGIRequest))
            received_signals.append(kwargs.get('signal'))

        received_signals = []
        signals.user_registered.connect(receiver, sender=self.backend.__class__)

        self.backend.register(_mock_request(),
                              username='bob',
                              first_name='bob',
                              last_name='flambeur',
                              email='bob@example.com',
                              password1='secret')

        self.assertEqual(len(received_signals), 1)
        self.assertEqual(received_signals, [signals.user_registered])

    def test_activation_signal_success(self):
        """
        Test that successfully activating a user sends the
        ``user_activated`` signal.
        
        """
        def receiver(sender, **kwargs):
            self.failUnless('user' in kwargs)
            self.assertEqual(kwargs['user'].username, 'bob')
            self.failUnless('request' in kwargs)
            self.failUnless(isinstance(kwargs['request'], WSGIRequest))
            received_signals.append(kwargs.get('signal'))

        received_signals = []
        signals.user_activated.connect(receiver, sender=self.backend.__class__)

        new_user = self.backend.register(_mock_request(),
                                         username='bob',
                                         first_name='bob',
                                         last_name='flambeur',
                                         email='bob@example.com',
                                         password1='secret')
        profile = RegistrationProfile.objects.get(user=new_user)
        self.backend.activate(_mock_request(), profile.activation_key)

        self.assertEqual(len(received_signals), 1)
        self.assertEqual(received_signals, [signals.user_activated])

    def test_activation_signal_failure(self):
        """
        Test that an unsuccessful activation attempt does not send the
        ``user_activated`` signal.
        
        """
        receiver = lambda sender, **kwargs: received_signals.append(kwargs.get('signal'))

        received_signals = []
        signals.user_activated.connect(receiver, sender=self.backend.__class__)

        new_user = self.backend.register(_mock_request(),
                                         username='bob',
                                         first_name='bob',
                                         last_name='flambeur',
                                         email='bob@example.com',
                                         password1='secret')
        new_user.date_joined -= datetime.timedelta(days=settings.ACCOUNT_ACTIVATION_DAYS + 1)
        new_user.save()
        profile = RegistrationProfile.objects.get(user=new_user)
        self.backend.activate(_mock_request(), profile.activation_key)

        self.assertEqual(len(received_signals), 0)

    def test_email_send_action(self):
        """
        Test re-sending of activation emails via admin action.
        
        """
        admin_class = RegistrationAdmin(RegistrationProfile, admin.site)
        
        alice = self.backend.register(_mock_request(),
                                      username='alice',
                                      first_name='alice',
                                      last_name='wonderland',
                                      email='alice@example.com',
                                      password1='swordfish')
        
        admin_class.resend_activation_email(_mock_request(),
                                            RegistrationProfile.objects.all())
        self.assertEqual(len(mail.outbox), 2) # One on registering, one more on the resend.
        
        RegistrationProfile.objects.filter(user=alice).update(activation_key=RegistrationProfile.ACTIVATED)
        admin_class.resend_activation_email(_mock_request(),
                                            RegistrationProfile.objects.all())
        self.assertEqual(len(mail.outbox), 2) # No additional email because the account has activated.

    def test_email_send_action_no_sites(self):
        """
        Test re-sending of activation emails via admin action when
        ``django.contrib.sites`` is not installed; the fallback will
        be a ``RequestSite`` instance.
        
        """
        Site._meta.installed = False
        admin_class = RegistrationAdmin(RegistrationProfile, admin.site)
        
        alice = self.backend.register(_mock_request(),
                                      username='alice',
                                      first_name='alice',
                                      last_name='wonderland',
                                      email='alice@example.com',
                                      password1='swordfish')
        
        admin_class.resend_activation_email(_mock_request(),
                                            RegistrationProfile.objects.all())
        self.assertEqual(len(mail.outbox), 2) # One on registering, one more on the resend.
        
        RegistrationProfile.objects.filter(user=alice).update(activation_key=RegistrationProfile.ACTIVATED)
        admin_class.resend_activation_email(_mock_request(),
                                            RegistrationProfile.objects.all())
        self.assertEqual(len(mail.outbox), 2) # No additional email because the account has activated.
        Site._meta.installed = True

    def test_activation_action(self):
        """
        Test manual activation of users view admin action.
        
        """
        admin_class = RegistrationAdmin(RegistrationProfile, admin.site)

        alice = self.backend.register(_mock_request(),
                                      username='alice',
                                      first_name='alice',
                                      last_name='wonderland',
                                      email='alice@example.com',
                                      password1='swordfish')

        admin_class.activate_users(_mock_request(),
                                   RegistrationProfile.objects.all())
        self.failUnless(User.objects.get(username='alice').is_active)


class SimpleRegistrationBackendTests(TestCase):
    """
    Test the simple registration backend, which does signup and
    immediate activation.
    
    """
    backend = SimpleBackend()
    
    def test_registration(self):
        """
        Test the registration process: registration creates a new
        inactive account and a new profile with activation key,
        populates the correct account data and sends an activation
        email.

        """
        new_user = self.backend.register(_mock_request(),
                                         username='bob',
                                         first_name='bob',
                                         last_name='flambeur',
                                         email='bob@example.com',
                                         password1='secret')

        # Details of the returned user must match what went in.
        self.assertEqual(new_user.username, 'bob')
        self.failUnless(new_user.check_password('secret'))
        self.assertEqual(new_user.email, 'bob@example.com')

        # New user must not be active.
        self.failUnless(new_user.is_active)

    def test_allow(self):
        """
        Test that the setting ``REGISTRATION_OPEN`` appropriately
        controls whether registration is permitted.

        """
        old_allowed = getattr(settings, 'REGISTRATION_OPEN', True)
        settings.REGISTRATION_OPEN = True
        self.failUnless(self.backend.registration_allowed(_mock_request()))

        settings.REGISTRATION_OPEN = False
        self.failIf(self.backend.registration_allowed(_mock_request()))
        settings.REGISTRATION_OPEN = old_allowed

    def test_form_class(self):
        """
        Test that the default form class returned is
        ``registration.forms.RegistrationForm``.

        """
        self.failUnless(self.backend.get_form_class(_mock_request()) is forms.RegistrationForm)

    def test_post_registration_redirect(self):
        """
        Test that the default post-registration redirect is the public
        URL of the new user account.

        """
        new_user = self.backend.register(_mock_request(),
                                         username='bob',
                                         first_name='bob',
                                         last_name='flambeur',
                                         email='bob@example.com',
                                         password1='secret')
        
        self.assertEqual(self.backend.post_registration_redirect(_mock_request(), new_user),
                         ('c2g.views.home', (), {}))

    def test_registration_signal(self):
        """
        Test that registering a user sends the ``user_registered``
        signal.
        
        """
        def receiver(sender, **kwargs):
            self.failUnless('user' in kwargs)
            self.assertEqual(kwargs['user'].username, 'bob')
            self.failUnless('request' in kwargs)
            self.failUnless(isinstance(kwargs['request'], WSGIRequest))
            received_signals.append(kwargs.get('signal'))

        received_signals = []
        signals.user_registered.connect(receiver, sender=self.backend.__class__)

        self.backend.register(_mock_request(),
                              username='bob',
                              first_name='bob',
                              last_name='flambeur',
                              email='bob@example.com',
                              password1='secret')

        self.assertEqual(len(received_signals), 1)
        self.assertEqual(received_signals, [signals.user_registered])

    def test_activation(self):
        """
        Test that activating against this backend is an error.
        
        """
        self.assertRaises(NotImplementedError, self.backend.activate,
                          request=_mock_request())

    def test_post_activation_redirect(self):
        """
        Test that asking for a post-activation redirect from this
        backend is an error.
        
        """
        self.assertRaises(NotImplementedError, self.backend.post_activation_redirect,
                          request=_mock_request(), user=User())

########NEW FILE########
__FILENAME__ = forms
# coding=utf-8

from django.contrib.auth.models import User
from django.test import TestCase

from registration import forms


class RegistrationFormTests(TestCase):
    """
    Test the default registration forms.

    """
    def setUp(self):
        self.__good_data = {'username':   'FooBar',
                            'email':      'foo@example.com',
                            'first_name': 'Foo_bury包',
                            'last_name':  "B'arr-Warr",
                            'password1':  'foobarbaz0',
                            'password2':  'foobarbaz0',
                            'tos':        'checked',}

    def test_registration_form(self):
        """Test ``RegistrationForm`` enforces username constraints and matching passwords."""
        # Create a user so we can verify that duplicate usernames aren't permitted.
        User.objects.create_user('alice', 'alice@example.com', 'secret')

        invalid_data_dicts = [
            # Non-alphanumeric username.
            {'data': {'username':   'foo/bar',
                      'email':      'foo@example.com',
                      'first_name': 'boo',
                      'last_name':  'bar',
                      'password1':  'foo',
                      'password2':  'foo'},
            'error': ('username', [u"This value may contain only letters, numbers and @/./+/-/_ characters. No spaces."])},
            # Non-alphabetic first name.
            {'data': {'username':   'foo/bar',
                      'email':      'foo@example.com',
                      'first_name': 'bo*o',
                      'last_name':  'bar',
                      'password1':  'foo',
                      'password2':  'foo'},
              'error': ('first_name', [u"This value may contain only letters, spaces, dashes, and apostrophes."])},
             # Non-alphabetic last name.
            {'data': {'username':   'foo/bar',
                      'email':      'foo@example.com',
                      'first_name': 'boo',
                      'last_name':  'ba}r',
                      'password1':  'foo',
                      'password2':  'foo'},
              'error': ('last_name', [u"This value may contain only letters, spaces, dashes, and apostrophes."])},
            # Already-existing username.
            {'data': {'username':   'alice',
                      'email':      'alice@example.com',
                      'first_name': 'alice',
                      'last_name':  'wonderland',
                      'password1':  'secret',
                      'password2':  'secret'},
            'error': ('username', [u"A user with that username already exists."])},
            # Mismatched passwords.
            {'data': {'username':   'foo',
                      'email':      'foo@example.com',
                      'first_name': 'alice',
                      'last_name':  'wonderland',
                      'password1':  'foo',
                      'password2':  'bar'},
            'error': ('password2', [u"The two password fields didn't match."])},
            ]

        for invalid_dict in invalid_data_dicts:
            form = forms.RegistrationForm(data=invalid_dict['data'])
            self.failIf(form.is_valid())
            self.assertEqual(form.errors[invalid_dict['error'][0]],
                             invalid_dict['error'][1])

    def test_correct_form_is_correct(self):
        """Test that a correct form with all required fields is valid"""
        form = forms.RegistrationForm(data = self.__good_data) 
        self.failUnless(form.is_valid())
            
    def test_registration_form_first_last(self):
        """Test that First and Last name fields are required"""
        no_firstname = self.__good_data
        no_lastname = self.__good_data
        del no_firstname['first_name']
        del no_firstname['last_name']
        form = forms.RegistrationForm(data=no_lastname)
        self.failIf(form.is_valid())
        self.assertEqual(form.errors['last_name'],
                         [u"This field is required."])
        form = forms.RegistrationForm(data=no_firstname)
        self.failIf(form.is_valid())
        self.assertEqual(form.errors['first_name'],
                         [u"This field is required."])

    def test_registration_form_tos(self):
        """Test that ``RegistrationFormTermsOfService`` requires agreement."""
        no_tos = self.__good_data
        del no_tos['tos']
        form = forms.RegistrationFormTermsOfService(data=no_tos)
        self.failIf(form.is_valid())
        self.assertEqual(form.errors['tos'], [u"You must agree to the terms to register."])

    def test_registration_form_unique_email(self):
        """Test that ``RegistrationFormUniqueEmail`` validates email uniqueness."""
        # Create a user so we can verify that duplicate addresses
        # aren't permitted.
        User.objects.create_user('alice', 'alice@example.com', 'secret')

        form = forms.RegistrationFormUniqueEmail(data={'username': 'AliceWhoForgot',
                                                       'email': 'alice@example.com',
                                                       'first_name': 'malice',
                                                       'last_name': 'palace',
                                                       'password1': 'foo',
                                                       'password2': 'foo'})
        self.failIf(form.is_valid())
        self.assertEqual(form.errors['email'],
                         [u"This email address is already in use. Please supply a different email address."])

    def test_registration_form_no_free_email(self):
        """
        Test that ``RegistrationFormNoFreeEmail`` disallows
        registration with free email addresses.

        """
        base_data = self.__good_data
        del base_data['email']
        for domain in forms.RegistrationFormNoFreeEmail.bad_domains:
            base_data['email'] = u"foo@%s" % domain
            form = forms.RegistrationFormNoFreeEmail(data=base_data)
            self.failIf(form.is_valid())
            self.assertEqual(form.errors['email'],
                             [u"Registration using free email addresses is prohibited. Please supply a different email address."])
            del base_data['email']

        base_data['email'] = 'foo@example.com'
        form = forms.RegistrationFormNoFreeEmail(data=base_data)
        self.failUnless(form.is_valid())

########NEW FILE########
__FILENAME__ = models
import datetime
import re

from django.conf import settings
from django.contrib.auth.models import User
from django.contrib.sites.models import Site
from django.core import mail
from django.core import management
from django.test import TestCase
from django.utils.hashcompat import sha_constructor

from registration.models import RegistrationProfile


class RegistrationModelTests(TestCase):
    """
    Test the model and manager used in the default backend.
    
    """
    user_info = {'username': 'alice',
                 'password': 'swordfish',
                 'email': 'alice@example.com'}
    urls = 'registration.tests.urls'
    
    def setUp(self):
        self.old_activation = getattr(settings, 'ACCOUNT_ACTIVATION_DAYS', None)
        settings.ACCOUNT_ACTIVATION_DAYS = 7

    def tearDown(self):
        settings.ACCOUNT_ACTIVATION_DAYS = self.old_activation

    def test_profile_creation(self):
        """
        Creating a registration profile for a user populates the
        profile with the correct user and a SHA1 hash to use as
        activation key.
        
        """
        new_user = User.objects.create_user(**self.user_info)
        profile = RegistrationProfile.objects.create_profile(new_user)

        self.assertEqual(RegistrationProfile.objects.count(), 1)
        self.assertEqual(profile.user.id, new_user.id)
        self.failUnless(re.match('^[a-f0-9]{40}$', profile.activation_key))
        self.assertEqual(unicode(profile),
                         "Registration information for alice")

    def test_activation_email(self):
        """
        ``RegistrationProfile.send_activation_email`` sends an
        email.
        
        """
        new_user = User.objects.create_user(**self.user_info)
        profile = RegistrationProfile.objects.create_profile(new_user)
        profile.send_activation_email(Site.objects.get_current())
        self.assertEqual(len(mail.outbox), 1)
        self.assertEqual(mail.outbox[0].to, [self.user_info['email']])

    def test_user_creation(self):
        """
        Creating a new user populates the correct data, and sets the
        user's account inactive.
        
        """
        new_user = RegistrationProfile.objects.create_inactive_user(site=Site.objects.get_current(),
                                                                    **self.user_info)
        self.assertEqual(new_user.username, 'alice')
        self.assertEqual(new_user.email, 'alice@example.com')
        self.failUnless(new_user.check_password('swordfish'))
        self.failIf(new_user.is_active)

    def test_user_creation_email(self):
        """
        By default, creating a new user sends an activation email.
        
        """
        new_user = RegistrationProfile.objects.create_inactive_user(site=Site.objects.get_current(),
                                                                    **self.user_info)
        self.assertEqual(len(mail.outbox), 1)

    def test_user_creation_no_email(self):
        """
        Passing ``send_email=False`` when creating a new user will not
        send an activation email.
        
        """
        new_user = RegistrationProfile.objects.create_inactive_user(site=Site.objects.get_current(),
                                                                    send_email=False,
                                                                    **self.user_info)
        self.assertEqual(len(mail.outbox), 0)

    def test_unexpired_account(self):
        """
        ``RegistrationProfile.activation_key_expired()`` is ``False``
        within the activation window.
        
        """
        new_user = RegistrationProfile.objects.create_inactive_user(site=Site.objects.get_current(),
                                                                    **self.user_info)
        profile = RegistrationProfile.objects.get(user=new_user)
        self.failIf(profile.activation_key_expired())

    def test_expired_account(self):
        """
        ``RegistrationProfile.activation_key_expired()`` is ``True``
        outside the activation window.
        
        """
        new_user = RegistrationProfile.objects.create_inactive_user(site=Site.objects.get_current(),
                                                                    **self.user_info)
        new_user.date_joined -= datetime.timedelta(days=settings.ACCOUNT_ACTIVATION_DAYS + 1)
        new_user.save()
        profile = RegistrationProfile.objects.get(user=new_user)
        self.failUnless(profile.activation_key_expired())

    def test_valid_activation(self):
        """
        Activating a user within the permitted window makes the
        account active, and resets the activation key.
        
        """
        new_user = RegistrationProfile.objects.create_inactive_user(site=Site.objects.get_current(),
                                                                    **self.user_info)
        profile = RegistrationProfile.objects.get(user=new_user)
        activated = RegistrationProfile.objects.activate_user(profile.activation_key)

        self.failUnless(isinstance(activated, User))
        self.assertEqual(activated.id, new_user.id)
        self.failUnless(activated.is_active)

        profile = RegistrationProfile.objects.get(user=new_user)
        self.assertEqual(profile.activation_key, RegistrationProfile.ACTIVATED)

    def test_expired_activation(self):
        """
        Attempting to activate outside the permitted window does not
        activate the account.
        
        """
        new_user = RegistrationProfile.objects.create_inactive_user(site=Site.objects.get_current(),
                                                                    **self.user_info)
        new_user.date_joined -= datetime.timedelta(days=settings.ACCOUNT_ACTIVATION_DAYS + 1)
        new_user.save()

        profile = RegistrationProfile.objects.get(user=new_user)
        activated = RegistrationProfile.objects.activate_user(profile.activation_key)

        self.failIf(isinstance(activated, User))
        self.failIf(activated)

        new_user = User.objects.get(username='alice')
        self.failIf(new_user.is_active)

        profile = RegistrationProfile.objects.get(user=new_user)
        self.assertNotEqual(profile.activation_key, RegistrationProfile.ACTIVATED)

    def test_activation_invalid_key(self):
        """
        Attempting to activate with a key which is not a SHA1 hash
        fails.
        
        """
        self.failIf(RegistrationProfile.objects.activate_user('foo'))

    def test_activation_already_activated(self):
        """
        Attempting to re-activate an already-activated account fails.
        
        """
        new_user = RegistrationProfile.objects.create_inactive_user(site=Site.objects.get_current(),
                                                                    **self.user_info)
        profile = RegistrationProfile.objects.get(user=new_user)
        RegistrationProfile.objects.activate_user(profile.activation_key)

        profile = RegistrationProfile.objects.get(user=new_user)
        self.failIf(RegistrationProfile.objects.activate_user(profile.activation_key))

    def test_activation_nonexistent_key(self):
        """
        Attempting to activate with a non-existent key (i.e., one not
        associated with any account) fails.
        
        """
        # Due to the way activation keys are constructed during
        # registration, this will never be a valid key.
        invalid_key = sha_constructor('foo').hexdigest()
        self.failIf(RegistrationProfile.objects.activate_user(invalid_key))

    def test_expired_user_deletion(self):
        """
        ``RegistrationProfile.objects.delete_expired_users()`` only
        deletes inactive users whose activation window has expired.
        
        """
        new_user = RegistrationProfile.objects.create_inactive_user(site=Site.objects.get_current(),
                                                                    **self.user_info)
        expired_user = RegistrationProfile.objects.create_inactive_user(site=Site.objects.get_current(),
                                                                        username='bob',
                                                                        password='secret',
                                                                        email='bob@example.com')
        expired_user.date_joined -= datetime.timedelta(days=settings.ACCOUNT_ACTIVATION_DAYS + 1)
        expired_user.save()

        RegistrationProfile.objects.delete_expired_users()
        self.assertEqual(RegistrationProfile.objects.count(), 1)
        self.assertRaises(User.DoesNotExist, User.objects.get, username='bob')

    def test_management_command(self):
        """
        The ``cleanupregistration`` management command properly
        deletes expired accounts.
        
        """
        new_user = RegistrationProfile.objects.create_inactive_user(site=Site.objects.get_current(),
                                                                    **self.user_info)
        expired_user = RegistrationProfile.objects.create_inactive_user(site=Site.objects.get_current(),
                                                                        username='bob',
                                                                        password='secret',
                                                                        email='bob@example.com')
        expired_user.date_joined -= datetime.timedelta(days=settings.ACCOUNT_ACTIVATION_DAYS + 1)
        expired_user.save()

        management.call_command('cleanupregistration')
        self.assertEqual(RegistrationProfile.objects.count(), 1)
        self.assertRaises(User.DoesNotExist, User.objects.get, username='bob')

########NEW FILE########
__FILENAME__ = urls
"""
URLs used in the unit tests for django-registration.

You should not attempt to use these URLs in any sort of real or
development environment; instead, use
``registration/backends/default/urls.py``. This URLconf includes those
URLs, and also adds several additional URLs which serve no purpose
other than to test that optional keyword arguments are properly
handled.

"""

from django.conf.urls.defaults import *
from django.views.generic.simple import direct_to_template
from django.views.generic.simple import redirect_to

from registration.views import activate
from registration.views import register
from os import path

_old = __import__('django-project.urls',globals(),locals(),['urlpatterns'],-1)
urlpatterns = _old.urlpatterns

urlpatterns += patterns('',
                       # Test the 'activate' view with custom template
                       # name.
                       url(r'^activate-with-template-name/(?P<activation_key>\w+)/$',
                           activate,
                           {'template_name': 'registration/test_template_name.html',
                            'backend': 'registration.backends.default.DefaultBackend'},
                           name='registration_test_activate_template_name'),
                       # Test the 'activate' view with
                       # extra_context_argument.
                       url(r'^activate-extra-context/(?P<activation_key>\w+)/$',
                           activate,
                           {'extra_context': {'foo': 'bar', 'callable': lambda: 'called'},
                            'backend': 'registration.backends.default.DefaultBackend'},
                           name='registration_test_activate_extra_context'),
                       # Test the 'activate' view with success_url argument.
                       url(r'^activate-with-success-url/(?P<activation_key>\w+)/$',
                           activate,
                           {'success_url': 'registration_test_custom_success_url',
                            'backend': 'registration.backends.default.DefaultBackend'},
                           name='registration_test_activate_success_url'),
                       # Test the 'register' view with custom template
                       # name.
                       url(r'^register-with-template-name/$',
                           register,
                           {'template_name': 'registration/test_template_name.html',
                            'backend': 'registration.backends.default.DefaultBackend'},
                           name='registration_test_register_template_name'),
                       # Test the'register' view with extra_context
                       # argument.
                       url(r'^register-extra-context/$',
                           register,
                           {'extra_context': {'foo': 'bar', 'callable': lambda: 'called'},
                            'backend': 'registration.backends.default.DefaultBackend'},
                           name='registration_test_register_extra_context'),
                       # Test the 'register' view with custom URL for
                       # closed registration.
                       url(r'^register-with-disallowed-url/$',
                           register,
                           {'disallowed_url': 'registration_test_custom_disallowed',
                            'backend': 'registration.backends.default.DefaultBackend'},
                           name='registration_test_register_disallowed_url'),
                       # Set up a pattern which will correspond to the
                       # custom 'disallowed_url' above.
                       url(r'^custom-disallowed/$',
                           direct_to_template,
                           {'template': 'registration/registration_closed.html'},
                           name='registration_test_custom_disallowed'),
                       # Test the 'register' view with custom redirect
                       # on successful registration.
                       url(r'^register-with-success_url/$',
                           register,
                           {'success_url': 'registration_test_custom_success_url',
                            'backend': 'registration.backends.default.DefaultBackend'},
                           name='registration_test_register_success_url'
                           ),
                       # Pattern for custom redirect set above.
                       url(r'^custom-success/$',
                           direct_to_template,
                           {'template': 'registration/test_template_name.html'},
                           name='registration_test_custom_success_url'),
                       (r'', include('registration.backends.default.urls')),
                        )



########NEW FILE########
__FILENAME__ = urls_default
"""
URLs used in the unit tests for django-registration.

You should not attempt to use these URLs in any sort of real or
development environment; instead, use
``registration/backends/default/urls.py``. This URLconf includes those
URLs, and also adds several additional URLs which serve no purpose
other than to test that optional keyword arguments are properly
handled.

"""

from django.conf.urls.defaults import *
from django.views.generic.simple import direct_to_template
from django.views.generic.simple import redirect_to

from registration.views import activate
from registration.views import register
from os import path

_old = __import__('django-project.urls',globals(),locals(),['urlpatterns'],-1)
urlpatterns = _old.urlpatterns

_default = __import__('registration.backends.default.urls',globals(),locals(),['urlpatterns'],-1)
urlpatterns += _default.urlpatterns

urlpatterns += patterns('',
                       # Test the 'activate' view with custom template
                       # name.
                       url(r'^activate-with-template-name/(?P<activation_key>\w+)/$',
                           activate,
                           {'template_name': 'registration/test_template_name.html',
                            'backend': 'registration.backends.default.DefaultBackend'},
                           name='registration_test_activate_template_name'),
                       # Test the 'activate' view with
                       # extra_context_argument.
                       url(r'^activate-extra-context/(?P<activation_key>\w+)/$',
                           activate,
                           {'extra_context': {'foo': 'bar', 'callable': lambda: 'called'},
                            'backend': 'registration.backends.default.DefaultBackend'},
                           name='registration_test_activate_extra_context'),
                       # Test the 'activate' view with success_url argument.
                       url(r'^activate-with-success-url/(?P<activation_key>\w+)/$',
                           activate,
                           {'success_url': 'registration_test_custom_success_url',
                            'backend': 'registration.backends.default.DefaultBackend'},
                           name='registration_test_activate_success_url'),
                       # Test the 'register' view with custom template
                       # name.
                       url(r'^register-with-template-name/$',
                           register,
                           {'template_name': 'registration/test_template_name.html',
                            'backend': 'registration.backends.default.DefaultBackend'},
                           name='registration_test_register_template_name'),
                       # Test the'register' view with extra_context
                       # argument.
                       url(r'^register-extra-context/$',
                           register,
                           {'extra_context': {'foo': 'bar', 'callable': lambda: 'called'},
                            'backend': 'registration.backends.default.DefaultBackend'},
                           name='registration_test_register_extra_context'),
                       # Test the 'register' view with custom URL for
                       # closed registration.
                       url(r'^register-with-disallowed-url/$',
                           register,
                           {'disallowed_url': 'registration_test_custom_disallowed',
                            'backend': 'registration.backends.default.DefaultBackend'},
                           name='registration_test_register_disallowed_url'),
                       # Set up a pattern which will correspond to the
                       # custom 'disallowed_url' above.
                       url(r'^custom-disallowed/$',
                           direct_to_template,
                           {'template': 'registration/registration_closed.html'},
                           name='registration_test_custom_disallowed'),
                       # Test the 'register' view with custom redirect
                       # on successful registration.
                       url(r'^register-with-success_url/$',
                           register,
                           {'success_url': 'registration_test_custom_success_url',
                            'backend': 'registration.backends.default.DefaultBackend'},
                           name='registration_test_register_success_url'
                           ),
                       # Pattern for custom redirect set above.
                       url(r'^custom-success/$',
                           direct_to_template,
                           {'template': 'registration/test_template_name.html'},
                           name='registration_test_custom_success_url'),
                       (r'', include('registration.backends.default.urls')),
                        )



########NEW FILE########
__FILENAME__ = views
import datetime
import unittest
from django.conf import settings
from django.contrib.auth.models import User
from django.core import mail
from django.core.urlresolvers import reverse
from django.test import TestCase

from registration import forms
from registration.models import RegistrationProfile


class RegistrationViewTests(TestCase):
    """
    Test the registration views.

    """
    urls = 'registration.tests.urls_default'

    def setUp(self):
        """
        These tests use the default backend, since we know it's
        available; that needs to have ``ACCOUNT_ACTIVATION_DAYS`` set.

        """
        self.old_activation = getattr(settings, 'ACCOUNT_ACTIVATION_DAYS', None)
        if self.old_activation is None:
            settings.ACCOUNT_ACTIVATION_DAYS = 7 # pragma: no cover

    def tearDown(self):
        """
        Yank ``ACCOUNT_ACTIVATION_DAYS`` back out if it wasn't
        originally set.

        """
        if self.old_activation is None:
            settings.ACCOUNT_ACTIVATION_DAYS = self.old_activation # pragma: no cover

    def test_registration_view_initial(self):
        """
        A ``GET`` to the ``register`` view uses the appropriate
        template and populates the registration form into the context.

        """
        old_allowed = getattr(settings, 'REGISTRATION_OPEN', True)
        settings.REGISTRATION_OPEN = True
        response = self.client.get(reverse('registration_register'))
        self.assertEqual(response.status_code, 200)
        self.assertTemplateUsed(response,
                                'registration/registration_form.html')
        self.failUnless(isinstance(response.context['form'],
                                   forms.RegistrationForm))
        settings.REGISTRATION_OPEN = old_allowed

    @unittest.skip('Skipping for now--checking in non-failing tests')
    def test_registration_view_success(self):
        """
        A ``POST`` to the ``register`` view with valid data properly
        creates a new user and issues a redirect.

        """
        old_allowed = getattr(settings, 'REGISTRATION_OPEN', True)
        settings.REGISTRATION_OPEN = True

        response = self.client.post(reverse('registration_register'),
                                    data={'username': 'alice',
                                          'email': 'alice@example.com',
                                          'first_name': 'alice',
                                          'last_name': 'wonderland',
                                          'password1': 'swordfish',
                                          'password2': 'swordfish'})
        self.assertRedirects(response,
                             'http://testserver%s' % reverse('registration_complete'))
        self.assertEqual(RegistrationProfile.objects.count(), 1)
        self.assertEqual(len(mail.outbox), 1)
        settings.REGISTRATION_OPEN = old_allowed

    @unittest.skip('Skipping for now--checking in non-failing tests')
    def test_registration_view_failure(self):
        """
        A ``POST`` to the ``register`` view with invalid data does not
        create a user, and displays appropriate error messages.

        """
        response = self.client.post(reverse('registration_register'),
                                    data={'username': 'bob',
                                          'email': 'bobe@example.com',
                                          'first_name': 'bob',
                                          'last_name': 'flambeur',
                                          'password1': 'foo',
                                          'password2': 'bar'})
        self.assertEqual(response.status_code, 200)
        self.failIf(response.context['form'].is_valid())
        self.assertFormError(response, 'form', field=None,
                             errors=u"The two password fields didn't match.")
        self.assertEqual(len(mail.outbox), 0)

    @unittest.skip('Skipping for now--checking in non-failing tests')
    def test_registration_view_closed(self):
        """
        Any attempt to access the ``register`` view when registration
        is closed fails and redirects.

        """
        old_allowed = getattr(settings, 'REGISTRATION_OPEN', True)
        settings.REGISTRATION_OPEN = False

        closed_redirect = 'http://testserver%s' % reverse('registration_disallowed')

        response = self.client.get(reverse('registration_register'))
        self.assertRedirects(response, closed_redirect)

        # Even if valid data is posted, it still shouldn't work.
        response = self.client.post(reverse('registration_register'),
                                    data={'username': 'alice',
                                          'email': 'alice@example.com',
                                          'first_name': 'alice',
                                          'last_name': 'wonderland',
                                          'password1': 'swordfish',
                                          'password2': 'swordfish'})
        self.assertRedirects(response, closed_redirect)
        self.assertEqual(RegistrationProfile.objects.count(), 0)

        settings.REGISTRATION_OPEN = old_allowed

    def test_registration_template_name(self):
        """
        Passing ``template_name`` to the ``register`` view will result
        in that template being used.

        """
        response = self.client.get(reverse('registration_test_register_template_name'))
        self.assertTemplateUsed(response,
                                'registration/test_template_name.html')

    def test_registration_extra_context(self):
        """
        Passing ``extra_context`` to the ``register`` view will
        correctly populate the context.

        """
        response = self.client.get(reverse('registration_test_register_extra_context'))
        self.assertEqual(response.context['foo'], 'bar')
        # Callables in extra_context are called to obtain the value.
        self.assertEqual(response.context['callable'], 'called')

    def test_registration_disallowed_url(self):
        """
        Passing ``disallowed_url`` to the ``register`` view will
        result in a redirect to that URL when registration is closed.

        """
        old_allowed = getattr(settings, 'REGISTRATION_OPEN', True)
        settings.REGISTRATION_OPEN = False

        closed_redirect = 'http://testserver%s' % reverse('registration_test_custom_disallowed')

        response = self.client.get(reverse('registration_test_register_disallowed_url'))
        self.assertRedirects(response, closed_redirect)

        settings.REGISTRATION_OPEN = old_allowed

    def test_registration_success_url(self):
        """
        Passing ``success_url`` to the ``register`` view will result
        in a redirect to that URL when registration is successful.
        
        """
        success_redirect = 'http://testserver%s' % reverse('registration_test_custom_success_url')
        response = self.client.post(reverse('registration_test_register_success_url'),
                                    data={'username': 'alice',
                                          'email': 'alice@example.com',
                                          'first_name': 'alice',
                                          'last_name': 'wonderland',
                                          'password1': 'swordfish',
                                          'password2': 'swordfish'})
        self.assertRedirects(response, success_redirect)

    @unittest.skip('Skipping for now--checking in non-failing tests')
    def test_valid_activation(self):
        """
        Test that the ``activate`` view properly handles a valid
        activation (in this case, based on the default backend's
        activation window).

        """
        success_redirect = 'http://testserver%s' % reverse('registration_activation_complete')
        
        # First, register an account.
        self.client.post(reverse('registration_register'),
                         data={'username': 'alice',
                               'email': 'alice@example.com',
                               'first_name': 'alice',
                               'last_name':  'wonderland',
                               'password1': 'swordfish',
                               'password2': 'swordfish'})
        profile = RegistrationProfile.objects.get(user__username='alice')
        response = self.client.get(reverse('registration_activate',
                                           kwargs={'activation_key': profile.activation_key}))
        self.assertRedirects(response, success_redirect)
        self.failUnless(User.objects.get(username='alice').is_active)

    
    @unittest.skip('Skipping for now--checking in non-failing tests')
    def test_invalid_activation(self):
        """
        Test that the ``activate`` view properly handles an invalid
        activation (in this case, based on the default backend's
        activation window).

        """
        # Register an account and reset its date_joined to be outside
        # the activation window.
        self.client.post(reverse('registration_register'),
                         data={'username': 'bob',
                               'email': 'bob@example.com',
                               'first_name': 'bob',
                               'last_name': 'flambeur',
                               'password1': 'secret',
                               'password2': 'secret'})
        expired_user = User.objects.get(username='bob')
        expired_user.date_joined = expired_user.date_joined - datetime.timedelta(days=settings.ACCOUNT_ACTIVATION_DAYS)
        expired_user.save()


        expired_profile = RegistrationProfile.objects.get(user=expired_user)
        response = self.client.get(reverse('registration_activate',
                                           kwargs={'activation_key': expired_profile.activation_key}))
        print response
        self.assertEqual(response.status_code, 200)
        self.assertEqual(response.context['activation_key'],
                         expired_profile.activation_key)
        self.failIf(User.objects.get(username='bob').is_active)
        

    def test_activation_success_url(self):
        """
        Passing ``success_url`` to the ``activate`` view and
        successfully activating will result in that URL being used for
        the redirect.
        
        """
        success_redirect = 'http://testserver%s' % reverse('registration_test_custom_success_url')
        self.client.post(reverse('registration_register'),
                         data={'username': 'alice',
                               'email': 'alice@example.com',
                               'first_name': 'alice',
                               'last_name': 'wonderland',
                               'password1': 'swordfish',
                               'password2': 'swordfish'})
        profile = RegistrationProfile.objects.get(user__username='alice')
        response = self.client.get(reverse('registration_test_activate_success_url',
                                           kwargs={'activation_key': profile.activation_key}))
        self.assertRedirects(response, success_redirect)
        
    def test_activation_template_name(self):
        """
        Passing ``template_name`` to the ``activate`` view will result
        in that template being used.

        """
        response = self.client.get(reverse('registration_test_activate_template_name',
                                   kwargs={'activation_key': 'foo'}))
        self.assertTemplateUsed(response, 'registration/test_template_name.html')

    def test_activation_extra_context(self):
        """
        Passing ``extra_context`` to the ``activate`` view will
        correctly populate the context.

        """
        response = self.client.get(reverse('registration_test_activate_extra_context',
                                           kwargs={'activation_key': 'foo'}))
        self.assertEqual(response.context['foo'], 'bar')
        # Callables in extra_context are called to obtain the value.
        self.assertEqual(response.context['callable'], 'called')

########NEW FILE########
__FILENAME__ = urls
"""
Backwards-compatible URLconf for existing django-registration
installs; this allows the standard ``include('registration.urls')`` to
continue working, but that usage is deprecated and will be removed for
django-registration 1.0. For new installs, use
``include('registration.backends.default.urls')``.

"""

import warnings

warnings.warn("include('registration.urls') is deprecated; use include('registration.backends.default.urls') instead.",
              PendingDeprecationWarning)

from registration.backends.default.urls import *

########NEW FILE########
__FILENAME__ = views
"""
Views which allow users to create and activate accounts.

"""


from django.shortcuts import redirect
from django.shortcuts import render_to_response
from django.template import RequestContext
from django.core.urlresolvers import reverse
from registration.backends import get_backend
from c2g.util import upgrade_to_https_and_downgrade_upon_redirect
from django.views.decorators.csrf import csrf_protect
from django.views.decorators.debug import sensitive_post_parameters
from django.views.decorators.cache import never_cache
from c2g.models import Course, StudentInvitation
import json
import settings
import urlparse
import logging
logger=logging.getLogger(__name__)


def activate(request, backend,
             template_name='registration/activate.html',
             success_url=None, extra_context=None, **kwargs):
    """
    Activate a user's account.

    The actual activation of the account will be delegated to the
    backend specified by the ``backend`` keyword argument (see below);
    the backend's ``activate()`` method will be called, passing any
    keyword arguments captured from the URL, and will be assumed to
    return a ``User`` if activation was successful, or a value which
    evaluates to ``False`` in boolean context if not.

    Upon successful activation, the backend's
    ``post_activation_redirect()`` method will be called, passing the
    ``HttpRequest`` and the activated ``User`` to determine the URL to
    redirect the user to. To override this, pass the argument
    ``success_url`` (see below).

    On unsuccessful activation, will render the template
    ``registration/activate.html`` to display an error message; to
    override thise, pass the argument ``template_name`` (see below).

    **Arguments**

    ``backend``
        The dotted Python import path to the backend class to
        use. Required.

    ``extra_context``
        A dictionary of variables to add to the template context. Any
        callable object in this dictionary will be called to produce
        the end result which appears in the context. Optional.

    ``success_url``
        The name of a URL pattern to redirect to on successful
        acivation. This is optional; if not specified, this will be
        obtained by calling the backend's
        ``post_activation_redirect()`` method.
    
    ``template_name``
        A custom template to use. This is optional; if not specified,
        this will default to ``registration/activate.html``.

    ``\*\*kwargs``
        Any keyword arguments captured from the URL, such as an
        activation key, which will be passed to the backend's
        ``activate()`` method.
    
    **Context:**
    
    The context will be populated from the keyword arguments captured
    in the URL, and any extra variables supplied in the
    ``extra_context`` argument (see above).
    
    **Template:**
    
    registration/activate.html or ``template_name`` keyword argument.
    
    """
    backend = get_backend(backend)
    account = backend.activate(request, **kwargs)

    if account:
        if success_url is None:
            to, args, kwargs = backend.post_activation_redirect(request, account)
            return redirect(to, *args, **kwargs)
        else:
            return redirect(success_url)

    if extra_context is None:
        extra_context = {}
    context = RequestContext(request)
    for key, value in extra_context.items():
        context[key] = callable(value) and value() or value

    return render_to_response(template_name,
                              kwargs,
                              context_instance=context)

@sensitive_post_parameters()
@never_cache
@csrf_protect
@upgrade_to_https_and_downgrade_upon_redirect
def register(request, backend, success_url=None, form_class=None,
             disallowed_url='registration_disallowed',
             template_name='registration/registration_form.html',
             extra_context=None):
    """
    Allow a new user to register an account.

    The actual registration of the account will be delegated to the
    backend specified by the ``backend`` keyword argument (see below);
    it will be used as follows:

    1. The backend's ``registration_allowed()`` method will be called,
       passing the ``HttpRequest``, to determine whether registration
       of an account is to be allowed; if not, a redirect is issued to
       the view corresponding to the named URL pattern
       ``registration_disallowed``. To override this, see the list of
       optional arguments for this view (below).

    2. The form to use for account registration will be obtained by
       calling the backend's ``get_form_class()`` method, passing the
       ``HttpRequest``. To override this, see the list of optional
       arguments for this view (below).

    3. If valid, the form's ``cleaned_data`` will be passed (as
       keyword arguments, and along with the ``HttpRequest``) to the
       backend's ``register()`` method, which should return the new
       ``User`` object.

    4. Upon successful registration, the backend's
       ``post_registration_redirect()`` method will be called, passing
       the ``HttpRequest`` and the new ``User``, to determine the URL
       to redirect the user to. To override this, see the list of
       optional arguments for this view (below).
    
    **Required arguments**
    
    None.
    
    **Optional arguments**

    ``backend``
        The dotted Python import path to the backend class to use.

    ``disallowed_url``
        URL to redirect to if registration is not permitted for the
        current ``HttpRequest``. Must be a value which can legally be
        passed to ``django.shortcuts.redirect``. If not supplied, this
        will be whatever URL corresponds to the named URL pattern
        ``registration_disallowed``.
    
    ``form_class``
        The form class to use for registration. If not supplied, this
        will be retrieved from the registration backend.
    
    ``extra_context``
        A dictionary of variables to add to the template context. Any
        callable object in this dictionary will be called to produce
        the end result which appears in the context.

    ``success_url``
        URL to redirect to after successful registration. Must be a
        value which can legally be passed to
        ``django.shortcuts.redirect``. If not supplied, this will be
        retrieved from the registration backend.
    
    ``template_name``
        A custom template to use. If not supplied, this will default
        to ``registration/registration_form.html``.
    
    **Context:**
    
    ``form``
        The registration form.
    
    Any extra variables supplied in the ``extra_context`` argument
    (see above).
    
    **Template:**
    
    registration/registration_form.html or ``template_name`` keyword
    argument.
    
    """

    
    backend = get_backend(backend)
    if not backend.registration_allowed(request):
        return redirect(disallowed_url)
    if form_class is None:
        form_class = backend.get_form_class(request)

    if request.method == 'POST':
        form = form_class(data=request.POST, files=request.FILES)
        if form.is_valid():
            #logger.info(form.cleaned_data['first_name'])
            new_user = backend.register(request, **form.cleaned_data)
            #register the user in class based on course_prefix course_suffix
            num_classes = 0
            try:
                course = Course.objects.get(handle=request.POST.get('course_prefix')+"--"+request.POST.get('course_suffix'), mode='draft')
                if not course.preenroll_only:
                    course.student_group.user_set.add(new_user)
                    course_main = reverse('courses.views.main', args=[request.POST.get('course_prefix'), request.POST.get('course_suffix')])
                    num_classes += 1
            except Course.DoesNotExist:
                pass
        
            #register the user based on invites
            invites = StudentInvitation.objects.filter(email=new_user.email)
            for invite in invites:
                invite.course.student_group.user_set.add(new_user)
                course_main = reverse('courses.views.main', args=[invite.course.prefix, invite.course.suffix])
                invite.delete()
                num_classes += 1
            
            #now determine where to redirect
            if num_classes > 1:
                return redirect('accounts_profile')
            elif num_classes == 1:
                return redirect(course_main)
        
            #default redirects
            if success_url is None:
                to, args, kwargs = backend.post_registration_redirect(request, new_user)
                return redirect(to, *args, **kwargs)
            else:
                return redirect(success_url)
    else:
        form = form_class(initial={
                          'course_prefix':request.GET.get('pre'),
                          'course_suffix':request.GET.get('post'),
                          'invite':request.GET.get('invite'),
                          'username':request.GET.get('invite'),
                          'email':request.GET.get('invite'),
                          })
    
    if extra_context is None:
        extra_context = {}
    context = RequestContext(request)
    for key, value in extra_context.items():
        context[key] = callable(value) and value() or value

    prefill_username = False
    if request.GET.get('invite'):
        prefill_username = True

    return render_to_response(template_name,
                              {'form': form,
                               'prefill_username': prefill_username},
                              context_instance=context)

########NEW FILE########
__FILENAME__ = models
from django.db import models

# Create your models here.

########NEW FILE########
__FILENAME__ = serializers
from rest_framework import serializers
from c2g.models import *

class FileSerializer(serializers.ModelSerializer):
    class Meta:
        model = File

class CourseSerializer(serializers.ModelSerializer):
    class Meta:
    # a change
        model = Course

 
class AnnouncementSerializer(serializers.ModelSerializer):
    class Meta:
        model = Announcement
    


class PSetSerializer(serializers.ModelSerializer):
    class Meta:
        model =  ProblemSet
    
    
class PSetExerciseSerializer(serializers.ModelSerializer):
    class Meta:
        model =  ProblemSetToExercise
    

class ExerciseSerializer(serializers.ModelSerializer):
    class Meta:
        model =  Exercise
    

class ContentSectionSerializer(serializers.ModelSerializer):
    class Meta:
        model =  ContentSection
    

class VideoSerializer(serializers.ModelSerializer):
    class Meta:
        model =  Video
    

class VideoToExerciseSerializer(serializers.ModelSerializer):
    class Meta:
        model =  VideoToExercise

class ExamSerializer(serializers.ModelSerializer):
    class Meta:
        model =  Exam

class ExamRecordSerializer(serializers.ModelSerializer):
    class Meta:
        model =  ExamRecord

class ExamScoreSerializer(serializers.ModelSerializer):
    class Meta:
        model =  ExamScore

class ExamScoreFieldSerializer(serializers.ModelSerializer):
    class Meta:
        model =  ExamScore

########NEW FILE########
__FILENAME__ = tests
"""
This file demonstrates writing tests using the unittest module. These will pass
when you run "manage.py test".

Replace this with more appropriate tests for your application.
"""

from django.test import TestCase


class SimpleTest(TestCase):
    def test_basic_addition(self):
        """
        Tests that 1 + 1 always equals 2.
        """
        self.assertEqual(1 + 1, 2)

########NEW FILE########
__FILENAME__ = views
from rest_framework import permissions
from rest_framework.renderers import JSONRenderer
from rest_framework.parsers import JSONParser
from rest_framework import generics
from rest_framework import status
from rest_framework.decorators import api_view
from rest_framework.response import Response
from rest_framework.views import APIView
from rest.serializers import *

from django.http import HttpResponse, Http404
from registration.backends import get_backend
from django.template import RequestContext
from django.core.urlresolvers import reverse
from courses.common_page_data import get_common_page_data
from django.views.decorators.http import require_POST
from django.views.decorators.csrf import csrf_protect
from django.contrib.auth.forms import AuthenticationForm
from django.contrib.auth.views import login
from django.views.decorators.cache import never_cache
from django.contrib.auth import login as auth_login
from django.conf import settings
from c2g.util import upgrade_to_https_and_downgrade_upon_redirect
from django.views.decorators.debug import sensitive_post_parameters
from django.utils import simplejson
from c2g.models import *
from django.contrib import auth

import json
import settings
import os.path

import logging
logger=logging.getLogger("foo")


class JSONResponse(HttpResponse):
    """
    An HttpResponse that renders it's content into JSON.
    """
    def __init__(self, data, **kwargs):
        content = JSONRenderer().render(data)
        kwargs['content_type'] = 'application/json'
        super(JSONResponse, self).__init__(content, **kwargs)


@sensitive_post_parameters()
@never_cache
@require_POST
@csrf_protect
#@upgrade_to_https_and_downgrade_upon_redirect
def rest_login(request):
    """
    Login to c2g if ok return course list student registered for
    """
    login_form = AuthenticationForm(data=request.POST)

    if login_form.is_valid():
  
        auth_login(request, login_form.get_user())
        course_list = Course.objects.all()
        groups = request.user.groups.all()
        courses = []
        for g in groups:
            for c in course_list:
                if (g.id == c.student_group_id or g.id == c.instructor_group_id or g.id == c.tas_group_id or g.id == c.readonly_tas_group_id) and c.mode != 'draft':
                    courses.append({'course_id':c.id})
                    break
        
        
        to_json = {'userid': request.user.username, 'email': request.user.email, 'last_name':request.user.last_name,
                   'first_name':request.user.first_name,'date_joined':request.user.date_joined.strftime('%Y-%m-%dT%H:%M:%S'),
                   'last_login': request.user.last_login.strftime('%Y-%m-%dT%H:%M:%S'),'courses':courses}
    else:
        to_json = {"login": "error"}



    return HttpResponse(simplejson.dumps(to_json), mimetype='application/json')


"""
Gets Problemset Activities for student
"""

class ProblemActivities(APIView):

    renderer_classes = (JSONRenderer,)
    permission_classes = (permissions.IsAuthenticated,)
        
    def get(self, request):

        problem_activities = ProblemActivity.objects.filter(student=request.user)
                
        index_list = []
        for prob in problem_activities:
            index_list.append({'id': prob.id, 'video_to_exercise': prob.video_to_exercise_id, 
                               'problemset_to_exercise': prob.problemset_to_exercise_id,
                               'problem_identifier': prob.problem_identifier, 'complete': prob.complete, 'attempt_content': prob.attempt_content,
                               'count_hints':prob.count_hints, 'time_taken':prob.time_taken,'attempt_number': prob.attempt_number,
                               'sha1':prob.sha1, 'seed': prob.seed,'problem_type':prob.problem_type,'review_mode':prob.review_mode,
                               'topic_mode':prob.topic_mode,'casing':prob.casing,'card':prob.card,'cards_done':prob.cards_done,
                               'cards_left':prob.cards_left,'user_selection_val':prob.user_selection_val,'user_choices':prob.user_choices})

        
        return Response(index_list)

        
class VideoActivities(APIView):

    renderer_classes = (JSONRenderer,)
    permission_classes = (permissions.IsAuthenticated,)   
    
    def get(self, request):

        video_activities = VideoActivity.objects.filter(student=request.user)
                
        index_list = []
        for vid_activity in video_activities:
            index_list.append({'id': vid_activity.id, 'course': vid_activity.course_id, 
                               'video': vid_activity.video_id,
                               'start_seconds': vid_activity.start_seconds})

        
        
        return Response(index_list)

class FilesList(APIView):

    renderer_classes = (JSONRenderer,)
    permission_classes = (permissions.IsAuthenticated,)    
    def get(self, request):
        files = File.objects.all()
        serializer = FileSerializer(files)
    
        return Response(serializer.data)

class CourseList(APIView):
    
    renderer_classes = (JSONRenderer,)
    permission_classes = (permissions.IsAuthenticated,)
    
    def get(self, request):
        courses= Course.objects.all()
        serializer = CourseSerializer(courses)
    
        return Response(serializer.data)

	
class AnnouncementList(APIView):
    renderer_classes = (JSONRenderer,)
    permission_classes = (permissions.IsAuthenticated,)
    
    def get(self, request):
        announcements= Announcement.objects.all()
        serializer = AnnouncementSerializer(announcements)
    
        return Response(serializer.data)
    

class ProblemSetList(APIView):
    renderer_classes = (JSONRenderer,)
    permission_classes = (permissions.IsAuthenticated,)
    
    def get(self, request):
        psets = ProblemSet.objects.all()
        serializer = PSetSerializer(psets)
    
        return Response(serializer.data)
    
    
class ProblemSetToExerciseList(APIView):
    renderer_classes = (JSONRenderer,)
    permission_classes = (permissions.IsAuthenticated,)
    
    def get(self, request):
        psetexes = ProblemSetToExercise.objects.all()
        serializer = PSetExerciseSerializer(psetexes)
    
        return Response(serializer.data)
    

class ExerciseList(APIView):
    renderer_classes = (JSONRenderer,)
    permission_classes = (permissions.IsAuthenticated,)
    
    def get(self, request):
        exercises= Exercise.objects.all()
        serializer = ExerciseSerializer(exercises)
    
        return Response(serializer.data)
        

    

class ContentSectionList(APIView):
    renderer_classes = (JSONRenderer,)
    permission_classes = (permissions.IsAuthenticated,)
    
    def get(self, request):
        content_sections = ContentSection.objects.all()
        serializer = ContentSectionSerializer(content_sections)
    
        return Response(serializer.data)
    


class VideoList(APIView):
    renderer_classes = (JSONRenderer,)
    permission_classes = (permissions.IsAuthenticated,)
    
    def get(self, request):
        videos = Video.objects.all()
        serializer = VideoSerializer(videos)
    
        return Response(serializer.data)
    
    
class VideoToExerciseList(APIView):
    renderer_classes = (JSONRenderer,)
    permission_classes = (permissions.IsAuthenticated,)
    
    def get(self, request):
        vidtoexes = VideoToExercise.objects.all()
        serializer = VideoToExerciseSerializer(vidtoexes)
    
        return Response(serializer.data)

"""
Gets ExamScores for student
"""

class ExamRecordList(APIView):

    renderer_classes = (JSONRenderer,)
    permission_classes = (permissions.IsAuthenticated,)
        
    def get(self, request):

        exam_records = ExamRecord.objects.filter(student=request.user)
                
        serializer = ExamRecordSerializer(exam_records)
    
        return Response(serializer.data)

class ExamScoreList(APIView):

    renderer_classes = (JSONRenderer,)
    permission_classes = (permissions.IsAuthenticated,)
        
    def get(self, request):

        exam_scores = ExamScore.objects.filter(student=request.user)
                
        serializer = ExamScoreSerializer(exam_scores)
    
        return Response(serializer.data)

class ExamScoreFieldList(APIView):

    renderer_classes = (JSONRenderer,)
    permission_classes = (permissions.IsAuthenticated,)
        
    def get(self, request):

        exam_score_fields = ExamScoreField.objects.filter(student=request.user)
                
        serializer = ExamScoreFieldSerializer(exam_score_fields)
    
        return Response(serializer.data)

class ExamList(APIView):

    renderer_classes = (JSONRenderer,)
    permission_classes = (permissions.IsAuthenticated,)
        
    def get(self, request):

        course_id = request.GET.get('course')
        exams = Exam.objects.filter()
                
        serializer = ExamSerializer(exams)
    
        return Response(serializer.data)

########NEW FILE########
__FILENAME__ = settings
# Django settings for Class2Go project.
from os import path

import django.template
import djcelery

from database import *

#Sets the expires parameter in s3 urls to 10 years out.
#This needs to be above the import monkeypatch line
#otherwise we lose the 10 year urls.
AWS_QUERYSTRING_EXPIRE = 3.156e+8

import monkeypatch

#ADDED FOR url tag future
django.template.add_to_builtins('django.templatetags.future')
#Added for celery
djcelery.setup_loader()

# the INSTANCE should be "prod" or "stage" or something like that
# if it hasn't been set then get the user name
# since we use this for things like queue names, we want to keep this unique
# to keep things from getting cross wired
try:
    INSTANCE
except NameError:
    try:
        from os import getuid
        from pwd import getpwuid
        INSTANCE=getpwuid(getuid())[0]
    except:
        INSTANCE="unknown"

# the APP is so we can support multiple instances of class2go running on the
# same set of servers via apache vhosts.  In dev environments it's safe to just
# use "class2go", this default
try:
    APP
except NameError:
    APP="class2go"

# If PRODUCTION flag not set in Database.py, then set it now.
#PRODUCTION = True

try:
    PRODUCTION
except NameError:
    PRODUCTION = False

if PRODUCTION == True:
    DEBUG = False
else:
    DEBUG = True

TEMPLATE_DEBUG = DEBUG

# ADMINS should be set in database.py too.
try:
    ADMINS
except NameError:
    # TODO: error out in this case since I can't think of a default
    pass

MANAGERS = ADMINS


# Local time zone for this installation. Choices can be found here:
# http://en.wikipedia.org/wiki/List_of_tz_zones_by_name
# although not all choices may be available on all operating systems.
# On Unix systems, a value of None will cause Django to use the same
# timezone as the operating system.
# If running in a Windows environment this must be set to the same as your
# system time zone.
TIME_ZONE = 'America/Los_Angeles'

# Language code for this installation. All choices can be found here:
# http://www.i18nguy.com/unicode/language-identifiers.html
LANGUAGE_CODE = 'en-us'


# These site variables are used for display in the product and can 
# drive any conditional changes (display, etc).
# Override all four in your database.py file, otherwise they will 
# default back to Stanford.
try:
    SITE_ID
    SITE_NAME_SHORT
    SITE_NAME_LONG
    SITE_TITLE
    SITE_URL
except NameError:
    SITE_ID = 1
    SITE_NAME_SHORT = 'Stanford'
    SITE_NAME_LONG = 'Stanford University'
    SITE_TITLE = 'Stanford Class2Go'
    SITE_URL = 'http://class2go.stanford.edu'


# If you set this to False, Django will make some optimizations so as not
# to load the internationalization machinery.
USE_I18N = False

# If you set this to False, Django will not format dates, numbers and
# calendars according to the current locale
USE_L10N = True

# Absolute filesystem path to the directory that will hold user-uploaded files.
# Example: "/home/media/media.lawrence.com/media/"
# If you upload files from a dev machine, set MEDIA_ROOT to be the root dir for the file
# uploads. If you do this, set in in database.py; not this file.
#Also, if you set it in database.py, don't uncomment the following line as settings.py
#runs after database.py
#MEDIA_ROOT = ''

# URL that handles the media served from MEDIA_ROOT. Make sure to use a
# trailing slash.
# Examples: "http://media.lawrence.com/media/", "http://example.com/media/"
MEDIA_URL = ''

# Absolute path to the directory static files should be collected to.
# Don't put anything in this directory yourself; store your static files
# in apps' "static/" subdirectories and in STATICFILES_DIRS.
# Example: "/home/media/media.lawrence.com/static/"
try:
    STATIC_ROOT
except:
    STATIC_ROOT = '/opt/' + APP + '/static/'

# URL prefix for static files.
# Example: "http://media.lawrence.com/static/"
STATIC_URL = '/static/'

# URL prefix for admin static files -- CSS, JavaScript and images.
# Make sure to use a trailing slash.
# Examples: "http://foo.com/static/admin/", "/static/admin/".
ADMIN_MEDIA_PREFIX = '/static/admin/'

# Additional locations of static files
STATICFILES_DIRS = (
    # Put strings here, like "/home/html/static" or "C:/www/django/static".
    # Always use forward slashes, even on Windows.
    # Don't forget to use absolute paths, not relative paths.
)

# List of finder classes that know how to find static files in
# various locations.
STATICFILES_FINDERS = (
    'django.contrib.staticfiles.finders.FileSystemFinder',
    'django.contrib.staticfiles.finders.AppDirectoriesFinder',
#    'django.contrib.staticfiles.finders.DefaultStorageFinder',
)



# List of callables that know how to import templates from various sources.
TEMPLATE_LOADERS = (
    'django.template.loaders.filesystem.Loader',
    'django.template.loaders.app_directories.Loader',
#     'django.template.loaders.eggs.Loader',
)

MIDDLEWARE_CLASSES = (
    'django.middleware.common.CommonMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.http.ConditionalGetMiddleware',
    'convenience_redirect.redirector.convenience_redirector',
    'courses.common_page_data_middleware.common_data',
    'courses.user_profiling_middleware.user_profiling',
    'exception_snippet.midware.error_ping',

)

ROOT_URLCONF = 'urls'


### CACHING ###
# config info here: see https://docs.djangoproject.com/en/dev/topics/cache

try:
    LOCAL_CACHE_LOCATION
except NameError:
    LOCAL_CACHE_LOCATION = "/opt/class2go"

try:
    FILE_CACHE_TIME
except NameError:
    FILE_CACHE_TIME = 60*60*4    # 4 hours -- files never chang

try:
    VIDEO_CACHE_TIME
except NameError:
    VIDEO_CACHE_TIME = 60*30     # 30 min -- careful of negative caching


CACHES = {
    'file_store': {
        'BACKEND': 'django.core.cache.backends.filebased.FileBasedCache',
        'LOCATION': LOCAL_CACHE_LOCATION + "/cache-file",
        'TIMEOUT': FILE_CACHE_TIME,
        'OPTIONS': {
            'MAX_ENTRIES': 10000
        }
    },
    'video_store': {
        'BACKEND': 'django.core.cache.backends.filebased.FileBasedCache',
        'LOCATION': LOCAL_CACHE_LOCATION + "/cache-video",
        'TIMEOUT': VIDEO_CACHE_TIME,
        'OPTIONS': {
            'MAX_ENTRIES': 10000
        }
    },
    'view_store': {
        'BACKEND': 'django.core.cache.backends.filebased.FileBasedCache',
        'LOCATION': LOCAL_CACHE_LOCATION + "/cache-view",
        'TIMEOUT': 3600,
        'OPTIONS': {
            'MAX_ENTRIES': 10000
            }
    },
    'course_store': {
        'BACKEND': 'django.core.cache.backends.filebased.FileBasedCache',
        'LOCATION': LOCAL_CACHE_LOCATION + "/cache-course",
        'TIMEOUT': 7200,
        'OPTIONS': {
            'MAX_ENTRIES': 1000
            }
    },
    'grader_store': {
        'BACKEND': 'django.core.cache.backends.db.DatabaseCache',
        'LOCATION': 'grader_cache',
        'TIMEOUT': 86400,  # one day
        'OPTIONS': {
            'MAX_ENTRIES': 1000
            }
    },
    'default': {
        'BACKEND': 'django.core.cache.backends.filebased.FileBasedCache',
        'LOCATION': LOCAL_CACHE_LOCATION + "/cache-default",
        'TIMEOUT': 3600,
        'OPTIONS': {
            'MAX_ENTRIES': 10000
        }
    },
}


thispath = path.dirname(path.realpath(__file__))
TEMPLATE_DIRS = (
    thispath+'/site_templates/'+SITE_NAME_SHORT,
    thispath+'/templates'

    # Put strings here, like "/home/html/django_templates" or "C:/www/django/templates".
    # Always use forward slashes, even on Windows.
    # Don't forget to use absolute paths, not relative paths.
)

TEMPLATE_CONTEXT_PROCESSORS = (
    'django.contrib.auth.context_processors.auth',
    'django.core.context_processors.request',
    'django.core.context_processors.static',
    'django.contrib.messages.context_processors.messages',
    'context_processor.context_settings'
)

INSTALLED_APPS = (
                      'django.contrib.auth',
                      'django.contrib.contenttypes',
                      'django.contrib.sessions',
                      'django.contrib.sites',
                      'django.contrib.messages',
                      'django.contrib.staticfiles',
                      'django.contrib.humanize',
                      # Uncomment the next line to enable the admin:
                      'django.contrib.admin',
                      # Uncomment the next line to enable admin documentation:
                      'django.contrib.admindocs',
                      'registration',
                      'south',
                      'djcelery',
                      #'kombu.transport.django',
                      'c2g',
                      'courses',
                      'courses.announcements',
                      'courses.chat',
                      'courses.email_members',
                      'courses.exams',
                      'courses.member_management',
                      'courses.forums',
                      'courses.reports',
                      'courses.videos',
                      'courses.video_exercises',
                      'problemsets',
                      'django.contrib.flatpages',
                      'storages',
                      'celerytest',
                      'kelvinator',
                      'db_scripts',
                      'convenience_redirect',
                      'exception_snippet',
                      'rest_framework',
                       #'reversion',
                       'tools',
                       'tools.aws',
                       'tools.certificates',
                      )
if INSTANCE != "prod":
    INSTALLED_APPS += (
                        'db_test_data',
                        'django_nose',
                        'django_coverage',
                       )


MESSAGE_STORAGE = 'django.contrib.messages.storage.session.SessionStorage'

# Storage

# By default we use S3 storage.  Make sure we have the settings we need.
DEFAULT_FILE_STORAGE = 'storages.backends.s3boto.S3BotoStorage'

try:
    AWS_ACCESS_KEY_ID
    AWS_SECRET_ACCESS_KEY
    AWS_STORAGE_BUCKET_NAME
except NameError:
    # TODO: fail if not defined
    pass
    
try:
    AWS_SECURE_STORAGE_BUCKET_NAME
except NameError:
    if AWS_STORAGE_BUCKET_NAME.count('-') == 1:
        AWS_SECURE_STORAGE_BUCKET_NAME = AWS_STORAGE_BUCKET_NAME.split('-')[0]+'-secure-'+AWS_STORAGE_BUCKET_NAME.split('-')[1]
    else:
        AWS_SECURE_STORAGE_BUCKET_NAME = AWS_STORAGE_BUCKET_NAME # If bucket name does not follow our S3 conventions, set secure bucket to be same as bucket

# Setting these variables to 'local' is the idiom for using local storage.
if (AWS_ACCESS_KEY_ID == 'local' or AWS_SECRET_ACCESS_KEY == 'local' or
        AWS_STORAGE_BUCKET_NAME == 'local'):
    DEFAULT_FILE_STORAGE = 'django.core.files.storage.FileSystemStorage'

    # We need MEDIA_ROOT to be set to something useful in this case
    try:
        MEDIA_ROOT
    except NameError:
        # TODO: fail if not defined
        pass

#This states that app c2g's UserProfile model is the profile for this site.
AUTH_PROFILE_MODULE = 'c2g.UserProfile'

ACCOUNT_ACTIVATION_DAYS = 7 #used by registration



# See http://docs.djangoproject.com/en/dev/topics/logging for
# more details on how to customize your logging configuration.
# If PRODUCTION flag not set in Database.py, then set it now.
try:
    LOGGING_DIR
except NameError:
    LOGGING_DIR = '/var/log/django/'

LOGGING = {
    'version': 1,
    'disable_existing_loggers': True,
    'formatters' : {
        'verbose': {
            'format': '%(levelname)s %(asctime)s %(pathname)s -- %(funcName)s -- line# %(lineno)d : %(message)s '
        },
        'simple': {
            'format': '%(levelname)s %(message)s'
        },
    },
    'handlers': {
        'null': {
            'level':'DEBUG',
            'class':'django.utils.log.NullHandler',
        },
        'logfile': {
            'level':'INFO', #making this DEBUG will log _all_ SQL queries.
            'class':'logging.handlers.RotatingFileHandler',
            'formatter':'verbose',
            'filename': LOGGING_DIR+'/'+APP+'-django.log',
            'maxBytes': 1024*1024*500,
            'backupCount': 3,
        },
        'console':{
            'level':'INFO',
            'class':'logging.StreamHandler',
            'formatter': 'simple'
        },
        'mail_admins': {
            'level': 'ERROR',
            'class': 'django.utils.log.AdminEmailHandler',
            'include_html': True,
        }
    },
    'loggers': {
        '': {
            'handlers':['mail_admins','logfile', 'console'],
            'propagate': True,
            'level':'DEBUG',
        },
        'django.request': {
            'handlers': ['mail_admins','logfile', 'console'],
            'level': 'INFO',
            'propagate': False,
        },
        'django.db.backends':{
            'handlers':['logfile'],
            'level': 'DEBUG',
            'propagate': False,
        },
    }
}

USE_ETAGS = True

SECURE_PROXY_SSL_HEADER = ('HTTP_X_FORWARDED_PROTO', 'https')

# Session Settings
SESSION_COOKIE_AGE = 3*30*24*3600


# Database routing
DATABASE_ROUTERS = ['c2g.routers.CeleryDBRouter',
                    'c2g.routers.ReadonlyDBRouter',
                   ]

# Actually send email
try:
    EMAIL_ALWAYS_ACTUALLY_SEND
except NameError:
    EMAIL_ALWAYS_ACTUALLY_SEND = False

# Email Settings

try:
    SERVER_EMAIL
except NameError:
    SERVER_EMAIL = 'noreply@class2go.stanford.edu'

# For Production, or if override is set, actually send email
if PRODUCTION or EMAIL_ALWAYS_ACTUALLY_SEND:
    DEFAULT_FROM_EMAIL = "noreply@class.stanford.edu" #probably change for production
    EMAIL_BACKEND = 'django.core.mail.backends.smtp.EmailBackend'
    EMAIL_HOST = "email-smtp.us-east-1.amazonaws.com"
    EMAIL_PORT = 587
    EMAIL_HOST_USER = SES_SMTP_USER
    EMAIL_HOST_PASSWORD = SES_SMTP_PASSWD
    EMAIL_USE_TLS = True
#Otherwise, send email to a file in the logging directory
else:
    EMAIL_BACKEND = 'django.core.mail.backends.filebased.EmailBackend'
    EMAIL_FILE_PATH = LOGGING_DIR + '/emails_sent.log'

#Max number of emails sent by each worker, defaults to 10
#EMAILS_PER_WORKER = 10

#CELERY
CELERY_ACKS_LATE = True
CELERY_IGNORE_RESULT = True   # SQS doesn't support, so this stop lots of spurrious
                              # "*-pidbox" queues from being created

CELERYD_PREFETCH_MULTIPLIER = 1

BROKER_TRANSPORT='sqs'
BROKER_USER = AWS_ACCESS_KEY_ID
BROKER_PASSWORD = AWS_SECRET_ACCESS_KEY
BROKER_TRANSPORT_OPTIONS = {
    'region': 'us-west-2',
    'queue_name_prefix' : INSTANCE+'-',
    'visibility_timeout' : 3600*6,
}

CELERY_DEFAULT_QUEUE = APP+'-default'
CELERY_DEFAULT_EXCHANGE = APP+'-default'
CELERY_DEFAULT_ROUTING_KEY = APP+'-default'

CELERY_QUEUES = {
    APP+'-default': {'exchange': APP+'-default', 'routing_key': APP+'-default'},
    APP+'-long':    {'exchange': APP+'-long',    'routing_key': APP+'-long'},
}

CELERY_ROUTES = {'kelvinator.tasks.kelvinate': {'queue': APP+'-long', 'routing_key': APP+'-long'},
                 'kelvinator.tasks.resize':    {'queue': APP+'-long', 'routing_key': APP+'-long'},
                 'celerytest.tasks.echo_long': {'queue': APP+'-long', 'routing_key': APP+'-long'},
                }

# Testing related settings
# Set a specific testrunner to use
TEST_RUNNER = 'django_nose.NoseTestSuiteRunner'
NOSE_ARGS = ['--config=./nose.cfg']

# we use django_coverage for test coverage reports. Configure here.
COVERAGE_ADDITIONAL_MODULES = ['accounts', 'kelvinator']
COVERAGE_MODULE_EXCLUDES = ['tests$', 'settings$', 'urls$', 'locale$',
                            'common.views.test', '__init__', 'django',
                            'migrations', 'south', 'djcelery']
COVERAGE_REPORT_HTML_OUTPUT_DIR = './coverage-report/'
COVERAGE_CUSTOM_REPORTS = False

# Automated grader for CS145
try:
    DB_GRADER_LOADBAL
except:
    DB_GRADER_LOADBAL='grade.prod.c2gops.com'


########NEW FILE########
__FILENAME__ = test_base
from django_nose import FastFixtureTestCase

__all__ = ['SimpleTestBase']

class SimpleTestBase(FastFixtureTestCase):
    fixtures = ['db_snapshot.json']

    def setUp(self):
        pass

    def tearDown(self):
        pass

class AuthenticatedTestBase(SimpleTestBase):
    """
    A base class for test classes that need to log in to the system and
    switch to edit mode to ensure access to the correct data.

    For each test method the urls from the main urls.py file has been included.
    If those urls change and these tests break be sure to update the comment
    as well as the test.

    TODO: If needed, parameterize each step so that some tests can log
          in only and stay in draft mode.
          Also provide configuration for the u/p (to allow student logins)
          Perhaps even take the path and parse it for the pre/suf
    """
    loginPath = '/%s/%s/preview_login/'
    userAgent = 'Mozilla/5.0'
    referer = 'http://testserver/%s/%s/preview/'

    # the following are specific to each TestCase subclass and should be
    # passed in to __init__
    username = None
    password = None
    coursePrefix = None
    courseSuffix = None
    mode = None

    def __init__(self, *args, **kwargs):
        """
        Expects to receive the following args passed in through kwargs:
          course_prefix
          course_suffix
          username
          password
          mode
        """
        assert 'course_prefix' in kwargs
        assert 'course_suffix' in kwargs
        assert 'username' in kwargs
        assert 'password' in kwargs
        assert 'mode' in kwargs

        self.coursePrefix = kwargs.pop('course_prefix', None)
        self.courseSuffix = kwargs.pop('course_suffix', None)
        self.username = kwargs.pop('username', None)
        self.password = kwargs.pop('password', None)
        self.mode = kwargs.pop('mode', None)
        super(SimpleTestBase,self).__init__(*args, **kwargs)

    def setUp(self):
        # login
        resp = self.client.post((self.loginPath%(self.coursePrefix,
                                                 self.courseSuffix)),
                                {'username' : self.username,
                                 'password' : self.password},
                                follow=True)
        self.assertEqual(resp.status_code, 200)

        # switch to edit mode for full access
        resp = self.client.post('/switch_mode/',
                                {'course_prefix': self.coursePrefix,
                                 'course_suffix': self.courseSuffix,
                                 'to_mode': self.mode},
                                HTTP_USER_AGENT=self.userAgent,
                                HTTP_REFERER=(self.referer%(self.coursePrefix,
                                                            self.courseSuffix)),
                                follow=True)
        self.assertEqual(resp.status_code, 200)


########NEW FILE########
__FILENAME__ = test_base_selenium
from django.conf import settings
from django.test import LiveServerTestCase
from nose.plugins.attrib import attr
from selenium import webdriver
try:
    from pyvirtualdisplay import Display    # Make virtual display ability optional
except ImportError, msg:
    Display = False
from selenium.webdriver.support.ui import WebDriverWait # available since 2.4.0

from os import environ
import sys


@attr('slow')
class SeleniumTestBase(LiveServerTestCase):

    @classmethod
    def setup_class(cls):
        headless = environ.get('C2G_HEADLESS_TESTS', 0)
        webdriver_preference = environ.get('C2G_SELENIUM_WEBDRIVER', 'chrome')
        sys.stderr.write('setting up webdriver %s\n' % webdriver_preference)
        if headless:
            if Display:
                cls.display = Display(visible=0, size=(1024, 768))
                cls.display.start()
            else:
                # Ok, asked for headless but we can't support it - so run with a head, but warn
                sys.stderr.write("WARNING: C2G_HEADLESS_TESTS specified, but pyvirtualdisplay not installed.\n")
                sys.stderr.write("         Continuing assuming native X display available.\n")
        if webdriver_preference == 'chrome':
            cls.browser = webdriver.Chrome()
        elif webdriver_preference == 'firefox':
            cls.browser = webdriver.Firefox()
        super(SeleniumTestBase, cls).setUpClass()

    @classmethod
    def teardown_class(cls):
        cls.browser.quit()
        if Display:
            cls.display.stop()
        super(SeleniumTestBase, cls).tearDownClass()

    def do_login(self):
        """Login with the preset username & password"""
        browser = self.browser
        # fetch the page and make sure it loads and we have a user entry field
        browser.get('%s%s' % (self.live_server_url, self.login_path))

        WebDriverWait(browser, 10).until(lambda browser : browser.find_element_by_id('id_username'))

        # now that we have the page, fill out the form
        userField = browser.find_element_by_id('id_username')
        userField.send_keys(self.username)
        passField = browser.find_element_by_id('id_password')
        passField.send_keys(self.password)

        # trigger the form submission
        inputEle = browser.find_element_by_xpath('//input[@type="submit"]')
        inputEle.submit()

        # wait at most 10 seconds or until we see evidence of login

        if settings.SITE_NAME_SHORT == "Stanford":
            WebDriverWait(browser, 10).until(lambda browser : browser.find_element_by_xpath('//span[contains(text(), "Welcome")]'))
        else:
            WebDriverWait(browser, 10).until(lambda browser : browser.find_element_by_xpath('//p[contains(text(), "Welcome")]'))

class StudentBase(SeleniumTestBase):
    """
    A class that defines the configurable data needed to target a specific
    course for a specific user.
    """
    fixtures = ['db_snapshot_video_tests.json']
    login_path = '/accounts/login'
    course_prefix = 'networking'
    course_suffix = 'Fall2012'
    course_name = 'Natural Language Processing'
    username = 'student_1'
    user_type = 'student'
    password = 'class2go'

class InstructorBase(SeleniumTestBase):
    """
    A class that defines the configurable data needed to target a specific
    course for a specific user.
    """
    fixtures = ['db_snapshot_video_tests.json']
    login_path = '/accounts/login'
    course_prefix = 'networking'
    course_suffix = 'Fall2012'
    course_name = 'Natural Language Processing'
    username = 'professor_0'
    user_type = 'instructor'
    password = 'class2go'



########NEW FILE########
__FILENAME__ = aws_getinfo
import boto.ec2
from boto.ec2 import EC2Connection
import boto.ec2.elb
from boto.ec2.elb import ELBConnection
from boto.exception import BotoServerError
import socket

from django.core.management.base import BaseCommand, CommandError

import settings


def get_my_private_ip():
    """Returns the ip address that routes to the outside world
    
    Note - this is the local address that routes to outside, not the outside
    address that routes to local
    """
    # NB: Doesn't actually create a connection, just does set up and teardown
    s = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    s.connect(('8.8.8.8', 80))    # google DNS
    my_ip = s.getsockname()[0]
    s.close()
    return my_ip

class Command(BaseCommand):
    args = ""
    help = """Write information about this host and its neighbors to disk
    
    Assumes our outbound IP address is a private address that is the same registered internally with Amazon
    Assumes we've tagged instances with a Name, and that the name is used to build the hostname
    Assumes the name of the security group of the instance matches the name of the load balancer
    """

    def handle(self, *args, **options):
        ec2_connection = EC2Connection(settings.AWS_ACCESS_KEY_ID, settings.AWS_SECRET_ACCESS_KEY)
        regions = boto.ec2.elb.regions()
        my_priv_ip = get_my_private_ip()

        for region in regions:
            region_lb_connection = ELBConnection(settings.AWS_ACCESS_KEY_ID, settings.AWS_SECRET_ACCESS_KEY, region=region)
            # regions is a list of RegionInfo with connection_cls ELBConnection
            # so for our EC2Connection we want to get an EC2Connection RegionInfo with the corresponding region descriptor
            region_connection = EC2Connection(settings.AWS_ACCESS_KEY_ID, settings.AWS_SECRET_ACCESS_KEY, region=boto.ec2.get_region(region.name))

            load_balancers = region_lb_connection.get_all_load_balancers()
            instances = [r.instances[0] for r in region_connection.get_all_instances()]
            try:
                # FIXME: TEST This in dev, stage, prod environments
                me = [i for i in instances if i.private_ip_address == my_priv_ip][0]
                my_main_group = me.groups[0].name
            except IndexError:
                me = None
                my_main_group = 'dev'
            instances = [i for i in instances if i.state != u'stopped' and i.groups[0].name == my_main_group]
            load_balancers = [lb for lb in load_balancers if lb.name == my_main_group]

            if load_balancers:
                print region, load_balancers[0]
                for instance in instances:
                    print instance.tags['Name'], instance.public_dns_name, instance.tags['Name'] + '.c2gops.com' # FIXME assumes basename
                    # TODO: we could do a set of socket connections to confirm that it's up on some set of ports we care about
                    #import ipdb; ipdb.set_trace()

            # FIXME: write the interesting information out to disk in some easily usable form

########NEW FILE########
__FILENAME__ = create_certificate
from django.core.management.base import BaseCommand, CommandError

from c2g.models import Course, CourseCertificate


class Command(BaseCommand):
    args = "<course_handle> [<certificate_type>]"
    help = """ 
        Create a new statement of accomplishment for this course,type pair.

        <course_handle> is required and expects an input like 'networking--2012'
        <certificate_type> is optional, and defaults to 'completion'.

        This does not actually ensure that you have the assets necessary to issue
        the new statement; see also the command 'get_cert_assets'.
        """

    def handle(self, *args, **options):
        course_handle = ''
        cert_type = ''
        if len(args) < 1:
            raise CommandError("You must specify at least a course handle for certificate creation.")
        course_handle = args[0].strip()
        if len(args) == 1:
            cert_type = 'completion'
        elif len(args) > 2:
            raise CommandError("Too many arguments, %d" % len(args))
        else:
            cert_type = args[1].strip()

        try:
            course = Course.objects.get(handle=course_handle, mode='ready')
        except:
            raise CommandError("Bad course handle or could not retrieve course '%s'" % course_handle)

        cert = CourseCertificate.objects.filter(course=course, type=cert_type)
        if cert:
            raise CommandError("Course %s already has a certificate of type %s" % (course_handle, cert_type))

        cert = CourseCertificate.create(course=course, type=cert_type)
        
        print "%s creation complete for %s.. OK!" % (str(cert), course.title)


########NEW FILE########
__FILENAME__ = get_cert_assets
import os
from storages.backends.s3boto import S3BotoStorage

from django.conf import settings
from django.core.management.base import BaseCommand, CommandError


release_storage = S3BotoStorage(bucket=settings.AWS_RELEASE_BUCKET_NAME, access_key=settings.AWS_ACCESS_KEY_ID, secret_key=settings.AWS_SECRET_ACCESS_KEY)


def _mkdir(newdir):
    if os.path.isdir(newdir):
        return
    elif os.path.isfile(newdir):
        raise CommandError("Couldn't make directory %s; a file with the same name as '%s' already exists." % (newdir, newdir))
    else:
        head, tail = os.path.split(newdir)
        if head and not os.path.isdir(head):
            _mkdir(head)
        if tail:
            os.mkdir(newdir)
    return

def get_files_to_copy():
    to_copy = []
    sections = {}
    courses = release_storage.listdir('/certificates')[0]
    for course in courses:
        sections[course] = release_storage.listdir('/certificates/'+course)[0]
        for section in sections[course]:
            fullpath = os.path.join('/certificates', course, section, 'certificates', 'assets')
            files = release_storage.listdir(fullpath)[1]
            for filename in files:
                if not filename:
                    continue
                to_copy.append(os.path.join(fullpath, filename))
    return to_copy

def copy_file(bucket_path):
    local_dir = settings.MEDIA_ROOT
    tmp_file = release_storage.open(bucket_path, 'rb')
    local_filepath = local_dir + bucket_path[13:]  # trim off leading /certificates
    making_target, filename = os.path.split(local_filepath)
    _mkdir(making_target)
    local_file = open(local_filepath, 'wb') 
    local_file.write(tmp_file.read())
    tmp_file.close()
    local_file.close()
    return local_filepath

class Command(BaseCommand):
    args = ""
    help = """ 
        Connect to the Release bucket in S3 and copy down certificate assets
        to localhost.
        """
    def handle(self, *args, **options):
        filelist = get_files_to_copy()
        for filename in filelist:
            print "Downloading %s..." % filename, 
            local_filename = copy_file(filename)
            print " done.\n    Saved as %s" % local_filename


########NEW FILE########
__FILENAME__ = issue_certificate_multi
from collections import defaultdict, namedtuple
import json
import logging
from optparse import make_option
import os
try:
    import pdfkit
except ImportError, msg:
    pdfkit = False
import pprint
import sys

from django.contrib.auth.models import User
from django.core.management.base import BaseCommand, CommandError

from c2g.models import Course, CourseCertificate, CourseStudentScore, UserProfile
import settings
from tools.certificates import tasks as cert_tasks


logger = logging.getLogger(__name__)
GLOBAL_DEBUG = False


def debug_out(s):
    sys.stdout.write(s + '\n')

class TemplateCache(object):
    """In-memory cache of certificate template strings loaded off disk."""
    def __init__(self):
        self.__templates = {}

    def get(self, asset_prefix, asset_path, cert_type):
        """Return the string containing the unrendered template"""
        # probably not necessary if we use a defaultdict?
        if (asset_prefix, asset_path, cert_type) not in self.__templates:
            infile_name = 'certificate-' + cert_type + '.html'
            if not asset_prefix: asset_prefix = getattr(settings, 'MEDIA_ROOT', '/')
            infile_path = os.path.join(asset_prefix, asset_path, infile_name)
            template_file = open(infile_path, 'rb')
            unrendered_template = template_file.read()
            template_file.close()
            self.__templates[(asset_prefix, asset_path, cert_type)] = unrendered_template
            if GLOBAL_DEBUG: debug_out("Caching template for %s, %s, %s" % (asset_prefix, asset_path, cert_type))
            return unrendered_template
        else:
            return self.__templates[(asset_prefix, asset_path, cert_type)]


class CertificateCache(object):
    """In-memory cache of certificate metadata loaded from the database.

    Also, creates certificate entries in the database if they do not exist."""
    def __init__(self):
        self.__certs = {}

    def get(self, course, type_tag):
        """Return the CourseCertificate database entry for this course and type."""
        # unnecessary if we use a defaultdict?
        # except we'd still need a bit of structure to instantiate missing certs
        if (course, type_tag) not in self.__certs:
            assets_path = os.path.join(course.prefix, course.suffix, 'certificates', 'assets')
            storage_path = os.path.join(course.prefix, course.suffix, 'certificates', 'storage')
            (certificate_info, create_status) = CourseCertificate.objects.get_or_create(course=course, assets=assets_path, storage=storage_path, type=type_tag)
            self.__certs[(course, type_tag)] = certificate_info
            if GLOBAL_DEBUG: debug_out("Caching cert for %s, %s" % (course.handle, type_tag))
            return certificate_info
        else:
            return self.__certs[(course, type_tag)]


class Command(BaseCommand):
    args = "<course_handle> <no_cert_file> <cert_conditions_file>"
    help = """Statement the students for a specified course handle

Parameter course_handle is, unsurprisingly, the course_handle for the course to
be processed, i.e., 'db--winter2013'.
    
File no_cert_file is a newline-delimited list of usernames who should never be
given statements (for example, admin users and cheaters). For example, it may
look like:
    ---begin sample no_cert_file.txt
    admin
    another-admin
    cheater@example.com
    BadAlicePoorBob
    ---end sample no_cert_file.txt

File cert_conditions_file is a json-formatted list of dictionaries, processed
in order for each student in a course. The first dictionary that matches the
student will be used and no subsequent ones. Each dictionary is a set of 
certifications (keys) and the tests that determine whether they apply (values).
They are applied with equal weighting, so if several certifications within one
dictionary apply to a user, the user will get all of those certifications. To
make different certifications mutually exclusive, put them in different
dictionaries. The tests portion of a dictionary entry (values) consists of a
list containing lists of exactly 2 items. These two-item sublists are ANDed 
together. That is a given certification (dictionary key) will be given to a
student only if every test in the test list (dictionary value) passes. The
format of the 2-item sublists consists of a score tag as used by the Aggregator
and a fractional value indicating what proportion of the available points must
be earned.

To clarify, here are some examples:
    This example file has three mutually-distinct conditions:
      'no cert', which is implicit
      'distinction', which happens when the student has a 75% on exercises
                     tagged by the aggregator as 'accomplishment' AND has 50%
                     on exercises tagged by the aggregator as 
                     'challenge-exercises'
    ---begin first cert_conditions_file example
    [{'distinction':[['accomplishment', 0.75], ['challenge-exercises', 0.50]]},{'accomplishment': [['accomplishment', 0.50]]}]
    ---end first cert_conditions_file example

    In this example, 'distinction' and 'accomplishment' can be achieved without
    mutual exclusion:
    ---begin second cert_conditions_file example
    [{'distinction':[['accomplishment', 0.75], ['challenge-exercises', 0.50]], 'accomplishment': [['accomplishment', 0.50]]}]
    ---end second cert_conditions_file example
    
    The PDFKti library has a number of system dependencies which cannot be
    installed from pip. Please check the tools/certificates/README_WKHTML.md
    and README_SETUP.md for additional notes.
    """
    option_list = ( 
                   make_option('-s', '--single', dest='single_student', default="", help="Force run on only <single_student>"),
                   make_option('-P', '--skip-pdf', dest='skip_pdf', action="store_true", default=False, help="Skip PDF generation and attachment"),
                   make_option('-D', '--debug', dest='DEBUG', action="store_true", default=False, help="Describe everything as it happens"),
                  ) + BaseCommand.option_list

    def handle(self, *args, **options):
        # Option processing
        if len(args) != 3:
            raise CommandError("Wrong number of arguments, %d instead of 3" % len(args))
        if not pdfkit:
            raise CommandError("Can't issue certificates without python library pdfkit installed")
        course_handle = args[0].strip()
        no_cert_file  = args[1].strip()
        cert_conditions_file = args[2].strip()
        single_student = None
        single_student_username = options.get('single_student', '')
        if single_student_username:
            single_student = User.objects.get(username=single_student_username)
        global GLOBAL_DEBUG
        if options['DEBUG']:
            GLOBAL_DEBUG = True
        if GLOBAL_DEBUG: debug_out("Option processing complete, memoizing working objects")

        # Working object memoization
        if len(course_handle) == 0:
            raise CommandError("Bad course handle: '%s'" % course_handle)
        if len(no_cert_file) == 0:
            raise CommandError("Bad no_cert_file: '%s'" % no_cert_file)
        if len(cert_conditions_file) == 0:
            raise CommandError("Bad cert_conditions_file: '%s'" % cert_conditions_file)
        try:
            course = Course.objects.get(handle=course_handle, mode='ready')
        except:
            raise CommandError("Bad course handle or could not retrieve course '%s'" % course_handle)
        if GLOBAL_DEBUG: debug_out("Loaded course metadata for %s" % course.handle)

        donotcertify = set()
        with open(no_cert_file) as nocertfile:
            # See also documented no_cert_file format at EOF
            donotcertify = set((username.strip() for username in nocertfile.readlines()))
        if GLOBAL_DEBUG: debug_out("Loaded 'do not certify' list %s" % no_cert_file)

        with open(cert_conditions_file) as binning_desc:
            tmp_str = binning_desc.read()
            binning = json.loads(tmp_str)
        if GLOBAL_DEBUG: debug_out("Loaded 'certification conditions' file %s" % cert_conditions_file)

        def __all_students(course):
            debug_counter = 0
            for student in course.get_all_students():
                debug_counter += 1
                if debug_counter % 100 == 0:
                    print debug_counter
                #if GLOBAL_DEBUG and debug_counter % 100 == 0: debug_out(str(debug_counter))
                yield student
        def __one_student(course):
            if GLOBAL_DEBUG: debug_out("Processing single student %s" % single_student.username)
            yield single_student
        student_generator = __all_students if not single_student_username else __one_student

        def __apply_test(test, subtotals_d):
            """A 'test' is a pair like ['scoring tag', percentage_that_passes]"""
            # See also documented cert_conditions_file format at EOF
            #testscore = subtotals_d[test[0]]
            #                       forces failure on missing key
            testscore = subtotals_d.get(test[0], (0, 100)) 
            #       score           total       test multiplier
            return testscore[0] >= (testscore[1] * test[1])

        templates = TemplateCache()
        certificates = CertificateCache()
        if GLOBAL_DEBUG: debug_out("Memoization of working objects complete, processing students")
        
        # assign certificates and generate assets
        got_certs = defaultdict(int)
        for student in student_generator(course):
            if student.username in donotcertify:
                # log a message and move to the next student
                logger.info("class2go statement generation: %s skipped for entry in no_cert_file %s" % (student.username, no_cert_file))
                continue
            subtotals_d = {}
            subtotals = CourseStudentScore.objects.filter(course=course, student=student).values_list('tag', 'score', 'total')
            for sub in subtotals:
                subtotals_d[sub[0]] = (sub[1], sub[2])
            # ok now do the binning for real
            earned_certs = set()
            for cert_set in binning:
                for certificate_type, tests in cert_set.iteritems():
                    if reduce(lambda x,y: x and y, (__apply_test(test, subtotals_d) for test in tests)):
                        earned_certs.add(certificate_type)
                        got_certs[certificate_type] += 1
                if earned_certs:
                    break
            if not earned_certs:
                got_certs['none'] += 1

            # ok now actually assign the cert object and run pdf generation
            profile = UserProfile.objects.get(user=student)
            for cert in earned_certs:
                cert_info = certificates.get(course, cert)

                # Attach "platonic" certification to user's profile
                profile.certificates.add(cert_info)
                profile.save() 

                if not options['skip_pdf']:
                    # Fire off worker task to build the pdf and upload it to s3
                    cert_prefix = ''
                    templatestr = templates.get(cert_prefix, cert_info.assets, cert_info.type)
                    context_d = {}
                    for k,v in subtotals_d.iteritems():
                        context_d[k.replace('-','_')] = v
                    celery_job = cert_tasks.makePDF.delay(templatestr, cert_prefix, course, cert_info, student, context_in=context_d)
                    if GLOBAL_DEBUG: debug_out("Attached PDF for %s at %s" % (student.username, celery_job))

        print "Certification process complete. Stats:"
        pprint.pprint(got_certs)


#########################################################
# This is an example no_certs_file: it consists of a newline-delimeted list of usernames
# of students who should never receive certificates for this course
#########################################################
#BAD_PERSON_USERNAME
#cheater@example.com
#admin

#########################################################
# This is an example cert_conditions_file with inline comments to help you understand 
# how it works
#########################################################
#
#/* This is an ordered list. The first one that has any dictionary value match
# * is the one that will be used. */
#[
#    /* This is a dictionary of a set of certification conditions which may be
#     * obtained simultaneously. If your various certification conditions are
#     * mutually exclusive, then there will be several dictionaries with only one
#     * key/value pair each. */
#                       /* this is a list of clauses which get ANDed together */
#                                                  /* aggregator tag name */
#                                       /* % of max */
#    {'distinction':    [['accomplishment', 0.75], ['challenge-exercises', 0.50]],},
#    {'accomplishment': [['accomplishment', 0.50],],},
#]
#
# Except of course you can't have trailing commas or comments or excess 
# whitespace in your json, so to be valid you'd have to write it like:
#[{'distinction':[['accomplishment', 0.75], ['challenge-exercises', 0.50]]},{'accomplishment': [['accomplishment', 0.50]]}]

########NEW FILE########
__FILENAME__ = issue_certificate_single
from optparse import make_option
try:
    import xhtml2pdf as xhtml2pdfImportTest
except ImportError, msg:
    xhtml2pdfImportTest = False

from django.conf import settings
from django.contrib.auth.models import User
from django.core.mail import send_mail
from django.core.management.base import BaseCommand, CommandError
from django.core.urlresolvers import reverse

from c2g.models import Course, CourseCertificate, UserProfile
from c2g.util import get_site_url, is_storage_local
from tools.certificates import tasks as certificate_tasks


def notify(cert_type, firstname, lastname, notify_addr, prefix, suffix):
    if not notify_addr or notify_addr == '(none specified)': return False
    subject = 'Your %s statement of accomplishment of %s is now available' % (prefix, cert_type)
    body = "Congratulations %s %s, you have earned a statement of accomplishment of %s " % (firstname, lastname, cert_type)
    body += "in the course %s, section %s.\n" % (prefix, suffix)
    body += "\nYou can download the PDF from your profile page at %s.\n" % (get_site_url()[:-1] + reverse('accounts.views.profile'))
    send_mail(subject, body, "noreply@class.stanford.edu", [ notify_addr, ])
    return True


class Command(BaseCommand):
    args = "<course_handle> <username>"
    help = """ 
        Issue a statement of accomplishment for the course referred to by
        course_handle to the user registered as username. If type
        is specified, creates that style of statement (e.g., 'completion' vs.
        'distinction').
        """
    option_list = ( 
                   make_option('-t', '--type', dest='cert_type', default="completion", help="Specify certificate type to generate"),
                   make_option('-l', '--local', dest='force_local', action="store_true", default=False, help="Force run locally"),
                   make_option('-r', '--remote', dest='force_remote', action="store_true", default=False, help="Force run remote (queued)"),
                   make_option('-E', '--email-test', dest='email_test', action="store_true", default=False, help="Send notification to admin"),
                   make_option('-e', '--email-notify', dest='email_user', action='store_true', default=False, help="Send notification to <username>"),
                  ) + BaseCommand.option_list

    def handle(self, *args, **options):
        # Option processing
        if len(args) != 2:
            raise CommandError("Wrong number of arguments, %d instead of 2" % len(args))
        if options['force_local'] and options['force_remote']:
            raise CommandError("Can't run both local and remote.")
        if not xhtml2pdfImportTest:
            raise CommandError("Can't issue certificates without python library xhtml2pdf being installed")
        course_handle = args[0].strip()
        username      = args[1].strip()
        if len(username) == 0:
            return
        
        # Working object memoization
        if len(course_handle) == 0:
            raise CommandError("Bad course handle: '%s'" % course_handle)
        try:
            course = Course.objects.get(handle=course_handle, mode='ready')
        except:
            raise CommandError("Bad course handle or could not retrieve course '%s'" % course_handle)

        certificate_info = CourseCertificate.objects.get(course=course, type=options['cert_type'])
        user = User.objects.get(username=username)
        profile = UserProfile.objects.get(user=user)

        # Fire off worker task
        cert_prefix = ''
        if (is_storage_local() or options['force_local']) and not options['force_remote']:
            cert_prefix = getattr(settings, 'MEDIA_ROOT', '')
        cert_path = certificate_tasks.certify(cert_prefix, course, certificate_info, user)
        print "Certification complete: %s" % certificate_info.dl_link(user)

        # Attach new certification to user's profile
        profile.certificates.add(certificate_info)
        profile.save() 
        print "Certificate attached to profile of %s" % user.username

        # Send user notifications (if applicable)
        if options['email_test'] and options['email_user']:
            raise CommandError("Can't notify both admin and %s" % username)
        to_email = '(none specified)'
        if options['email_test']:
            admins = getattr(settings, 'ADMINS', False)
            if admins:
                to_email = admins[0][1]
        elif options['email_user']:
            to_email = user.email
        if notify(certificate_info.type, user.first_name, user.last_name, to_email, course.prefix, course.suffix):
            print "Notification for %s sent to %s." % (username, to_email)
        else: 
            print "No notification sent to %s at address %s." % (username, to_email)

########NEW FILE########
__FILENAME__ = tasks
from celery import task
import os
from shutil import rmtree as util_rmtree
from storages.backends.s3boto import S3BotoStorage
import tempfile
try:
    import pdfkit
except ImportError, msg:
    pdfkit = False
try:
    from xhtml2pdf import pisa
except ImportError, msg:
    pisa = False

from django.conf import settings
from django.core.files.storage import default_storage
from django.template import Context, Template

from settings import AWS_ACCESS_KEY_ID, AWS_SECRET_ACCESS_KEY, AWS_SECURE_STORAGE_BUCKET_NAME


release_file_storage = S3BotoStorage(bucket=AWS_SECURE_STORAGE_BUCKET_NAME, access_key=AWS_ACCESS_KEY_ID, secret_key=AWS_SECRET_ACCESS_KEY)


def working_file():
    base = getattr(settings, 'FILE_UPLOAD_TEMP_DIR', '/tmp')
    return tempfile.mkstemp(prefix='tmpcert-', suffix='.pdf', dir=base)

def upload_certificate(tmp_path, outpath_prefix, path, outfile_name):
    if outpath_prefix:            # Local storage
        path = os.path.join(outpath_prefix, path)
        if os.path.isdir(path):
            util_rmtree(path)
        os.mkdir(path, 0700)
    else:                         # S3 storage
        default_storage.delete(path)

    storage_name = os.path.join(path, outfile_name)
    tmp_file = open(tmp_path, 'rb')
    storage = default_storage.open(storage_name, 'wb')
    storage.write(tmp_file.read())
    tmp_file.close()
    storage.close()
    return storage_name

@task
def certify(path_prefix, course, certificate, student, force_pdfkit=False):
    if not certificate.assets or not certificate.storage:
        raise ValueError("Certificate %s incorrectly specified; bad file paths" % str(certificate))
    # It is an error to call this method without an html to pdf renderer installed
    if not pisa and not pdfkit:
        raise ValueError("Certification cannot proceed without either xhtml2pdf or pdfkit installed.")

    # Asset prefix forced to local b/c xhtml2pdf can't read out of s3
    asset_prefix = getattr(settings, 'MEDIA_ROOT', '/')

    # Read in PDF template and set up render context
    infile_name = 'certificate-' + certificate.type + '.html'
    if not asset_prefix: asset_prefix = '/'      # NB: force local asset delivery
    infile_path = os.path.join(asset_prefix, certificate.assets, infile_name)
    unrendered_template = open(infile_path, 'rb').read()

    # Read in and render the template for this student name
    render_context = Context({'student_name': student.first_name + ' ' + student.last_name,
                              'basepath':     asset_prefix + '/' + certificate.assets + '/',
                             })
    pdf_src = Template(unrendered_template).render(render_context)

    # create the PDF in a safe temporary location
    tmp_handle, tmp_path = working_file()
    if pdfkit or force_pdfkit:
        pdf_gen_options = {'page-size': 'letter', 'encoding': 'UTF-8', 'orientation': 'landscape', 'margin-left': '0', 'margin-right': '0', 'margin-top': '0', 'margin-bottom': '0', 'quiet': ''}
        it_worked = pdfkit.from_string(input=pdf_src, output_path=tmp_path, options=pdf_gen_options)
        if not it_worked:
            # Except as far as I can tell, usually pdfkit will throw an exception and we'll die before we get here
            raise ValueError("PDFKit yielded error for user certification %s, %s" % (student.username, certificate.type))
    elif pisa:
        pdf_gen_status = pisa.CreatePDF(src=pdf_src, dest=os.fdopen(tmp_handle, 'wb'), path=os.path.join('/', path_prefix, certificate.assets))
        if pdf_gen_status.err:
            raise ValueError("PDF generation raised error code %s for user certification %s, %s" % (str(pdf_gen_status.err), student.username, certificate.type))

    # After file creation, move to s3 (or local)
    outfile_name = certificate.get_filename_by_user(student)
    return upload_certificate(tmp_path, path_prefix, certificate.storage, outfile_name)

@task
def makePDF(templatestr, path_prefix, course, certificate, student, context_in={}):
    # It is an error to call this method without an html to pdf renderer installed
    if not pisa and not pdfkit:
        raise ValueError("Certification cannot proceed without pdfkit installed.")

    # Render the template for this student name
    asset_prefix = getattr(settings, 'MEDIA_ROOT', '/')
    context_in.update({'student': student,
                    'student_name': student.first_name + ' ' + student.last_name,
                    'basepath':     os.path.join(asset_prefix, certificate.assets, ''), })
    render_context = Context(context_in)
    pdf_src = Template(templatestr).render(render_context)

    # create the PDF in a safe temporary location
    tmp_handle, tmp_path = working_file()
    pdf_gen_options = {'page-size': 'letter', 'encoding': 'UTF-8', 'orientation': 'landscape', 'margin-left': '0', 'margin-right': '0', 'margin-top': '0', 'margin-bottom': '0', 'quiet': ''}
    it_worked = pdfkit.from_string(input=pdf_src, output_path=tmp_path, options=pdf_gen_options)
    if not it_worked:
        # Except as far as I can tell, usually pdfkit will throw an exception and we'll die before we get here
        raise ValueError("PDFKit yielded error for user certification %s, %s" % (student.username, certificate.type))

    # After file creation, move to s3 (or local)
    outfile_name = certificate.get_filename_by_user(student)
    return upload_certificate(tmp_path, path_prefix, certificate.storage, outfile_name)


########NEW FILE########
__FILENAME__ = database_ci
import os

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.mysql', 
        'NAME': 'class2go',                     
        'USER': 'root',                     
        'PASSWORD': '',
        'HOST': '',
        'PORT': '',
    }
}

SECRET_KEY = 'travis-ci-class2go'

# When PRODUCTION=True we don't show stackdumps on errors
PRODUCTION = False
INSTANCE = "travis"

# Put your name and email address here, so Django serious errors can come to you
ADMINS = (
        ('Class2Go Travis', 'class2go-dev@stanford.edu')
        )

AWS_ACCESS_KEY_ID = 'local'
AWS_SECRET_ACCESS_KEY = 'local'
AWS_STORAGE_BUCKET_NAME = 'local'

MEDIA_ROOT =           '/tmp/storage'
LOGGING_DIR =          '/tmp/logs'
STATIC_ROOT =          '/tmp/static'
LOCAL_CACHE_LOCATION = '/tmp/cache'

PIAZZA_ENDPOINT = "https://piazza.com/basic_lti"
PIAZZA_KEY = "class2go.testing"
PIAZZA_SECRET = "piazza_secret_test"

SES_SMTP_USER = ''
SES_SMTP_PASSWD = ''

YT_SERVICE_DEVELOPER_KEY = ''
GOOGLE_CLIENT_ID = ''
GOOGLE_CLIENT_SECRET = ''

GRADER_ENDPOINT='http://example.com/test'


########NEW FILE########
__FILENAME__ = urls
from django.conf.urls.defaults import patterns, include, url
from django.views.generic.simple import redirect_to
from django.conf import settings
from rest import views

import settings

# Uncomment the next two lines to enable the admin:
from django.contrib import admin
admin.autodiscover()

urlpatterns = patterns('',

    # Health check endpoint.  Used by AWS load balancer.  Want something stable that
    # won't be redirected or change
    url(r'^_health$', 'c2g.views.healthcheck'),
                       
    # Testing the error pages (404 and 500)
    url(r'^_throw500$', 'c2g.views.throw500'),
    url(r'^_throw404$', 'c2g.views.throw404'),

    # REST Class2Go API
    url(r'^rest/login', 'rest.views.rest_login'),
    url(r'^rest/problemactivities', views.ProblemActivities.as_view()),
    url(r'^rest/courses', views.CourseList.as_view()),
    url(r'^rest/announcements', views.AnnouncementList.as_view()),                                              
    url(r'^rest/psets', views.ProblemSetList.as_view()),                                              
    url(r'^rest/psettoexercise', views.ProblemSetToExerciseList.as_view()),  
    url(r'^rest/exercise', views.ExerciseList.as_view()),  
    url(r'^rest/contentsection', views.ContentSectionList.as_view()),  
    url(r'^rest/videotoexercise', views.VideoToExerciseList.as_view()),  
    url(r'^rest/videoactivities', views.VideoActivities.as_view()),
    url(r'^rest/files', views.FilesList.as_view()),                         
    url(r'^rest/video', views.VideoList.as_view()),  
    url(r'^rest/exams', views.ExamList.as_view()),
    url(r'^rest/examrecords', views.ExamRecordList.as_view()),
    url(r'^rest/examscores', views.ExamScoreList.as_view()),
    url(r'^rest/examscorefields', views.ExamScoreFieldList.as_view()),
                    
    #Testing messages
    url(r'^_test_messages$', 'c2g.views.test_messages'),

    url(r'^honor_code$', 'c2g.views.hc'),
    url(r'^terms_of_service$', 'c2g.views.tos'),
    url(r'^privacy$', 'c2g.views.privacy'),
    url(r'^contactus$', 'c2g.views.contactus'),
    url(r'^faq$', 'c2g.views.faq'),
    url(r'^test_xml$', 'courses.exams.views.show_test_xml'),
    url(r'^hiring/?$', 'courses.landing.views.hiring'),

    url(r'^maint$', 'c2g.views.maintenance'),
                       
    # Get server epoch
    url(r'^server_epoch/?$', 'c2g.views.server_epoch'),
    
    # Get server time
    url(r'^server_time/?$', 'c2g.views.server_time'),

    url(r'^(?P<course_prefix>[a-zA-Z0-9_-]+)/(?P<course_suffix>[a-zA-Z0-9_-]+)/unenroll/?$', 'courses.views.unenroll'),

    # general exam stuff--These endpoints are hidden from student users and do not have to be named (i.e. aliased for each exam subtype)
    url(r'^exams/parse_markdown/?$', 'courses.exams.views.parse_markdown', name='parse_markdown'),
    url(r'^(?P<course_prefix>[a-zA-Z0-9_-]+)/(?P<course_suffix>[a-zA-Z0-9_-]+)/exams/create/?$', 'courses.exams.views.create_exam'),
    url(r'^(?P<course_prefix>[a-zA-Z0-9_-]+)/(?P<course_suffix>[a-zA-Z0-9_-]+)/exams/save/?$', 'courses.exams.views.save_exam_ajax'),
    url(r'^delete_exam/?', 'courses.exams.actions.delete_exam'),
    url(r'^(?P<course_prefix>[a-zA-Z0-9_-]+)/(?P<course_suffix>[a-zA-Z0-9_-]+)/exams/check_metadata_xml/?$', 'courses.exams.views.check_metadata_xml'),
    url(r'^(?P<course_prefix>[a-zA-Z0-9_-]+)/(?P<course_suffix>[a-zA-Z0-9_-]+)/exams/(?P<exam_slug>[a-zA-Z0-9_-]+)/edit/?$', 'courses.exams.views.edit_exam'),
    url(r'^(?P<course_prefix>[a-zA-Z0-9_-]+)/(?P<course_suffix>[a-zA-Z0-9_-]+)/exams/(?P<exam_slug>[a-zA-Z0-9_-]+)/save/?$', 'courses.exams.views.edit_exam_ajax_wrapper', name='save_edited_exam'),
    url(r'^(?P<course_prefix>[a-zA-Z0-9_-]+)/(?P<course_suffix>[a-zA-Z0-9_-]+)/exams/(?P<exam_slug>[a-zA-Z0-9_-]+)/submit/?$', 'courses.exams.views.collect_data'),
    url(r'^(?P<course_prefix>[a-zA-Z0-9_-]+)/(?P<course_suffix>[a-zA-Z0-9_-]+)/exams/(?P<exam_slug>[a-zA-Z0-9_-]+)/all_submissions_to_grade/?$', 'courses.exams.views.view_submissions_to_grade'),
    url(r'^(?P<course_prefix>[a-zA-Z0-9_-]+)/(?P<course_suffix>[a-zA-Z0-9_-]+)/exams/(?P<exam_slug>[a-zA-Z0-9_-]+)/post_csv_grades/?$', 'courses.exams.views.post_csv_grades'),
    url(r'^(?P<course_prefix>[a-zA-Z0-9_-]+)/(?P<course_suffix>[a-zA-Z0-9_-]+)/exams/(?P<exam_slug>[a-zA-Z0-9_-]+)/get_csv_grades/?$', 'courses.exams.views.view_csv_grades'),
    url(r'^(?P<course_prefix>[a-zA-Z0-9_-]+)/(?P<course_suffix>[a-zA-Z0-9_-]+)/exams/(?P<exam_slug>[a-zA-Z0-9_-]+)/save_student_progress/?$', 'courses.exams.views.student_save_progress'),
    url(r'^(?P<course_prefix>[a-zA-Z0-9_-]+)/(?P<course_suffix>[a-zA-Z0-9_-]+)/exams/(?P<exam_slug>[a-zA-Z0-9_-]+)/confirm/?$', 'courses.exams.views.confirm', name='confirm_exam_start'),
                    
                       
                       
    #The rest of these URLs end up in the location bar of student users.  We should alias them for each exam subtype so that students do not get
    #confused.  Would love to make this DRY, because it's very repetitive, but I don't know how.
                      
    #Exam subtype of exam
    #All subtypes use the same views in this list, so any reversing should be done using the name, i.e. 'exam_list', otherwise it
    #will not return the right URL for the right type
    url(r'^(?P<course_prefix>[a-zA-Z0-9_-]+)/(?P<course_suffix>[a-zA-Z0-9_-]+)/exams/?$', 'courses.exams.views.listAll', {'show_types':['exam',]}, name='exam_list'),
    url(r'^(?P<course_prefix>[a-zA-Z0-9_-]+)/(?P<course_suffix>[a-zA-Z0-9_-]+)/exams/(?P<exam_slug>[a-zA-Z0-9_-]+)/?$', 'courses.exams.views.show_exam', name='exam_show'),
    url(r'^(?P<course_prefix>[a-zA-Z0-9_-]+)/(?P<course_suffix>[a-zA-Z0-9_-]+)/exams/(?P<exam_slug>[a-zA-Z0-9_-]+)/snapshot/?$', 'courses.exams.views.show_populated_exam', name='exam_populated'),
    url(r'^(?P<course_prefix>[a-zA-Z0-9_-]+)/(?P<course_suffix>[a-zA-Z0-9_-]+)/exams/(?P<exam_slug>[a-zA-Z0-9_-]+)/graded/?$', 'courses.exams.views.show_graded_exam', name='exam_graded'),
    url(r'^(?P<course_prefix>[a-zA-Z0-9_-]+)/(?P<course_suffix>[a-zA-Z0-9_-]+)/exams/(?P<exam_slug>[a-zA-Z0-9_-]+)/view_submissions/?$', 'courses.exams.views.view_my_submissions', name='exam_my_submissions'),
    url(r'^(?P<course_prefix>[a-zA-Z0-9_-]+)/(?P<course_suffix>[a-zA-Z0-9_-]+)/exams/(?P<exam_slug>[a-zA-Z0-9_-]+)/record/(?P<record_id>-?[0-9]+)/?$', 'courses.exams.views.show_graded_record', name='exam_record'),
    url(r'^(?P<course_prefix>[a-zA-Z0-9_-]+)/(?P<course_suffix>[a-zA-Z0-9_-]+)/exams/(?P<exam_slug>[a-zA-Z0-9_-]+)/feedback/?$', 'courses.exams.views.exam_feedback'),

    #problemset subtype of exam
    #This and the exams list use the same view, so any reversing should be done using the name, i.e. 'survey_list', otherwise it
    #will be always return /exams/
    url(r'^(?P<course_prefix>[a-zA-Z0-9_-]+)/(?P<course_suffix>[a-zA-Z0-9_-]+)/problemsets/?$', 'courses.exams.views.listAll', {'show_types':['problemset',]}, name='problemset_list'),
    url(r'^(?P<course_prefix>[a-zA-Z0-9_-]+)/(?P<course_suffix>[a-zA-Z0-9_-]+)/problemsets/(?P<exam_slug>[a-zA-Z0-9_-]+)/?$', 'courses.exams.views.show_exam', name='problemset_show'),
    url(r'^(?P<course_prefix>[a-zA-Z0-9_-]+)/(?P<course_suffix>[a-zA-Z0-9_-]+)/problemsets/(?P<exam_slug>[a-zA-Z0-9_-]+)/snapshot/?$', 'courses.exams.views.show_populated_exam', name='problemset_populated'),
    url(r'^(?P<course_prefix>[a-zA-Z0-9_-]+)/(?P<course_suffix>[a-zA-Z0-9_-]+)/problemsets/(?P<exam_slug>[a-zA-Z0-9_-]+)/graded/?$', 'courses.exams.views.show_graded_exam', name='problemset_graded'),
    url(r'^(?P<course_prefix>[a-zA-Z0-9_-]+)/(?P<course_suffix>[a-zA-Z0-9_-]+)/problemsets/(?P<exam_slug>[a-zA-Z0-9_-]+)/view_submissions/?$', 'courses.exams.views.view_my_submissions', name='problemset_my_submissions'),
    url(r'^(?P<course_prefix>[a-zA-Z0-9_-]+)/(?P<course_suffix>[a-zA-Z0-9_-]+)/problemsets/(?P<exam_slug>[a-zA-Z0-9_-]+)/record/(?P<record_id>-?[0-9]+)/?$', 'courses.exams.views.show_graded_record', name='problemset_record'),

    #survey subtype of exam
    #This and the exams list use the same view, so any reversing should be done using the name, i.e. 'survey_list', otherwise it
    #will be always return /exams/
    url(r'^(?P<course_prefix>[a-zA-Z0-9_-]+)/(?P<course_suffix>[a-zA-Z0-9_-]+)/surveys/?$', 'courses.exams.views.listAll', {'show_types':['survey',]}, name='survey_list'),
    url(r'^(?P<course_prefix>[a-zA-Z0-9_-]+)/(?P<course_suffix>[a-zA-Z0-9_-]+)/surveys/(?P<exam_slug>[a-zA-Z0-9_-]+)/?$', 'courses.exams.views.show_exam', name='survey_show'),
    url(r'^(?P<course_prefix>[a-zA-Z0-9_-]+)/(?P<course_suffix>[a-zA-Z0-9_-]+)/surveys/(?P<exam_slug>[a-zA-Z0-9_-]+)/snapshot/?$', 'courses.exams.views.show_populated_exam', name='survey_populated'),
    url(r'^(?P<course_prefix>[a-zA-Z0-9_-]+)/(?P<course_suffix>[a-zA-Z0-9_-]+)/surveys/(?P<exam_slug>[a-zA-Z0-9_-]+)/graded/?$', 'courses.exams.views.show_graded_exam', name='survey_graded'), #admittedly doesn't make sense, here for consistency
    url(r'^(?P<course_prefix>[a-zA-Z0-9_-]+)/(?P<course_suffix>[a-zA-Z0-9_-]+)/surveys/(?P<exam_slug>[a-zA-Z0-9_-]+)/view_submissions/?$', 'courses.exams.views.view_my_submissions', name='survey_my_submissions'),
    url(r'^(?P<course_prefix>[a-zA-Z0-9_-]+)/(?P<course_suffix>[a-zA-Z0-9_-]+)/surveys/(?P<exam_slug>[a-zA-Z0-9_-]+)/record/(?P<record_id>-?[0-9]+)/?$', 'courses.exams.views.show_graded_record', name='survey_record'),

    #interactive_exercise subtype of exam
    url(r'^(?P<course_prefix>[a-zA-Z0-9_-]+)/(?P<course_suffix>[a-zA-Z0-9_-]+)/interactive_exercises/?$', 'courses.exams.views.listAll', {'show_types':['interactive_exercise',]}, name='interactive_exercise_list'),
    url(r'^(?P<course_prefix>[a-zA-Z0-9_-]+)/(?P<course_suffix>[a-zA-Z0-9_-]+)/interactive_exercises/(?P<exam_slug>[a-zA-Z0-9_-]+)/?$', 'courses.exams.views.show_exam', name='interactive_exercise_show'),
    url(r'^(?P<course_prefix>[a-zA-Z0-9_-]+)/(?P<course_suffix>[a-zA-Z0-9_-]+)/interactive_exercises/(?P<exam_slug>[a-zA-Z0-9_-]+)/snapshot/?$', 'courses.exams.views.show_populated_exam', name='interactive_exercise_populated'),
    url(r'^(?P<course_prefix>[a-zA-Z0-9_-]+)/(?P<course_suffix>[a-zA-Z0-9_-]+)/interactive_exercises/(?P<exam_slug>[a-zA-Z0-9_-]+)/graded/?$', 'courses.exams.views.show_graded_exam', name='interactive_exercise_graded'),
    url(r'^(?P<course_prefix>[a-zA-Z0-9_-]+)/(?P<course_suffix>[a-zA-Z0-9_-]+)/interactive_exercises/(?P<exam_slug>[a-zA-Z0-9_-]+)/view_submissions/?$', 'courses.exams.views.view_my_submissions', name='interactive_exercise_my_submissions'),
    url(r'^(?P<course_prefix>[a-zA-Z0-9_-]+)/(?P<course_suffix>[a-zA-Z0-9_-]+)/interactive_exercises/(?P<exam_slug>[a-zA-Z0-9_-]+)/record/(?P<record_id>-?[0-9]+)/?$', 'courses.exams.views.show_graded_record', name='interactive_exercise_record'),

    #emailoptout
    url(r'^email_optout/(?P<code>[a-zA-Z0-9]+)/?$', 'courses.email_members.views.optout', name='maillist_optout'),
    
    # Commented out the following 2 urls since point to a signup page which is
    # no longer required.
#    url(r'^courses/?$', 'c2g.views.home', name='c2g_home'),
#    url(r'^courses/signup/?$', 'courses.actions.signup'),

#    url(r'^class2go/', include('class2go.foo.urls')),
   
    url(r'^default-login/?$', 'accounts.views.default_login', name='default_login'),
    #shibboleth login
    url(r'^shib-login/?$', 'accounts.views.shib_login', name='shib_login'),
                       
    
    #impersonate
    url(r'^impersonate/(?P<username>[\w.@+-]+)/?$', 'accounts.views.impersonate', name='impersonate'),
                       
    #for data collection
    url(r'^videos/save/', 'courses.videos.actions.save_video_progress'),
    url(r'^videos/record_download/', 'courses.videos.actions.record_download'),
    url(r'^problemsets/attempt/(?P<problemId>\d+)/?$', 'problemsets.views.attempt'),
    url(r'^problemsets/attempt_protect/(?P<problemId>\d+)/?$', 'problemsets.views.attempt_protect'),

    # accounts app for user management
    url(r'^accounts/profile/?$', 'accounts.views.profile', name='accounts_profile'),
    url(r'^accounts/profile/edit/?', 'accounts.views.edit'),
    url(r'^accounts/profile/save_edits/?', 'accounts.views.save_edits'),
    url(r'^accounts/profile/save_piazza_opts/?$', 'accounts.views.save_piazza_opts'),

    url(r'^accounts/', include('registration.backends.simple.urls')),

    # Uncomment the admin/doc line below to enable admin documentation:
    url(r'^admin/doc/', include('django.contrib.admindocs.urls')),

    # Uncomment the next line to enable the admin:
    url(r'^admin/?', include(admin.site.urls)),

    # The following line is temprarily commented out until we figure out how django cascades its URL matching operations.
    # After this is figured out, the rest of the matches below shall be moved to courses.url.
    #url(r'.*', include('courses.urls')),


    #Course signup for students
    url(r'^(?P<course_prefix>[a-zA-Z0-9_-]+)/(?P<course_suffix>[a-zA-Z0-9_-]+)/signup/?$', 'courses.actions.signup_with_course'),


    url(r'^courses/new/?', 'courses.admin_views.new'),

    url(r'^(?P<course_prefix>[a-zA-Z0-9_-]+)/(?P<course_suffix>[a-zA-Z0-9_-]+)/?$',
        'courses.views.main',
        name='course_main'),
    url(r'^(?P<course_prefix>[a-zA-Z0-9_-]+)/(?P<course_suffix>[a-zA-Z0-9_-]+)/materials/?$',
        'courses.views.course_materials',
        name='course_materials'),
    url(r'^(?P<course_prefix>[a-zA-Z0-9_-]+)/(?P<course_suffix>[a-zA-Z0-9_-]+)/materials/(?P<section_id>-?[0-9]+)/?$',
        'courses.views.course_materials',
        name='course_materials_by_section'),
    url(r'^(?P<course_prefix>[a-zA-Z0-9_-]+)/(?P<course_suffix>[a-zA-Z0-9_-]+)/admin/?', 'courses.admin_views.admin'),
                       
    #member management
    url(r'^(?P<course_prefix>[a-zA-Z0-9_-]+)/(?P<course_suffix>[a-zA-Z0-9_-]+)/member_management/?', 'courses.member_management.views.listAll'),
    url(r'^(?P<course_prefix>[a-zA-Z0-9_-]+)/(?P<course_suffix>[a-zA-Z0-9_-]+)/unenroll_student/?', 'courses.member_management.views.unenroll_student'),
    url(r'^(?P<course_prefix>[a-zA-Z0-9_-]+)/(?P<course_suffix>[a-zA-Z0-9_-]+)/enroll_students/?', 'courses.member_management.views.enroll_students'),
    url(r'^(?P<course_prefix>[a-zA-Z0-9_-]+)/(?P<course_suffix>[a-zA-Z0-9_-]+)/resend_invite/?', 'courses.member_management.views.resend_invite'),
    url(r'^(?P<course_prefix>[a-zA-Z0-9_-]+)/(?P<course_suffix>[a-zA-Z0-9_-]+)/uninvite/?', 'courses.member_management.views.uninvite'),
    url(r'^(?P<course_prefix>[a-zA-Z0-9_-]+)/(?P<course_suffix>[a-zA-Z0-9_-]+)/reclassify_member/?', 'courses.member_management.views.reclassify_member'),

                       
    url(r'^(?P<course_prefix>[a-zA-Z0-9_-]+)/(?P<course_suffix>[a-zA-Z0-9_-]+)/leftnav/?$', 'courses.views.leftnav'),
    url(r'^(?P<course_prefix>[a-zA-Z0-9_-]+)/(?P<course_suffix>[a-zA-Z0-9_-]+)/rightnav/?$', 'courses.views.rightnav'),

    url(r'^switch_mode', 'courses.actions.switch_mode'),
    url(r'^add_section', 'courses.actions.add_section'),

    url(r'^commit/?', 'courses.actions.commit'),
    url(r'^revert/?$', 'courses.actions.revert'),
    url(r'^change_live_datetime/?', 'courses.actions.change_live_datetime'),

    url(r'^(?P<course_prefix>[a-zA-Z0-9_-]+)/(?P<course_suffix>[a-zA-Z0-9_-]+)/(?P<file_type>files|videos|problemsets)/check_filename/?', 'courses.actions.check_filename'),

    # Additional Pages
    url(r'^(?P<course_prefix>[a-zA-Z0-9_-]+)/(?P<course_suffix>[a-zA-Z0-9_-]+)/pages/(?P<slug>[a-zA-Z0-9_-]+)/?$', 'courses.additional_pages.views.main'),
    url(r'^(?P<course_prefix>[a-zA-Z0-9_-]+)/(?P<course_suffix>[a-zA-Z0-9_-]+)/manage_nav_menu/?$', 'courses.additional_pages.views.manage_nav_menu'),
    url(r'^(?P<course_prefix>[a-zA-Z0-9_-]+)/(?P<course_suffix>[a-zA-Z0-9_-]+)/add_section_page/?$', 'courses.additional_pages.views.add_section_page'),
    url(r'^delete_page', 'courses.additional_pages.actions.delete'),
    url(r'^save_page', 'courses.additional_pages.actions.save'),
    url(r'^save_order', 'courses.additional_pages.actions.save_order'),
    url(r'^add_page', 'courses.additional_pages.actions.add'),

    # Announcements
    url(r'^(?P<course_prefix>[a-zA-Z0-9_-]+)/(?P<course_suffix>[a-zA-Z0-9_-]+)/announcements/?$', 'courses.announcements.views.list'),
    url(r'^(?P<course_prefix>[a-zA-Z0-9_-]+)/(?P<course_suffix>[a-zA-Z0-9_-]+)/announcements/admin/?$', 'courses.announcements.views.admin'),
    url(r'^(?P<course_prefix>[a-zA-Z0-9_-]+)/(?P<course_suffix>[a-zA-Z0-9_-]+)/announcements/(?P<announcement_id>-?[0-9]+)/edit/?$', 'courses.announcements.views.edit'),
    url(r'^save_announcement_order$', 'courses.announcements.actions.save_announcement_order'),
    url(r'^save_announcement$', 'courses.announcements.actions.save_announcement'),
    url(r'^add_announcement$', 'courses.announcements.actions.add_announcement'),
    url(r'^delete_announcement$', 'courses.announcements.actions.delete_announcement'),
    url(r'^email_announcement$', 'courses.announcements.actions.email_announcement'),

    # Forums
    url(r'^(?P<course_prefix>[a-zA-Z0-9_-]+)/(?P<course_suffix>[a-zA-Z0-9_-]+)/forums/?$', 'courses.forums.views.view'),

    # Sections
    url(r'^(?P<course_prefix>[a-zA-Z0-9_-]+)/(?P<course_suffix>[a-zA-Z0-9_-]+)/sections/reorder/?$', 'courses.content_sections.views.reorder'),
    url(r'^(?P<course_prefix>[a-zA-Z0-9_-]+)/(?P<course_suffix>[a-zA-Z0-9_-]+)/sections/rename/(?P<section_id>-?[0-9]+)/?$', 'courses.content_sections.views.rename'),
    url(r'^rename$', 'courses.content_sections.actions.rename'),
    url(r'^save_content_section_order$', 'courses.content_sections.actions.save_order'),
    url(r'^delete_content_section$', 'courses.content_sections.actions.delete_content_section'),
    url(r'^save_content_section_content_order$', 'courses.content_sections.actions.save_content_order'),
    url(r'^content_section/get_children/(?P<section_id>-?[0-9]+)/?$', 'courses.content_sections.actions.get_children'),
    url(r'^content_section/get_children_as_contentgroup_parents/(?P<section_id>-?[0-9]+)/?$', 'courses.content_sections.actions.get_children_as_contentgroup_parents'),

    # Videos
    url(r'^(?P<course_prefix>[a-zA-Z0-9_-]+)/(?P<course_suffix>[a-zA-Z0-9_-]+)/videos/?$',
        'courses.videos.views.list',
        name='course_video_list'),
    url(r'^(?P<course_prefix>[a-zA-Z0-9_-]+)/(?P<course_suffix>[a-zA-Z0-9_-]+)/videos/upload$', 'courses.videos.views.upload'),
    url(r'^switch_video_quiz_mode', 'courses.videos.actions.switch_quiz_mode'),
    url(r'^(?P<course_prefix>[a-zA-Z0-9_-]+)/(?P<course_suffix>[a-zA-Z0-9_-]+)/videos/(?P<slug>[a-zA-Z0-9_-]+)/?$',
        'courses.videos.views.view',
        name='course_video_view'),
    url(r'^(?P<course_prefix>[a-zA-Z0-9_-]+)/(?P<course_suffix>[a-zA-Z0-9_-]+)/videos/(?P<slug>[a-zA-Z0-9_-]+)/edit/?$', 'courses.videos.views.edit'),
    url(r'^add_video/?$', 'courses.videos.actions.add_video'),
    url(r'^(?P<course_prefix>[a-zA-Z0-9_-]+)/(?P<course_suffix>[a-zA-Z0-9_-]+)/videos/(?P<slug>[a-zA-Z0-9_-]+)/edit_video/?$', 'courses.videos.actions.edit_video'),
    url(r'^(?P<course_prefix>[a-zA-Z0-9_-]+)/(?P<course_suffix>[a-zA-Z0-9_-]+)/videos/(?P<slug>[a-zA-Z0-9_-]+)/reset_video/?$', 'courses.videos.actions.reset_video'),
    url(r'^delete_video/?$', 'courses.videos.actions.delete_video'),
    url(r'^upload_video/?', 'courses.videos.actions.upload'), ####ADDED BY KEVIN
    url(r'^oauth2callback/?', 'courses.videos.actions.oauth'),
    url(r'^delete_video_exercise/?$', 'courses.videos.views.delete_exercise'),
    url(r'^(?P<course_prefix>[a-zA-Z0-9_-]+)/(?P<course_suffix>[a-zA-Z0-9_-]+)/videos/(?P<video_id>[a-zA-Z0-9_-]+)/load_video_problem_set/?$',
        'courses.videos.views.load_video_problem_set',
        name='course_video_pset'),
    


    # Video Exercises
    url(r'^(?P<course_prefix>[a-zA-Z0-9_-]+)/(?P<course_suffix>[a-zA-Z0-9_-]+)/video_exercises/(?P<video_id>[a-zA-Z0-9_-]+)/?$', 'courses.video_exercises.views.view'),
    url(r'^(?P<course_prefix>[a-zA-Z0-9_-]+)/(?P<course_suffix>[a-zA-Z0-9_-]+)/videos/(?P<video_slug>[a-zA-Z0-9_-]+)/manage_exercises?$', 'courses.videos.views.manage_exercises'),
    url(r'^add_video_exercise/?$', 'courses.videos.views.add_exercise'),
    url(r'^add_existing_video_exercises/?$', 'courses.videos.views.add_existing_exercises'),
    url(r'^save_video_exercises/?', 'courses.videos.views.save_exercises'),
    url(r'^get_video_exercises/?$', 'courses.videos.views.get_video_exercises'),

    #Problem Sets
    url(r'^(?P<course_prefix>[a-zA-Z0-9_-]+)/(?P<course_suffix>[a-zA-Z0-9_-]+)/problemsets_old/?$', 'problemsets.views.listAll'),
    url(r'^(?P<course_prefix>[a-zA-Z0-9_-]+)/(?P<course_suffix>[a-zA-Z0-9_-]+)/problemsets_old/(?P<pset_slug>[a-zA-Z0-9_-]+)?$', 'problemsets.views.show'),
    url(r'^(?P<course_prefix>[a-zA-Z0-9_-]+)/(?P<course_suffix>[a-zA-Z0-9_-]+)/createproblemset/?$', 'problemsets.views.create_form'),
    url(r'^createproblemsetaction/?', 'problemsets.views.create_action'),
    url(r'^(?P<course_prefix>[a-zA-Z0-9_-]+)/(?P<course_suffix>[a-zA-Z0-9_-]+)/problemsets/(?P<pset_slug>[a-zA-Z0-9_-]+)/edit/?$', 'problemsets.views.edit_form'),
    url(r'^editproblemsetaction/?', 'problemsets.views.edit_action'),
    url(r'^(?P<course_prefix>[a-zA-Z0-9_-]+)/(?P<course_suffix>[a-zA-Z0-9_-]+)/problemsets/(?P<pset_slug>[a-zA-Z0-9_-]+)/manage_exercises?$', 'problemsets.views.manage_exercises'),
    url(r'^add_existing_problemset_exercises/?$', 'problemsets.views.add_existing_exercises'),
    url(r'^save_problemset_exercises/?', 'problemsets.views.save_exercises'),
    url(r'^delete_exercise/?', 'problemsets.views.delete_exercise'),
    url(r'^delete_problemset/?', 'problemsets.actions.delete_problemset'),

    url(r'^(?P<course_prefix>[a-zA-Z0-9_-]+)/(?P<course_suffix>[a-zA-Z0-9_-]+)/exercises/(?P<filename>.+)/edit/?$', 'courses.exercises.views.edit'),
    url(r'^(?P<course_prefix>[a-zA-Z0-9_-]+)/(?P<course_suffix>[a-zA-Z0-9_-]+)/exercises/(?P<filename>.+)/save/?$', 'courses.exercises.views.save'),

    url(r'^(?P<course_prefix>[a-zA-Z0-9_-]+)/(?P<course_suffix>[a-zA-Z0-9_-]+)/exercises/(?P<exercise_name>.+)$', 'problemsets.views.read_exercise'),
    url(r'^(?P<course_prefix>[a-zA-Z0-9_-]+)/(?P<course_suffix>[a-zA-Z0-9_-]+)/problemsets/(?P<pset_slug>[a-zA-Z0-9_-]+)/load_problem_set?$', 'problemsets.views.load_problem_set'),


    #Files
    url(r'^(?P<course_prefix>[a-zA-Z0-9_-]+)/(?P<course_suffix>[a-zA-Z0-9_-]+)/files/upload$', 'courses.files.views.upload'),
    url(r'^(?P<course_prefix>[a-zA-Z0-9_-]+)/(?P<course_suffix>[a-zA-Z0-9_-]+)/files/edit/(?P<file_id>-?[0-9]+)/?$', 'courses.files.views.edit'),
    url(r'^upload_file/?', 'courses.files.actions.upload'),
    url(r'^edit_file/?', 'courses.files.actions.edit'),
    url(r'^delete_file/?', 'courses.files.actions.delete_file'),
                       
    #Content Sharing
    url(r'^(?P<course_prefix>[a-zA-Z0-9_-]+)/(?P<course_suffix>[a-zA-Z0-9_-]+)/copy_section/?$', 'courses.content_sections.views.copy_content_form'),
    url(r'^(?P<course_prefix>[a-zA-Z0-9_-]+)/(?P<course_suffix>[a-zA-Z0-9_-]+)/copy_section/send/?$', 'courses.content_sections.views.copy_content'),
    url(r'^(?P<course_prefix>[a-zA-Z0-9_-]+)/(?P<course_suffix>[a-zA-Z0-9_-]+)/copy_course/?$', 'courses.content_sections.views.copy_course_form'),
    url(r'^(?P<course_prefix>[a-zA-Z0-9_-]+)/(?P<course_suffix>[a-zA-Z0-9_-]+)/copy_course/send/?$', 'courses.content_sections.views.copy_course'),
                                             
    # Landing Page
    url(r'^/?$', 'courses.landing.views.landing'),
                       
                       
    # quizdown preview page
    url(r'^quizdown_preview/?$', 'courses.exams.views.quizdown_preview'),
    url(r'^check_exam_metadata/?$', 'courses.exams.views.check_metadata_xml_no_course'),

    #Preview
    url(r'^(?P<course_prefix>[a-zA-Z0-9_-]+)/(?P<course_suffix>[a-zA-Z0-9_-]+)/preview/$', 'courses.preview.views.preview'),
    url(r'^(?P<course_prefix>[a-zA-Z0-9_-]+)/(?P<course_suffix>[a-zA-Z0-9_-]+)/preview_reg/$', 'courses.preview.views.preview_reg'),
    # url(r'^(?P<course_prefix>[a-zA-Z0-9_-]+)/(?P<course_suffix>[a-zA-Z0-9_-]+)/preview_login/$', 'courses.preview.views.preview_login'),
    url(r'^(?P<course_prefix>[a-zA-Z0-9_-]+)/(?P<course_suffix>[a-zA-Z0-9_-]+)/preview_login/$', 'accounts.views.default_preview_login'),
    #Email
    url(r'^(?P<course_prefix>[a-zA-Z0-9_-]+)/(?P<course_suffix>[a-zA-Z0-9_-]+)/email_members/$', 'courses.email_members.views.email_members'),             
    
    #Reports
    url(r'^(?P<course_prefix>[a-zA-Z0-9_-]+)/(?P<course_suffix>[a-zA-Z0-9_-]+)/browse_reports/?$', 'courses.reports.views.main'),
    url(r'^generate_report$', 'courses.reports.views.generate_report'),
    url(r'^(?P<course_prefix>[a-zA-Z0-9_-]+)/(?P<course_suffix>[a-zA-Z0-9_-]+)/reports/(?P<report_subfolder>[a-zA-Z0-9_-]+)/(?P<report_name>.+)$', 'courses.reports.views.download_report'),
    
    #In-line Reports
    url(r'^(?P<course_prefix>[a-zA-Z0-9_-]+)/(?P<course_suffix>[a-zA-Z0-9_-]+)/generate_in_line_report/?$', 'courses.reports.views.generate_in_line_report'),
    url(r'^(?P<course_prefix>[a-zA-Z0-9_-]+)/(?P<course_suffix>[a-zA-Z0-9_-]+)/summary_report/(?P<exam_slug>[a-zA-Z0-9_-]+)/?$', 'courses.reports.views.summary_report'),

    #Chat
    # FIXME: this should be replaced with a widget embedded in other pages, but giving it its own page lets me get up and testing fast
    url(r'^(?P<course_prefix>[a-zA-Z0-9_-]+)/(?P<course_suffix>[a-zA-Z0-9_-]+)/chat/?$', 'courses.chat.views.prototype'),
    
    #Current course redirects THIS SHOULD PROBABLY ALWAYS BE THE LAST ITEM THAT HAS TO DO WITH COURSES
    url(r'^(?P<course_prefix>[a-zA-Z0-9_-]+)/?$', 'courses.views.current_redirects'),

)

# when testing we get a warning about favicon, silence it by mapping to
# the location of the file
if settings.DEBUG and settings.SITE_NAME_SHORT:
    site=settings.SITE_NAME_SHORT
    urlpatterns += patterns('',
        url(r'^favicon.ico$', 'django.views.generic.simple.redirect_to',
        {'url': settings.STATIC_URL+'graphics/sites/%s/favicon.ico' % site})
    )
   

########NEW FILE########
__FILENAME__ = wsgi
"""
WSGI config for class2go project.

This module contains the WSGI application used by Django's development server
and any production WSGI deployments. It should expose a module-level variable
named ``application``. Django's ``runserver`` and ``runfcgi`` commands discover
this application via the ``WSGI_APPLICATION`` setting.

Usually you will have the standard Django WSGI application here, but it also
might make sense to replace the whole Django WSGI application with a custom one
that later delegates to the Django one. For example, you could introduce WSGI
middleware here, or combine a Django application with an application of another
framework.

"""
import os

os.environ.setdefault("DJANGO_SETTINGS_MODULE", "settings")

# This application object is used by any WSGI server configured to use this
# file. This includes Django's development server, if the WSGI_APPLICATION
# setting points here.
from django.core.wsgi import get_wsgi_application
application = get_wsgi_application()

# Apply WSGI middleware here.
# from helloworld.wsgi import HelloWorldApplication
# application = HelloWorldApplication(application)

########NEW FILE########
__FILENAME__ = bug_report
#!/usr/bin/python 
"""
If you want to sent mail from your mac, you need to enable SMTP
locally.  There are guides on the Internet:
  http://www.freshblurbs.com/blog/2009/05/10/how-enable-local-smtp-postfix-os-x-leopard.html
  http://www.garron.me/mac/postfix-relay-gmail-mac-os-x-local-smtp.html
helpful python email examples:
  http://docs.python.org/2/library/email-examples.html#email-examples 
"""

import sys
import os
import requests
import smtplib
from optparse import OptionParser

repo_name="Stanford-Online/class2go"
issues_url="https://api.github.com/repos/%s/issues" % repo_name
email_sender="sef@cs.stanford.edu"
priority_labels=('P0','P1')

token=os.getenv('GHI_TOKEN')

options = {}
issues = []
users = set()
output = []

## Basic I/O Functions

def read_issues_from_github():
    """
    Use Github v3 API to get all open issues for the repo.  Returns the list of 
    issues and the set of user ids to that have at least one issue assigned.
    """

    global issues, users, output

    filters = { 'state' : 'open' }
    if token:
        filters.update({ 'access_token' : token })
    page_url = issues_url
    while page_url:
        req = requests.get(page_url, params=filters)
        req.raise_for_status()

        issues += req.json
        if 'next' in req.links:
            page_url = req.links['next']['url']
        else:
            page_url = False

    users = set(i['assignee']['login'] for i in issues if i['assignee'] )

    if options.verbose:
        print "%s has %d open issues" % (repo_name, len(issues))
        print "assignees: %s" % ",".join(users)

def output_issue(issue, to):
    line = ""
    if options.html:
        line += "<br><a href=%s>%d</a>: " % (issue['html_url'], issue['number'])
    else:
        line += "%d: " % issue['number']
    line += issue['title']
    for l in issue['labels']:
        line += " [%s]" % l['name']
    if 'assignee' in issue and issue['assignee'] is not None:
        line += " (%s)" % issue['assignee']
    to.append(line)
            

## Reporting functions, each one just appends lines to the global output list

def issues_without_assignee():
    global output
    section = list()
    section.append("P1 issues that have no assignee")
    section.append("")

    found = False
    for i in [ i for i in issues if (i['assignee'] is None and i['labels']) ]:
        if [ l for l in i['labels'] if l['name'] == u'P1' ]:
            found = True
            output_issue(i, section)
    if found:
        output.extend(section)

def issues_by_assignee_by_priority():
    global output
    section = list()
    section.append("")
    section.append("Issues By Assignee")
    section.append("")

    found = False
    for u in users:
        for p in priority_labels:
            found = True
            pass
    if found:
        output.extend(section)

def report_by_email():
    global options, output
    mailer = smtplib.SMTP('localhost')
    mailer.sendmail(email_sender, [ options.email ], "\n".join(output))

def report_to_stdout():
    global options, output
    print "\n".join(output)


################################

def main():
    global options, issues, output
    parser = OptionParser()
    parser.add_option("-q", "--quiet", dest="verbose",
                      action="store_false", default=True,
                      help="don't print status messages to stdout")
    parser.add_option("-e", "--email", dest="email",
                      help="email recipients instead of printing to stdout")
    parser.add_option("-m", "--html", dest="html", 
                      action="store_true", default=False,
                      help="force html output (always on for email)")
    (options, args) = parser.parse_args()
    if options.email:
        options.html = True
    if args:
        parser.error("Not sure what to do with %s" % args)

    read_issues_from_github()
    issues_without_assignee()
    issues_by_assignee_by_priority()
    if options.email:
        report_by_email()
    else:
        report_to_stdout()


if __name__=="__main__":
    main()

########NEW FILE########
__FILENAME__ = videoExerciseTest
from selenium import webdriver
from selenium.common.exceptions import TimeoutException
from selenium.webdriver.support.ui import WebDriverWait # available since 2.4.0
import time
from selenium import selenium, common

from selenium.webdriver.support.ui import WebDriverWait

# Create a new instance of the Firefox driver
driver = webdriver.Firefox()

driver.get("http://localhost:8080/networking/Fall2012/preview/?login")

inputElementUsername = driver.find_element_by_id("id_username")
inputElementPassword = driver.find_element_by_id("id_password")

#login
inputElementUsername.send_keys("professor_0")
inputElementPassword.send_keys("class2go")
inputElementPassword.submit()

courseIntroVideo = driver.find_element_by_link_text("Course Introduction")
courseIntroVideo.click()
    
time.sleep(10)
driver.execute_script("player.playVideo();")

print driver.title
########NEW FILE########
__FILENAME__ = pset_meta
DUE_DATE = '03/11/2013 21:00'
GRACE_DATE = '03/11/2013 21:00'
LATE_DATE = '03/23/2013 23:59'

LATE_PENALTY = '50'
NUM_SUBMISSIONS = '2'
RESUBMISSION_PENALTY = '0'

SECTION = 'Constraints and Triggers'
########NEW FILE########
__FILENAME__ = transform_interactive
"""
transform_interactive.py
------------------------
Python script to trasnform from Coursera XML for workbench query exercises
to Class2Go format

Author: Garrett Schlesinger
Modified: 01/08/2013
"""
import sys
import xml.etree.ElementTree as ET
import re
from pset_meta import *

def createProblemSet(root):
    """
    Creates a problem set element to be filled in by the parser. Fills in many default values -- need to change later
    """
    pset = ET.Element('problemset')
    name = root.find('.//title').text

    pset.set('data-report', name)
    pset.set('type', 'interactive')
    pset.set('title', name)
    pset.set('url-identifier', re.sub('[\s()]', '', name))
    
    ET.SubElement(pset, 'description')
    dates = ET.Element('dates')
    dates.set('due-date', DUE_DATE)
    dates.set('grace-period', GRACE_DATE)
    dates.set('hard-deadline', LATE_DATE)
    pset.append(dates)

    grading = ET.Element('grading')
    grading.set('late-penalty', LATE_PENALTY)
    grading.set('num-submissions', NUM_SUBMISSIONS)
    grading.set('resubmission-penalty', RESUBMISSION_PENALTY)
    pset.append(grading)

    section = ET.Element('section')
    section.set('section', SECTION)
    pset.append(section)

    tree_builder = ET.TreeBuilder()
    preamble = tree_builder.start('preamble', {})
    tree_builder.data(root.find('.//preamble').text)
    tree_builder.end('preamble')
    tree_builder.close()

    pset.append(preamble)

    #ET.dump(pset)

    return pset, re.sub('\s', '', name)

def questionToProblem(question):
    """
    Converts a Coursera question to a C2G problem
    """
    grader = question.find('.//grader')

    tree_builder = ET.TreeBuilder()

    attrs = {}
    attrs['id'] = 'q%s' % question.get('id')
    attrs['data-report'] = 'q%s' % question.get('id')

    problem = tree_builder.start('problem', attrs)
    s = '<p>%s</p>' % question.find('.//text').text
    x = ET.XML(s)
    problem.append(x)
    #tree_builder.data('<text><p>%s</p></text>' % question.find('.//text').text)

    tree_builder.start('dbinteractiveresponse', {})

    tree_builder.start('grader_name', {})
    tree_builder.data(grader.get('name'))
    tree_builder.end('grader_name')

    tree_builder.start('database-file', {})
    tree_builder.data(grader.find('.//database-file').text)
    tree_builder.end('database-file')

    tree_builder.start('answer-file', {})
    tree_builder.data(grader.find('.//answer-file').text)
    tree_builder.end('answer-file')

    tree_builder.start('select_dict', {})
    tree_builder.end('select_dict')

    tree_builder.start('parameters', {})

    tree_builder.start('qnum', {})
    tree_builder.data(grader.find('.//qnum').text)
    tree_builder.end('qnum')

    tree_builder.start('answer-text', {})
    tree_builder.data(grader.find('.//answer-text').text)
    tree_builder.end('answer-text')

    tree_builder.start('runquery-tag', {})
    try:
        tree_builder.data(grader.find('.//runquery-tag').text)
    except:
        pass
    tree_builder.end('runquery-tag')

    tree_builder.start('workbench-tag', {})
    try:
        tree_builder.data(grader.find('.//workbench-tag').text)
    except:
        pass
    tree_builder.end('workbench-tag')


    tree_builder.end('parameters')

    tree_builder.end('dbinteractiveresponse')

    tree_builder.start('solution', {})
    tree_builder.data(question.find('.//explanation').text)
    tree_builder.end('solution')

    tree_builder.end('problem')
    tree_builder.close()


    return problem

def parseQuestions(root):
    """
    Loops through the Coursera xml, parsing the questions into 
    c2g format
    """
    pset, name = createProblemSet(root)
    questions = root.findall('.//question')
    for question in questions:
        print("question %s" % question.get('id'))
        problem = questionToProblem(question)
        pset.append(problem)

    tree = ET.ElementTree(pset)
    tree.write('%s.xml' % name)

if __name__ == '__main__':
    if len(sys.argv) < 2:
        print >> sys.stderr, 'usage: python %s <Coursera xml-file>' % sys.argv[0]
        sys.exit()
    root = ET.parse(sys.argv[1])
    parseQuestions(root)

########NEW FILE########
__FILENAME__ = expand_tabs
#!/usr/bin/env python
import fileinput, optparse, sys

# Command-line parser
parser = optparse.OptionParser(
        usage="""
%prog [options] [files]
Expand tab to spaces, printing to the standard output by default.
When no files are given, read from the standard input.

Examples:
 expand in one file
    % expand_tabs.py -t 4 file.txt

 expand tabs in Python source files
    % find . -name "*.py" | xargs expand_tabs.py -it 4
""".strip(),
        formatter=optparse.IndentedHelpFormatter(max_help_position=30)
    )
parser.add_option("-t", "--tabsize", type="int", metavar="SIZE")
parser.add_option("-i", "--inplace", action="store_true", help="change the files in-place (don't print)")
parser.add_option("-b", "--backupext", default="", metavar="EXT", help="backup extension to use (default: no backup)")

options, args = parser.parse_args()
if options.tabsize is None:
    parser.error("tab size not specified")

# Do the work
for line in fileinput.input(files=args, inplace=options.inplace, backup=options.backupext):
    sys.stdout.write( line.expandtabs(options.tabsize) )

########NEW FILE########
__FILENAME__ = edx-maillist
#!/usr/bin/env python
#
# Assumes that on both C2G and EdX jumpbox machines you have a .my.cnf
# file that points to the datbase that you want to query.  Best if its
# a readonly replica, but not strictly required.  The .my.cnf file should
# look something like this.
#
#  [client]
#       user=username
#       database=dbname
#	    password=password
#       host=endpointname.us-west-2.rds.amazonaws.com
#
# Also assumes that you have a ssh agent running that gives can get you
# to the jumpbox / deploy server
#

import sys
import os
import subprocess
import csv
import random
import math
import optparse
import re
import unicodedata

DEFAULT_COURSEID="Education/EDUC115N/How_to_Learn_Math"
CHECK_EMAILS_TO_SEND = 10
JUMPBOX_USERNAME="sef"

def parsecommandline():
    usage = """usage: %prog [options]

Will generate a list of email address and write to stdout.  Info
messages to stderr.  Assumes that you can get to the edx readonly
database from your jumpbox, and the Class2Go readonly database from
the deploy server."""

    parser = optparse.OptionParser(usage=usage)

    parser.add_option("-c", dest="check",
            help="addr to insert at beginning, end, through the mail list.  %d mails will be sent." % CHECK_EMAILS_TO_SEND)
    parser.add_option("-n", dest="checknum", action="store_false", default=True,
            help="don't insert chech numbers in email addresses")

    parser.add_option("-i", dest="courseid", default=DEFAULT_COURSEID,
            help="course id string, default=\"%s\"" % DEFAULT_COURSEID)

    (options, args) = parser.parse_args()

    if options.check:
        m=re.match(r"([A-Z0-9._%+-]+)@([A-Z0-9.-]+\.[A-Z]{2,4})", options.check, re.I)
        if not m:
            parser.error("%s isn't a valid email address" % options.check)
        (name, domain) = m.group(1,2)
        if options.checknum:
            name += "+%03d"
        options.checkline = '"","%s@%s"' % (name, domain)
    if options.checknum == False and not options.check:
        parser.error("nonum option valid with check address option")

    return (options, args)
    

def remove_diacritic(input):
    """ 
    Accept a unicode string, and return a normal string without any
    diacritical marks.

    From: http://code.activestate.com/recipes/576648-remove-diatrical-marks-including-accents-from-stri/
    """ 
    return unicodedata.normalize('NFKD', unicode(input, 'ISO-8859-1')).encode('ASCII', 'ignore')


def dict_from_database(purpose, sql_query, proxy, command_template):
    result = dict()

    print >> sys.stderr, "%s: SQL Query:" % purpose
    print >> sys.stderr, sql_query
    print >> sys.stderr

    cmd = command_template % (proxy, sql_query)
    cmd = cmd.replace('\n', ' ')

    print >> sys.stderr, "%s: Remote Command:" % purpose
    print >> sys.stderr, cmd
    print >> sys.stderr

    raw_list = subprocess.check_output(cmd, shell=True)

    warnings = 0
    errors = 0
    for line in raw_list.split(os.linesep):
        if line == "":
            continue
        try:
            (name,email) = line.split('\t')
            k = email.lower().encode('ascii')
            v = remove_diacritic(name).strip()
            v = v.replace(',', '_')   # Class2Go fails on commas in the name
            if v != name:
                print >> sys.stderr, "WARNING (%s): flattened name \"%s\" to \"%s\"" % (purpose, name, v)
                warnings += 1
        except Exception as e:
            print >>sys.stderr, "ERROR (%s): skip: %s" % (purpose, line)
            errors += 1
        else:
            result[k] = v
    print >> sys.stderr, "edx query found=%d students, %d warnings, %d errors" % (len(result), warnings, errors)
    return result


def print_separator_to_stderr():
    print >> sys.stderr 
    print >> sys.stderr, "-------------------------------------------------------"
    print >> sys.stderr 


def print_checkline(options, lineno, checklines, force=False):
    if options.check and (lineno % options.checkfreq == 0 or force):
        if options.checknum:
            formatted_line = options.checkline % checklines
        else:
            formatted_line = options.checkline
        print formatted_line
        checklines += 1
    return checklines


def main():
    (options, args) = parsecommandline()
    
    # Query EdX for Enrolled Students
    sql_query_template="""select up.name, u.email 
from student_courseenrollment s, auth_userprofile up, auth_user u
where s.user_id = u.id
and s.user_id = up.user_id
and s.user_id not in
  (select user_id from bulk_email_optout oo where oo.course_id = '%s')
and s.course_id = '%s'
"""
    # hack - interpolate courseid string twice to work around collation error
    sql_query = sql_query_template % (options.courseid, options.courseid)
    proxy = "%s@jump.prod.class.stanford.edu" % JUMPBOX_USERNAME
    command_template = """ssh %s "mysql -e \\"%s\\"" """
    students = dict_from_database("enrolled_students", sql_query, proxy, command_template)

    # Get Excludes list from Class2Go
    print_separator_to_stderr()
    sql_query = "select 'none',addr from c2g_emailaddr where optout=1"
    proxy = "%s@deploy.dev.c2gops.com" % JUMPBOX_USERNAME
    command_template = """ssh %s "mysql -e \\"%s\\"" """
    excludes = dict_from_database("excludes", sql_query, proxy, command_template)

    # Create new list, randomized, removing optouts
    optouts = 0
    newlist = dict()
    for k,v in students.iteritems():
        if excludes.has_key(k):
            print >> sys.stderr, "WARNING: excluding %s because of optout" % k
            optouts += 1
        else:
            newlist[k] = v
    newlist_k = newlist.keys()
    random.shuffle(newlist_k)
    
    # Print final list to stdout
    options.checkfreq = math.floor(len(newlist)/(CHECK_EMAILS_TO_SEND-1))
    written = 0
    checklines = 0
    for k in newlist_k:
        checklines = print_checkline(options, written, checklines)
        print "\"%s\",\"%s\"" % (newlist[k],k)
        written += 1
    checklines = print_checkline(options, written, checklines, True)

    # Summary at the end to stderr
    print_separator_to_stderr()
    print >> sys.stderr, "INFO: found %d" % len(students)
    print >> sys.stderr, "INFO: excluded %d from optout list of %d" % (optouts, len(excludes))
    print >> sys.stderr, "INFO: wrote %d addresses, %d checklines" % (written, checklines)

    
if __name__ == '__main__':
    main()


########NEW FILE########
__FILENAME__ = merge-cousera
#!/usr/bin/env python

import csv
import random

prepends = [
    "sefklon@gmail.com",
    "jbau@stanford.edu",
    "jmanning@gmail.com",
    "gregbruhns@gmail.com",
    ]

def dict_from_file(fname, fields):
    result = dict()
    skips = 0
    f = open(fname, 'r')
    reader = csv.reader(f)
    for row in reader:
        if len(row) == fields: 
            if fields == 2:
                (name,email) = row
                result[email] = name
            elif fields == 1:
                email = row[0]
                result[email] = 1
        else:
            skips += 1
    print "%s:\t read %d\tskipped %d" % (fname, len(result), skips)
    return result 

def main():
    newlist = dict()
    mainlist = dict_from_file("dec12_list.csv", 2)
    excludes = dict_from_file("excludes-dec12.csv", 2)
    coursera = dict_from_file("coursera-dec12-in.lst", 1)
    for k,v in coursera.iteritems():
        if not mainlist.has_key(k):
            if not excludes.has_key(k):
                newlist[k] = v
    addresses = newlist.keys()
    random.shuffle(addresses)
    addresses = prepends + addresses

    OUTPUT = "coursera-dec12-unique.csv"
    writes = 0
    f = open(OUTPUT, 'w')
    line = 0
    for k in addresses:
        writes += 1
        f.write("%s,%s\n" % ('', k))  # has to be (name, email) even if we don't have names
    print "%s:\t wrote %d" % (OUTPUT, writes)
    
if __name__ == '__main__':
    main()


########NEW FILE########
__FILENAME__ = merge
#!/usr/bin/env python

import csv
import random

OUTPUT="merged-may13.csv"
CHECKLINE=",sefklon+%03d@gmail.com\n"
CHECKS=10000

def dict_from_file(fname):
    result = dict()
    skips = 0
    f = open(fname, 'r')
    reader = csv.reader(f)
    for row in reader:
        if len(row) == 2:
            (name,email) = row
        elif len(row) == 1:
            email=row[0]
            name=''
        else:
            skips += 1

        # before using, watch out for nutty characters!
        try:
            k=email.lower().encode('ascii')
            v=name.encode('ascii')
        except:
            skips += 1
        else:
            result[k] = v
    print "%s:\t read %d\tskipped %d" % (fname, len(result), skips)
    return result 

def main():
    mainlist = dict_from_file("starting-may13.csv")
    lastquarter = dict_from_file("authuser-may13.csv")
    excludes = dict_from_file("excludes-may13.csv")

    newlist = dict()
    for k,v in mainlist.iteritems():
        if not excludes.has_key(k):
            newlist[k] = v
    for k,v in lastquarter.iteritems():      # pick up updates
        if not excludes.has_key(k):
            newlist[k] = v
    newlist_k = newlist.keys()
    random.shuffle(newlist_k)

    f = open(OUTPUT, 'w')
    line = 0
    written = 0
    checklines = 0

    f.write(CHECKLINE % checklines)
    checklines += 1
    for k in newlist_k:
        f.write("%s,%s\n" % (newlist[k],k))
        written += 1
        if written % CHECKS == 0:
            f.write(CHECKLINE % checklines)
            checklines += 1
    f.write(CHECKLINE % checklines)
    checklines += 1

    print "%s:\t wrote %d\tchecklines %d" % (OUTPUT, written, checklines)
    
if __name__ == '__main__':
    main()


########NEW FILE########
__FILENAME__ = optouts-from-c2g
#!/usr/bin/env python
#
# Assumes that on both C2G and EdX jumpbox machines you have a .my.cnf
# file that points to the datbase that you want to query.  Best if its
# a readonly replica, but not strictly required.  The .my.cnf file should
# look something like this.
#
#  [client]
#       user=username
#       database=dbname
#    password=password
#       host=endpointname.us-west-2.rds.amazonaws.com
#
# Also assumes that you have a ssh agent running that gives can get you
# to the jumpbox / deploy server
#

import sys
import os
import subprocess
import csv
import random
import math
import optparse
import re
import unicodedata

CHECK_EMAILS_TO_SEND = 10
JUMPBOX_USERNAME="sef"

def parsecommandline():
    usage = """usage: %prog [options]

Will create optout entries in edx from Class2Go optouts.  Info
messages to stderr.  Assumes that you can get to the edx readonly
database from your jumpbox, and the Class2Go readonly database from
the deploy server."""

    parser = optparse.OptionParser(usage=usage)

    parser.add_option("-c", dest="check",
            help="addr to insert at beginning, end, through the mail list.  %d mails will be sent." % CHECK_EMAILS_TO_SEND)
    parser.add_option("-n", dest="checknum", action="store_false", default=True,
            help="don't insert chech numbers in email addresses")

    (options, args) = parser.parse_args()

    if options.check:
        m=re.match(r"([A-Z0-9._%+-]+)@([A-Z0-9.-]+\.[A-Z]{2,4})", options.check, re.I)
        if not m:
            parser.error("%s isn't a valid email address" % options.check)
        (name, domain) = m.group(1,2)
        if options.checknum:
            name += "+%03d"
        options.checkline = '"","%s@%s"' % (name, domain)
    if options.checknum == False and not options.check:
        parser.error("nonum option valid with check address option")

    return (options, args)
    

def remove_diacritic(input):
    """ 
    Accept a unicode string, and return a normal string without any
    diacritical marks.

    From: http://code.activestate.com/recipes/576648-remove-diatrical-marks-including-accents-from-stri/
    """ 
    return unicodedata.normalize('NFKD', unicode(input, 'ISO-8859-1')).encode('ASCII', 'ignore')


def dict_from_database(purpose, sql_query, proxy, command_template):
    """
    Returns a dictionary with email key and values list of course_ids enrolled
    """

    result = dict()

    print >> sys.stderr, "%s: SQL Query:" % purpose
    print >> sys.stderr, sql_query
    print >> sys.stderr

    cmd = command_template % (proxy, sql_query)
    cmd = cmd.replace('\n', ' ')

    print >> sys.stderr, "%s: Remote Command:" % purpose
    print >> sys.stderr, cmd
    print >> sys.stderr

    raw_list = subprocess.check_output(cmd, shell=True)

    warnings = 0
    errors = 0
    for line in raw_list.split(os.linesep):
        if line == "":
            continue
        try:
            (email, course_id) = line.split('\t')
            k = email.lower().encode('ascii')
        except Exception as e:
            print >>sys.stderr, "ERROR (%s): skip: %s" % (purpose, line)
            errors += 1
        else:
            if k in result:
                result[k].append(course_id)
            else:
                result[k] = [course_id]
    print >> sys.stderr, "edx query found=%d students, %d warnings, %d errors" % (len(result), warnings, errors)
    return result


def print_separator_to_stderr():
    print >> sys.stderr 
    print >> sys.stderr, "-------------------------------------------------------"
    print >> sys.stderr 


def print_checkline(options, lineno, checklines, force=False):
    if options.check and (lineno % options.checkfreq == 0 or force):
        if options.checknum:
            formatted_line = options.checkline % checklines
        else:
            formatted_line = options.checkline
        print formatted_line
        checklines += 1
    return checklines


def main():
    (options, args) = parsecommandline()

    # Query EdX for Students enrolled in any course
    sql_query_template="""select u.email, s.course_id
from student_courseenrollment s, auth_user u
where s.user_id = u.id"""
    sql_query = sql_query_template
    proxy = "%s@jump.prod.class.stanford.edu" % JUMPBOX_USERNAME
    command_template = """ssh %s "mysql -e \\"%s\\"" """
    students = dict_from_database("enrolled_students", sql_query, proxy, command_template)

    # Get Excludes list from Class2Go
    print_separator_to_stderr()
    sql_query = "select addr,'none' from c2g_emailaddr where optout=1"
    proxy = "%s@deploy.dev.c2gops.com" % JUMPBOX_USERNAME
    command_template = """ssh %s "mysql -e \\"%s\\"" """
    excludes = dict_from_database("excludes", sql_query, proxy, command_template)

    # Build insert statements for optouts
    optouts = 0
    insert_statements = ""
    for k,v in students.iteritems():
        if excludes.has_key(k):
            for course_id in v:
                insert_statements += "INSERT IGNORE INTO bulk_email_optout (email, course_id) VALUES ('%s', '%s');\n" % (k, course_id)
                print >> sys.stderr, "Added insert statement for optout for %s from %s" % (k, course_id)
                optouts += 1

    # proxy = "%s@jump.prod.class.stanford.edu" % JUMPBOX_USERNAME
    # command_template = """ssh %s "mysql -e \\"%s\\"" """
    # cmd = command_template % (proxy, insert_statements)
    # result = subprocess.check_output(cmd, shell=True) #raises CalledProcessError if error, success otherwise

    print insert_statements

    # Summary at the end to stderr
    print_separator_to_stderr()
    print >> sys.stderr, "INFO: found %d" % len(students)
    print >> sys.stderr, "INFO: %d new optout objects created from optout list of %d" % (optouts, len(excludes))

    
if __name__ == '__main__':
    main()

########NEW FILE########
__FILENAME__ = MergeProblemSetReports
# read in a bunch of csv files w/ problem set scores, and do an outer join on the userIDs, listing the late-penalty adjusted score for each

# columns we care about are 1 & 5 - username and total score after late penalty


import csv, sys

files = {'ps1':'2013_01_03__15_45_42-ps1spectrum11.csv' , 'ps2': '2013_01_03__15_52_14-pset2.csv', 'ps3': '2013_01_03__15_52_21-pset3.csv', 'ps4': '2013_01_03__15_52_40-ps4111111111.csv', 'ps5':'2013_01_03__15_52_34-pset5.csv'}

students = {}

for Problemset in files.keys():
    with open(files[Problemset], 'rb') as csvfile:
        StudentData = csv.reader(csvfile, dialect='excel', delimiter=',', quotechar='"')
        count = 0
        for StudentRow in StudentData:
            # we don't want the first 4 rows, they're headers & blanks
            count +=1
            if count > 4:
                username=StudentRow[0]
                score=StudentRow[4]
                
                # have we seen this userid yet?
                if username not in students:
                    students[username]={}
                    
                students[username][Problemset]=score
                
# write a header row                
sys.stdout.write('username')
for Problemset in sorted(files.keys()):
    sys.stdout.write (',')
    sys.stdout.write (Problemset)
sys.stdout.write('\n')
                
# write a row for each student
for student in sorted(students.keys()):
    sys.stdout.write('\'')
    sys.stdout.write (student)
    sys.stdout.write('\'')
    for Problemset in sorted(files.keys()):
        if Problemset in students[student]:
            sys.stdout.write(',')
            sys.stdout.write(students[student][Problemset])
        else:
            sys.stdout.write(',')
            sys.stdout.write('0')
    sys.stdout.write ('\n')
            
    
    
########NEW FILE########
__FILENAME__ = qdoc
#!/usr/bin/env python
# by Eric Chu and Justin Foster

import sys
import time
import re
from lxml import etree as ET
from lxml.builder import E

def remove_leading_spaces(s, space=2):
  if s.startswith(' '*space):
    return s[2:]
  else:
    return s

def prettyprint(s):
  return ''.join(map(remove_leading_spaces, s.splitlines(True)))

def show_help():
  a = """Usage: qdoc.py [SOURCEFILE]
  Produces html and xml from a quiz SOURCEFILE.
  
  To use this quiz maker, typing
  
      qdoc.py myquiz.quiz
  
  will produce myquiz.html and myquiz.xml (class2go xml format)
  that contain a list of questions and answers 
  provided in myquiz.quiz.""" 
  
  b = prettyprint(a)
  
  print b
  
# print out the html header
class Question(object):
  def __init__(self, s):
    self.choices = [[]]
    self.text = ['']
    self.title = s.strip('[').strip(']').strip()
    self.current = 0
    
  def current_choice(self):
    return self.choices[self.current][-1]
  
  def add_newline(self):
    self.text[self.current] = self.text[self.current] + '<p/>'
  
  def add_subquestion(self):
    self.current += 1
    self.choices.append([])
    self.text.append('')
  
  def add_choice(self, s, answer, description):
    self.choices[self.current].append(
      Choice(s.strip('*=').strip(), answer, description))
  
  def add_text(self, s):
    if self.text[self.current] is '':
      self.text[self.current] = s
    else:
      self.text[self.current] = self.text[self.current] + ' ' + s
    
  def to_html(self):
    s = ''
    for (c,t) in zip(self.choices, self.text):
      if t is "": # FIX: hack to skip printing of extra description spans        
        continue
      s = s + ("""
      <span class="description"><p>%s</p></span>
      <ul>%s</ul>
      """ % (t, make_choices(c)))
    
    if self.title is "":
      return s
    else:
      return ("""
    <legend>%s</legend>
    %s
    """ % (self.title, s))

  def to_xml(self):
    problem = E.problem()
    for (c,t) in zip(self.choices, self.text):
      if t is "": # FIX: hack to skip printing extra problems
        continue
      qs = t.replace('$','$$').split('<p/>')
      for q in qs:
        p = E.p(q)
        problem.append(p)
      mcg = E.multiplechoiceresponse()
      mcg.append(make_xml_choices(c))
      # could append to problem, but weird formatting
      p.append(mcg)
    return problem

class Choice(object):
  def __init__(self, s, is_answer, response):
    self.txt = s
    self.answer = is_answer
    self.response = response
    
  def add_response(self, s):
      self.response = self.response + ' ' + s
      
  def to_html(self):
    # maybe use self.answer to highlight?
    return ("""
    <li class="choice">
      <div class="selection"><a href="#" onclick="return false">%s</a></div>
      <div class="response">%s</div>
    </li>
    """ % (self.txt, self.response))

  def to_xml(self):
    # add the attribute correct attribute
    if self.answer:
      choice = E.choice(correct='true',name=snake_case(self.txt)[0:19])
    else:
      choice = E.choice(correct='false',name=snake_case(self.txt)[0:19])
    # give the choice values
    choice.append(E.text(self.txt.replace('$','$$')))
    # pull out the explanation
    # HACK: get rid of <span> formatting using XML
    response = self.response.split('</span>')[-1].strip()
    choice.append(E.explanation(response))
    return choice

# Quiz contains questions and choices
# probably not the best parser, but gets the job done....
class Quiz(object):    
  def __init__(self, f):
    self.STATE = "TITLE"
    self.parse_quiz(f)
  
  # since this is so small, it works. but could just use regex
  def parse_quiz(self, f):
    self.questions = []
    qnew = None
    for line in f:
      l = line.strip()
      if len(l) > 0:
        # skip comments
        if l.startswith('#'):
          continue
        l = l.replace("{{",'')
        l = l.replace("}}",'')

        if self.STATE is "TITLE" and l.startswith('=='):
          # this is the header
          self.title = l.strip('==').strip()
          self.STATE = "QUESTION"
          continue
 
        if self.STATE is "GET_QUESTION_TEXT" and qnew is not None:
          if l.startswith('*'):
            self.STATE = "CHOICE"
          elif l.startswith('[') and l.endswith(']'):
            self.STATE = "QUESTION"
          else:
            qnew.add_text(l)
            
        if self.STATE is "CHOICE" and qnew is not None:
          # this is the beginning of a choice
          start = l.find('::')  # find beginnings of description, if any; must be space delimited

          end = len(l)
          if l.startswith('*='):
            description = """<span class="right">Correct! </span>"""
            answer = True
          else:
            description = """<span class="wrong">Incorrect. </span>"""
            answer = False
            
          if l.startswith('*'):
            if start is not -1:
              description = description + \
                l[start:len(l)].strip('::')              
              l = l[0:start]
            
            qnew.add_choice(l, answer, description)                

          elif l.startswith('[') and l.endswith(']'):
            self.STATE = "QUESTION"
          else:
            # TODO: append multiline description
            qnew.current_choice().add_response(l)
            pass
                                        
        if self.STATE is "QUESTION":
          if l.startswith('[') and l.endswith(']'):
            # this is the beginning of a question
            if qnew is not None:
              self.questions.append(qnew)
            qnew = Question(l)
            self.STATE = "GET_QUESTION_TEXT"
          continue
      elif self.STATE is "CHOICE" and qnew is not None:
        qnew.add_subquestion()
        self.STATE = "GET_QUESTION_TEXT"
      elif self.STATE is "GET_QUESTION_TEXT":
        qnew.add_newline()
        
    if qnew is not None:
      self.questions.append(qnew)
    
def make_html_header(f, title):
  # this is a template, really...
  s = ("""
  <!DOCTYPE html">
  <head>
  <meta charset="UTF-8" />
  <title>%s</title>
  <link rel="stylesheet" href="quiz.css" type="text/css" />
  <script src="http://ajax.googleapis.com/ajax/libs/jquery/1.7.1/jquery.min.js"></script>
  <script type="text/x-mathjax-config">
  MathJax.Hub.Config({
    tex2jax: {
      inlineMath: [ ['$','$'], ["\\\\(","\\\\)"] ],
      processEscapes: true
    }
  });

  </script>
  <script type="text/javascript" src="http://cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS_HTML.js"></script>
  
  <script type="text/javascript">
  $(document).ready(function(){
    //close all the content divs on page load
    $('.response').hide();
    
    // toggle slide
    $(".selection").click(function(){
      // by calling sibling, we can use same div for all demos
      $(this).siblings('.response').slideToggle();
    });
  });
  </script>
  </head>
  """ % (title))
  
  s = prettyprint(s)
  f.write(s)

def make_body(f, q):
  # TODO: convert every line of defs.tex in to new commands?
  s = ("""
  <body>
  $\\newcommand{\ones}{\mathbf 1}$
  %s
  <div id="footer">
    Last updated at %s.
  </div>
  </body> </html>
  """ % (add_questions(q), time.strftime('%Y-%m-%d %H:%M:%S %Z', time.localtime(time.time()))))
  s = prettyprint(s)
  f.write(s)
  
def add_questions(questions):
  s = ''
  for q in questions:
    s = s + ("""
  <fieldset>
  %s
  </fieldset><br/>
  """ % (q.to_html()))
  return s

def make_choices(choices):
  return ''.join(map(Choice.to_html, choices))

def make_xml_choices(choices):
	cg = E.choicegroup(type='MultipleChoice')
	map(cg.append,map(Choice.to_xml,choices))
	return cg
#	return E.multiplechoiceresponse().append(cg)

def print_raw(matchobj):
  return matchobj.group(0).strip('{').strip('}')

# snake_case: no special characters, replace ' ' with '_', lower case
def snake_case(string):
  return ''.join(e for e in string if e.isalnum() or e == ' ').replace(' ','_').lower()

def make_xml_tree(quiz):
  title_short = snake_case(quiz.title)[0:19]
  ps_attrib = {'data-report':title_short,
    'type': 'formative',
    'title': quiz.title,
    'url-identifier': title_short}
  ps = ET.Element('problemset',attrib=ps_attrib)
  for q in quiz.questions:
	ps.append(q.to_xml())
  return ps

def main(argv):
  # check if ends with .quiz
  if len(argv) is 0:
    #usage()
    show_help()
    sys.exit("need an input quiz file")
    
  for filename in argv:
    if filename.find(".quiz") is -1:
      #usage()
      show_help()
      sys.exit("file %s must end with .quiz" % filename)
    
    print ("processing %s" % filename)
    
    quiz_file = open(filename)
    quiz = Quiz(quiz_file)
    quiz_file.close()

    f = open(filename.replace(".quiz", ".html"), 'w+')

    make_html_header(f, quiz.title)
    make_body(f, quiz.questions)
    
    f.close()
    
    ps = make_xml_tree(quiz)
    #print(ET.tostring(ps,pretty_print=True))
    ET.ElementTree(ps).write(filename.replace(".quiz",".xml"),pretty_print=True)

if __name__ == "__main__":
  main(sys.argv[1:])

########NEW FILE########
__FILENAME__ = SummarizeSurveyFromJSON
"""
Takes a text file for a particular survey with one JSON db entry from c2g_examrecords per line, and summarizes the results as a survey.

Args: 
    the filename of JSON strings
    
Returns:
    text formatted with summarized results - text entries at the end, grouped by question.  Eg:
    
        question q02a
    1 18 Strongly Disagree
    2 38 Somewhat Disagree
    3 67 Neutral
    4 286 Somewhat Agree
    5 543 Strongly Agree
    total 952 


"""
import json
import sys

if len(sys.argv) < 2:
    sys.exit('Usage: %s input-filename' % sys.argv[0])

json_file = open(sys.argv[1])
count = 0
errors = 0

tally={}
text={}
textanswers={}

for row in json_file:
    
    try:
        data = eval(json.loads(row))
       
        count += 1
        for question in data.keys():
            
            if (question in tally):
                tally[question]['total'] +=1
            else:
                tally[question] ={}
                text[question]={}
                tally[question]['total'] = 1
            
            if isinstance(data[question], str):
                # it's text, not radio button / checkbox
                #print "answer", data[question], "\n"
                if question not in textanswers.keys():
                    textanswers[question]=[]
                textanswers[question].append(data[question])
                
            else:
                for answer in data[question]:
                   # print "answer", answer, "\n"
                    if (answer['value'] in tally[question]):
                        tally[question][answer['value']] +=1
                    else:
                        tally[question][answer['value']] = 1
                    text[question][answer['value']] = answer['associatedText']
                
        
    except ValueError:
        errors +=1
    
#print "count", count
#print "errors", errors

# print the tallies for radio/checkbox questions

for question in sorted(tally.keys()):
    print "question", question
    for answer in sorted(tally[question]):
        
        print answer, tally[question][answer],
        if answer != 'total':
            print text[question][answer]
    print "\n"
    
# print the text answers

for question in textanswers:
    print question
    for answer in textanswers[question]:
        print answer
    print "\n"    
    
    
json_file.close()




    

########NEW FILE########
