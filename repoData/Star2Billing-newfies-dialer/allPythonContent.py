__FILENAME__ = generate_contact_file
import sys, string 
import namegen

# Use namegen : https://github.com/amnong/namegen

   
#640234009 | Teeuw | Simen| Simen@gmail.com | test subscriber | 1 |

test = namegen.NameGenerator()
count_contact = 0
max_contact = 10000
start_phonenumber = 640200000

for it_name in test:
    count_contact = count_contact + 1
    
    if count_contact > max_contact:
        exit()
        
    print "%d|	%s%d|	%s%d|	%s%d@newmailer.com|	test subscriber|	1|Adderss|Barcelona|State|ES|123|" % (start_phonenumber, it_name, count_contact, it_name, count_contact, it_name, count_contact)
    start_phonenumber = start_phonenumber + 1
    

########NEW FILE########
__FILENAME__ = generate_dnc_contact_file
import sys, string
import namegen

# Use namegen : https://github.com/amnong/namegen


#640234009

test = namegen.NameGenerator()
count_contact = 0
max_contact = 11000
start_phonenumber = 660200000

for it_name in test:
    count_contact = count_contact + 1

    if count_contact > max_contact:
        exit()

    print "%d" % (start_phonenumber)
    start_phonenumber = start_phonenumber + 1


########NEW FILE########
__FILENAME__ = namegen
from .names import names as default_names
import random

class NameGenerator(object):
    def __init__(self, names=default_names):
        self._names = {i : name.strip() for i, name in enumerate(names)}
        self._total_names = len(self._names)
        self._used_indices = set()
    def __call__(self):
        index = random.randrange(self._total_names)
        name = self._names[index]
        return name
    def __iter__(self):
        while True:
            yield self()

########NEW FILE########
__FILENAME__ = names
names = """\
aaron
abdul
abe
abel
abraham
abram
adalberto
adam
adan
adolfo
adolph
adrian
agustin
ahmad
ahmed
al
alan
albert
alberto
alden
aldo
alec
alejandro
alex
alexander
alexis
alfonso
alfonzo
alfred
alfredo
ali
allan
allen
alonso
alonzo
alphonse
alphonso
alton
alva
alvaro
alvin
amado
ambrose
amos
anderson
andre
andrea
andreas
andres
andrew
andy
angel
angelo
anibal
anthony
antione
antoine
anton
antone
antonia
antonio
antony
antwan
archie
arden
ariel
arlen
arlie
armand
armando
arnold
arnoldo
arnulfo
aron
arron
art
arthur
arturo
asa
ashley
aubrey
august
augustine
augustus
aurelio
austin
avery
barney
barrett
barry
bart
barton
basil
beau
ben
benedict
benito
benjamin
bennett
bennie
benny
benton
bernard
bernardo
bernie
berry
bert
bertram
bill
billie
billy
blaine
blair
blake
bo
bob
bobbie
bobby
booker
boris
boyce
boyd
brad
bradford
bradley
bradly
brady
brain
branden
brandon
brant
brendan
brendon
brent
brenton
bret
brett
brian
brice
britt
brock
broderick
brooks
bruce
bruno
bryan
bryant
bryce
bryon
buck
bud
buddy
buford
burl
burt
burton
buster
byron
caleb
calvin
cameron
carey
carl
carlo
carlos
carlton
carmelo
carmen
carmine
carol
carrol
carroll
carson
carter
cary
casey
cecil
cedric
cedrick
cesar
chad
chadwick
chance
chang
charles
charley
charlie
chas
chase
chauncey
chester
chet
chi
chong
chris
christian
christoper
christopher
chuck
chung
clair
clarence
clark
claud
claude
claudio
clay
clayton
clement
clemente
cleo
cletus
cleveland
cliff
clifford
clifton
clint
clinton
clyde
cody
colby
cole
coleman
colin
collin
colton
columbus
connie
conrad
cordell
corey
cornelius
cornell
cortez
cory
courtney
coy
craig
cristobal
cristopher
cruz
curt
curtis
cyril
cyrus
dale
dallas
dalton
damian
damien
damion
damon
dan
dana
dane
danial
daniel
danilo
dannie
danny
dante
darell
daren
darin
dario
darius
darnell
daron
darrel
darrell
darren
darrick
darrin
darron
darryl
darwin
daryl
dave
david
davis
dean
deandre
deangelo
dee
del
delbert
delmar
delmer
demarcus
demetrius
denis
dennis
denny
denver
deon
derek
derick
derrick
deshawn
desmond
devin
devon
dewayne
dewey
dewitt
dexter
dick
diego
dillon
dino
dion
dirk
domenic
domingo
dominic
dominick
dominique
don
donald
dong
donn
donnell
donnie
donny
donovan
donte
dorian
dorsey
doug
douglas
douglass
doyle
drew
duane
dudley
duncan
dustin
dusty
dwain
dwayne
dwight
dylan
earl
earle
earnest
ed
eddie
eddy
edgar
edgardo
edison
edmond
edmund
edmundo
eduardo
edward
edwardo
edwin
efrain
efren
elbert
elden
eldon
eldridge
eli
elias
elijah
eliseo
elisha
elliot
elliott
ellis
ellsworth
elmer
elmo
eloy
elroy
elton
elvin
elvis
elwood
emanuel
emerson
emery
emil
emile
emilio
emmanuel
emmett
emmitt
emory
enoch
enrique
erasmo
eric
erich
erick
erik
erin
ernest
ernesto
ernie
errol
ervin
erwin
esteban
ethan
eugene
eugenio
eusebio
evan
everett
everette
ezekiel
ezequiel
ezra
fabian
faustino
fausto
federico
felipe
felix
felton
ferdinand
fermin
fernando
fidel
filiberto
fletcher
florencio
florentino
floyd
forest
forrest
foster
frances
francesco
francis
francisco
frank
frankie
franklin
franklyn
fred
freddie
freddy
frederic
frederick
fredric
fredrick
freeman
fritz
gabriel
gail
gale
galen
garfield
garland
garret
garrett
garry
garth
gary
gaston
gavin
gayle
gaylord
genaro
gene
geoffrey
george
gerald
geraldo
gerard
gerardo
german
gerry
gil
gilbert
gilberto
gino
giovanni
giuseppe
glen
glenn
gonzalo
gordon
grady
graham
graig
grant
granville
greg
gregg
gregorio
gregory
grover
guadalupe
guillermo
gus
gustavo
guy
hai
hal
hank
hans
harlan
harland
harley
harold
harris
harrison
harry
harvey
hassan
hayden
haywood
heath
hector
henry
herb
herbert
heriberto
herman
herschel
hershel
hilario
hilton
hipolito
hiram
hobert
hollis
homer
hong
horace
horacio
hosea
houston
howard
hoyt
hubert
huey
hugh
hugo
humberto
hung
hunter
hyman
ian
ignacio
ike
ira
irvin
irving
irwin
isaac
isaiah
isaias
isiah
isidro
ismael
israel
isreal
issac
ivan
ivory
jacinto
jack
jackie
jackson
jacob
jacques
jae
jaime
jake
jamaal
jamal
jamar
jame
jamel
james
jamey
jamie
jamison
jan
jared
jarod
jarred
jarrett
jarrod
jarvis
jason
jasper
javier
jay
jayson
jc
jean
jed
jeff
jefferey
jefferson
jeffery
jeffrey
jeffry
jerald
jeramy
jere
jeremiah
jeremy
jermaine
jerold
jerome
jerrell
jerrod
jerrold
jerry
jess
jesse
jessie
jesus
jewel
jewell
jim
jimmie
jimmy
joan
joaquin
jody
joe
joel
joesph
joey
john
johnathan
johnathon
johnie
johnnie
johnny
johnson
jon
jonah
jonas
jonathan
jonathon
jordan
jordon
jorge
jose
josef
joseph
josh
joshua
josiah
jospeh
josue
juan
jude
judson
jules
julian
julio
julius
junior
justin
kareem
karl
kasey
keenan
keith
kelley
kelly
kelvin
ken
kendall
kendrick
keneth
kenneth
kennith
kenny
kent
kenton
kermit
kerry
keven
kevin
kieth
kim
king
kip
kirby
kirk
korey
kory
kraig
kris
kristofer
kristopher
kurt
kurtis
kyle
lacy
lamar
lamont
lance
landon
lane
lanny
larry
lauren
laurence
lavern
laverne
lawerence
lawrence
lazaro
leandro
lee
leif
leigh
leland
lemuel
len
lenard
lenny
leo
leon
leonard
leonardo
leonel
leopoldo
leroy
les
lesley
leslie
lester
levi
lewis
lincoln
lindsay
lindsey
lino
linwood
lionel
lloyd
logan
lon
long
lonnie
lonny
loren
lorenzo
lou
louie
louis
lowell
loyd
lucas
luciano
lucien
lucio
lucius
luigi
luis
luke
lupe
luther
lyle
lyman
lyndon
lynn
lynwood
mac
mack
major
malcolm
malcom
malik
man
manual
manuel
marc
marcel
marcelino
marcellus
marcelo
marco
marcos
marcus
margarito
maria
mariano
mario
marion
mark
markus
marlin
marlon
marquis
marshall
martin
marty
marvin
mary
mason
mathew
matt
matthew
maurice
mauricio
mauro
max
maximo
maxwell
maynard
mckinley
mel
melvin
merle
merlin
merrill
mervin
micah
michael
michal
michale
micheal
michel
mickey
miguel
mike
mikel
milan
miles
milford
millard
milo
milton
minh
miquel
mitch
mitchel
mitchell
modesto
mohamed
mohammad
mohammed
moises
monroe
monte
monty
morgan
morris
morton
mose
moses
moshe
murray
myles
myron
napoleon
nathan
nathanael
nathanial
nathaniel
neal
ned
neil
nelson
nestor
neville
newton
nicholas
nick
nickolas
nicky
nicolas
nigel
noah
noble
noe
noel
nolan
norbert
norberto
norman
normand
norris
numbers
octavio
odell
odis
olen
olin
oliver
ollie
omar
omer
oren
orlando
orval
orville
oscar
osvaldo
oswaldo
otha
otis
otto
owen
pablo
palmer
paris
parker
pasquale
pat
patricia
patrick
paul
pedro
percy
perry
pete
peter
phil
philip
phillip
pierre
porfirio
porter
preston
prince
quentin
quincy
quinn
quintin
quinton
rafael
raleigh
ralph
ramiro
ramon
randal
randall
randell
randolph
randy
raphael
rashad
raul
ray
rayford
raymon
raymond
raymundo
reed
refugio
reggie
reginald
reid
reinaldo
renaldo
renato
rene
reuben
rex
rey
reyes
reynaldo
rhett
ricardo
rich
richard
richie
rick
rickey
rickie
ricky
rico
rigoberto
riley
rob
robbie
robby
robert
roberto
robin
robt
rocco
rocky
rod
roderick
rodger
rodney
rodolfo
rodrick
rodrigo
rogelio
roger
roland
rolando
rolf
rolland
roman
romeo
ron
ronald
ronnie
ronny
roosevelt
rory
rosario
roscoe
rosendo
ross
roy
royal
royce
ruben
rubin
rudolf
rudolph
rudy
rueben
rufus
rupert
russ
russel
russell
rusty
ryan
sal
salvador
salvatore
sam
sammie
sammy
samual
samuel
sandy
sanford
sang
santiago
santo
santos
saul
scot
scott
scottie
scotty
sean
sebastian
sergio
seth
seymour
shad
shane
shannon
shaun
shawn
shayne
shelby
sheldon
shelton
sherman
sherwood
shirley
shon
sid
sidney
silas
simon
sol
solomon
son
sonny
spencer
stacey
stacy
stan
stanford
stanley
stanton
stefan
stephan
stephen
sterling
steve
steven
stevie
stewart
stuart
sung
sydney
sylvester
tad
tanner
taylor
ted
teddy
teodoro
terence
terrance
terrell
terrence
terry
thad
thaddeus
thanh
theo
theodore
theron
thomas
thurman
tim
timmy
timothy
titus
tobias
toby
tod
todd
tom
tomas
tommie
tommy
toney
tony
tory
tracey
tracy
travis
trent
trenton
trevor
trey
trinidad
tristan
troy
truman
tuan
ty
tyler
tyree
tyrell
tyron
tyrone
tyson
ulysses
val
valentin
valentine
van
vance
vaughn
vern
vernon
vicente
victor
vince
vincent
vincenzo
virgil
virgilio
vito
von
wade
waldo
walker
wallace
wally
walter
walton
ward
warner
warren
waylon
wayne
weldon
wendell
werner
wes
wesley
weston
whitney
wilber
wilbert
wilbur
wilburn
wiley
wilford
wilfred
wilfredo
will
willard
william
williams
willian
willie
willis
willy
wilmer
wilson
wilton
winford
winfred
winston
wm
woodrow
wyatt
xavier
yong
young
zachariah
zachary
zachery
zack
zackary
zane
aaron
abbey
abbie
abby
abigail
ada
adah
adaline
adam
addie
adela
adelaida
adelaide
adele
adelia
adelina
adeline
adell
adella
adelle
adena
adina
adria
adrian
adriana
adriane
adrianna
adrianne
adrien
adriene
adrienne
afton
agatha
agnes
agnus
agripina
agueda
agustina
ai
aida
aide
aiko
aileen
ailene
aimee
aisha
aja
akiko
akilah
alaina
alaine
alana
alane
alanna
alayna
alba
albert
alberta
albertha
albertina
albertine
albina
alda
alease
alecia
aleen
aleida
aleisha
alejandra
alejandrina
alena
alene
alesha
aleshia
alesia
alessandra
aleta
aletha
alethea
alethia
alex
alexa
alexander
alexandra
alexandria
alexia
alexis
alfreda
alfredia
ali
alia
alica
alice
alicia
alida
alina
aline
alisa
alise
alisha
alishia
alisia
alison
alissa
alita
alix
aliza
alla
alleen
allegra
allen
allena
allene
allie
alline
allison
allyn
allyson
alma
almeda
almeta
alona
alpha
alta
altagracia
altha
althea
alva
alvera
alverta
alvina
alyce
alycia
alysa
alyse
alysha
alysia
alyson
alyssa
amada
amal
amalia
amanda
amber
amberly
amee
amelia
america
ami
amie
amiee
amina
amira
ammie
amparo
amy
an
ana
anabel
analisa
anamaria
anastacia
anastasia
andera
andra
andre
andrea
andree
andrew
andria
anette
angel
angela
angele
angelena
angeles
angelia
angelic
angelica
angelika
angelina
angeline
angelique
angelita
angella
angelo
angelyn
angie
angila
angla
angle
anglea
anh
anika
anisa
anisha
anissa
anita
anitra
anja
anjanette
anjelica
ann
anna
annabel
annabell
annabelle
annalee
annalisa
annamae
annamaria
annamarie
anne
anneliese
annelle
annemarie
annett
annetta
annette
annice
annie
annika
annis
annita
annmarie
anthony
antionette
antoinette
antonetta
antonette
antonia
antonietta
antonina
antonio
anya
apolonia
april
apryl
ara
araceli
aracelis
aracely
arcelia
ardath
ardelia
ardell
ardella
ardelle
ardis
ardith
aretha
argelia
argentina
ariana
ariane
arianna
arianne
arica
arie
ariel
arielle
arla
arlean
arleen
arlena
arlene
arletha
arletta
arlette
arlinda
arline
arlyne
armanda
armandina
armida
arminda
arnetta
arnette
arnita
arthur
artie
arvilla
asha
ashanti
ashely
ashlea
ashlee
ashleigh
ashley
ashli
ashlie
ashly
ashlyn
ashton
asia
asley
assunta
astrid
asuncion
athena
aubrey
audie
audra
audrea
audrey
audria
audrie
audry
augusta
augustina
augustine
aundrea
aura
aurea
aurelia
aurora
aurore
austin
autumn
ava
avelina
avery
avis
avril
awilda
ayako
ayana
ayanna
ayesha
azalee
azucena
azzie
babara
babette
bailey
bambi
bao
barabara
barb
barbar
barbara
barbera
barbie
barbra
bari
barrie
basilia
bea
beata
beatrice
beatris
beatriz
beaulah
bebe
becki
beckie
becky
bee
belen
belia
belinda
belkis
bell
bella
belle
belva
benita
bennie
berenice
berna
bernadette
bernadine
bernarda
bernardina
bernardine
berneice
bernetta
bernice
bernie
berniece
bernita
berry
berta
bertha
bertie
beryl
bess
bessie
beth
bethanie
bethann
bethany
bethel
betsey
betsy
bette
bettie
bettina
betty
bettyann
bettye
beula
beulah
bev
beverlee
beverley
beverly
bianca
bibi
billi
billie
billy
billye
birdie
birgit
blair
blake
blanca
blanch
blanche
blondell
blossom
blythe
bobbi
bobbie
bobby
bobbye
bobette
bok
bong
bonita
bonnie
bonny
branda
brande
brandee
brandi
brandie
brandon
brandy
breana
breann
breanna
breanne
bree
brenda
brenna
brett
brian
briana
brianna
brianne
bridget
bridgett
bridgette
brigette
brigid
brigida
brigitte
brinda
britany
britney
britni
britt
britta
brittaney
brittani
brittanie
brittany
britteny
brittney
brittni
brittny
bronwyn
brook
brooke
bruna
brunilda
bryanna
brynn
buena
buffy
bula
bulah
bunny
burma
caitlin
caitlyn
calandra
calista
callie
camelia
camellia
cameron
cami
camie
camila
camilla
camille
cammie
cammy
candace
candance
candelaria
candi
candice
candida
candie
candis
candra
candy
candyce
caprice
cara
caren
carey
cari
caridad
carie
carin
carina
carisa
carissa
carita
carl
carla
carlee
carleen
carlena
carlene
carletta
carley
carli
carlie
carline
carlita
carlos
carlota
carlotta
carly
carlyn
carma
carman
carmel
carmela
carmelia
carmelina
carmelita
carmella
carmen
carmina
carmon
carol
carola
carolann
carole
carolee
carolin
carolina
caroline
caroll
carolyn
carolyne
carolynn
caron
caroyln
carri
carrie
carrol
carroll
carry
cary
caryl
carylon
caryn
casandra
casey
casie
casimira
cassandra
cassaundra
cassey
cassi
cassidy
cassie
cassondra
cassy
catalina
catarina
caterina
catharine
catherin
catherina
catherine
cathern
catheryn
cathey
cathi
cathie
cathleen
cathrine
cathryn
cathy
catina
catrice
catrina
cayla
cecelia
cecil
cecila
cecile
cecilia
cecille
cecily
celena
celesta
celeste
celestina
celestine
celia
celina
celinda
celine
celsa
ceola
chae
chan
chana
chanda
chandra
chanel
chanell
chanelle
chang
chantal
chantay
chante
chantel
chantell
chantelle
chara
charis
charise
charissa
charisse
charita
charity
charla
charleen
charlena
charlene
charles
charlesetta
charlette
charlie
charline
charlott
charlotte
charlsie
charlyn
charmain
charmaine
charolette
chasidy
chasity
chassidy
chastity
chau
chaya
chelsea
chelsey
chelsie
cher
chere
cheree
cherelle
cheri
cherie
cherilyn
cherise
cherish
cherly
cherlyn
cherri
cherrie
cherry
cherryl
chery
cheryl
cheryle
cheryll
cheyenne
chi
chia
chieko
chin
china
ching
chiquita
chloe
chong
chris
chrissy
christa
christal
christeen
christel
christen
christena
christene
christi
christia
christian
christiana
christiane
christie
christin
christina
christine
christinia
christopher
christy
chrystal
chu
chun
chung
ciara
cicely
ciera
cierra
cinda
cinderella
cindi
cindie
cindy
cinthia
cira
clair
claire
clara
clare
clarence
claretha
claretta
claribel
clarice
clarinda
clarine
claris
clarisa
clarissa
clarita
classie
claude
claudette
claudia
claudie
claudine
clelia
clemencia
clementina
clementine
clemmie
cleo
cleopatra
cleora
cleotilde
cleta
clora
clorinda
clotilde
clyde
codi
cody
colby
coleen
colene
coletta
colette
colleen
collen
collene
collette
concepcion
conception
concetta
concha
conchita
connie
constance
consuela
consuelo
contessa
cora
coral
coralee
coralie
corazon
cordelia
cordia
cordie
coreen
corene
coretta
corey
cori
corie
corina
corine
corinna
corinne
corliss
cornelia
corrie
corrin
corrina
corrine
corrinne
cortney
cory
courtney
creola
cris
criselda
crissy
crista
cristal
cristen
cristi
cristie
cristin
cristina
cristine
cristy
cruz
crysta
crystal
crystle
cuc
curtis
cyndi
cyndy
cynthia
cyrstal
cythia
dacia
dagmar
dagny
dahlia
daina
daine
daisey
daisy
dakota
dale
dalene
dalia
dalila
dallas
damaris
dan
dana
danae
danelle
danette
dani
dania
danica
daniel
daniela
daniele
daniell
daniella
danielle
danika
danille
danita
dann
danna
dannette
dannie
dannielle
danuta
danyel
danyell
danyelle
daphine
daphne
dara
darby
darcel
darcey
darci
darcie
darcy
daria
darla
darleen
darlena
darlene
darline
darnell
daryl
david
davida
davina
dawn
dawna
dawne
dayle
dayna
daysi
deadra
dean
deana
deandra
deandrea
deane
deann
deanna
deanne
deb
debbi
debbie
debbra
debby
debera
debi
debora
deborah
debra
debrah
debroah
dede
dedra
dee
deeann
deeanna
deedee
deedra
deena
deetta
deidra
deidre
deirdre
deja
delaine
delana
delcie
delena
delfina
delia
delicia
delila
delilah
delinda
delisa
dell
della
delma
delmy
delois
deloise
delora
deloras
delores
deloris
delorse
delpha
delphia
delphine
delsie
delta
demetra
demetria
demetrice
demetrius
dena
denae
deneen
denese
denice
denise
denisha
denisse
denita
denna
dennis
dennise
denny
denyse
deon
deonna
desirae
desire
desiree
despina
dessie
destiny
detra
devin
devon
devona
devora
devorah
dia
diamond
dian
diana
diane
diann
dianna
dianne
diedra
diedre
dierdre
digna
dimple
dina
dinah
dinorah
dion
dione
dionna
dionne
divina
dixie
dodie
dollie
dolly
dolores
doloris
domenica
dominga
dominica
dominique
dominque
domitila
domonique
dona
donald
donella
donetta
donette
dong
donita
donna
donnetta
donnette
donnie
donya
dora
dorathy
dorcas
doreatha
doreen
dorene
doretha
dorethea
doretta
dori
doria
dorian
dorie
dorinda
dorine
doris
dorla
dorotha
dorothea
dorothy
dorris
dortha
dorthea
dorthey
dorthy
dot
dottie
dotty
dovie
dreama
drema
drew
drucilla
drusilla
dulce
dulcie
dung
dusti
dusty
dwana
dyan
earlean
earleen
earlene
earlie
earline
earnestine
eartha
easter
eboni
ebonie
ebony
echo
eda
edda
eddie
edelmira
eden
edie
edith
edna
edra
edris
edward
edwina
edyth
edythe
effie
ehtel
eileen
eilene
ela
eladia
elaina
elaine
elana
elane
elanor
elayne
elba
elda
eldora
eleanor
eleanora
eleanore
elease
elena
elene
eleni
elenor
elenora
elenore
eleonor
eleonora
eleonore
elfreda
elfrieda
elfriede
elia
eliana
elicia
elida
elidia
elin
elina
elinor
elinore
elisa
elisabeth
elise
elisha
elissa
eliz
eliza
elizabet
elizabeth
elizbeth
elizebeth
elke
ella
ellamae
ellan
ellen
ellena
elli
ellie
ellis
elly
ellyn
elma
elmer
elmira
elna
elnora
elodia
elois
eloisa
eloise
elouise
elsa
else
elsie
elsy
elva
elvera
elvia
elvie
elvina
elvira
elwanda
elyse
elza
ema
emelda
emelia
emelina
emeline
emely
emerald
emerita
emiko
emilee
emilia
emilie
emily
emma
emmaline
emmie
emmy
emogene
ena
enda
enedina
eneida
enid
enola
enriqueta
epifania
era
eric
erica
ericka
erika
erin
erinn
erlene
erlinda
erline
erma
ermelinda
erminia
erna
ernestina
ernestine
eryn
esmeralda
esperanza
essie
esta
estefana
estela
estell
estella
estelle
ester
esther
estrella
etha
ethel
ethelene
ethelyn
ethyl
etsuko
etta
ettie
eufemia
eugena
eugene
eugenia
eugenie
eula
eulah
eulalia
eun
euna
eunice
eura
eusebia
eustolia
eva
evalyn
evan
evangelina
evangeline
eve
evelia
evelin
evelina
eveline
evelyn
evelyne
evelynn
evette
evia
evie
evita
evon
evonne
ewa
exie
fabiola
fae
fairy
faith
fallon
fannie
fanny
farah
farrah
fatima
fatimah
faustina
faviola
fawn
fay
faye
fe
felecia
felica
felice
felicia
felicidad
felicita
felicitas
felipa
felisa
felisha
fermina
fern
fernanda
fernande
ferne
fidela
fidelia
filomena
fiona
flavia
fleta
flo
flor
flora
florance
florence
florencia
florene
florentina
floretta
floria
florida
florinda
florine
florrie
flossie
floy
fonda
fran
france
francene
frances
francesca
franchesca
francie
francina
francine
francis
francisca
francisco
francoise
frank
frankie
fransisca
fred
freda
fredda
freddie
frederica
fredericka
fredia
fredricka
freeda
freida
frida
frieda
fumiko
gabriel
gabriela
gabriele
gabriella
gabrielle
gail
gala
gale
galina
garnet
garnett
gary
gay
gaye
gayla
gayle
gaylene
gaynell
gaynelle
gearldine
gema
gemma
gena
gene
genesis
geneva
genevie
genevieve
genevive
genia
genie
genna
gennie
genny
genoveva
georgann
george
georgeann
georgeanna
georgene
georgetta
georgette
georgia
georgiana
georgiann
georgianna
georgianne
georgie
georgina
georgine
gerald
geraldine
geralyn
gerda
geri
germaine
gerri
gerry
gertha
gertie
gertrud
gertrude
gertrudis
gertude
ghislaine
gia
gianna
gidget
gigi
gilberte
gilda
gillian
gilma
gina
ginette
ginger
ginny
giovanna
gisela
gisele
giselle
gita
giuseppina
gladis
glady
gladys
glayds
glenda
glendora
glenn
glenna
glennie
glennis
glinda
gloria
glory
glynda
glynis
golda
golden
goldie
grace
gracia
gracie
graciela
grayce
grazyna
gregoria
gregory
greta
gretchen
gretta
gricelda
grisel
griselda
guadalupe
gudrun
guillermina
gussie
gwen
gwenda
gwendolyn
gwenn
gwyn
gwyneth
ha
hae
hailey
haley
halina
halley
hallie
han
hana
hang
hanh
hanna
hannah
hannelore
harmony
harold
harriet
harriett
harriette
hassie
hattie
haydee
hayley
hazel
heather
hedwig
hedy
hee
heide
heidi
heidy
heike
helaine
helen
helena
helene
helga
hellen
henrietta
henriette
henry
herlinda
herma
hermelinda
hermila
hermina
hermine
herminia
herta
hertha
hester
hettie
hiedi
hien
hilaria
hilary
hilda
hilde
hildegard
hildegarde
hildred
hillary
hilma
hiroko
hisako
hoa
holley
holli
hollie
hollis
holly
honey
hong
hope
hortencia
hortense
hortensia
hsiu
hue
hui
hulda
huong
hwa
hyacinth
hye
hyo
hyon
hyun
ida
idalia
idell
idella
iesha
ignacia
ila
ilana
ilda
ileana
ileen
ilene
iliana
illa
ilona
ilse
iluminada
ima
imelda
imogene
in
ina
india
indira
inell
ines
inez
inga
inge
ingeborg
inger
ingrid
inocencia
iola
iona
ione
ira
iraida
irena
irene
irina
iris
irish
irma
irmgard
isa
isabel
isabell
isabella
isabelle
isadora
isaura
isela
isidra
isis
isobel
iva
ivana
ivelisse
ivette
ivey
ivonne
ivory
ivy
izetta
izola
ja
jacalyn
jacelyn
jacinda
jacinta
jack
jackeline
jackelyn
jacki
jackie
jacklyn
jackqueline
jaclyn
jacqualine
jacque
jacquelin
jacqueline
jacquelyn
jacquelyne
jacquelynn
jacquetta
jacqui
jacquie
jacquiline
jacquline
jacqulyn
jada
jade
jadwiga
jae
jaime
jaimee
jaimie
jaleesa
jalisa
jama
jame
jamee
james
jamey
jami
jamie
jamika
jamila
jammie
jan
jana
janae
janay
jane
janean
janee
janeen
janel
janell
janella
janelle
janene
janessa
janet
janeth
janett
janetta
janette
janey
jani
janice
janie
janiece
janina
janine
janis
janise
janita
jann
janna
jannet
jannette
jannie
january
janyce
jaqueline
jaquelyn
jasmin
jasmine
jason
jaunita
jay
jaye
jayme
jaymie
jayna
jayne
jazmin
jazmine
jean
jeana
jeane
jeanelle
jeanene
jeanett
jeanetta
jeanette
jeanice
jeanie
jeanine
jeanmarie
jeanna
jeanne
jeannetta
jeannette
jeannie
jeannine
jeffie
jeffrey
jen
jena
jenae
jene
jenee
jenell
jenelle
jenette
jeneva
jeni
jenice
jenifer
jeniffer
jenine
jenise
jenna
jennefer
jennell
jennette
jenni
jennie
jennifer
jenniffer
jennine
jenny
jeraldine
jeremy
jeri
jerica
jerilyn
jerlene
jerri
jerrica
jerrie
jerry
jesenia
jesica
jesse
jessenia
jessi
jessia
jessica
jessie
jessika
jestine
jesus
jesusa
jesusita
jetta
jettie
jewel
jewell
ji
jill
jillian
jimmie
jimmy
jin
jina
jinny
jo
joan
joana
joane
joanie
joann
joanna
joanne
joannie
joaquina
jocelyn
jodee
jodi
jodie
jody
joe
joeann
joel
joella
joelle
joellen
joetta
joette
joey
johana
johanna
johanne
john
johna
johnetta
johnette
johnie
johnna
johnnie
johnny
johnsie
joi
joie
jolanda
joleen
jolene
jolie
joline
jolyn
jolynn
jon
jona
jone
jonell
jonelle
jong
joni
jonie
jonna
jonnie
jordan
jose
josefa
josefina
josefine
joselyn
joseph
josephina
josephine
josette
joshua
josie
joslyn
josphine
jovan
jovita
joy
joya
joyce
joycelyn
joye
juan
juana
juanita
jude
judi
judie
judith
judy
jule
julee
julene
juli
julia
julian
juliana
juliane
juliann
julianna
julianne
julie
julieann
julienne
juliet
julieta
julietta
juliette
julio
julissa
june
jung
junie
junita
junko
justa
justin
justina
justine
jutta
ka
kacey
kaci
kacie
kacy
kai
kaila
kaitlin
kaitlyn
kala
kaleigh
kaley
kali
kallie
kalyn
kam
kamala
kami
kamilah
kandace
kandi
kandice
kandis
kandra
kandy
kanesha
kanisha
kara
karan
kareen
karen
karena
karey
kari
karie
karima
karin
karina
karine
karisa
karissa
karl
karla
karleen
karlene
karly
karlyn
karma
karmen
karol
karole
karoline
karolyn
karon
karren
karri
karrie
karry
kary
karyl
karyn
kasandra
kasey
kasha
kasi
kasie
kassandra
kassie
kate
katelin
katelyn
katelynn
katerine
kathaleen
katharina
katharine
katharyn
kathe
katheleen
katherin
katherina
katherine
kathern
katheryn
kathey
kathi
kathie
kathleen
kathlene
kathline
kathlyn
kathrin
kathrine
kathryn
kathryne
kathy
kathyrn
kati
katia
katie
katina
katlyn
katrice
katrina
kattie
katy
kay
kayce
kaycee
kaye
kayla
kaylee
kayleen
kayleigh
kaylene
kazuko
kecia
keeley
keely
keena
keesha
keiko
keila
keira
keisha
keith
keitha
keli
kelle
kellee
kelley
kelli
kellie
kelly
kellye
kelsey
kelsi
kelsie
kemberly
kena
kenda
kendal
kendall
kendra
kenia
kenisha
kenna
kenneth
kenya
kenyatta
kenyetta
kera
keren
keri
kerri
kerrie
kerry
kerstin
kesha
keshia
keturah
keva
kevin
khadijah
khalilah
kia
kiana
kiara
kiera
kiersten
kiesha
kiley
kim
kimber
kimberely
kimberlee
kimberley
kimberli
kimberlie
kimberly
kimbery
kimbra
kimi
kimiko
kina
kindra
kira
kirby
kirsten
kirstie
kirstin
kisha
kit
kittie
kitty
kiyoko
kizzie
kizzy
klara
kori
kortney
kourtney
kris
krishna
krissy
krista
kristal
kristan
kristeen
kristel
kristen
kristi
kristian
kristie
kristin
kristina
kristine
kristle
kristy
kristyn
krysta
krystal
krysten
krystin
krystina
krystle
krystyna
kum
kyla
kyle
kylee
kylie
kym
kymberly
kyoko
kyong
kyra
kyung
lacey
lachelle
laci
lacie
lacresha
lacy
ladawn
ladonna
lady
lael
lahoma
lai
laila
laine
lajuana
lakeesha
lakeisha
lakendra
lakenya
lakesha
lakeshia
lakia
lakiesha
lakisha
lakita
lala
lamonica
lan
lana
lane
lanell
lanelle
lanette
lang
lani
lanie
lanita
lannie
lanora
laquanda
laquita
lara
larae
laraine
laree
larhonda
larisa
larissa
larita
laronda
larraine
larry
larue
lasandra
lashanda
lashandra
lashaun
lashaunda
lashawn
lashawna
lashawnda
lashay
lashell
lashon
lashonda
lashunda
lasonya
latanya
latarsha
latasha
latashia
latesha
latia
laticia
latina
latisha
latonia
latonya
latoria
latosha
latoya
latoyia
latrice
latricia
latrina
latrisha
launa
laura
lauralee
lauran
laure
laureen
laurel
lauren
laurena
laurence
laurene
lauretta
laurette
lauri
laurice
laurie
laurinda
laurine
lauryn
lavada
lavelle
lavenia
lavera
lavern
laverna
laverne
laveta
lavette
lavina
lavinia
lavon
lavona
lavonda
lavone
lavonia
lavonna
lavonne
lawana
lawanda
lawanna
lawrence
layla
layne
le
lea
leah
lean
leana
leandra
leann
leanna
leanne
leanora
leatha
leatrice
lecia
leda
lee
leeann
leeanna
leeanne
leena
leesa
leia
leida
leigh
leigha
leighann
leila
leilani
leisa
leisha
lekisha
lela
lelah
lelia
lena
lenita
lenna
lennie
lenora
lenore
leo
leola
leoma
leon
leona
leonarda
leone
leonia
leonida
leonie
leonila
leonor
leonora
leonore
leontine
leora
leota
lera
lesa
lesha
lesia
leslee
lesley
lesli
leslie
lessie
lester
leta
letha
leticia
letisha
letitia
lettie
letty
lewis
lexie
lezlie
li
lia
liana
liane
lianne
libbie
libby
liberty
librada
lida
lidia
lien
lieselotte
ligia
lila
lili
lilia
lilian
liliana
lilla
lilli
lillia
lilliam
lillian
lilliana
lillie
lilly
lily
lin
lina
linda
lindsay
lindsey
lindsy
lindy
linette
ling
linh
linn
linnea
linnie
linsey
lisa
lisabeth
lisandra
lisbeth
lise
lisette
lisha
lissa
lissette
lita
livia
liz
liza
lizabeth
lizbeth
lizeth
lizette
lizzette
lizzie
loan
logan
loida
lois
loise
lola
lolita
loma
lona
londa
loni
lonna
lonnie
lora
loraine
loralee
lore
lorean
loree
loreen
lorelei
loren
lorena
lorene
lorenza
loreta
loretta
lorette
lori
loria
loriann
lorie
lorilee
lorina
lorinda
lorine
loris
lorita
lorna
lorraine
lorretta
lorri
lorriane
lorrie
lorrine
lory
lottie
lou
louann
louanne
louella
louetta
louie
louis
louisa
louise
loura
lourdes
lourie
louvenia
love
lovella
lovetta
lovie
loyce
lu
luana
luann
luanna
luanne
luba
luci
lucia
luciana
lucie
lucienne
lucila
lucile
lucilla
lucille
lucina
lucinda
lucrecia
lucretia
lucy
ludie
ludivina
lue
luella
luetta
luis
luisa
luise
lula
lulu
luna
lupe
lupita
lura
lurlene
lurline
luvenia
luz
lyda
lydia
lyla
lyn
lynda
lyndia
lyndsay
lyndsey
lynell
lynelle
lynetta
lynette
lynn
lynna
lynne
lynnette
lynsey
ma
mabel
mabelle
mable
machelle
macie
mackenzie
macy
madalene
madaline
madalyn
maddie
madelaine
madeleine
madelene
madeline
madelyn
madge
madie
madison
madlyn
madonna
mae
maegan
mafalda
magali
magaly
magan
magaret
magda
magdalen
magdalena
magdalene
magen
maggie
magnolia
mahalia
mai
maia
maida
maile
maira
maire
maisha
maisie
majorie
makeda
malena
malia
malika
malinda
malisa
malissa
malka
mallie
mallory
malorie
malvina
mamie
mammie
man
mana
manda
mandi
mandie
mandy
manie
manuela
many
mao
maple
mara
maragaret
maragret
maranda
marcela
marcelene
marcelina
marceline
marcell
marcella
marcelle
marcene
marchelle
marci
marcia
marcie
marcy
mardell
maren
marg
margaret
margareta
margarete
margarett
margaretta
margarette
margarita
margarite
margart
marge
margene
margeret
margert
margery
marget
margherita
margie
margit
margo
margorie
margot
margret
margrett
marguerita
marguerite
margurite
margy
marhta
mari
maria
mariah
mariam
marian
mariana
marianela
mariann
marianna
marianne
maribel
maribeth
marica
maricela
maricruz
marie
mariel
mariela
mariella
marielle
marietta
mariette
mariko
marilee
marilou
marilu
marilyn
marilynn
marin
marina
marinda
marine
mario
marion
maris
marisa
marisela
marisha
marisol
marissa
marita
maritza
marivel
marjorie
marjory
mark
marketta
markita
marla
marlana
marleen
marlen
marlena
marlene
marlin
marline
marlo
marlyn
marlys
marna
marni
marnie
marquerite
marquetta
marquita
marquitta
marry
marsha
marshall
marta
marth
martha
marti
martin
martina
martine
marty
marva
marvel
marvella
marvis
marx
mary
marya
maryalice
maryam
maryann
maryanna
maryanne
marybelle
marybeth
maryellen
maryetta
maryjane
maryjo
maryland
marylee
marylin
maryln
marylou
marylouise
marylyn
marylynn
maryrose
masako
matha
mathilda
mathilde
matilda
matilde
matthew
mattie
maud
maude
maudie
maura
maureen
maurice
maurine
maurita
mavis
maxie
maxima
maximina
maxine
may
maya
maybell
maybelle
maye
mayme
mayola
mayra
mazie
mckenzie
meagan
meaghan
mechelle
meda
mee
meg
megan
meggan
meghan
meghann
mei
melaine
melani
melania
melanie
melany
melba
melda
melia
melida
melina
melinda
melisa
melissa
melissia
melita
mellie
mellisa
mellissa
melodee
melodi
melodie
melody
melonie
melony
melva
melvin
melvina
melynda
mendy
mercedes
mercedez
mercy
meredith
meri
merideth
meridith
merilyn
merissa
merle
merlene
merlyn
merna
merri
merrie
merrilee
merrill
merry
mertie
meryl
meta
mi
mia
mica
micaela
micah
micha
michael
michaela
michaele
michal
micheal
michel
michele
michelina
micheline
michell
michelle
michiko
mickey
micki
mickie
miesha
migdalia
mignon
miguelina
mika
mikaela
mike
miki
mikki
mila
milagro
milagros
milda
mildred
milissa
millicent
millie
milly
mimi
min
mina
minda
mindi
mindy
minerva
ming
minh
minna
minnie
minta
mira
miranda
mireille
mirella
mireya
miriam
mirian
mirna
mirta
mirtha
misha
miss
missy
misti
mistie
misty
mitchell
mitsue
mitsuko
mittie
mitzi
mitzie
miyoko
modesta
moira
mollie
molly
mona
monet
monica
monika
monique
monnie
monserrate
moon
mora
morgan
moriah
mozell
mozella
mozelle
mui
muoi
muriel
my
myesha
myong
myra
myriam
myrl
myrle
myrna
myrta
myrtice
myrtie
myrtis
myrtle
myung
na
nada
nadene
nadia
nadine
naida
nakesha
nakia
nakisha
nakita
nam
nan
nana
nancee
nancey
nanci
nancie
nancy
nanette
nannette
nannie
naoma
naomi
narcisa
natacha
natalia
natalie
natalya
natasha
natashia
nathalie
natisha
natividad
natosha
necole
neda
nedra
neely
neida
nelda
nelia
nelida
nell
nella
nelle
nellie
nelly
nena
nenita
neoma
neomi
nereida
nerissa
nery
neta
nettie
neva
nevada
nga
ngan
ngoc
nguyet
nia
nichelle
nichol
nichole
nicholle
nicki
nickie
nickole
nicky
nicol
nicola
nicolasa
nicole
nicolette
nicolle
nida
nidia
niesha
nieves
niki
nikia
nikita
nikki
nikole
nila
nilda
nilsa
nina
ninfa
nisha
nita
nobuko
noel
noelia
noella
noelle
noemi
nohemi
nola
noma
nona
nora
norah
noreen
norene
noriko
norine
norma
norman
nova
novella
nu
nubia
numbers
nydia
nyla
obdulia
ocie
octavia
oda
odelia
odell
odessa
odette
odilia
ofelia
ok
ola
olene
oleta
olevia
olga
olimpia
olinda
oliva
olive
olivia
ollie
olympia
oma
omega
ona
oneida
onie
onita
opal
ophelia
ora
oralee
oralia
oretha
orpha
oscar
ossie
otelia
otha
otilia
ouida
ozell
ozella
ozie
pa
page
paige
palma
palmira
pam
pamala
pamela
pamelia
pamella
pamila
pamula
pandora
pansy
paola
paris
parthenia
particia
pasty
pat
patience
patria
patrica
patrice
patricia
patrick
patrina
patsy
patti
pattie
patty
paul
paula
paulene
pauletta
paulette
paulina
pauline
paulita
paz
pearl
pearle
pearlene
pearlie
pearline
pearly
peg
peggie
peggy
pei
penelope
penney
penni
pennie
penny
perla
perry
peter
petra
petrina
petronila
phebe
phillis
philomena
phoebe
phung
phuong
phylicia
phylis
phyliss
phyllis
pia
piedad
pilar
ping
pinkie
piper
pok
polly
porsche
porsha
portia
precious
pricilla
princess
priscila
priscilla
providencia
prudence
pura
qiana
queen
queenie
quiana
quinn
quyen
rachael
rachal
racheal
rachel
rachele
rachell
rachelle
racquel
rae
raeann
raelene
rafaela
raguel
raina
raisa
ramona
ramonita
rana
ranae
randa
randee
randi
randy
ranee
raquel
rasheeda
rashida
raven
ray
raye
raylene
raymond
raymonde
rayna
rea
reagan
reanna
reatha
reba
rebbeca
rebbecca
rebeca
rebecca
rebecka
rebekah
reda
reena
refugia
refugio
regan
regena
regenia
regina
regine
reginia
reiko
reina
reita
rema
remedios
remona
rena
renae
renata
renate
renay
renda
rene
renea
renee
renetta
renita
renna
ressie
reta
retha
retta
reva
reyna
reynalda
rhea
rheba
rhiannon
rhoda
rhona
rhonda
ria
ricarda
richard
richelle
ricki
rickie
rikki
rima
rina
risa
rita
riva
rivka
robbi
robbie
robbin
robbyn
robena
robert
roberta
roberto
robin
robyn
rochel
rochell
rochelle
rocio
rolanda
rolande
roma
romaine
romana
romelia
romona
rona
ronald
ronda
roni
ronna
ronni
ronnie
rory
rosa
rosalba
rosalee
rosalia
rosalie
rosalina
rosalind
rosalinda
rosaline
rosalva
rosalyn
rosamaria
rosamond
rosana
rosann
rosanna
rosanne
rosaria
rosario
rosaura
rose
roseann
roseanna
roseanne
roselee
roselia
roseline
rosella
roselle
roselyn
rosemarie
rosemary
rosena
rosenda
rosetta
rosette
rosia
rosie
rosina
rosio
rosita
roslyn
rossana
rossie
rosy
rowena
roxana
roxane
roxann
roxanna
roxanne
roxie
roxy
roy
royce
rozanne
rozella
rubi
rubie
ruby
rubye
rudy
rufina
russell
ruth
rutha
ruthann
ruthanne
ruthe
ruthie
ryan
ryann
sabina
sabine
sabra
sabrina
sacha
sachiko
sade
sadie
sadye
sage
salena
salina
salley
sallie
sally
salome
sam
samantha
samara
samatha
samella
samira
sammie
sammy
samuel
sana
sanda
sandee
sandi
sandie
sandra
sandy
sang
sanjuana
sanjuanita
sanora
santa
santana
santina
santos
sara
sarah
sarai
saran
sari
sarina
sarita
sasha
saturnina
sau
saundra
savanna
savannah
scarlet
scarlett
scott
scottie
sean
season
sebrina
see
seema
selena
selene
selina
selma
sena
senaida
september
serafina
serena
serina
serita
setsuko
sha
shae
shaina
shakia
shakira
shakita
shala
shalanda
shalon
shalonda
shameka
shamika
shan
shana
shanae
shanda
shandi
shandra
shane
shaneka
shanel
shanell
shanelle
shani
shanice
shanika
shaniqua
shanita
shanna
shannan
shannon
shanon
shanta
shantae
shantay
shante
shantel
shantell
shantelle
shanti
shaquana
shaquita
shara
sharan
sharda
sharee
sharell
sharen
shari
sharice
sharie
sharika
sharilyn
sharita
sharla
sharleen
sharlene
sharmaine
sharolyn
sharon
sharonda
sharri
sharron
sharyl
sharyn
shasta
shaun
shauna
shaunda
shaunna
shaunta
shaunte
shavon
shavonda
shavonne
shawana
shawanda
shawanna
shawn
shawna
shawnda
shawnee
shawnna
shawnta
shay
shayla
shayna
shayne
shea
sheba
sheena
sheila
sheilah
shela
shelba
shelby
shelia
shella
shelley
shelli
shellie
shelly
shemeka
shemika
shena
shenika
shenita
shenna
shera
sheree
sherell
sheri
sherice
sheridan
sherie
sherika
sherill
sherilyn
sherise
sherita
sherlene
sherley
sherly
sherlyn
sheron
sherrell
sherri
sherrie
sherril
sherrill
sherron
sherry
sherryl
shery
sheryl
sheryll
shiela
shila
shiloh
shin
shira
shirely
shirl
shirlee
shirleen
shirlene
shirley
shirly
shizue
shizuko
shona
shonda
shondra
shonna
shonta
shoshana
shu
shyla
sibyl
sidney
sierra
signe
sigrid
silva
silvana
silvia
sima
simona
simone
simonne
sina
sindy
siobhan
sirena
siu
sixta
skye
slyvia
so
socorro
sofia
soila
sol
solange
soledad
somer
sommer
son
sona
sondra
song
sonia
sonja
sonya
soo
sook
soon
sophia
sophie
soraya
sparkle
spring
stacee
stacey
staci
stacia
stacie
stacy
star
starla
starr
stasia
stefani
stefania
stefanie
stefany
steffanie
stella
stepanie
stephaine
stephane
stephani
stephania
stephanie
stephany
stephen
stephenie
stephine
stephnie
steven
stevie
stormy
su
suanne
sudie
sue
sueann
suellen
suk
sulema
sumiko
summer
sun
sunday
sung
sunni
sunny
sunshine
susan
susana
susann
susanna
susannah
susanne
susie
susy
suzan
suzann
suzanna
suzanne
suzette
suzi
suzie
suzy
svetlana
sybil
syble
sydney
sylvia
sylvie
synthia
syreeta
ta
tabatha
tabetha
tabitha
tai
taina
taisha
tajuana
takako
takisha
talia
talisha
talitha
tam
tama
tamala
tamar
tamara
tamatha
tambra
tameika
tameka
tamekia
tamela
tamera
tamesha
tami
tamica
tamie
tamika
tamiko
tamisha
tammara
tammera
tammi
tammie
tammy
tamra
tana
tandra
tandy
taneka
tanesha
tangela
tania
tanika
tanisha
tanja
tanna
tanya
tara
tarah
taren
tari
tarra
tarsha
taryn
tasha
tashia
tashina
tasia
tatiana
tatum
tatyana
taunya
tawana
tawanda
tawanna
tawna
tawny
tawnya
taylor
tayna
teena
tegan
teisha
telma
temeka
temika
tempie
temple
tena
tenesha
tenisha
tennie
tennille
teodora
teofila
tequila
tera
tereasa
teresa
terese
teresia
teresita
teressa
teri
terica
terina
terisa
terra
terrell
terresa
terri
terrie
terrilyn
terry
tesha
tess
tessa
tessie
thalia
thanh
thao
thea
theda
thelma
theo
theodora
theola
theresa
therese
theresia
theressa
thersa
thi
thomas
thomasena
thomasina
thomasine
thora
thresa
thu
thuy
tia
tiana
tianna
tiara
tien
tiera
tierra
tiesha
tifany
tiffaney
tiffani
tiffanie
tiffany
tiffiny
tijuana
tilda
tillie
timika
timothy
tina
tinisha
tiny
tisa
tish
tisha
tobi
tobie
toby
toccara
toi
tomasa
tomeka
tomi
tomika
tomiko
tommie
tommy
tommye
tomoko
tona
tonda
tonette
toni
tonia
tonie
tonisha
tonita
tonja
tony
tonya
tora
tori
torie
torri
torrie
tory
tosha
toshia
toshiko
tova
towanda
toya
tracee
tracey
traci
tracie
tracy
tran
trang
travis
treasa
treena
trena
tresa
tressa
tressie
treva
tricia
trina
trinh
trinidad
trinity
trish
trisha
trista
tristan
troy
trudi
trudie
trudy
trula
tu
tula
tuyet
twana
twanda
twanna
twila
twyla
tyesha
tyisha
tyler
tynisha
tyra
ula
ulrike
un
una
ursula
usha
ute
vada
val
valarie
valda
valencia
valene
valentina
valentine
valeri
valeria
valerie
valery
vallie
valorie
valrie
van
vanda
vanesa
vanessa
vanetta
vania
vanita
vanna
vannesa
vannessa
vashti
vasiliki
veda
velda
velia
vella
velma
velva
velvet
vena
venessa
venetta
venice
venita
vennie
venus
veola
vera
verda
verdell
verdie
verena
vergie
verla
verlene
verlie
verline
verna
vernell
vernetta
vernia
vernice
vernie
vernita
vernon
verona
veronica
veronika
veronique
versie
vertie
vesta
veta
vi
vicenta
vickey
vicki
vickie
vicky
victor
victoria
victorina
vida
viki
vikki
vilma
vina
vincenza
vinita
vinnie
viola
violet
violeta
violette
virgen
virgie
virgil
virgina
virginia
vita
viva
vivan
vivian
viviana
vivien
vivienne
voncile
vonda
vonnie
wai
walter
waltraud
wan
wanda
waneta
wanetta
wanita
wava
wei
wen
wendi
wendie
wendolyn
wendy
wenona
wesley
whitley
whitney
wilda
wilhelmina
wilhemina
willa
willena
willene
willetta
willette
willia
william
willie
williemae
willodean
willow
wilma
windy
winifred
winnie
winnifred
winona
winter
wonda
wynell
wynona
xenia
xiao
xiomara
xochitl
xuan
yadira
yaeko
yael
yahaira
yajaira
yan
yang
yanira
yasmin
yasmine
yasuko
yee
yelena
yen
yer
yesenia
yessenia
yetta
yevette
yi
ying
yoko
yolanda
yolande
yolando
yolonda
yon
yong
yoshie
yoshiko
youlanda
young
yu
yuette
yuk
yuki
yukiko
yuko
yulanda
yun
yung
yuonne
yuri
yuriko
yvette
yvone
yvonne
zada
zaida
zana
zandra
zelda
zella
zelma
zena
zenaida
zenia
zenobia
zetta
zina
zita
zoe
zofia
zoila
zola
zona
zonia
zora
zoraida
zula
zulema
zulma""".split()
########NEW FILE########
__FILENAME__ = conf
# -*- coding: utf-8 -*-
#
# Newfies documentation build configuration file, created by
# sphinx-quickstart on Fri Jun 24 19:43:02 2011.
#
# This file is execfile()d with the current directory set to its containing dir.
#
# Note that not all possible configuration values are present in this
# autogenerated file.
#
# All configuration values have a default; values that are commented out
# serve to show the default.

import sys
import os

sys.path.insert(0, os.path.abspath('../../'))
sys.path.insert(1, os.path.abspath('../../newfies'))
#sys.path.insert(2, os.path.abspath('../../newfies/newfies_dialer'))

from newfies import newfies_dialer
os.environ['DJANGO_SETTINGS_MODULE'] = 'newfies_dialer.settings'

# If extensions (or modules to document with autodoc) are in another directory,
# add these directories to sys.path here. If the directory is relative to the
# documentation root, use os.path.abspath to make it absolute, like shown here.
#sys.path.insert(0, os.path.abspath('.'))

# -- General configuration -----------------------------------------------------

# If your documentation needs a minimal Sphinx version, state it here.
#needs_sphinx = '1.0'

# Add any Sphinx extension module names here, as strings. They can be extensions
# coming with Sphinx (named 'sphinx.ext.*') or your custom ones.
extensions = [
    'sphinx.ext.autodoc',
    'sphinx.ext.intersphinx',
]
#extensions = ['sphinx.ext.autodoc', 'rst2pdf.pdfbuilder', 'sphinx.ext.coverage']

# Add any paths that contain templates here, relative to this directory.
templates_path = ['_templates']

# The suffix of source filenames.
source_suffix = '.rst'

# The encoding of source files.
#source_encoding = 'utf-8-sig'

# The master toctree document.
master_doc = 'index'

# General information about the project.
project = u'Newfies-Dialer'
copyright = u'2011-2014, Arezqui Belaid <info@star2billing.com>'

# The version info for the project you're documenting, acts as replacement for
# |version| and |release|, also used in various other places throughout the
# built documents.
#
# The short X.Y version.
version = ".".join(map(str, newfies_dialer.VERSION[0:2]))
# The full version, including alpha/beta/rc tags.
release = newfies_dialer.__version__


# The language for content autogenerated by Sphinx. Refer to documentation
# for a list of supported languages.
#language = None

# There are two options for replacing |today|: either, you set today to some
# non-false value, then it is used:
#today = ''
# Else, today_fmt is used as the format for a strftime call.
#today_fmt = '%B %d, %Y'

# List of patterns, relative to source directory, that match files and
# directories to ignore when looking for source files.
exclude_patterns = ['_build']

# The reST default role (used for this markup: `text`) to use for all documents.
#default_role = None

# If true, '()' will be appended to :func: etc. cross-reference text.
#add_function_parentheses = True

# If true, the current module name will be prepended to all description
# unit titles (such as .. function::).
#add_module_names = True

# If true, sectionauthor and moduleauthor directives will be shown in the
# output. They are ignored by default.
#show_authors = False

# The name of the Pygments (syntax highlighting) style to use.
pygments_style = 'sphinx'

# A list of ignored prefixes for module index sorting.
#modindex_common_prefix = []


# -- Options for HTML output ---------------------------------------------------

# The theme to use for HTML and HTML Help pages.  See the documentation for
# a list of builtin themes.
html_theme = 'default'

# Theme options are theme-specific and customize the look and feel of a theme
# further.  For a list of options available for each theme, see the
# documentation.
#html_theme_options = {}

# Add any paths that contain custom themes here, relative to this directory.
#html_theme_path = []

# The name for this set of Sphinx documents.  If None, it defaults to
# "<project> v<release> documentation".
#html_title = None

# A shorter title for the navigation bar.  Default is the same as html_title.
#html_short_title = None

# The name of an image file (relative to this directory) to place at the top
# of the sidebar.
#html_logo = None

# The name of an image file (within the static path) to use as favicon of the
# docs.  This file should be a Windows icon file (.ico) being 16x16 or 32x32
# pixels large.
#html_favicon = None

# Add any paths that contain custom static files (such as style sheets) here,
# relative to this directory. They are copied after the builtin static files,
# so a file named "default.css" will overwrite the builtin "default.css".
html_static_path = ['_static']

# If not '', a 'Last updated on:' timestamp is inserted at every page bottom,
# using the given strftime format.
#html_last_updated_fmt = '%b %d, %Y'

# If true, SmartyPants will be used to convert quotes and dashes to
# typographically correct entities.
#html_use_smartypants = True

# Custom sidebar templates, maps document names to template names.
#html_sidebars = {}

# Additional templates that should be rendered to pages, maps page names to
# template names.
#html_additional_pages = {}

# If false, no module index is generated.
#html_domain_indices = True

# If false, no index is generated.
#html_use_index = True

# If true, the index is split into individual pages for each letter.
#html_split_index = False

# If true, links to the reST sources are added to the pages.
html_show_sourcelink = False

# If true, "Created using Sphinx" is shown in the HTML footer. Default is True.
html_show_sphinx = False

# If true, "(C) Copyright ..." is shown in the HTML footer. Default is True.
#html_show_copyright = True

# If true, an OpenSearch description file will be output, and all pages will
# contain a <link> tag referring to it.  The value of this option must be the
# base URL from which the finished HTML is served.
#html_use_opensearch = ''

# This is the file name suffix for HTML files (e.g. ".xhtml").
#html_file_suffix = None

# Output file base name for HTML help builder.
htmlhelp_basename = 'newfies-dialer-doc'


# -- Options for LaTeX output --------------------------------------------------

# The paper size ('letter' or 'a4').
#latex_paper_size = 'letter'

# The font size ('10pt', '11pt' or '12pt').
#latex_font_size = '10pt'

# Grouping the document tree into LaTeX files. List of tuples
# (source start file, target name, title, author, documentclass [howto/manual]).
latex_documents = [
    ('index', 'newfies-dialer.tex', u'Newfies-Dialer Documentation', u'Arezqui Belaid', 'manual'),
]

# The name of an image file (relative to this directory) to place at the top of
# the title page.
#latex_logo = None

# For "manual" documents, if this is true, then toplevel headings are parts,
# not chapters.
#latex_use_parts = False

# If true, show page references after internal links.
#latex_show_pagerefs = False

# If true, show URL addresses after external links.
#latex_show_urls = False

# Additional stuff for the LaTeX preamble.
#latex_preamble = ''

# Documents to append as an appendix to all manuals.
#latex_appendices = []

# If false, no module index is generated.
#latex_domain_indices = True


# -- Options for manual page output --------------------------------------------

# One entry per manual page. List of tuples
# (source start file, name, description, authors, manual section).
man_pages = [
    ('index', 'newfies-dialer', u'Newfies-Dialer Documentation', [u'Arezqui Belaid'], 1)
]

html_theme = "newfies-dialer"
html_theme_path = ["_theme"]
html_sidebars = {
    'index': ['sidebarintro.html', 'sourcelink.html', 'searchbox.html'],
    '**': ['sidebarlogo.html', 'relations.html',
           'sourcelink.html', 'searchbox.html'],
}

########NEW FILE########
__FILENAME__ = settings_local
#
# Newfies-Dialer License
# http://www.newfies-dialer.org
#
# This Source Code Form is subject to the terms of the Mozilla Public
# License, v. 2.0. If a copy of the MPL was not distributed with this file,
# You can obtain one at http://mozilla.org/MPL/2.0/.
#
# Copyright (C) 2011-2014 Star2Billing S.L.
#
# The Initial Developer of the Original Code is
# Arezqui Belaid <info@star2billing.com>
#

import os

DEBUG = False
TEMPLATE_DEBUG = False

ADMINS = (
    # ('Your Name', 'your_email@domain.com'),
)

TIME_ZONE = 'Europe/Madrid'

APPLICATION_DIR = os.path.dirname(globals()['__file__'])


#DATABASE SETTINGS
#=================
DATABASES = {
    'default': {
        # Add 'postgresql_psycopg2','postgresql','mysql','sqlite3','oracle'
        'ENGINE': 'django.db.backends.postgresql_psycopg2',
        'NAME': 'DATABASENAME',
        'USER': 'DB_USERNAME',
        'PASSWORD': 'DB_PASSWORD',
        'HOST': 'DB_HOSTNAME',
        'PORT': 'DB_PORT',
        'OPTIONS': {
            #Needed on Mysql
            # 'init_command': 'SET storage_engine=INNODB',
            #Postgresql Autocommit
            'autocommit': True,
        }
    }
}

#EMAIL BACKEND
#=============
# Use only in Debug mode. Not in production
#EMAIL_BACKEND = 'django.core.mail.backends.console.EmailBackend'

#ESL
#===
ESL_HOSTNAME = '127.0.0.1'
ESL_PORT = '8021'
ESL_SECRET = 'ClueCon'
ESL_SCRIPT = '&lua(/usr/share/newfies-lua/newfies.lua)'

#CUSTOM
#======
FS_RECORDING_PATH = '/usr/share/newfies/usermedia/recording/'

# ADD 'dummy','plivo','twilio','esl'
NEWFIES_DIALER_ENGINE = 'esl'

API_ALLOWED_IP = [
    '127.0.0.1',
    'localhost',
    #'SERVER_IP',
]

ALLOWED_HOSTS = ['SERVER_IP']

#CELERY
#======
CELERY_DISABLE_RATE_LIMITS = True

#LOGGING
#=======
LOGGING = {
    'version': 1,
    'disable_existing_loggers': True,
    #'root': {
    #    'level': 'WARNING',
    #    'handlers': ['sentry'],
    #},
    'formatters': {
        'verbose': {
            'format': '%(levelname)s %(asctime)s %(module)s '
                      '%(process)d %(thread)d %(message)s'
        },
        'simple': {
            'format': '%(asctime)s %(levelname)s || %(message)s'
        },
    },
    'filters': {
        'require_debug_false': {
            '()': 'django.utils.log.RequireDebugFalse'
        }
    },
    'handlers': {
        # Include the default Django email handler for errors
        # This is what you'd get without configuring logging at all.
        'mail_admins': {
            'class': 'django.utils.log.AdminEmailHandler',
            'level': 'ERROR',
            'filters': ['require_debug_false'],
            # But the emails are plain text by default - HTML is nicer
            'include_html': True,
        },
        'default': {
            'class': 'logging.handlers.WatchedFileHandler',
            'filename': '/var/log/newfies/newfies-django.log',
            'formatter': 'verbose',
        },
        'default-db': {
            'level': 'DEBUG',
            'class': 'logging.handlers.RotatingFileHandler',
            'filename': '/var/log/newfies/newfies-django-db.log',
            'maxBytes': 1024 * 1024 * 5,  # 5 MB
            'backupCount': 20,
            'formatter': 'verbose',
        },
        #'sentry': {
        #    'level': 'ERROR',
        #    'class': 'raven.contrib.django.handlers.SentryHandler',
        #    'formatter': 'verbose'
        #},
        'console': {
            'level': 'DEBUG',
            'class': 'logging.StreamHandler',
            'formatter': 'verbose'
        },
    },
    'loggers': {
        # Again, default Django configuration to email unhandled exceptions
        'django': {
            'handlers': ['default'],
            'propagate': False,
            'level': 'DEBUG',
        },
        'django.request': {
            'handlers': ['mail_admins'],
            'level': 'ERROR',
            'propagate': True,
        },
        'newfies.filelog': {
            'handlers': ['default'],
            'level': 'DEBUG',
            'propagate': False,
        },
        'django.db.backends': {
            'handlers': ['default-db'],
            'level': 'ERROR',
            'propagate': False,
        },
        #'raven': {
        #    'level': 'DEBUG',
        #    'handlers': ['console'],
        #    'propagate': False,
        #},
        #'sentry.errors': {
        #    'level': 'DEBUG',
        #    'handlers': ['console'],
        #    'propagate': False,
        #},
        'audiofield_log': {
            'handlers': ['default'],
            'level': 'DEBUG',
            'propagate': False,
        },
    },
}

#TEXT-TO-SPEECH
#==============
TTS_ENGINE = 'FLITE'  # FLITE, CEPSTRAL, ACAPELA

ACCOUNT_LOGIN = 'EVAL_XXXX'
APPLICATION_LOGIN = 'EVAL_XXXXXXX'
APPLICATION_PASSWORD = 'XXXXXXXX'

SERVICE_URL = 'http://vaas.acapela-group.com/Services/Synthesizer'
QUALITY = '22k'  # 22k, 8k, 8ka, 8kmu
ACAPELA_GENDER = 'W'
ACAPELA_INTONATION = 'NORMAL'

# Django-bower
# ------------
BOWER_PATH = '/usr/bin/bower'

########NEW FILE########
__FILENAME__ = settings_travis
#
# Newfies-Dialer License
# http://www.newfies-dialer.org
#
# This Source Code Form is subject to the terms of the Mozilla Public
# License, v. 2.0. If a copy of the MPL was not distributed with this file,
# You can obtain one at http://mozilla.org/MPL/2.0/.
#
# Copyright (C) 2011-2014 Star2Billing S.L.
#
# The Initial Developer of the Original Code is
# Arezqui Belaid <info@star2billing.com>
#


#IMPORT SETTINGS
#===============
from settings import *

SOUTH_TESTS_MIGRATE = False

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': ':memory:',
    }
}

#Celery test
BROKER_BACKEND = "memory"
CELERY_ALWAYS_EAGER = True


#LOGGING
#=======
LOGGING = {
    'version': 1,
    'disable_existing_loggers': True,
}

INSTALLED_APPS += ('django_nose', )
TEST_RUNNER = 'django_nose.run_tests'

########NEW FILE########
__FILENAME__ = dial
#
# Newfies-Dialer License
# http://www.newfies-dialer.org
#
# This Source Code Form is subject to the terms of the Mozilla Public
# License, v. 2.0. If a copy of the MPL was not distributed with this file,
# You can obtain one at http://mozilla.org/MPL/2.0/.
#
# Copyright (C) 2011-2014 Star2Billing S.L.
#
# The Initial Developer of the Original Code is
# Arezqui Belaid <info@star2billing.com>
#


import ESL
c = ESL.ESLconnection("localhost", "8021", "ClueCon")
c.connected()

# {ignore_early_media=true,continue_on_fail=true,bypass_media=false,hangup_after_bridge=true,originate_timeout=10,api_hangup_hook='luarun hangup.lua ${uuid}'}sofia/gateway/phoneno &park()
#origination_caller_id_number=8888888888,origination_caller_id_name=8888888888,effective_caller_id_name=8888888888,effective_caller_id_number=8888888888,caller_id_number=8888888888

dial = "originate {bridge_early_media=true,hangup_after_bridge=true,originate_timeout=10,newfiesdialer=true,used_gateway_id=1,callrequest_id=26,leg_type=1}user/areski &playback(/tmp/myfile.wav)"

dial = "originate {bridge_early_media=true,hangup_after_bridge=true,originate_timeout=10,newfiesdialer=true,used_gateway_id=1,callrequest_id=26,leg_type=1}user/areski '&lua(/usr/share/newfies-lua/newfies.lua)'"

dial = "originate {bridge_early_media=true,hangup_after_bridge=true,originate_timeout=,newfiesdialer=true,used_gateway_id=1,callrequest_id=38,leg_type=1,origination_caller_id_number=234234234,origination_caller_id_name=234234,effective_caller_id_number=234234234,effective_caller_id_name=234234,}user/areski '&lua(/usr/share/newfies-lua/newfies.lua)'"

# originate {bridge_early_media=true,hangup_after_bridge=true,originate_timeout=10}user/areski &playback(/tmp/myfile.wav)
ev = c.api("bgapi", dial)
c.disconnect()

result = ev.serialize()
print(result)
pos = result.find('Job-UUID:')
job_uuid = result[pos + 10:pos + 46]
print(job_uuid)

########NEW FILE########
__FILENAME__ = admin
#
# Newfies-Dialer License
# http://www.newfies-dialer.org
#
# This Source Code Form is subject to the terms of the Mozilla Public
# License, v. 2.0. If a copy of the MPL was not distributed with this file,
# You can obtain one at http://mozilla.org/MPL/2.0/.
#
# Copyright (C) 2011-2014 Star2Billing S.L.
#
# The Initial Developer of the Original Code is
# Arezqui Belaid <info@star2billing.com>
#

from django.contrib import admin
from django.contrib.auth.admin import UserAdmin
from agent.models import Agent, AgentProfile
from agent.forms import AgentProfileForm
from agent.admin_filters import ManagerFilter


class AgentProfileInline(admin.StackedInline):
    model = AgentProfile
    form = AgentProfileForm


class AgentAdmin(UserAdmin):
    inlines = [
        AgentProfileInline,
    ]
    list_display = ('username', 'email', 'first_name', 'last_name', 'is_staff',
                    'is_active', 'is_superuser', 'manager_name', 'last_login')
    list_filter = (ManagerFilter, )

    def queryset(self, request):
        qs = super(UserAdmin, self).queryset(request)
        agent_id_list = AgentProfile.objects.values_list('user_id', flat=True).all()
        qs = qs.filter(id__in=agent_id_list)
        return qs

admin.site.register(Agent, AgentAdmin)

########NEW FILE########
__FILENAME__ = admin_filters
#
# Newfies-Dialer License
# http://www.newfies-dialer.org
#
# This Source Code Form is subject to the terms of the Mozilla Public
# License, v. 2.0. If a copy of the MPL was not distributed with this file,
# You can obtain one at http://mozilla.org/MPL/2.0/.
#
# Copyright (C) 2011-2014 Star2Billing S.L.
#
# The Initial Developer of the Original Code is
# Arezqui Belaid <info@star2billing.com>
#
from django.contrib.admin import SimpleListFilter
from django.utils.translation import ugettext as _
from agent.function_def import manager_list
from agent.models import AgentProfile


class ManagerFilter(SimpleListFilter):
    title = _('manager')
    parameter_name = 'manager'

    def lookups(self, request, model_admin):
        """
        Returns a list of tuples. The first element in each
        tuple is the coded value for the option that will
        appear in the URL query. The second element is the
        human-readable name for the option that will appear
        in the right sidebar.
        """
        return manager_list()

    def queryset(self, request, queryset):
        """
        Returns the filtered queryset based on the value
        provided in the query string and retrievable via
        `self.value()`.
        """
        if self.value() is not None:
            agent_id_list = AgentProfile.objects.values_list('user_id', flat=True)\
                .filter(manager_id=self.value())
            return queryset.filter(id__in=agent_id_list)
        else:
            return queryset

########NEW FILE########
__FILENAME__ = api_urls
#
# Newfies-Dialer License
# http://www.newfies-dialer.org
#
# This Source Code Form is subject to the terms of the Mozilla Public
# License, v. 2.0. If a copy of the MPL was not distributed with this file,
# You can obtain one at http://mozilla.org/MPL/2.0/.
#
# Copyright (C) 2011-2014 Star2Billing S.L.
#
# The Initial Developer of the Original Code is
# Arezqui Belaid <info@star2billing.com>
#
from django.conf.urls import patterns, url
from django.conf.urls import include
from rest_framework.routers import DefaultRouter
from agent.api_views import (AgentProfileViewSet,
    AgentPasswordViewSet, obtain_auth_token_login, AgentSubscriberViewSet,
    AgentQueueStatusViewSet)

# Create a router and register our viewsets with it.
router = DefaultRouter()
router.register(r'agents-profile', AgentProfileViewSet)
router.register(r'agents-password', AgentPasswordViewSet, 'agents_password')
router.register(r'agent-subscriber', AgentSubscriberViewSet, 'agent_subscriber')

# # The API URLs are now determined automatically by the router.
# # Additionally, we include the login URLs for the browseable API.
urlpatterns = patterns('',
    url(r'^agent-rest-api/', include(router.urls)),
    # Login and logout views for the browsable API
    url(r'^agent-rest-api/api-auth/', include('rest_framework.urls',
                               namespace='rest_framework')),

    url(r'^agent-rest-api/agent-queue-status/(?P<agent_id>[0-9]+)/$', AgentQueueStatusViewSet.as_view(), name="agent_queue_status"),
)

# curl -i -X POST http://127.0.0.1:8000/api/api-token-auth/ -d "username=testagent&password=testagent"
urlpatterns += patterns('',
    #url(r'^api-token-auth/', 'rest_framework.authtoken.views.obtain_auth_token')
    #Rewrite obtain_auth_token_login to enable session login
    url(r'^agent-rest-api/api-token-auth/', obtain_auth_token_login)
)

########NEW FILE########
__FILENAME__ = api_views
#
# Newfies-Dialer License
# http://www.newfies-dialer.org
#
# This Source Code Form is subject to the terms of the Mozilla Public
# License, v. 2.0. If a copy of the MPL was not distributed with this file,
# You can obtain one at http://mozilla.org/MPL/2.0/.
#
# Copyright (C) 2011-2014 Star2Billing S.L.
#
# The Initial Developer of the Original Code is
# Arezqui Belaid <info@star2billing.com>
#
from django.contrib.auth import authenticate
from django.contrib.auth import login

from agent.models import Agent, AgentProfile
from agent.serializers import (AgentSerializer, AgentProfileSerializer,
    AgentPasswordSerializer, AgentSubscriberSerializer)
from agent.permission import IsOwnerOrReadOnly
from rest_framework import viewsets
# from django.contrib.auth.models import User
from rest_framework import permissions
from rest_framework.authentication import (TokenAuthentication,
    SessionAuthentication)

from rest_framework.views import APIView
from rest_framework import status
from rest_framework import parsers
from rest_framework import renderers
from rest_framework.response import Response
from rest_framework.authtoken.models import Token
from rest_framework import serializers

from dialer_campaign.models import Subscriber
from dialer_cdr.models import Callrequest
from dialer_cdr.constants import CALLREQUEST_STATUS
from callcenter.models import CallAgent
import json

#review security
#make sure to display and allow change only on agent / not admin

#TODO Add TokenAuthentication / SessionAuthentication

class AgentViewSet(viewsets.ModelViewSet):
    """
    This viewset automatically provides `list` and `detail` actions.
    """
    queryset = Agent.objects.filter(is_staff=False, is_superuser=False)
    serializer_class = AgentSerializer
    authentication_classes = (SessionAuthentication, TokenAuthentication, )
    permission_classes = (permissions.IsAuthenticated, )


class AgentPasswordViewSet(viewsets.ModelViewSet):
    """
    This viewset automatically provides `list` and `detail` actions.
    """
    authentication_classes = (SessionAuthentication, TokenAuthentication, )
    permission_classes = (permissions.IsAuthenticated,
                          IsOwnerOrReadOnly, )
    queryset = Agent.objects.all()
    serializer_class = AgentPasswordSerializer


class AgentProfileViewSet(viewsets.ModelViewSet):
    """
    This viewset automatically provides `list` and `detail` actions.
    """
    queryset = AgentProfile.objects.filter(user__is_staff=False,
                                           user__is_superuser=False)
    serializer_class = AgentProfileSerializer
    authentication = (SessionAuthentication, TokenAuthentication, )
    permissions = (permissions.IsAuthenticated, )
    lookup_field = ('user_id')


class AgentSubscriberViewSet(viewsets.ModelViewSet):
    """
    This viewset automatically provides `list` and `detail` actions.
    """
    queryset = Subscriber.objects.all()
    serializer_class = AgentSubscriberSerializer
    permissions = (permissions.IsAuthenticated, )
    authentication_classes = (SessionAuthentication, TokenAuthentication, )


def get_last_callrequest():
    subscriber_all = Subscriber.objects.all()
    subscriber_obj = subscriber_all[0]

    try:
        last_callrequest = Callrequest.objects.get(
            subscriber_id=subscriber_obj.id)
    except:
        last_callrequest = Callrequest.objects.all()[0]
    return last_callrequest


class AgentQueueStatusViewSet(APIView):
    authentication_classes = (SessionAuthentication, TokenAuthentication, )
    permissions = (permissions.IsAuthenticated, )

    def get(self, request, agent_id=0, format=None):
        error = {}
        data = {}
        try:
            Agent.objects.get(id=agent_id)
        except:
            error_msg = "Agent ID does not exists!"
            error['error'] = error_msg
            return Response(error)

        try:
            call_agent = CallAgent.objects \
                .filter(agent__user_id=agent_id) \
                .exclude(callrequest__status=CALLREQUEST_STATUS.SUCCESS) \
                .order_by('-id')[0]
        except:
            # empty response
            # No calls are waiting
            return Response(data)

        #print call_agent
        last_callrequest = call_agent.callrequest

        request_uuid = last_callrequest.request_uuid
        subscriber_obj = last_callrequest.subscriber
        contact_obj = subscriber_obj.contact
        camp_obj = subscriber_obj.campaign

        campaign_data = json.dumps({
            "id": camp_obj.id,
            "name": camp_obj.name,
            "callerid": camp_obj.callerid,
            "agent_script": camp_obj.agent_script,
            "lead_disposition": camp_obj.lead_disposition,
            "external_link": camp_obj.external_link
        })

        contact_obj = subscriber_obj.contact
        contact_data = json.dumps({
            "id": contact_obj.id,
            "contact": contact_obj.contact,
            "status": contact_obj.status,
            "last_name": contact_obj.last_name,
            "first_name": contact_obj.first_name,
            "email": contact_obj.email,
            "address": contact_obj.address,
            "city": contact_obj.city,
            "state": contact_obj.state,
            "country": str(contact_obj.country),
            "unit_number": contact_obj.unit_number,
            "additional_vars": contact_obj.additional_vars,
            "description": contact_obj.description,
        })

        data = {
            "subscriber_id": subscriber_obj.id,
            "request_uuid": request_uuid,
            "campaign": campaign_data,
            "contact": contact_data,
            "callstate": call_agent.callstate,
        }

        return Response(data)


### Login part
class AgentAuthTokenSerializer(serializers.Serializer):
    username = serializers.CharField()
    password = serializers.CharField()

    def validate(self, attrs):
        username = attrs.get('username')
        password = attrs.get('password')

        if username and password:
            user = authenticate(username=username, password=password)

            if user:
                if not user.is_active:
                    raise serializers.ValidationError('User account is disabled.')

                # Check user is agent or not
                try:
                    AgentProfile.objects.get(user=user, is_agent=True)
                except:
                    raise serializers.ValidationError('User is not an agent.')

                attrs['user'] = user
                return attrs
            else:
                raise serializers.ValidationError('Unable to login with provided credentials.')
        else:
            raise serializers.ValidationError('Must include "username" and "password"')


#TODO: Review this and see if we can do an other approach without using that hack
class ObtainAuthTokenLogin(APIView):
    throttle_classes = ()
    permission_classes = ()
    parser_classes = (parsers.FormParser, parsers.MultiPartParser, parsers.JSONParser, )
    renderer_classes = (renderers.JSONRenderer, )
    serializer_class = AgentAuthTokenSerializer
    model = Token

    def post(self, request):
        serializer = self.serializer_class(data=request.DATA)
        if serializer.is_valid():
            if serializer.object['user'].is_active:
                login(request, serializer.object['user'])
                request.session['has_notified'] = False
            token, created = Token.objects.get_or_create(user=serializer.object['user'])
            data = {
                'token': token.key,
                'username': serializer.object['user'].username,
                'userid': serializer.object['user'].id,
            }
            return Response(data)

        return Response(serializer.errors, status=status.HTTP_400_BAD_REQUEST)

obtain_auth_token_login = ObtainAuthTokenLogin.as_view()

########NEW FILE########
__FILENAME__ = backup_code
#
# Newfies-Dialer License
# http://www.newfies-dialer.org
#
# This Source Code Form is subject to the terms of the Mozilla Public
# License, v. 2.0. If a copy of the MPL was not distributed with this file,
# You can obtain one at http://mozilla.org/MPL/2.0/.
#
# Copyright (C) 2011-2014 Star2Billing S.L.
#
# The Initial Developer of the Original Code is
# Arezqui Belaid <info@star2billing.com>
#
from django.test import TestCase
from django.contrib.auth.forms import AdminPasswordChangeForm
from agent.models import AgentProfile, Agent
from agent.forms import AgentChangeDetailExtendForm
from agent.views import agent_detail_change, agent_list, agent_add, agent_change, agent_del
from user_profile.forms import UserChangeDetailForm
from django_lets_go.utils import BaseAuthenticatedClient


class AgentProfileAdminView(BaseAuthenticatedClient):
    """Test Function to check UserProfile Admin pages"""

    def test_admin_agent_view_list(self):
        """Test Function to check admin customer list"""
        response = self.client.get("/admin/auth/agent/")
        self.assertEqual(response.status_code, 200)

    def test_admin_agent_view_add(self):
        """Test Function to check admin agent add"""
        response = self.client.get("/admin/auth/agent/add/")
        self.assertEqual(response.status_code, 200)


class AgentProfileCustomerView(BaseAuthenticatedClient):
    """Test Function to check UserProfile Customer pages"""

    fixtures = ['auth_user.json', 'notification.json', 'agent.json', 'agent_profile.json']
    """
    def test_agent_settings(self):
        Test Function to check agent settings
        agent_user = Agent.objects.get(pk=3)
        response = self.client.get('/agent_detail_change/')
        self.assertEqual(response.status_code, 200)
        self.assertTemplateUsed(response,
            'frontend/registration/user_detail_change.html')

        request = self.factory.get('/agent_detail_change/')
        request.user = agent_user
        request.session = {}
        response = agent_detail_change(request)
        self.assertEqual(response.status_code, 200)
    """

    def test_agent_view_list(self):
        """Test Function to check Agent list"""
        response = self.client.get('/module/agent/')
        self.assertEqual(response.context['module'], 'agent_list')
        self.assertEqual(response.status_code, 200)
        self.assertTemplateUsed(response, 'agent/list.html')

        request = self.factory.get('/module/agent/')
        request.user = self.user
        request.session = {}
        response = agent_list(request)
        self.assertEqual(response.status_code, 200)

    def test_agent_view_add(self):
        """Test Function to check add agent"""
        response = self.client.get('/module/agent/add/')
        self.assertEqual(response.status_code, 200)
        response = self.client.post('/agent/add/',
                                    data={'username': 'xyz',
                                          'password1': '1234',
                                          'password2': '1234'})
        self.assertEqual(response.status_code, 302)

        request = self.factory.get('/module/agent/add/')
        request.user = self.user
        request.session = {}
        response = agent_add(request)
        self.assertEqual(response.status_code, 200)

        response = self.client.post('/agent/add/',
                                    data={'username': 'xyz'})
        self.assertEqual(response.status_code, 200)

    def test_agent_view_update(self):
        """Test Function to check update agent"""
        response = self.client.get('/agent/1/')
        self.assertTemplateUsed(response, 'agent/change.html')

        request = self.factory.post('/agent/1/', {'contact': '1234'})
        request.user = self.user
        request.session = {}
        response = agent_change(request, 1)
        self.assertEqual(response.status_code, 200)

        # delete agent through agent_change
        request = self.factory.post('/module/agent/1/',
                                    data={'delete': True}, follow=True)
        request.user = self.user
        request.session = {}
        response = agent_change(request, 1)
        self.assertEqual(response.status_code, 302)

    def test_agent_view_delete(self):
        """Test Function to check delete agent"""
        request = self.factory.get('/module/agent/del/1/')
        request.user = self.user
        request.session = {}
        response = agent_del(request, 1)
        self.assertEqual(response.status_code, 302)

        request = self.factory.post('/module/agent/del/', {'select': '1'})
        request.user = self.user
        request.session = {}
        response = agent_del(request, 0)
        self.assertEqual(response.status_code, 302)

########NEW FILE########
__FILENAME__ = compat
#
# Newfies-Dialer License
# http://www.newfies-dialer.org
#
# This Source Code Form is subject to the terms of the Mozilla Public
# License, v. 2.0. If a copy of the MPL was not distributed with this file,
# You can obtain one at http://mozilla.org/MPL/2.0/.
#
# Copyright (C) 2011-2014 Star2Billing S.L.
#
# The Initial Developer of the Original Code is
# Arezqui Belaid <info@star2billing.com>
#
import django

__all__ = ['User']

# Django 1.5+ compatibility
if django.VERSION >= (1, 5):
    from django.contrib.auth import get_user_model
    User = get_user_model()
else:
    from django.contrib.auth.models import User

########NEW FILE########
__FILENAME__ = constants
#
# Newfies-Dialer License
# http://www.newfies-dialer.org
#
# This Source Code Form is subject to the terms of the Mozilla Public
# License, v. 2.0. If a copy of the MPL was not distributed with this file,
# You can obtain one at http://mozilla.org/MPL/2.0/.
#
# Copyright (C) 2011-2014 Star2Billing S.L.
#
# The Initial Developer of the Original Code is
# Arezqui Belaid <info@star2billing.com>
#

from django.utils.translation import ugettext_lazy as _
from django_lets_go.utils import Choice


class AGENT_COLUMN_NAME(Choice):
    name = _('name')
    contact = _('contact')
    status = _('status')
    date = _('date')


class AGENT_STATUS(Choice):
    LOGGED_OUT = 1, 'logged out'
    AVAILABLE = 2, 'available'
    ON_DEMAND = 3, 'available (on demand)'
    ON_BREAK = 4, 'on break'


class AGENT_TYPE(Choice):
    CALLBACK = 1, 'callback'
    UUID_STANDBY = 2, 'uuid-standby'

########NEW FILE########
__FILENAME__ = forms
#
# Newfies-Dialer License
# http://www.newfies-dialer.org
#
# This Source Code Form is subject to the terms of the Mozilla Public
# License, v. 2.0. If a copy of the MPL was not distributed with this file,
# You can obtain one at http://mozilla.org/MPL/2.0/.
#
# Copyright (C) 2011-2014 Star2Billing S.L.
#
# The Initial Developer of the Original Code is
# Arezqui Belaid <info@star2billing.com>
#
from django.forms import ModelForm
from django.contrib.auth.forms import UserChangeForm
from django.contrib.auth.forms import UserCreationForm, AdminPasswordChangeForm
from agent.models import AgentProfile, Agent
from agent.function_def import manager_list
from crispy_forms.helper import FormHelper
from crispy_forms.layout import Layout, Fieldset, Div


class AgentPasswordChangeForm(AdminPasswordChangeForm):
    def __init__(self, *args, **kwargs):
        self.helper = FormHelper()
        self.helper.form_tag = False
        self.helper.form_class = 'well'
        self.helper.layout = Layout(
            Fieldset('', 'password1', 'password2', css_class='col-md-4')
        )
        super(AgentPasswordChangeForm, self).__init__(*args, **kwargs)


class AgentCreationForm(UserCreationForm):
    def __init__(self, *args, **kwargs):
        super(AgentCreationForm, self).__init__(*args, **kwargs)
        self.helper = FormHelper()
        self.helper.form_tag = False
        self.helper.disable_csrf = False
        self.helper.form_class = 'well'
        self.helper.layout = Layout(
            Fieldset('', 'username', 'password1', 'password2', css_class='col-md-6 col-xs-8')
        )


class AgentNameChangeForm(UserChangeForm):
    """AgentNameChangeForm is used to change agent username"""

    class Meta:
        model = Agent
        fields = ["username"]

    def __init__(self, *args, **kwargs):
        super(AgentNameChangeForm, self).__init__(*args, **kwargs)
        self.fields['username'].widget.attrs['class'] = "form-control"


class AgentProfileForm(ModelForm):
    """AgentProfileForm is used to change agent profile"""

    class Meta:
        model = AgentProfile
        exclude = ('is_agent', )

    def __init__(self, *args, **kwargs):
        super(AgentProfileForm, self).__init__(*args, **kwargs)
        self.fields['manager'].choices = manager_list()
        for i in self.fields.keyOrder:
            self.fields[i].widget.attrs['class'] = "form-control"


class AgentChangeDetailExtendForm(ModelForm):
    """A form used to change the detail of a agent in the manager UI."""

    class Meta:
        model = AgentProfile
        fields = ["type", "call_timeout", "contact", "status",
                  "no_answer_delay_time", "max_no_answer", "wrap_up_time",
                  "reject_delay_time", "busy_delay_time"]

    def __init__(self, user, *args, **kwargs):
        self.user = user
        super(AgentChangeDetailExtendForm, self).__init__(*args, **kwargs)
        self.helper = FormHelper()
        self.helper.form_tag = False
        self.helper.disable_csrf = False
        css_class = 'col-md-6'
        self.helper.layout = Layout(
            Div(
                Div('type', css_class=css_class),
                Div('call_timeout', css_class=css_class),
                Div('contact', css_class=css_class),
                Div('status', css_class=css_class),
                Div('no_answer_delay_time', css_class=css_class),
                Div('max_no_answer', css_class=css_class),
                Div('wrap_up_time', css_class=css_class),
                Div('reject_delay_time', css_class=css_class),
                Div('busy_delay_time', css_class=css_class),
                css_class='row'
            ),
        )


class AgentDetailExtendForm(ModelForm):
    """A form used to change the detail of a agent in the Agent UI."""

    class Meta:
        model = AgentProfile
        #fields = ["address", "city", "state", "country", "zip_code",
        #          "phone_no", "fax", "company_name", "company_website",
        #          "language", "note"]

        fields = ["address"]

    def __init__(self, user, *args, **kwargs):
        self.user = user
        super(AgentDetailExtendForm, self).__init__(*args, **kwargs)
        self.fields['address'].widget.attrs['ng-model'] = "user.address"
        """
        self.fields['city'].widget.attrs['ng-model'] = "user.city"
        self.fields['state'].widget.attrs['ng-model'] = "user.state"
        self.fields['country'].widget.attrs['ng-model'] = "user.country"
        self.fields['zip_code'].widget.attrs['ng-model'] = "user.zip_code"
        self.fields['phone_no'].widget.attrs['ng-model'] = "user.phone_no"
        self.fields['fax'].widget.attrs['ng-model'] = "user.fax"
        self.fields['company_name'].widget.attrs['ng-model'] = "user.company_name"
        self.fields['company_website'].widget.attrs['ng-model'] = "user.company_website"
        self.fields['language'].widget.attrs['ng-model'] = "user.language"
        self.fields['note'].widget.attrs['ng-model'] = "user.note"
        """

########NEW FILE########
__FILENAME__ = function_def
#
# Newfies-Dialer License
# http://www.newfies-dialer.org
#
# This Source Code Form is subject to the terms of the Mozilla Public
# License, v. 2.0. If a copy of the MPL was not distributed with this file,
# You can obtain one at http://mozilla.org/MPL/2.0/.
#
# Copyright (C) 2011-2014 Star2Billing S.L.
#
# The Initial Developer of the Original Code is
# Arezqui Belaid <info@star2billing.com>
#
from user_profile.models import Manager
from agent.models import AgentProfile, Agent
from appointment.function_def import get_all_calendar_user_id_list


def agent_user_id_list():
    agent_id_list = AgentProfile.objects.values_list('user_id', flat=True)
    return agent_id_list


def manager_list():
    """Return all managers of the system"""
    manager_list = []
    agent_id_list = agent_user_id_list()
    calendar_user_id_list = get_all_calendar_user_id_list()
    list = Manager.objects.values_list('id', 'username').filter(is_staff=False, is_superuser=False)\
        .exclude(id__in=agent_id_list).exclude(id__in=calendar_user_id_list).order_by('id')
    for l in list:
        manager_list.append((l[0], l[1]))
    return manager_list


def agentprofile_list(manager_id=None):
    """Return agents which are belong to manager_id"""
    agentprofile_list = []
    if manager_id:
        agent_list = AgentProfile.objects.filter(manager_id=int(manager_id))
    else:
        agent_list = AgentProfile.objects.all()

    for l in agent_list:
        agentprofile_list.append((l.id, l.user.username))
    return agentprofile_list


def agent_list():
    """Return all agent of the system"""
    agent_list = []
    agent_id_list = AgentProfile.objects.values_list('user_id', flat=True).all()
    list = Agent.objects.values_list('id', 'username') \
        .filter(id__in=agent_id_list).order_by('id')
    for l in list:
        agent_list.append((l[0], l[1]))
    return agent_list

########NEW FILE########
__FILENAME__ = models
#
# Newfies-Dialer License
# http://www.newfies-dialer.org
#
# This Source Code Form is subject to the terms of the Mozilla Public
# License, v. 2.0. If a copy of the MPL was not distributed with this file,
# You can obtain one at http://mozilla.org/MPL/2.0/.
#
# Copyright (C) 2011-2014 Star2Billing S.L.
#
# The Initial Developer of the Original Code is
# Arezqui Belaid <info@star2billing.com>
#

from django.db import models
from django.contrib.auth.models import User
#from agent.compat import User
from django.db.models.signals import post_save, post_delete
from django.utils.translation import ugettext_lazy as _
from user_profile.models import Manager, Profile_abstract
from .constants import AGENT_STATUS, AGENT_TYPE
from rest_framework.authtoken.models import Token


#Profile_abstract is OneToOneField(User) with additionals fields as city, states...
class AgentProfile(Profile_abstract):
    """This defines extra features for the user

    **Attributes**:

        * ``is_agent`` - Designates whether the user is an agent

    **Relationships**:

        * ``manager`` - Foreign key relationship to the manager model.

    **Name of DB table**: agent_profile
    """
    is_agent = models.BooleanField(default=True,
        verbose_name=_('Designates whether the user is an agent.'))
    manager = models.ForeignKey(Manager, verbose_name=_("manager"), blank=True, null=True,
        help_text=_("select manager"), related_name="manager")

    type = models.IntegerField(choices=list(AGENT_TYPE),
                               default=AGENT_TYPE.CALLBACK,
                               verbose_name=_("type"), blank=True, null=True)
    call_timeout = models.IntegerField(default='45', blank=True, null=True,
                                       verbose_name=_('timeout on call'),
                                       help_text=_("connection timeout in seconds"))
    contact = models.CharField(max_length=90, blank=True, null=True,
                               verbose_name=_('contact'))
    status = models.IntegerField(choices=list(AGENT_STATUS),
                                 default=AGENT_STATUS.LOGGED_OUT,
                                 verbose_name=_("status"), blank=True, null=True)
    no_answer_delay_time = models.IntegerField(blank=True, null=True,
                                        verbose_name=_('no answer delay time'))
    max_no_answer = models.IntegerField(blank=True, null=True,
                                        verbose_name=_('max. no of answer'))
    wrap_up_time = models.IntegerField(blank=True, null=True,
                                       verbose_name=_('wrap up time'))
    reject_delay_time = models.IntegerField(blank=True, null=True,
                                        verbose_name=_('reject delay time'))
    busy_delay_time = models.IntegerField(blank=True, null=True,
                                          verbose_name=_('busy delay time'))
    #key = models.CharField(max_length=256, blank=True, default='')

    class Meta:
        permissions = (
            ("view_agent_dashboard", _('can see Agent dashboard')),
            ("view_agent", _('can see Agent list')),
        )
        db_table = 'agent_profile'
        verbose_name = _("agent profile")
        verbose_name_plural = _("agent profiles")

    def __unicode__(self):
        return u"%s" % str(self.user)


class Agent(User):
    """Agent Model

    Agents are user that have access to the Agent interface.
    They don't have access to the admin/manager.
    """

    class Meta:
        proxy = True
        app_label = 'auth'
        verbose_name = _('agent')
        verbose_name_plural = _('agents')

    def save(self, **kwargs):
        if not self.pk:
            self.is_staff = 0
            self.is_superuser = 0
        super(Agent, self).save(**kwargs)

    def is_agent(self):
        try:
            AgentProfile.objects.get(user=self)
            return True
        except:
            return False
    User.add_to_class('is_agent', is_agent)

    def manager_name(self):
        """This will show manager name for each agent"""
        try:
            name = AgentProfile.objects.get(user_id=self.id).manager
        except:
            name = ''

        return name
    manager_name.allow_tags = True
    manager_name.short_description = _('manager')


def common_signal(manager_id):
    """common_signal for agentprofile model for post_save & post_delete"""
    # from utils.callcenter_config_xml import create_callcenter_config_xml
    # create_callcenter_config_xml(manager_id)
    pass


def post_save_agentprofile(sender, **kwargs):
    """A ``post_delete`` signal is sent by the AgentProfile model instance whenever
    it is going to save.
    """
    if kwargs['created']:
        Token.objects.create(user=kwargs['instance'].user)

    common_signal(kwargs['instance'].manager_id)


def post_delete_agentprofile(sender, **kwargs):
    """A ``post_delete`` signal is sent by the AgentProfile model instance whenever
    it is going to delete.
    """
    common_signal(kwargs['instance'].manager_id)

post_save.connect(post_save_agentprofile, sender=AgentProfile)
post_delete.connect(post_delete_agentprofile, sender=AgentProfile)

# Create an easy way to use the user profile
# using user.profile will get or create a user profile
# object
Agent.profile = property(lambda u: AgentProfile.objects.get_or_create(user=u)[0])
Agent.api_key = property(lambda u: Token.objects.get_or_create(user=u)[0].key)


#from django.dispatch import receiver


#@receiver(post_save, sender=User)
#def create_auth_token(sender, instance=None, created=False, **kwargs):
#    if created:
#        Token.objects.create(user=instance)

########NEW FILE########
__FILENAME__ = permission
#
# Newfies-Dialer License
# http://www.newfies-dialer.org
#
# This Source Code Form is subject to the terms of the Mozilla Public
# License, v. 2.0. If a copy of the MPL was not distributed with this file,
# You can obtain one at http://mozilla.org/MPL/2.0/.
#
# Copyright (C) 2011-2014 Star2Billing S.L.
#
# The Initial Developer of the Original Code is
# Arezqui Belaid <info@star2billing.com>
#
from rest_framework import permissions


class IsOwnerOrReadOnly(permissions.BasePermission):
    """
    Custom permission to only allow owners of an object to edit it.
    """

    def has_object_permission(self, request, view, obj):
        # Read permissions are allowed to any request,
        # so we'll always allow GET, HEAD or OPTIONS requests.
        if request.method in permissions.SAFE_METHODS:
            return True

        # Write permissions are only allowed to the owner of the agent to change his password
        return obj.id == request.user.id

########NEW FILE########
__FILENAME__ = serializers
#
# Newfies-Dialer License
# http://www.newfies-dialer.org
#
# This Source Code Form is subject to the terms of the Mozilla Public
# License, v. 2.0. If a copy of the MPL was not distributed with this file,
# You can obtain one at http://mozilla.org/MPL/2.0/.
#
# Copyright (C) 2011-2014 Star2Billing S.L.
#
# The Initial Developer of the Original Code is
# Arezqui Belaid <info@star2billing.com>
#
from rest_framework import serializers
from agent.models import Agent, AgentProfile
from django import forms
from dialer_campaign.models import Subscriber

HIDDEN_PASSWORD_STRING = '<hidden>'


#From https://groups.google.com/forum/#!msg/django-rest-framework/abMsDCYbBRg/d2orqUUdTqsJ
class PasswordField(serializers.CharField):
    """Special field to update a password field."""
    widget = forms.widgets.PasswordInput

    def from_native(self, value):
        """Hash if new value sent, else retrieve current password"""
        from django.contrib.auth.hashers import make_password
        if value == HIDDEN_PASSWORD_STRING or value == '':
            return self.parent.object.password
        else:
            return make_password(value)

    def to_native(self, value):
        """Hide hashed-password in API display"""
        return HIDDEN_PASSWORD_STRING


# Serializers
class AgentProfileSerializer(serializers.ModelSerializer):

    class Meta:
        model = AgentProfile
        partial = True
        fields = ('status', 'user')

    def get_fields(self, *args, **kwargs):
        """filter content_type field"""
        fields = super(AgentProfileSerializer, self).get_fields(*args, **kwargs)
        fields['user'].queryset = Agent.objects.filter(is_staff=False,
            is_superuser=False)
        return fields

# # Serializers
# class AgentProfileSerializer(serializers.HyperlinkedModelSerializer):
#     #user = serializers.Field(source='user.username')
#     user = serializers.HyperlinkedRelatedField(view_name='agent-detail')
#     manager = serializers.RelatedField()

#     class Meta:
#         model = AgentProfile
#         #fields = ('is_agent', 'call_timeout', 'type', 'contact', 'status', 'user')


class AgentSerializer(serializers.HyperlinkedModelSerializer):
    #api_key = serializers.Field(source='api_key')
    #profile = AgentProfileSerializer()

    class Meta:
        model = Agent
        fields = ('url', 'username', 'last_name', 'first_name', 'email', 'groups')  # 'profile'


class AgentPasswordSerializer(serializers.HyperlinkedModelSerializer):
    password = PasswordField()
    username = serializers.CharField(read_only=True)

    class Meta:
        model = Agent
        fields = ('url', 'password', 'username')


class AgentSubscriberSerializer(serializers.HyperlinkedModelSerializer):
    """
    **Read**:

        CURL Usage::

            curl -u username:password -H 'Accept: application/json' http://localhost:8000/api/v1/subscriber/

        Response::

            [
                {
                    "id": 1,
                    "status": 1,
                    "disposition": 1,
                    "collected_data": "",
                },
                {
                    "id": 2,
                    "status": 1,
                    "disposition": 1,
                    "collected_data": "",
                }
            ]
    """

    class Meta:
        model = Subscriber
        fields = ('id', 'status', 'disposition',
                  'collected_data', 'agent')

    def get_fields(self, *args, **kwargs):
        """filter content_type field"""
        fields = super(AgentSubscriberSerializer, self).get_fields(*args, **kwargs)
        fields['agent'].queryset = Agent.objects.filter(is_staff=False,
                                                        is_superuser=False)
        return fields

########NEW FILE########
__FILENAME__ = agent_tags
#
# Newfies-Dialer License
# http://www.newfies-dialer.org
#
# This Source Code Form is subject to the terms of the Mozilla Public
# License, v. 2.0. If a copy of the MPL was not distributed with this file,
# You can obtain one at http://mozilla.org/MPL/2.0/.
#
# Copyright (C) 2011-2014 Star2Billing S.L.
#
# The Initial Developer of the Original Code is
# Arezqui Belaid <info@star2billing.com>
#
from django.template.defaultfilters import register
from agent.constants import AGENT_STATUS
from mod_utils.function_def import get_status_value


@register.filter(name='agent_status_name')
def agent_status_name(value):
    """agent status name"""
    return get_status_value(value, AGENT_STATUS)

########NEW FILE########
__FILENAME__ = urls
#
# Newfies-Dialer License
# http://www.newfies-dialer.org
#
# This Source Code Form is subject to the terms of the Mozilla Public
# License, v. 2.0. If a copy of the MPL was not distributed with this file,
# You can obtain one at http://mozilla.org/MPL/2.0/.
#
# Copyright (C) 2011-2014 Star2Billing S.L.
#
# The Initial Developer of the Original Code is
# Arezqui Belaid <info@star2billing.com>
#
from django.conf.urls import patterns

urlpatterns = patterns('agent.views',
    (r'^agent_login_form/$', 'agent_login_form'),
    (r'^agent_login/$', 'agent_login'),
    (r'^agent_logout/$', 'agent_logout'),
    (r'^agent_dashboard/$', 'agent_dashboard'),
    (r'^agent_detail/$', 'agent_detail'),
    (r'^agent_detail_change/$', 'agent_detail_change'),
    (r'^module/agent/$', 'agent_list'),
    (r'^module/agent/add/$', 'agent_add'),
    (r'^module/agent/del/(.+)/$', 'agent_del'),
    (r'^module/agent/password/(.+)/$', 'agent_change_password'),
    (r'^module/agent/(.+)/$', 'agent_change'),
)

########NEW FILE########
__FILENAME__ = views
#
# Newfies-Dialer License
# http://www.newfies-dialer.org
#
# This Source Code Form is subject to the terms of the Mozilla Public
# License, v. 2.0. If a copy of the MPL was not distributed with this file,
# You can obtain one at http://mozilla.org/MPL/2.0/.
#
# Copyright (C) 2011-2014 Star2Billing S.L.
#
# The Initial Developer of the Original Code is
# Arezqui Belaid <info@star2billing.com>
#
from django.conf import settings
#from django.contrib.auth.models import User
from django.contrib.auth import authenticate, login
from django.contrib.auth.decorators import login_required, permission_required
from django.http import HttpResponseRedirect, HttpResponse, Http404
from django.shortcuts import render_to_response, get_object_or_404
from django.utils.translation import ugettext as _
from django.template.context import RequestContext
from django.contrib.auth.forms import PasswordChangeForm
from django.contrib.auth.models import Permission
#from django.views.decorators.csrf import csrf_exempt
from agent.models import AgentProfile, Agent
from agent.constants import AGENT_COLUMN_NAME
from agent.forms import AgentChangeDetailExtendForm, AgentDetailExtendForm, \
    AgentNameChangeForm, AgentCreationForm, AgentPasswordChangeForm
from user_profile.models import Manager
from user_profile.forms import UserChangeDetailForm
from django_lets_go.common_functions import get_pagination_vars
#import json

redirect_url_to_agent_list = '/module/agent/'


def agent_login_form(request):
    """agent login Page"""
    template = 'agent/login_form.html'
    data = {}
    return render_to_response(template, data,
        context_instance=RequestContext(request))


def agent_login(request):
    """agent login Page"""
    template = 'agent/login.html'
    data = {
        'action': 'tabs-1',
    }
    return render_to_response(template, data,
        context_instance=RequestContext(request))


def agent_logout(request):
    """agent login Page"""
    template = 'agent/logout.html'
    data = {
        'action': 'tabs-2',
    }
    return render_to_response(template, data,
        context_instance=RequestContext(request))


def auth(request):
    if 'HTTP_AUTHORIZATION' in request.META:
        uname, passwd = request.META['HTTP_AUTHORIZATION'].split(':')
        user = authenticate(username=uname, password=passwd)
        if user is not None:
            if user.is_active:
                login(request, user)
                request.user = user

                # Once we have logged the user in return the serialized response
                # TODO: not defined api ?
                serializer = api.user.UserSerializer(request.user)
                # TODO: not defined JSONResponse ?
                return JSONResponse(serializer.data)

    # They did not provide basic authentication
    response = HttpResponse()
    response.status_code = 401
    return response


@permission_required('auth.view_agent_dashboard', login_url='/')
@login_required
def agent_dashboard(request):
    """

    **Attributes**:

        * ``template`` - agent/dashboard.html
    """
    template = 'agent/dashboard.html'

    data = {
    }

    return render_to_response(template, data,
        context_instance=RequestContext(request))


@login_required
def agent_change_password(request, object_id):
    """
    User Detail change on Agent UI

    **Attributes**:

        * ``form`` - AgentPasswordChangeForm
        * ``template`` - 'agent/change_password.html',
             'frontend/registration/user_detail_change.html'

    **Logic Description**:

        * Reset Agent password.
    """
    msg_pass = ''
    error_pass = ''

    agent_userdetail = get_object_or_404(Agent, pk=object_id)
    agent_username = agent_userdetail.username

    user_password_form = AgentPasswordChangeForm(user=agent_userdetail)

    if request.method == 'POST':
        user_password_form = AgentPasswordChangeForm(user=agent_userdetail,
                                                     data=request.POST)
        if user_password_form.is_valid():
            user_password_form.save()
            request.session["msg"] = _('%s password has been changed.' % agent_username)
            return HttpResponseRedirect(redirect_url_to_agent_list)
        else:
            error_pass = _('please correct the errors below.')

    template = 'agent/change_password.html'
    data = {
        'agent_username': agent_username,
        'user_password_form': user_password_form,
        'msg_pass': msg_pass,
        'error_pass': error_pass,
    }
    request.session['msg'] = ''
    request.session['error_msg'] = ''
    return render_to_response(template, data,
                              context_instance=RequestContext(request))


@login_required
def agent_detail(request):
    user_detail = get_object_or_404(Agent, username=request.user)
    user_detail_extened = AgentProfile.objects.get(user=user_detail)

    user_detail_form = UserChangeDetailForm(request.user,
                                            instance=user_detail)
    user_detail_extened_form = \
        AgentDetailExtendForm(request.user,
                              instance=user_detail_extened)
    user_password_form = PasswordChangeForm(user=request.user)

    template = 'agent/agent_detail.html'
    data = {
        'user_detail_form': user_detail_form,
        'user_detail_extened_form': user_detail_extened_form,
        'user_password_form': user_password_form,
    }
    return render_to_response(template, data,
           context_instance=RequestContext(request))


@login_required
def agent_detail_change(request):
    """User Detail change on Agent UI

    **Attributes**:

        * ``form`` - UserChangeDetailForm, AgentDetailExtendForm,
                     PasswordChangeForm
        * ``template`` - 'frontend/registration/user_detail_change.html'

    **Logic Description**:

        * User is able to change his/her detail.
    """
    user_detail = get_object_or_404(Agent, username=request.user)
    user_detail_extened = AgentProfile.objects.get(user=user_detail)

    user_detail_form = UserChangeDetailForm(request.user,
                                            instance=user_detail)
    user_detail_extened_form = \
        AgentDetailExtendForm(request.user,
                              instance=user_detail_extened)
    user_password_form = PasswordChangeForm(user=request.user)

    msg_detail = ''
    msg_pass = ''

    error_detail = ''
    error_pass = ''
    action = ''
    if 'action' in request.GET:
        action = request.GET['action']

    if request.method == 'POST':
        if request.POST['form-type'] == "change-detail":
            user_detail_form = UserChangeDetailForm(
                request.user, request.POST, instance=user_detail)
            user_detail_extened_form = \
                AgentDetailExtendForm(
                    request.user, request.POST, instance=user_detail_extened)
            action = 'tabs-1'
            if (user_detail_form.is_valid()
               and user_detail_extened_form.is_valid()):
                #DEMO / Disable
                if not settings.DEMO_MODE:
                    user_detail_form.save()
                    user_detail_extened_form.save()
                msg_detail = _('detail has been changed.')
            else:
                error_detail = _('please correct the errors below.')
        else:  # "change-password"
            user_password_form = PasswordChangeForm(user=request.user,
                                                    data=request.POST)
            action = 'tabs-2'
            if user_password_form.is_valid():
                #DEMO / Disable
                if not settings.DEMO_MODE:
                    user_password_form.save()
                msg_pass = _('your password has been changed.')
            else:
                error_pass = _('please correct the errors below.')

    data = {
        'user_detail_form': user_detail_form,
        'user_detail_extened_form': user_detail_extened_form,
        'user_password_form': user_password_form,
        'msg_detail': msg_detail,
        'msg_pass': msg_pass,
        'error_detail': error_detail,
        'error_pass': error_pass,
        'action': action,
    }
    return render_to_response('frontend/registration/user_detail_change.html', data, context_instance=RequestContext(request))


@permission_required('agent.view_agent', login_url='/')
@login_required
def agent_list(request):
    """Agent list for the logged in Manager

    **Attributes**:

        * ``template`` - agent/list.html

    **Logic Description**:

        * List all agents which belong to the logged in manager.
    """
    sort_col_field_list = ['user', 'status', 'contact', 'updated_date']
    pag_vars = get_pagination_vars(request, sort_col_field_list, default_sort_field='id')
    agent_list = AgentProfile.objects.filter(manager=request.user).order_by(pag_vars['sort_order'])
    data = {
        'msg': request.session.get('msg'),
        'agent_list': agent_list,
        'total_agent': agent_list.count(),
        'AGENT_COLUMN_NAME': AGENT_COLUMN_NAME,
        'col_name_with_order': pag_vars['col_name_with_order'],
    }
    request.session['msg'] = ''
    request.session['error_msg'] = ''
    return render_to_response('agent/list.html', data, context_instance=RequestContext(request))


@permission_required('agent.add_agentprofile', login_url='/')
@login_required
def agent_add(request):
    """Add new Agent for the logged in manager

    **Attributes**:

        * ``form`` - AgentCreationForm
        * ``template`` - agent/change.html

    **Logic Description**:

        * Add a new agent which will belong to the logged in manager
          via the AgentCreationForm & get redirected to the agent list
    """
    form = AgentCreationForm()
    if request.method == 'POST':
        form = AgentCreationForm(request.POST)
        if form.is_valid():
            new_agent = form.save()

            new_agent_profile = AgentProfile.objects.create(
                user=new_agent,
                manager=Manager.objects.get(username=request.user),
                is_agent=True
            )
            permission = Permission.objects.get(codename='view_agent_dashboard')
            new_agent.user_permissions.add(permission)

            request.session["msg"] = _('"%(name)s" added as agent.') % \
                {'name': request.POST['username']}
            return HttpResponseRedirect(redirect_url_to_agent_list + '%s/' % str(new_agent_profile.id))

    data = {
        'form': form,
        'action': 'add',
    }
    return render_to_response('agent/change.html', data, context_instance=RequestContext(request))


@permission_required('agent.delete_agentprofile', login_url='/')
@login_required
def agent_del(request, object_id):
    """Delete a agent for a logged in manager

    **Attributes**:

        * ``object_id`` - Selected agent object
        * ``object_list`` - Selected agent objects

    **Logic Description**:

        * Delete agent from a agent list.
    """
    if int(object_id) != 0:
        # When object_id is not 0
        # 1) delete agent profile & agent
        agent_profile = get_object_or_404(AgentProfile, pk=object_id, manager_id=request.user.id)
        agent = Agent.objects.get(pk=agent_profile.user_id)

        request.session["msg"] = _('"%(name)s" is deleted.') % {'name': agent}
        agent.delete()
    else:
        # When object_id is 0 (Multiple records delete)
        values = request.POST.getlist('select')
        values = ", ".join(["%s" % el for el in values])
        try:
            # 1) delete all agents belonging to a managers
            agent_list = AgentProfile.objects.filter(manager_id=request.user.id).extra(where=['id IN (%s)' % values])

            if agent_list:
                user_list = agent_list.values_list('user_id', flat=True)
                agents = Agent.objects.filter(pk__in=user_list)
                request.session["msg"] = _('%(count)s agent(s) are deleted.')  % {'count': agent_list.count()}
                agents.delete()
        except:
            raise Http404

    return HttpResponseRedirect(redirect_url_to_agent_list)


@permission_required('agent.change_agentprofile', login_url='/')
@login_required
def agent_change(request, object_id):
    """Update/Delete Agent for the logged in manager

    **Attributes**:

        * ``object_id`` - Selected agent object
        * ``form`` - AgentChangeDetailExtendForm, AgentNameChangeForm
        * ``template`` - agent/change.html

    **Logic Description**:

        * Update/delete selected agent from the agent list
          via AgentChangeDetailExtendForm & get redirected to agent list
    """
    agent_profile = get_object_or_404(AgentProfile, pk=object_id, manager_id=request.user.id)
    agent_userdetail = get_object_or_404(Agent, pk=agent_profile.user_id)

    form = AgentChangeDetailExtendForm(request.user, instance=agent_profile)
    agent_username_form = AgentNameChangeForm(initial={
        'username': agent_userdetail.username,
        'password': agent_userdetail.password})

    if request.method == 'POST':
        if request.POST.get('delete'):
            agent_del(request, object_id)
            return HttpResponseRedirect(redirect_url_to_agent_list)
        else:
            form = AgentChangeDetailExtendForm(request.user, request.POST, instance=agent_profile)

            agent_username_form = AgentNameChangeForm(
                request.POST, initial={'password': agent_userdetail.password}, instance=agent_userdetail)

            # Save agent username
            if agent_username_form.is_valid():
                agent_username_form.save()

                if form.is_valid():
                    form.save()
                    request.session["msg"] = _('"%(name)s" is updated.') % {'name': agent_profile.user}
                    return HttpResponseRedirect(redirect_url_to_agent_list)
    data = {
        'form': form,
        'agent_username_form': agent_username_form,
        'action': 'update',
    }
    return render_to_response('agent/change.html', data, context_instance=RequestContext(request))

########NEW FILE########
__FILENAME__ = agent_profile_serializers
# -*- coding: utf-8 -*-
#
# Newfies-Dialer License
# http://www.newfies-dialer.org
#
# This Source Code Form is subject to the terms of the Mozilla Public
# License, v. 2.0. If a copy of the MPL was not distributed with this file,
# You can obtain one at http://mozilla.org/MPL/2.0/.
#
# Copyright (C) 2011-2014 Star2Billing S.L.
#
# The Initial Developer of the Original Code is
# Arezqui Belaid <info@star2billing.com>
#
from rest_framework import serializers
from agent.models import Agent, AgentProfile
from appointment.function_def import get_calendar_user_id_list


class AgentProfileSerializer(serializers.HyperlinkedModelSerializer):
    """
    **Create**:

        CURL Usage::

            curl -u username:password --dump-header - -H "Content-Type:application/json" -X POST --data '{"level": "2", "position": "1"}' http://localhost:8000/rest-api/tier/

        Response::

            HTTP/1.0 201 CREATED
            Date: Fri, 14 Jun 2013 09:52:27 GMT
            Server: WSGIServer/0.1 Python/2.7.3
            Vary: Accept, Accept-Language, Cookie
            Content-Type: application/json; charset=utf-8
            Content-Language: en-us
            Location: http://localhost:8000/rest-api/tier/1/
            Allow: GET, POST, HEAD, OPTIONS

    **Read**:

        CURL Usage::

            curl -u username:password -H 'Accept: application/json' http://localhost:8000/rest-api/tier/

        Response::

            {
                "count": 1,
                "next": null,
                "previous": null,
                "results": [
                    {
                        "manager": "manager",
                        "agent": "agent",
                        "queue": "Sample queue",
                        "url": "http://127.0.0.1:8000/rest-api/tier/1/",
                        "level": 1,
                        "position": 1,
                        "created_date": "2013-10-23T13:09:43.311Z",
                        "updated_date": "2013-10-23T13:09:43.311Z"
                    }
                ]
            }

    **Update**:

        CURL Usage::

            curl -u username:password --dump-header - -H "Content-Type: application/json" -X PUT --data '{"level": "2"}' http://localhost:8000/rest-api/tier/%dtier-id%/

        Response::

            HTTP/1.0 202 NO CONTENT
            Date: Fri, 23 Sep 2011 06:46:12 GMT
            Server: WSGIServer/0.1 Python/2.7.1+
            Vary: Accept-Language, Cookie
            Content-Length: 0
            Content-Type: text/html; charset=utf-8
            Content-Language: en-us
    """
    manager = serializers.Field(source='manager')

    class Meta:
        model = AgentProfile

    def get_fields(self, *args, **kwargs):
        """filter field"""
        fields = super(AgentProfileSerializer, self).get_fields(*args, **kwargs)
        request = self.context['request']
        calendar_user_list = get_calendar_user_id_list(request.user)
        fields['user'].queryset = Agent.objects.filter(is_staff=False, is_superuser=False).exclude(id__in=calendar_user_list)

        return fields

########NEW FILE########
__FILENAME__ = alarm_request_serializers
# -*- coding: utf-8 -*-
#
# Newfies-Dialer License
# http://www.newfies-dialer.org
#
# This Source Code Form is subject to the terms of the Mozilla Public
# License, v. 2.0. If a copy of the MPL was not distributed with this file,
# You can obtain one at http://mozilla.org/MPL/2.0/.
#
# Copyright (C) 2011-2014 Star2Billing S.L.
#
# The Initial Developer of the Original Code is
# Arezqui Belaid <info@star2billing.com>
#
from rest_framework import serializers
from appointment.models.alarms import Alarm, AlarmRequest
from dialer_cdr.models import Callrequest
from appointment.function_def import get_calendar_user_id_list


class AlarmRequestSerializer(serializers.HyperlinkedModelSerializer):
    """
    **Create**:

        CURL Usage::

            curl -u username:password --dump-header - -H "Content-Type:application/json" -X POST --data '{"alarm": "http://localhost:8000/rest-api/alarm/1/", "date": "2013-12-12 12:45:33", "status": "1", "callrequest": "http://localhost:8000/rest-api/callrequest/1/"}' http://localhost:8000/rest-api/alarm-request/

        Response::

            HTTP/1.0 201 CREATED
            Date: Fri, 14 Jun 2013 09:52:27 GMT
            Server: WSGIServer/0.1 Python/2.7.3
            Vary: Accept, Accept-Language, Cookie
            Content-Type: application/json; charset=utf-8
            Content-Language: en-us
            Allow: GET, POST, HEAD, OPTIONS

    **Read**:

        CURL Usage::

            curl -u username:password -H 'Accept: application/json' http://localhost:8000/rest-api/alarm-request/

            curl -u username:password -H 'Accept: application/json' http://localhost:8000/rest-api/alarm-request/%alarm-request-id%/

        Response::

            {
                "count": 1,
                "next": null,
                "previous": null,
                "results": [
                    {
                        "alarm": "4",
                        "url": "http://127.0.0.1:8000/rest-api/alarm-request/2/",
                        "date": "2013-11-05T06:30:00Z",
                        "status": 1,
                        "callstatus": 0,
                        "calltime": "2013-11-05T06:30:00Z",
                        "duration": 0,
                        "callrequest": null,
                        "created_date": "2013-11-05T06:46:18.635Z"
                    }
                ]
            }

    **Update**:

        CURL Usage::

            curl -u username:password --dump-header - -H "Content-Type: application/json" -X PATCH --data '{"alarm": "http://localhost:8000/rest-api/alarm/1/", "date": "2013-12-12 12:45:33", "status": "1", "callrequest": "http://localhost:8000/rest-api/callrequest/1/"}' http://localhost:8000/rest-api/alarm-request/%alarm-request-id%/

        Response::

            HTTP/1.0 200 NO CONTENT
            Date: Fri, 23 Sep 2011 06:46:12 GMT
            Server: WSGIServer/0.1 Python/2.7.1+
            Vary: Accept-Language, Cookie
            Content-Length: 0
            Content-Type: text/html; charset=utf-8
            Content-Language: en-us

    **Delete**:

        CURL Usage::

            curl -u username:password --dump-header - -H "Content-Type: application/json" -X DELETE  http://localhost:8000/rest-api/alarm-request/%alarm-request-id%/


    **get_nested_alarm_request**:

        CURL Usage::

            curl -u username:password -H 'Accept: application/json' http://localhost:8000/rest-api/alarm-request/%alarm-request-id%/get_nested_alarm_request/

        Response::

            {
                "event-url": "http://localhost:8000/rest-api/event/1/",
                "event-1": {
                    "url": "http://127.0.0.1:8000/rest-api/event/1/",
                    "alarm-2": {
                        "url": "http://localhost:8000/rest-api/alarm/2/",
                        "alarm-request-1": {
                            "status": "1",
                            "url": "http://localhost:8000/rest-api/alarm-request/1/",
                            "alarm-callrequest": "http://localhost:8000/rest-api/callrequest/100/",
                            "duration": "0",
                            "date": "2013-12-18 06:35:09+00:00",
                            "callstatus": "0"
                        }
                    }
                }
            }
    """

    class Meta:
        model = AlarmRequest

    def get_fields(self, *args, **kwargs):
        """filter content_type field"""
        fields = super(AlarmRequestSerializer, self).get_fields(*args, **kwargs)
        request = self.context['request']
        calendar_user_list = get_calendar_user_id_list(request.user)
        fields['alarm'].queryset = Alarm.objects.filter(event__creator_id__in=calendar_user_list)
        fields['callrequest'].queryset = Callrequest.objects.filter(campaign__user=request.user)
        return fields

########NEW FILE########
__FILENAME__ = alarm_serializers
# -*- coding: utf-8 -*-
#
# Newfies-Dialer License
# http://www.newfies-dialer.org
#
# This Source Code Form is subject to the terms of the Mozilla Public
# License, v. 2.0. If a copy of the MPL was not distributed with this file,
# You can obtain one at http://mozilla.org/MPL/2.0/.
#
# Copyright (C) 2011-2014 Star2Billing S.L.
#
# The Initial Developer of the Original Code is
# Arezqui Belaid <info@star2billing.com>
#
from rest_framework import serializers
from appointment.models.alarms import Alarm
from appointment.models.events import Event
from appointment.function_def import get_calendar_user_id_list
from survey.models import Survey


class AlarmSerializer(serializers.HyperlinkedModelSerializer):
    """
    **Create**:

        CURL Usage::

            curl -u username:password --dump-header - -H "Content-Type:application/json" -X POST --data '{"alarm_phonenumber": "1234567", "alarm_email": "xyz@gmail.com", "daily_start": "12:34:43", "daily_stop": "14:43:32", "method": "1", "survey": "http://127.0.0.1:8000/rest-api/sealed-survey/1/", "event": "http://127.0.0.1:8000/rest-api/event/1/", "result": "1"}' http://localhost:8000/rest-api/alarm/

        Response::

            HTTP/1.0 201 CREATED
            Date: Fri, 14 Jun 2013 09:52:27 GMT
            Server: WSGIServer/0.1 Python/2.7.3
            Vary: Accept, Accept-Language, Cookie
            Content-Type: application/json; charset=utf-8
            Content-Language: en-us
            Allow: GET, POST, HEAD, OPTIONS

    **Read**:

        CURL Usage::

            curl -u username:password -H 'Accept: application/json' http://localhost:8000/rest-api/alarm/

            curl -u username:password -H 'Accept: application/json' http://localhost:8000/rest-api/alarm/%alarm-id%/

        Response::

            {
                "count": 1,
                "next": null,
                "previous": null,
                "results": [
                    {
                        "survey": null,
                        "mail_template": null,
                        "sms_template": null,
                        "event": "reminder_event: 2013-11-05 - 2013-11-30",
                        "url": "http://127.0.0.1:8000/rest-api/alarm/4/",
                        "daily_start": "12:13:33",
                        "daily_stop": "00:00:00",
                        "advance_notice": 0,
                        "maxretry": 0,
                        "retry_delay": 0,
                        "num_attempt": 0,
                        "method": 1,
                        "date_start_notice": "2013-11-05T06:43:47Z",
                        "status": 1,
                        "result": null,
                        "url_cancel": "",
                        "phonenumber_sms_failure": "",
                        "url_confirm": "",
                        "phonenumber_transfer": "",
                        "created_date": "2013-11-05T06:43:52.118Z"
                    }
                ]
            }

    **Update**:

        CURL Usage::

            curl -u username:password --dump-header - -H "Content-Type: application/json" -X PATCH --data '{"alarm_phonenumber": "1234567", "alarm_email": "xyz@gmail.com", "daily_start": "12:34:43", "daily_stop": "14:43:32", "method": "1", "survey": "http://127.0.0.1:8000/rest-api/sealed-survey/1/", "event": "http://127.0.0.1:8000/rest-api/event/1/", "result": "1"}' http://localhost:8000/rest-api/alarm/%alarm-id%/

        Response::

            HTTP/1.0 200 NO CONTENT
            Date: Fri, 23 Sep 2011 06:46:12 GMT
            Server: WSGIServer/0.1 Python/2.7.1+
            Vary: Accept-Language, Cookie
            Content-Length: 0
            Content-Type: text/html; charset=utf-8
            Content-Language: en-us

    **Delete**:

        CURL Usage::

            curl -u username:password --dump-header - -H "Content-Type: application/json" -X DELETE  http://localhost:8000/rest-api/alarm/%alarm-id%/
    """
    class Meta:
        model = Alarm

    def get_fields(self, *args, **kwargs):
        """filter content_type field"""
        fields = super(AlarmSerializer, self).get_fields(*args, **kwargs)
        request = self.context['request']
        calendar_user_list = get_calendar_user_id_list(request.user)

        fields['event'].queryset = Event.objects.filter(calendar__user_id__in=calendar_user_list).order_by('id')
        fields['survey'].queryset = Survey.objects.filter(user=request.user)
        return fields

########NEW FILE########
__FILENAME__ = audiofile_serializers
# -*- coding: utf-8 -*-
#
# Newfies-Dialer License
# http://www.newfies-dialer.org
#
# This Source Code Form is subject to the terms of the Mozilla Public
# License, v. 2.0. If a copy of the MPL was not distributed with this file,
# You can obtain one at http://mozilla.org/MPL/2.0/.
#
# Copyright (C) 2011-2014 Star2Billing S.L.
#
# The Initial Developer of the Original Code is
# Arezqui Belaid <info@star2billing.com>
#
from rest_framework import serializers
from audiofield.models import AudioFile


class AudioFileSerializer(serializers.HyperlinkedModelSerializer):
    """
    **Read**:

        CURL Usage::

            curl -u username:password -H 'Accept: application/json' http://localhost:8000/rest-api/audio-files/

            curl -u username:password -H 'Accept: application/json' http://localhost:8000/rest-api/audio-files/%audio-files-id%/

        Response::

            {
                "count": 1,
                "next": null,
                "previous": null,
                "results": [
                    {
                        "url": "http://127.0.0.1:8000/rest-api/audio-files/1/",
                        "name": "Sample audio",
                        "audio_file": "upload/audiofiles/audio-file-SODXT-1669906647.wav",
                        "user": "http://127.0.0.1:8000/rest-api/users/1/",
                        "created_date": "2013-06-14T18:56:58.550",
                        "updated_date": "2013-06-14T18:56:58.969"
                    }
                ]
            }
    """
    audio_file = serializers.FileField(required=True)
    user = serializers.Field(source='user')

    class Meta:
        model = AudioFile

########NEW FILE########
__FILENAME__ = branching_template_serializers
# -*- coding: utf-8 -*-
#
# Newfies-Dialer License
# http://www.newfies-dialer.org
#
# This Source Code Form is subject to the terms of the Mozilla Public
# License, v. 2.0. If a copy of the MPL was not distributed with this file,
# You can obtain one at http://mozilla.org/MPL/2.0/.
#
# Copyright (C) 2011-2014 Star2Billing S.L.
#
# The Initial Developer of the Original Code is
# Arezqui Belaid <info@star2billing.com>
#
from rest_framework import serializers
from survey.models import Section_template, Branching_template


class BranchingTemplateSerializer(serializers.HyperlinkedModelSerializer):
    """
    **Create**:

        CURL Usage::

            curl -u username:password --dump-header - -H "Content-Type:application/json" -X POST --data '{"keys": "20", "section": "/rest-api/section-template/1/", "goto": "/rest-api/section-template/2/"}' http://localhost:8000/rest-api/branching-template/

        Response::

            HTTP/1.0 201 CREATED
            Date: Fri, 14 Jun 2013 09:52:27 GMT
            Server: WSGIServer/0.1 Python/2.7.3
            Vary: Accept, Accept-Language, Cookie
            Content-Type: application/json; charset=utf-8
            Content-Language: en-us
            Location: http://localhost:8000/rest-api/survey/1/
            Allow: GET, POST, HEAD, OPTIONS

    **Read**:

        CURL Usage::

            curl -u username:password -H 'Accept: application/json' http://localhost:8000/rest-api/branching-template/

                or

            curl -u username:password -H 'Accept: application/json' http://localhost:8000/rest-api/branching-template/%branching-template-id%/

        Response::

            {
                "count": 1,
                "next": null,
                "previous": null,
                "results": [
                    {
                        "url": "http://127.0.0.1:8000/rest-api/branching-template/1/",
                        "keys": "0",
                        "created_date": "2013-06-13T12:42:28.531",
                        "updated_date": "2013-06-13T12:42:28.531",
                        "section": "http://127.0.0.1:8000/rest-api/section-template/1/",
                        "goto": null
                    }
                ]
            }

    **Update**:

        CURL Usage::

            curl -u username:password --dump-header - -H "Content-Type: application/json" -X PATCH --data '{"keys": "3", "survey": "/rest-api/section_template/1/"}' http://localhost:8000/rest-api/branching-template/%branching-template-id%/

        Response::

            HTTP/1.0 202 NO CONTENT
            Date: Fri, 23 Sep 2011 06:46:12 GMT
            Server: WSGIServer/0.1 Python/2.7.1+
            Vary: Accept-Language, Cookie
            Content-Length: 0
            Content-Type: text/html; charset=utf-8
            Content-Language: en-us
    """

    class Meta:
        model = Branching_template

########NEW FILE########
__FILENAME__ = calendar_serializers
# -*- coding: utf-8 -*-
#
# Newfies-Dialer License
# http://www.newfies-dialer.org
#
# This Source Code Form is subject to the terms of the Mozilla Public
# License, v. 2.0. If a copy of the MPL was not distributed with this file,
# You can obtain one at http://mozilla.org/MPL/2.0/.
#
# Copyright (C) 2011-2014 Star2Billing S.L.
#
# The Initial Developer of the Original Code is
# Arezqui Belaid <info@star2billing.com>
#
from rest_framework import serializers
from appointment.models.calendars import Calendar
from appointment.models.users import CalendarUser
from appointment.function_def import get_calendar_user_id_list


class CalendarSerializer(serializers.HyperlinkedModelSerializer):
    """
    **Create**:

        CURL Usage::

            curl -u username:password --dump-header - -H "Content-Type:application/json" -X POST --data '{"name": "mycalendar", "max_concurrent": "1", "user": "http://127.0.0.1:8000/rest-api/calendar-user/4/"}' http://localhost:8000/rest-api/calendar/

        Response::

            HTTP/1.0 201 CREATED
            Date: Fri, 14 Jun 2013 09:52:27 GMT
            Server: WSGIServer/0.1 Python/2.7.3
            Vary: Accept, Accept-Language, Cookie
            Content-Type: application/json; charset=utf-8
            Content-Language: en-us
            Allow: GET, POST, HEAD, OPTIONS

    **Read**:

        CURL Usage::

            curl -u username:password -H 'Accept: application/json' http://localhost:8000/rest-api/calendar/

            curl -u username:password -H 'Accept: application/json' http://localhost:8000/rest-api/calendar/%calendar-id%/

        Response::

            {
                "count": 1,
                "next": null,
                "previous": null,
                "results": [
                    {
                        "url": "http://127.0.0.1:8000/rest-api/calendar/1/",
                        "name": "calendar_I",
                        "user": "http://127.0.0.1:8000/rest-api/calendar-user/3/",
                        "max_concurrent": 0,
                        "created_date": "2013-12-02T07:48:21.136Z"
                    }
                ]
            }

    **Update**:

        CURL Usage::

            curl -u username:password --dump-header - -H "Content-Type: application/json" -X PATCH --data '{"name": "mycalendar", "max_concurrent": "1", "user": "http://127.0.0.1:8000/rest-api/calendar-user/4/"}' http://localhost:8000/rest-api/calendar/%calendar-id%/

        Response::

            HTTP/1.0 200 NO CONTENT
            Date: Fri, 23 Sep 2011 06:46:12 GMT
            Server: WSGIServer/0.1 Python/2.7.1+
            Vary: Accept-Language, Cookie
            Content-Length: 0
            Content-Type: text/html; charset=utf-8
            Content-Language: en-us


    **Delete**:

        CURL Usage::

            curl -u username:password --dump-header - -H "Content-Type: application/json" -X DELETE  http://localhost:8000/rest-api/calendar/%calendar-id%/
    """

    class Meta:
        model = Calendar

    def get_fields(self, *args, **kwargs):
        """filter calendar user field"""
        fields = super(CalendarSerializer, self).get_fields(*args, **kwargs)
        request = self.context['request']
        calendar_user_list = get_calendar_user_id_list(request.user)
        fields['user'].queryset = CalendarUser.objects.filter(id__in=calendar_user_list).order_by('id')

        return fields

########NEW FILE########
__FILENAME__ = calendar_setting_serializers
# -*- coding: utf-8 -*-
#
# Newfies-Dialer License
# http://www.newfies-dialer.org
#
# This Source Code Form is subject to the terms of the Mozilla Public
# License, v. 2.0. If a copy of the MPL was not distributed with this file,
# You can obtain one at http://mozilla.org/MPL/2.0/.
#
# Copyright (C) 2011-2014 Star2Billing S.L.
#
# The Initial Developer of the Original Code is
# Arezqui Belaid <info@star2billing.com>
#
from django.conf import settings
from rest_framework import serializers
from appointment.models.users import CalendarSetting
from survey.models import Survey
from audiofield.models import AudioFile


class CalendarSettingSerializer(serializers.HyperlinkedModelSerializer):
    """
    **Create**:

        CURL Usage::

            curl -u username:password --dump-header - -H "Content-Type:application/json" -X POST --data '{"label": "calendar_setting", "callerid": "123456", "caller_name": "xyz", "user": "http://127.0.0.1:8000/rest-api/user/2/", "survey": "http://127.0.0.1:8000/rest-api/sealed-survey/1/", "aleg_gateway": "http://127.0.0.1:8000/rest-api/gateway/1/", "sms_gateway": "http://127.0.0.1:8000/rest-api/sms-gateway/1/"}' http://localhost:8000/rest-api/calendar-setting/

        Response::

            HTTP/1.0 201 CREATED
            Date: Fri, 14 Jun 2013 09:52:27 GMT
            Server: WSGIServer/0.1 Python/2.7.3
            Vary: Accept, Accept-Language, Cookie
            Content-Type: application/json; charset=utf-8
            Content-Language: en-us
            Allow: GET, POST, HEAD, OPTIONS

    **Read**:

        CURL Usage::

            curl -u username:password -H 'Accept: application/json' http://localhost:8000/rest-api/calendar-setting/

            curl -u username:password -H 'Accept: application/json' http://localhost:8000/rest-api/calendar-setting/%calendar-setting-id%/

        Response::

            {
                "count": 1,
                "next": null,
                "previous": null,
                "results": [
                    {
                        "user": "manager",
                        "url": "http://127.0.0.1:8000/rest-api/calendar-setting/1/",
                        "label": "cal_setting_label",
                        "callerid": "32423",
                        "caller_name": "cal_serting",
                        "call_timeout": 60,
                        "survey": "http://127.0.0.1:8000/rest-api/sealed-survey/1/",
                        "aleg_gateway": "http://127.0.0.1:8000/rest-api/gateway/1/",
                        "sms_gateway": "http://127.0.0.1:8000/rest-api/gateway/1/",
                        "voicemail": false,
                        "amd_behavior": null,
                        "voicemail_audiofile": null,
                        "created_date": "2013-12-02T07:20:54.490Z",
                        "updated_date": "2013-12-02T12:18:52.385Z"
                    }
                ]
            }

    **Update**:

        CURL Usage::

            curl -u username:password --dump-header - -H "Content-Type: application/json" -X PATCH --data '{"label": "calendar_setting", "callerid": "123456", "caller_name": "xyz", "user": "http://127.0.0.1:8000/rest-api/user/2/", "survey": "http://127.0.0.1:8000/rest-api/sealed-survey/1/", "aleg_gateway": "http://127.0.0.1:8000/rest-api/gateway/1/", "sms_gateway": "http://127.0.0.1:8000/rest-api/sms-gateway/1/"}' http://localhost:8000/rest-api/calendar-setting/%calendar-setting-id%/

        Response::

            HTTP/1.0 200 NO CONTENT
            Date: Fri, 23 Sep 2011 06:46:12 GMT
            Server: WSGIServer/0.1 Python/2.7.1+
            Vary: Accept-Language, Cookie
            Content-Length: 0
            Content-Type: text/html; charset=utf-8
            Content-Language: en-us

    **Delete**:

        CURL Usage::

            curl -u username:password --dump-header - -H "Content-Type: application/json" -X DELETE  http://localhost:8000/rest-api/calendar-setting/%calendar-setting-id%/
    """
    user = serializers.Field(source='user')
    sms_gateway = serializers.HyperlinkedRelatedField(
        read_only=False, view_name='sms-gateway-detail')

    class Meta:
        model = CalendarSetting

    def get_fields(self, *args, **kwargs):
        """filter survey field"""
        fields = super(CalendarSettingSerializer, self).get_fields(*args, **kwargs)
        request = self.context['request']

        if request.method != 'GET':
            fields['survey'].queryset = Survey.objects.filter(user=request.user)

        fields['aleg_gateway'].queryset = request.user.userprofile.userprofile_gateway.all()
        if settings.AMD:
            fields['voicemail_audiofile'].queryset = AudioFile.objects.filter(user=request.user)

        return fields

########NEW FILE########
__FILENAME__ = calendar_user_profile_serializers
# -*- coding: utf-8 -*-

#
# Newfies-Dialer License
# http://www.newfies-dialer.org
#
# This Source Code Form is subject to the terms of the Mozilla Public
# License, v. 2.0. If a copy of the MPL was not distributed with this file,
# You can obtain one at http://mozilla.org/MPL/2.0/.
#
# Copyright (C) 2011-2014 Star2Billing S.L.
#
# The Initial Developer of the Original Code is
# Arezqui Belaid <info@star2billing.com>
#
from rest_framework import serializers
from appointment.models.users import CalendarUser, CalendarUserProfile
# from appointment.function_def import get_calendar_user_id_list
from agent.models import AgentProfile


class CalendarUserProfileSerializer(serializers.ModelSerializer):
    """
    **Read**:

        CURL Usage::

            curl -u username:password -H 'Accept: application/json' http://localhost:8000/rest-api/calendar-user-profile/

            curl -u username:password -H 'Accept: application/json' http://localhost:8000/rest-api/calendar-user-profile/%calendar-user-id%/

        Response::

            {
                "count": 1,
                "next": null,
                "previous": null,
                "results": [
                    {
                        "manager": "manager",
                        "id": 1,
                        "user": 3,
                        "address": null,
                        "city": null,
                        "state": null,
                        "country": "",
                        "zip_code": null,
                        "phone_no": null,
                        "fax": null,
                        "company_name": null,
                        "company_website": null,
                        "language": null,
                        "note": null,
                        "accountcode": null,
                        "created_date": "2013-12-16T06:26:06.153Z",
                        "updated_date": "2013-12-16T06:26:06.153Z",
                        "calendar_setting": 1
                    }
                ]
            }

    **Update**:

        CURL Usage::

            curl -u username:password --dump-header - -H "Content-Type: application/json" -X PATCH --data '{"accountcode": "353652", "calendar_setting": "1"}' http://localhost:8000/rest-api/calendar-user-profile/%calendar-user-id%/

        Response::

            HTTP/1.0 200 OK
            Date: Fri, 23 Sep 2011 06:46:12 GMT
            Server: WSGIServer/0.1 Python/2.7.1+
            Vary: Accept-Language, Cookie
            Content-Length: 0
            Content-Type: text/html; charset=utf-8
            Content-Language: en-us
    """
    manager = serializers.Field(source='manager')

    class Meta:
        model = CalendarUserProfile

    def get_fields(self, *args, **kwargs):
        """filter  field"""
        fields = super(CalendarUserProfileSerializer, self).get_fields(*args, **kwargs)
        request = self.context['request']
        agent_id_list = AgentProfile.objects.values_list('user_id', flat=True).filter(manager=request.user)
        fields['user'].queryset = CalendarUser.objects\
            .filter(is_staff=False, is_superuser=False)\
            .exclude(id__in=agent_id_list).order_by('id')
        """
        calendar_user_list = get_calendar_user_id_list(request.user)

        if not self.object:
            fields['user'].queryset = CalendarUser.objects\
                .filter(is_staff=False, is_superuser=False)\
                .exclude(id__in=calendar_user_list)\
                .exclude(id__in=agent_id_list).order_by('id')
        else:
            fields['user'].queryset = CalendarUser.objects.filter(pk=self.object.user_id)
        """

        return fields

########NEW FILE########
__FILENAME__ = calendar_user_serializers
# -*- coding: utf-8 -*-
#
# Newfies-Dialer License
# http://www.newfies-dialer.org
#
# This Source Code Form is subject to the terms of the Mozilla Public
# License, v. 2.0. If a copy of the MPL was not distributed with this file,
# You can obtain one at http://mozilla.org/MPL/2.0/.
#
# Copyright (C) 2011-2014 Star2Billing S.L.
#
# The Initial Developer of the Original Code is
# Arezqui Belaid <info@star2billing.com>
#
from rest_framework import serializers
from appointment.models.users import CalendarUser


class CalendarUserSerializer(serializers.HyperlinkedModelSerializer):
    """
    **Create**:

        CURL Usage::

            curl -u username:password --dump-header - -H "Content-Type:application/json" -X POST --data '{"username": "caluser2", "password": "caluser2", "email": "xyz@gmail.com"}' http://localhost:8000/rest-api/calendar-user/

        Response::

            HTTP/1.0 201 CREATED
            Date: Mon, 16 Dec 2013 11:00:39 GMT
            Server: WSGIServer/0.1 Python/2.7.3
            Vary: Accept, Accept-Language, Cookie
            Content-Language: en
            Content-Type: application/json; charset=utf-8
            Location: http://localhost:8000/rest-api/calendar-user/5/
            Allow: GET, POST, HEAD, OPTIONS

            {"url": "http://localhost:8000/rest-api/calendar-user/5/", "username": "caluser2", "password": "pbkdf2_sha256$12000$RKQtziT23qoz$WiVneuVVTbi2NjSmLCmuXeQTEMoHYnqAaC0/nUUaNtM=", "last_name": "", "first_name": "", "email": "xyz@gmail.com", "groups": []}

    **Read**:

        CURL Usage::

            curl -u username:password -H 'Accept: application/json' http://localhost:8000/rest-api/calendar-user/

            curl -u username:password -H 'Accept: application/json' http://localhost:8000/rest-api/calendar-user/%calendar-user-id%/

        Response::

            {
                "count": 1,
                "next": null,
                "previous": null,
                "results": [
                    {
                        "url": "http://127.0.0.1:8000/rest-api/calendar-user/3/",
                        "username": "agent",
                        "last_name": "",
                        "first_name": "",
                        "email": "",
                        "groups": []
                    }
                ]
            }

    **Delete**:

        CURL Usage::

            curl -u username:password --dump-header - -H "Content-Type: application/json" -X DELETE  http://localhost:8000/rest-api/calendar-user/%calendar-user-id%/
    """

    class Meta:
        model = CalendarUser
        fields = ('username', 'password', 'last_name', 'first_name', 'email')

########NEW FILE########
__FILENAME__ = callrequest_serializers
# -*- coding: utf-8 -*-
#
# Newfies-Dialer License
# http://www.newfies-dialer.org
#
# This Source Code Form is subject to the terms of the Mozilla Public
# License, v. 2.0. If a copy of the MPL was not distributed with this file,
# You can obtain one at http://mozilla.org/MPL/2.0/.
#
# Copyright (C) 2011-2014 Star2Billing S.L.
#
# The Initial Developer of the Original Code is
# Arezqui Belaid <info@star2billing.com>
#
from django.contrib.contenttypes.models import ContentType
from rest_framework import serializers
from dialer_cdr.models import Callrequest


class CallrequestSerializer(serializers.HyperlinkedModelSerializer):
    """
    **Create**:

        CURL Usage::

            curl -u username:password --dump-header - -H "Content-Type:application/json" -X POST --data '{"request_uuid": "2342jtdsf-00123", "call_time": "2011-10-20 12:21:22", "phone_number": "8792749823", "content_type":"/rest-api/content_type/49/", "object_id":1, "timeout": "30000", "callerid": "650784355", "call_type": "1"}' http://localhost:8000/rest-api/callrequest/

        Response::

            HTTP/1.0 201 CREATED
            Date: Fri, 23 Sep 2011 06:08:34 GMT
            Server: WSGIServer/0.1 Python/2.7.1+
            Vary: Accept-Language, Cookie
            Content-Type: text/html; charset=utf-8
            Location: http://localhost:8000/api/app/callrequest/1/
            Content-Language: en-us


    **Read**:

        CURL Usage::

            curl -u username:password -H 'Accept: application/json' http://localhost:8000/rest-api/callrequest/

            curl -u username:password -H 'Accept: application/json' http://localhost:8000/rest-api/callrequest/%callreq_id%/

        Response::

            {
               "meta":{
                  "limit":20,
                  "next":null,
                  "offset":0,
                  "previous":null,
                  "total_count":1
               },
               "objects":[
                  {
                     "call_time":"2011-10-20T12:21:22",
                     "call_type":1,
                     "callerid":"650784355",
                     "created_date":"2011-10-14T07:33:41",
                     "extra_data":"",
                     "extra_dial_string":"",
                     "hangup_cause":"",
                     "id":"1",
                     "last_attempt_time":null,
                     "num_attempt":0,
                     "phone_number":"8792749823",
                     "request_uuid":"2342jtdsf-00123",
                     "resource_uri":"/api/v1/callrequest/1/",
                     "result":"",
                     "status":1,
                     "timelimit":3600,
                     "timeout":30000,
                     "updated_date":"2011-10-14T07:33:41",
                     "user":{
                        "first_name":"",
                        "id":"1",
                        "last_login":"2011-10-11T01:03:42",
                        "last_name":"",
                        "resource_uri":"/api/v1/user/1/",
                        "username":"areski"
                     },
                  }
               ]
            }

    **Update**:

        CURL Usage::

            curl -u username:password --dump-header - -H "Content-Type: application/json" -X PUT --data '{"content_type":"/rest-api/content_type/49/", "object_id":1, "status": "5"}' http://localhost:8000/rest-api/callrequest/%callrequest_id%/

        Response::

            HTTP/1.0 204 NO CONTENT
            Date: Fri, 23 Sep 2011 06:46:12 GMT
            Server: WSGIServer/0.1 Python/2.7.1+
            Vary: Accept-Language, Cookie
            Content-Length: 0
            Content-Type: text/html; charset=utf-8
            Content-Language: en-us

    """
    user = serializers.Field(source='user')

    class Meta:
        model = Callrequest

    def get_fields(self, *args, **kwargs):
        """filter content_type field"""
        fields = super(CallrequestSerializer, self).get_fields(*args, **kwargs)
        request = self.context['request']

        if request.method != 'GET':
            fields['aleg_gateway'].queryset = request.user.userprofile.userprofile_gateway.all()
            if self.object and self.object:
                fields['content_type'].queryset = ContentType.objects.filter(model__in=["survey"])
            else:
                fields['content_type'].queryset = ContentType.objects.filter(model__in=["survey_template"])

        return fields

########NEW FILE########
__FILENAME__ = campaign_serializers
# -*- coding: utf-8 -*-

#
# Newfies-Dialer License
# http://www.newfies-dialer.org
#
# This Source Code Form is subject to the terms of the Mozilla Public
# License, v. 2.0. If a copy of the MPL was not distributed with this file,
# You can obtain one at http://mozilla.org/MPL/2.0/.
#
# Copyright (C) 2011-2014 Star2Billing S.L.
#
# The Initial Developer of the Original Code is
# Arezqui Belaid <info@star2billing.com>
#
from django.contrib.contenttypes.models import ContentType
from django.conf import settings
from rest_framework import serializers
from dialer_campaign.models import Campaign
from dialer_campaign.function_def import user_dialer_setting, check_dialer_setting,\
    dialer_setting_limit
from dialer_contact.models import Phonebook
from audiofield.models import AudioFile
from dnc.models import DNC
from sms.models import Gateway as SMS_Gateway


class CampaignSerializer(serializers.HyperlinkedModelSerializer):
    """
    **Create**:

        CURL Usage::

            curl -u username:password --dump-header - -H "Content-Type:application/json" -X POST --data '{"name": "mycampaign", "description": "", "callerid": "1239876", "startingdate": "2013-06-13 13:13:33", "expirationdate": "2013-06-14 13:13:33", "frequency": "20", "callmaxduration": "50", "maxretry": "3", "intervalretry": "3000", "calltimeout": "45", "aleg_gateway": "/rest-api/gateway/1/", "sms_gateway": "/rest-api/sms-gateway/1/", "content_type": "/rest-api/content-type/49/", "object_id" : "1", "extra_data": "2000", "voicemail": "True", "amd_behavior": "1", "voicemail_audiofile": "1", "dnc": "/rest-api/dnc/1/", "phonebook": "1"}' http://localhost:8000/rest-api/campaigns/

        Response::

            HTTP/1.0 201 CREATED
            Date: Fri, 14 Jun 2013 09:52:27 GMT
            Server: WSGIServer/0.1 Python/2.7.3
            Vary: Accept, Accept-Language, Cookie
            Content-Type: application/json; charset=utf-8
            Content-Language: en-us
            Allow: GET, POST, HEAD, OPTIONS

            {"id": 1, "campaign_code": "JDQBG", "name": "mycampaign1", "description": "", "callerid": "1239876", "phonebook": ["/rest-api/phonebook/1/", "/rest-api/phonebook/2/"], "startingdate": "2013-06-13T13:13:33", "expirationdate": "2013-06-14T13:13:33", "aleg_gateway": "http://localhost:8000/rest-api/gateway/1/", "user": "http://localhost:8000/rest-api/users/1/", "status": 2, "content_type": "http://localhost:8000/rest-api/content-type/49/", "object_id": 1, "extra_data": "2000", "dnc": null, "frequency": 20, "callmaxduration": 50, "maxretry": 3, "intervalretry": 3000, "calltimeout": 45, "daily_start_time": "00:00:00", "daily_stop_time": "23:59:59", "monday": true, "tuesday": true, "wednesday": true, "thursday": true, "friday": true, "saturday": true, "sunday": true, "completion_maxretry": 0, "completion_intervalretry": 900}


    **Read**:

        CURL Usage::

            curl -u username:password -H 'Accept: application/json' http://localhost:8000/rest-api/campaigns/

            curl -u username:password -H 'Accept: application/json' http://localhost:8000/rest-api/campaigns/%campaign-id%/

        Response::

            {
                "count": 1,
                "next": null,
                "previous": null,
                "results": [
                    {
                        "id": 2,
                        "campaign_code": "BXTWX",
                        "name": "Sample survey campaign",
                        "description": "",
                        "callerid": "",
                        "phonebook": [
                            "http://127.0.0.1:8000/rest-api/phonebook/1/"
                        ],
                        "startingdate": "2011-12-27T14:35:46",
                        "expirationdate": "2011-12-28T14:35:46",
                        "aleg_gateway": "http://127.0.0.1:8000/rest-api/gateway/1/",
                        "user": "http://127.0.0.1:8000/rest-api/users/1/",
                        "status": 2,
                        "content_type": "http://127.0.0.1:8000/rest-api/content-type/49/",
                        "object_id": 1,
                        "extra_data": "",
                        "dnc": "http://127.0.0.1:8000/rest-api/dnc/1/",
                        "voicemail": false,
                        "amd_behavior": null,
                        "voicemail_audiofile": null,
                        "frequency": 10,
                        "callmaxduration": 1800,
                        "maxretry": 0,
                        "intervalretry": 300,
                        "calltimeout": 45,
                        "daily_start_time": "00:00:00",
                        "daily_stop_time": "23:59:59",
                        "monday": true,
                        "tuesday": true,
                        "wednesday": true,
                        "thursday": true,
                        "friday": true,
                        "saturday": true,
                        "sunday": true,
                        "completion_maxretry": 0,
                        "completion_intervalretry": 900
                    }
                ]
            }


    **Update**:

        CURL Usage::

            curl -u username:password --dump-header - -H "Content-Type: application/json" -X PATCH --data '{"name": "mylittlecampaign243"}' http://localhost:8000/rest-api/campaigns/%campaign-id%/

        Response::

            HTTP/1.0 202 NO CONTENT
            Date: Fri, 23 Sep 2011 06:46:12 GMT
            Server: WSGIServer/0.1 Python/2.7.1+
            Vary: Accept-Language, Cookie
            Content-Length: 0
            Content-Type: text/html; charset=utf-8
            Content-Language: en-us

            {"id": 1, "campaign_code": "JDQBG", "name": "mylittlecampaign243", "description": "", "callerid": "1239876", "phonebook": ["http://localhost:8000/rest-api/phonebook/1/", "http://localhost:8000/rest-api/phonebook/2/"], "startingdate": "2013-06-13T13:13:33", "expirationdate": "2013-06-14T13:13:33", "aleg_gateway": "http://localhost:8000/rest-api/gateway/1/", "user": "http://localhost:8000/rest-api/users/1/", "status": 2, "content_type": "http://localhost:8000/rest-api/content-type/67/", "object_id": 1, "extra_data": "2000", "dnc": null, "frequency": 20, "callmaxduration": 50, "maxretry": 3, "intervalretry": 3000, "calltimeout": 45, "daily_start_time": "00:00:00", "daily_stop_time": "23:59:59", "monday": true, "tuesday": true, "wednesday": true, "thursday": true, "friday": true, "saturday": true, "sunday": true, "completion_maxretry": 0, "completion_intervalretry": 900}


    **Delete**:

        CURL Usage::

            curl -u username:password --dump-header - -H "Content-Type: application/json" -X DELETE  http://localhost:8000/rest-api/campaign/%campaign_id%/

        Response::

            {
                "data": "campaign deleted"
            }
    """
    user = serializers.Field(source='user')
    sms_gateway = serializers.HyperlinkedRelatedField(
        read_only=False, view_name='sms-gateway-detail')

    class Meta:
        model = Campaign
        fields = (
            'id', 'campaign_code', 'name', 'description', 'callerid',
            'phonebook', 'startingdate', 'expirationdate', 'aleg_gateway',
            'user', 'status', 'content_type', 'object_id', 'extra_data',
            'dnc', 'voicemail', 'amd_behavior', 'voicemail_audiofile',
            'frequency', 'callmaxduration', 'maxretry', 'intervalretry',
            'calltimeout', 'daily_start_time', 'daily_stop_time',
            'monday', 'tuesday', 'wednesday', 'thursday', 'friday',
            'saturday', 'sunday', 'completion_maxretry', 'sms_gateway',
            'completion_intervalretry',
            #'agent_script', 'lead_disposition', 'external_link'
        )

    def get_fields(self, *args, **kwargs):
        """filter content_type field"""
        fields = super(CampaignSerializer, self).get_fields(*args, **kwargs)
        request = self.context['request']

        if request.method != 'GET' and self.init_data is not None:
            phonebook = self.init_data.get('phonebook')
            if phonebook and phonebook.find('http://') == -1:
                try:
                    phonebook_id_list = phonebook.split(",")
                    m2m_phonebook = []
                    for i in phonebook_id_list:
                        try:
                            Phonebook.objects.get(pk=int(i), user=request.user)
                            m2m_phonebook.append('/rest-api/phonebook/%s/' % i)
                        except:
                            pass

                    if m2m_phonebook:
                        self.init_data['phonebook'] = m2m_phonebook
                    else:
                        self.init_data['phonebook'] = ''
                except:
                    self.init_data['phonebook'] = ''

        if request.method != 'GET':
            if not settings.AMD:
                del fields['voicemail']
                del fields['amd_behavior']
                del fields['voicemail_audiofile']
            else:
                fields['voicemail_audiofile'].queryset = AudioFile.objects.filter(user=request.user)

            fields['aleg_gateway'].queryset = request.user.userprofile.userprofile_gateway.all()
            fields['sms_gateway'].queryset = SMS_Gateway.objects.all()
            fields['dnc'].queryset = DNC.objects.filter(user=request.user)
            fields['phonebook'].queryset = Phonebook.objects.filter(user=request.user)

            if self.object and self.object.has_been_started:
                fields['content_type'].queryset = ContentType.objects.filter(model__in=["survey"])
            else:
                fields['content_type'].queryset = ContentType.objects.filter(model__in=["survey_template"])

        return fields

    def validate(self, attrs):
        """
        Validate campaign form
        """
        request = self.context['request']

        if request.method == 'POST':
            name_count = Campaign.objects.filter(name=attrs.get('name'),
                user=request.user).count()
            if name_count != 0:
                raise serializers.ValidationError("The Campaign name duplicated!")

        if not user_dialer_setting(request.user):
            raise serializers.ValidationError("Your settings are not configured properly, Please contact the administrator.")

        if check_dialer_setting(request, check_for="campaign"):
            raise serializers.ValidationError("Too many campaigns. Max allowed %s"
                    % dialer_setting_limit(request, limit_for="campaign"))

        frequency = attrs.get('frequency')
        if frequency:
            if check_dialer_setting(request, check_for="frequency", field_value=int(frequency)):
                raise serializers.ValidationError("Frequency limit of %s exceeded."
                    % dialer_setting_limit(request, limit_for="frequency"))

        callmaxduration = attrs.get('callmaxduration')
        if callmaxduration:
            if check_dialer_setting(request, check_for="duration", field_value=int(callmaxduration)):
                raise serializers.ValidationError("Duration limit of %s exceeded."
                    % dialer_setting_limit(request, limit_for="duration"))

        maxretry = attrs.get('maxretry')
        if maxretry:
            if check_dialer_setting(request, check_for="retry", field_value=int(maxretry)):
                raise serializers.ValidationError("Retries limit of %s exceeded."
                    % dialer_setting_limit(request, limit_for="retry"))

        calltimeout = attrs.get('calltimeout')
        if calltimeout:
            if check_dialer_setting(request, check_for="timeout", field_value=int(calltimeout)):
                raise serializers.ValidationError("Timeout limit of %s exceeded."
                    % dialer_setting_limit(request, limit_for="timeout"))

        return attrs

########NEW FILE########
__FILENAME__ = contact_serializers
# -*- coding: utf-8 -*-
#
# Newfies-Dialer License
# http://www.newfies-dialer.org
#
# This Source Code Form is subject to the terms of the Mozilla Public
# License, v. 2.0. If a copy of the MPL was not distributed with this file,
# You can obtain one at http://mozilla.org/MPL/2.0/.
#
# Copyright (C) 2011-2014 Star2Billing S.L.
#
# The Initial Developer of the Original Code is
# Arezqui Belaid <info@star2billing.com>
#

from rest_framework import serializers
from dialer_contact.models import Phonebook, Contact


class ContactSerializer(serializers.HyperlinkedModelSerializer):
    """
    **Create**:

        CURL Usage::

            curl -u username:password --dump-header - -H "Content-Type:application/json" -X POST --data '{"contact": "12345678", "status": "1", "last_name": "Belaid", "first_name": "Areski", "phonebook": "1"}' http://localhost:8000/rest-api/contact/

        Response::

            HTTP/1.0 201 CREATED
            Date: Fri, 14 Jun 2013 09:52:27 GMT
            Server: WSGIServer/0.1 Python/2.7.3
            Vary: Accept, Accept-Language, Cookie
            Content-Type: application/json; charset=utf-8
            Content-Language: en-us
            Allow: GET, POST, HEAD, OPTIONS

    **Read**:

        CURL Usage::

            curl -u username:password -H 'Accept: application/json' http://localhost:8000/rest-api/contact/

            curl -u username:password -H 'Accept: application/json' http://localhost:8000/rest-api/contact/%contact-id%/

        Response::

            {
                "count": 1,
                "next": null,
                "previous": null,
                "results": [
                    {
                        "url": "http://127.0.0.1:8000/rest-api/contact/1/",
                        "phonebook": "http://127.0.0.1:8000/rest-api/phonebook/1/",
                        "contact": "55555555",
                        "status": 1,
                        "last_name": "Belaid",
                        "first_name": "Arezqui",
                        "email": "areski@gmail.com",
                        "address": "Address",
                        "city": "Barcelona",
                        "state": "state",
                        "country": "ES",
                        "unit_number": "123",
                        "additional_vars": "{\"facility\":\"hurron\",\"debt\":10,\"address\":\"Sant Lluis street 60\"}",
                        "description": "test subscriber",
                        "created_date": "2013-06-27T19:48:45.118",
                        "updated_date": "2013-06-27T19:48:45.118"
                    },
                ]
            }


    **Update**:

        CURL Usage::

            curl -u username:password --dump-header - -H "Content-Type: application/json" -X PATCH --data '{"contact": "12345678", "status": "1", "last_name": "Belaid", "first_name": "Areski", "phonebook": "1"}' http://localhost:8000/rest-api/contact/%contact-id%/

        Response::

            HTTP/1.0 202 NO CONTENT
            Date: Fri, 23 Sep 2011 06:46:12 GMT
            Server: WSGIServer/0.1 Python/2.7.1+
            Vary: Accept-Language, Cookie
            Content-Length: 0
            Content-Type: text/html; charset=utf-8
            Content-Language: en-us
    """

    class Meta:
        model = Contact

    def get_fields(self, *args, **kwargs):
        """filter survey field"""
        fields = super(ContactSerializer, self).get_fields(*args, **kwargs)
        request = self.context['request']

        if request.method != 'GET' and self.init_data is not None:
            phonebook = self.init_data.get('phonebook')
            if phonebook and phonebook.find('http://') == -1:
                try:
                    Phonebook.objects.get(pk=int(phonebook))
                    self.init_data['phonebook'] = '/rest-api/phonebook/%s/' % phonebook
                except:
                    self.init_data['phonebook'] = ''
                    pass

        if request.method != 'GET':
            fields['phonebook'].queryset = Phonebook.objects.filter(user=request.user)

        return fields

########NEW FILE########
__FILENAME__ = content_type_serializers
# -*- coding: utf-8 -*-

#
# Newfies-Dialer License
# http://www.newfies-dialer.org
#
# This Source Code Form is subject to the terms of the Mozilla Public
# License, v. 2.0. If a copy of the MPL was not distributed with this file,
# You can obtain one at http://mozilla.org/MPL/2.0/.
#
# Copyright (C) 2011-2014 Star2Billing S.L.
#
# The Initial Developer of the Original Code is
# Arezqui Belaid <info@star2billing.com>
#
from django.contrib.contenttypes.models import ContentType
from rest_framework import serializers


class ContentTypeSerializer(serializers.HyperlinkedModelSerializer):
    """
    **Read**:

        CURL Usage::

            curl -u username:password -H 'Accept: application/json' http://localhost:8000/rest-api/content_type/
    """

    class Meta:
        model = ContentType
        fields = ('url', 'name', 'app_label', 'model')

########NEW FILE########
__FILENAME__ = dnc_contact_serializers
# -*- coding: utf-8 -*-

#
# Newfies-Dialer License
# http://www.newfies-dialer.org
#
# This Source Code Form is subject to the terms of the Mozilla Public
# License, v. 2.0. If a copy of the MPL was not distributed with this file,
# You can obtain one at http://mozilla.org/MPL/2.0/.
#
# Copyright (C) 2011-2014 Star2Billing S.L.
#
# The Initial Developer of the Original Code is
# Arezqui Belaid <info@star2billing.com>
#
from rest_framework import serializers
from dnc.models import DNC, DNCContact


class DNCContactSerializer(serializers.HyperlinkedModelSerializer):
    """
    **Create**:

        CURL Usage::

            curl -u username:password --dump-header - -H "Content-Type:application/json" -X POST --data '{"phone_number": "12345", "dnc": "/rest-api/dnc-list/1/"}' http://localhost:8000/rest-api/dnc-contact/

        Response::

            HTTP/1.0 201 CREATED
            Date: Fri, 14 Jun 2013 09:52:27 GMT
            Server: WSGIServer/0.1 Python/2.7.3
            Vary: Accept, Accept-Language, Cookie
            Content-Type: application/json; charset=utf-8
            Content-Language: en-us
            Location: http://localhost:8000/rest-api/dnc_contact/1/
            Allow: GET, POST, HEAD, OPTIONS

    **Read**:

        CURL Usage::

            curl -u username:password -H 'Accept: application/json' http://localhost:8000/rest-api/dnc-contact/

        Response::

            {
                "count": 1,
                "next": null,
                "previous": null,
                "results": [
                    {
                        "url": "http://127.0.0.1:8000/rest-api/dnc-contact/1/",
                        "dnc": "http://127.0.0.1:8000/rest-api/dnc-list/1/",
                        "phone_number": "12345"
                    }
                ]
            }

    **Update**:

        CURL Usage::

            curl -u username:password --dump-header - -H "Content-Type: application/json" -X PUT --data '{"phone_number": "54353432"}' http://localhost:8000/rest-api/dnc-contact/%dnc-contact-id%/

        Response::

            HTTP/1.0 202 NO CONTENT
            Date: Fri, 23 Sep 2011 06:46:12 GMT
            Server: WSGIServer/0.1 Python/2.7.1+
            Vary: Accept-Language, Cookie
            Content-Length: 0
            Content-Type: text/html; charset=utf-8
            Content-Language: en-us
    """

    class Meta:
        model = DNCContact
        fields = ('url', 'dnc', 'phone_number')

    def get_fields(self, *args, **kwargs):
        """filter survey field"""
        fields = super(DNCContactSerializer, self).get_fields(*args, **kwargs)
        request = self.context['request']

        if request.method != 'GET' and self.init_data is not None:
            dnc = self.init_data.get('dnc')
            if dnc and dnc.find('http://') == -1:
                try:
                    DNC.objects.get(pk=int(dnc))
                    self.init_data['dnc'] = '/rest-api/dnc-list/%s/' % dnc
                except:
                    self.init_data['dnc'] = ''
                    pass

        if request.method != 'GET':
            fields['dnc'].queryset = DNC.objects.filter(user=request.user)

        return fields

########NEW FILE########
__FILENAME__ = dnc_serializers
# -*- coding: utf-8 -*-

#
# Newfies-Dialer License
# http://www.newfies-dialer.org
#
# This Source Code Form is subject to the terms of the Mozilla Public
# License, v. 2.0. If a copy of the MPL was not distributed with this file,
# You can obtain one at http://mozilla.org/MPL/2.0/.
#
# Copyright (C) 2011-2014 Star2Billing S.L.
#
# The Initial Developer of the Original Code is
# Arezqui Belaid <info@star2billing.com>
#
from rest_framework import serializers
from dnc.models import DNC


class DNCSerializer(serializers.HyperlinkedModelSerializer):
    """
    **Create**:

        CURL Usage::

            curl -u username:password --dump-header - -H "Content-Type:application/json" -X POST --data '{"name": "my dnc", "user": "/rest-api/users/1/"}' http://localhost:8000/rest-api/dnc-list/

        Response::

            HTTP/1.0 201 CREATED
            Date: Fri, 14 Jun 2013 09:52:27 GMT
            Server: WSGIServer/0.1 Python/2.7.3
            Vary: Accept, Accept-Language, Cookie
            Content-Type: application/json; charset=utf-8
            Content-Language: en-us
            Location: http://localhost:8000/rest-api/dnc/1/
            Allow: GET, POST, HEAD, OPTIONS

    **Read**:

        CURL Usage::

            curl -u username:password -H 'Accept: application/json' http://localhost:8000/rest-api/dnc-list/

        Response::

            {
                "count": 1,
                "next": null,
                "previous": null,
                "results": [
                    {
                        "url": "http://127.0.0.1:8000/rest-api/dnc/1/",
                        "name": "sample dnc",
                        "user": "http://127.0.0.1:8000/rest-api/users/1/",
                        "created_date": "2013-03-15T18:28:30.208",
                        "updated_date": "2013-03-15T18:28:30.208"
                    }
                ]
            }

    **Update**:

        CURL Usage::

            curl -u username:password --dump-header - -H "Content-Type: application/json" -X PATCH --data '{"name": "sample dnc"}' http://localhost:8000/rest-api/dnc-list/%dnc-id%/

        Response::

            HTTP/1.0 202 NO CONTENT
            Date: Fri, 23 Sep 2011 06:46:12 GMT
            Server: WSGIServer/0.1 Python/2.7.1+
            Vary: Accept-Language, Cookie
            Content-Length: 0
            Content-Type: text/html; charset=utf-8
            Content-Language: en-us
    """
    user = serializers.Field(source='user')

    class Meta:
        model = DNC

########NEW FILE########
__FILENAME__ = event_serializers
# -*- coding: utf-8 -*-
#
# Newfies-Dialer License
# http://www.newfies-dialer.org
#
# This Source Code Form is subject to the terms of the Mozilla Public
# License, v. 2.0. If a copy of the MPL was not distributed with this file,
# You can obtain one at http://mozilla.org/MPL/2.0/.
#
# Copyright (C) 2011-2014 Star2Billing S.L.
#
# The Initial Developer of the Original Code is
# Arezqui Belaid <info@star2billing.com>
#
from rest_framework import serializers
from appointment.models.calendars import Calendar
from appointment.models.events import Event
from appointment.models.users import CalendarUser
from appointment.function_def import get_calendar_user_id_list


class EventSerializer(serializers.HyperlinkedModelSerializer):
    """
    **Create**:

        CURL Usage::

            curl -u username:password --dump-header - -H "Content-Type:application/json" -X POST --data '{"title": "event_title", "start": "2013-12-10 12:34:43", "end": "2013-12-15 14:43:32", "creator": "http://127.0.0.1:8000/rest-api/calendar-user/4/", "end_recurring_period": "2013-12-27 12:23:34", "calendar": "http://127.0.0.1:8000/rest-api/calendar/1/", "status": "1"}' http://localhost:8000/rest-api/event/

        Response::

            HTTP/1.0 201 CREATED
            Date: Fri, 14 Jun 2013 09:52:27 GMT
            Server: WSGIServer/0.1 Python/2.7.3
            Vary: Accept, Accept-Language, Cookie
            Content-Type: application/json; charset=utf-8
            Content-Language: en-us
            Allow: GET, POST, HEAD, OPTIONS

    **Read**:

        CURL Usage::

            curl -u username:password -H 'Accept: application/json' http://localhost:8000/rest-api/event/

            curl -u username:password -H 'Accept: application/json' http://localhost:8000/rest-api/event/%event-id%/

        Response::

            {
                "count": 1,
                "next": null,
                "previous": null,
                "results": [
                    {

                        "url": "http://127.0.0.1:8000/rest-api/event/1/",
                        "title": "cal-event",
                        "description": "",
                        "start": "2013-12-02T07:48:27Z",
                        "end": "2013-12-02T08:48:27Z",
                        "creator": "http://127.0.0.1:8000/rest-api/calendar-user/3/",
                        "created_on": "2013-12-02T07:48:27Z",
                        "end_recurring_period": "2014-01-02T07:48:27Z",
                        "rule": null,
                        "calendar": "http://127.0.0.1:8000/rest-api/calendar/1/",
                        "notify_count": 0,
                        "status": 1,
                        "data": null,
                        "parent_event": null,
                        "occ_count": 0
                    }
                ]
            }

    **Update**:

        CURL Usage::

            curl -u username:password --dump-header - -H "Content-Type: application/json" -X PATCH --data '{"title": "event_title", "start": "2013-12-10 12:34:43", "end": "2013-12-15 14:43:32", "creator": "http://127.0.0.1:8000/rest-api/calendar-user/4/", "end_recurring_period": "2013-12-27 12:23:34", "calendar": "http://127.0.0.1:8000/rest-api/calendar/1/", "status": "1"}' http://localhost:8000/rest-api/event/%event-id%/

        Response::

            HTTP/1.0 200 NO CONTENT
            Date: Fri, 23 Sep 2011 06:46:12 GMT
            Server: WSGIServer/0.1 Python/2.7.1+
            Vary: Accept-Language, Cookie
            Content-Length: 0
            Content-Type: text/html; charset=utf-8
            Content-Language: en-us

    **Delete**:

        CURL Usage::

            curl -u username:password --dump-header - -H "Content-Type: application/json" -X DELETE  http://localhost:8000/rest-api/event/%event-id%/

    **update_last_child_status**:

        CURL Usage::

            curl -u username:password --dump-header - -H "Content-Type: application/json" -X PATCH --data '{"status": "1"}' http://localhost:8000/rest-api/event/%event-id%/update_last_child_status/

        Response::

            {"status": "event status has been updated"}


    **get_list_child**:

        CURL Usage::

            curl -u username:password -H 'Accept: application/json' http://localhost:8000/rest-api/event/%event-id%/get_list_child/

        Response::

            {
                "url": "http://localhost:8000/rest-api/event/2/",
                "start": "2013-12-24 08:55:13+00:00",
                "end": "2013-12-31 09:55:13+00:00",
                "description": "",
                "title": "test-child-event"
            }
    """

    class Meta:
        model = Event

    def get_fields(self, *args, **kwargs):
        """filter content_type field"""
        fields = super(EventSerializer, self).get_fields(*args, **kwargs)
        request = self.context['request']
        calendar_user_list = get_calendar_user_id_list(request.user)

        fields['creator'].queryset = CalendarUser.objects.filter(id__in=calendar_user_list).order_by('id')
        fields['calendar'].queryset = Calendar.objects.filter(user_id__in=calendar_user_list).order_by('id')
        fields['parent_event'].queryset = Event.objects.filter(calendar__user_id__in=calendar_user_list).order_by('id')

        return fields

########NEW FILE########
__FILENAME__ = gateway_serializers
# -*- coding: utf-8 -*-
#
# Newfies-Dialer License
# http://www.newfies-dialer.org
#
# This Source Code Form is subject to the terms of the Mozilla Public
# License, v. 2.0. If a copy of the MPL was not distributed with this file,
# You can obtain one at http://mozilla.org/MPL/2.0/.
#
# Copyright (C) 2011-2014 Star2Billing S.L.
#
# The Initial Developer of the Original Code is
# Arezqui Belaid <info@star2billing.com>
#
from rest_framework import serializers
from dialer_gateway.models import Gateway


class GatewaySerializer(serializers.HyperlinkedModelSerializer):
    """
    **Read**:

        CURL Usage::

            curl -u username:password -H 'Accept: application/json' http://localhost:8000/rest-api/gateway/

            curl -u username:password -H 'Accept: application/json' http://localhost:8000/rest-api/gateway/%gateway-id%/

        Response::

            {
                "count": 1,
                "next": null,
                "previous": null,
                "results": [
                    {
                        "url": "http://127.0.0.1:8000/rest-api/gateway/1/",
                        "name": "Default_Gateway",
                        "status": 1,
                        "description": "",
                        "addprefix": "",
                        "removeprefix": "",
                        "gateways": "user/,user",
                        "gateway_codecs": "PCMA,PCMU",
                        "gateway_timeouts": "10,10",
                        "gateway_retries": "2,1",
                        "originate_dial_string": "",
                        "secondused": null,
                        "created_date": "2011-06-15T00:28:52",
                        "updated_date": "2013-06-14T17:54:24.130",
                        "failover": null,
                        "addparameter": "",
                        "count_call": 1,
                        "count_in_use": null,
                        "maximum_call": null
                    }
                ]
            }
    """

    class Meta:
        model = Gateway

########NEW FILE########
__FILENAME__ = mail_template_serializers
# -*- coding: utf-8 -*-

#
# Newfies-Dialer License
# http://www.newfies-dialer.org
#
# This Source Code Form is subject to the terms of the Mozilla Public
# License, v. 2.0. If a copy of the MPL was not distributed with this file,
# You can obtain one at http://mozilla.org/MPL/2.0/.
#
# Copyright (C) 2011-2014 Star2Billing S.L.
#
# The Initial Developer of the Original Code is
# Arezqui Belaid <info@star2billing.com>
#
from rest_framework import serializers
from mod_mailer.models import MailTemplate


class MailTemplateSerializer(serializers.HyperlinkedModelSerializer):
    """
    **Read**:

        CURL Usage::

            curl -u username:password -H 'Accept: application/json' http://localhost:8000/rest-api/mail-template/

        Response::

            {
                "count": 1,
                "next": null,
                "previous": null,
                "results": [
                    {
                        "url": "http://127.0.0.1:8000/rest-api/mail-template/1/",
                        "label": "test_mail",
                        "template_key": "test_mail",
                        "from_email": "xyz@gmail.com",
                        "from_name": "xyz",
                        "subject": "hi",
                        "message_plaintext": "test message",
                        "message_html": "<h1>Hi</h1>",
                        "created_date": "2013-12-16T06:37:42.938Z"
                    }
                ]
            }
    """
    class Meta:
        model = MailTemplate

########NEW FILE########
__FILENAME__ = permissions
# -*- coding: utf-8 -*-
#
# Newfies-Dialer License
# http://www.newfies-dialer.org
#
# This Source Code Form is subject to the terms of the Mozilla Public
# License, v. 2.0. If a copy of the MPL was not distributed with this file,
# You can obtain one at http://mozilla.org/MPL/2.0/.
#
# Copyright (C) 2011-2014 Star2Billing S.L.
#
# The Initial Developer of the Original Code is
# Arezqui Belaid <info@star2billing.com>
#
from rest_framework.permissions import DjangoModelPermissions  # DjangoObjectPermissions


class CustomObjectPermissions(DjangoModelPermissions):
    """
    Similar to `DjangoModelPermissions`, but adding 'view' permissions.
    """
    perms_map = {
        'GET': ['%(app_label)s.view_%(model_name)s'],
        'OPTIONS': ['%(app_label)s.view_%(model_name)s'],
        'HEAD': ['%(app_label)s.view_%(model_name)s'],
        'POST': ['%(app_label)s.add_%(model_name)s'],
        'PUT': ['%(app_label)s.change_%(model_name)s'],
        'PATCH': ['%(app_label)s.change_%(model_name)s'],
        'DELETE': ['%(app_label)s.delete_%(model_name)s'],
    }

########NEW FILE########
__FILENAME__ = phonebook_serializers
# -*- coding: utf-8 -*-
#
# Newfies-Dialer License
# http://www.newfies-dialer.org
#
# This Source Code Form is subject to the terms of the Mozilla Public
# License, v. 2.0. If a copy of the MPL was not distributed with this file,
# You can obtain one at http://mozilla.org/MPL/2.0/.
#
# Copyright (C) 2011-2014 Star2Billing S.L.
#
# The Initial Developer of the Original Code is
# Arezqui Belaid <info@star2billing.com>
#
from rest_framework import serializers
from dialer_contact.models import Phonebook


class PhonebookSerializer(serializers.HyperlinkedModelSerializer):
    """
    **Create**:

        CURL Usage::

            curl -u username:password --dump-header - -H "Content-Type:application/json" -X POST --data '{"name": "myphonebook"}' http://localhost:8000/rest-api/phonebook/

        Response::

            HTTP/1.0 201 CREATED
            Date: Fri, 14 Jun 2013 09:52:27 GMT
            Server: WSGIServer/0.1 Python/2.7.3
            Vary: Accept, Accept-Language, Cookie
            Content-Type: application/json; charset=utf-8
            Content-Language: en-us
            Allow: GET, POST, HEAD, OPTIONS

    **Read**:

        CURL Usage::

            curl -u username:password -H 'Accept: application/json' http://localhost:8000/rest-api/phonebook/

            curl -u username:password -H 'Accept: application/json' http://localhost:8000/rest-api/phonebook/%phonebook-id%/

        Response::

            {
                "count": 1,
                "next": null,
                "previous": null,
                "results": [
                    {
                        "url": "http://127.0.0.1:8000/rest-api/phonebook/1/",
                        "name": "Default_Phonebook",
                        "description": "",
                        "user": "http://127.0.0.1:8000/rest-api/users/1/",
                        "created_date": "2011-04-08T07:55:05",
                        "updated_date": "2011-04-08T07:55:05"
                    }
                ]
            }

    **Update**:

        CURL Usage::

            curl -u username:password --dump-header - -H "Content-Type: application/json" -X PATCH --data '{"name": "mylittle phonebook"}' http://localhost:8000/rest-api/phonebook/%phonebook-id%/

        Response::

            HTTP/1.0 200 NO CONTENT
            Date: Fri, 23 Sep 2011 06:46:12 GMT
            Server: WSGIServer/0.1 Python/2.7.1+
            Vary: Accept-Language, Cookie
            Content-Length: 0
            Content-Type: text/html; charset=utf-8
            Content-Language: en-us

    **Delete**:

        CURL Usage::

            curl -u username:password --dump-header - -H "Content-Type: application/json" -X DELETE  http://localhost:8000/rest-api/phonebook/%phonebook-id%/
    """
    user = serializers.Field(source='user')

    class Meta:
        model = Phonebook

########NEW FILE########
__FILENAME__ = queue_serializers
# -*- coding: utf-8 -*-
#
# Newfies-Dialer License
# http://www.newfies-dialer.org
#
# This Source Code Form is subject to the terms of the Mozilla Public
# License, v. 2.0. If a copy of the MPL was not distributed with this file,
# You can obtain one at http://mozilla.org/MPL/2.0/.
#
# Copyright (C) 2011-2014 Star2Billing S.L.
#
# The Initial Developer of the Original Code is
# Arezqui Belaid <info@star2billing.com>
#
from rest_framework import serializers
from callcenter.models import Queue


class QueueSerializer(serializers.HyperlinkedModelSerializer):
    """
    **Create**:

        CURL Usage::

            curl -u username:password --dump-header - -H "Content-Type:application/json" -X POST --data '{"name": "queue name"}' http://localhost:8000/rest-api/queue/

        Response::

            HTTP/1.0 201 CREATED
            Date: Fri, 14 Jun 2013 09:52:27 GMT
            Server: WSGIServer/0.1 Python/2.7.3
            Vary: Accept, Accept-Language, Cookie
            Content-Type: application/json; charset=utf-8
            Content-Language: en-us
            Location: http://localhost:8000/rest-api/queue/1/
            Allow: GET, POST, HEAD, OPTIONS

    **Read**:

        CURL Usage::

            curl -u username:password -H 'Accept: application/json' http://localhost:8000/rest-api/queue/

        Response::

            {
                "count": 1,
                "next": null,
                "previous": null,
                "results": [
                    {
                        "manager": "manager",
                        "url": "http://127.0.0.1:8000/rest-api/queue/1/",
                        "name": "Sample queue",
                        "strategy": 5,
                        "moh_sound": "",
                        "record_template": "",
                        "time_base_score": "queue",
                        "tier_rules_apply": false,
                        "tier_rule_wait_second": 300,
                        "tier_rule_wait_multiply_level": true,
                        "tier_rule_no_agent_no_wait": false,
                        "discard_abandoned_after": 14400,
                        "abandoned_resume_allowed": true,
                        "max_wait_time": 0,
                        "max_wait_time_with_no_agent": 120,
                        "max_wait_time_with_no_agent_time_reached": 5,
                        "created_date": "2013-10-23T12:34:20.157Z",
                        "updated_date": "2013-10-23T12:34:20.157Z"
                    }
                ]
            }

    **Update**:

        CURL Usage::

            curl -u username:password --dump-header - -H "Content-Type: application/json" -X PUT --data '{"name": "change name"}' http://localhost:8000/rest-api/queue/%dqueue-id%/

        Response::

            HTTP/1.0 202 NO CONTENT
            Date: Fri, 23 Sep 2011 06:46:12 GMT
            Server: WSGIServer/0.1 Python/2.7.1+
            Vary: Accept-Language, Cookie
            Content-Length: 0
            Content-Type: text/html; charset=utf-8
            Content-Language: en-us
    """
    manager = serializers.Field(source='manager')

    class Meta:
        model = Queue

########NEW FILE########
__FILENAME__ = rule_serializers
# -*- coding: utf-8 -*-
#
# Newfies-Dialer License
# http://www.newfies-dialer.org
#
# This Source Code Form is subject to the terms of the Mozilla Public
# License, v. 2.0. If a copy of the MPL was not distributed with this file,
# You can obtain one at http://mozilla.org/MPL/2.0/.
#
# Copyright (C) 2011-2014 Star2Billing S.L.
#
# The Initial Developer of the Original Code is
# Arezqui Belaid <info@star2billing.com>
#
from rest_framework import serializers
from appointment.models.rules import Rule


class RuleSerializer(serializers.HyperlinkedModelSerializer):
    """
    **Create**:

        CURL Usage::

            curl -u username:password --dump-header - -H "Content-Type:application/json" -X POST --data '{"name": "myrule", "frequency": "YEARLY", "params": "1"}' http://localhost:8000/rest-api/rule/

        Response::

            HTTP/1.0 201 CREATED
            Date: Fri, 14 Jun 2013 09:52:27 GMT
            Server: WSGIServer/0.1 Python/2.7.3
            Vary: Accept, Accept-Language, Cookie
            Content-Type: application/json; charset=utf-8
            Content-Language: en-us
            Allow: GET, POST, HEAD, OPTIONS

    **Read**:

        CURL Usage::

            curl -u username:password -H 'Accept: application/json' http://localhost:8000/rest-api/rule/

            curl -u username:password -H 'Accept: application/json' http://localhost:8000/rest-api/rule/%rule-id%/

        Response::

            {
                "count": 1,
                "next": null,
                "previous": null,
                "results": [
                    {
                        "url": "http://127.0.0.1:8000/rest-api/rule/1/",
                        "name": "Sample Rule",
                        "description": "this is rule description",
                        "frequency": "YEARLY",
                        "params": "{}"
                    }
                ]
            }

    **Update**:

        CURL Usage::

            curl -u username:password --dump-header - -H "Content-Type: application/json" -X PATCH --data '{"name": "mylittle phonebook"}' http://localhost:8000/rest-api/rule/%rule-id%/

        Response::

            HTTP/1.0 200 NO CONTENT
            Date: Fri, 23 Sep 2011 06:46:12 GMT
            Server: WSGIServer/0.1 Python/2.7.1+
            Vary: Accept-Language, Cookie
            Content-Length: 0
            Content-Type: text/html; charset=utf-8
            Content-Language: en-us
    """

    class Meta:
        model = Rule

########NEW FILE########
__FILENAME__ = section_template_serializers
# -*- coding: utf-8 -*-
#
# Newfies-Dialer License
# http://www.newfies-dialer.org
#
# This Source Code Form is subject to the terms of the Mozilla Public
# License, v. 2.0. If a copy of the MPL was not distributed with this file,
# You can obtain one at http://mozilla.org/MPL/2.0/.
#
# Copyright (C) 2011-2014 Star2Billing S.L.
#
# The Initial Developer of the Original Code is
# Arezqui Belaid <info@star2billing.com>
#
from rest_framework import serializers
from survey.models import Section_template


class SectionTemplateSerializer(serializers.HyperlinkedModelSerializer):
    """
    **Create**:

        CURL Usage::

            curl -u username:password --dump-header - -H "Content-Type:application/json" -X POST --data '{"type": "1", "audiofile": "/rest-api/audio-files/1/", "question": "survey que", "survey": "/rest-api/survey-template/1/", "invalid_audiofile": "/rest-api/audio-files/1/", "queue": "/rest-api/queue/1/"}' http://localhost:8000/rest-api/section-template/

        Response::

            HTTP/1.0 201 CREATED
            Date: Fri, 14 Jun 2013 09:52:27 GMT
            Server: WSGIServer/0.1 Python/2.7.3
            Vary: Accept, Accept-Language, Cookie
            Content-Type: application/json; charset=utf-8
            Content-Language: en-us
            Location: http://localhost:8000/rest-api/section-template/1/
            Allow: GET, POST, HEAD, OPTIONS

    **Read**:

        CURL Usage::

            curl -u username:password -H 'Accept: application/json' http://localhost:8000/rest-api/section-template/

                or

            curl -u username:password -H 'Accept: application/json' http://localhost:8000/rest-api/section-template/%section-template-id%/

        Response::

            {
                "count": 1,
                "next": null,
                "previous": null,
                "results": [
                    {
                        "url": "http://127.0.0.1:8000/rest-api/section-template/1/",
                        "order": 1,
                        "type": 1,
                        "question": "this is test question",
                        "script": "this is test question",
                        "audiofile": null,
                        "retries": null,
                        "timeout": 5,
                        "key_0": null,
                        "key_1": null,
                        "key_2": null,
                        "key_3": null,
                        "key_4": null,
                        "key_5": null,
                        "key_6": null,
                        "key_7": null,
                        "key_8": null,
                        "key_9": null,
                        "rating_laps": 9,
                        "validate_number": true,
                        "number_digits": 2,
                        "min_number": 0,
                        "max_number": 99,
                        "phonenumber": null,
                        "conference": null,
                        "completed": false,
                        "queue": null,
                        "created_date": "2013-06-13T12:42:28.457",
                        "updated_date": "2013-06-13T12:42:28.511",
                        "survey": "http://127.0.0.1:8000/rest-api/survey-template/1/",
                        "invalid_audiofile": null
                    }
                ]
            }

    **Update**:

        CURL Usage::

            curl -u username:password --dump-header - -H "Content-Type: application/json" -X PATCH --data '{"type": "1", "question": "survey que", "survey": "/rest-api/survey-template/1/", "invalid_audiofile": "/rest-api/audio-files/1/"}' http://localhost:8000/rest-api/section-template/%section-template-id%/

        Response::

            HTTP/1.0 202 NO CONTENT
            Date: Fri, 23 Sep 2011 06:46:12 GMT
            Server: WSGIServer/0.1 Python/2.7.1+
            Vary: Accept-Language, Cookie
            Content-Length: 0
            Content-Type: text/html; charset=utf-8
            Content-Language: en-us
    """

    class Meta:
        model = Section_template

########NEW FILE########
__FILENAME__ = sms_campaign_serializers
# -*- coding: utf-8 -*-

#
# Newfies-Dialer License
# http://www.newfies-dialer.org
#
# This Source Code Form is subject to the terms of the Mozilla Public
# License, v. 2.0. If a copy of the MPL was not distributed with this file,
# You can obtain one at http://mozilla.org/MPL/2.0/.
#
# Copyright (C) 2011-2014 Star2Billing S.L.
#
# The Initial Developer of the Original Code is
# Arezqui Belaid <info@star2billing.com>
#
from rest_framework import serializers
from dialer_campaign.function_def import user_dialer_setting, dialer_setting_limit
from mod_sms.models import SMSCampaign
from mod_sms.function_def import check_sms_dialer_setting
from dialer_contact.models import Phonebook
from sms.models import Gateway as SMSGateway


class SMSCampaignSerializer(serializers.HyperlinkedModelSerializer):
    """
    **Create**:

        CURL Usage::

            curl -u username:password --dump-header - -H "Content-Type:application/json" -X POST --data '{"name": "sms", "description": "", "callerid": "1239876", "startingdate": "2013-06-13 13:13:33", "expirationdate": "2013-06-14 13:13:33", "frequency": "20", "maxretry": "3", "sms_gateway": "/rest-api/sms-gateway/1/", "phonebook_id": "1"}' http://localhost:8000/rest-api/sms-campaigns/

        Response::

            HTTP/1.0 201 CREATED
            Date: Fri, 14 Jun 2013 09:52:27 GMT
            Server: WSGIServer/0.1 Python/2.7.3
            Vary: Accept, Accept-Language, Cookie
            Content-Type: application/json; charset=utf-8
            Content-Language: en-us
            Allow: GET, POST, HEAD, OPTIONS

            {"id": 1, "sms_campaign_code": "JDQBG", "name": "mysmscampaign1", "description": "", "callerid": "1239876", "phonebook": ["/rest-api/phonebook/1/", "/rest-api/phonebook/2/"], "startingdate": "2013-06-13T13:13:33", "expirationdate": "2013-06-14T13:13:33", "sms_gateway": "http://localhost:8000/rest-api/sms-gateway/1/", "user": "http://localhost:8000/rest-api/users/1/", "status": 2, "frequency": 20, "daily_start_time": "00:00:00", "daily_stop_time": "23:59:59", "monday": true, "tuesday": true, "wednesday": true, "thursday": true, "friday": true, "saturday": true, "sunday": true}


    **Read**:

        CURL Usage::

            curl -u username:password -H 'Accept: application/json' http://localhost:8000/rest-api/sms-campaigns/

            curl -u username:password -H 'Accept: application/json' http://localhost:8000/rest-api/sms-campaigns/%sms-campaign-id%/

        Response::

            {
                "count": 1,
                "next": null,
                "previous": null,
                "results": [
                    {
                        "id": 2,
                        "sms_campaign_code": "BXTWX",
                        "name": "Sample SMS campaign",
                        "description": "",
                        "callerid": "",
                        "phonebook": [
                            "http://127.0.0.1:8000/rest-api/phonebook/1/"
                        ],
                        "startingdate": "2011-12-27T14:35:46",
                        "expirationdate": "2011-12-28T14:35:46",
                        "sms_gateway": "http://127.0.0.1:8000/rest-api/sms-gateway/1/",
                        "user": "http://127.0.0.1:8000/rest-api/users/1/",
                        "status": 2,
                        "frequency": 10,
                        "callmaxduration": 1800,
                        "maxretry": 0,
                        "daily_start_time": "00:00:00",
                        "daily_stop_time": "23:59:59",
                        "monday": true,
                        "tuesday": true,
                        "wednesday": true,
                        "thursday": true,
                        "friday": true,
                        "saturday": true,
                        "sunday": true,
                    }
                ]
            }


    **Update**:

        CURL Usage::

            curl -u username:password --dump-header - -H "Content-Type: application/json" -X PATCH --data '{"name": "mylittlesmscampaign243"}' http://localhost:8000/rest-api/sms-campaigns/%sms-campaign-id%/

        Response::

            HTTP/1.0 202 NO CONTENT
            Date: Fri, 23 Sep 2011 06:46:12 GMT
            Server: WSGIServer/0.1 Python/2.7.1+
            Vary: Accept-Language, Cookie
            Content-Length: 0
            Content-Type: text/html; charset=utf-8
            Content-Language: en-us

    **Delete**:

        CURL Usage::

            curl -u username:password --dump-header - -H "Content-Type: application/json" -X DELETE  http://localhost:8000/rest-api/sms-campaigns/%sms-campaign_id%/

        Response::

            {
                "data": "sms campaign deleted"
            }
    """
    user = serializers.Field(source='user')
    sms_gateway = serializers.HyperlinkedRelatedField(
        read_only=False, view_name='sms-gateway-detail')

    class Meta:
        model = SMSCampaign

    def get_fields(self, *args, **kwargs):
        """filter content_type field"""
        fields = super(SMSCampaignSerializer, self).get_fields(*args, **kwargs)
        request = self.context['request']

        if request.method != 'GET' and self.init_data is not None:
            phonebook = self.init_data.get('phonebook')
            if phonebook and phonebook.find('http://') == -1:
                try:
                    phonebook_id_list = phonebook.split(",")
                    m2m_phonebook = []
                    for i in phonebook_id_list:
                        try:
                            Phonebook.objects.get(pk=int(i), user=request.user)
                            m2m_phonebook.append('/rest-api/phonebook/%s/' % i)
                        except:
                            pass

                    if m2m_phonebook:
                        self.init_data['phonebook'] = m2m_phonebook
                    else:
                        self.init_data['phonebook'] = ''
                except:
                    self.init_data['phonebook'] = ''

            fields['sms_gateway'].queryset = SMSGateway.objects.all()
            fields['phonebook'].queryset = Phonebook.objects.filter(user=request.user)

        return fields

    def validate(self, attrs):
        """
        Validate sms campaign form
        """
        request = self.context['request']

        if request.method == 'POST':
            name_count = SMSCampaign.objects.filter(name=attrs.get('name'),
                user=request.user).count()
            if name_count != 0:
                raise serializers.ValidationError("The SMS Campaign name duplicated!")

        if not user_dialer_setting(request.user):
            raise serializers.ValidationError("Your settings are not configured properly, Please contact the administrator.")

        if check_sms_dialer_setting(request, check_for="smscampaign"):
            raise serializers.ValidationError("Too many sms campaigns. Max allowed %s"
                    % dialer_setting_limit(request, limit_for="smscampaign"))

        frequency = attrs.get('frequency')
        if frequency:
            if check_sms_dialer_setting(request, check_for="smsfrequency", field_value=int(frequency)):
                raise serializers.ValidationError("Frequency limit of %s exceeded."
                    % dialer_setting_limit(request, limit_for="smsfrequency"))

        maxretry = attrs.get('maxretry')
        if maxretry:
            if check_sms_dialer_setting(request, check_for="smsretry", field_value=int(maxretry)):
                raise serializers.ValidationError("Retries limit of %s exceeded."
                    % dialer_setting_limit(request, limit_for="smsretry"))

        return attrs

########NEW FILE########
__FILENAME__ = sms_gateway_serializers
# -*- coding: utf-8 -*-

#
# Newfies-Dialer License
# http://www.newfies-dialer.org
#
# This Source Code Form is subject to the terms of the Mozilla Public
# License, v. 2.0. If a copy of the MPL was not distributed with this file,
# You can obtain one at http://mozilla.org/MPL/2.0/.
#
# Copyright (C) 2011-2014 Star2Billing S.L.
#
# The Initial Developer of the Original Code is
# Arezqui Belaid <info@star2billing.com>
#
from rest_framework import serializers
from sms.models import Gateway as SMSGateway


class SMSGatewaySerializer(serializers.HyperlinkedModelSerializer):
    """
    **Create**:

        CURL Usage::

            curl -u username:password --dump-header - -H "Content-Type:application/json" -X POST --data '{"name": "My_Gateway", "description": "", "addprefix": "", "removeprefix": "", "gateways": "user/,user", "gateway_codecs": "PCMA,PCMU", "gateway_timeouts": "10,10", "gateway_retries": "2,1"}' http://localhost:8000/rest-api/gateway/

        Response::

            HTTP/1.0 201 CREATED
            Date: Fri, 14 Jun 2013 09:52:27 GMT
            Server: WSGIServer/0.1 Python/2.7.3
            Vary: Accept, Accept-Language, Cookie
            Content-Type: application/json; charset=utf-8
            Content-Language: en-us
            Allow: GET, POST, HEAD, OPTIONS

    **Read**:

        CURL Usage::

            curl -u username:password -H 'Accept: application/json' http://localhost:8000/rest-api/gateway/

            curl -u username:password -H 'Accept: application/json' http://localhost:8000/rest-api/gateway/%gateway-id%/

        Response::

            {
                "count": 1,
                "next": null,
                "previous": null,
                "results": [
                    {
                        "url": "http://127.0.0.1:8000/rest-api/gateway/1/",
                        "name": "Default_Gateway",
                        "status": 1,
                        "description": "",
                        "addprefix": "",
                        "removeprefix": "",
                        "gateways": "user/,user",
                        "gateway_codecs": "PCMA,PCMU",
                        "gateway_timeouts": "10,10",
                        "gateway_retries": "2,1",
                        "originate_dial_string": "",
                        "secondused": null,
                        "created_date": "2011-06-15T00:28:52",
                        "updated_date": "2013-06-14T17:54:24.130",
                        "failover": null,
                        "addparameter": "",
                        "count_call": 1,
                        "count_in_use": null,
                        "maximum_call": null
                    }
                ]
            }
    """
    _default_view_name = '%(app_label)s-%(model_name)s-detail'

    class Meta:
        model = SMSGateway

########NEW FILE########
__FILENAME__ = sms_template_serializers
# -*- coding: utf-8 -*-

#
# Newfies-Dialer License
# http://www.newfies-dialer.org
#
# This Source Code Form is subject to the terms of the Mozilla Public
# License, v. 2.0. If a copy of the MPL was not distributed with this file,
# You can obtain one at http://mozilla.org/MPL/2.0/.
#
# Copyright (C) 2011-2014 Star2Billing S.L.
#
# The Initial Developer of the Original Code is
# Arezqui Belaid <info@star2billing.com>
#
from rest_framework import serializers
from mod_sms.models import SMSTemplate


class SMSTemplateSerializer(serializers.HyperlinkedModelSerializer):
    """
    **Read**:

        CURL Usage::

            curl -u username:password -H 'Accept: application/json' http://localhost:8000/rest-api/sms-template/

        Response::

            {
                "count": 1,
                "next": null,
                "previous": null,
                "results": [
                    {
                        "url": "http://127.0.0.1:8000/rest-api/sms-template/1/",
                        "label": "sms_test",
                        "template_key": "sms_test",
                        "sender_phonenumber": "9427164510",
                        "sms_text": "hello test",
                        "created_date": "2013-12-16T06:43:29.475Z"
                    }
                ]
            }
    """
    class Meta:
        model = SMSTemplate

########NEW FILE########
__FILENAME__ = subscriber_list_serializers
# -*- coding: utf-8 -*-
#
# Newfies-Dialer License
# http://www.newfies-dialer.org
#
# This Source Code Form is subject to the terms of the Mozilla Public
# License, v. 2.0. If a copy of the MPL was not distributed with this file,
# You can obtain one at http://mozilla.org/MPL/2.0/.
#
# Copyright (C) 2011-2014 Star2Billing S.L.
#
# The Initial Developer of the Original Code is
# Arezqui Belaid <info@star2billing.com>
#
from rest_framework import serializers
from dialer_campaign.models import Subscriber


class SubscriberListSerializer(serializers.HyperlinkedModelSerializer):
    """
    **Read**:

        CURL Usage::

            curl -u username:password -H 'Accept: application/json' http://localhost:8000/rest-api/subscriber-list/

        Response::

            [
                {
                    "id": 1,
                    "contact": "/rest-api/contact/11/",
                    "campaign": "/rest-api/campaigns/3/",
                    "last_attempt": null,
                    "count_attempt": 0,
                    "completion_count_attempt": 0,
                    "duplicate_contact": "34235464",
                    "status": 1
                },
                {
                    "id": 2,
                    "contact": "/rest-api/contact/12/",
                    "campaign": "/rest-api/campaigns/3/",
                    "last_attempt": null,
                    "count_attempt": 0,
                    "completion_count_attempt": 0,
                    "duplicate_contact": "34235464",
                    "status": 1
                }
            ]
    """
    class Meta:
        model = Subscriber
        fields = (
            'url', 'contact', 'campaign', 'last_attempt', 'count_attempt',
            'completion_count_attempt', 'status', 'created_date', 'updated_date',
        )

########NEW FILE########
__FILENAME__ = survey_serializers
# -*- coding: utf-8 -*-
# -*- coding: utf-8 -*-
#
# Newfies-Dialer License
# http://www.newfies-dialer.org
#
# This Source Code Form is subject to the terms of the Mozilla Public
# License, v. 2.0. If a copy of the MPL was not distributed with this file,
# You can obtain one at http://mozilla.org/MPL/2.0/.
#
# Copyright (C) 2011-2014 Star2Billing S.L.
#
# The Initial Developer of the Original Code is
# Arezqui Belaid <info@star2billing.com>
#
from rest_framework import serializers
from survey.models import Survey


class SurveySerializer(serializers.HyperlinkedModelSerializer):
    """
    **Read**:

        CURL Usage::

            curl -u username:password -H 'Accept: application/json' http://localhost:8000/rest-api/sealed-survey/

                or

            curl -u username:password -H 'Accept: application/json' http://localhost:8000/rest-api/sealed-survey/%sealed_survey_id%/

        Response::

            {
                "count": 1,
                "next": null,
                "previous": null,
                "results": [
                    {
                        "url": "http://127.0.0.1:8000/rest-api/sealed-survey/1/",
                        "name": "Sample survey campaign",
                        "tts_language": "en",
                        "description": "ok",
                        "created_date": "2013-06-13T12:42:18.148",
                        "updated_date": "2013-06-13T12:42:31.527",
                        "user": "http://127.0.0.1:8000/rest-api/users/1/"
                    }
                ]
            }
    """

    class Meta:
        model = Survey

########NEW FILE########
__FILENAME__ = survey_template_serializers
# -*- coding: utf-8 -*-
# -*- coding: utf-8 -*-
#
# Newfies-Dialer License
# http://www.newfies-dialer.org
#
# This Source Code Form is subject to the terms of the Mozilla Public
# License, v. 2.0. If a copy of the MPL was not distributed with this file,
# You can obtain one at http://mozilla.org/MPL/2.0/.
#
# Copyright (C) 2011-2014 Star2Billing S.L.
#
# The Initial Developer of the Original Code is
# Arezqui Belaid <info@star2billing.com>
#
from rest_framework import serializers
from survey.models import Survey_template


class SurveyTemplateSerializer(serializers.HyperlinkedModelSerializer):
    """
    **Create**:

        CURL Usage::

            curl -u username:password --dump-header - -H "Content-Type:application/json" -X POST --data '{"name": "survey name"}' http://localhost:8000/rest-api/survey-template/

        Response::

            HTTP/1.0 201 CREATED
            Date: Fri, 14 Jun 2013 09:52:27 GMT
            Server: WSGIServer/0.1 Python/2.7.3
            Vary: Accept, Accept-Language, Cookie
            Content-Type: application/json; charset=utf-8
            Content-Language: en-us
            Location: http://localhost:8000/rest-api/survey-template/1/
            Allow: GET, POST, HEAD, OPTIONS

    **Read**:

        CURL Usage::

            curl -u username:password -H 'Accept: application/json' http://localhost:8000/rest-api/survey-template/

                or

            curl -u username:password -H 'Accept: application/json' http://localhost:8000/rest-api/survey-template/%survey-template-id%/

        Response::

            {
                "count": 1,
                "next": null,
                "previous": null,
                "results": [
                    {
                        "url": "http://127.0.0.1:8000/rest-api/survey-template/1/",
                        "name": "Sample survey campaign",
                        "tts_language": "en",
                        "description": "ok",
                        "created_date": "2013-06-13T12:42:18.148",
                        "updated_date": "2013-06-13T12:42:31.527",
                        "user": "http://127.0.0.1:8000/rest-api/users/1/"
                    }
                ]
            }

    **Update**:

        CURL Usage::

            curl -u username:password --dump-header - -H "Content-Type: application/json" -X PATCH --data '{"name": "sample survey"}' http://localhost:8000/rest-api/survey-template/%survey-template-id%/

        Response::

            HTTP/1.0 202 NO CONTENT
            Date: Fri, 23 Sep 2011 06:46:12 GMT
            Server: WSGIServer/0.1 Python/2.7.1+
            Vary: Accept-Language, Cookie
            Content-Length: 0
            Content-Type: text/html; charset=utf-8
            Content-Language: en-us
    """
    user = serializers.Field(source='user')

    class Meta:
        model = Survey_template

########NEW FILE########
__FILENAME__ = tier_serializers
# -*- coding: utf-8 -*-

#
# Newfies-Dialer License
# http://www.newfies-dialer.org
#
# This Source Code Form is subject to the terms of the Mozilla Public
# License, v. 2.0. If a copy of the MPL was not distributed with this file,
# You can obtain one at http://mozilla.org/MPL/2.0/.
#
# Copyright (C) 2011-2014 Star2Billing S.L.
#
# The Initial Developer of the Original Code is
# Arezqui Belaid <info@star2billing.com>
#
from rest_framework import serializers
from callcenter.models import Queue, Tier
from agent.models import AgentProfile


class TierSerializer(serializers.HyperlinkedModelSerializer):
    """
    **Create**:

        CURL Usage::

            curl -u username:password --dump-header - -H "Content-Type:application/json" -X POST --data '{"level": "2", "position": "1"}' http://localhost:8000/rest-api/tier/

        Response::

            HTTP/1.0 201 CREATED
            Date: Fri, 14 Jun 2013 09:52:27 GMT
            Server: WSGIServer/0.1 Python/2.7.3
            Vary: Accept, Accept-Language, Cookie
            Content-Type: application/json; charset=utf-8
            Content-Language: en-us
            Location: http://localhost:8000/rest-api/tier/1/
            Allow: GET, POST, HEAD, OPTIONS

    **Read**:

        CURL Usage::

            curl -u username:password -H 'Accept: application/json' http://localhost:8000/rest-api/tier/

        Response::

            {
                "count": 1,
                "next": null,
                "previous": null,
                "results": [
                    {
                        "manager": "manager",
                        "agent": "agent",
                        "queue": "Sample queue",
                        "url": "http://127.0.0.1:8000/rest-api/tier/1/",
                        "level": 1,
                        "position": 1,
                        "created_date": "2013-10-23T13:09:43.311Z",
                        "updated_date": "2013-10-23T13:09:43.311Z"
                    }
                ]
            }

    **Update**:

        CURL Usage::

            curl -u username:password --dump-header - -H "Content-Type: application/json" -X PUT --data '{"level": "2"}' http://localhost:8000/rest-api/tier/%dtier-id%/

        Response::

            HTTP/1.0 202 NO CONTENT
            Date: Fri, 23 Sep 2011 06:46:12 GMT
            Server: WSGIServer/0.1 Python/2.7.1+
            Vary: Accept-Language, Cookie
            Content-Length: 0
            Content-Type: text/html; charset=utf-8
            Content-Language: en-us
    """
    manager = serializers.Field(source='manager')
    #agent = serializers.Field(source='agent')

    class Meta:
        model = Tier

    def get_fields(self, *args, **kwargs):
        """filter field"""
        fields = super(TierSerializer, self).get_fields(*args, **kwargs)
        request = self.context['request']

        fields['agent'].queryset = AgentProfile.objects.filter(manager=request.user)
        fields['queue'].queryset = Queue.objects.filter(manager=request.user)

        return fields

########NEW FILE########
__FILENAME__ = urls
# -*- coding: utf-8 -*-

#
# Newfies-Dialer License
# http://www.newfies-dialer.org
#
# This Source Code Form is subject to the terms of the Mozilla Public
# License, v. 2.0. If a copy of the MPL was not distributed with this file,
# You can obtain one at http://mozilla.org/MPL/2.0/.
#
# Copyright (C) 2011-2014 Star2Billing S.L.
#
# The Initial Developer of the Original Code is
# Arezqui Belaid <info@star2billing.com>
#
from django.conf.urls import patterns, url, include
from rest_framework import routers

from apirest.view_contenttype import ContentTypeViewSet
from apirest.view_user import UserViewSet
from apirest.view_audiofile import AudioFileViewSet
from apirest.view_dnc import DNCViewSet
from apirest.view_dnc_contact import DNCContactViewSet
from apirest.view_gateway import GatewayViewSet
from apirest.view_sms_gateway import SMSGatewayViewSet
from apirest.view_phonebook import PhonebookViewSet
from apirest.view_contact import ContactViewSet
from apirest.view_campaign import CampaignViewSet
from apirest.view_subscriber import SubscriberViewSet
from apirest.view_subscriber_list import SubscriberListViewSet
from apirest.view_bulk_contact import BulkContactViewSet
from apirest.view_callrequest import CallrequestViewSet
from apirest.view_survey_template import SurveyTemplateViewSet
from apirest.view_survey import SurveyViewSet
from apirest.view_section_template import SectionTemplateViewSet
from apirest.view_branching_template import BranchingTemplateViewSet
from apirest.view_survey_aggregate_result import SurveyAggregateResultViewSet
from apirest.view_subscriber_per_campaign import SubscriberPerCampaignList
#from apirest.view_queue import QueueViewSet
#from apirest.view_tier import TierViewSet
from apirest.view_calendar import CalendarViewSet
from apirest.view_calendar_setting import CalendarSettingViewSet
from apirest.view_calendar_user import CalendarUserViewSet
from apirest.view_calendar_user_profile import CalendarUserProfileViewSet
from apirest.view_rule import RuleViewSet
from apirest.view_event import EventViewSet
from apirest.view_alarm import AlarmViewSet
from apirest.view_alarm_request import AlarmRequestViewSet
from apirest.view_sms_campaign import SMSCampaignViewSet
from apirest.view_mail_template import MailTemplateViewSet
from apirest.view_sms_template import SMSTemplateViewSet

#from agent.api_views import AgentViewSet
#from apirest.view_agent_profile import AgentProfileViewSet

router = routers.DefaultRouter()
router.register(r'users', UserViewSet)
router.register(r'campaigns', CampaignViewSet)
router.register(r'sms-campaigns', SMSCampaignViewSet)
router.register(r'audio-files', AudioFileViewSet)
router.register(r'dnc-list', DNCViewSet)
router.register(r'dnc-contact', DNCContactViewSet)
router.register(r'gateway', GatewayViewSet)
router.register(r'sms-gateway', SMSGatewayViewSet, 'sms-gateway')
router.register(r'content-type', ContentTypeViewSet)
router.register(r'phonebook', PhonebookViewSet)
router.register(r'contact', ContactViewSet)
router.register(r'subscriber-list', SubscriberListViewSet)
router.register(r'callrequest', CallrequestViewSet)
router.register(r'survey-template', SurveyTemplateViewSet)
router.register(r'sealed-survey', SurveyViewSet)
router.register(r'section-template', SectionTemplateViewSet)
router.register(r'branching-template', BranchingTemplateViewSet)
#router.register(r'queue', QueueViewSet)
#router.register(r'tier', TierViewSet)
router.register(r'calendar', CalendarViewSet)
router.register(r'calendar-setting', CalendarSettingViewSet)
router.register(r'calendar-user', CalendarUserViewSet)
router.register(r'calendar-user-profile', CalendarUserProfileViewSet)
router.register(r'rule', RuleViewSet)
router.register(r'event', EventViewSet)
router.register(r'alarm', AlarmViewSet)
router.register(r'alarm-request', AlarmRequestViewSet)
router.register(r'mail-template', MailTemplateViewSet)
router.register(r'sms-template', SMSTemplateViewSet)

#router.register(r'agents', AgentViewSet)
#router.register(r'agent-profile', AgentProfileViewSet)

# Wire up our API using automatic URL routing.
# Additionally, we include login URLs for the browseable API.
urlpatterns = patterns('',
    url(r'^rest-api/subcampaign/$', SubscriberPerCampaignList.as_view(), name="subscriber_campaign"),
    url(r'^rest-api/subcampaign/(?P<campaign_id>[0-9]+)/$', SubscriberPerCampaignList.as_view(), name="subscriber_campaign"),
    url(r'^rest-api/subcampaign/(?P<campaign_id>[0-9]+)/(?P<contact_id>[0-9]+)/$', SubscriberPerCampaignList.as_view(), name="subscriber_campaign"),

    url(r'^rest-api/surveyaggregate/$', SurveyAggregateResultViewSet.as_view(), name="survey_aggregate_result"),
    url(r'^rest-api/surveyaggregate/(?P<survey_id>[0-9]+)/$', SurveyAggregateResultViewSet.as_view(), name="survey_aggregate_result"),

    url(r'^rest-api/bulkcontact/$', BulkContactViewSet.as_view(), name="bulk_contact"),

    # subscriber rest api
    url(r'^rest-api/subscriber/$', SubscriberViewSet.as_view(), name="subscriber_contact"),

    url(r'^rest-api/', include(router.urls)),
    url(r'^api-auth/', include('rest_framework.urls', namespace='rest_framework')),
)

########NEW FILE########
__FILENAME__ = user_serializers
# -*- coding: utf-8 -*-

#
# Newfies-Dialer License
# http://www.newfies-dialer.org
#
# This Source Code Form is subject to the terms of the Mozilla Public
# License, v. 2.0. If a copy of the MPL was not distributed with this file,
# You can obtain one at http://mozilla.org/MPL/2.0/.
#
# Copyright (C) 2011-2014 Star2Billing S.L.
#
# The Initial Developer of the Original Code is
# Arezqui Belaid <info@star2billing.com>
#
from django.contrib.auth.models import User
from rest_framework import serializers


class UserSerializer(serializers.HyperlinkedModelSerializer):
    """
    **Read**:

        CURL Usage::

            curl -u username:password -H 'Accept: application/json' http://localhost:8000/rest-api/users/

        Response::

            {
                "count": 3,
                "next": null,
                "previous": null,
                "results": [
                    {
                        "url": "http://127.0.0.1:8000/rest-api/users/3/",
                        "username": "agent",
                        "last_name": "",
                        "first_name": "",
                        "email": "",
                        "groups": []
                    },
                    {
                        "url": "http://127.0.0.1:8000/rest-api/users/2/",
                        "username": "manager",
                        "last_name": "",
                        "first_name": "",
                        "email": "",
                        "groups": []
                    },
                    {
                        "url": "http://127.0.0.1:8000/rest-api/users/1/",
                        "username": "root",
                        "last_name": "",
                        "first_name": "",
                        "email": "root@gmail.com",
                        "groups": []
                    }
                ]
            }
    """

    class Meta:
        model = User
        fields = ('url', 'username', 'last_name', 'first_name', 'email', 'groups')

########NEW FILE########
__FILENAME__ = view_agent_profile
# -*- coding: utf-8 -*-
#
# Newfies-Dialer License
# http://www.newfies-dialer.org
#
# This Source Code Form is subject to the terms of the Mozilla Public
# License, v. 2.0. If a copy of the MPL was not distributed with this file,
# You can obtain one at http://mozilla.org/MPL/2.0/.
#
# Copyright (C) 2011-2014 Star2Billing S.L.
#
# The Initial Developer of the Original Code is
# Arezqui Belaid <info@star2billing.com>
#
from rest_framework import viewsets
from rest_framework.permissions import IsAuthenticated
from rest_framework.authentication import BasicAuthentication, SessionAuthentication
from apirest.agent_profile_serializers import AgentProfileSerializer
from agent.models import AgentProfile
from user_profile.models import Manager
from permissions import CustomObjectPermissions


class AgentProfileViewSet(viewsets.ModelViewSet):
    """
    API endpoint that allows agent profile user to be viewed or edited.
    """
    model = AgentProfile
    queryset = AgentProfile.objects.filter(is_agent=True)
    serializer_class = AgentProfileSerializer
    authentication = (BasicAuthentication, SessionAuthentication)
    permission_classes = (IsAuthenticated, CustomObjectPermissions)

    def get_queryset(self):
        """
        This view should return a list of all the phonebooks
        for the currently authenticated user.
        """
        if self.request.user.is_superuser:
            queryset = AgentProfile.objects.all()
        else:
            queryset = AgentProfile.objects.filter(manager=self.request.user)
        return queryset

    def pre_save(self, obj):
        obj.manager = Manager.objects.get(username=self.request.user)

########NEW FILE########
__FILENAME__ = view_alarm
# -*- coding: utf-8 -*-
#
# Newfies-Dialer License
# http://www.newfies-dialer.org
#
# This Source Code Form is subject to the terms of the Mozilla Public
# License, v. 2.0. If a copy of the MPL was not distributed with this file,
# You can obtain one at http://mozilla.org/MPL/2.0/.
#
# Copyright (C) 2011-2014 Star2Billing S.L.
#
# The Initial Developer of the Original Code is
# Arezqui Belaid <info@star2billing.com>
#
from rest_framework import viewsets
from apirest.alarm_serializers import AlarmSerializer
from rest_framework.permissions import IsAuthenticated
from rest_framework.authentication import BasicAuthentication, SessionAuthentication
from appointment.models.alarms import Alarm
from appointment.function_def import get_calendar_user_id_list
from permissions import CustomObjectPermissions


class AlarmViewSet(viewsets.ModelViewSet):
    """
    API endpoint that allows alarm to be viewed or edited.
    """
    model = Alarm
    queryset = Alarm.objects.all()
    serializer_class = AlarmSerializer
    authentication = (BasicAuthentication, SessionAuthentication)
    permission_classes = (IsAuthenticated, CustomObjectPermissions)

    def get_queryset(self):
        """
        This view should return a list of all the alarms
        for the currently authenticated user.
        """
        if self.request.user.is_superuser:
            queryset = Alarm.objects.all()
        else:
            calendar_user_list = get_calendar_user_id_list(self.request.user)
            queryset = Alarm.objects.filter(event__creator_id__in=calendar_user_list)
        return queryset

########NEW FILE########
__FILENAME__ = view_alarm_request
# -*- coding: utf-8 -*-
#
# Newfies-Dialer License
# http://www.newfies-dialer.org
#
# This Source Code Form is subject to the terms of the Mozilla Public
# License, v. 2.0. If a copy of the MPL was not distributed with this file,
# You can obtain one at http://mozilla.org/MPL/2.0/.
#
# Copyright (C) 2011-2014 Star2Billing S.L.
#
# The Initial Developer of the Original Code is
# Arezqui Belaid <info@star2billing.com>
#
from rest_framework import viewsets
from rest_framework.decorators import action
from rest_framework.response import Response
from rest_framework.permissions import IsAuthenticated
from rest_framework.authentication import BasicAuthentication, SessionAuthentication
from apirest.alarm_request_serializers import AlarmRequestSerializer
from appointment.models.alarms import Alarm, AlarmRequest
from appointment.models.events import Event
from appointment.function_def import get_calendar_user_id_list
from permissions import CustomObjectPermissions


class AlarmRequestViewSet(viewsets.ModelViewSet):
    """
    API endpoint that allows alarm request to be viewed or edited.
    """
    model = AlarmRequest
    queryset = AlarmRequest.objects.all()
    serializer_class = AlarmRequestSerializer
    authentication = (BasicAuthentication, SessionAuthentication)
    permission_classes = (IsAuthenticated, CustomObjectPermissions)

    def get_queryset(self):
        """
        This view should return a list of all the alarms
        for the currently authenticated user.
        """
        if self.request.user.is_superuser:
            queryset = AlarmRequest.objects.all()
        else:
            calendar_user_list = get_calendar_user_id_list(self.request.user)
            queryset = AlarmRequest.objects.filter(
                alarm__event__creator_id__in=calendar_user_list)
        return queryset

    @action(methods=['GET'])
    def get_nested_alarm_request(self, request, pk=None):
        """it will get all nested alarm request"""
        #alarm_request = self.get_object()

        if self.request.user.is_superuser:
            try:
                event = Event.objects.get(pk=pk)
            except:
                final_data = {"error": "event id is not valid"}
                return Response(final_data)
        else:
            try:
                calendar_user_list = get_calendar_user_id_list(self.request.user)
                event = Event.objects.get(pk=pk, creator_id__in=calendar_user_list)
            except:
                final_data = {"error": "event id is not valid"}
                return Response(final_data)

        event_url = 'http://%s/rest-api/event/%s/' % (self.request.META['HTTP_HOST'], str(event.id))
        final_data = {}
        final_data["event-url"] = event_url
        final_data["event-%s" % str(event.id)] = {}
        alarm_list = Alarm.objects.filter(event__parent_event=event).order_by('id')
        for alarm in alarm_list:
            alarm_url = 'http://%s/rest-api/alarm/%s/' % (self.request.META['HTTP_HOST'], str(alarm.id))
            final_data["event-%s" % str(event.id)]["alarm-%s" % str(alarm.id)] = {
                'url': alarm_url
            }

            alarm_requests = AlarmRequest.objects.filter(alarm=alarm).order_by('id')
            for alarm_request in alarm_requests:
                alarm_request_url = 'http://%s/rest-api/alarm-request/%s/' % (self.request.META['HTTP_HOST'], str(alarm_request.id))
                callrequest_url = 'http://%s/rest-api/callrequest/%s/' % (self.request.META['HTTP_HOST'], str(alarm_request.callrequest_id))
                final_data["event-%s" % str(event.id)]["alarm-%s" % str(alarm.id)]['alarm-request-%s' % str(alarm_request.id)] = {
                    "url": alarm_request_url,
                    "alarm-callrequest": callrequest_url,
                    "date": str(alarm_request.date),
                    "status": str(alarm_request.status),
                    "callstatus": str(alarm_request.callstatus),
                    "duration": str(alarm_request.duration),
                }

        return Response(final_data)

########NEW FILE########
__FILENAME__ = view_audiofile
# -*- coding: utf-8 -*-
#
# Newfies-Dialer License
# http://www.newfies-dialer.org
#
# This Source Code Form is subject to the terms of the Mozilla Public
# License, v. 2.0. If a copy of the MPL was not distributed with this file,
# You can obtain one at http://mozilla.org/MPL/2.0/.
#
# Copyright (C) 2011-2014 Star2Billing S.L.
#
# The Initial Developer of the Original Code is
# Arezqui Belaid <info@star2billing.com>
#
from django.conf import settings
from django.shortcuts import get_object_or_404
from rest_framework import viewsets
from rest_framework.response import Response
from apirest.audiofile_serializers import AudioFileSerializer
from rest_framework.permissions import IsAuthenticated
from rest_framework.authentication import BasicAuthentication, SessionAuthentication
from dialer_audio.forms import DialerAudioFileForm
from audiofield.models import AudioFile
from permissions import CustomObjectPermissions


class AudioFileViewSet(viewsets.ModelViewSet):
    """
    API endpoint that allows audio_files to be viewed or edited.
    """
    model = AudioFile
    queryset = AudioFile.objects.all()
    serializer_class = AudioFileSerializer
    authentication = (BasicAuthentication, SessionAuthentication)
    permission_classes = (IsAuthenticated, CustomObjectPermissions)

    def get_queryset(self):
        """
        This view should return a list of all the audio files
        for the currently authenticated user.
        """
        if self.request.user.is_superuser:
            queryset = AudioFile.objects.all()
        else:
            queryset = AudioFile.objects.filter(user=self.request.user)
        return queryset

    def create(self, request):
        """Customize create"""
        queryset = AudioFile.objects.all()
        request.DATA['convert_type'] = settings.CONVERT_TYPE_VALUE
        request.DATA['channel_type'] = settings.CHANNEL_TYPE_VALUE
        request.DATA['freq_type'] = settings.FREQ_TYPE_VALUE
        form = DialerAudioFileForm(request.DATA, request.FILES)
        if form.is_valid():
            obj = form.save(commit=False)
            obj.user = request.user
            obj.save()
            queryset = AudioFile.objects.filter(pk=obj.id)

        serializer = AudioFileSerializer(queryset, many=True)
        return Response(serializer.data)

    def update(self, request, *args, **kwargs):
        """Customize update"""
        pk = kwargs['pk']
        queryset = AudioFile.objects.filter(id=pk)
        obj = get_object_or_404(AudioFile, id=pk, user=request.user)

        request.DATA['convert_type'] = settings.CONVERT_TYPE_VALUE
        request.DATA['channel_type'] = settings.CHANNEL_TYPE_VALUE
        request.DATA['freq_type'] = settings.FREQ_TYPE_VALUE
        form = DialerAudioFileForm(request.DATA, request.FILES, instance=obj)
        if form.is_valid():
            form.save()
            queryset = AudioFile.objects.filter(id=pk)

        serializer = AudioFileSerializer(queryset, many=True)
        return Response(serializer.data)

########NEW FILE########
__FILENAME__ = view_branching_template
# -*- coding: utf-8 -*-
#
# Newfies-Dialer License
# http://www.newfies-dialer.org
#
# This Source Code Form is subject to the terms of the Mozilla Public
# License, v. 2.0. If a copy of the MPL was not distributed with this file,
# You can obtain one at http://mozilla.org/MPL/2.0/.
#
# Copyright (C) 2011-2014 Star2Billing S.L.
#
# The Initial Developer of the Original Code is
# Arezqui Belaid <info@star2billing.com>
#
from rest_framework import viewsets
from apirest.branching_template_serializers import BranchingTemplateSerializer
from rest_framework.permissions import IsAuthenticated
from rest_framework.authentication import BasicAuthentication, SessionAuthentication
from survey.models import Branching_template
from permissions import CustomObjectPermissions


class BranchingTemplateViewSet(viewsets.ModelViewSet):
    """
    API endpoint that allows content_type to be viewed or edited.
    """
    model = Branching_template
    queryset = Branching_template.objects.all()
    serializer_class = BranchingTemplateSerializer
    authentication = (BasicAuthentication, SessionAuthentication)
    permission_classes = (IsAuthenticated, CustomObjectPermissions)

    def get_queryset(self):
        """
        This view should return a list of all the branching
        for the currently authenticated user.
        """
        if self.request.user.is_superuser:
            queryset = Branching_template.objects.all()
        else:
            queryset = Branching_template.objects.filter(section__survey__user=self.request.user)
        return queryset

########NEW FILE########
__FILENAME__ = view_bulk_contact
# -*- coding: utf-8 -*-
#
# Newfies-Dialer License
# http://www.newfies-dialer.org
#
# This Source Code Form is subject to the terms of the Mozilla Public
# License, v. 2.0. If a copy of the MPL was not distributed with this file,
# You can obtain one at http://mozilla.org/MPL/2.0/.
#
# Copyright (C) 2011-2014 Star2Billing S.L.
#
# The Initial Developer of the Original Code is
# Arezqui Belaid <info@star2billing.com>
#
from rest_framework.views import APIView
from rest_framework.response import Response
from rest_framework.authentication import BasicAuthentication, SessionAuthentication
from dialer_contact.models import Phonebook, Contact
from dialer_campaign.function_def import dialer_setting_limit, check_dialer_setting


class BulkContactViewSet(APIView):
    """
    **Create**:

        CURL Usage::

            curl -u username:password --dump-header - -H "Content-Type:application/json" -X POST --data '{"phonebook_id": "1", "phoneno_list" : "12345,54344"}' http://localhost:8000/rest-api/bulkcontact/

        Response::
            HTTP/1.0 200 OK
            Date: Mon, 01 Jul 2013 13:14:10 GMT
            Server: WSGIServer/0.1 Python/2.7.3
            Vary: Accept, Accept-Language, Cookie
            Content-Type: application/json; charset=utf-8
            Content-Language: en-us
            Allow: POST, OPTIONS

            {"result": "Bulk contacts are created"}
    """
    authentication = (BasicAuthentication, SessionAuthentication)

    def post(self, request):
        """
        create contacts in bulk
        """
        error = {}
        if request.method == 'POST':
            if not request.DATA:
                error['error'] = 'Data set is empty'

            if check_dialer_setting(request, check_for="contact"):
                error['error'] = "You have too many contacts per campaign. You are allowed a maximum of %s" % \
                    dialer_setting_limit(request, limit_for="contact")

            phonebook_id = request.DATA.get('phonebook_id')
            if phonebook_id and phonebook_id != '':
                try:
                    Phonebook.objects.get(id=phonebook_id, user=request.user)
                except Phonebook.DoesNotExist:
                    error['error'] = 'Phonebook is not valid!'
            else:
                error['error'] = 'Phonebook is not selected!'

        if error:
            return Response(error)

        phoneno_list = request.DATA.get('phoneno_list')
        phonebook_id = request.DATA.get('phonebook_id')
        phonenolist = list(phoneno_list.split(","))

        obj_phonebook = Phonebook.objects.get(id=phonebook_id, user=request.user)
        new_contact_count = 0
        for phoneno in phonenolist:
            # check phoneno in Contact
            dup_count = Contact.objects.filter(contact=phoneno, phonebook__user=request.user).count()

            # If dup_count is zero, create new contact
            if dup_count == 0:
                new_contact = Contact.objects.create(
                    phonebook=obj_phonebook,
                    contact=phoneno,
                )
                new_contact_count = new_contact_count + 1
                new_contact.save()
            else:
                error_msg = "The contact duplicated (%s)!\n" % phoneno
                return Response({'error': error_msg})

        return Response({'result': 'Bulk contacts are created'})

########NEW FILE########
__FILENAME__ = view_calendar
# -*- coding: utf-8 -*-
#
# Newfies-Dialer License
# http://www.newfies-dialer.org
#
# This Source Code Form is subject to the terms of the Mozilla Public
# License, v. 2.0. If a copy of the MPL was not distributed with this file,
# You can obtain one at http://mozilla.org/MPL/2.0/.
#
# Copyright (C) 2011-2014 Star2Billing S.L.
#
# The Initial Developer of the Original Code is
# Arezqui Belaid <info@star2billing.com>
#
from rest_framework import viewsets
from apirest.calendar_serializers import CalendarSerializer
from rest_framework.permissions import IsAuthenticated
from rest_framework.authentication import BasicAuthentication, SessionAuthentication
from appointment.models.calendars import Calendar
from appointment.function_def import get_calendar_user_id_list
from permissions import CustomObjectPermissions


class CalendarViewSet(viewsets.ModelViewSet):
    """
    API endpoint that allows calendar to be viewed or edited.
    """
    model = Calendar
    queryset = Calendar.objects.all()
    serializer_class = CalendarSerializer
    authentication = (BasicAuthentication, SessionAuthentication)
    permission_classes = (IsAuthenticated, CustomObjectPermissions)

    def get_queryset(self):
        """
        This view should return a list of all the calendars
        for the currently authenticated user.
        """
        if self.request.user.is_superuser:
            queryset = Calendar.objects.all()
        else:
            calendar_user_list = get_calendar_user_id_list(self.request.user)
            queryset = Calendar.objects.filter(user_id__in=calendar_user_list)
        return queryset

########NEW FILE########
__FILENAME__ = view_calendar_setting
# -*- coding: utf-8 -*-
#
# Newfies-Dialer License
# http://www.newfies-dialer.org
#
# This Source Code Form is subject to the terms of the Mozilla Public
# License, v. 2.0. If a copy of the MPL was not distributed with this file,
# You can obtain one at http://mozilla.org/MPL/2.0/.
#
# Copyright (C) 2011-2014 Star2Billing S.L.
#
# The Initial Developer of the Original Code is
# Arezqui Belaid <info@star2billing.com>
#

from rest_framework import viewsets
from apirest.calendar_setting_serializers import CalendarSettingSerializer
from rest_framework.permissions import IsAuthenticated
from rest_framework.authentication import BasicAuthentication, SessionAuthentication
from appointment.models.users import CalendarSetting
from permissions import CustomObjectPermissions


class CalendarSettingViewSet(viewsets.ModelViewSet):
    """
    API endpoint that allows calendar setting to be viewed or edited.
    """
    model = CalendarSetting
    queryset = CalendarSetting.objects.all()
    serializer_class = CalendarSettingSerializer
    authentication = (BasicAuthentication, SessionAuthentication)
    permission_classes = (IsAuthenticated, CustomObjectPermissions)

    def get_queryset(self):
        """
        This view should return a list of all the calendar setting
        for the currently authenticated user.
        """
        if self.request.user.is_superuser:
            queryset = CalendarSetting.objects.all()
        else:
            queryset = CalendarSetting.objects.filter(user=self.request.user)
        return queryset

    def pre_save(self, obj):
        obj.user = self.request.user

########NEW FILE########
__FILENAME__ = view_calendar_user
# -*- coding: utf-8 -*-
#
# Newfies-Dialer License
# http://www.newfies-dialer.org
#
# This Source Code Form is subject to the terms of the Mozilla Public
# License, v. 2.0. If a copy of the MPL was not distributed with this file,
# You can obtain one at http://mozilla.org/MPL/2.0/.
#
# Copyright (C) 2011-2014 Star2Billing S.L.
#
# The Initial Developer of the Original Code is
# Arezqui Belaid <info@star2billing.com>
#
from rest_framework import viewsets
from rest_framework.response import Response
from rest_framework.permissions import IsAuthenticated
from rest_framework.authentication import BasicAuthentication, SessionAuthentication
from appointment.models.users import CalendarUser, CalendarUserProfile,\
    CalendarSetting
from appointment.models.calendars import Calendar
from appointment.function_def import get_calendar_user_id_list, \
    get_all_calendar_user_id_list
from apirest.calendar_user_serializers import CalendarUserSerializer
from user_profile.models import Manager
from permissions import CustomObjectPermissions
import ast


class CalendarUserViewSet(viewsets.ModelViewSet):
    """
    API endpoint that allows calendar user to be viewed or edited.
    """
    model = CalendarUser
    queryset = CalendarUser.objects.filter(is_staff=False, is_superuser=False)
    serializer_class = CalendarUserSerializer
    authentication = (BasicAuthentication, SessionAuthentication)
    permission_classes = (IsAuthenticated, CustomObjectPermissions)

    def list(self, request, *args, **kwargs):
        """get list of all CalendarUser objects"""
        if self.request.user.is_superuser:
            calendar_user_list = get_all_calendar_user_id_list()
        else:
            calendar_user_list = get_calendar_user_id_list(request.user)

        snippets = CalendarUser.objects.filter(id__in=calendar_user_list).order_by('id')
        list_data = []

        for c_user in snippets:
            try:
                calendar_obj = Calendar.objects.get(user=c_user)
                calendar_dict = {
                    'name': calendar_obj.name,
                    'max_concurrent': calendar_obj.max_concurrent,
                }
            except:
                calendar_dict = {}

            user_url = 'http://%s/rest-api/calendar-user/%s/' % (self.request.META['HTTP_HOST'], str(c_user.id))
            data = {
                'url': user_url,
                'id': c_user.id,
                'username': c_user.username,
                'password': c_user.password,
                'last_name': c_user.last_name,
                'first_name': c_user.first_name,
                'email': c_user.email,
                #'groups': c_user.groups,
                'calendar': calendar_dict,
            }
            list_data.append(data)

        if list_data:
            temp_data = ", ".join(str(e) for e in list_data)
            final_data = ast.literal_eval(temp_data)
        else:
            final_data = {"note": "no calendar-user found"}
        #serializer = CalendarUserSerializer(snippets, many=True)
        return Response(final_data)

    def post_save(self, obj, created=False):
        """Create Calendar User object with default name & current Calendar User"""

        if created:
            obj.set_password(self.request.DATA['password'])
            obj.save()

            CalendarUserProfile.objects.create(
                user=obj,
                manager=Manager.objects.get(username=self.request.user),
                calendar_setting=CalendarSetting.objects.filter(user=self.request.user)[0]
            )

    def retrieve(self, request, *args, **kwargs):
        """retrieve CalendarUser object"""
        self.object = self.get_object()
        data = dict()
        try:
            calendar_obj = Calendar.objects.get(user=self.object)
            calendar_dict = {
                'name': calendar_obj.name,
                'max_concurrent': calendar_obj.max_concurrent,
            }
        except:
            calendar_dict = {}

        data = {
            'id': self.object.id,
            'username': self.object.username,
            'password': self.object.password,
            'last_name': self.object.last_name,
            'first_name': self.object.first_name,
            'email': self.object.email,
            #'groups': c_user.groups,
            'calendar': calendar_dict,
        }

        #serializer = self.get_serializer(self.object)
        return Response(data)

########NEW FILE########
__FILENAME__ = view_calendar_user_profile
# -*- coding: utf-8 -*-
#
# Newfies-Dialer License
# http://www.newfies-dialer.org
#
# This Source Code Form is subject to the terms of the Mozilla Public
# License, v. 2.0. If a copy of the MPL was not distributed with this file,
# You can obtain one at http://mozilla.org/MPL/2.0/.
#
# Copyright (C) 2011-2014 Star2Billing S.L.
#
# The Initial Developer of the Original Code is
# Arezqui Belaid <info@star2billing.com>
#

from rest_framework import viewsets
from rest_framework.response import Response
from rest_framework.permissions import IsAuthenticated
from rest_framework.authentication import BasicAuthentication, SessionAuthentication
from appointment.models.users import CalendarUserProfile
from apirest.calendar_user_profile_serializers import CalendarUserProfileSerializer
from appointment.function_def import get_calendar_user_id_list, \
    get_all_calendar_user_id_list
from user_profile.models import Manager
from permissions import CustomObjectPermissions
import ast


class CalendarUserProfileViewSet(viewsets.ModelViewSet):
    """
    API endpoint that allows calendar user profile to be viewed or edited.
    """
    model = CalendarUserProfile
    queryset = CalendarUserProfile.objects.all()
    serializer_class = CalendarUserProfileSerializer
    authentication = (BasicAuthentication, SessionAuthentication)
    permission_classes = (IsAuthenticated, CustomObjectPermissions)
    lookup_field = ('user_id')

    def pre_save(self, obj):
        obj.manager = Manager.objects.get(username=self.request.user)

    def list(self, request, *args, **kwargs):
        """get list of all CalendarUser objects"""
        if self.request.user.is_superuser:
            calendar_user_list = get_all_calendar_user_id_list()
        else:
            calendar_user_list = get_calendar_user_id_list(request.user)

        profiles = CalendarUserProfile.objects.filter(user_id__in=calendar_user_list).order_by('id')
        list_data = []
        for c_user_profile in profiles:
            user_url = 'http://%s/rest-api/calendar-user-profile/%s/' % (self.request.META['HTTP_HOST'], str(c_user_profile.id))
            calendar_setting_url = 'http://%s/rest-api/calendar-setting/%s/' % (self.request.META['HTTP_HOST'], str(c_user_profile.calendar_setting_id))

            data = {
                'url': user_url,
                'id': c_user_profile.id,
                'accountcode': c_user_profile.accountcode,
                'calendar_setting': calendar_setting_url,
                'manager': str(c_user_profile.manager),
                'address': c_user_profile.address,
                'city': c_user_profile.city,
                'state': c_user_profile.state,
                'zip_code': c_user_profile.zip_code,
                'phone_no': c_user_profile.phone_no,
                'fax': c_user_profile.fax,
                'company_name': c_user_profile.company_name,
                'company_website': c_user_profile.company_website,
                #'language': c_user_profile.language,
            }
            list_data.append(data)

        if list_data:
            temp_data = ", ".join(str(e) for e in list_data)
            final_data = ast.literal_eval(temp_data)
        else:
            final_data = {"note": "no calendar-user-profile found"}
        #serializer = CalendarUserSerializer(snippets, many=True)
        return Response(final_data)

########NEW FILE########
__FILENAME__ = view_callrequest
# -*- coding: utf-8 -*-
#
# Newfies-Dialer License
# http://www.newfies-dialer.org
#
# This Source Code Form is subject to the terms of the Mozilla Public
# License, v. 2.0. If a copy of the MPL was not distributed with this file,
# You can obtain one at http://mozilla.org/MPL/2.0/.
#
# Copyright (C) 2011-2014 Star2Billing S.L.
#
# The Initial Developer of the Original Code is
# Arezqui Belaid <info@star2billing.com>
#

from rest_framework import viewsets
from apirest.callrequest_serializers import CallrequestSerializer
from rest_framework.permissions import IsAuthenticated
from rest_framework.authentication import BasicAuthentication, SessionAuthentication
from dialer_cdr.models import Callrequest
from permissions import CustomObjectPermissions


class CallrequestViewSet(viewsets.ModelViewSet):
    """
    API endpoint that allows campaigns to be viewed or edited.
    """
    model = Callrequest
    queryset = Callrequest.objects.all()
    serializer_class = CallrequestSerializer
    authentication = (BasicAuthentication, SessionAuthentication)
    permission_classes = (IsAuthenticated, CustomObjectPermissions)

    def pre_save(self, obj):
        obj.user = self.request.user

    def get_queryset(self):
        """
        This view should return a list of all the callrequests
        for the currently authenticated user.
        """
        if self.request.user.is_superuser:
            queryset = Callrequest.objects.all()
        else:
            queryset = Callrequest.objects.filter(user=self.request.user)
        return queryset

########NEW FILE########
__FILENAME__ = view_campaign
# -*- coding: utf-8 -*-
#
# Newfies-Dialer License
# http://www.newfies-dialer.org
#
# This Source Code Form is subject to the terms of the Mozilla Public
# License, v. 2.0. If a copy of the MPL was not distributed with this file,
# You can obtain one at http://mozilla.org/MPL/2.0/.
#
# Copyright (C) 2011-2014 Star2Billing S.L.
#
# The Initial Developer of the Original Code is
# Arezqui Belaid <info@star2billing.com>
#
from rest_framework import viewsets
#from rest_framework.response import Response
from apirest.campaign_serializers import CampaignSerializer
from rest_framework.permissions import IsAuthenticated
from rest_framework.authentication import BasicAuthentication, SessionAuthentication
from dialer_campaign.models import Campaign
from permissions import CustomObjectPermissions


class CampaignViewSet(viewsets.ModelViewSet):
    model = Campaign
    queryset = Campaign.objects.all()
    serializer_class = CampaignSerializer
    authentication = (BasicAuthentication, SessionAuthentication)
    permission_classes = (IsAuthenticated, CustomObjectPermissions)

    def pre_save(self, obj):
        obj.user = self.request.user

    def get_queryset(self):
        """
        This view should return a list of all the campaigns
        for the currently authenticated user.
        """
        if self.request.user.is_superuser:
            queryset = Campaign.objects.all()
        else:
            queryset = Campaign.objects.filter(user=self.request.user)
        return queryset

########NEW FILE########
__FILENAME__ = view_contact
# -*- coding: utf-8 -*-
#
# Newfies-Dialer License
# http://www.newfies-dialer.org
#
# This Source Code Form is subject to the terms of the Mozilla Public
# License, v. 2.0. If a copy of the MPL was not distributed with this file,
# You can obtain one at http://mozilla.org/MPL/2.0/.
#
# Copyright (C) 2011-2014 Star2Billing S.L.
#
# The Initial Developer of the Original Code is
# Arezqui Belaid <info@star2billing.com>
#
from rest_framework import viewsets
from apirest.contact_serializers import ContactSerializer
from rest_framework.permissions import IsAuthenticated
from rest_framework.authentication import BasicAuthentication, SessionAuthentication
from dialer_contact.models import Contact
from permissions import CustomObjectPermissions


class ContactViewSet(viewsets.ModelViewSet):
    """
    API endpoint that allows contact to be viewed or edited.
    """
    model = Contact
    queryset = Contact.objects.all()
    serializer_class = ContactSerializer
    authentication = (BasicAuthentication, SessionAuthentication)
    permission_classes = (IsAuthenticated, CustomObjectPermissions)

    def get_queryset(self):
        """
        This view should return a list of all the contacts
        for the currently authenticated user.
        """
        if self.request.user.is_superuser:
            queryset = Contact.objects.all()
        else:
            queryset = Contact.objects.filter(phonebook__user=self.request.user)
        return queryset

########NEW FILE########
__FILENAME__ = view_contenttype
# -*- coding: utf-8 -*-
#
# Newfies-Dialer License
# http://www.newfies-dialer.org
#
# This Source Code Form is subject to the terms of the Mozilla Public
# License, v. 2.0. If a copy of the MPL was not distributed with this file,
# You can obtain one at http://mozilla.org/MPL/2.0/.
#
# Copyright (C) 2011-2014 Star2Billing S.L.
#
# The Initial Developer of the Original Code is
# Arezqui Belaid <info@star2billing.com>
#
from rest_framework import viewsets
from apirest.content_type_serializers import ContentTypeSerializer
from django.contrib.contenttypes.models import ContentType
from rest_framework.permissions import IsAuthenticated
from rest_framework.authentication import BasicAuthentication, SessionAuthentication
from permissions import CustomObjectPermissions


class ContentTypeViewSet(viewsets.ReadOnlyModelViewSet):
    """
    API endpoint that allows content_type to be viewed or edited.
    """
    queryset = ContentType.objects.all()
    serializer_class = ContentTypeSerializer
    authentication = (BasicAuthentication, SessionAuthentication)
    permission_classes = (IsAuthenticated, CustomObjectPermissions)

########NEW FILE########
__FILENAME__ = view_dnc
# -*- coding: utf-8 -*-
#
# Newfies-Dialer License
# http://www.newfies-dialer.org
#
# This Source Code Form is subject to the terms of the Mozilla Public
# License, v. 2.0. If a copy of the MPL was not distributed with this file,
# You can obtain one at http://mozilla.org/MPL/2.0/.
#
# Copyright (C) 2011-2014 Star2Billing S.L.
#
# The Initial Developer of the Original Code is
# Arezqui Belaid <info@star2billing.com>
#
from rest_framework import viewsets
from apirest.dnc_serializers import DNCSerializer
from rest_framework.permissions import IsAuthenticated
from rest_framework.authentication import BasicAuthentication, SessionAuthentication
from dnc.models import DNC
from permissions import CustomObjectPermissions


class DNCViewSet(viewsets.ModelViewSet):
    """
    API endpoint that allows dnc list to be viewed or edited.
    """
    model = DNC
    queryset = DNC.objects.all()
    serializer_class = DNCSerializer
    authentication = (BasicAuthentication, SessionAuthentication)
    permission_classes = (IsAuthenticated, CustomObjectPermissions)

    def get_queryset(self):
        """
        This view should return a list of all the DNCs
        for the currently authenticated user.
        """
        if self.request.user.is_superuser:
            queryset = DNC.objects.all()
        else:
            queryset = DNC.objects.filter(user=self.request.user)
        return queryset

    def pre_save(self, obj):
        obj.user = self.request.user

########NEW FILE########
__FILENAME__ = view_dnc_contact
# -*- coding: utf-8 -*-
#
# Newfies-Dialer License
# http://www.newfies-dialer.org
#
# This Source Code Form is subject to the terms of the Mozilla Public
# License, v. 2.0. If a copy of the MPL was not distributed with this file,
# You can obtain one at http://mozilla.org/MPL/2.0/.
#
# Copyright (C) 2011-2014 Star2Billing S.L.
#
# The Initial Developer of the Original Code is
# Arezqui Belaid <info@star2billing.com>
#
from rest_framework import viewsets
from apirest.dnc_contact_serializers import DNCContactSerializer
from rest_framework.permissions import IsAuthenticated
from rest_framework.authentication import BasicAuthentication, SessionAuthentication
from dnc.models import DNCContact
from permissions import CustomObjectPermissions


class DNCContactViewSet(viewsets.ModelViewSet):
    """
    API endpoint that allows dnc contact to be viewed or edited.
    """
    model = DNCContact
    queryset = DNCContact.objects.all()
    serializer_class = DNCContactSerializer
    authentication = (BasicAuthentication, SessionAuthentication)
    permission_classes = (IsAuthenticated, CustomObjectPermissions)

    def get_queryset(self):
        """
        This view should return a list of all the DNC Contacts
        for the currently authenticated user.
        """
        if self.request.user.is_superuser:
            queryset = DNCContact.objects.all()
        else:
            queryset = DNCContact.objects.filter(dnc__user=self.request.user)
        return queryset

########NEW FILE########
__FILENAME__ = view_event
# -*- coding: utf-8 -*-
#
# Newfies-Dialer License
# http://www.newfies-dialer.org
#
# This Source Code Form is subject to the terms of the Mozilla Public
# License, v. 2.0. If a copy of the MPL was not distributed with this file,
# You can obtain one at http://mozilla.org/MPL/2.0/.
#
# Copyright (C) 2011-2014 Star2Billing S.L.
#
# The Initial Developer of the Original Code is
# Arezqui Belaid <info@star2billing.com>
#
from rest_framework import viewsets
from apirest.event_serializers import EventSerializer
from rest_framework.decorators import action
from rest_framework.response import Response
from rest_framework.permissions import IsAuthenticated
from rest_framework.authentication import BasicAuthentication, SessionAuthentication
from appointment.models.events import Event
from appointment.function_def import get_calendar_user_id_list
from permissions import CustomObjectPermissions
import ast


class EventViewSet(viewsets.ModelViewSet):
    """
    API endpoint that allows event to be viewed or edited.
    """
    model = Event
    queryset = Event.objects.all()
    serializer_class = EventSerializer
    authentication = (BasicAuthentication, SessionAuthentication)
    permission_classes = (IsAuthenticated, CustomObjectPermissions)

    def get_queryset(self):
        if self.request.user.is_superuser:
            queryset = Event.objects.all()
        else:
            calendar_user_list = get_calendar_user_id_list(self.request.user)
            queryset = Event.objects.filter(creator_id__in=calendar_user_list)
        return queryset

    @action(methods=['PATCH'])
    def update_last_child_status(self, request, pk=None):
        """it will update last child event status"""
        event = self.get_object()
        event.update_last_child_status(request.DATA['status'])
        return Response({'status': 'event status has been updated'})

    @action(methods=['GET'])
    def get_list_child(self, request, pk=None):
        """it will get all child events"""
        event = self.get_object()
        queryset = event.get_list_child()

        list_data = []
        for child_event in queryset:
            event_url = 'http://%s/rest-api/event/%s/' % (self.request.META['HTTP_HOST'], str(child_event.id))
            data = {
                'url': event_url,
                'title': child_event.title,
                'description': child_event.description,
                'start': str(child_event.start),
                'end': str(child_event.end),
            }
            list_data.append(data)

        if list_data:
            temp_data = ", ".join(str(e) for e in list_data)
            final_data = ast.literal_eval(temp_data)
        else:
            final_data = {"note": "no child event found"}
        return Response(final_data)

########NEW FILE########
__FILENAME__ = view_gateway
# -*- coding: utf-8 -*-
#
# Newfies-Dialer License
# http://www.newfies-dialer.org
#
# This Source Code Form is subject to the terms of the Mozilla Public
# License, v. 2.0. If a copy of the MPL was not distributed with this file,
# You can obtain one at http://mozilla.org/MPL/2.0/.
#
# Copyright (C) 2011-2014 Star2Billing S.L.
#
# The Initial Developer of the Original Code is
# Arezqui Belaid <info@star2billing.com>
#
from rest_framework import viewsets
from apirest.gateway_serializers import GatewaySerializer
from rest_framework.permissions import IsAuthenticated
from rest_framework.authentication import BasicAuthentication, SessionAuthentication
from dialer_gateway.models import Gateway
from user_profile.models import UserProfile
from permissions import CustomObjectPermissions


class GatewayViewSet(viewsets.ReadOnlyModelViewSet):
    """
    API endpoint that allows gateway to be viewed or edited.
    """
    queryset = Gateway.objects.all()
    serializer_class = GatewaySerializer
    authentication = (BasicAuthentication, SessionAuthentication)
    permission_classes = (IsAuthenticated, CustomObjectPermissions)

    def get_queryset(self):
        """
        This view should return a list of all the alarms
        for the currently authenticated user.
        """
        if self.request.user.is_superuser:
            queryset = Gateway.objects.all()
        else:
            queryset = UserProfile.objects.get(user=self.request.user).userprofile_gateway.all()
        return queryset

########NEW FILE########
__FILENAME__ = view_mail_template
# -*- coding: utf-8 -*-
#
# Newfies-Dialer License
# http://www.newfies-dialer.org
#
# This Source Code Form is subject to the terms of the Mozilla Public
# License, v. 2.0. If a copy of the MPL was not distributed with this file,
# You can obtain one at http://mozilla.org/MPL/2.0/.
#
# Copyright (C) 2011-2014 Star2Billing S.L.
#
# The Initial Developer of the Original Code is
# Arezqui Belaid <info@star2billing.com>
#

from rest_framework import viewsets
from apirest.mail_template_serializers import MailTemplateSerializer
from rest_framework.permissions import IsAuthenticated
from rest_framework.authentication import BasicAuthentication, SessionAuthentication
from mod_mailer.models import MailTemplate
from permissions import CustomObjectPermissions


class MailTemplateViewSet(viewsets.ReadOnlyModelViewSet):
    """
    API endpoint that allows rule to be viewed or edited.
    """
    queryset = MailTemplate.objects.all()
    serializer_class = MailTemplateSerializer
    authentication = (BasicAuthentication, SessionAuthentication)
    permission_classes = (IsAuthenticated, CustomObjectPermissions)

########NEW FILE########
__FILENAME__ = view_phonebook
# -*- coding: utf-8 -*-
#
# Newfies-Dialer License
# http://www.newfies-dialer.org
#
# This Source Code Form is subject to the terms of the Mozilla Public
# License, v. 2.0. If a copy of the MPL was not distributed with this file,
# You can obtain one at http://mozilla.org/MPL/2.0/.
#
# Copyright (C) 2011-2014 Star2Billing S.L.
#
# The Initial Developer of the Original Code is
# Arezqui Belaid <info@star2billing.com>
#

from rest_framework import viewsets
from apirest.phonebook_serializers import PhonebookSerializer
from rest_framework.permissions import IsAuthenticated
from rest_framework.authentication import BasicAuthentication, SessionAuthentication
from dialer_contact.models import Phonebook
from permissions import CustomObjectPermissions


class PhonebookViewSet(viewsets.ModelViewSet):
    """
    API endpoint that allows phonebook to be viewed or edited.
    """
    model = Phonebook
    queryset = Phonebook.objects.all()
    serializer_class = PhonebookSerializer
    authentication = (BasicAuthentication, SessionAuthentication)
    permission_classes = (IsAuthenticated, CustomObjectPermissions)

    def get_queryset(self):
        """
        This view should return a list of all the phonebooks
        for the currently authenticated user.
        """
        if self.request.user.is_superuser:
            queryset = Phonebook.objects.all()
        else:
            queryset = Phonebook.objects.filter(user=self.request.user)
        return queryset

    def pre_save(self, obj):
        obj.user = self.request.user

########NEW FILE########
__FILENAME__ = view_queue
# -*- coding: utf-8 -*-
#
# Newfies-Dialer License
# http://www.newfies-dialer.org
#
# This Source Code Form is subject to the terms of the Mozilla Public
# License, v. 2.0. If a copy of the MPL was not distributed with this file,
# You can obtain one at http://mozilla.org/MPL/2.0/.
#
# Copyright (C) 2011-2014 Star2Billing S.L.
#
# The Initial Developer of the Original Code is
# Arezqui Belaid <info@star2billing.com>
#

from rest_framework import viewsets
from rest_framework.permissions import IsAuthenticated
from rest_framework.authentication import BasicAuthentication, SessionAuthentication
from callcenter.models import Queue
from apirest.queue_serializers import QueueSerializer
from user_profile.models import Manager
from permissions import CustomObjectPermissions


class QueueViewSet(viewsets.ModelViewSet):
    """
    API endpoint that allows queue to be viewed or edited.
    """
    model = Queue
    queryset = Queue.objects.all()
    serializer_class = QueueSerializer
    authentication = (BasicAuthentication, SessionAuthentication)
    permission_classes = (IsAuthenticated, CustomObjectPermissions)

    def get_queryset(self):
        """
        This view should return a list of all the phonebooks
        for the currently authenticated user.
        """
        if self.request.user.is_superuser:
            queryset = Queue.objects.all()
        else:
            queryset = Queue.objects.filter(manager=self.request.user)
        return queryset

    def pre_save(self, obj):
        obj.manager = Manager.objects.get(username=self.request.user)

########NEW FILE########
__FILENAME__ = view_rule
# -*- coding: utf-8 -*-
#
# Newfies-Dialer License
# http://www.newfies-dialer.org
#
# This Source Code Form is subject to the terms of the Mozilla Public
# License, v. 2.0. If a copy of the MPL was not distributed with this file,
# You can obtain one at http://mozilla.org/MPL/2.0/.
#
# Copyright (C) 2011-2014 Star2Billing S.L.
#
# The Initial Developer of the Original Code is
# Arezqui Belaid <info@star2billing.com>
#

from rest_framework import viewsets
from apirest.rule_serializers import RuleSerializer
from rest_framework.permissions import IsAuthenticated
from rest_framework.authentication import BasicAuthentication, SessionAuthentication
from appointment.models.rules import Rule
from permissions import CustomObjectPermissions


class RuleViewSet(viewsets.ReadOnlyModelViewSet):
    """
    API endpoint that allows rule to be viewed or edited.
    """
    queryset = Rule.objects.all()
    serializer_class = RuleSerializer
    authentication = (BasicAuthentication, SessionAuthentication)
    permission_classes = (IsAuthenticated, CustomObjectPermissions)

########NEW FILE########
__FILENAME__ = view_section_template
# -*- coding: utf-8 -*-
#
# Newfies-Dialer License
# http://www.newfies-dialer.org
#
# This Source Code Form is subject to the terms of the Mozilla Public
# License, v. 2.0. If a copy of the MPL was not distributed with this file,
# You can obtain one at http://mozilla.org/MPL/2.0/.
#
# Copyright (C) 2011-2014 Star2Billing S.L.
#
# The Initial Developer of the Original Code is
# Arezqui Belaid <info@star2billing.com>
#

from rest_framework import viewsets
from apirest.section_template_serializers import SectionTemplateSerializer
from rest_framework.permissions import IsAuthenticated
from rest_framework.authentication import BasicAuthentication, SessionAuthentication
from survey.models import Section_template
from permissions import CustomObjectPermissions


class SectionTemplateViewSet(viewsets.ModelViewSet):
    """
    API endpoint that allows content_type to be viewed or edited.
    """
    model = Section_template
    queryset = Section_template.objects.all()
    serializer_class = SectionTemplateSerializer
    authentication = (BasicAuthentication, SessionAuthentication)
    permission_classes = (IsAuthenticated, CustomObjectPermissions)

    def get_queryset(self):
        """
        This view should return a list of all the sections
        for the currently authenticated user.
        """
        if self.request.user.is_superuser:
            queryset = Section_template.objects.all()
        else:
            queryset = Section_template.objects.filter(survey__user=self.request.user)
        return queryset

########NEW FILE########
__FILENAME__ = view_sms_campaign
# -*- coding: utf-8 -*-
#
# Newfies-Dialer License
# http://www.newfies-dialer.org
#
# This Source Code Form is subject to the terms of the Mozilla Public
# License, v. 2.0. If a copy of the MPL was not distributed with this file,
# You can obtain one at http://mozilla.org/MPL/2.0/.
#
# Copyright (C) 2011-2014 Star2Billing S.L.
#
# The Initial Developer of the Original Code is
# Arezqui Belaid <info@star2billing.com>
#

from rest_framework import viewsets
#from rest_framework.response import Response
from apirest.sms_campaign_serializers import SMSCampaignSerializer
from rest_framework.permissions import IsAuthenticated
from rest_framework.authentication import BasicAuthentication, SessionAuthentication
from mod_sms.models import SMSCampaign
from permissions import CustomObjectPermissions


class SMSCampaignViewSet(viewsets.ModelViewSet):
    """
    **Create**:

        CURL Usage::

            curl -u username:password --dump-header - -H "Content-Type:application/json" -X POST --data '{"name": "mysmscampaign", "description": "", "callerid": "1239876", "startingdate": "2013-06-13 13:13:33", "expirationdate": "2013-06-14 13:13:33", "frequency": "20", "callmaxduration": "50", "maxretry": "3", "phonebook_id": "1"}' http://localhost:8000/rest-api/sms-campaign/

        Response::

            HTTP/1.0 201 CREATED
            Date: Fri, 14 Jun 2013 09:52:27 GMT
            Server: WSGIServer/0.1 Python/2.7.3
            Vary: Accept, Accept-Language, Cookie
            Content-Type: application/json; charset=utf-8
            Content-Language: en-us
            Allow: GET, POST, HEAD, OPTIONS

    """
    model = SMSCampaign
    queryset = SMSCampaign.objects.all()
    serializer_class = SMSCampaignSerializer
    authentication = (BasicAuthentication, SessionAuthentication)
    permission_classes = (IsAuthenticated, CustomObjectPermissions)

    def pre_save(self, obj):
        obj.user = self.request.user

    def get_queryset(self):
        """
        This view should return a list of all the campaigns
        for the currently authenticated user.
        """
        if self.request.user.is_superuser:
            queryset = SMSCampaign.objects.all()
        else:
            queryset = SMSCampaign.objects.filter(user=self.request.user)
        return queryset

########NEW FILE########
__FILENAME__ = view_sms_gateway
# -*- coding: utf-8 -*-
#
# Newfies-Dialer License
# http://www.newfies-dialer.org
#
# This Source Code Form is subject to the terms of the Mozilla Public
# License, v. 2.0. If a copy of the MPL was not distributed with this file,
# You can obtain one at http://mozilla.org/MPL/2.0/.
#
# Copyright (C) 2011-2014 Star2Billing S.L.
#
# The Initial Developer of the Original Code is
# Arezqui Belaid <info@star2billing.com>
#

from rest_framework import viewsets
from apirest.sms_gateway_serializers import SMSGatewaySerializer
from rest_framework.permissions import IsAuthenticated
from rest_framework.authentication import BasicAuthentication, SessionAuthentication
from sms.models import Gateway as SMSGateway
from permissions import CustomObjectPermissions


class SMSGatewayViewSet(viewsets.ReadOnlyModelViewSet):
    """
    API endpoint that allows gateway to be viewed or edited.
    """
    queryset = SMSGateway.objects.all()
    serializer_class = SMSGatewaySerializer
    authentication = (BasicAuthentication, SessionAuthentication)
    permission_classes = (IsAuthenticated, CustomObjectPermissions)

########NEW FILE########
__FILENAME__ = view_sms_template
# -*- coding: utf-8 -*-
#
# Newfies-Dialer License
# http://www.newfies-dialer.org
#
# This Source Code Form is subject to the terms of the Mozilla Public
# License, v. 2.0. If a copy of the MPL was not distributed with this file,
# You can obtain one at http://mozilla.org/MPL/2.0/.
#
# Copyright (C) 2011-2014 Star2Billing S.L.
#
# The Initial Developer of the Original Code is
# Arezqui Belaid <info@star2billing.com>
#

from rest_framework import viewsets
from apirest.sms_template_serializers import SMSTemplateSerializer
from rest_framework.permissions import IsAuthenticated
from rest_framework.authentication import BasicAuthentication, SessionAuthentication
from mod_sms.models import SMSTemplate
from permissions import CustomObjectPermissions


class SMSTemplateViewSet(viewsets.ReadOnlyModelViewSet):
    """
    API endpoint that allows rule to be viewed or edited.
    """
    queryset = SMSTemplate.objects.all()
    serializer_class = SMSTemplateSerializer
    authentication = (BasicAuthentication, SessionAuthentication)
    permission_classes = (IsAuthenticated, CustomObjectPermissions)

########NEW FILE########
__FILENAME__ = view_subscriber
# -*- coding: utf-8 -*-
#
# Newfies-Dialer License
# http://www.newfies-dialer.org
#
# This Source Code Form is subject to the terms of the Mozilla Public
# License, v. 2.0. If a copy of the MPL was not distributed with this file,
# You can obtain one at http://mozilla.org/MPL/2.0/.
#
# Copyright (C) 2011-2014 Star2Billing S.L.
#
# The Initial Developer of the Original Code is
# Arezqui Belaid <info@star2billing.com>
#

from rest_framework.response import Response
from rest_framework.views import APIView
from rest_framework.authentication import BasicAuthentication, SessionAuthentication
from dialer_contact.models import Phonebook, Contact
from dialer_contact.constants import CONTACT_STATUS
from dialer_campaign.models import Campaign, Subscriber
from dialer_campaign.constants import SUBSCRIBER_STATUS

import logging
logger = logging.getLogger('newfies.filelog')


class SubscriberViewSet(APIView):
    """SubscriberViewSet"""
    authentication = (BasicAuthentication, SessionAuthentication)

    def post(self, request, pk=None):
        """
        It will insert active contact to the subscriber for each
        active campaign using this phonebook which are not imported into
        subscriber before

        phonebook_id - To check valid phonebook_id & To add new contact in that phonebook
        additional_vars - Must be in JSON format

        CURL Usage::

            curl -u username:password --dump-header - -H "Content-Type:application/json" -X POST --data '{"contact": "650784355", "last_name": "belaid", "first_name": "areski", "email": "areski@gmail.com", "phonebook_id" : "1"}' http://localhost:8000/rest-api/subscriber/

        """
        try:
            phonebook_id = request.DATA.get('phonebook_id')
            obj_phonebook = Phonebook.objects.get(
                id=phonebook_id, user=request.user)
        except:
            return Response({'error': 'phonebook id is not valid'})

        add_var = {}
        if request.POST.get('additional_vars'):
            try:
                import json
                add_var = json.loads(str(request.DATA.get('additional_vars')))
            except:
                return Response({'error': 'additional_vars is not valid format'})

        Contact.objects.create(
            contact=request.DATA.get('contact'),
            last_name=request.DATA.get('last_name'),
            first_name=request.DATA.get('first_name'),
            email=request.DATA.get('email'),
            description=request.DATA.get('description'),
            address=request.DATA.get('address'),
            city=request.DATA.get('city'),
            state=request.DATA.get('state'),
            country=request.DATA.get('country'),
            unit_number=request.DATA.get('unit_number'),
            additional_vars=add_var,
            status=CONTACT_STATUS.ACTIVE,  # default active
            phonebook=obj_phonebook)

        # Insert the contact to the subscriber also for
        # each campaign using this phonebook
        campaign_obj = Campaign.objects.filter(
            phonebook=obj_phonebook,
            user=request.user)

        for c_campaign in campaign_obj:
            imported_phonebook = []
            if c_campaign.imported_phonebook:
                # for example:- c_campaign.imported_phonebook = 1,2,3
                # So convert imported_phonebook string into int list
                imported_phonebook = map(int,
                    c_campaign.imported_phonebook.split(','))

            phonebook_list = c_campaign.phonebook \
                .values_list('id', flat=True) \
                .all()
            phonebook_list = map(int, phonebook_list)

            common_phonebook_list = []
            if phonebook_list:
                common_phonebook_list = list(set(imported_phonebook) & set(phonebook_list))
                if common_phonebook_list:
                    contact_list = Contact.objects \
                        .filter(phonebook__in=common_phonebook_list,
                                status=CONTACT_STATUS.ACTIVE)
                    for con_obj in contact_list:
                        try:
                            Subscriber.objects.create(
                                contact=con_obj,
                                duplicate_contact=con_obj.contact,
                                status=SUBSCRIBER_STATUS.PENDING,  # PENDING
                                campaign=c_campaign)
                        except:
                            error_msg = "Duplicate Subscriber"
                            logger.error(error_msg)
                            pass

        logger.debug('Subscriber POST API : result ok 200')
        return Response({'status': 'Contact created'})

########NEW FILE########
__FILENAME__ = view_subscriber_list
# -*- coding: utf-8 -*-
#
# Newfies-Dialer License
# http://www.newfies-dialer.org
#
# This Source Code Form is subject to the terms of the Mozilla Public
# License, v. 2.0. If a copy of the MPL was not distributed with this file,
# You can obtain one at http://mozilla.org/MPL/2.0/.
#
# Copyright (C) 2011-2014 Star2Billing S.L.
#
# The Initial Developer of the Original Code is
# Arezqui Belaid <info@star2billing.com>
#

from rest_framework import viewsets
from rest_framework.permissions import IsAuthenticated
from rest_framework.authentication import BasicAuthentication, SessionAuthentication
from apirest.subscriber_list_serializers import SubscriberListSerializer
from dialer_campaign.models import Subscriber
from permissions import CustomObjectPermissions


class SubscriberListViewSet(viewsets.ReadOnlyModelViewSet):
    """SubscriberListViewSet"""
    queryset = Subscriber.objects.all()
    serializer_class = SubscriberListSerializer
    authentication = (BasicAuthentication, SessionAuthentication)
    permission_classes = (IsAuthenticated, CustomObjectPermissions)

    def get_queryset(self):
        """
        This view should return a list of all the Subscriber
        for the currently authenticated user.
        """
        if self.request.user.is_superuser:
            queryset = Subscriber.objects.all()
        else:
            queryset = Subscriber.objects.filter(campaign__user=self.request.user)
        return queryset

########NEW FILE########
__FILENAME__ = view_subscriber_per_campaign
# -*- coding: utf-8 -*-
#
# Newfies-Dialer License
# http://www.newfies-dialer.org
#
# This Source Code Form is subject to the terms of the Mozilla Public
# License, v. 2.0. If a copy of the MPL was not distributed with this file,
# You can obtain one at http://mozilla.org/MPL/2.0/.
#
# Copyright (C) 2011-2014 Star2Billing S.L.
#
# The Initial Developer of the Original Code is
# Arezqui Belaid <info@star2billing.com>
#

from django.db import connection
from rest_framework.authentication import BasicAuthentication, SessionAuthentication
from rest_framework.views import APIView
from rest_framework.response import Response
from dialer_campaign.models import Campaign
from dialer_contact.models import Contact


class SubscriberPerCampaignList(APIView):
    """
    List all subscriber per campaign
    """
    authentication = (BasicAuthentication, SessionAuthentication)

    def get(self, request, campaign_id=0, contact_id=0, format=None):
        """
        **Read**:

            CURL Usage::

                curl -u username:password -H 'Accept: application/json' http://localhost:8000/rest-api/subcampaign/%campaign_id%/

                curl -u username:password -H 'Accept: application/json' http://localhost:8000/rest-api/subcampaign/%campaign_id%/%contact_id%/
        """
        error = {}

        cursor = connection.cursor()

        if request.user.is_superuser:
            try:
                Campaign.objects.get(id=campaign_id)
            except:
                error_msg = "Campaign ID is not valid!"
                error['error'] = error_msg
                return Response(error)

            if contact_id:
                try:
                    Contact.objects.get(id=contact_id)
                except:
                    error_msg = "Contact ID is not valid!"
                    error['error'] = error_msg
                    return Response(error)
        else:
            try:
                Campaign.objects.get(id=campaign_id, user=request.user)
            except:
                error_msg = "Campaign ID is not valid!"
                error['error'] = error_msg
                return Response(error)

            if contact_id:
                try:
                    Contact.objects.get(id=contact_id, phonebook__user=request.user)
                except:
                    error_msg = "Contact ID is not valid!"
                    error['error'] = error_msg
                    return Response(error)

        if contact_id and contact_id > 0:
            sql_statement = "SELECT DISTINCT contact_id, last_attempt, " \
                "count_attempt, completion_count_attempt, dialer_subscriber.status," \
                "dialer_subscriber.id, duplicate_contact " \
                "FROM dialer_subscriber " \
                "LEFT JOIN dialer_callrequest ON " \
                "subscriber_id=dialer_subscriber.id " \
                "LEFT JOIN dialer_campaign ON " \
                "dialer_callrequest.campaign_id=dialer_campaign.id " \
                "WHERE dialer_subscriber.campaign_id = %s " \
                "AND dialer_subscriber.duplicate_contact = '%s'" \
                % (str(campaign_id), str(contact_id))
        else:
            sql_statement = "SELECT DISTINCT contact_id, last_attempt, " \
                "count_attempt, completion_count_attempt, dialer_subscriber.status, " \
                "dialer_subscriber.id, duplicate_contact " \
                "FROM dialer_subscriber " \
                "LEFT JOIN dialer_callrequest ON " \
                "subscriber_id=" \
                "dialer_subscriber.id " \
                "LEFT JOIN dialer_campaign ON " \
                "dialer_callrequest.campaign_id=dialer_campaign.id " \
                "WHERE dialer_subscriber.campaign_id" \
                "= %s" % (str(campaign_id))

        cursor.execute(sql_statement)
        row = cursor.fetchall()

        result = []
        for record in row:
            modrecord = {}
            modrecord['contact_id'] = record[0]
            modrecord['last_attempt'] = record[1]
            modrecord['count_attempt'] = record[2]
            modrecord['completion_count_attempt'] = record[3]
            modrecord['status'] = record[3]
            modrecord['subscriber_id'] = record[4]
            modrecord['contact'] = record[6]
            result.append(modrecord)

        return Response(result)

########NEW FILE########
__FILENAME__ = view_survey
# -*- coding: utf-8 -*-
#
# Newfies-Dialer License
# http://www.newfies-dialer.org
#
# This Source Code Form is subject to the terms of the Mozilla Public
# License, v. 2.0. If a copy of the MPL was not distributed with this file,
# You can obtain one at http://mozilla.org/MPL/2.0/.
#
# Copyright (C) 2011-2014 Star2Billing S.L.
#
# The Initial Developer of the Original Code is
# Arezqui Belaid <info@star2billing.com>
#

from rest_framework import viewsets
from rest_framework.permissions import IsAuthenticated
from rest_framework.authentication import BasicAuthentication, SessionAuthentication
from apirest.survey_serializers import SurveySerializer
from survey.models import Survey
from permissions import CustomObjectPermissions


class SurveyViewSet(viewsets.ReadOnlyModelViewSet):
    """
    API endpoint that allows survey to be viewed.
    """
    authentication = (BasicAuthentication, SessionAuthentication)
    permission_classes = (IsAuthenticated, CustomObjectPermissions)
    queryset = Survey.objects.all()
    serializer_class = SurveySerializer

    def get_queryset(self):
        """
        This view should return a list of all the survey
        for the currently authenticated user.
        """
        if self.request.user.is_superuser:
            queryset = Survey.objects.all()
        else:
            queryset = Survey.objects.filter(user=self.request.user)
        return queryset

########NEW FILE########
__FILENAME__ = view_survey_aggregate_result
# -*- coding: utf-8 -*-
#
# Newfies-Dialer License
# http://www.newfies-dialer.org
#
# This Source Code Form is subject to the terms of the Mozilla Public
# License, v. 2.0. If a copy of the MPL was not distributed with this file,
# You can obtain one at http://mozilla.org/MPL/2.0/.
#
# Copyright (C) 2011-2014 Star2Billing S.L.
#
# The Initial Developer of the Original Code is
# Arezqui Belaid <info@star2billing.com>
#

from rest_framework.views import APIView
from rest_framework.authentication import BasicAuthentication, SessionAuthentication
from rest_framework.response import Response
from survey.models import Survey, ResultAggregate
import logging
logger = logging.getLogger('newfies.filelog')


class SurveyAggregateResultViewSet(APIView):
    """
    List Result aggregate result per survey

    **Read**:

        CURL Usage::

            curl -u username:password -H 'Accept: application/json' http://localhost:8000/rest-api/surveyaggregate/%survey_id%/
    """
    authentication = (BasicAuthentication, SessionAuthentication)

    def get(self, request, survey_id=0, format=None):
        """GET method of survey aggregate result API"""
        error = {}
        survey_result_kwargs = {}
        if survey_id == 0:
            error_msg = "Please enter Survey ID."
            error['error'] = error_msg
            logger.error(error_msg)
            return Response(error)

        error_msg = "Survey ID is not valid!"
        if request.user.is_superuser:
            try:
                survey_result_kwargs['survey'] = Survey.objects.get(id=survey_id)
            except:
                error['error'] = error_msg
                logger.error(error_msg)
                return Response(error)
        else:
            try:
                survey_result_kwargs['survey'] = Survey.objects.get(id=survey_id, user=request.user)
            except:
                error['error'] = error_msg
                logger.error(error_msg)
                return Response(error)

        survey_result = ResultAggregate.objects\
            .filter(**survey_result_kwargs)\
            .values('section__question', 'response', 'count')\
            .order_by('section')

        return Response(survey_result)

########NEW FILE########
__FILENAME__ = view_survey_template
# -*- coding: utf-8 -*-
#
# Newfies-Dialer License
# http://www.newfies-dialer.org
#
# This Source Code Form is subject to the terms of the Mozilla Public
# License, v. 2.0. If a copy of the MPL was not distributed with this file,
# You can obtain one at http://mozilla.org/MPL/2.0/.
#
# Copyright (C) 2011-2014 Star2Billing S.L.
#
# The Initial Developer of the Original Code is
# Arezqui Belaid <info@star2billing.com>
#

from rest_framework import viewsets
from apirest.survey_template_serializers import SurveyTemplateSerializer
from rest_framework.permissions import IsAuthenticated
from rest_framework.authentication import BasicAuthentication, SessionAuthentication
from survey.models import Survey_template
from permissions import CustomObjectPermissions


class SurveyTemplateViewSet(viewsets.ModelViewSet):
    """
    API endpoint that allows content_type to be viewed or edited.
    """
    model = Survey_template
    queryset = Survey_template.objects.all()
    serializer_class = SurveyTemplateSerializer
    authentication = (BasicAuthentication, SessionAuthentication)
    permission_classes = (IsAuthenticated, CustomObjectPermissions)

    def pre_save(self, obj):
        obj.user = self.request.user

    def get_queryset(self):
        """
        This view should return a list of all the survey
        for the currently authenticated user.
        """
        if self.request.user.is_superuser:
            queryset = Survey_template.objects.all()
        else:
            queryset = Survey_template.objects.filter(user=self.request.user)
        return queryset

########NEW FILE########
__FILENAME__ = view_tier
# -*- coding: utf-8 -*-
#
# Newfies-Dialer License
# http://www.newfies-dialer.org
#
# This Source Code Form is subject to the terms of the Mozilla Public
# License, v. 2.0. If a copy of the MPL was not distributed with this file,
# You can obtain one at http://mozilla.org/MPL/2.0/.
#
# Copyright (C) 2011-2014 Star2Billing S.L.
#
# The Initial Developer of the Original Code is
# Arezqui Belaid <info@star2billing.com>
#

from rest_framework import viewsets
from rest_framework.permissions import IsAuthenticated
from rest_framework.authentication import BasicAuthentication, SessionAuthentication
from callcenter.models import Tier
from apirest.tier_serializers import TierSerializer
from user_profile.models import Manager
from permissions import CustomObjectPermissions


class TierViewSet(viewsets.ModelViewSet):
    """
    API endpoint that allows tier to be viewed or edited.
    """
    model = Tier
    queryset = Tier.objects.all()
    serializer_class = TierSerializer
    authentication = (BasicAuthentication, SessionAuthentication)
    permission_classes = (IsAuthenticated, CustomObjectPermissions)

    def get_queryset(self):
        """
        This view should return a list of all the phonebooks
        for the currently authenticated user.
        """
        if self.request.user.is_superuser:
            queryset = Tier.objects.all()
        else:
            queryset = Tier.objects.filter(manager=self.request.user)
        return queryset

    def pre_save(self, obj):
        obj.manager = Manager.objects.get(username=self.request.user)

########NEW FILE########
__FILENAME__ = view_user
# -*- coding: utf-8 -*-
#
# Newfies-Dialer License
# http://www.newfies-dialer.org
#
# This Source Code Form is subject to the terms of the Mozilla Public
# License, v. 2.0. If a copy of the MPL was not distributed with this file,
# You can obtain one at http://mozilla.org/MPL/2.0/.
#
# Copyright (C) 2011-2014 Star2Billing S.L.
#
# The Initial Developer of the Original Code is
# Arezqui Belaid <info@star2billing.com>
#
from django.contrib.auth.models import User
from rest_framework import viewsets
from apirest.user_serializers import UserSerializer
from rest_framework.permissions import IsAuthenticatedOrReadOnly
from rest_framework.authentication import BasicAuthentication, SessionAuthentication
#from permissions import CustomObjectPermissions


class UserViewSet(viewsets.ReadOnlyModelViewSet):
    """
    API endpoint that allows users to be viewed or edited.
    """
    queryset = User.objects.all()
    serializer_class = UserSerializer
    authentication = (BasicAuthentication, SessionAuthentication)
    permission_classes = (IsAuthenticatedOrReadOnly, )

########NEW FILE########
__FILENAME__ = admin
#
# Newfies-Dialer License
# http://www.newfies-dialer.org
#
# This Source Code Form is subject to the terms of the Mozilla Public
# License, v. 2.0. If a copy of the MPL was not distributed with this file,
# You can obtain one at http://mozilla.org/MPL/2.0/.
#
# Copyright (C) 2011-2014 Star2Billing S.L.
#
# The Initial Developer of the Original Code is
# Arezqui Belaid <info@star2billing.com>
#

from django.contrib import admin
from django.contrib.auth.admin import UserAdmin
from appointment.models.users import CalendarSetting, CalendarUser, \
    CalendarUserProfile
from appointment.models.rules import Rule
from appointment.models.events import Event, Occurrence
from appointment.models.alarms import Alarm, AlarmRequest
from appointment.models.calendars import Calendar
from appointment.admin_filters import ManagerFilter
from appointment.forms import CalendarUserProfileForm, EventAdminForm, \
    AdminCalendarForm


class CalendarUserProfileInline(admin.StackedInline):
    model = CalendarUserProfile
    form = CalendarUserProfileForm


class CalendarUserAdmin(UserAdmin):
    inlines = [
        CalendarUserProfileInline,
    ]
    list_display = ('username', 'email', 'first_name', 'last_name', 'is_staff',
                    'is_active', 'is_superuser', 'last_login')
    list_filter = (ManagerFilter, )

    def queryset(self, request):
        qs = super(UserAdmin, self).queryset(request)
        calendar_user_list = CalendarUserProfile.objects.values_list('user_id', flat=True).all()
        qs = qs.filter(id__in=calendar_user_list)
        return qs


class CalendarSettingAdmin(admin.ModelAdmin):
    list_display = ('label', 'callerid', 'caller_name', 'call_timeout', 'user', 'survey',
                    'aleg_gateway', 'sms_gateway', 'voicemail', 'amd_behavior', 'updated_date')
    ordering = ('-callerid', )


class CalendarAdmin(admin.ModelAdmin):
    list_display = ('name', 'user', 'max_concurrent')
    ordering = ('-id', )
    form = AdminCalendarForm


class RuleAdmin(admin.ModelAdmin):
    list_display = ('name', 'description', 'frequency', 'params')
    ordering = ('-id', )


class EventAdmin(admin.ModelAdmin):
    list_display = ('title', 'description', 'start', 'end', 'creator', 'rule',
                    'end_recurring_period', 'calendar', 'notify_count', 'status',
                    'parent_event', 'occ_count')
    ordering = ('-id', )
    form = EventAdminForm


class OccurrenceAdmin(admin.ModelAdmin):
    list_display = ('title', 'event', 'start', 'end', 'cancelled',
                    'original_start', 'original_end')
    ordering = ('-id', )


class AlarmAdmin(admin.ModelAdmin):
    list_display = ('id', 'event', 'alarm_phonenumber', 'alarm_email',
                    'daily_start', 'daily_stop', 'advance_notice',
                    'maxretry', 'retry_delay', 'num_attempt', 'method',
                    'status', 'result', 'created_date', 'date_start_notice')
    ordering = ('-id', )
    list_filter = ('event', 'created_date')


class AlarmRequestAdmin(admin.ModelAdmin):
    list_display = ('id', 'alarm', 'date', 'status', 'callstatus')
    ordering = ('-id', )

admin.site.register(Calendar, CalendarAdmin)
admin.site.register(CalendarUser, CalendarUserAdmin)
admin.site.register(CalendarSetting, CalendarSettingAdmin)
admin.site.register(Rule, RuleAdmin)
admin.site.register(Event, EventAdmin)
admin.site.register(Occurrence, OccurrenceAdmin)
admin.site.register(AlarmRequest, AlarmRequestAdmin)
admin.site.register(Alarm, AlarmAdmin)

########NEW FILE########
__FILENAME__ = admin_filters
#
# Newfies-Dialer License
# http://www.newfies-dialer.org
#
# This Source Code Form is subject to the terms of the Mozilla Public
# License, v. 2.0. If a copy of the MPL was not distributed with this file,
# You can obtain one at http://mozilla.org/MPL/2.0/.
#
# Copyright (C) 2011-2014 Star2Billing S.L.
#
# The Initial Developer of the Original Code is
# Arezqui Belaid <info@star2billing.com>
#
from django.contrib.admin import SimpleListFilter
from django.utils.translation import ugettext as _
from appointment.function_def import manager_list_of_calendar_user
from appointment.models.users import CalendarUserProfile


class ManagerFilter(SimpleListFilter):
    title = _('manager')
    parameter_name = 'manager'

    def lookups(self, request, model_admin):
        """
        Returns a list of tuples. The first element in each
        tuple is the coded value for the option that will
        appear in the URL query. The second element is the
        human-readable name for the option that will appear
        in the right sidebar.
        """
        return manager_list_of_calendar_user()

    def queryset(self, request, queryset):
        """
        Returns the filtered queryset based on the value
        provided in the query string and retrievable via
        `self.value()`.
        """
        if self.value() is not None:
            calendar_user_id_list = CalendarUserProfile.objects.values_list('user_id', flat=True).filter(manager_id=self.value())
            return queryset.filter(id__in=calendar_user_id_list)
        else:
            return queryset

########NEW FILE########
__FILENAME__ = settings
from django.conf import settings
from django.core.exceptions import ImproperlyConfigured

fdow_default = 0  # Sunday

# Look for FIRST_DAY_OF_WEEK as a locale setting
fdow = 'FIRST_DAY_OF_WEEK'
try:
    FIRST_DAY_OF_WEEK = int(fdow)
except ValueError:
    # Let's try our settings
    fdow = getattr(settings, 'FIRST_DAY_OF_WEEK', fdow_default)
    FIRST_DAY_OF_WEEK = int(fdow)
except ValueError:
    raise ImproperlyConfigured("FIRST_DAY_OF_WEEK must be an integer between 0 and 6")

AUTH_USER_MODEL = settings.AUTH_USER_MODEL
# whether to display cancelled occurrences
# (if they are displayed then they have a css class "cancelled")
# this controls behaviour of Period.classify_occurrence method
SHOW_CANCELLED_OCCURRENCES = getattr(settings, 'SHOW_CANCELLED_OCCURRENCES',
                                     False)

# Callable used to check if a user has edit permissions to event
# (and occurrence). Used by check_edit_permission decorator
# if ob==None we check permission to add occurrence
CHECK_PERMISSION_FUNC = getattr(settings, 'CHECK_PERMISSION_FUNC', None)
if not CHECK_PERMISSION_FUNC:
    def check_edit_permission(ob, user):
        return user.is_authenticated()

    CHECK_PERMISSION_FUNC = check_edit_permission

# Callable used to customize the event list given for a calendar and user
# (e.g. all events on that calendar, those events plus another calendar's events,
# or the events filtered based on user permissions)
# Imports have to be placed within the function body to avoid circular imports
GET_EVENTS_FUNC = getattr(settings, 'GET_EVENTS_FUNC', None)
if not GET_EVENTS_FUNC:
    def get_events(request, calendar):
        return calendar.event_set.all()

    GET_EVENTS_FUNC = get_events

# URL to redirect to to after an occurrence is canceled
OCCURRENCE_CANCEL_REDIRECT = getattr(settings, 'OCCURRENCE_CANCEL_REDIRECT', None)

########NEW FILE########
__FILENAME__ = constants
#
# Newfies-Dialer License
# http://www.newfies-dialer.org
#
# This Source Code Form is subject to the terms of the Mozilla Public
# License, v. 2.0. If a copy of the MPL was not distributed with this file,
# You can obtain one at http://mozilla.org/MPL/2.0/.
#
# Copyright (C) 2011-2014 Star2Billing S.L.
#
# The Initial Developer of the Original Code is
# Arezqui Belaid <info@star2billing.com>
#

from django.utils.translation import ugettext_lazy as _
from django_lets_go.utils import Choice


class EVENT_STATUS(Choice):
    PENDING = 1, _('pending').upper()
    COMPLETED = 2, _('completed').upper()
    PAUSED = 3, _('paused').upper()


class ALARM_STATUS(Choice):
    PENDING = 1, _('pending').upper()
    IN_PROCESS = 2, _('in_process').upper()
    FAILURE = 3, _("failure").upper()
    RETRY = 4, _('retry').upper()
    SUCCESS = 5, _('success').upper()


class ALARM_RESULT(Choice):
    NORESULT = 0, _('no result').upper()
    CONFIRMED = 1, _('confirmed').upper()
    CANCELLED = 2, _('cancelled').upper()
    RESCHEDULED = 3, _('rescheduled').upper()


class ALARM_METHOD(Choice):
    CALL = 1, _('call').upper()
    SMS = 2, _('sms').upper()
    EMAIL = 3, _('email').upper()


class ALARMREQUEST_STATUS(Choice):
    PENDING = 1, _("pending").upper()
    IN_PROCESS = 2, _("in_process").upper()
    FAILURE = 3, _("failure").upper()
    RETRY = 4, _("retry").upper()
    SUCCESS = 5, _("success").upper()


class CALENDAR_SETTING_COLUMN_NAME(Choice):
    label = _('label')
    callerid = _('caller ID Number')
    caller_name = _('caller ID Name')
    call_timeout = _('call Timeout')
    survey = _('survey')
    aleg_gateway = _('A-leg Gateway')
    sms_gateway = _('SMS Gateway')


class CALENDAR_USER_COLUMN_NAME(Choice):
    name = _('name')
    email = _('email')
    calendar_setting = _('Calendar Setting')
    date = _('date')


class CALENDAR_COLUMN_NAME(Choice):
    name = _('name')
    user = _('calendar user')
    max_concurrent = _('max concurrent')
    created_date = _('date')


class EVENT_COLUMN_NAME(Choice):
    start = _('start')
    end = _('end')
    title = _('title')
    end_recurring_period = _('end period')
    calendar = _('calendar')
    status = _('status')
    created_on = _('date')


class ALARM_COLUMN_NAME(Choice):
    alarm_phonenumber = _('phone number')
    alarm_email = _('email')
    daily_start = _('daily start')
    daily_stop = _('daily stop')
    method = _('method')
    survey = _('survey')
    event = _('event')
    date_start_notice = _('start notice')
    status = _('status')

########NEW FILE########
__FILENAME__ = forms
#
# Newfies-Dialer License
# http://www.newfies-dialer.org
#
# This Source Code Form is subject to the terms of the Mozilla Public
# License, v. 2.0. If a copy of the MPL was not distributed with this file,
# You can obtain one at http://mozilla.org/MPL/2.0/.
#
# Copyright (C) 2011-2014 Star2Billing S.L.
#
# The Initial Developer of the Original Code is
# Arezqui Belaid <info@star2billing.com>
#
from django import forms
from django.forms import ModelForm
from django.conf import settings
from django.utils.translation import ugettext as _
from django.contrib.auth.forms import UserCreationForm, AdminPasswordChangeForm, UserChangeForm
from appointment.models.users import CalendarUserProfile, CalendarUser, CalendarSetting
from appointment.models.events import Event
from appointment.models.calendars import Calendar
from appointment.models.alarms import Alarm
from appointment.constants import EVENT_STATUS
from appointment.function_def import get_calendar_user_id_list, get_calendar_user_list,\
    get_calendar_list, get_all_calendar_user_id_list, manager_list_of_calendar_user
from survey.models import Survey
from user_profile.models import UserProfile
from mod_utils.forms import SaveUserModelForm
from bootstrap3_datetime.widgets import DateTimePicker
from mod_utils.forms import common_submit_buttons
from crispy_forms.helper import FormHelper
from crispy_forms.bootstrap import TabHolder, Tab
from crispy_forms.layout import Layout, Div, Fieldset, HTML


class CalendarUserPasswordChangeForm(AdminPasswordChangeForm):
    def __init__(self, *args, **kwargs):
        super(CalendarUserPasswordChangeForm, self).__init__(*args, **kwargs)
        self.helper = FormHelper()
        self.helper.form_tag = False
        self.helper.form_class = 'well'
        self.helper.layout = Layout(
            Fieldset('', 'password1', 'password2', css_class='col-md-4')
        )


class CalendarUserCreationForm(UserCreationForm):
    calendar_setting_id = forms.ChoiceField(label=_('calendar setting'), required=True, choices=[('', '---')])

    def __init__(self, manager, *args, **kwargs):
        super(CalendarUserCreationForm, self).__init__(*args, **kwargs)
        self.helper = FormHelper()
        self.helper.form_tag = False
        self.helper.disable_csrf = False
        self.helper.form_class = 'well'
        self.helper.layout = Layout(
            Fieldset('', 'username', 'password1', 'password2', 'calendar_setting_id', css_class='col-md-6 col-xs-8')
        )
        cal_setting_list = []
        setting_list = CalendarSetting.objects.filter(user=manager)
        cal_setting_list.append(('', _('select calendar setting').title()))
        for i in setting_list:
            cal_setting_list.append((i.id, i.label))
        self.fields['calendar_setting_id'].choices = cal_setting_list


class CalendarUserChangeDetailExtendForm(ModelForm):
    """A form used to change the detail of a CalendarUser in the manager UI."""

    class Meta:
        model = CalendarUserProfile
        exclude = ('manager', 'user', )

    def __init__(self, user, *args, **kwargs):
        super(CalendarUserChangeDetailExtendForm, self).__init__(*args, **kwargs)
        self.helper = FormHelper()
        self.helper.form_tag = False
        self.helper.disable_csrf = False
        css_class = 'col-md-6'
        self.helper.layout = Layout(
            Div(
                Div('calendar_setting', css_class=css_class),
                Div('accountcode', css_class=css_class),
                Div('address', css_class=css_class),
                Div('city', css_class=css_class),
                Div('state', css_class=css_class),
                Div('country', css_class=css_class),
                Div('zip_code', css_class=css_class),
                Div('phone_no', css_class=css_class),
                Div('fax', css_class=css_class),
                Div('company_name', css_class=css_class),
                Div('company_website', css_class=css_class),
                Div('language', css_class=css_class),
                Div('note', css_class=css_class),
                css_class='row'
            ),
        )
        list_calendar_setting = []
        list_calendar_setting.append((0, _('select calendar setting').title()))
        for l in CalendarSetting.objects.filter(user=user).order_by('id'):
            list_calendar_setting.append((l.id, l.label))
        self.fields['calendar_setting'].choices = list_calendar_setting


class CalendarUserProfileForm(ModelForm):
    """CalendarUserProfileForm"""

    class Meta:
        model = CalendarUserProfile

    def __init__(self, *args, **kwargs):
        super(CalendarUserProfileForm, self).__init__(*args, **kwargs)
        self.fields['manager'].choices = manager_list_of_calendar_user()


class CalendarSettingForm(SaveUserModelForm):
    """CalendarSetting ModelForm"""

    class Meta:
        model = CalendarSetting
        exclude = ('user', )

    def __init__(self, user, *args, **kwargs):
        super(CalendarSettingForm, self).__init__(*args, **kwargs)
        self.helper = FormHelper()
        css_class = 'col-md-6'

        self.helper.layout = Layout(
            Div(
                Div('label', css_class=css_class),
                Div('callerid', css_class=css_class),
                Div('caller_name', css_class=css_class),
                Div('call_timeout', css_class=css_class),
                Div('survey', css_class=css_class),
                Div('aleg_gateway', css_class=css_class),
                Div('sms_gateway', css_class=css_class),
                css_class='row'
            ),
        )
        if settings.AMD:
            self.helper.layout.append(
                Div(
                    Div(
                        HTML("""
                            <div class="btn-group" data-toggle="buttons">
                                <label for="{{ form.voicemail.auto_id }}">{{ form.voicemail.label }}</label><br/>
                                <div class="make-switch switch-small">
                                {{ form.voicemail }}
                                </div>
                            </div>
                            """), css_class='col-md-12 col-xs-10'
                    ),
                    css_class='row'
                ),
            )
            self.helper.layout.append(
                Div(
                    Div('amd_behavior', css_class=css_class),
                    Div('voicemail_audiofile', css_class=css_class),
                    css_class='row'
                )
            )

        if self.instance.id:
            form_action = common_submit_buttons(default_action='update')
        else:
            form_action = common_submit_buttons(default_action='add')

        self.helper.layout.append(form_action)

        list_survey = []
        list_survey.append((0, '---'))
        for l in Survey.objects.values_list('id', 'name').filter(user=user).order_by('id'):
            list_survey.append((l[0], l[1]))
        self.fields['survey'].choices = list_survey

        list_gateway = []
        list_gateway.append((0, '---'))
        for l in UserProfile.objects.get(user=user).userprofile_gateway.all():
            list_gateway.append((l.id, l.name))
        self.fields['aleg_gateway'].choices = list_gateway


class CalendarUserNameChangeForm(UserChangeForm):
    """CalendarUserNameChangeForm is used to change CalendarUser username"""

    class Meta:
        model = CalendarUser
        fields = ["username"]

    def __init__(self, *args, **kwargs):
        super(CalendarUserNameChangeForm, self).__init__(*args, **kwargs)


class CalendarForm(ModelForm):
    """CalendarForm"""

    class Meta:
        model = Calendar

    def __init__(self, user, *args, **kwargs):
        super(CalendarForm, self).__init__(*args, **kwargs)
        self.helper = FormHelper()
        self.helper.form_class = 'well'
        self.helper.layout = Layout(
            Fieldset('', 'name', 'user', 'max_concurrent', css_class='col-xs-4')
        )
        if self.instance.id:
            form_action = common_submit_buttons(default_action='update')
        else:
            form_action = common_submit_buttons(default_action='add')
        self.helper.layout.append(form_action)
        calendar_user_list = get_calendar_user_id_list(user)
        self.fields['user'].choices = get_calendar_user_list(calendar_user_list)


class AdminCalendarForm(ModelForm):
    class Meta:
        model = Calendar

    def __init__(self, *args, **kwargs):
        super(AdminCalendarForm, self).__init__(*args, **kwargs)
        calendar_user_list = get_all_calendar_user_id_list()
        self.fields['user'].choices = get_calendar_user_list(calendar_user_list)


class EventAdminForm(ModelForm):
    """Admin Event ModelForm"""

    class Meta:
        model = Event
        exclude = ('parent_event', 'occ_count', )

    def __init__(self, *args, **kwargs):
        super(EventAdminForm, self).__init__(*args, **kwargs)

        calendar_user_list = get_all_calendar_user_id_list()
        self.fields['creator'].choices = get_calendar_user_list(calendar_user_list)


class EventForm(ModelForm):
    """Event ModelForm"""

    class Meta:
        model = Event
        exclude = ('status', 'parent_event', 'occ_count', )
        widgets = {
            'start': DateTimePicker(options={"format": "YYYY-MM-DD HH:mm:ss"}),
            'end': DateTimePicker(options={"format": "YYYY-MM-DD HH:mm:ss"}),
            'end_recurring_period': DateTimePicker(options={"format": "YYYY-MM-DD HH:mm:ss"}),
            'created_on': DateTimePicker(options={"format": "YYYY-MM-DD HH:mm:ss"}),
        }

    def __init__(self, user, *args, **kwargs):
        super(EventForm, self).__init__(*args, **kwargs)
        self.helper = FormHelper()
        self.helper.form_class = 'well'
        css_class = 'col-md-6'
        self.helper.layout = Layout(
            Fieldset(_('event settings').capitalize()),
            Div(
                Div('title', css_class=css_class),
                Div('calendar', css_class=css_class),
                Div('creator', css_class=css_class),
                Div('created_on', css_class=css_class),
                Div('rule', css_class=css_class),
                Div('end_recurring_period', css_class=css_class),
                Div('start', css_class=css_class),
                Div('end', css_class=css_class),
                css_class='row'
            ),
            Div(
                Div('description', css_class=css_class),
                Div('data', css_class=css_class),
                css_class='row'
            ),
        )
        if self.instance.id:
            common_submit_buttons(self.helper.layout, 'update')
        else:
            common_submit_buttons(self.helper.layout)

        calendar_user_list = get_calendar_user_id_list(user)
        self.fields['calendar'].choices = get_calendar_list(calendar_user_list)
        self.fields['creator'].choices = get_calendar_user_list(calendar_user_list)


class EventSearchForm(forms.Form):
    """Event Search Form"""
    start_date = forms.CharField(label=_('start date').capitalize(), required=False, max_length=20,
        widget=DateTimePicker(options={"format": "YYYY-MM-DD HH:mm:ss"}))
    calendar_id = forms.ChoiceField(label=_('calendar').capitalize(), required=False, choices=[('0', '---')])
    calendar_user_id = forms.ChoiceField(label=_('calendar user').capitalize(), required=False, choices=[('0', '---')])

    def __init__(self, user, *args, **kwargs):
        super(EventSearchForm, self).__init__(*args, **kwargs)
        self.helper = FormHelper()
        self.helper.form_class = 'well'
        css_class = 'col-md-4'
        self.helper.layout = Layout(
            Div(
                Div('start_date', css_class=css_class),
                Div('calendar_id', css_class=css_class),
                Div('calendar_user_id', css_class=css_class),
                css_class='row'
            ),
        )
        common_submit_buttons(self.helper.layout, 'search')
        calendar_user_list = get_calendar_user_id_list(user)
        self.fields['calendar_id'].choices = get_calendar_list(calendar_user_list)
        self.fields['calendar_user_id'].choices = get_calendar_user_list(calendar_user_list)


class AlarmForm(ModelForm):
    """Alarm ModelForm"""

    class Meta:
        model = Alarm
        exclude = ('status', )
        widgets = {
            'date_start_notice': DateTimePicker(options={"format": "YYYY-MM-DD HH:mm:ss"}),
        }

    def __init__(self, user, *args, **kwargs):
        super(AlarmForm, self).__init__(*args, **kwargs)
        self.helper = FormHelper()

        if self.instance.id:
            form_action = common_submit_buttons(default_action='update')
        else:
            form_action = common_submit_buttons(default_action='add')

        css_class = 'col-md-6'
        self.helper.layout = Layout(
            TabHolder(
                Tab(_('general settings').title(),
                    Div(
                        Div('date_start_notice', css_class=css_class),
                        Div('event', css_class=css_class),
                        Div('alarm_phonenumber', css_class=css_class),
                        Div('alarm_email', css_class=css_class),
                        Div('method', css_class=css_class),
                        Div('survey', css_class=css_class),
                        Div('mail_template', css_class=css_class),
                        Div('sms_template', css_class=css_class),
                        css_class='row'
                    ),
                    form_action,
                    css_class='well'
                    ),
                Tab(_('alarm settings').title(),
                    Div(
                        Div('daily_start', css_class=css_class),
                        Div('daily_stop', css_class=css_class),
                        Div('maxretry', css_class=css_class),
                        Div('retry_delay', css_class=css_class),
                        Div('advance_notice', css_class=css_class),
                        css_class='row'
                    ),
                    form_action,
                    css_class='well'
                    ),
                Tab(_('result settings').title(),
                    Div(
                        Div('result', css_class=css_class),
                        Div('url_cancel', css_class=css_class),
                        Div('phonenumber_sms_failure', css_class=css_class),
                        Div('url_confirm', css_class=css_class),
                        Div('phonenumber_transfer', css_class=css_class),
                        css_class='row'
                    ),
                    form_action,
                    css_class='well'
                    ),
            ),
        )

        list_survey = []
        list_survey.append((0, '---'))
        for l in Survey.objects.values_list('id', 'name').filter(user=user).order_by('id'):
            list_survey.append((l[0], l[1]))
        self.fields['survey'].choices = list_survey

        calendar_user_list = get_calendar_user_id_list(user)

        list_event = []
        list_event.append((0, '---'))
        event_list = Event.objects.values_list('id', 'title')\
            .filter(calendar__user_id__in=calendar_user_list,
                    status=EVENT_STATUS.PENDING).order_by('id')
        for l in event_list:
            list_event.append((l[0], l[1]))
        self.fields['event'].choices = list_event

########NEW FILE########
__FILENAME__ = function_def
#
# Newfies-Dialer License
# http://www.newfies-dialer.org
#
# This Source Code Form is subject to the terms of the Mozilla Public
# License, v. 2.0. If a copy of the MPL was not distributed with this file,
# You can obtain one at http://mozilla.org/MPL/2.0/.
#
# Copyright (C) 2011-2014 Star2Billing S.L.
#
# The Initial Developer of the Original Code is
# Arezqui Belaid <info@star2billing.com>
#
from appointment.models.users import CalendarUserProfile, CalendarUser
from appointment.models.calendars import Calendar
from user_profile.models import Manager


def get_all_calendar_user_id_list():
    """get calendar user id list for logged in user"""
    return CalendarUserProfile.objects.values_list('user_id', flat=True).all().order_by('id')


def get_calendar_user_id_list(user):
    """get calendar user id list for logged in user"""
    return CalendarUserProfile.objects.values_list('user_id', flat=True).filter(manager=user).order_by('id')


def get_calendar_user_list(calendar_user_list):
    """get calendar user list from calendar_user_list"""
    list_calendar_user = []
    list_calendar_user.append((0, '---'))
    for l in CalendarUser.objects.values_list('id', 'username').filter(id__in=calendar_user_list).order_by('id'):
        list_calendar_user.append((l[0], l[1]))
    return list_calendar_user


def get_calendar_list(calendar_user_list):
    """get calendar list from calendar_user_list"""
    list_calendar = []
    list_calendar.append((0, '---'))
    for l in Calendar.objects.values_list('id', 'name').filter(user_id__in=calendar_user_list).order_by('id'):
        list_calendar.append((l[0], l[1]))

    return list_calendar


def manager_list_of_calendar_user():
    """Return all managers of the system"""
    manager_list = []
    calendar_user_id_list = get_all_calendar_user_id_list()
    obj_list = Manager.objects.values_list('id', 'username')\
        .filter(is_staff=False, is_superuser=False)\
        .exclude(id__in=calendar_user_id_list).order_by('id')
    for l in obj_list:
        manager_list.append((l[0], l[1]))
    return manager_list

########NEW FILE########
__FILENAME__ = load_example_data
from django.core.management.base import NoArgsCommand


class Command(NoArgsCommand):
    help = "Load some sample data into the db"

    def handle_noargs(self, **options):
        import datetime
        from schedule.models import Calendar
        from schedule.models import Event
        from schedule.models import Rule

        print "checking for existing data ..."
        try:
            cal = Calendar.objects.get(name="Example Calendar")
            print "It looks like you already have loaded this sample data, quitting."
            import sys
            sys.exit(1)
        except Calendar.DoesNotExist:
            print "Sample data not found in db."
            print "Install it..."

        print "Create Example Calendar ..."
        cal = Calendar(name="Example Calendar", slug="example")
        cal.save()
        print "The Example Calendar is created."
        print "Do we need to install the most common rules?"
        try:
            rule = Rule.objects.get(name="Daily")
        except Rule.DoesNotExist:
            print "Need to install the basic rules"
            rule = Rule(frequency="YEARLY", name="Yearly", description="will recur once every Year")
            rule.save()
            print "YEARLY recurrence created"
            rule = Rule(frequency="MONTHLY", name="Monthly", description="will recur once every Month")
            rule.save()
            print "Monthly recurrence created"
            rule = Rule(frequency="WEEKLY", name="Weekly", description="will recur once every Week")
            rule.save()
            print "Weekly recurrence created"
            rule = Rule(frequency="DAILY", name="Daily", description="will recur once every Day")
            rule.save()
            print "Daily recurrence created"
        print "Rules installed."

        print "Create some events"
        rule = Rule.objects.get(frequency="WEEKLY")
        data = {
            'title': 'Exercise',
            'start': datetime.datetime(2008, 11, 3, 8, 0),
            'end': datetime.datetime(2008, 11, 3, 9, 0),
            'end_recurring_period': datetime.datetime(2009, 6, 1, 0, 0),
            'rule': rule,
            'calendar': cal
        }
        event = Event(**data)
        event.save()

        data = {
            'title': 'Exercise',
            'start': datetime.datetime(2008, 11, 5, 15, 0),
            'end': datetime.datetime(2008, 11, 5, 16, 30),
            'end_recurring_period': datetime.datetime(2009, 6, 1, 0, 0),
            'rule': rule,
            'calendar': cal
        }
        event = Event(**data)
        event.save()

        data = {
            'title': 'Exercise',
            'start': datetime.datetime(2008, 11, 7, 8, 0),
            'end': datetime.datetime(2008, 11, 7, 9, 30),
            'end_recurring_period': datetime.datetime(2009, 6, 1, 0, 0),
            'rule': rule,
            'calendar': cal
        }
        event = Event(**data)
        event.save()

        rule = Rule.objects.get(frequency="MONTHLY")
        data = {
            'title': 'Pay Mortgage',
            'start': datetime.datetime(2008, 11, 1, 14, 0),
            'end': datetime.datetime(2008, 11, 1, 14, 30),
            'end_recurring_period': datetime.datetime(2009, 10, 2, 0, 0),
            'rule': rule,
            'calendar': cal
        }
        event = Event(**data)
        event.save()

        rule = Rule.objects.get(frequency="YEARLY")
        data = {
            'title': "Rock's Birthday Party",
            'start': datetime.datetime(2008, 12, 11, 19, 0),
            'end': datetime.datetime(2008, 12, 11, 23, 59),
            'end_recurring_period': datetime.datetime(2009, 12, 22, 0, 0),
            'rule': rule,
            'calendar': cal
        }
        event = Event(**data)
        event.save()

        data = {
            'title': 'Christmas Party',
            'start': datetime.datetime(2008, 12, 25, 19, 30),
            'end': datetime.datetime(2008, 12, 25, 23, 59),
            'end_recurring_period': datetime.datetime(2010, 12, 31, 0, 0),
            'rule': rule,
            'calendar': cal
        }
        event = Event(**data)
        event.save()

        data = {
            'title': 'New Pinax site goes live',
            'start': datetime.datetime(2009, 1, 6, 11, 0),
            'end': datetime.datetime(2009, 1, 6, 12, 00),
            'end_recurring_period': datetime.datetime(2009, 1, 7, 0, 0),
            'calendar': cal
        }
        event = Event(**data)
        event.save()

########NEW FILE########
__FILENAME__ = alarms
# -*- coding: utf-8 -*-
from django.db import models
from django.utils.translation import ugettext_lazy as _
from appointment.constants import ALARM_METHOD, ALARM_STATUS, ALARM_RESULT, \
    ALARMREQUEST_STATUS
from appointment.models.events import Event
from survey.models import Survey
from dialer_cdr.models import Callrequest
from mod_mailer.models import MailTemplate
from datetime import datetime
from django.utils.timezone import utc
from mod_sms.models import SMSTemplate


class Alarm(models.Model):
    """
    This is for Alarms / Reminders on events models.
    """
    alarm_phonenumber = models.CharField(max_length=50, blank=True, null=True,
                                         verbose_name=_("notify to phone number"))
    alarm_email = models.EmailField(blank=True, null=True,
                                    verbose_name=_('notify to email'))
    daily_start = models.TimeField(verbose_name=_('daily start'), default='00:00:00')
    daily_stop = models.TimeField(verbose_name=_('daily stop'), default='23:59:59')
    advance_notice = models.IntegerField(null=True, blank=True, default=0,
                                         verbose_name=_('advance notice'),
                                         help_text=_("Seconds to start processing an alarm before the alarm date/time"))
    maxretry = models.IntegerField(null=True, blank=True, default=0,
                                   verbose_name=_('max retry'),
                                   help_text=_("number of retries"))
    retry_delay = models.IntegerField(null=True, blank=True, default=0,
                                      verbose_name=_('retry delay'),
                                      help_text=_("Seconds to wait between retries"))
    num_attempt = models.IntegerField(null=True, blank=True, default=0,
                                     verbose_name=_('number of attempts'))
    method = models.IntegerField(choices=list(ALARM_METHOD),
                                 default=ALARM_METHOD.CALL,
                                 verbose_name=_("method"), blank=True, null=True)
    survey = models.ForeignKey(Survey, verbose_name=_("survey"),
                               blank=True, null=True,
                               related_name="survey")
    mail_template = models.ForeignKey(MailTemplate, verbose_name=_("mail"),
                                      blank=True, null=True,
                                      related_name="mail template")
    sms_template = models.ForeignKey(SMSTemplate, verbose_name=_("SMS"),
                                     blank=True, null=True,
                                     related_name="sms template")
    event = models.ForeignKey(Event, verbose_name=_("related to event"),
                              related_name="event")
    date_start_notice = models.DateTimeField(verbose_name=_('alarm date'),
                                             default=(lambda: datetime.utcnow().replace(tzinfo=utc)))
    status = models.IntegerField(choices=list(ALARM_STATUS), default=ALARM_STATUS.PENDING,
                                 verbose_name=_("status"))
    result = models.IntegerField(choices=list(ALARM_RESULT), default=ALARM_RESULT.NORESULT,
                                 verbose_name=_("result"), blank=True, null=True)
    # URL Cancel is used if an appointment is cancelled, we will need to do a mapping on IVR result
    url_cancel = models.CharField(max_length=250, blank=True, null=True, verbose_name=_("URL cancel"))
    # URL Confirm is used if an appointment is confirmed
    url_confirm = models.CharField(max_length=250, blank=True, null=True, verbose_name=_("URL confirm"))
    # When transfering for reschedule
    phonenumber_transfer = models.CharField(max_length=50, blank=True, null=True,
                                            verbose_name=_("phone number transfer"))
    #send SMS if all attempts to contact that persons didn't work
    phonenumber_sms_failure = models.CharField(max_length=50, blank=True, null=True,
                                               verbose_name=_("phone number SMS failure"))
    created_date = models.DateTimeField(auto_now_add=True, verbose_name=_('created date'))

    class Meta:
        permissions = (
            ("view_alarm", _('can see Alarm list')),
        )
        verbose_name = _('alarm')
        verbose_name_plural = _('alarms')
        app_label = "appointment"

    def __unicode__(self):
        if self.method:
            method = dict(ALARM_METHOD)[self.method]
            return u"%s - method:%s - %s" % (self.id, method, self.event)
        else:
            return u"%s - %s" % (self.id, self.event)

    def get_time_diff(self):
        if self.date_start_notice:
            tday = datetime.utcnow().replace(tzinfo=utc)
            timediff = self.date_start_notice - tday
            return timediff.total_seconds()

    def copy_alarm(self, new_event):
        """
        Create a copy of the Alarm
        """
        new_alarm = Alarm.objects.create(
            alarm_phonenumber=self.alarm_phonenumber,
            alarm_email=self.alarm_email,
            event=new_event,
            daily_start=self.daily_start,
            daily_stop=self.daily_stop,
            advance_notice=self.advance_notice,
            maxretry=self.maxretry,
            retry_delay=self.retry_delay,
            num_attempt=self.num_attempt,
            method=self.method,
            survey=self.survey,
            mail_template=self.mail_template,
            sms_template=self.sms_template,
            date_start_notice=self.date_start_notice,
            #result=self.result,
            url_cancel=self.url_cancel,
            phonenumber_sms_failure=self.phonenumber_sms_failure,
            url_confirm=self.url_confirm,
            phonenumber_transfer=self.phonenumber_transfer,
        )
        return new_alarm

    def retry_alarm(self):
        """
        Task to check if Alarm needs to be respooled after it failed
        """
        from appointment.tasks import perform_alarm
        # Use as follow:
        # if obj_alarmreq.alarm.maxretry >= obj_alarmreq.alarm.num_attempt:
        #     obj_alarmreq.update_status(ALARMREQUEST_STATUS.RETRY)
        #     retry_alarm(obj_alarmreq.alarm)
        #
        self.status = ALARM_STATUS.IN_PROCESS
        self.save()
        second_towait = self.retry_delay
        # If second_towait negative then set to 0 to be run directly
        if second_towait <= 0:
            perform_alarm.delay(self.event, self)
        else:
            # Call the Alarm in the future
            perform_alarm.apply_async(
                args=[self.event, self], countdown=second_towait)


class AlarmRequest(models.Model):
    """
    AlarmRequest : request for Alarms
    """
    alarm = models.ForeignKey(Alarm, blank=True, null=True, verbose_name=_("alarm"),
                              help_text=_("select alarm"), related_name="request_alarm")
    date = models.DateTimeField(verbose_name=_('date'), help_text=_("date when the alarm will be scheduled"))
    status = models.IntegerField(choices=list(ALARMREQUEST_STATUS), default=ALARMREQUEST_STATUS.PENDING,
                                 verbose_name=_("status"), blank=True, null=True)
    callstatus = models.IntegerField(null=True, blank=True, default=0)
    duration = models.IntegerField(null=True, blank=True, default=0)

    callrequest = models.ForeignKey(Callrequest, blank=True, null=True, verbose_name=_("Call Request"),
                                    help_text=_("select call request"), related_name="callrequest_alarm")
    created_date = models.DateTimeField(auto_now_add=True, verbose_name=_('date'))

    class Meta:
        permissions = (
            ("view_alarm_request", _('can see Alarm request list')),
        )
        verbose_name = _('alarm request')
        verbose_name_plural = _('alarm requests')
        app_label = "appointment"

    def update_status(self, status):
        self.status = status
        self.save()
        if status != ALARMREQUEST_STATUS.PENDING:
            self.alarm.status = self.status
            self.alarm.save()

    def __unicode__(self):
        return u"%s" % (self.id)

########NEW FILE########
__FILENAME__ = calendars
# -*- coding: utf-8 -*-
from django.db import models
from django.core.urlresolvers import reverse
from django.utils.translation import ugettext_lazy as _
from django.utils import timezone
from appointment.models.users import CalendarUser
import datetime
import pytz


class Calendar(models.Model):
    """
    This is for grouping events so that batch relations can be made to all
    events.  An example would be a project calendar.

    name: the name of the calendar
    events: all the events contained within the calendar.
    >>> calendar = Calendar(name = 'Test Calendar')
    >>> calendar.save()
    """
    name = models.CharField(verbose_name=_('name'), max_length=200)
    user = models.ForeignKey(CalendarUser, blank=True, null=True, verbose_name=_("calendar user"),
                             help_text=_("select user"), related_name="calendar user")
    max_concurrent = models.IntegerField(null=True, blank=True, default=0,
                                         help_text=_("Max concurrent is not implemented"))
    created_date = models.DateTimeField(auto_now_add=True, verbose_name=_('date'))

    class Meta:
        permissions = (
            ("view_calendar", _('Can see Calendar list')),
        )
        verbose_name = _('calendar')
        verbose_name_plural = _('calendars')
        app_label = "appointment"

    def __unicode__(self):
        return self.name

    @property
    def events(self):
        return self.event_set

    def get_recent(self, amount=5, in_datetime=datetime.datetime.now, tzinfo=pytz.utc):
        """
        This shortcut function allows you to get events that have started recently.

        amount is the amount of events you want in the queryset. The default is 5.

        in_datetime is the datetime you want to check against.  It defaults to datetime.datetime.now
        """
        return self.events.order_by('-start').filter(start__lt=timezone.now())[:amount]

    def get_absolute_url(self):
        return reverse('calendar_home', kwargs={'calendar_slug': self.slug})

    def add_event_url(self):
        return reverse('s_create_event_in_calendar', args=[self.slug])

########NEW FILE########
__FILENAME__ = events
# -*- coding: utf-8 -*-
from django.db import models
from django.core.urlresolvers import reverse
from django.template.defaultfilters import date
from django.utils.translation import ugettext, ugettext_lazy as _
from django.utils import timezone
from appointment.models.rules import Rule
from appointment.models.calendars import Calendar
from appointment.models.users import CalendarUser
from appointment.utils import OccurrenceReplacer
from appointment.constants import EVENT_STATUS
from dateutil import rrule
from dateutil.relativedelta import relativedelta
from datetime import datetime
from django.utils.timezone import utc
import jsonfield
import pytz


class Event(models.Model):
    """
    This model stores meta data for a event
    """
    title = models.CharField(verbose_name=_("label"), max_length=255)
    description = models.TextField(verbose_name=_("description"), null=True, blank=True)
    start = models.DateTimeField(default=(lambda: datetime.utcnow().replace(tzinfo=utc)),
                                 verbose_name=_("start"))
    end = models.DateTimeField(default=(lambda: datetime.utcnow().replace(tzinfo=utc) + relativedelta(hours=+1)),
                               verbose_name=_("end"), help_text=_("Must be later than the start"))
    creator = models.ForeignKey(CalendarUser, null=False, blank=False,
                                verbose_name=_("calendar user"), related_name='creator')
    created_on = models.DateTimeField(verbose_name=_("created on"), default=timezone.now)
    end_recurring_period = models.DateTimeField(verbose_name=_("end recurring period"), null=True, blank=True,
                                                default=(lambda: datetime.utcnow().replace(tzinfo=utc) + relativedelta(months=+1)),
                                                help_text=_("Used if the event recurs"))
    rule = models.ForeignKey(Rule, null=True, blank=True,
                             verbose_name=_("rule"), help_text=_("Recuring rules"))
    calendar = models.ForeignKey(Calendar, null=False, blank=False)

    notify_count = models.IntegerField(verbose_name=_("notify count"), null=True, blank=True, default=0)
    status = models.IntegerField(choices=list(EVENT_STATUS), default=EVENT_STATUS.PENDING,
                                 verbose_name=_("status"), blank=True, null=True)
    data = jsonfield.JSONField(null=True, blank=True, verbose_name=_('additional data (JSON)'),
                               help_text=_("data in JSON format, e.g. {\"cost\": \"40 euro\"}"))
    # Keep a trace of the original event of all occurences
    parent_event = models.ForeignKey('self', null=True, blank=True, related_name="parent event")
    # Occurence count, this is an increment that will add 1 on the new event created
    # This helps to know that an event is the nth created
    occ_count = models.IntegerField(null=True, blank=True, default=0,
                                    verbose_name=_("occurrence count"))

    class Meta:
        permissions = (
            ("view_event", _('can see Event list')),
        )
        verbose_name = _('event')
        verbose_name_plural = _('events')
        app_label = "appointment"

    def __unicode__(self):
        date_format = u'%s' % ugettext("DATE_FORMAT")
        return '%(title)s: %(start)s' % {
            'title': self.title,
            'start': date(self.start, date_format),
        }

    def get_absolute_url(self):
        return reverse('event', args=[self.id])

    def get_occurrences(self, start, end):
        """
        >>> rule = Rule(frequency="MONTHLY", name="Monthly")
        >>> rule.save()
        >>> event = Event(rule=rule, start=datetime.datetime(2008,1,1,tzinfo=pytz.utc), end=datetime.datetime(2008,1,2))
        >>> event.rule
        <Rule: Monthly>
        >>> occurrences = event.get_occurrences(datetime.datetime(2008,1,24), datetime.datetime(2008,3,2))
        >>> ["%s to %s" %(o.start, o.end) for o in occurrences]
        ['2008-02-01 00:00:00+00:00 to 2008-02-02 00:00:00+00:00', '2008-03-01 00:00:00+00:00 to 2008-03-02 00:00:00+00:00']

        Ensure that if an event has no rule, that it appears only once.

        >>> event = Event(start=datetime.datetime(2008,1,1,8,0), end=datetime.datetime(2008,1,1,9,0))
        >>> occurrences = event.get_occurrences(datetime.datetime(2013,1,24), datetime.datetime(2014,3,2))
        >>> ["%s to %s" %(o.start, o.end) for o in occurrences]
        []
        """
        persisted_occurrences = self.occurrence_set.all()
        occ_replacer = OccurrenceReplacer(persisted_occurrences)
        occurrences = self._get_occurrence_list(start, end)
        final_occurrences = []
        for occ in occurrences:
            # replace occurrences with their persisted counterparts
            if occ_replacer.has_occurrence(occ):
                p_occ = occ_replacer.get_occurrence(occ)
                # ...but only if they are within this period
                if p_occ.start < end and p_occ.end >= start:
                    final_occurrences.append(p_occ)
            else:
                final_occurrences.append(occ)
        # then add persisted occurrences which originated outside of this period but now
        # fall within it
        final_occurrences += occ_replacer.get_additional_occurrences(start, end)
        return final_occurrences

    def get_next_occurrence(self):
        """
        TODO: implement this

        >>> rule = Rule(frequency="MONTHLY", name="Monthly")
        >>> rule.save()
        >>> event = Event(rule=rule, start=datetime.datetime(2008,1,1,tzinfo=pytz.utc), end=datetime.datetime(2008,1,2))
        >>> event.rule
        <Rule: Monthly>
        >>> event.get_next_occurrence()
        2008-02-02 00:00:00+00:00
        """
        start = datetime.utcnow().replace(tzinfo=utc)
        for occ in self.get_rrule_object():
            if occ.replace(tzinfo=None) > start:
                return occ  # return the next occurent

    def copy_event(self, next_occurrence):
        """create new event with next occurrence"""

        if self.parent_event:
            parent_event = self.parent_event
        else:
            parent_event = self

        #find the new event end
        event_end = next_occurrence + (self.end - self.start)

        new_event = Event.objects.create(
            start=next_occurrence,
            end=event_end,
            title=self.title,
            description=self.description,
            creator=self.creator,
            rule=self.rule,
            end_recurring_period=self.end_recurring_period,
            calendar=self.calendar,
            notify_count=self.notify_count,
            data=self.data,
            # implemented parent_event & occ_count
            parent_event=parent_event,
            occ_count=self.occ_count + 1,
        )

        return new_event

    def update_last_child_status(self, status):
        """we will search for the last created child of an event and update his status
        to the status value

        Note for the integrators: We can pause an event for 12hours but after that we will have to
        stop and create the new event.
        """
        obj_events = Event.objects.filter(parent_event=self).order_by('-created_on')
        if obj_events:
            obj_events[0].status = status
            obj_events[0].save()

    def get_list_child(self):
        """we will list childs of an event"""
        obj_events = Event.objects.filter(parent_event=self).order_by('created_on')
        return obj_events

    def get_rrule_object(self):
        if self.rule is not None:
            params = self.rule.get_params()
            frequency = 'rrule.%s' % self.rule.frequency
            return rrule.rrule(eval(frequency), dtstart=self.start, **params)
        else:
            return []

    def _create_occurrence(self, start, end=None):
        if end is None:
            end = start + (self.end - self.start)
        return Occurrence(event=self, start=start, end=end, original_start=start, original_end=end)

    def get_occurrence(self, date):
        if timezone.is_naive(date):
            date = timezone.make_aware(date, timezone.utc)
        rule = self.get_rrule_object()
        if rule:
            next_occurrence = rule.after(date, inc=True)
        else:
            next_occurrence = self.start
        if next_occurrence == date:
            try:
                return Occurrence.objects.get(event=self, original_start=date)
            except Occurrence.DoesNotExist:
                return self._create_occurrence(next_occurrence)

    def _get_occurrence_list(self, start, end):
        """
        returns a list of occurrences for this event from start to end.
        """
        difference = (self.end - self.start)
        if self.rule is not None:
            occurrences = []
            if self.end_recurring_period and self.end_recurring_period < end:
                end = self.end_recurring_period
            rule = self.get_rrule_object()
            o_starts = rule.between(start - difference, end - difference, inc=True)
            for o_start in o_starts:
                o_end = o_start + difference
                occurrences.append(self._create_occurrence(o_start, o_end))
            return occurrences
        else:
            # check if event is in the period
            if self.start < end and self.end > start:
                return [self._create_occurrence(self.start)]
            else:
                return []

    def _occurrences_after_generator(self, after=None, tzinfo=pytz.utc):
        """
        returns a generator that produces unpresisted occurrences after the
        datetime ``after``.
        """

        if after is None:
            after = timezone.now()
        rule = self.get_rrule_object()
        if rule is None:
            if self.end > after:
                yield self._create_occurrence(self.start, self.end)
            raise StopIteration
        date_iter = iter(rule)
        difference = self.end - self.start
        while True:
            o_start = date_iter.next()
            if o_start > self.end_recurring_period:
                raise StopIteration
            o_end = o_start + difference
            if o_end > after:
                yield self._create_occurrence(o_start, o_end)

    def occurrences_after(self, after=None):
        """
        returns a generator that produces occurrences after the datetime
        ``after``.  Includes all of the persisted Occurrences.
        """
        occ_replacer = OccurrenceReplacer(self.occurrence_set.all())
        generator = self._occurrences_after_generator(after)
        while True:
            next = generator.next()
            yield occ_replacer.get_occurrence(next)


class Occurrence(models.Model):
    event = models.ForeignKey(Event, verbose_name=_("event"))
    title = models.CharField(_("title"), max_length=255, blank=True, null=True)
    description = models.TextField(_("description"), blank=True, null=True)
    start = models.DateTimeField(_("start"))
    end = models.DateTimeField(_("end"))
    cancelled = models.BooleanField(_("cancelled"), default=False)
    original_start = models.DateTimeField(_("original start"))
    original_end = models.DateTimeField(_("original end"))

    class Meta:
        verbose_name = _("occurrence")
        verbose_name_plural = _("occurrences")
        app_label = "appointment"

    def __init__(self, *args, **kwargs):
        super(Occurrence, self).__init__(*args, **kwargs)
        #if self.title is None:
        #    self.title = self.event.title
        #if self.description is None:
        #    self.description = self.event.description

    def moved(self):
        return self.original_start != self.start or self.original_end != self.end
    moved = property(moved)

    def move(self, new_start, new_end):
        self.start = new_start
        self.end = new_end
        self.save()

    def cancel(self):
        self.cancelled = True
        self.save()

    def uncancel(self):
        self.cancelled = False
        self.save()

    def get_absolute_url(self):
        if self.pk is not None:
            return reverse('occurrence', kwargs={'occurrence_id': self.pk,
                'event_id': self.event.id})
        return reverse('occurrence_by_date', kwargs={
            'event_id': self.event.id,
            'year': self.start.year,
            'month': self.start.month,
            'day': self.start.day,
            'hour': self.start.hour,
            'minute': self.start.minute,
            'second': self.start.second,
        })

    def get_cancel_url(self):
        if self.pk is not None:
            return reverse('cancel_occurrence', kwargs={'occurrence_id': self.pk,
                'event_id': self.event.id})
        return reverse('cancel_occurrence_by_date', kwargs={
            'event_id': self.event.id,
            'year': self.start.year,
            'month': self.start.month,
            'day': self.start.day,
            'hour': self.start.hour,
            'minute': self.start.minute,
            'second': self.start.second,
        })

    def get_edit_url(self):
        if self.pk is not None:
            return reverse('edit_occurrence', kwargs={'occurrence_id': self.pk,
                'event_id': self.event.id})
        return reverse('edit_occurrence_by_date', kwargs={
            'event_id': self.event.id,
            'year': self.start.year,
            'month': self.start.month,
            'day': self.start.day,
            'hour': self.start.hour,
            'minute': self.start.minute,
            'second': self.start.second,
        })

    def __unicode__(self):
        return ugettext("%(start)s to %(end)s") % {
            'start': self.start,
            'end': self.end,
        }

    def __cmp__(self, other):
        rank = cmp(self.start, other.start)
        if rank == 0:
            return cmp(self.end, other.end)
        return rank

    def __eq__(self, other):
        return self.original_start == other.original_start and self.original_end == other.original_end

########NEW FILE########
__FILENAME__ = rules
from django.db import models
from django.utils.translation import ugettext_lazy as _
from dateutil import rrule

freqs = (
    ("YEARLY", _("Yearly")),
    ("MONTHLY", _("Monthly")),
    ("WEEKLY", _("Weekly")),
    ("DAILY", _("Daily")),
    ("HOURLY", _("Hourly")),
    ("MINUTELY", _("Minutely")),
    ("SECONDLY", _("Secondly"))
)


class Rule(models.Model):
    """
    This defines a rule by which an event will recur.  This is defined by the
    rrule in the dateutil documentation.

    * name - the human friendly name of this kind of recursion.
    * description - a short description describing this type of recursion.
    * frequency - the base recurrence period
    * param - extra params required to define this type of recursion. The params
      should follow this format:

        param = [rruleparam:value;]*
        rruleparam = see list below
        value = int[,int]*

      The options are: (documentation for these can be found at
      http://labix.org/python-dateutil#head-470fa22b2db72000d7abe698a5783a46b0731b57)
        ** count
        ** bysetpos
        ** bymonth
        ** bymonthday
        ** byyearday
        ** byweekno
        ** byweekday
        ** byhour
        ** byminute
        ** bysecond
        ** byeaster
    """
    name = models.CharField(verbose_name=_("name"), max_length=32)
    description = models.TextField(verbose_name=_("description"))
    frequency = models.CharField(verbose_name=_("frequency"), choices=freqs, max_length=10)
    params = models.TextField(verbose_name=_("params"), null=True, blank=True,
                              help_text=_("example : count:1;bysecond:3;"))

    class Meta:
        verbose_name = _('rule')
        verbose_name_plural = _('rules')
        app_label = "appointment"

    def get_params(self):
        """
        >>> rule = Rule(params = "count:1;bysecond:1;byminute:1,2,4,5")
        >>> rule.get_params()
        {'count': 1, 'byminute': [1, 2, 4, 5], 'bysecond': 1}

        >>> rule = Rule(params = "count:1;bysecond:3;byweekday:TU,WE,TH")
        >>> rule.get_params()
        {'bysecond': 1, 'byweekday': (TU, WE, TH), 'count': 1}
        """
        if self.params is None:
            return {}

        # remove "" from self.params
        params = self.params.replace('"', '')

        params = params.split(';')
        param_dict = []
        for param in params:
            param = param.split(':')
            if len(param) == 2:

                temp_list = []
                tuple_flag = False
                for p in param[1].split(','):
                    if p.isdigit():
                        temp_list.append(int(p))
                    else:
                        tuple_flag = True
                        temp_list.append(eval('rrule.%s' % str(p)))

                if tuple_flag:
                    temp_list = tuple(temp_list)

                param = (str(param[0]), temp_list)
                if len(param[1]) == 1:
                    param = (param[0], param[1][0])
                param_dict.append(param)
        return dict(param_dict)

    def __unicode__(self):
        """Human readable string for Rule"""
        return 'Rule %s params %s' % (self.name, self.params)

########NEW FILE########
__FILENAME__ = users
#
# Newfies-Dialer License
# http://www.newfies-dialer.org
#
# This Source Code Form is subject to the terms of the Mozilla Public
# License, v. 2.0. If a copy of the MPL was not distributed with this file,
# You can obtain one at http://mozilla.org/MPL/2.0/.
#
# Copyright (C) 2011-2014 Star2Billing S.L.
#
# The Initial Developer of the Original Code is
# Arezqui Belaid <info@star2billing.com>
#
from django.db import models
from django.contrib.auth.models import User
from django.utils.translation import ugettext_lazy as _
# from django.db.models.signals import post_save
from user_profile.models import Manager, Profile_abstract
from survey.models import Survey
from dialer_gateway.models import Gateway
from sms.models import Gateway as SMS_Gateway
from dialer_campaign.constants import AMD_BEHAVIOR
from audiofield.models import AudioFile


class CalendarSetting(models.Model):
    """This defines the Calender settings to apply to a ar_user

    **Attributes**:

        * ``label`` - Label for the Calendar Setting
        * ``callerid`` - CallerID number
        * ``caller_name`` - Caller name
        * ``call_timeout`` - call timeout
        * ``survey`` - Foreign key relationship to the Survey
        * ``aleg_gateway`` - Foreign key relationship to the Gateway model.\
                             Gateway to use to call the subscriber
        * ``sms_gateway`` - Gateway to transport the SMS
        * ``voicemail`` - Enable Voicemail Detection
        * ``amd_behavior`` - Detection Behaviour

    **Relationships**:

        * ``user`` - Foreign key relationship to the a User model. CalendarSetting are assigned to a User

        * ``voicemail_audiofile`` - Foreign key relationship to the a AudioFile model.

    **Name of DB table**: calendar_setting

    """
    label = models.CharField(max_length=80, blank=False, verbose_name=_("label"))
    callerid = models.CharField(max_length=80, verbose_name=_("Caller ID Number"),
                                help_text=_("outbound Caller ID"))
    caller_name = models.CharField(max_length=80, blank=True, verbose_name=_("caller name"),
                                   help_text=_("outbound caller-Name"))
    call_timeout = models.IntegerField(default='60', null=False, blank=False, verbose_name=_('call timeout'),
                                       help_text=_("call timeout"))
    user = models.ForeignKey(User, blank=False, null=False, verbose_name=_("manager"),
                             help_text=_("select manager"), related_name="manager_user")
    survey = models.ForeignKey(Survey, null=False, blank=False, verbose_name=_('sealed survey'),
                               related_name="calendar_survey")
    aleg_gateway = models.ForeignKey(Gateway, null=False, blank=False, verbose_name=_("a-leg gateway"),
                                     help_text=_("select gateway to use"))
    sms_gateway = models.ForeignKey(SMS_Gateway, verbose_name=_("SMS gateway"), null=False, blank=False,
                                    related_name="sms_gateway", help_text=_("select SMS gateway"))
    #Voicemail Detection
    voicemail = models.BooleanField(default=False, verbose_name=_('voicemail detection'))
    amd_behavior = models.IntegerField(choices=list(AMD_BEHAVIOR), default=AMD_BEHAVIOR.ALWAYS,
                                       verbose_name=_("detection behaviour"), blank=True, null=True)
    voicemail_audiofile = models.ForeignKey(AudioFile, null=True, blank=True,
                                            verbose_name=_("voicemail audio file"))

    created_date = models.DateTimeField(auto_now_add=True)
    updated_date = models.DateTimeField(auto_now=True)

    def __unicode__(self):
        return '(%d) %s' % (self.id, self.label)

    class Meta:
        permissions = (
            ("view_calendarsetting", _('can see Calendar Setting list')),
        )
        verbose_name = _("Calender setting")
        verbose_name_plural = _("calendar settings")
        db_table = "calendar_setting"
        app_label = "appointment"


class CalendarUser(User):
    """Calendar User Model"""

    class Meta:
        proxy = True
        app_label = 'auth'
        verbose_name = _('calendar user')
        verbose_name_plural = _('calendar users')

    def save(self, **kwargs):
        if not self.pk:
            self.is_staff = 0
            self.is_superuser = 0
        super(CalendarUser, self).save(**kwargs)

    def is_calendar_user(self):
        try:
            CalendarUserProfile.objects.get(user=self)
            return True
        except:
            return False
    User.add_to_class('is_calendar_user', is_calendar_user)


class CalendarUserProfile(Profile_abstract):
    """This defines extra features for the AR_user

    **Attributes**:

        * ``calendar_setting`` - appointment reminder settings


    **Name of DB table**: calendar_user_profile
    """
    manager = models.ForeignKey(Manager, verbose_name=_("manager"), help_text=_("select manager"),
                                related_name="manager_of_calendar_user")
    calendar_setting = models.ForeignKey(CalendarSetting, verbose_name=_('calendar settings'))

    class Meta:
        permissions = (
            ("view_calendar_user", _('can see Calendar User list')),
        )
        db_table = 'calendar_user_profile'
        verbose_name = _("calendar user profile")
        verbose_name_plural = _("calendar user profiles")
        app_label = "appointment"

    def __unicode__(self):
        return u"%s" % str(self.user)

# Create calendar user profile object
CalendarUser.profile = property(lambda u: CalendarUserProfile.objects.get_or_create(user=u)[0])

########NEW FILE########
__FILENAME__ = periods
import pytz
import datetime
from django.template.defaultfilters import date
from django.utils.dates import WEEKDAYS, WEEKDAYS_ABBR
from schedule.conf.settings import FIRST_DAY_OF_WEEK, SHOW_CANCELLED_OCCURRENCES
from django.utils.translation import ugettext_lazy as _
from schedule.models import Occurrence
from django.utils import timezone


weekday_names = []
weekday_abbrs = []
if FIRST_DAY_OF_WEEK == 1:
    # The calendar week starts on Monday
    for i in range(7):
        weekday_names.append(WEEKDAYS[i])
        weekday_abbrs.append(WEEKDAYS_ABBR[i])
else:
    # The calendar week starts on Sunday, not Monday
    weekday_names.append(WEEKDAYS[6])
    weekday_abbrs.append(WEEKDAYS_ABBR[6])
    for i in range(6):
        weekday_names.append(WEEKDAYS[i])
        weekday_abbrs.append(WEEKDAYS_ABBR[i])


class Period(object):
    '''
    This class represents a period of time. It can return a set of occurrences
    based on its events, and its time period (start and end).
    '''

    def __init__(self, events, start, end, parent_persisted_occurrences=None,
                 occurrence_pool=None, tzinfo=pytz.utc):
        self.start = start
        self.end = end
        self.events = events
        self.tzinfo = tzinfo
        self.occurrence_pool = occurrence_pool
        if parent_persisted_occurrences is not None:
            self._persisted_occurrences = parent_persisted_occurrences

    def __eq__(self, period):
        return self.start == period.start and self.end == period.end and self.events == period.events

    def __ne__(self, period):
        return self.start != period.start or self.end != period.end or self.events != period.events

    def _get_sorted_occurrences(self):
        occurrences = []
        if hasattr(self, "occurrence_pool") and self.occurrence_pool is not None:
            for occurrence in self.occurrence_pool:
                if occurrence.start <= self.end and occurrence.end >= self.start:
                    occurrences.append(occurrence)
            return occurrences
        for event in self.events:
            event_occurrences = event.get_occurrences(self.start, self.end)
            occurrences += event_occurrences
        return sorted(occurrences)

    def cached_get_sorted_occurrences(self):
        if hasattr(self, '_occurrences'):
            return self._occurrences
        occs = self._get_sorted_occurrences()
        self._occurrences = occs
        return occs
    occurrences = property(cached_get_sorted_occurrences)

    def get_persisted_occurrences(self):
        if hasattr(self, '_persisted_occurrenes'):
            return self._persisted_occurrences
        else:
            self._persisted_occurrences = Occurrence.objects.filter(event__in=self.events)
            return self._persisted_occurrences

    def classify_occurrence(self, occurrence):
        if occurrence.cancelled and not SHOW_CANCELLED_OCCURRENCES:
            return
        if occurrence.start > self.end or occurrence.end < self.start:
            return None
        started = False
        ended = False
        if occurrence.start >= self.start and occurrence.start < self.end:
            started = True
        if occurrence.end >= self.start and occurrence.end < self.end:
            ended = True
        if started and ended:
            return {'occurrence': occurrence, 'class': 1}
        elif started:
            return {'occurrence': occurrence, 'class': 0}
        elif ended:
            return {'occurrence': occurrence, 'class': 3}
        # it existed during this period but it didnt begin or end within it
        # so it must have just continued
        return {'occurrence': occurrence, 'class': 2}

    def get_occurrence_partials(self):
        occurrence_dicts = []
        for occurrence in self.occurrences:
            occurrence = self.classify_occurrence(occurrence)
            if occurrence:
                occurrence_dicts.append(occurrence)
        return occurrence_dicts

    def get_occurrences(self):
        return self.occurrences

    def has_occurrences(self):
        for occurrence in self.occurrences:
            occurrence = self.classify_occurrence(occurrence)
            if occurrence:
                return True
        return False

    def get_time_slot(self, start, end):
        if start >= self.start and end <= self.end:
            return Period(self.events, start, end)
        return None

    def create_sub_period(self, cls, start=None):
        start = start or self.start
        return cls(self.events, start, self.get_persisted_occurrences(), self.occurrences)

    def get_periods(self, cls):
        period = self.create_sub_period(cls)
        while period.start < self.end:
            yield self.create_sub_period(cls, period.start)
            period = period.next()


class Year(Period):
    def __init__(self, events, date=None, parent_persisted_occurrences=None, tzinfo=pytz.utc):
        self.tzinfo = tzinfo
        if date is None:
            date = timezone.now()
        start, end = self._get_year_range(date)
        super(Year, self).__init__(events, start, end, parent_persisted_occurrences)

    def get_months(self):
        return self.get_periods(Month)

    def next_year(self):
        return Year(self.events, self.end)
    next = next_year

    def prev_year(self):
        start = datetime.datetime(self.start.year - 1, self.start.month, self.start.day, tzinfo=self.tzinfo)
        return Year(self.events, start)
    prev = prev_year

    def _get_year_range(self, year):
        start = datetime.datetime(year.year, datetime.datetime.min.month,
            datetime.datetime.min.day, tzinfo=self.tzinfo)
        end = datetime.datetime(year.year + 1, datetime.datetime.min.month,
            datetime.datetime.min.day, tzinfo=self.tzinfo)
        return start, end

    def __unicode__(self):
        return self.start.strftime('%Y')


class Month(Period):
    """
    The month period has functions for retrieving the week periods within this period
    and day periods within the date.
    """

    def __init__(self, events, date=None, parent_persisted_occurrences=None,
                 occurrence_pool=None, tzinfo=pytz.utc):
        self.tzinfo = tzinfo
        if date is None:
            date = timezone.now()
        start, end = self._get_month_range(date)
        super(Month, self).__init__(events, start, end,
            parent_persisted_occurrences, occurrence_pool)

    def get_weeks(self):
        return self.get_periods(Week)

    def get_days(self):
        return self.get_periods(Day)

    def get_day(self, daynumber):
        date = self.start
        if daynumber > 1:
            date += datetime.timedelta(days=daynumber - 1)
        return self.create_sub_period(Day, date)

    def next_month(self):
        return Month(self.events, self.end)
    next = next_month

    def prev_month(self):
        start = (self.start - datetime.timedelta(days=1)).replace(day=1, tzinfo=self.tzinfo)
        return Month(self.events, start)
    prev = prev_month

    def current_year(self):
        return Year(self.events, self.start)

    def prev_year(self):
        start = datetime.datetime.min.replace(year=self.start.year - 1, tzinfo=self.tzinfo)
        return Year(self.events, start)

    def next_year(self):
        start = datetime.datetime.min.replace(year=self.start.year + 1, tzinfo=self.tzinfo)
        return Year(self.events, start)

    def _get_month_range(self, month):
        year = month.year
        month = month.month
        start = datetime.datetime.min.replace(year=year, month=month, tzinfo=self.tzinfo)
        if month == 12:
            end = start.replace(month=1, year=year + 1, tzinfo=self.tzinfo)
        else:
            end = start.replace(month=month + 1, tzinfo=self.tzinfo)
        return start, end

    def __unicode__(self):
        return self.name()

    def name(self):
        return self.start.strftime('%B')

    def year(self):
        return self.start.strftime('%Y')


class Week(Period):
    """
    The Week period that has functions for retrieving Day periods within it
    """

    def __init__(self, events, date=None, parent_persisted_occurrences=None,
                 occurrence_pool=None, tzinfo=pytz.utc):
        self.tzinfo = tzinfo
        if date is None:
            date = timezone.now()
        start, end = self._get_week_range(date)
        super(Week, self).__init__(events, start, end,
            parent_persisted_occurrences, occurrence_pool)

    def prev_week(self):
        return Week(self.events, self.start - datetime.timedelta(days=7))
    prev = prev_week

    def next_week(self):
        return Week(self.events, self.end)
    next = next_week

    def current_month(self):
        return Month(self.events, self.start)

    def current_year(self):
        return Year(self.events, self.start)

    def get_days(self):
        return self.get_periods(Day)

    def _get_week_range(self, week):
        if isinstance(week, datetime.datetime):
            week = week.date()
        # Adjust the start datetime to midnight of the week datetime
        start = datetime.datetime.combine(week, datetime.time.min).replace(tzinfo=self.tzinfo)
        # Adjust the start datetime to Monday or Sunday of the current week
        sub_days = 0
        if FIRST_DAY_OF_WEEK == 1:
            # The week begins on Monday
            sub_days = start.isoweekday() - 1
        else:
            # The week begins on Sunday
            sub_days = start.isoweekday()
            if sub_days == 7:
                sub_days = 0
        if sub_days > 0:
            start = start - datetime.timedelta(days=sub_days)
        end = start + datetime.timedelta(days=7)
        return start, end

    def __unicode__(self):
        date_format = u'l, %s' % _("DATE_FORMAT")
        return _('Week: %(start)s-%(end)s') % {
            'start': date(self.start, date_format),
            'end': date(self.end, date_format),
        }


class Day(Period):
    def __init__(self, events, date=None, parent_persisted_occurrences=None,
                 occurrence_pool=None, tzinfo=pytz.utc):
        self.tzinfo = tzinfo
        if date is None:
            date = timezone.now()
        start, end = self._get_day_range(date)
        super(Day, self).__init__(events, start, end,
            parent_persisted_occurrences, occurrence_pool)

    def _get_day_range(self, date):
        if isinstance(date, datetime.datetime):
            date = date.date()
        start = datetime.datetime.combine(date, datetime.time.min).replace(tzinfo=self.tzinfo)
        end = start + datetime.timedelta(days=1)
        return start, end

    def __unicode__(self):
        date_format = u'l, %s' % _("DATE_FORMAT")
        return _('Day: %(start)s-%(end)s') % {
            'start': date(self.start, date_format),
            'end': date(self.end, date_format),
        }

    def prev_day(self):
        return Day(self.events, self.start - datetime.timedelta(days=1))
    prev = prev_day

    def next_day(self):
        return Day(self.events, self.end)
    next = next_day

    def current_year(self):
        return Year(self.events, self.start)

    def current_month(self):
        return Month(self.events, self.start)

    def current_week(self):
        return Week(self.events, self.start)

########NEW FILE########
__FILENAME__ = signals
from django.db.models.signals import pre_save
from appointment.models import Event, Calendar


def default_calendar(sender, **kwargs):
    event = kwargs.pop('instance')

    if not isinstance(event, Event):
        return True
    if not event.calendar:
        try:
            calendar = Calendar._default_manager.get(name='default')
        except Calendar.DoesNotExist:
            calendar = Calendar(name='default', slug='default')
            calendar.save()
        event.calendar = calendar
    return True

pre_save.connect(default_calendar)

########NEW FILE########
__FILENAME__ = tasks
#
# Newfies-Dialer License
# http://www.newfies-dialer.org
#
# This Source Code Form is subject to the terms of the Mozilla Public
# License, v. 2.0. If a copy of the MPL was not distributed with this file,
# You can obtain one at http://mozilla.org/MPL/2.0/.
#
# Copyright (C) 2011-2014 Star2Billing S.L.
#
# The Initial Developer of the Original Code is
# Arezqui Belaid <info@star2billing.com>
#

from django.core.exceptions import ObjectDoesNotExist
from django.contrib.contenttypes.models import ContentType
from celery.task import PeriodicTask
from celery.decorators import task
from celery.utils.log import get_task_logger
from django_lets_go.only_one_task import only_one
from appointment.models.alarms import Alarm, AlarmRequest
from appointment.models.events import Event
from appointment.models.users import CalendarUserProfile
from appointment.constants import EVENT_STATUS, ALARM_STATUS, \
    ALARM_METHOD, ALARMREQUEST_STATUS
from mod_mailer.models import MailSpooler
from dialer_cdr.models import Callrequest
from dialer_cdr.tasks import init_callrequest
from dialer_cdr.constants import CALLREQUEST_STATUS, CALLREQUEST_TYPE
from math import floor
from datetime import datetime, timedelta
from django.utils.timezone import utc
from dateutil.relativedelta import relativedelta


LOCK_EXPIRE = 60 * 10 * 1  # Lock expires in 10 minutes
FREQ_DISPATCHER = 6

logger = get_task_logger(__name__)


class event_dispatcher(PeriodicTask):
    """A periodic task that checks for scheduled Event and perform number of
    tasks for the Event and create the occurence of the next future Event.

    For each Event found, the PeriodicTask event_dispatcher will ::

        - check the Rule assigned to the Event and create a new occurence of
          this event based on the Rule. The new occurence is an other Event object.

        - check if an alarm exists and execute the alarm

    **Usage**:

        event_dispatcher.delay()
    """
    run_every = timedelta(seconds=60)

    @only_one(ikey="event_dispatcher", timeout=LOCK_EXPIRE)
    def run(self, **kwargs):
        logger.info("TASK :: event_dispatcher")

        # List all the events where event.start > NOW() - 12 hours and status = EVENT_STATUS.PENDING
        start_from = datetime.utcnow().replace(tzinfo=utc) - timedelta(hours=12)
        start_to = datetime.utcnow().replace(tzinfo=utc)
        event_list = Event.objects.filter(start__gte=start_from, start__lte=start_to, status=EVENT_STATUS.PENDING)
        for obj_event in event_list:
            try:
                # Get and perform alarm
                obj_alarm = Alarm.objects.get(event=obj_event)
                perform_alarm.delay(obj_event, obj_alarm)
            except ObjectDoesNotExist:
                pass

            # Check if need to create a sub event in the future
            next_occurrence = obj_event.get_next_occurrence()
            print "next_occurrence"
            print next_occurrence

            if next_occurrence:
                # The result of get_next_occurrences help to create the next event
                new_event = obj_event.copy_event(next_occurrence)

                # Copy the alarm link to the event
                alarm_list = Alarm.objects.filter(event=obj_event)
                for obj_alarm in alarm_list:
                    obj_alarm.copy_alarm(new_event)

            # Mark the event as COMPLETED
            obj_event.status = EVENT_STATUS.COMPLETED
            obj_event.save()


class alarm_dispatcher(PeriodicTask):
    """A periodic task that checks for scheduled Alarm and trigger the Alarm according
    to the alarm type, such as phone Call, SMS or Email.

    For each Alarm found, the PeriodicTask alarm_dispatcher will ::

        - found when the next alarm should be performed. We should notice that alarm
          trigger date/time is not related to the event date, an alarm can happen
          hours/days before an event occurs

        - run the Alarm actions based on the method/settings of the Alarm

    **Usage**:

        alarm_dispatcher.delay()
    """
    run_every = timedelta(seconds=FREQ_DISPATCHER)

    @only_one(ikey="alarm_dispatcher", timeout=LOCK_EXPIRE)
    def run(self, **kwargs):
        logger.info("TASK :: alarm_dispatcher")

        # Select Alarm where date_start_notice >= now() - 60 minutes and <= now() + 5 minutes
        start_time = datetime.utcnow().replace(tzinfo=utc) + relativedelta(minutes=-60)
        end_time = datetime.utcnow().replace(tzinfo=utc) + relativedelta(minutes=+5)
        alarm_list = Alarm.objects.filter(date_start_notice__range=(start_time, end_time),
                                          status=ALARM_STATUS.PENDING).order_by('date_start_notice')
        # Browse all the Alarm found
        for obj_alarm in alarm_list:
            # Check if there is an existing Event
            if obj_alarm.event:
                obj_alarm.status = ALARM_STATUS.IN_PROCESS
                obj_alarm.save()

                second_towait = obj_alarm.get_time_diff()
                # If second_towait negative then set to 0 to be run directly
                if second_towait <= 0:
                    perform_alarm.delay(obj_alarm.event, obj_alarm)
                else:
                    # Call the Alarm in the future
                    perform_alarm.apply_async(
                        args=[obj_alarm.event, obj_alarm], countdown=second_towait)
            else:
                logger.error("There is no Event attached to this Alarm: %d" % obj_alarm.id)
                ## Mark the Alarm as ERROR
                obj_alarm.status = ALARM_STATUS.FAILURE
                obj_alarm.save()


@task()
def perform_alarm(obj_event, obj_alarm):
    """
    Task to perform the alarm, this will send the alarms via several mean such
    as Call, SMS and Email
    """
    logger.info("TASK :: perform_alarm -> %s" % obj_alarm.method)

    if obj_alarm.method == ALARM_METHOD.CALL:
        # send alarm via CALL
        print "perform_alarm ALARM_METHOD.CALL"
        AlarmRequest.objects.create(
            alarm=obj_alarm,
            date=datetime.utcnow().replace(tzinfo=utc)
        )

    elif obj_alarm.method == ALARM_METHOD.SMS:
        # send alarm via SMS
        print "perform_alarm ALARM_METHOD.SMS"
        # Mark the Alarm as SUCCESS
        obj_alarm.status = ALARM_STATUS.SUCCESS
        obj_alarm.save()

    elif obj_alarm.method == ALARM_METHOD.EMAIL:
        # send alarm via EMAIL
        print "perform_alarm ALARM_METHOD.EMAIL"

        if obj_alarm.alarm_email and obj_alarm.mail_template:
            # create MailSpooler object
            MailSpooler.objects.create(
                mailtemplate=obj_alarm.mail_template,
                contact_email=obj_alarm.alarm_email
            )
        # Mark the Alarm as SUCCESS
        obj_alarm.status = ALARM_STATUS.SUCCESS
        obj_alarm.save()


class alarmrequest_dispatcher(PeriodicTask):
    """A periodic task that checks for scheduled AlarmRequest and create CallRequests.

    For each AlarmRequest found, the PeriodicTask alarmrequest_dispatcher will ::

        - create new CallRequest

    **Usage**:

        alarmrequest_dispatcher.delay()
    """
    run_every = timedelta(seconds=FREQ_DISPATCHER)

    @only_one(ikey="alarmrequest_dispatcher", timeout=LOCK_EXPIRE)
    def run(self, **kwargs):
        logger.info("TASK :: alarmrequest_dispatcher")

        # Select AlarmRequest where date >= now() - 60 minutes
        start_time = datetime.utcnow().replace(tzinfo=utc) + relativedelta(minutes=-60)
        alarmreq_list = AlarmRequest.objects.filter(date__gte=start_time, status=ALARMREQUEST_STATUS.PENDING)
        no_alarmreq = alarmreq_list.count()
        if no_alarmreq == 0:
            logger.error("alarmrequest_dispatcher - no alarmreq found!")
            return False

        # Set time to wait for balanced dispatching of calls
        #time_to_wait = int(60 / DIV_MIN) / no_subscriber
        time_to_wait = 6.0 / no_alarmreq
        count = 0

        # Browse all the AlarmRequest found
        for obj_alarmreq in alarmreq_list:
            # Loop on AlarmRequest and start to the initcall's task
            count = count + 1
            second_towait = floor(count * time_to_wait)
            ms_addtowait = (count * time_to_wait) - second_towait
            logger.info("Init CallRequest for AlarmRequest in %d seconds (alarmreq:%d)" % (second_towait, obj_alarmreq.id))

            if obj_alarmreq.alarm.maxretry == 0:
                call_type = CALLREQUEST_TYPE.CANNOT_RETRY
            else:
                call_type = CALLREQUEST_TYPE.ALLOW_RETRY

            try:
                caluser_profile = CalendarUserProfile.objects.get(user=obj_alarmreq.alarm.event.creator)
            except CalendarUserProfile.DoesNotExist:
                logger.error("Error retrieving CalendarUserProfile")
                return False

            #manager_profile = UserProfile.objects.get(user=caluser_profile.manager)
            # manager_profile = caluser_profile.manager.get_profile()
            # manager_profile.dialersetting
            # Use manager_profile.dialersetting to retrieve some settings

            # TODO: build settings for this
            calltimeout = caluser_profile.calendar_setting.call_timeout
            callmaxduration = 60 * 60
            callerid = caluser_profile.calendar_setting.callerid
            caller_name = caluser_profile.calendar_setting.caller_name
            aleg_gateway = caluser_profile.calendar_setting.aleg_gateway
            content_type = ContentType.objects.get(model__in=["survey"])
            object_id = caluser_profile.calendar_setting.survey_id

            # Create Callrequest to track the call task
            new_callrequest = Callrequest(
                status=CALLREQUEST_STATUS.PENDING,
                call_type=call_type,
                call_time=datetime.utcnow().replace(tzinfo=utc),
                timeout=calltimeout,
                callerid=callerid,
                caller_name=caller_name,
                phone_number=obj_alarmreq.alarm.alarm_phonenumber,
                alarm_request_id=obj_alarmreq.id,
                aleg_gateway=aleg_gateway,
                content_type=content_type,
                object_id=object_id,
                user=caluser_profile.manager,
                extra_data='',
                timelimit=callmaxduration)
            new_callrequest.save()

            init_callrequest.apply_async(
                args=[new_callrequest.id, None, callmaxduration, ms_addtowait, obj_alarmreq.id],
                countdown=second_towait)

            obj_alarmreq.callrequest = new_callrequest
            obj_alarmreq.status = ALARMREQUEST_STATUS.IN_PROCESS
            obj_alarmreq.save()
            # Increment num_attempt
            obj_alarmreq.alarm.num_attempt = obj_alarmreq.alarm.num_attempt + 1
            obj_alarmreq.alarm.save()

########NEW FILE########
__FILENAME__ = appointment_tags
#
# Newfies-Dialer License
# http://www.newfies-dialer.org
#
# This Source Code Form is subject to the terms of the Mozilla Public
# License, v. 2.0. If a copy of the MPL was not distributed with this file,
# You can obtain one at http://mozilla.org/MPL/2.0/.
#
# Copyright (C) 2011-2014 Star2Billing S.L.
#
# The Initial Developer of the Original Code is
# Arezqui Belaid <info@star2billing.com>
#

from django.template.defaultfilters import register
from appointment.constants import EVENT_STATUS, ALARM_STATUS, ALARM_METHOD
from mod_utils.function_def import get_status_value


@register.filter(name='event_status')
def event_status(value):
    """Event Status Templatetag"""
    return get_status_value(value, EVENT_STATUS)


@register.filter(name='alarm_status')
def alarm_status(value):
    """Alarm Status Templatetag"""
    return get_status_value(value, ALARM_STATUS)


@register.filter(name='alarm_method')
def alarm_method(value):
    """Alarm Method Templatetag"""
    return get_status_value(value, ALARM_METHOD)

########NEW FILE########
__FILENAME__ = tests
#
# Newfies-Dialer License
# http://www.newfies-dialer.org
#
# This Source Code Form is subject to the terms of the Mozilla Public
# License, v. 2.0. If a copy of the MPL was not distributed with this file,
# You can obtain one at http://mozilla.org/MPL/2.0/.
#
# Copyright (C) 2011-2014 Star2Billing S.L.
#
# The Initial Developer of the Original Code is
# Arezqui Belaid <info@star2billing.com>
#

#from django.contrib.auth.models import User
#from django.conf import settings
from django_lets_go.utils import BaseAuthenticatedClient
from appointment.models.users import CalendarSetting, CalendarUser, CalendarUserProfile
from appointment.models.calendars import Calendar
from appointment.models.events import Event
from appointment.models.alarms import Alarm
from appointment.views import calendar_setting_list, calendar_user_list, calendar_list,\
    event_list, alarm_list, calendar_setting_add, calendar_setting_change,\
    calendar_setting_del, calendar_user_add, calendar_user_change, calendar_user_del,\
    calendar_add, calendar_change, calendar_del, event_add, event_change, event_del,\
    alarm_add, alarm_change, alarm_del
from datetime import datetime
from django.utils.timezone import utc


class AppointmentAdminView(BaseAuthenticatedClient):
    """Test cases for Appointment Admin Interface."""

    def test_admin_calendar_user_admin_list(self):
        """Test Function to check admin calendaruser list"""
        response = self.client.get("/admin/auth/calendaruser/")
        self.assertEqual(response.status_code, 200)

    def test_admin_calendar_user_admin_add(self):
        """Test Function to check admin calendaruser add"""
        response = self.client.get("/admin/auth/calendaruser/")
        self.assertEqual(response.status_code, 200)

    def test_admin_calendar_setting_admin_list(self):
        """Test Function to check admin calendar setting list"""
        response = self.client.get("/admin/appointment/calendarsetting/")
        self.assertEqual(response.status_code, 200)

    def test_admin_calendar_setting_admin_add(self):
        """Test Function to check admin calendar setting add"""
        response = self.client.get("/admin/appointment/calendarsetting/add/")
        self.assertEqual(response.status_code, 200)

    def test_admin_calendar_admin_list(self):
        """Test Function to check admin calendar list"""
        response = self.client.get("/admin/appointment/calendar/")
        self.assertEqual(response.status_code, 200)

    def test_admin_calendar_admin_add(self):
        """Test Function to check admin calendar add"""
        response = self.client.get("/admin/appointment/calendar/add/")
        self.assertEqual(response.status_code, 200)

    def test_admin_event_admin_list(self):
        """Test Function to check admin event list"""
        response = self.client.get("/admin/appointment/event/")
        self.assertEqual(response.status_code, 200)

    def test_admin_event_admin_add(self):
        """Test Function to check admin event add"""
        response = self.client.get("/admin/appointment/event/add/")
        self.assertEqual(response.status_code, 200)

    def test_admin_alarm_admin_list(self):
        """Test Function to check admin alarm list"""
        response = self.client.get("/admin/appointment/alarm/")
        self.assertEqual(response.status_code, 200)

    def test_admin_alarm_admin_add(self):
        """Test Function to check admin alarm add"""
        response = self.client.get("/admin/appointment/alarm/add/")
        self.assertEqual(response.status_code, 200)


class AppointmentCustomerView(BaseAuthenticatedClient):
    """Test cases for Appointment Customer Interface."""

    fixtures = [
        'auth_user.json', 'gateway.json', 'dialer_setting.json',
        'user_profile.json', 'phonebook.json', 'contact.json',
        'survey.json', 'dnc_list.json', 'dnc_contact.json',
        'campaign.json', 'subscriber.json', 'example_gateways.json',
        'calendar_setting.json', 'calendar_user_profile.json',
        'calendar.json', 'event.json', 'alarm.json'
    ]

    def test_calendar_setting_view_list(self):
        """Test Function to check calendar_setting list"""
        response = self.client.get('/module/calendar_setting/')
        self.assertEqual(response.status_code, 200)
        self.assertTemplateUsed(response, 'appointment/calendar_setting/list.html')

        request = self.factory.get('/module/calendar_setting/')
        request.user = self.user
        request.session = {}
        response = calendar_setting_list(request)
        self.assertEqual(response.status_code, 200)

    def test_calendar_setting_view_add(self):
        """Test Function to check add calendar_setting"""
        request = self.factory.get('/module/calendar_setting/add/')
        request.user = self.user
        request.session = {}
        response = calendar_setting_add(request)
        self.assertEqual(response.status_code, 200)

        response = self.client.post('/module/calendar_setting/add/', data={
            "sms_gateway": "1",
            "callerid": "242534",
            "voicemail": "False",
            "call_timeout": "60",
            "voicemail_audiofile": "",
            "label": "test calendar setting",
            "caller_name": "test",
            "survey": "1",
            "user": "2",
            "created_date": "2013-12-17T13:41:24.195",
            "aleg_gateway": "1",
            "amd_behavior": ""}, follow=True)
        self.assertEqual(response.status_code, 200)

        request = self.factory.post('/module/calendar_setting/add/', {
            "sms_gateway": "1",
            "callerid": "242534",
            "voicemail": "False",
            "call_timeout": "60",
            "voicemail_audiofile": "",
            "label": "test calendar setting",
            "caller_name": "test",
            "survey": "1",
            "user": "2",
            "created_date": "2013-12-17T13:41:24.195",
            "aleg_gateway": "1",
            "amd_behavior": ""}, follow=True)
        request.user = self.user
        request.session = {}
        response = calendar_setting_add(request)
        self.assertEqual(response.status_code, 302)

    def test_calendar_setting_view_update(self):
        """Test Function to check update calendar_setting"""
        request = self.factory.post('/module/calendar_setting/1/', {
            "caller_name": "test",
            "survey": "1",
        }, follow=True)
        request.user = self.user
        request.session = {}
        response = calendar_setting_change(request, 1)
        self.assertEqual(response.status_code, 200)

        request = self.factory.post('/module/calendar_setting/1/', {'delete': True}, follow=True)
        request.user = self.user
        request.session = {}
        response = calendar_setting_change(request, 1)
        self.assertEqual(response.status_code, 200)

    def test_calendar_setting_view_delete(self):
        """Test Function to check delete calendar_setting"""
        # delete calendar_setting
        request = self.factory.post('/module/calendar_setting/del/1/', follow=True)
        request.user = self.user
        request.session = {}
        response = calendar_setting_del(request, 1)
        self.assertEqual(response.status_code, 302)

        request = self.factory.post('/module/calendar_setting/del/', {'select': '1'})
        request.user = self.user
        request.session = {}
        response = calendar_setting_del(request, 0)
        self.assertEqual(response.status_code, 302)

    def test_calendar_user_view_list(self):
        """Test Function to check calendar_user list"""
        response = self.client.get('/module/calendar_user/')
        self.assertEqual(response.status_code, 200)
        self.assertTemplateUsed(response, 'appointment/calendar_user/list.html')

        request = self.factory.get('/module/calendar_user/')
        request.user = self.user
        request.session = {}
        response = calendar_user_list(request)
        self.assertEqual(response.status_code, 200)

    def test_calendar_user_view_add(self):
        """Test Function to check add calendar_setting"""
        request = self.factory.get('/module/calendar_user/add/')
        request.user = self.user
        request.session = {}
        response = calendar_user_add(request)
        self.assertEqual(response.status_code, 200)

        response = self.client.post('/module/calendar_user/add/', data=
            {
                "username": "caluser1",
                "password": "caluser1",
                "calendar_setting_id": 1,
            }, follow=True)
        self.assertEqual(response.status_code, 200)

        request = self.factory.post('/module/calendar_user/add/',
            {
                "username": "caluser1",
                "password": "caluser1",
                "calendar_setting_id": 1
            }, follow=True)
        request.user = self.user
        request.session = {}
        response = calendar_user_add(request)
        self.assertEqual(response.status_code, 200)

    def test_calendar_user_view_update(self):
        """Test Function to check update calendar user"""
        request = self.factory.post('/module/calendar_user/4/', {
            "caller_name": "test",
            "survey": "1",
        }, follow=True)
        request.user = self.user
        request.session = {}
        #response = calendar_user_change(request, 3)
        #self.assertEqual(response.status_code, 200)

        request = self.factory.post('/module/calendar_user/3/', {'delete': True}, follow=True)
        request.user = self.user
        request.session = {}
        #response = calendar_user_change(request, 3)
        #self.assertEqual(response.status_code, 302)

    def test_calendar_user_view_delete(self):
        """Test Function to check delete calendar user"""
        # delete calendar_setting
        request = self.factory.post('/module/calendar_user/del/4/', follow=True)
        request.user = self.user
        request.session = {}
        #response = calendar_user_del(request, 4)
        #self.assertEqual(response.status_code, 302)

        request = self.factory.post('/module/calendar_user/del/', {'select': '1'})
        request.user = self.user
        request.session = {}
        #response = calendar_user_del(request, 0)
        #self.assertEqual(response.status_code, 302)

    def test_calendar_view_list(self):
        """Test Function to check calendar list"""
        response = self.client.get('/module/calendar/')
        self.assertEqual(response.status_code, 200)
        self.assertTemplateUsed(response, 'appointment/calendar/list.html')

        request = self.factory.get('/module/calendar/')
        request.user = self.user
        request.session = {}
        response = calendar_list(request)
        self.assertEqual(response.status_code, 200)

    def test_calendar_view_add(self):
        """Test Function to check add calendar"""
        request = self.factory.get('/module/calendar/add/')
        request.user = self.user
        request.session = {}
        response = calendar_add(request)
        self.assertEqual(response.status_code, 200)

        response = self.client.post('/module/calendar/add/', data=
            {
                "name": "test calendar",
                "max_concurrent": 1,
            }, follow=True)
        self.assertEqual(response.status_code, 200)

        request = self.factory.post('/module/calendar/add/',
            {
                "name": "test calendar",
                "max_concurrent": 1,
            }, follow=True)
        request.user = self.user
        request.session = {}
        response = calendar_add(request)
        self.assertEqual(response.status_code, 302)

    def test_calendar_view_update(self):
        """Test Function to check update calendar"""
        request = self.factory.post('/module/calendar/1/', {
            "caller_name": "test",
            "survey": "1",
        }, follow=True)
        request.user = self.user
        request.session = {}
        response = calendar_change(request, 1)
        self.assertEqual(response.status_code, 200)

        request = self.factory.post('/module/calendar/1/', {'delete': True}, follow=True)
        request.user = self.user
        request.session = {}
        response = calendar_change(request, 1)
        self.assertEqual(response.status_code, 200)

    def test_calendar_view_delete(self):
        """Test Function to check delete calendar"""
        # delete calendar
        request = self.factory.post('/module/calendar/del/1/', follow=True)
        request.user = self.user
        request.session = {}
        response = calendar_del(request, 1)
        self.assertEqual(response.status_code, 302)

        request = self.factory.post('/module/calendar/del/', {'select': '1'})
        request.user = self.user
        request.session = {}
        response = calendar_del(request, 0)
        self.assertEqual(response.status_code, 302)

    def test_event_view_list(self):
        """Test Function to check event list"""
        response = self.client.get('/module/event/')
        self.assertEqual(response.status_code, 200)
        self.assertTemplateUsed(response, 'appointment/event/list.html')

        request = self.factory.get('/module/calendar/')
        request.user = self.user
        request.session = {}
        response = event_list(request)
        self.assertEqual(response.status_code, 200)

    def test_event_view_add(self):
        """Test Function to check add event"""
        request = self.factory.get('/module/event/add/')
        request.user = self.user
        request.session = {}
        response = event_add(request)
        self.assertEqual(response.status_code, 200)

        response = self.client.post('/module/event/add/', data=
            {
                "title": "test event",
                "description": "",
                "creator_id": 1,
                "created_on": datetime.utcnow().replace(tzinfo=utc).strftime("%Y-%m-%d"),
                "calendar_id": 1,
            }, follow=True)
        self.assertEqual(response.status_code, 200)

        request = self.factory.post('/module/event/add/',
            {
                "title": "test event",
                "description": "",
                "creator_id": 1,
                "created_on": datetime.utcnow().replace(tzinfo=utc).strftime("%Y-%m-%d"),
                "calendar_id": 1,
            }, follow=True)
        request.user = self.user
        request.session = {}
        response = event_add(request)
        self.assertEqual(response.status_code, 200)

    def test_event_view_update(self):
        """Test Function to check update event"""
        request = self.factory.post('/module/event/1/', {
            "title": "test event",
            "description": "",
        }, follow=True)
        request.user = self.user
        request.session = {}
        response = event_change(request, 1)
        self.assertEqual(response.status_code, 200)

        request = self.factory.post('/module/event/1/', {'delete': True}, follow=True)
        request.user = self.user
        request.session = {}
        response = event_change(request, 1)
        self.assertEqual(response.status_code, 200)

    def test_event_view_delete(self):
        """Test Function to check delete event"""
        # delete event
        request = self.factory.post('/module/event/del/1/', follow=True)
        request.user = self.user
        request.session = {}
        response = event_del(request, 1)
        self.assertEqual(response.status_code, 302)

        request = self.factory.post('/module/event/del/', {'select': '1'})
        request.user = self.user
        request.session = {}
        response = event_del(request, 0)
        self.assertEqual(response.status_code, 302)

    def test_alarm_view_list(self):
        """Test Function to check alarm list"""
        response = self.client.get('/module/alarm/')
        self.assertEqual(response.status_code, 200)
        self.assertTemplateUsed(response, 'appointment/alarm/list.html')

        request = self.factory.get('/module/alarm/')
        request.user = self.user
        request.session = {}
        response = alarm_list(request)
        self.assertEqual(response.status_code, 200)

    def test_alarm_view_add(self):
        """Test Function to check add alarm"""
        request = self.factory.get('/module/alarm/add/')
        request.user = self.user
        request.session = {}
        response = alarm_add(request)
        self.assertEqual(response.status_code, 200)

        response = self.client.post('/module/alarm/add/', data=
            {
                "alarm_phonenumber": "123456789",
                "alarm_email": "notify@xyz.com",
                "advance_notice": 1,
                "event_id": 1,
                "maxretry": 1,
            }, follow=True)
        self.assertEqual(response.status_code, 200)

        request = self.factory.post('/module/alarm/add/',
            {
                "alarm_phonenumber": "123456789",
                "alarm_email": "notify@xyz.com",
                "advance_notice": 1,
                "event_id": 1,
                "maxretry": 1,
            }, follow=True)
        request.user = self.user
        request.session = {}
        response = alarm_add(request)
        self.assertEqual(response.status_code, 200)

    def test_alarm_view_update(self):
        """Test Function to check update alarm"""
        request = self.factory.post('/module/alarm/1/', {
            "title": "test event",
            "description": "",
        }, follow=True)
        request.user = self.user
        request.session = {}
        response = alarm_change(request, 1)
        self.assertEqual(response.status_code, 200)

        request = self.factory.post('/module/alarm/1/', {'delete': True}, follow=True)
        request.user = self.user
        request.session = {}
        response = alarm_change(request, 1)
        self.assertEqual(response.status_code, 200)

    def test_alarm_view_delete(self):
        """Test Function to check delete alarm"""
        # delete event
        request = self.factory.post('/module/alarm/del/1/', follow=True)
        request.user = self.user
        request.session = {}
        response = alarm_del(request, 1)
        self.assertEqual(response.status_code, 302)

        request = self.factory.post('/module/alarm/del/', {'select': '1'})
        request.user = self.user
        request.session = {}
        response = alarm_del(request, 0)
        self.assertEqual(response.status_code, 302)

########NEW FILE########
__FILENAME__ = urls
#
# Newfies-Dialer License
# http://www.newfies-dialer.org
#
# This Source Code Form is subject to the terms of the Mozilla Public
# License, v. 2.0. If a copy of the MPL was not distributed with this file,
# You can obtain one at http://mozilla.org/MPL/2.0/.
#
# Copyright (C) 2011-2014 Star2Billing S.L.
#
# The Initial Developer of the Original Code is
# Arezqui Belaid <info@star2billing.com>
#
from django.conf.urls import patterns

urlpatterns = patterns('appointment.views',

    (r'^module/calendar_user/$', 'calendar_user_list'),
    (r'^module/calendar_user/add/$', 'calendar_user_add'),
    (r'^module/calendar_user/del/(.+)/$', 'calendar_user_del'),
    (r'^module/calendar_user/password/(.+)/$', 'calendar_user_change_password'),
    (r'^module/calendar_user/(.+)/$', 'calendar_user_change'),

    # Calendars urls
    (r'^module/calendar/$', 'calendar_list'),
    (r'^module/calendar/add/$', 'calendar_add'),
    (r'^module/calendar/del/(.+)/$', 'calendar_del'),
    (r'^module/calendar/(.+)/$', 'calendar_change'),

    # Calendar settings urls
    (r'^module/calendar_setting/$', 'calendar_setting_list'),
    (r'^module/calendar_setting/add/$', 'calendar_setting_add'),
    (r'^module/calendar_setting/del/(.+)/$', 'calendar_setting_del'),
    (r'^module/calendar_setting/(.+)/$', 'calendar_setting_change'),

    # Events urls
    (r'^module/event/$', 'event_list'),
    (r'^module/event/add/$', 'event_add'),
    (r'^module/event/del/(.+)/$', 'event_del'),
    (r'^module/event/(.+)/$', 'event_change'),

    # Alarms urls
    (r'^module/alarm/$', 'alarm_list'),
    (r'^module/alarm/add/$', 'alarm_add'),
    (r'^module/alarm/del/(.+)/$', 'alarm_del'),
    (r'^module/alarm/(.+)/$', 'alarm_change'),
)

########NEW FILE########
__FILENAME__ = utils
from django.contrib.contenttypes.models import ContentType
from django.http import HttpResponseRedirect
from django.conf import settings
from appointment.conf.settings import CHECK_PERMISSION_FUNC


class OccurrenceReplacer(object):
    """
    When getting a list of occurrences, the last thing that needs to be done
    before passing it forward is to make sure all of the occurrences that
    have been stored in the datebase replace, in the list you are returning,
    the generated ones that are equivalent.  This class makes this easier.
    """

    def __init__(self, persisted_occurrences):
        lookup = [((occ.event, occ.original_start, occ.original_end), occ) for
            occ in persisted_occurrences]
        self.lookup = dict(lookup)

    def get_occurrence(self, occ):
        """
        Return a persisted occurrences matching the occ and remove it from lookup since it
        has already been matched
        """
        return self.lookup.pop(
            (occ.event, occ.original_start, occ.original_end),
            occ)

    def has_occurrence(self, occ):
        return (occ.event, occ.original_start, occ.original_end) in self.lookup

    def get_additional_occurrences(self, start, end):
        """
        Return persisted occurrences which are now in the period
        """
        return [occ for key, occ in self.lookup.items() if (occ.start < end and occ.end >= start and not occ.cancelled)]


class check_event_permissions(object):

    def __init__(self, f):
        self.f = f
        self.__name__ = f.__name__
        self.contenttype = ContentType.objects.get(app_label='schedule', model='event')

    def __call__(self, request, *args, **kwargs):
        user = request.user
        object_id = kwargs.get('event_id', None)
        try:
            obj = self.contenttype.get_object_for_this_type(pk=object_id)
        except self.contenttype.model_class().DoesNotExist:
            obj = None
        allowed = CHECK_PERMISSION_FUNC(obj, user)
        if not allowed:
            return HttpResponseRedirect(settings.LOGIN_URL)
        return self.f(request, *args, **kwargs)


def coerce_date_dict(date_dict):
    """
    given a dictionary (presumed to be from request.GET) it returns a tuple
    that represents a date. It will return from year down to seconds until one
    is not found.  ie if year, month, and seconds are in the dictionary, only
    year and month will be returned, the rest will be returned as min. If none
    of the parts are found return an empty tuple.
    """
    keys = ['year', 'month', 'day', 'hour', 'minute', 'second']
    retVal = {
        'year': 1,
        'month': 1,
        'day': 1,
        'hour': 0,
        'minute': 0,
        'second': 0}
    modified = False
    for key in keys:
        try:
            retVal[key] = int(date_dict[key])
            modified = True
        except KeyError:
            break
    return modified and retVal or {}

########NEW FILE########
__FILENAME__ = views
#
# Newfies-Dialer License
# http://www.newfies-dialer.org
#
# This Source Code Form is subject to the terms of the Mozilla Public
# License, v. 2.0. If a copy of the MPL was not distributed with this file,
# You can obtain one at http://mozilla.org/MPL/2.0/.
#
# Copyright (C) 2011-2014 Star2Billing S.L.
#
# The Initial Developer of the Original Code is
# Arezqui Belaid <info@star2billing.com>
#

#from django.contrib.auth.models import User
from django.contrib.auth.decorators import login_required, permission_required
from django.http import HttpResponseRedirect, Http404
from django.shortcuts import render_to_response, get_object_or_404
from django.utils.translation import ugettext as _
from django.template.context import RequestContext
from appointment.models.calendars import Calendar
from appointment.models.events import Event
from appointment.models.alarms import Alarm
from appointment.constants import CALENDAR_USER_COLUMN_NAME, CALENDAR_COLUMN_NAME, \
    EVENT_COLUMN_NAME, ALARM_COLUMN_NAME, CALENDAR_SETTING_COLUMN_NAME
from appointment.forms import CalendarUserChangeDetailExtendForm, \
    CalendarUserNameChangeForm, CalendarForm, EventForm, AlarmForm, \
    CalendarSettingForm, EventSearchForm, CalendarUserPasswordChangeForm, \
    CalendarUserCreationForm
from appointment.models.users import CalendarUserProfile, CalendarUser, \
    CalendarSetting
from appointment.function_def import get_calendar_user_id_list
from user_profile.models import Manager
from django_lets_go.common_functions import ceil_strdate, getvar, \
    get_pagination_vars, unset_session_var
from datetime import datetime
from django.utils.timezone import utc


redirect_url_to_calendar_user_list = '/module/calendar_user/'
redirect_url_to_calendar_setting_list = '/module/calendar_setting/'
redirect_url_to_calendar_list = '/module/calendar/'
redirect_url_to_event_list = '/module/event/'
redirect_url_to_alarm_list = '/module/alarm/'


@permission_required('appointment.view_calendar_user', login_url='/')
@login_required
def calendar_user_list(request):
    """CalendarUser list for the logged in Manager

    **Attributes**:

        * ``template`` - appointment/calendar_user/list.html

    **Logic Description**:

        * List all calendar_user which belong to the logged in manager.
    """
    sort_col_field_list = ['user', 'updated_date']
    pag_vars = get_pagination_vars(request, sort_col_field_list, default_sort_field='id')
    calendar_user_list = CalendarUserProfile.objects.filter(manager=request.user).order_by(pag_vars['sort_order'])
    data = {
        'msg': request.session.get('msg'),
        'calendar_user_list': calendar_user_list,
        'total_calendar_user': calendar_user_list.count(),
        'CALENDAR_USER_COLUMN_NAME': CALENDAR_USER_COLUMN_NAME,
        'col_name_with_order': pag_vars['col_name_with_order'],
    }
    request.session['msg'] = ''
    request.session['error_msg'] = ''
    return render_to_response('appointment/calendar_user/list.html', data,
                              context_instance=RequestContext(request))


@permission_required('appointment.add_calendaruserprofile', login_url='/')
@login_required
def calendar_user_add(request):
    """Add new calendar user for the logged in manager

    **Attributes**:

        * ``form`` - CalendarUserCreationForm
        * ``template`` - appointment/calendar_user/change.html

    **Logic Description**:

        * Add a new calendar user which will belong to the logged in manager
          via the UserCreationForm & get redirected to the calendar user list
    """
    form = CalendarUserCreationForm(request.user, request.POST or None)
    if form.is_valid():
        calendar_user = form.save()
        calendar_user_profile = CalendarUserProfile.objects.create(
            user=calendar_user,
            manager=Manager.objects.get(username=request.user),
            calendar_setting_id=request.POST['calendar_setting_id']
        )
        request.session["msg"] = _('"%(name)s" added as calendar user.') % {'name': request.POST['username']}
        return HttpResponseRedirect(redirect_url_to_calendar_user_list + '%s/' % str(calendar_user_profile.id))

    data = {
        'form': form,
        'action': 'add',
    }
    return render_to_response('appointment/calendar_user/change.html', data, context_instance=RequestContext(request))


@permission_required('appointment.delete_calendaruserprofile', login_url='/')
@login_required
def calendar_user_del(request, object_id):
    """Delete a calendar_user for a logged in manager

    **Attributes**:

        * ``object_id`` - Selected calendar_user object
        * ``object_list`` - Selected calendar_user objects

    **Logic Description**:

        * Delete calendar_user from a calendar_user list.
    """
    if int(object_id) != 0:
        # When object_id is not 0
        # 1) delete calendar_user profile & calendar_user
        calendar_user_profile = get_object_or_404(CalendarUserProfile, pk=object_id, manager_id=request.user.id)
        calendar_user = CalendarUser.objects.get(pk=calendar_user_profile.user_id)

        request.session["msg"] = _('"%(name)s" is deleted.') % {'name': calendar_user}
        calendar_user.delete()
    else:
        # When object_id is 0 (Multiple records delete)
        values = request.POST.getlist('select')
        values = ", ".join(["%s" % el for el in values])
        try:
            # 1) delete all calendar users belonging to a managers
            calendar_user_list = CalendarUserProfile.objects.filter(manager_id=request.user.id).extra(where=['id IN (%s)' % values])

            if calendar_user_list:
                user_list = calendar_user_list.values_list('user_id', flat=True)
                calendar_users = CalendarUser.objects.filter(pk__in=user_list)
                request.session["msg"] = _('%(count)s calendar user(s) are deleted.') % {'count': calendar_user_list.count()}
                calendar_users.delete()
        except:
            raise Http404

    return HttpResponseRedirect(redirect_url_to_calendar_user_list)


@permission_required('appointment.change_calendaruserprofile', login_url='/')
@login_required
def calendar_user_change(request, object_id):
    """Update/Delete calendar user for the logged in manager

    **Attributes**:

        * ``object_id`` - Selected calendar_user object
        * ``form`` - CalendarUserChangeDetailExtendForm, CalendarUserNameChangeForm
        * ``template`` - appointment/calendar_user/change.html

    **Logic Description**:

        * Update/delete selected calendar user from the calendar_user list
          via CalendarUserChangeDetailExtendForm & get redirected to calendar_user list
    """
    calendar_user_profile = get_object_or_404(CalendarUserProfile, pk=object_id, manager_id=request.user.id)
    calendar_user_userdetail = get_object_or_404(CalendarUser, pk=calendar_user_profile.user_id)

    calendar_user_profile_form = CalendarUserChangeDetailExtendForm(request.user, request.POST or None, instance=calendar_user_profile)
    calendar_user_username_form = CalendarUserNameChangeForm(
        request.POST or None,
        initial={'username': calendar_user_userdetail.username,
                 'password': calendar_user_userdetail.password},
        instance=calendar_user_userdetail)

    if calendar_user_username_form.is_valid():
        if request.POST.get('delete'):
            calendar_user_del(request, object_id)
            return HttpResponseRedirect(redirect_url_to_calendar_user_list)
        else:
            # Save calendar_user username
            calendar_user_username_form.save()

            if calendar_user_profile_form.is_valid():
                calendar_user_profile_form.save()
                request.session["msg"] = _('"%(name)s" is updated.') % {'name': calendar_user_profile.user}
                return HttpResponseRedirect(redirect_url_to_calendar_user_list)
    data = {
        'calendar_user_profile_form': calendar_user_profile_form,
        'calendar_user_username_form': calendar_user_username_form,
        'action': 'update',
    }
    return render_to_response('appointment/calendar_user/change.html', data, context_instance=RequestContext(request))


@login_required
def calendar_user_change_password(request, object_id):
    """
    CalendarUser Detail change

    **Attributes**:

        * ``form`` - CalendarUserPasswordChangeForm
        * ``template`` - 'appointment/calendar_user/change_password.html',
             'frontend/registration/user_detail_change.html'

    **Logic Description**:

        * Reset calendar_user password.
    """
    calendar_user_userdetail = get_object_or_404(CalendarUser, pk=object_id)
    calendar_user_username = calendar_user_userdetail.username

    user_password_form = CalendarUserPasswordChangeForm(calendar_user_userdetail, request.POST or None)
    if user_password_form.is_valid():
        user_password_form.save()
        request.session["msg"] = _('%s password has been changed.' % calendar_user_username)
        return HttpResponseRedirect(redirect_url_to_calendar_user_list)

    data = {
        'calendar_user_username': calendar_user_username,
        'user_password_form': user_password_form,
    }
    request.session['msg'] = ''
    request.session['error_msg'] = ''
    return render_to_response('appointment/calendar_user/change_password.html', data, context_instance=RequestContext(request))


@permission_required('appointment.view_calendar', login_url='/')
@login_required
def calendar_list(request):
    """Calendar list for the logged in user

    **Attributes**:

        * ``template`` - appointment/calendar/list.html

    **Logic Description**:

        * List all calendars which belong to the logged in user.
    """
    sort_col_field_list = ['id', 'name', 'user', 'max_concurrent', 'created_date']
    pag_vars = get_pagination_vars(request, sort_col_field_list, default_sort_field='id')
    calendar_user_id_list = get_calendar_user_id_list(request.user)
    calendar_list = Calendar.objects.filter(user_id__in=calendar_user_id_list).order_by(pag_vars['sort_order'])

    data = {
        'msg': request.session.get('msg'),
        'calendar_list': calendar_list,
        'total_calendar': calendar_list.count(),
        'CALENDAR_COLUMN_NAME': CALENDAR_COLUMN_NAME,
        'col_name_with_order': pag_vars['col_name_with_order'],
    }
    request.session['msg'] = ''
    request.session['error_msg'] = ''
    return render_to_response('appointment/calendar/list.html', data, context_instance=RequestContext(request))


@permission_required('appointment.add_calendar', login_url='/')
@login_required
def calendar_add(request):
    """Add a new calendar for the logged in user

    **Attributes**:

        * ``form`` - CalendarForm
        * ``template`` - appointment/calendar/change.html

    **Logic Description**:

        * Add new contact belonging to the logged in user
          via ContactForm & get redirected to the contact list
    """
    form = CalendarForm(request.user, request.POST or None)
    # Add contact
    if form.is_valid():
        form.save()
        request.session["msg"] = _('"%s" is added') % request.POST['name']
        return HttpResponseRedirect(redirect_url_to_calendar_list)

    data = {
        'form': form,
        'action': 'add',
    }
    return render_to_response('appointment/calendar/change.html', data, context_instance=RequestContext(request))


@permission_required('appointment.delete_calendar', login_url='/')
@login_required
def calendar_del(request, object_id):
    """Delete calendar for the logged in user

    **Attributes**:

        * ``object_id`` - Selected calendar object
        * ``object_list`` - Selected calendar objects

    **Logic Description**:

        * Delete selected calendar from the calendar list
    """
    if int(object_id) != 0:
        # When object_id is not 0
        calendar = get_object_or_404(Calendar, pk=object_id)

        # Delete Calendar
        request.session["msg"] = _('"%s" is deleted.') % calendar.name
        calendar.delete()
    else:
        # When object_id is 0 (Multiple records delete)
        values = request.POST.getlist('select')
        values = ", ".join(["%s" % el for el in values])

        try:
            calendar_list = Calendar.objects.extra(where=['id IN (%s)' % values])
            if calendar_list:
                request.session["msg"] = _('%s calendar(s) are deleted.') % calendar_list.count()
                calendar_list.delete()
        except:
            raise Http404
    return HttpResponseRedirect(redirect_url_to_calendar_list)


@permission_required('appointment.change_calendar', login_url='/')
@login_required
def calendar_change(request, object_id):
    """Update/Delete calendar for the logged in user

    **Attributes**:

        * ``object_id`` - Selected calendar object
        * ``form`` - CalendarForm
        * ``template`` - appointment/calendar/change.html

    **Logic Description**:

        * Update/delete selected calendar from the calendar list
          via CalendarForm & get redirected to the calendar list
    """
    calendar = get_object_or_404(Calendar, pk=object_id)
    form = CalendarForm(request.user, request.POST or None, instance=calendar)
    if form.is_valid():
        # Delete calendar
        if request.POST.get('delete'):
            calendar_del(request, object_id)
            return HttpResponseRedirect(redirect_url_to_calendar_list)
        else:
            # Update calendar
            form.save()
            request.session["msg"] = _('"%s" is updated.') % request.POST['name']
            return HttpResponseRedirect(redirect_url_to_calendar_list)

    data = {
        'form': form,
        'action': 'update',
    }
    return render_to_response('appointment/calendar/change.html', data, context_instance=RequestContext(request))


@permission_required('appointment.view_calendarsetting', login_url='/')
@login_required
def calendar_setting_list(request):
    """Calendar setting list for the logged in user

    **Attributes**:

        * ``template`` - appointment/calendar_setting/list.html

    **Logic Description**:

        * List all calendar settings which belong to the logged in user.
    """
    sort_col_field_list = ['id', 'label', 'callerid', 'caller_name', 'call_timeout',
                           'survey', 'aleg_gateway', 'sms_gateway']
    pag_vars = get_pagination_vars(request, sort_col_field_list, default_sort_field='id')
    calendar_setting_list = CalendarSetting.objects.filter(user=request.user).order_by(pag_vars['sort_order'])
    data = {
        'msg': request.session.get('msg'),
        'calendar_setting_list': calendar_setting_list,
        'total_calendar_setting': calendar_setting_list.count(),
        'CALENDAR_SETTING_COLUMN_NAME': CALENDAR_SETTING_COLUMN_NAME,
        'col_name_with_order': pag_vars['col_name_with_order'],
    }
    request.session['msg'] = ''
    request.session['error_msg'] = ''
    return render_to_response('appointment/calendar_setting/list.html', data, context_instance=RequestContext(request))


@permission_required('appointment.add_calendarsetting', login_url='/')
@login_required
def calendar_setting_add(request):
    """Add a new calendar setting for the logged in user

    **Attributes**:

        * ``form`` - CalendarSettingForm
        * ``template`` - appointment/calendar_setting/change.html

    **Logic Description**:

        * Add new calendar_setting belonging to the logged in user
          via ContactSettingForm & get redirected to the calendar_setting list
    """
    form = CalendarSettingForm(request.user, request.POST or None)
    # Add calendar_setting
    if form.is_valid():
        obj = form.save(user=request.user)
        request.session["msg"] = _('"%s" is added') % obj
        return HttpResponseRedirect(redirect_url_to_calendar_setting_list)
    data = {
        'form': form,
        'action': 'add',
    }
    return render_to_response('appointment/calendar_setting/change.html', data, context_instance=RequestContext(request))


@permission_required('appointment.delete_calendarsetting', login_url='/')
@login_required
def calendar_setting_del(request, object_id):
    """Delete calendar_setting for the logged in user

    **Attributes**:

        * ``object_id`` - Selected calendar_setting object
        * ``object_list`` - Selected calendar_setting objects

    **Logic Description**:

        * Delete selected calendar_setting from the calendar_setting list
    """
    if int(object_id) != 0:
        # When object_id is not 0
        calendar_setting = get_object_or_404(CalendarSetting, pk=object_id)

        # Delete calendar_setting
        request.session["msg"] = _('"%s" is deleted.') % calendar_setting
        calendar_setting.delete()
    else:
        # When object_id is 0 (Multiple records delete)
        values = request.POST.getlist('select')
        values = ", ".join(["%s" % el for el in values])

        try:
            calendar_setting = CalendarSetting.objects.extra(where=['id IN (%s)' % values])
            if calendar_setting:
                request.session["msg"] = _('%s calendar setting(s) are deleted.') % calendar_setting.count()
                calendar_setting.delete()
        except:
            raise Http404
    return HttpResponseRedirect(redirect_url_to_calendar_setting_list)


@permission_required('appointment.change_calendarsetting', login_url='/')
@login_required
def calendar_setting_change(request, object_id):
    """Update/Delete calendar_setting for the logged in user

    **Attributes**:

        * ``object_id`` - Selected calendar_setting object
        * ``form`` - CalendarSettingForm
        * ``template`` - appointment/calendar_setting/change.html

    **Logic Description**:

        * Update/delete selected calendar_setting from the calendar_setting list
          via CalendarSettingForm & get redirected to the calendar_setting list
    """
    calendar_setting = get_object_or_404(CalendarSetting, pk=object_id)

    form = CalendarSettingForm(request.user, request.POST or None, instance=calendar_setting)
    if form.is_valid():
        # Delete calendar_setting
        if request.POST.get('delete'):
            calendar_setting_del(request, object_id)
            return HttpResponseRedirect(redirect_url_to_calendar_setting_list)
        else:
            obj = form.save()
            request.session["msg"] = _('"%s" is updated.') % obj
            return HttpResponseRedirect(redirect_url_to_calendar_setting_list)

    data = {
        'form': form,
        'action': 'update',
    }
    return render_to_response('appointment/calendar_setting/change.html', data, context_instance=RequestContext(request))


@permission_required('appointment.view_event', login_url='/')
@login_required
def event_list(request):
    """Event list for the logged in user

    **Attributes**:

        * ``template`` - appointment/event/list.html

    **Logic Description**:

        * List all events which belong to the logged in user.
    """
    today = datetime.utcnow().replace(tzinfo=utc)
    form = EventSearchForm(request.user, request.POST or None, initial={'start': today.strftime('%Y-%m-%d %H:%M')})
    sort_col_field_list = ['id', 'start', 'end', 'title', 'calendar', 'status', 'created_on']
    pag_vars = get_pagination_vars(request, sort_col_field_list, default_sort_field='id')

    start_date = ''
    calendar_id = ''
    calendar_user_id = ''
    post_var_with_page = 0
    if form.is_valid():
        field_list = ['start_date', 'calendar_id', 'calendar_user_id']
        unset_session_var(request, field_list)

        start_date = getvar(request, 'start_date')
        start_date = ceil_strdate(str(start_date), 'start')
        converted_start_date = start_date.strftime('%Y-%m-%d')
        request.session['session_start_date'] = converted_start_date

        calendar_id = getvar(request, 'calendar_id', setsession=True)
        calendar_user_id = getvar(request, 'calendar_user_id', setsession=True)
        post_var_with_page = 1

    if request.GET.get('page') or request.GET.get('sort_by'):
        post_var_with_page = 1
        start_date = request.session.get('session_start_date')
        start_date = ceil_strdate(start_date, 'start')
        calendar_id = request.session.get('session_calendar_id')
        calendar_user_id = request.session.get('session_calendar_user_id')
        form = EventSearchForm(request.user, initial={'start_date': start_date.strftime('%Y-%m-%d %H:%M'),
                                                      'calendar_id': calendar_id,
                                                      'calendar_user_id': calendar_user_id,
                                                      })

    if post_var_with_page == 0:
        # default unset session var
        field_list = ['start_date', 'calendar_id', 'calendar_user_id']
        unset_session_var(request, field_list)

    kwargs = {}
    calendar_user_id_list = get_calendar_user_id_list(request.user)
    kwargs['calendar__user_id__in'] = calendar_user_id_list
    if start_date:
        kwargs['start__gte'] = start_date

    if calendar_id and int(calendar_id) != 0:
        kwargs['calendar_id'] = calendar_id

    if calendar_user_id and int(calendar_user_id) != 0:
        kwargs['creator_id'] = calendar_user_id

    all_event_list = Event.objects.filter(**kwargs).order_by(pag_vars['sort_order'])
    event_list = all_event_list[pag_vars['start_page']:pag_vars['end_page']]
    data = {
        'form': form,
        'msg': request.session.get('msg'),
        'all_event_list': all_event_list,
        'event_list': event_list,
        'total_event': all_event_list.count(),
        'EVENT_COLUMN_NAME': EVENT_COLUMN_NAME,
        'col_name_with_order': pag_vars['col_name_with_order'],
    }
    request.session['msg'] = ''
    request.session['error_msg'] = ''
    return render_to_response('appointment/event/list.html', data, context_instance=RequestContext(request))


@permission_required('appointment.add_event', login_url='/')
@login_required
def event_add(request):
    """Add a new event for the logged in user

    **Attributes**:

        * ``form`` - EventForm
        * ``template`` - appointment/event/change.html

    **Logic Description**:

        * Add new event belonging to the logged in user
          via EventForm & get redirected to the event list
    """
    form = EventForm(request.user, request.POST or None)
    # Add event
    if form.is_valid():
        form.save()
        request.session["msg"] = _('"%s" is added') % request.POST['title']
        return HttpResponseRedirect(redirect_url_to_event_list)
    data = {
        'form': form,
        'action': 'add',
    }
    return render_to_response('appointment/event/change.html', data, context_instance=RequestContext(request))


@permission_required('appointment.delete_event', login_url='/')
@login_required
def event_del(request, object_id):
    """Delete event for the logged in user

    **Attributes**:

        * ``object_id`` - Selected event object
        * ``object_list`` - Selected event objects

    **Logic Description**:

        * Delete selected event from the event list
    """
    if int(object_id) != 0:
        # When object_id is not 0
        event = get_object_or_404(Event, pk=object_id)

        # Delete Event
        request.session["msg"] = _('"%s" is deleted.') % event.title
        event.delete()
    else:
        # When object_id is 0 (Multiple records delete)
        values = request.POST.getlist('select')
        values = ", ".join(["%s" % el for el in values])

        try:
            event_list = Event.objects.extra(where=['id IN (%s)' % values])
            if event_list:
                request.session["msg"] = _('%s event(s) are deleted.') % event_list.count()
                event_list.delete()
        except:
            raise Http404
    return HttpResponseRedirect(redirect_url_to_event_list)


@permission_required('appointment.change_event', login_url='/')
@login_required
def event_change(request, object_id):
    """Update/Delete event for the logged in user

    **Attributes**:

        * ``object_id`` - Selected event object
        * ``form`` - EventForm
        * ``template`` - appointment/event/change.html

    **Logic Description**:

        * Update/delete selected event from the event list
          via EventForm & get redirected to the event list
    """
    event = get_object_or_404(Event, pk=object_id)
    form = EventForm(request.user, request.POST or None, instance=event)
    if form.is_valid():
        # Delete event
        if request.POST.get('delete'):
            event_del(request, object_id)
            return HttpResponseRedirect(redirect_url_to_event_list)
        else:
            # Update event
            form.save()
            request.session["msg"] = _('"%s" is updated.') % request.POST['title']
            return HttpResponseRedirect(redirect_url_to_event_list)

    data = {
        'form': form,
        'action': 'update',
    }
    return render_to_response('appointment/event/change.html', data, context_instance=RequestContext(request))


@permission_required('appointment.view_alarm', login_url='/')
@login_required
def alarm_list(request):
    """Alarm list for the logged in user

    **Attributes**:

        * ``template`` - appointment/alarm/list.html

    **Logic Description**:

        * List all alarms which belong to the logged in user.
    """
    sort_col_field_list = ['id', 'alarm_phonenumber', 'alarm_email', 'daily_start',
                           'daily_stop', 'method', 'survey', 'event',
                           'date_start_notice', 'status']
    pag_vars = get_pagination_vars(request, sort_col_field_list, default_sort_field='id')
    calendar_user_id_list = get_calendar_user_id_list(request.user)
    alarm_list = Alarm.objects.filter(event__calendar__user_id__in=calendar_user_id_list).order_by(pag_vars['sort_order'])
    data = {
        'msg': request.session.get('msg'),
        'alarm_list': alarm_list,
        'total_alarm': alarm_list.count(),
        'ALARM_COLUMN_NAME': ALARM_COLUMN_NAME,
        'col_name_with_order': pag_vars['col_name_with_order'],
    }
    request.session['msg'] = ''
    request.session['error_msg'] = ''
    return render_to_response('appointment/alarm/list.html', data, context_instance=RequestContext(request))


@permission_required('appointment.add_alarm', login_url='/')
@login_required
def alarm_add(request):
    """Add a new alarm for the logged in user

    **Attributes**:

        * ``form`` - AlarmForm
        * ``template`` - appointment/alarm/change.html

    **Logic Description**:

        * Add new alarm belonging to the logged in user
          via AlarmForm & get redirected to the alarm list
    """
    form = AlarmForm(request.user, request.POST or None)
    # Add alarm
    if form.is_valid():
        obj = form.save()
        request.session["msg"] = _('"%s" is added') % obj
        return HttpResponseRedirect(redirect_url_to_alarm_list)

    data = {
        'form': form,
        'action': 'add',
    }
    return render_to_response('appointment/alarm/change.html', data, context_instance=RequestContext(request))


@permission_required('appointment.delete_alarm', login_url='/')
@login_required
def alarm_del(request, object_id):
    """Delete alarm for the logged in user

    **Attributes**:

        * ``object_id`` - Selected alarm object
        * ``object_list`` - Selected alarm objects

    **Logic Description**:

        * Delete selected alarm from the alarm list
    """
    if int(object_id) != 0:
        # When object_id is not 0
        alarm = get_object_or_404(Alarm, pk=object_id)

        # Delete Event
        request.session["msg"] = _('"%s" is deleted.') % alarm.method
        alarm.delete()
    else:
        # When object_id is 0 (Multiple records delete)
        values = request.POST.getlist('select')
        values = ", ".join(["%s" % el for el in values])

        try:
            alarm_list = Alarm.objects.extra(where=['id IN (%s)' % values])
            if alarm_list:
                request.session["msg"] = _('%s alarm(s) are deleted.') % alarm_list.count()
                alarm_list.delete()
        except:
            raise Http404
    return HttpResponseRedirect(redirect_url_to_alarm_list)


@permission_required('appointment.change_alarm', login_url='/')
@login_required
def alarm_change(request, object_id):
    """Update/Delete alarm for the logged in user

    **Attributes**:

        * ``object_id`` - Selected alarm object
        * ``form`` - AlarmForm
        * ``template`` - appointment/alarm/change.html

    **Logic Description**:

        * Update/delete selected alarm from the alarm list
          via AlarmForm & get redirected to the alarm list
    """
    alarm = get_object_or_404(Alarm, pk=object_id)

    form = AlarmForm(request.user, request.POST or None, instance=alarm)
    if form.is_valid():
        # Delete alarm
        if request.POST.get('delete'):
            alarm_del(request, object_id)
            return HttpResponseRedirect(redirect_url_to_alarm_list)
        else:
            # Update alarm
            form.save()
            request.session["msg"] = _('"%s" is updated.') % alarm
            return HttpResponseRedirect(redirect_url_to_alarm_list)

    data = {
        'form': form,
        'action': 'update',
    }
    return render_to_response('appointment/alarm/change.html', data, context_instance=RequestContext(request))

########NEW FILE########
__FILENAME__ = admin
#
# Newfies-Dialer License
# http://www.newfies-dialer.org
#
# This Source Code Form is subject to the terms of the Mozilla Public
# License, v. 2.0. If a copy of the MPL was not distributed with this file,
# You can obtain one at http://mozilla.org/MPL/2.0/.
#
# Copyright (C) 2011-2014 Star2Billing S.L.
#
# The Initial Developer of the Original Code is
# Arezqui Belaid <info@star2billing.com>
#

from django.contrib import admin
from callcenter.models import Queue, Tier, CallAgent
from callcenter.forms import QueueForm, TierForm
from callcenter.admin_filters import CallcenterAdminAgentFilter,\
    CallcenterAdminManagerFilter


class QueueAdmin(admin.ModelAdmin):
    form = QueueForm
    list_display = ('id', 'manager', 'name', 'strategy',
                    'moh_sound', 'time_base_score')
    list_filter = (CallcenterAdminManagerFilter,)


class TierAdmin(admin.ModelAdmin):
    form = TierForm
    list_display = ('id', 'manager', 'agent', 'queue', 'level', 'position')
    list_filter = (CallcenterAdminManagerFilter, CallcenterAdminAgentFilter,
                   'queue')


class CallAgentAdmin(admin.ModelAdmin):
    list_display = ('id', 'callrequest', 'agent', 'created_date')


admin.site.register(Queue, QueueAdmin)
admin.site.register(Tier, TierAdmin)
admin.site.register(CallAgent, CallAgentAdmin)

########NEW FILE########
__FILENAME__ = admin_filters
#
# Newfies-Dialer License
# http://www.newfies-dialer.org
#
# This Source Code Form is subject to the terms of the Mozilla Public
# License, v. 2.0. If a copy of the MPL was not distributed with this file,
# You can obtain one at http://mozilla.org/MPL/2.0/.
#
# Copyright (C) 2011-2014 Star2Billing S.L.
#
# The Initial Developer of the Original Code is
# Arezqui Belaid <info@star2billing.com>
#
from django.contrib.admin import SimpleListFilter
from django.utils.translation import ugettext as _
from agent.function_def import manager_list, agentprofile_list


class CallcenterAdminAgentFilter(SimpleListFilter):
    title = _('agent')
    parameter_name = 'agent'

    def lookups(self, request, model_admin):
        """
        Returns a list of tuples. The first element in each
        tuple is the coded value for the option that will
        appear in the URL query. The second element is the
        human-readable name for the option that will appear
        in the right sidebar.
        """
        return agentprofile_list()

    def queryset(self, request, queryset):
        """
        Returns the filtered queryset based on the value
        provided in the query string and retrievable via
        `self.value()`.
        """
        if self.value():
            return queryset.filter(agent_id=self.value())
        else:
            return queryset


class CallcenterAdminManagerFilter(SimpleListFilter):
    title = _('manager')
    parameter_name = 'manager'

    def lookups(self, request, model_admin):
        """
        Returns a list of tuples. The first element in each
        tuple is the coded value for the option that will
        appear in the URL query. The second element is the
        human-readable name for the option that will appear
        in the right sidebar.
        """
        return manager_list()

    def queryset(self, request, queryset):
        """
        Returns the filtered queryset based on the value
        provided in the query string and retrievable via
        `self.value()`.
        """
        if self.value():
            return queryset.filter(manager_id=self.value())
        else:
            return queryset

########NEW FILE########
__FILENAME__ = backup_code
#
# Newfies-Dialer License
# http://www.newfies-dialer.org
#
# This Source Code Form is subject to the terms of the Mozilla Public
# License, v. 2.0. If a copy of the MPL was not distributed with this file,
# You can obtain one at http://mozilla.org/MPL/2.0/.
#
# Copyright (C) 2011-2014 Star2Billing S.L.
#
# The Initial Developer of the Original Code is
# Arezqui Belaid <info@star2billing.com>
#

from django.contrib.auth.models import User
from django.test import TestCase
from callcenter.models import Queue, Tier
from callcenter.forms import QueueForm, QueueFrontEndForm,\
    TierForm, TierFrontEndForm
from callcenter.views import queue_list, queue_add, queue_change, queue_del,\
    tier_list, tier_add, tier_change, tier_del
from django_lets_go.utils import BaseAuthenticatedClient


class CallcenterAdminView(BaseAuthenticatedClient):
    """Test Function to check UserProfile Admin pages"""

    def test_admin_queue_view_list(self):
        """Test Function to check admin queue list"""
        response = self.client.get("/admin/callcenter/queue/")
        self.assertEqual(response.status_code, 200)

    def test_admin_queue_view_add(self):
        """Test Function to check admin queue add"""
        response = self.client.get("/admin/callcenter/queue/add/")
        self.assertEqual(response.status_code, 200)

    def test_admin_tier_view_list(self):
        """Test Function to check admin tier list"""
        response = self.client.get("/admin/callcenter/tier/")
        self.assertEqual(response.status_code, 200)

    def test_admin_tier_view_add(self):
        """Test Function to check admin tier add"""
        response = self.client.get("/admin/callcenter/tier/add/")
        self.assertEqual(response.status_code, 200)


class CallcenterCustomerView(BaseAuthenticatedClient):
    """Test Function to check UserProfile Customer pages"""

    fixtures = ['dialer_setting.json', 'gateway.json',
                'auth_user.json', 'user_profile.json', 'notification.json',
                'agent.json', 'agent_profile.json',
                'queue.json', 'tier.json']

    def test_queue_view_list(self):
        """Test Function to check queue list"""
        manager = User.objects.get(pk=2)
        response = self.client.get('/module/queue/')
        self.assertEqual(response.context['module'], 'queue_list')
        self.assertEqual(response.status_code, 200)
        self.assertTemplateUsed(response, 'callcenter/queue/list.html')

        request = self.factory.get('/module/queue/')
        request.user = manager
        request.session = {}
        response = queue_list(request)
        self.assertEqual(response.status_code, 302)

    def test_queue_view_add(self):
        """Test Function to check add queue"""
        manager = User.objects.get(pk=2)
        response = self.client.get('/module/queue/add/')
        self.assertEqual(response.context['action'], 'add')
        self.assertEqual(response.status_code, 200)
        #response = self.client.post('/queue/add/', data={})
        #self.assertEqual(response.context['action'], 'add')
        #self.assertEqual(response.status_code, 200)

        request = self.factory.get('/module/queue/add/')
        request.user = manager
        request.session = {}
        response = queue_add(request)
        self.assertEqual(response.status_code, 302)

        response = self.client.post('/module/queue/add/',
            data={'manager': '1', 'strategy': 'xyz'})
        self.assertEqual(response.status_code, 302)

    def test_queue_view_update(self):
        """Test Function to check update queue"""
        manager = User.objects.get(pk=2)
        request = self.factory.post('/module/queue/1/', {'contact': '1234'})
        request.user = manager
        request.session = {}
        response = queue_change(request, 1)
        self.assertEqual(response.status_code, 302)

        # delete agent through queue_change
        request = self.factory.post('/module/queue/1/',
                                    data={'delete': True}, follow=True)
        request.user = manager
        request.session = {}
        response = queue_change(request, 1)
        self.assertEqual(response.status_code, 302)

    def test_queue_view_delete(self):
        """Test Function to check delete queue"""
        manager = User.objects.get(pk=2)
        request = self.factory.get('/module/queue/del/1/')
        request.user = manager
        request.session = {}
        response = queue_del(request, 1)
        self.assertEqual(response.status_code, 302)

        request = self.factory.post('/module/queue/del/', {'select': '1'})
        request.user = manager
        request.session = {}
        response = queue_del(request, 0)
        self.assertEqual(response.status_code, 302)

    def test_tier_view_list(self):
        """Test Function to check tier list"""
        manager = User.objects.get(pk=2)
        response = self.client.get('/module/tier/')
        self.assertEqual(response.status_code, 200)
        self.assertTemplateUsed(response, 'callcenter/tier/list.html')

        request = self.factory.get('/module/tier/')
        request.user = manager
        request.session = {}
        response = tier_list(request)
        self.assertEqual(response.status_code, 302)

    def test_tier_view_add(self):
        """Test Function to check add tier"""
        manager = User.objects.get(pk=2)
        response = self.client.get('/module/tier/add/')
        self.assertEqual(response.status_code, 200)
        response = self.client.post('/module/tier/add/', data={})
        self.assertEqual(response.context['action'], 'add')
        self.assertEqual(response.status_code, 200)

        request = self.factory.get('/module/tier/add/')
        request.user = manager
        request.session = {}
        response = tier_add(request)
        self.assertEqual(response.status_code, 302)

        response = self.client.post('/module/tier/add/', data={})
        self.assertEqual(response.status_code, 200)

    def test_tier_view_update(self):
        """Test Function to check update tier"""
        manager = User.objects.get(pk=2)

        request = self.factory.post('/module/tier/1/', {'manager': '1'})
        request.user = manager
        request.session = {}
        response = tier_change(request, 1)
        self.assertEqual(response.status_code, 302)

        # delete agent through tier_change
        request = self.factory.post('/module/tier/1/',
                                    data={'delete': True}, follow=True)
        request.user = manager
        request.session = {}
        response = tier_change(request, 1)
        self.assertEqual(response.status_code, 302)

    def test_tier_view_delete(self):
        """Test Function to check delete tier"""
        manager = User.objects.get(pk=2)
        request = self.factory.get('/module/tier/del/1/')
        request.user = manager
        request.session = {}
        response = tier_del(request, 1)
        self.assertEqual(response.status_code, 302)

        request = self.factory.post('/module/tier/del/', {'select': '1'})
        request.user = manager
        request.session = {}
        response = tier_del(request, 0)
        self.assertEqual(response.status_code, 302)

########NEW FILE########
__FILENAME__ = constants
#
# Newfies-Dialer License
# http://www.newfies-dialer.org
#
# This Source Code Form is subject to the terms of the Mozilla Public
# License, v. 2.0. If a copy of the MPL was not distributed with this file,
# You can obtain one at http://mozilla.org/MPL/2.0/.
#
# Copyright (C) 2011-2014 Star2Billing S.L.
#
# The Initial Developer of the Original Code is
# Arezqui Belaid <info@star2billing.com>
#

from django.utils.translation import ugettext_lazy as _
from django_lets_go.utils import Choice


class STRATEGY(Choice):
    ring_all = 1, 'ring-all'
    longest_idle_agent = 2, 'longest-idle-agent'
    round_robin = 3, 'round-robin'
    top_down = 4, 'top-down'
    agent_with_least_talk_time = 5, 'agent-with-least-talk-time'
    agent_with_fewest_calls = 6, 'agent-with-fewest-calls'
    sequentially_by_agent_order = 7, 'sequentially-by-agent-order'
    random = 8, 'random'


class QUEUE_COLUMN_NAME(Choice):
    name = _('name')
    strategy = _('strategy')
    time_base_score = _('time base score')
    date = _('date')


class TIER_COLUMN_NAME(Choice):
    agent = _('agent')
    queue = _('queue')
    level = _('level')
    position = _('position')
    date = _('date')


class TIME_BASE_SCORE_TYPE(Choice):
    queue = 'queue'
    system = 'system'


class AGENT_CALLSTATE_TYPE(Choice):
    agent_offering = 'agent-offering'
    bridge_agent_start = 'bridge-agent-start'

########NEW FILE########
__FILENAME__ = forms
#
# Newfies-Dialer License
# http://www.newfies-dialer.org
#
# This Source Code Form is subject to the terms of the Mozilla Public
# License, v. 2.0. If a copy of the MPL was not distributed with this file,
# You can obtain one at http://mozilla.org/MPL/2.0/.
#
# Copyright (C) 2011-2014 Star2Billing S.L.
#
# The Initial Developer of the Original Code is
# Arezqui Belaid <info@star2billing.com>
#
from django.forms import ModelForm
from agent.function_def import manager_list, agentprofile_list
from callcenter.models import Queue, Tier
from callcenter.function_def import queue_list
from mod_utils.forms import common_submit_buttons
from crispy_forms.helper import FormHelper
from crispy_forms.layout import Layout, Div, Fieldset, HTML


class QueueForm(ModelForm):
    """QueueForm is used to change manager list"""

    class Meta:
        model = Queue

    def __init__(self, *args, **kwargs):
        super(QueueForm, self).__init__(*args, **kwargs)
        self.fields['manager'].choices = manager_list()


class QueueFrontEndForm(ModelForm):
    """Queue ModelForm"""

    class Meta:
        model = Queue
        exclude = ('manager',)

    def __init__(self, *args, **kwargs):
        super(QueueFrontEndForm, self).__init__(*args, **kwargs)
        self.helper = FormHelper()
        css_class = 'col-md-6'
        self.helper.form_class = 'well'
        boolean_fields = ['tier_rules_apply', 'tier_rule_wait_multiply_level',
                          'tier_rule_no_agent_no_wait', 'abandoned_resume_allowed']
        boolean_fields_html = """<div class="row"><div class="col-md-12 col-xs-10">"""

        for i in boolean_fields:
            boolean_fields_html += """
                <div class="col-xs-6">
                    <div class="btn-group" data-toggle="buttons">
                        <label for="{{ form.%s.auto_id }}">{{ form.%s.label }}</label><br/>
                        <div class="make-switch switch-small">
                        {{ form.%s }}
                        </div>
                    </div>
                </div>
                """ % (i, i, i)
        boolean_fields_html += """</div></div>"""

        self.helper.layout = Layout(
            Div(
                Div('name', css_class=css_class),
                Div('strategy', css_class=css_class),
                Div('moh_sound', css_class=css_class),
                Div('record_template', css_class=css_class),
                Div('time_base_score', css_class=css_class),
                Div('tier_rule_wait_second', css_class=css_class),
                Div('discard_abandoned_after', css_class=css_class),
                Div('max_wait_time', css_class=css_class),
                Div('max_wait_time_with_no_agent', css_class=css_class),
                Div('max_wait_time_with_no_agent_time_reached', css_class=css_class),
                HTML(boolean_fields_html),
                css_class='row'
            ),
        )
        if self.instance.id:
            common_submit_buttons(self.helper.layout, default_action='update')
        else:
            common_submit_buttons(self.helper.layout, default_action='add')


class TierForm(ModelForm):
    """TierForm is used to change"""

    class Meta:
        model = Tier

    def __init__(self, *args, **kwargs):
        super(TierForm, self).__init__(*args, **kwargs)
        self.fields['manager'].choices = manager_list()


class TierFrontEndForm(ModelForm):
    """Tier ModelForm"""

    class Meta:
        model = Tier
        exclude = ('manager',)

    def __init__(self, manager_id, *args, **kwargs):
        super(TierFrontEndForm, self).__init__(*args, **kwargs)
        self.helper = FormHelper()
        self.helper.form_class = 'well'
        self.helper.layout = Layout(
            Div(
                Div(Fieldset('', 'agent', 'queue', 'level', 'position', css_class='col-md-6')),
            ),
        )
        if self.instance.id:
            common_submit_buttons(self.helper.layout, 'update')
        else:
            common_submit_buttons(self.helper.layout)
        self.fields['agent'].choices = agentprofile_list(manager_id)
        self.fields['queue'].choices = queue_list(manager_id)

########NEW FILE########
__FILENAME__ = function_def
#
# Newfies-Dialer License
# http://www.newfies-dialer.org
#
# This Source Code Form is subject to the terms of the Mozilla Public
# License, v. 2.0. If a copy of the MPL was not distributed with this file,
# You can obtain one at http://mozilla.org/MPL/2.0/.
#
# Copyright (C) 2011-2014 Star2Billing S.L.
#
# The Initial Developer of the Original Code is
# Arezqui Belaid <info@star2billing.com>
#
from callcenter.models import Queue


def queue_list(manager_id):
    """Return all agents of the system"""
    return Queue.objects.values_list('id', 'name').filter(manager_id=manager_id).order_by('id')

########NEW FILE########
__FILENAME__ = models
#
# Newfies-Dialer License
# http://www.newfies-dialer.org
#
# This Source Code Form is subject to the terms of the Mozilla Public
# License, v. 2.0. If a copy of the MPL was not distributed with this file,
# You can obtain one at http://mozilla.org/MPL/2.0/.
#
# Copyright (C) 2011-2014 Star2Billing S.L.
#
# The Initial Developer of the Original Code is
# Arezqui Belaid <info@star2billing.com>
#
from django.db import models
from django.utils.translation import ugettext_lazy as _
from django.db.models.signals import post_save, post_delete
#from django.contrib.auth.models import User
from django_lets_go.intermediate_model_base_class import Model
from user_profile.models import Manager
from agent.models import AgentProfile, common_signal
from dialer_cdr.models import Callrequest
from callcenter.constants import STRATEGY, TIME_BASE_SCORE_TYPE, AGENT_CALLSTATE_TYPE


class CallAgent(Model):
    """This store the realtime callrequest the agent is receiving.

    An agent will at a given time have one callrequest only, this is the current
    calls he will have on the line or about to be redirected to him.

    This information is provided by the backend listener which capture
    event from the callcenter. The backend will relate the current calls being
    forwarded to agent and keep trace of this into CallAgent model.


    **Relationships**:

        * ``agent`` - Foreign key relationship to the agent model.

        * ``callrequest`` - Foreign key relationship to the Callrequest model.

    **Name of DB table**: callcenter_callagent

    """
    callrequest = models.ForeignKey(Callrequest, blank=True, null=True, help_text=_("select callrequest"),
                                    related_name="callrequest_callagent")
    agent = models.ForeignKey(AgentProfile, verbose_name=_("agent"), blank=True, null=True,
                              help_text=_("select agent"), related_name="agent_callagent")
    callstate = models.CharField(verbose_name=_("call state"), choices=list(AGENT_CALLSTATE_TYPE), max_length=250,
                                 default=AGENT_CALLSTATE_TYPE.agent_offering)
    created_date = models.DateTimeField(auto_now_add=True, verbose_name=_('date'))

    class Meta:
        db_table = u'callcenter_callagent'

    def __unicode__(self):
        return u"[%s] - %s" % (self.callrequest, self.agent)


class Queue(Model):
    """This defines the callcenter queue

    **XML output**:
        <param name="strategy" value="agent-with-least-talk-time"/>
        <param name="moh-sound" value="$${hold_music}"/>
        <param name="record-template" value="$${base_dir}/recordings/sales/${strftime(%Y-%m-%d-%H-%M-%S)}.${destination_number}.${caller_id_number}.${uuid}.wav"/>
        <param name="time-base-score" value="queue"/>
        <param name="tier-rules-apply" value="false"/>
        <param name="tier-rule-wait-second" value="300"/>
        <param name="tier-rule-wait-multiply-level" value="true"/>
        <param name="tier-rule-no-agent-no-wait" value="false"/>
        <param name="discard-abandoned-after" value="14400"/>
        <param name="abandoned-resume-allowed" value="True"/>
        <param name="max-wait-time" value="0"/>
        <param name="max-wait-time-with-no-agent" value="120"/>
        <param name="max-wait-time-with-no-agent-time-reached" value="5"/>

    **Attributes**:

        * ``strategy`` - Queue strategy
        * ```` -


    **Relationships**:

        * ``manager`` - Foreign key relationship to the manager model.

    **Name of DB table**: queue

    """
    manager = models.ForeignKey(Manager, verbose_name=_("manager"), blank=True, null=True,
                                help_text=_("select manager"), related_name="queue manager")
    name = models.CharField(verbose_name=_("name"), max_length=250)
    strategy = models.IntegerField(choices=list(STRATEGY), default=STRATEGY.agent_with_least_talk_time,
                                   verbose_name=_("status"), blank=True, null=True)
    moh_sound = models.CharField(verbose_name=_("moh-sound"), max_length=250, null=True, blank=True)
    record_template = models.CharField(verbose_name=_("record-template"), max_length=250, null=True, blank=True)
    time_base_score = models.CharField(verbose_name=_("time-base-score"), max_length=250,
                                       choices=list(TIME_BASE_SCORE_TYPE), default=TIME_BASE_SCORE_TYPE.queue)
    tier_rules_apply = models.BooleanField(default=False, verbose_name=_("tier-rules-apply"))
    tier_rule_wait_second = models.IntegerField(verbose_name=_("tier-rule-wait-second"),
                                                max_length=250, null=True, blank=True, default=300)
    tier_rule_wait_multiply_level = models.BooleanField(default=True, verbose_name=_("tier-rule-wait-multiply-level"))
    tier_rule_no_agent_no_wait = models.BooleanField(default=False, verbose_name=_("tier-rule-no-agent-no-wait"))
    discard_abandoned_after = models.IntegerField(verbose_name=_("discard-abandoned-after"),
                                                  max_length=250, null=True, blank=True, default=14400)
    abandoned_resume_allowed = models.BooleanField(default=True, verbose_name=_("abandoned-resume-allowed"))
    max_wait_time = models.IntegerField(verbose_name=_("max-wait-time"), max_length=250, null=True, blank=True,
                                        default=0)
    max_wait_time_with_no_agent = models.IntegerField(verbose_name=_("max-wait-time-with-no-agent"),
                                                      max_length=250, null=True, blank=True, default=120)
    max_wait_time_with_no_agent_time_reached = models.IntegerField(verbose_name=_("max-wait-time-with-no-agent-time-reached"),
                                                                   max_length=250, null=True, blank=True,
                                                                   default=5)
    created_date = models.DateTimeField(auto_now_add=True, verbose_name=_('date'))
    updated_date = models.DateTimeField(auto_now=True)

    class Meta:
        permissions = (
            ("view_queue", _('can see Queue list')),
        )
        db_table = u'callcenter_queue'
        verbose_name = _("queue")
        verbose_name_plural = _("queues")

    def __unicode__(self):
        return u"%s" % (self.name)


class Tier(Model):
    """This defines the callcenter tier

    **XML output**:
        <!-- If no level or position is provided, they will default to 1.  You should do this to keep db value on restart. -->
        <!-- agent 1000 will be in both the sales and support queues -->
        <tier agent="1000@default" queue="sales@default" level="1" position="1"/>
        <tier agent="1000@default" queue="support@default" level="1" position="1"/>
        <!-- agent 1001 will only be in the support queue -->
        <tier agent="1001@default" queue="support@default" level="1" position="1"/>

    **Attributes**:

        * ``request_uuid`` - Unique id
        * ```` -


    **Relationships**:

        * ``manager`` - Foreign key relationship to the manager model.
        * ``agent`` - Foreign key relationship to the agent model.
        * ``queue`` - Foreign key relationship to the queue model.

    **Name of DB table**: tier

    """
    manager = models.ForeignKey(Manager, verbose_name=_("manager"), blank=True, null=True,
                                help_text=_("select manager"), related_name="tier manager")
    agent = models.ForeignKey(AgentProfile, verbose_name=_("agent"), blank=True, null=True,
                              help_text=_("select agent"), related_name="agent")
    queue = models.ForeignKey(Queue, verbose_name=_("queue"), blank=True, null=True,
                              help_text=_("select queue"), related_name="queue")
    level = models.IntegerField(verbose_name=_("level"), default=1)
    position = models.IntegerField(verbose_name=_("position"), default=1)

    created_date = models.DateTimeField(auto_now_add=True, verbose_name=_('date'))
    updated_date = models.DateTimeField(auto_now=True)

    class Meta:
        permissions = (
            ("view_tier", _('can see Tier list')),
        )
        db_table = u'callcenter_tier'
        verbose_name = _("tier")
        verbose_name_plural = _("tiers")

    def __unicode__(self):
            return u"%s" % (self.id)


def post_save_tier(sender, **kwargs):
    """A ``post_save`` signal is sent by the Queue model instance whenever
    it is going to save.
    """
    common_signal(kwargs['instance'].manager_id)


def post_save_queue(sender, **kwargs):
    """A ``post_save`` signal is sent by the Queue model instance whenever
    it is going to delete.
    """
    common_signal(kwargs['instance'].manager_id)


def post_delete_queue(sender, **kwargs):
    """A ``post_delete`` signal is sent by the Queue model instance whenever
    it is going to save.
    """
    common_signal(kwargs['instance'].manager_id)


def post_delete_tier(sender, **kwargs):
    """A ``post_delete`` signal is sent by the Tier model instance whenever
    it is going to delete.
    """
    common_signal(kwargs['instance'].manager_id)


post_save.connect(post_save_tier, sender=Tier)
post_save.connect(post_save_queue, sender=Queue)
post_delete.connect(post_delete_tier, sender=Tier)
post_delete.connect(post_delete_queue, sender=Queue)

########NEW FILE########
__FILENAME__ = callcenter_tags
#
# Newfies-Dialer License
# http://www.newfies-dialer.org
#
# This Source Code Form is subject to the terms of the Mozilla Public
# License, v. 2.0. If a copy of the MPL was not distributed with this file,
# You can obtain one at http://mozilla.org/MPL/2.0/.
#
# Copyright (C) 2011-2014 Star2Billing S.L.
#
# The Initial Developer of the Original Code is
# Arezqui Belaid <info@star2billing.com>
#

from django.template.defaultfilters import register
from callcenter.constants import STRATEGY
from mod_utils.function_def import get_status_value


@register.filter(name='strategy_name')
def strategy_name(value):
    """strategy name"""
    return get_status_value(value, STRATEGY)

########NEW FILE########
__FILENAME__ = urls
#
# Newfies-Dialer License
# http://www.newfies-dialer.org
#
# This Source Code Form is subject to the terms of the Mozilla Public
# License, v. 2.0. If a copy of the MPL was not distributed with this file,
# You can obtain one at http://mozilla.org/MPL/2.0/.
#
# Copyright (C) 2011-2014 Star2Billing S.L.
#
# The Initial Developer of the Original Code is
# Arezqui Belaid <info@star2billing.com>
#
from django.conf.urls import patterns


urlpatterns = patterns('callcenter.views',
    (r'^module/queue/$', 'queue_list'),
    (r'^module/queue/add/$', 'queue_add'),
    (r'^module/queue/del/(.+)/$', 'queue_del'),
    (r'^module/queue/(.+)/$', 'queue_change'),
    (r'^module/tier/$', 'tier_list'),
    (r'^module/tier/add/$', 'tier_add'),
    (r'^module/tier/del/(.+)/$', 'tier_del'),
    (r'^module/tier/(.+)/$', 'tier_change'),
)

########NEW FILE########
__FILENAME__ = views
#
# Newfies-Dialer License
# http://www.newfies-dialer.org
#
# This Source Code Form is subject to the terms of the Mozilla Public
# License, v. 2.0. If a copy of the MPL was not distributed with this file,
# You can obtain one at http://mozilla.org/MPL/2.0/.
#
# Copyright (C) 2011-2014 Star2Billing S.L.
#
# The Initial Developer of the Original Code is
# Arezqui Belaid <info@star2billing.com>
#
from django.contrib.auth.decorators import login_required, permission_required
from django.http import HttpResponseRedirect, Http404
from django.shortcuts import render_to_response, get_object_or_404
from django.utils.translation import ugettext as _
from django.template.context import RequestContext
from user_profile.models import Manager
from callcenter.models import Queue, Tier
from callcenter.constants import QUEUE_COLUMN_NAME, TIER_COLUMN_NAME
from callcenter.forms import QueueFrontEndForm, TierFrontEndForm
from django_lets_go.common_functions import get_pagination_vars
from survey.models import Section_template

redirect_url_to_queue_list = '/module/queue/'
redirect_url_to_tier_list = '/module/tier/'


@permission_required('callcenter.view_queue', login_url='/')
@login_required
def queue_list(request):
    """Queue list for the logged in Manager

    **Attributes**:

        * ``template`` - callcenter/queue/list.html

    **Logic Description**:

        * List all queue which belong to the logged in manager.
    """
    sort_col_field_list = ['name', 'strategy', 'time_base_score', 'updated_date']
    pag_vars = get_pagination_vars(request, sort_col_field_list, default_sort_field='id')
    queue_list = Queue.objects.filter(manager=request.user).order_by(pag_vars['sort_order'])
    data = {
        'msg': request.session.get('msg'),
        'error_msg': request.session.get('error_msg'),
        'queue_list': queue_list,
        'total_queue': queue_list.count(),
        'QUEUE_COLUMN_NAME': QUEUE_COLUMN_NAME,
        'col_name_with_order': pag_vars['col_name_with_order'],
    }
    request.session['msg'] = ''
    request.session['error_msg'] = ''
    return render_to_response('callcenter/queue/list.html', data, context_instance=RequestContext(request))


@permission_required('callcenter.add_queue', login_url='/')
@login_required
def queue_add(request):
    """Add new queue for the logged in manager

    **Attributes**:

        * ``form`` - QueueFrontEndForm
        * ``template`` - callcenter/queue/change.html

    **Logic Description**:

        * Add a new queue which will belong to the logged in manager
          via the UserCreationForm & get redirected to the queue list
    """
    form = QueueFrontEndForm(request.POST or None)
    if form.is_valid():
        obj = form.save(commit=False)
        obj.manager = Manager.objects.get(username=request.user)
        obj.save()
        request.session["msg"] = _('"%(name)s" queue is added.') % {'name': obj.name}
        return HttpResponseRedirect(redirect_url_to_queue_list)

    data = {
        'form': form,
        'action': 'add',
    }
    return render_to_response('callcenter/queue/change.html', data, context_instance=RequestContext(request))


def queue_delete_allow(queue_id):
    """Check queue is attached to any survey section or not"""
    try:
        section_count = Section_template.objects.filter(queue_id=queue_id).count()
        if section_count > 0:
            return False
        else:
            return True
    except:
        return True


@permission_required('callcenter.delete_queue', login_url='/')
@login_required
def queue_del(request, object_id):
    """Delete queue for the logged in Manager

    **Attributes**:

        * ``object_id`` - Selected queue object
        * ``object_list`` - Selected queue objects

    **Logic Description**:

        * Delete selected queue from the queue list
    """
    if int(object_id) != 0:
        # When object_id is not 0
        queue = get_object_or_404(Queue, pk=object_id, manager=request.user)

        if queue_delete_allow(object_id):
            # Delete queue
            request.session["msg"] = _('"%(name)s" is deleted.') % {'name': queue.name}
            queue.delete()
        else:
            request.session["error_msg"] = _('"%(name)s" is not allowed to delete because it is being used with survey.') % {'name': queue.name}
    else:
        # When object_id is 0 (Multiple records delete)
        values = request.POST.getlist('select')
        values = ", ".join(["%s" % el for el in values])
        deleted_list = []
        not_deleted_list = []
        try:
            queue_list = Queue.objects.extra(where=['id IN (%s)' % values])
            if queue_list:
                for queue_obj in queue_list:
                    if queue_delete_allow(queue_obj.id):
                        deleted_list.append(str(queue_obj.name))
                        queue_obj.delete()
                    else:
                        not_deleted_list.append(str(queue_obj.name))

                if deleted_list:
                    request.session["msg"] = _('%s queue(s) are deleted.') % deleted_list
                if not_deleted_list:
                    request.session["error_msg"] = _('%s queue(s) are not deleted because they are being used with surveys.')\
                        % not_deleted_list
        except:
            raise Http404
    return HttpResponseRedirect(redirect_url_to_queue_list)


@permission_required('callcenter.change_queue', login_url='/')
@login_required
def queue_change(request, object_id):
    """Update/Delete queue for the logged in manager

    **Attributes**:

        * ``object_id`` - Selected queue object
        * ``form`` - QueueFrontEndForm
        * ``template`` - callcenter/queue/change.html

    **Logic Description**:

        * Update/delete selected queue from the queue list
          via QueueFrontEndForm & get redirected to the queue list
    """
    queue = get_object_or_404(Queue, pk=object_id, manager=request.user)
    form = QueueFrontEndForm(request.POST or None, instance=queue)
    if form.is_valid():
        # Delete queue
        if request.POST.get('delete'):
            queue_del(request, object_id)
            return HttpResponseRedirect(redirect_url_to_queue_list)
        else:
            # Update queue
            obj = form.save()
            request.session["msg"] = _('"%(name)s" is updated.') % {'name': obj.name}
            return HttpResponseRedirect(redirect_url_to_queue_list)

    data = {
        'form': form,
        'action': 'update',
    }
    return render_to_response('callcenter/queue/change.html', data, context_instance=RequestContext(request))


@permission_required('callcenter.view_tier', login_url='/')
@login_required
def tier_list(request):
    """Tier list for the logged in Manager

    **Attributes**:

        * ``template`` - callcenter/tier/list.html

    **Logic Description**:

        * List all tier which belong to the logged in manager.
    """
    sort_col_field_list = ['agent', 'queue', 'level', 'position', 'updated_date']
    pag_vars = get_pagination_vars(request, sort_col_field_list, default_sort_field='id')
    tier_list = Tier.objects.filter(manager=request.user).order_by(pag_vars['sort_order'])
    data = {
        'msg': request.session.get('msg'),
        'tier_list': tier_list,
        'total_tier': tier_list.count(),
        'TIER_COLUMN_NAME': TIER_COLUMN_NAME,
        'col_name_with_order': pag_vars['col_name_with_order'],
    }
    request.session['msg'] = ''
    request.session['error_msg'] = ''
    return render_to_response('callcenter/tier/list.html', data, context_instance=RequestContext(request))


@permission_required('callcenter.add_tier', login_url='/')
@login_required
def tier_add(request):
    """Add new tier for the logged in manager

    **Attributes**:

        * ``form`` - TierFrontEndForm
        * ``template`` - callcenter/tier/change.html

    **Logic Description**:

        * Add a new tier which will belong to the logged in manager
          via the TierFrontEndForm & get redirected to the tier list
    """
    form = TierFrontEndForm(request.user.id, request.POST or None)
    if form.is_valid():
        obj = form.save(commit=False)
        obj.manager = Manager.objects.get(username=request.user)
        obj.save()

        request.session["msg"] = _('"%(name)s" tier is added.') % {'name': obj.id}
        return HttpResponseRedirect(redirect_url_to_tier_list)
    data = {
        'form': form,
        'action': 'add',
    }
    return render_to_response('callcenter/tier/change.html', data,
                              context_instance=RequestContext(request))


@permission_required('callcenter.delete_tier', login_url='/')
@login_required
def tier_del(request, object_id):
    """Delete tier for the logged in Manager

    **Attributes**:

        * ``object_id`` - Selected tier object
        * ``object_list`` - Selected tier objects

    **Logic Description**:

        * Delete selected tier from the tier list
    """
    if int(object_id) != 0:
        # When object_id is not 0
        tier = get_object_or_404(Tier, pk=object_id, manager=request.user)

        # Delete tier
        request.session["msg"] = _('"%(name)s" is deleted.') % {'name': tier.id}
        tier.delete()
    else:
        # When object_id is 0 (Multiple records delete)
        values = request.POST.getlist('select')
        values = ", ".join(["%s" % el for el in values])

        try:
            tier_list = Tier.objects.extra(where=['id IN (%s)' % values])
            if tier_list:
                request.session["msg"] = _('%(count)s tier(s) are deleted.') % {'count': tier_list.count()}
                tier_list.delete()
        except:
            raise Http404
    return HttpResponseRedirect(redirect_url_to_tier_list)


@permission_required('callcenter.change_tier', login_url='/')
@login_required
def tier_change(request, object_id):
    """Update/Delete tier for the logged in manager

    **Attributes**:

        * ``object_id`` - Selected tier object
        * ``form`` - TierFrontEndForm
        * ``template`` - callcenter/tier/change.html

    **Logic Description**:

        * Update/delete selected tier from the tier list
          via TierFrontEndForm & get redirected to the tier list
    """
    tier = get_object_or_404(Tier, pk=object_id, manager=request.user)
    form = TierFrontEndForm(request.user.id, request.POST or None, instance=tier)
    if form.is_valid():
        # Delete tier
        if request.POST.get('delete'):
            tier_del(request, object_id)
            return HttpResponseRedirect(redirect_url_to_tier_list)
        else:
            # Update tier
            form.save()
            request.session["msg"] = _('"%(id)s" tier is updated.') % {'id': tier.id}
            return HttpResponseRedirect(redirect_url_to_tier_list)

    data = {
        'form': form,
        'action': 'update',
    }
    return render_to_response('callcenter/tier/change.html', data, context_instance=RequestContext(request))

########NEW FILE########
__FILENAME__ = common_functions
#
# Newfies-Dialer License
# http://www.newfies-dialer.org
#
# This Source Code Form is subject to the terms of the Mozilla Public
# License, v. 2.0. If a copy of the MPL was not distributed with this file,
# You can obtain one at http://mozilla.org/MPL/2.0/.
#
# Copyright (C) 2011-2014 Star2Billing S.L.
#
# The Initial Developer of the Original Code is
# Arezqui Belaid <info@star2billing.com>
#

from django.conf import settings
from django import db
import os


def debug_query(number):
    """
    Function to debug the SQL queries
    """
    if settings.DIALERDEBUG and number >= 20:
        print("%d) " % number)
        print("QUERY #) %d" % len(db.connection.queries))
        print(db.connection.queries)
    if settings.DIALERDEBUG:
        db.reset_queries()


def check_celeryd_process():
    """Check celeryd service running or not"""
    process = os.popen("ps x | grep celeryd").read().splitlines()
    if len(process) > 2:
        return True
    else:
        return False


def search_tag_string(mstring, tag):
    """
    Search in string tag with their value

    >>> mstring = 'needledtag1=143432,needledtag2=143432'

    >>> search_tag_string(mstring, 'needledtag1')
    '143432'
    """
    if not mstring or len(mstring) < 2:
        return False
    sval = {}
    try:
        sval = dict(e.split('=') for e in mstring.split(','))
    except ValueError:
        return False
    if tag in sval:
        return sval[tag]
    else:
        return False

########NEW FILE########
__FILENAME__ = context_processors
#
# Newfies-Dialer License
# http://www.newfies-dialer.org
#
# This Source Code Form is subject to the terms of the Mozilla Public
# License, v. 2.0. If a copy of the MPL was not distributed with this file,
# You can obtain one at http://mozilla.org/MPL/2.0/.
#
# Copyright (C) 2011-2014 Star2Billing S.L.
#
# The Initial Developer of the Original Code is
# Arezqui Belaid <info@star2billing.com>
#
import newfies_dialer
from django.conf import settings
from dialer_campaign.function_def import user_dialer_setting_msg


def newfies_version(request):
    return {'newfies_version': newfies_dialer.__version__, 'SURVEYDEV': settings.SURVEYDEV}


def newfies_common_template_variable(request):
    """Return common_template_variable"""
    newfies_page_size = settings.PAGE_SIZE if settings.PAGE_SIZE else 10
    return {'newfies_page_size': newfies_page_size, 'dialer_setting_msg': user_dialer_setting_msg(request.user), 'AUDIO_DEBUG': settings.AUDIO_DEBUG, 'AMD': settings.AMD}

########NEW FILE########
__FILENAME__ = dashboard
#
# Newfies-Dialer License
# http://www.newfies-dialer.org
#
# This Source Code Form is subject to the terms of the Mozilla Public
# License, v. 2.0. If a copy of the MPL was not distributed with this file,
# You can obtain one at http://mozilla.org/MPL/2.0/.
#
# Copyright (C) 2011-2014 Star2Billing S.L.
#
# The Initial Developer of the Original Code is
# Arezqui Belaid <info@star2billing.com>
#

"""This file was generated with the customdashboard management command, it
contains the two classes for the main dashboard and app index dashboard.
You can customize these classes as you want.

To activate your index dashboard add the following to your settings.py::
    ADMIN_TOOLS_INDEX_DASHBOARD = 'dashboard.CustomIndexDashboard'

And to activate the app index dashboard::
    ADMIN_TOOLS_APP_INDEX_DASHBOARD = 'dashboard.CustomAppIndexDashboard'"""

from django.utils.translation import ugettext_lazy as _
from django.core.urlresolvers import reverse
from admin_tools.dashboard import modules, Dashboard, AppIndexDashboard
from admin_tools_stats.modules import DashboardCharts, get_active_graph
#from admin_tools.utils import get_admin_site_name
from django.conf import settings


class HistoryDashboardModule(modules.LinkList):
    title = 'History'

    def init_with_context(self, context):
        request = context['request']
        # we use sessions to store the visited pages stack
        history = request.session.get('history', [])
        for item in history:
            self.children.append(item)
        # add the current page to the history
        history.insert(0, {
            'title': context['title'],
            'url': request.META['PATH_INFO'],
        })
        if len(history) > 10:
            history = history[:10]
        request.session['history'] = history


class CustomIndexDashboard(Dashboard):
    """Custom index dashboard"""

    def init_with_context(self, context):

        request = context['request']

        # we want a 3 columns layout
        self.columns = 3

        self.children.append(modules.Group(
            title=_("general").capitalize(),
            display="tabs",
            children=[
                modules.AppList(
                    title=_('user').capitalize(),
                    models=('django.contrib.*', 'user_profile.*', 'agent.*', ),
                ),
                modules.AppList(
                    _('task manager').title(),
                    models=('djcelery.*', ),
                ),
                modules.AppList(
                    _('dashboard stats').capitalize(),
                    models=('admin_tools_stats.*', ),
                ),
                modules.RecentActions(_('recent actions').capitalize(), 5),
            ]
        ))

        self.children.append(modules.AppList(
            _('callcenter').title(),
            models=('callcenter.*', ),
        ))

        self.children.append(modules.AppList(
            _('settings').capitalize(),
            models=('dialer_settings.*', ),
        ))

        # append an app list module for "Dialer"
        self.children.append(modules.AppList(
            _('VoIP dialer').title(),
            models=('dialer_cdr.*', 'dialer_gateway.*',
                    'dialer_contact.*', 'dialer_campaign.*', ),
        ))

        # append an app list module for "Dialer"
        self.children.append(modules.AppList(
            _('surveys').capitalize(),
            models=('survey.*', ),
        ))

        self.children.append(modules.AppList(
            _('SMS Gateway'),
            models=('sms.*', ),
        ))

        # append an app list module for "SMS"
        self.children.append(modules.AppList(
            _('SMS module'),
            models=('mod_sms.*', ),
        ))

        # append an app list module for "Dialer"
        self.children.append(modules.AppList(
            _('audio files').title(),
            models=('audiofield.*', ),
        ))

        self.children.append(modules.AppList(
            _('do not call').title(),
            models=('dnc.*', ),
        ))

        self.children.append(modules.AppList(
            _('appointment').title(),
            models=('appointment.*', ),
        ))

        self.children.append(modules.AppList(
            _('mod_mailer').title(),
            models=('mod_mailer.*', ),
        ))

        self.children.append(modules.LinkList(
            _('Reporting'),
            draggable=True,
            deletable=True,
            collapsible=True,
            children=[
                [_('Call Daily Report'),
                 reverse('admin:dialer_cdr_voipcall_changelist') + 'voip_daily_report/'],
            ],
        ))

        # append a link list module for "quick links"
        #"""
        # site_name = get_admin_site_name(context)

        #Quick link seems to broke the admin design if too many element
        self.children.append(modules.LinkList(
            _('Quick links'),
            layout='inline',
            draggable=True,
            deletable=True,
            collapsible=True,
            children=[
                [_('Newfies-Dialer Website'), 'http://www.newfies-dialer.org/'],
                [_('Support'), 'http://www.newfies-dialer.org/about-us/contact/'],
                [_('Add-ons'), 'http://www.newfies-dialer.org/add-ons/'],
                # [_('Change password'), reverse('%s:password_change' % site_name)],
                # [_('Log out'), reverse('%s:logout' % site_name)],
            ],
        ))
        #"""

        if not settings.DEBUG:
            # append a feed module
            self.children.append(modules.Feed(
                _('Latest Newfies-Dialer News'),
                feed_url='http://www.newfies-dialer.org/category/blog/feed/',
                limit=5
            ))

        # append an app list module for "Country_prefix"
        self.children.append(modules.AppList(
            _('dashboard stats settings').title(),
            models=('admin_dashboard_stats.*', ),
        ))

        # Copy following code into your custom dashboard
        graph_list = get_active_graph()
        for i in graph_list:
            kwargs = {}
            kwargs['require_chart_jscss'] = False
            kwargs['graph_key'] = i.graph_key
            if request.POST.get('select_box_' + i.graph_key):
                kwargs['select_box_' + i.graph_key] = request.POST['select_box_' + i.graph_key]

            self.children.append(DashboardCharts(**kwargs))


class CustomAppIndexDashboard(AppIndexDashboard):
    """Custom app index dashboard for admin."""

    # we disable title because its redundant with the model list module
    title = ''

    def __init__(self, *args, **kwargs):
        AppIndexDashboard.__init__(self, *args, **kwargs)

        #TODO: Find out better way
        if str(self.app_title) == 'Dialer_Settings':
            app_title = _('dialer settings').title()
            models = ['dialer_settings.*']
        elif str(self.app_title) == 'Dialer_Campaign':
            app_title = _('dialer campaign').title()
            models = ['dialer_campaign.*']
        elif str(self.app_title) == 'Dialer_Contact':
            app_title = _('dialer contact').title()
            models = ['dialer_contact.*']
        elif str(self.app_title) == 'Dialer_Cdr':
            app_title = _('Dialer CDR')
            models = ['dialer_cdr.*']
        elif str(self.app_title) == 'Dialer_Gateway':
            app_title = _('dialer gateway').title()
            models = ['dialer_gateway.*']
        elif str(self.app_title) == 'Country_Dialcode':
            app_title = _('country dialcode').title()
            models = ['country_dialcode.*']
        elif str(self.app_title) == 'Dnc':
            app_title = _('do not call').title()
            models = ['dnc.*']
        else:
            app_title = self.app_title
            models = self.models

        # append a model list module and a recent actions module
        self.children += [
            #modules.ModelList(self.app_title, self.models),
            modules.ModelList(app_title, models),
            modules.RecentActions(
                _('recent actions').title(),
                include_list=self.get_app_content_types(),
                limit=5,
            ),
        ]

    def init_with_context(self, context):
        """Use this method if you need to access the request context."""
        return super(CustomAppIndexDashboard, self).init_with_context(context)

########NEW FILE########
__FILENAME__ = menu
#
# Newfies-Dialer License
# http://www.newfies-dialer.org
#
# This Source Code Form is subject to the terms of the Mozilla Public
# License, v. 2.0. If a copy of the MPL was not distributed with this file,
# You can obtain one at http://mozilla.org/MPL/2.0/.
#
# Copyright (C) 2011-2014 Star2Billing S.L.
#
# The Initial Developer of the Original Code is
# Arezqui Belaid <info@star2billing.com>
#

"""This file was generated with the custommenu management command, it contains
the classes for the admin menu, you can customize this class as you want.

To activate your custom menu add the following to your settings.py::
    ADMIN_TOOLS_MENU = 'menu.CustomMenu'"""
from django.core.urlresolvers import reverse
from django.utils.translation import ugettext_lazy as _
from admin_tools.menu import items, Menu
import newfies_dialer


class CustomMenu(Menu):
    """Custom Menu for admin site."""

    def __init__(self, **kwargs):
        Menu.__init__(self, **kwargs)
        self.children += [
            items.MenuItem(_('Newfies-Dialer' + ' V' + newfies_dialer.__version__), reverse('admin:index')),
            items.Bookmarks(),
            items.AppList(
                _('applications').capitalize(),
                exclude=('django.contrib.*', )
            ),
            items.AppList(
                _('administration').capitalize(),
                models=('django.contrib.*', )
            ),
            items.MenuItem(_('API Explorer'), reverse('admin:index') + '../rest-api/'),
            items.MenuItem(_('customer panel').title(), reverse('admin:index') + '../'),
        ]

    def init_with_context(self, context):
        """Use this method if you need to access the request context."""
        return super(CustomMenu, self).init_with_context(context)

########NEW FILE########
__FILENAME__ = constants
#
# Newfies-Dialer License
# http://www.newfies-dialer.org
#
# This Source Code Form is subject to the terms of the Mozilla Public
# License, v. 2.0. If a copy of the MPL was not distributed with this file,
# You can obtain one at http://mozilla.org/MPL/2.0/.
#
# Copyright (C) 2011-2014 Star2Billing S.L.
#
# The Initial Developer of the Original Code is
# Arezqui Belaid <info@star2billing.com>
#

from django.utils.translation import ugettext_lazy as _
from django_lets_go.utils import Choice


class AUDIO_COLUMN_NAME(Choice):
    name = _('name')
    audio_name = _('audio')
    audio_url = _('audio URL')
    date = _('date')

########NEW FILE########
__FILENAME__ = forms
#
# Newfies-Dialer License
# http://www.newfies-dialer.org
#
# This Source Code Form is subject to the terms of the Mozilla Public
# License, v. 2.0. If a copy of the MPL was not distributed with this file,
# You can obtain one at http://mozilla.org/MPL/2.0/.
#
# Copyright (C) 2011-2014 Star2Billing S.L.
#
# The Initial Developer of the Original Code is
# Arezqui Belaid <info@star2billing.com>
#

from audiofield.forms import CustomerAudioFileForm
from mod_utils.forms import SaveUserModelForm, common_submit_buttons
from crispy_forms.helper import FormHelper
from crispy_forms.layout import Layout, Fieldset, Div


class DialerAudioFileForm(CustomerAudioFileForm, SaveUserModelForm):

    def __init__(self, *args, **kwargs):
        super(DialerAudioFileForm, self).__init__(*args, **kwargs)
        self.helper = FormHelper()
        self.helper.form_class = 'well'
        self.helper.layout = Layout(
            Div(Fieldset('', 'name', 'audio_file', css_class='col-md-4')),
        )

        if self.instance.id:
            common_submit_buttons(self.helper.layout, 'update')
        else:
            common_submit_buttons(self.helper.layout)

########NEW FILE########
__FILENAME__ = dialer_audio_tags
#
# Newfies-Dialer License
# http://www.newfies-dialer.org
#
# This Source Code Form is subject to the terms of the Mozilla Public
# License, v. 2.0. If a copy of the MPL was not distributed with this file,
# You can obtain one at http://mozilla.org/MPL/2.0/.
#
# Copyright (C) 2011-2014 Star2Billing S.L.
#
# The Initial Developer of the Original Code is
# Arezqui Belaid <info@star2billing.com>
#

from django.template.defaultfilters import register
from django.conf import settings
import os.path


@register.filter(name='get_file_basename')
def get_file_basename(val):
    if val:
        file_url = settings.MEDIA_URL + str(val)
        return os.path.basename(file_url)
    return ''

########NEW FILE########
__FILENAME__ = tests
#
# Newfies-Dialer License
# http://www.newfies-dialer.org
#
# This Source Code Form is subject to the terms of the Mozilla Public
# License, v. 2.0. If a copy of the MPL was not distributed with this file,
# You can obtain one at http://mozilla.org/MPL/2.0/.
#
# Copyright (C) 2011-2014 Star2Billing S.L.
#
# The Initial Developer of the Original Code is
# Arezqui Belaid <info@star2billing.com>
#

#from django.contrib.auth.models import User
from django.conf import settings
from django_lets_go.utils import BaseAuthenticatedClient
#from audiofield.models import AudioFile
from dialer_audio.views import audio_list  # audio_add, audio_change, audio_del
#import os

#audio_file = open(
#    os.path.abspath('../../newfies-dialer/newfies/') + '/dialer_audio/fixtures/testcase_audio.mp3', 'r'
#)

audio_file = open(
    settings.APPLICATION_DIR + '/dialer_audio/fixtures/testcase_audio.mp3', 'r'
)


class AudioFileAdminView(BaseAuthenticatedClient):
    """Test cases for AudioFile Admin Interface."""

    def test_admin_audiofile_view_list(self):
        """Test Function to check admin audiofile list"""
        response = self.client.get("/admin/audiofield/audiofile/")
        self.assertEqual(response.status_code, 200)

    def test_admin_audiofile_view_add(self):
        """Test Function to check admin audiofile add"""
        response = self.client.get("/admin/audiofield/audiofile/add/")
        self.assertEqual(response.status_code, 200)


class AudioFileCustomerView(BaseAuthenticatedClient):
    """Test cases for AudioFile Customer Interface."""

    fixtures = ['auth_user.json']

    def test_audiofile_view_list(self):
        """Test Function to check audio list"""
        response = self.client.get('/module/audio/')
        self.assertEqual(response.status_code, 200)
        self.assertTemplateUsed(response, 'dialer_audio/audio_list.html')

        request = self.factory.get('/module/audio/')
        request.user = self.user
        request.session = {}
        response = audio_list(request)
        self.assertEqual(response.status_code, 200)
    """
    def test_audiofile_view_add(self):
        request = self.factory.post('/module/audio/add/',
            {"name": "sample_audio_file",
             "audio_file": audio_file,
             "convert_type": 2,
             "channel_type": 1,
             "freq_type": 8000,
            }, follow=True)
        request.user = self.user
        request.session = {}
        response = audio_add(request)
        self.assertEqual(response.status_code, 200)
        def test_audiofile_view_change(self):
        request = self.factory.post('/module/audio/1/',
            {'name': 'sample_audio'},
            follow=True)
        request.user = self.user
        request.session = {}
        response = audio_change(request, 1)
        self.assertEqual(response.status_code, 200)

        request = self.factory.post('/module/audio/1/',
            {'delete': 'true'}, follow=True)
        request.user = self.user
        request.session = {}
        response = audio_change(request, 1)
        self.assertEqual(response.status_code, 302)

    def test_audiofile_view_del(self):
        request = self.factory.post('/module/audio/del/1/', {},
            follow=True)
        request.user = self.user
        request.session = {}
        response = audio_del(request, 1)
        self.assertEqual(response.status_code, 302)
    """

########NEW FILE########
__FILENAME__ = urls
#
# Newfies-Dialer License
# http://www.newfies-dialer.org
#
# This Source Code Form is subject to the terms of the Mozilla Public
# License, v. 2.0. If a copy of the MPL was not distributed with this file,
# You can obtain one at http://mozilla.org/MPL/2.0/.
#
# Copyright (C) 2011-2014 Star2Billing S.L.
#
# The Initial Developer of the Original Code is
# Arezqui Belaid <info@star2billing.com>
#

from django.conf.urls import patterns

urlpatterns = patterns('dialer_audio.views',
    # Audio urls
    (r'^module/audio/$', 'audio_list'),
    (r'^module/audio/add/$', 'audio_add'),
    (r'^module/audio/del/(.+)/$', 'audio_del'),
    (r'^module/audio/(.+)/$', 'audio_change'),
)

########NEW FILE########
__FILENAME__ = views
#
# Newfies-Dialer License
# http://www.newfies-dialer.org
#
# This Source Code Form is subject to the terms of the Mozilla Public
# License, v. 2.0. If a copy of the MPL was not distributed with this file,
# You can obtain one at http://mozilla.org/MPL/2.0/.
#
# Copyright (C) 2011-2014 Star2Billing S.L.
#
# The Initial Developer of the Original Code is
# Arezqui Belaid <info@star2billing.com>
#

from django.contrib.sites.models import Site
from django.contrib.auth.decorators import login_required, \
    permission_required
from django.http import HttpResponseRedirect, Http404
from django.shortcuts import render_to_response, get_object_or_404
from django.template.context import RequestContext
from django.utils.translation import ugettext as _
from dialer_audio.constants import AUDIO_COLUMN_NAME
from dialer_audio.forms import DialerAudioFileForm
from audiofield.models import AudioFile
from django_lets_go.common_functions import get_pagination_vars
import os.path

audio_redirect_url = '/module/audio/'


@permission_required('audiofield.view_audiofile', login_url='/')
@login_required
def audio_list(request):
    """AudioFile list for the logged in user

    **Attributes**:

        * ``template`` - dialer_audio/audio_list.html

    **Logic Description**:

        * List all audios which belong to the logged in user.
    """
    sort_col_field_list = ['id', 'name', 'updated_date']
    pag_vars = get_pagination_vars(request, sort_col_field_list, default_sort_field='id')
    audio_list = AudioFile.objects.filter(user=request.user).order_by(pag_vars['sort_order'])
    domain = Site.objects.get_current().domain
    data = {
        'audio_list': audio_list,
        'total_audio': audio_list.count(),
        'AUDIO_COLUMN_NAME': AUDIO_COLUMN_NAME,
        'col_name_with_order': pag_vars['col_name_with_order'],
        'domain': domain,
        'msg': request.session.get('msg'),
    }
    request.session['msg'] = ''
    request.session['error_msg'] = ''
    return render_to_response('dialer_audio/audio_list.html', data, context_instance=RequestContext(request))


@permission_required('audiofield.add_audiofile', login_url='/')
@login_required
def audio_add(request):
    """Add new Audio for the logged in user

    **Attributes**:

        * ``form`` - SurveyCustomerAudioFileForm
        * ``template`` - dialer_audio/audio_change.html

    **Logic Description**:

        * Add a new audio which will belong to the logged in user
          via the CustomerAudioFileForm & get redirected to the audio list
    """
    form = DialerAudioFileForm(request.POST or None, request.FILES or None)
    if form.is_valid():
        form.save(user=request.user)
        request.session["msg"] = _('"%(name)s" added.') % {'name': request.POST['name']}
        return HttpResponseRedirect(audio_redirect_url)
    data = {
        'form': form,
        'action': 'add',
    }
    return render_to_response('dialer_audio/audio_change.html', data, context_instance=RequestContext(request))


def delete_audio_file(obj):
    """Delete audio file from computer drive"""
    if obj.audio_file:
        if os.path.exists(obj.audio_file.path):
            os.remove(obj.audio_file.path)
    return True


@permission_required('audiofield.delete_audiofile', login_url='/')
@login_required
def audio_del(request, object_id):
    """Delete a audio for a logged in user

    **Attributes**:

        * ``object_id`` - Selected audio object
        * ``object_list`` - Selected audio objects

    **Logic Description**:

        * Delete selected the audio from the audio list
    """
    if int(object_id) != 0:
        audio = get_object_or_404(AudioFile, pk=int(object_id), user=request.user)
        request.session["msg"] = _('"%(name)s" is deleted.') % {'name': audio.name}

        # 1) remove audio file from drive
        delete_audio_file(audio)
        # 2) delete audio
        audio.delete()
    else:
        try:
            # When object_id is 0 (Multiple records delete)
            values = request.POST.getlist('select')
            values = ", ".join(["%s" % el for el in values])

            audio_list = AudioFile.objects.filter(user=request.user).extra(where=['id IN (%s)' % values])

            request.session["msg"] = _('%(count)s audio(s) are deleted.') % {'count': audio_list.count()}

            # 1) remove audio file from drive
            for audio in audio_list:
                delete_audio_file(audio)

            # 2) delete audio
            audio_list.delete()
        except:
            raise Http404

    return HttpResponseRedirect(audio_redirect_url)


@permission_required('audiofield.change_audiofile', login_url='/')
@login_required
def audio_change(request, object_id):
    """Update Audio for the logged in user

    **Attributes**:

        * ``form`` - SurveyCustomerAudioFileForm
        * ``template`` - dialer_audio/audio_change.html

    **Logic Description**:

        * Update audio which is belong to the logged in user
          via the CustomerAudioFileForm & get redirected to the audio list
    """
    obj = get_object_or_404(AudioFile, pk=object_id, user=request.user)
    form = DialerAudioFileForm(request.POST or None, request.FILES or None, instance=obj)

    if form.is_valid():
        if request.POST.get('delete'):
            audio_change(request, object_id)
            return HttpResponseRedirect(audio_redirect_url)
        else:
            form.save()
            return HttpResponseRedirect(audio_redirect_url)
    data = {
        'form': form,
        'action': 'update',
    }
    return render_to_response('dialer_audio/audio_change.html', data, context_instance=RequestContext(request))

########NEW FILE########
__FILENAME__ = admin
#
# Newfies-Dialer License
# http://www.newfies-dialer.org
#
# This Source Code Form is subject to the terms of the Mozilla Public
# License, v. 2.0. If a copy of the MPL was not distributed with this file,
# You can obtain one at http://mozilla.org/MPL/2.0/.
#
# Copyright (C) 2011-2014 Star2Billing S.L.
#
# The Initial Developer of the Original Code is
# Arezqui Belaid <info@star2billing.com>
#
from django.contrib import admin
from django.contrib import messages
from django.conf.urls import patterns
from django.utils.translation import ugettext as _
from django.db.models import Count
from django.core.urlresolvers import reverse
from django.http import HttpResponseRedirect
from django.shortcuts import render_to_response
from django.template.context import RequestContext
from dialer_campaign.models import Campaign, Subscriber
#from dialer_campaign.admin_filters import AgentFilter
from dialer_campaign.function_def import check_dialer_setting, dialer_setting_limit
from dialer_campaign.constants import SUBSCRIBER_STATUS, SUBSCRIBER_STATUS_NAME
from dialer_campaign.forms import SubscriberReportForm, SubscriberAdminForm
from genericadmin.admin import GenericAdminModelAdmin
from django_lets_go.common_functions import ceil_strdate, getvar
# from django_lets_go.app_label_renamer import AppLabelRenamer
from datetime import datetime
APP_LABEL = _('Dialer Campaign')
# AppLabelRenamer(native_app_label=u'dialer_campaign', app_label=APP_LABEL).main()


class CampaignAdmin(GenericAdminModelAdmin):
    """
    Allows the administrator to view and modify certain attributes
    of a Campaign.
    """
    content_type_whitelist = ('survey/survey_template', 'survey/survey',)
    fieldsets = (
        (_('standard options').capitalize(), {
            'fields': ('campaign_code', 'name', 'description', 'callerid',
                       'user', 'status', 'startingdate', 'expirationdate',
                       'aleg_gateway', 'sms_gateway', 'content_type',
                       'object_id', 'extra_data', 'phonebook', 'voicemail',
                       'amd_behavior', 'voicemail_audiofile'
                       ),
        }),
        (_('advanced options').capitalize(), {
            'classes': ('collapse', ),
            'fields': ('frequency', 'callmaxduration', 'maxretry',
                       'intervalretry', 'calltimeout', 'imported_phonebook',
                       'daily_start_time', 'daily_stop_time',
                       'monday', 'tuesday', 'wednesday',
                       'thursday', 'friday', 'saturday', 'sunday',
                       'completion_maxretry', 'completion_intervalretry',
                       'dnc', 'agent_script', 'lead_disposition',
                       'external_link')
        }),
    )
    list_display = ('id', 'name', 'content_type', 'campaign_code', 'user',
                    'startingdate', 'expirationdate', 'frequency',
                    'callmaxduration', 'maxretry', 'aleg_gateway', 'sms_gateway',
                    'status', 'update_campaign_status', 'totalcontact',
                    'completed', 'subscriber_detail', 'progress_bar')

    list_display_links = ('id', 'name', )
    #list_filter doesn't display correctly too many elements in list_display
    #list_filter = ['user', 'status', 'created_date']
    ordering = ('-id', )
    filter_horizontal = ('phonebook', )

    def get_urls(self):
        urls = super(CampaignAdmin, self).get_urls()
        my_urls = patterns('',
            (r'^$', self.admin_site.admin_view(self.changelist_view)),
            (r'^add/$', self.admin_site.admin_view(self.add_view)),
        )
        return my_urls + urls

    def add_view(self, request, extra_context=None):
        """
        Override django add_view method for checking the dialer setting limit

        **Logic Description**:

            * Before adding campaign, check dialer setting limit if applicable
              to the user, if matched then the user will be redirected to
              the campaign list
        """
        # Check dialer setting limit
        # check Max Number of running campaigns
        if check_dialer_setting(request, check_for="campaign"):
            msg = _("you have too many campaigns. max allowed %(limit)s") % \
                {'limit': dialer_setting_limit(request, limit_for="campaign")}
            messages.error(request, msg)

            return HttpResponseRedirect(reverse("admin:dialer_campaign_campaign_changelist"))
        ctx = {}
        return super(CampaignAdmin, self).add_view(request, extra_context=ctx)
admin.site.register(Campaign, CampaignAdmin)


class SubscriberAdmin(admin.ModelAdmin):
    """Allows the administrator to view and modify certain attributes
    of a Subscriber."""
    form = SubscriberAdminForm
    list_display = ('id', 'contact', 'campaign', 'last_attempt', 'get_attempts',
                    'get_completion_attempts', 'duplicate_contact', 'disposition',
                    'collected_data', 'status', 'created_date')  # 'agent',
    list_filter = ('campaign', 'status', 'created_date', 'last_attempt', )  # AgentFilter
    raw_id_fields = ('contact',)
    ordering = ('-id', )

    def get_urls(self):
        urls = super(SubscriberAdmin, self).get_urls()
        my_urls = patterns('',
            (r'^subscriber_report/$', self.admin_site.admin_view(self.subscriber_report)),
        )
        return my_urls + urls

    def subscriber_report(self, request):
        """
        Get subscriber report

        **Attributes**:

            * ``form`` - SubscriberReportForm
            * ``template`` - admin/dialer_campaign/subscriber/subscriber_report.html
        """
        opts = Subscriber._meta
        tday = datetime.today()
        form = SubscriberReportForm(request.POST or None,
                                    initial={"from_date": tday.strftime("%Y-%m-%d"),
                                             "to_date": tday.strftime("%Y-%m-%d")})
        total_subscriber = 0
        total_pending = 0
        total_pause = 0
        total_abort = 0
        total_fail = 0
        total_sent = 0
        total_in_process = 0
        total_not_auth = 0
        total_completed = 0

        if form.is_valid():
            start_date = ''
            end_date = ''
            from_date = getvar(request, 'from_date')
            to_date = getvar(request, 'to_date')
            start_date = ceil_strdate(str(from_date), 'start')
            end_date = ceil_strdate(str(to_date), 'end')
            campaign_id = getvar(request, 'campaign_id')
            kwargs = {}
            if start_date and end_date:
                kwargs['updated_date__range'] = (start_date, end_date)
            if start_date and end_date == '':
                kwargs['updated_date__gte'] = start_date
            if start_date == '' and end_date:
                kwargs['updated_date__lte'] = end_date
            if campaign_id and campaign_id != '0':
                kwargs['campaign_id'] = campaign_id

            select_data = {"updated_date": "SUBSTR(CAST(updated_date as CHAR(30)),1,10)"}
            subscriber = Subscriber.objects.filter(**kwargs).extra(select=select_data)\
                .values('updated_date', 'status')\
                .annotate(Count('updated_date'))\
                .order_by('updated_date')

            for i in subscriber:
                total_subscriber += i['updated_date__count']
                if i['status'] == SUBSCRIBER_STATUS.PENDING:
                    total_pending += i['updated_date__count']
                elif i['status'] == SUBSCRIBER_STATUS.PAUSE:
                    total_pause += i['updated_date__count']
                elif i['status'] == SUBSCRIBER_STATUS.ABORT:
                    total_abort += i['updated_date__count']
                elif i['status'] == SUBSCRIBER_STATUS.FAIL:
                    total_fail += i['updated_date__count']
                elif i['status'] == SUBSCRIBER_STATUS.SENT:
                    total_sent += i['updated_date__count']
                elif i['status'] == SUBSCRIBER_STATUS.IN_PROCESS:
                    total_in_process += i['updated_date__count']
                elif i['status'] == SUBSCRIBER_STATUS.NOT_AUTHORIZED:
                    total_not_auth += i['updated_date__count']
                else:
                    #status COMPLETED
                    total_completed += i['updated_date__count']

        ctx = RequestContext(request, {
            'form': form,
            'opts': opts,
            'total_subscriber': total_subscriber,
            'total_pending': total_pending,
            'total_pause': total_pause,
            'total_abort': total_abort,
            'total_fail': total_fail,
            'total_sent': total_sent,
            'total_in_process': total_in_process,
            'total_not_auth': total_not_auth,
            'total_completed': total_completed,
            'SUBSCRIBER_STATUS_NAME': SUBSCRIBER_STATUS_NAME,
            'model_name': opts.object_name.lower(),
            'app_label': APP_LABEL,
            'title': _('subscriber report'),
        })

        return render_to_response('admin/dialer_campaign/subscriber/subscriber_report.html', context_instance=ctx)

admin.site.register(Subscriber, SubscriberAdmin)

########NEW FILE########
__FILENAME__ = admin_filters
#
# Newfies-Dialer License
# http://www.newfies-dialer.org
#
# This Source Code Form is subject to the terms of the Mozilla Public
# License, v. 2.0. If a copy of the MPL was not distributed with this file,
# You can obtain one at http://mozilla.org/MPL/2.0/.
#
# Copyright (C) 2011-2014 Star2Billing S.L.
#
# The Initial Developer of the Original Code is
# Arezqui Belaid <info@star2billing.com>
#
from django.contrib.admin import SimpleListFilter
from django.utils.translation import ugettext as _
#from agent.function_def import agent_list
#from agent.models import AgentProfile


class AgentFilter(SimpleListFilter):
    title = _('agent')
    parameter_name = 'agent'

    def lookups(self, request, model_admin):
        """
        Returns a list of tuples. The first element in each
        tuple is the coded value for the option that will
        appear in the URL query. The second element is the
        human-readable name for the option that will appear
        in the right sidebar.
        """
        return []  # agent_list()

    def queryset(self, request, queryset):
        """
        Returns the filtered queryset based on the value
        provided in the query string and retrievable via
        `self.value()`.
        """
        if self.value() is not None:
            #agent_id_list = AgentProfile.objects.values_list('user_id', flat=True).all()
            return queryset  # .filter(agent_id__in=agent_id_list)
        else:
            return queryset

########NEW FILE########
__FILENAME__ = constants
#
# Newfies-Dialer License
# http://www.newfies-dialer.org
#
# This Source Code Form is subject to the terms of the Mozilla Public
# License, v. 2.0. If a copy of the MPL was not distributed with this file,
# You can obtain one at http://mozilla.org/MPL/2.0/.
#
# Copyright (C) 2011-2014 Star2Billing S.L.
#
# The Initial Developer of the Original Code is
# Arezqui Belaid <info@star2billing.com>
#

from django.utils.translation import ugettext_lazy as _
from django_lets_go.utils import Choice


class SUBSCRIBER_STATUS(Choice):
    PENDING = 1, _('PENDING')
    PAUSE = 2, _('PAUSE')
    ABORT = 3, _('ABORT')
    FAIL = 4, _('FAIL')
    SENT = 5, _('SENT')
    IN_PROCESS = 6, _('IN PROCESS')
    NOT_AUTHORIZED = 7, _('NOT AUTHORIZED')
    COMPLETED = 8, _('COMPLETED')


class SUBSCRIBER_STATUS_NAME(Choice):
    PENDING = 'PENDING', _('PENDING')
    PAUSE = 'PAUSE', _('PAUSE')
    ABORT = 'ABORT', _('ABORT')
    FAIL = 'FAIL', _('FAIL')
    SENT = 'SENT', _('SENT')
    IN_PROCESS = 'IN_PROCESS', _('IN_PROCESS')
    NOT_AUTHORIZED = 'NOT_AUTHORIZED', _('NOT_AUTHORIZED')
    COMPLETED = 'COMPLETED', _('COMPLETED')


class CAMPAIGN_STATUS(Choice):
    START = 1, _('START')
    PAUSE = 2, _('PAUSE')
    ABORT = 3, _('ABORT')
    END = 4, _('END')

CAMPAIGN_STATUS_COLOR = {1: "green", 2: "blue", 3: "orange", 4: "red"}


class CAMPAIGN_COLUMN_NAME(Choice):
    key = _('key')
    name = _('name')
    start_date = _('start date')
    type = _('type')
    app = _('app')
    contacts = _('contacts')
    status = _('status')
    frequency = _('frequency')
    phonebook = _('phonebook')


class AMD_BEHAVIOR(Choice):
    ALWAYS = 1, _('ALWAYS PLAY MESSAGE')
    HUMAN_ONLY = 2, _('PLAY MESSAGE TO HUMAN ONLY')
    VOICEMAIL_ONLY = 3, _('LEAVE MESSAGE TO VOICEMAIL ONLY')


class SUBSCRIBER_COLUMN_NAME(Choice):
    contact = _('contact')
    updated_date = _('date')
    count_attempt = _('attempts')
    completion_count_attempt = _('completion attempts')
    status = _('status')
    disposition = _('disposition')
    collected_data = _('response')
    agent = _('agent')

########NEW FILE########
__FILENAME__ = forms
#
# Newfies-Dialer License
# http://www.newfies-dialer.org
#
# This Source Code Form is subject to the terms of the Mozilla Public
# License, v. 2.0. If a copy of the MPL was not distributed with this file,
# You can obtain one at http://mozilla.org/MPL/2.0/.
#
# Copyright (C) 2011-2014 Star2Billing S.L.
#
# The Initial Developer of the Original Code is
# Arezqui Belaid <info@star2billing.com>
#

from django import forms
from django.conf import settings
from django.forms.util import ErrorList
from django.forms import ModelForm, Textarea
from django.utils.translation import ugettext_lazy as _
from django.contrib.contenttypes.models import ContentType

from crispy_forms.helper import FormHelper
from crispy_forms.layout import Layout, Div, Fieldset, Field, HTML
from crispy_forms.bootstrap import TabHolder, Tab
from django_lets_go.common_functions import get_unique_code
from bootstrap3_datetime.widgets import DateTimePicker
from mod_utils.forms import common_submit_buttons

from .models import Campaign, Subscriber
from .constants import CAMPAIGN_STATUS, SUBSCRIBER_STATUS
from .function_def import user_dialer_setting, get_phonebook_list
from dialer_contact.forms import SearchForm
#from agent.function_def import agent_list
#from agent.models import AgentProfile, Agent
from user_profile.models import UserProfile
from dnc.models import DNC


def get_object_choices(available_objects):
    """Function is used to get object_choices for
    ``content_object`` field in campaign form"""
    object_choices = []
    for obj in available_objects:
        type_id = ContentType.objects.get_for_model(obj.__class__).id
        obj_id = obj.id
        # form_value - e.g."type:12-id:3"
        form_value = "type:%s-id:%s" % (type_id, obj_id)
        display_text = '%s : %s' % (str(ContentType.objects.get_for_model(obj.__class__)), str(obj))
        object_choices.append([form_value, display_text])

    return object_choices


class CampaignForm(ModelForm):
    """
    Campaign ModelForm
    """
    campaign_code = forms.CharField(widget=forms.HiddenInput)
    content_object = forms.ChoiceField(label=_("application").capitalize())
    selected_phonebook = forms.CharField(widget=forms.HiddenInput, required=False)
    selected_content_object = forms.CharField(widget=forms.HiddenInput, required=False)

    class Meta:
        model = Campaign
        exclude = ['user', 'status', 'content_type', 'object_id', 'has_been_started', 'has_been_duplicated',
                   'created_date', 'totalcontact', 'imported_phonebook', 'completed']
        # fields = ['campaign_code', 'name',
        #           'callerid', 'caller_name', 'aleg_gateway', 'sms_gateway',
        #           'content_object',  # 'content_type', 'object_id'
        #           'extra_data', 'dnc', 'description', 'phonebook',
        #           'frequency', 'callmaxduration', 'maxretry',
        #           'intervalretry', 'calltimeout',
        #           'completion_maxretry', 'completion_intervalretry',
        #           'startingdate', 'expirationdate',
        #           'daily_start_time', 'daily_stop_time',
        #           'monday', 'tuesday', 'wednesday', 'thursday', 'friday',
        #           'saturday', 'sunday',
        #           'selected_phonebook', 'selected_content_object',
        #           'voicemail', 'amd_behavior', 'voicemail_audiofile',
        #           #'agent_script', 'lead_disposition', 'external_link'
        #           ]
        widgets = {
            'description': Textarea(attrs={'cols': 23, 'rows': 3}),
            'agent_script': Textarea(attrs={'cols': 23, 'rows': 3}),
            'lead_disposition': Textarea(attrs={'cols': 23, 'rows': 3}),
            'external_link': Textarea(attrs={'cols': 23, 'rows': 3}),
            'startingdate': DateTimePicker(options={"format": "YYYY-MM-DD HH:mm:ss"}),
            'expirationdate': DateTimePicker(options={"format": "YYYY-MM-DD HH:mm:ss"}),
        }

    def __init__(self, user, *args, **kwargs):
        super(CampaignForm, self).__init__(*args, **kwargs)
        self.user = user
        self.helper = FormHelper()
        if self.instance.id:
            form_action = common_submit_buttons(default_action='update')
        else:
            form_action = common_submit_buttons(default_action='add')

        week_days = ['monday', 'tuesday', 'wednesday', 'thursday', 'friday', 'saturday', 'sunday']
        week_days_html = """<div class="row"><div class="col-md-12 col-xs-6">"""

        for i in week_days:
            week_days_html += """
                <div class="col-md-3">
                    <div class="btn-group" data-toggle="buttons">
                        <label for="{{ form.%s.auto_id }}">{{ form.%s.label }}</label><br/>
                        <div class="make-switch switch-small">
                        {{ form.%s }}
                        </div>
                    </div>
                </div>
                """ % (i, i, i)
        week_days_html += """</div></div>"""
        css_class = 'col-md-6'

        self.helper.layout = Layout(
            Field('campaign_code'),
            TabHolder(
                Tab(_('general').title(),
                    Div(
                        Div(Fieldset(_('general settings').title()), css_class='col-md-12'),
                        Div('name', css_class=css_class),
                        Div('callerid', css_class=css_class),
                        Div('caller_name', css_class=css_class),
                        Div('content_object', css_class=css_class),
                        css_class='row'
                    ),
                    Div(
                        Div('extra_data', css_class=css_class),
                        Div('dnc', css_class=css_class),
                        Div('description', css_class=css_class),
                        Div('phonebook', css_class=css_class),
                        css_class='row'
                    ),
                    form_action,
                    css_class='well'
                    ),
                Tab('Dialer',
                    Div(
                        Div(Fieldset(_('dialer settings').title()), css_class='col-md-12'),
                        Div('aleg_gateway', css_class=css_class),
                        Div('frequency', css_class=css_class),
                        Div('callmaxduration', css_class=css_class),
                        Div('maxretry', css_class=css_class),
                        Div('intervalretry', css_class=css_class),
                        Div('calltimeout', css_class=css_class),
                        Div(Fieldset(_('dialer completion settings').title()), css_class='col-md-12'),
                        Div('completion_maxretry', css_class=css_class),
                        Div('completion_intervalretry', css_class=css_class),
                        Div('sms_gateway', css_class=css_class),
                        css_class='row'
                    ),
                    form_action,
                    css_class='well'
                    ),
                Tab('schedule',
                    Div(
                        Div(Fieldset(_('schedule settings').title()), css_class='col-md-12'),
                        Div(HTML("""<label>%s<label>""" % (_('week days').capitalize())), css_class="col-md-3"),
                        HTML(week_days_html),
                        HTML("""<div>&nbsp;</div>"""),
                        Div('startingdate', css_class=css_class),
                        Div('expirationdate', css_class=css_class),
                        Div('daily_start_time', css_class=css_class),
                        Div('daily_stop_time', css_class=css_class),
                        css_class='row'
                    ),
                    form_action,
                    css_class='well'
                    ),
            ),
        )

        if settings.AMD:
            amd_layot = Tab(_('voicemail').capitalize(),
                            Div(
                                Div(Fieldset(_('voicemail settings').title()), css_class='col-md-12'),
                                Div(HTML("""
                                    <div class="btn-group" data-toggle="buttons">
                                        <label for="{{ form.voicemail.auto_id }}">{{ form.voicemail.label }}</label>
                                        <br/>
                                        <div class="make-switch switch-small">
                                        {{ form.voicemail }}
                                        </div>
                                    </div>
                                    """), css_class='col-md-12 col-xs-10'),
                                HTML("""<div>&nbsp;</div>"""),
                                Div('amd_behavior', css_class=css_class),
                                Div('voicemail_audiofile', css_class=css_class),
                                css_class='row'
                            ),
                            form_action,
                            css_class='well'
                            )
            self.helper.layout[1].insert(2, amd_layot)
        # hidden var
        self.helper.layout.append(Field('selected_phonebook'))
        self.helper.layout.append(Field('selected_content_object'))

        instance = getattr(self, 'instance', None)
        self.fields['campaign_code'].initial = get_unique_code(length=5)

        if user:
            list_gw = []
            dnc_list = []
            phonebook_list = get_phonebook_list(user)
            if not phonebook_list:
                phonebook_list = []
                phonebook_list.append(('', '---'))

            self.fields['phonebook'].choices = phonebook_list
            self.fields['phonebook'].initial = str(phonebook_list[0][0])

            gateway_list = UserProfile.objects.get(user=user).userprofile_gateway.all()
            gw_list = ((l.id, l.name) for l in gateway_list)

            dnc_list.append(('', '---'))
            dnc_obj_list = DNC.objects.values_list('id', 'name').filter(user=user).order_by('id')
            for l in dnc_obj_list:
                dnc_list.append((l[0], l[1]))
            self.fields['dnc'].choices = dnc_list

            for i in gw_list:
                list_gw.append((i[0], i[1]))
            self.fields['aleg_gateway'].choices = UserProfile.objects.get(user=user)\
                .userprofile_gateway.all().values_list('id', 'name')

            if instance.has_been_duplicated:
                from survey.models import Survey
                available_objects = Survey.objects.filter(user=user, campaign=instance)
                object_choices = get_object_choices(available_objects)
                self.fields['content_object'].widget.attrs['readonly'] = True
            else:
                from survey.models import Survey_template
                available_objects = Survey_template.objects.filter(user=user)
                object_choices = get_object_choices(available_objects)

            self.fields['content_object'].choices = object_choices

            # Voicemail setting is not enabled by default
            if settings.AMD:
                from survey.forms import get_audiofile_list
                self.fields['voicemail_audiofile'].choices = get_audiofile_list(user)

        # If campaign is running or has been started
        if instance.status == CAMPAIGN_STATUS.START or instance.has_been_started:
            self.fields['name'].widget.attrs['readonly'] = True
            self.fields['caller_name'].widget.attrs['readonly'] = True
            self.fields['callerid'].widget.attrs['readonly'] = True
            self.fields['extra_data'].widget.attrs['readonly'] = True
            self.fields['phonebook'].widget.attrs['readonly'] = True
            self.fields['lead_disposition'].widget.attrs['readonly'] = True
            self.fields['dnc'].widget.attrs['readonly'] = True
            self.fields['aleg_gateway'].widget.attrs['readonly'] = True
            self.fields['sms_gateway'].widget.attrs['readonly'] = True
            self.fields['voicemail'].widget.attrs['readonly'] = True
            self.fields['amd_behavior'].widget.attrs['readonly'] = True
            self.fields['voicemail_audiofile'].widget.attrs['readonly'] = True

            selected_phonebook = ''
            if instance.phonebook.all():
                selected_phonebook = ",".join(["%s" % (i.id) for i in instance.phonebook.all()])
            self.fields['selected_phonebook'].initial = selected_phonebook

            self.fields['content_object'].widget.attrs['disabled'] = 'disabled'
            self.fields['content_object'].required = False
            self.fields['selected_content_object'].initial = "type:%s-id:%s" % \
                (instance.content_type.id, instance.object_id)

    def clean(self):
        cleaned_data = self.cleaned_data
        frequency = cleaned_data.get('frequency')
        callmaxduration = cleaned_data.get('callmaxduration')
        maxretry = cleaned_data.get('maxretry')
        calltimeout = cleaned_data.get('calltimeout')
        phonebook = cleaned_data.get('phonebook')

        if not phonebook:
            msg = _('you must select at least one phonebook')
            self._errors['phonebook'] = ErrorList([msg])
            del self.cleaned_data['phonebook']

        dialer_set = user_dialer_setting(self.user)
        if dialer_set:
            if frequency > dialer_set.max_frequency:
                msg = _('maximum frequency limit of %d exceeded.' % dialer_set.max_frequency)
                self._errors['frequency'] = ErrorList([msg])
                del self.cleaned_data['frequency']

            if callmaxduration > dialer_set.callmaxduration:
                msg = _('maximum duration limit of %d exceeded.' % dialer_set.callmaxduration)
                self._errors['callmaxduration'] = ErrorList([msg])
                del self.cleaned_data['callmaxduration']

            if maxretry > dialer_set.maxretry:
                msg = _('maximum retries limit of %d exceeded.' % dialer_set.maxretry)
                self._errors['maxretry'] = ErrorList([msg])
                del self.cleaned_data['maxretry']

            if calltimeout > dialer_set.max_calltimeout:
                msg = _('maximum timeout limit of %d exceeded.' % dialer_set.max_calltimeout)
                self._errors['calltimeout'] = ErrorList([msg])
                del self.cleaned_data['calltimeout']

        return cleaned_data


class DuplicateCampaignForm(ModelForm):
    """
    DuplicateCampaignForm ModelForm
    """
    campaign_code = forms.CharField(widget=forms.HiddenInput)

    class Meta:
        model = Campaign
        fields = ['campaign_code', 'name', 'phonebook']

    def __init__(self, user, *args, **kwargs):
        super(DuplicateCampaignForm, self).__init__(*args, **kwargs)
        self.helper = FormHelper()
        self.helper.form_tag = False
        css_class = 'col-md-12'
        self.helper.layout = Layout(
            Field('campaign_code'),
            Div(
                Div('name', css_class=css_class),
                Div('phonebook', css_class=css_class),
                css_class='row'
            )
        )
        self.fields['campaign_code'].initial = get_unique_code(length=5)

        if user:
            phonebook_list = get_phonebook_list(user)
            self.fields['phonebook'].choices = phonebook_list
            self.fields['phonebook'].initial = str(phonebook_list[0][0])


class CampaignAdminForm(ModelForm):
    """Admin Campaign ModelForm"""

    class Meta:
        model = Campaign
        fields = ['campaign_code', 'name', 'description', 'user', 'status',
                  'callerid', 'caller_name', 'startingdate', 'expirationdate',
                  'aleg_gateway', 'sms_gateway', 'content_type', 'object_id', 'extra_data',
                  'phonebook', 'frequency', 'callmaxduration', 'maxretry',
                  'intervalretry', 'calltimeout', 'daily_start_time',
                  'daily_stop_time', 'monday', 'tuesday', 'wednesday',
                  'thursday', 'friday', 'saturday', 'sunday',
                  'completion_maxretry', 'completion_intervalretry',
                  'agent_script', 'lead_disposition']

    def __init__(self, *args, **kwargs):
        super(CampaignAdminForm, self).__init__(*args, **kwargs)
        self.fields['campaign_code'].widget.attrs['readonly'] = True
        self.fields['campaign_code'].initial = get_unique_code(length=5)


class SubscriberReportForm(SearchForm):
    """SubscriberReportForm Admin Form"""
    campaign_id = forms.ChoiceField(label=_('campaign'), required=True)

    def __init__(self, *args, **kwargs):
        super(SubscriberReportForm, self).__init__(*args, **kwargs)
        camp_list = []
        camp_list.append((0, _('all').upper()))
        campaign_list = Campaign.objects.values_list('id', 'name').all().order_by('-id')
        for i in campaign_list:
            camp_list.append((i[0], i[1]))

        self.fields['campaign_id'].choices = camp_list


class SubscriberAdminForm(ModelForm):
    """SubscriberAdminForm"""

    class Meta:
        model = Subscriber

    def __init__(self, *args, **kwargs):
        super(SubscriberAdminForm, self).__init__(*args, **kwargs)
        #self.fields['agent'].choices = agent_list()

subscriber_status_list = []
subscriber_status_list.append(('all', _('all').upper()))
for i in SUBSCRIBER_STATUS:
    subscriber_status_list.append((i[0], i[1]))


class SubscriberSearchForm(SearchForm):
    """Search Form on Subscriber List"""
    campaign_id = forms.ChoiceField(label=_('campaign').capitalize(), required=True)
    #agent_id = forms.ChoiceField(label=_('agent'), required=True)
    status = forms.ChoiceField(label=_('status').capitalize(), choices=subscriber_status_list, required=False)

    def __init__(self, user, *args, **kwargs):
        self.helper = FormHelper()
        self.helper.form_class = 'well'
        css_class = 'col-md-3'
        self.helper.layout = Layout(
            Div(
                Div('from_date', css_class=css_class),
                Div('to_date', css_class=css_class),
                Div('campaign_id', css_class=css_class),
                Div('status', css_class=css_class),
                css_class='row'
            ),
        )
        common_submit_buttons(self.helper.layout, 'search')
        super(SubscriberSearchForm, self).__init__(*args, **kwargs)
        if user:
            camp_list = []
            camp_list.append((0, _('all').upper()))
            if user.is_superuser:
                campaign_list = Campaign.objects.values_list('id', 'name').all().order_by('-id')
            else:
                campaign_list = Campaign.objects.values_list('id', 'name').filter(user=user).order_by('-id')

            for i in campaign_list:
                camp_list.append((i[0], i[1]))

            """
            agent_list = []
            agent_list.append((0, _('all').upper()))
            if user.is_superuser:
                agent_profile_list = AgentProfile.objects.values_list('user_id', flat=True).filter(is_agent=True)
            else:
                agent_profile_list = AgentProfile.objects.values_list('user_id', flat=True)\
                    .filter(is_agent=True, manager=user)

            a_list = Agent.objects.values_list('id', 'username').filter(id__in=agent_profile_list)
            for i in a_list:
                agent_list.append((i[0], i[1]))
            self.fields['agent_id'].choices = agent_list
            """
            self.fields['campaign_id'].choices = camp_list


campaign_status_list = []
campaign_status_list.append(('all', _('all').upper()))
for i in CAMPAIGN_STATUS:
    campaign_status_list.append((i[0], i[1]))


class CampaignSearchForm(forms.Form):
    phonebook_id = forms.ChoiceField(label=_("phonebook").capitalize(), )
    status = forms.ChoiceField(label=_("status").capitalize(), choices=campaign_status_list)

    def __init__(self, user, *args, **kwargs):
        super(CampaignSearchForm, self).__init__(*args, **kwargs)
        self.helper = FormHelper()
        self.helper.form_class = 'well'
        css_class = 'col-md-3'
        self.helper.layout = Layout(
            Div(
                Div('phonebook_id', css_class=css_class),
                Div('status', css_class=css_class),
                css_class='row'
            ),
        )
        common_submit_buttons(self.helper.layout, 'search')

        if user:
            result_list = get_phonebook_list(user)
            result_list.insert(0, ('0', _('ALL')))
            self.fields['phonebook_id'].choices = result_list

########NEW FILE########
__FILENAME__ = function_def
#
# Newfies-Dialer License
# http://www.newfies-dialer.org
#
# This Source Code Form is subject to the terms of the Mozilla Public
# License, v. 2.0. If a copy of the MPL was not distributed with this file,
# You can obtain one at http://mozilla.org/MPL/2.0/.
#
# Copyright (C) 2011-2014 Star2Billing S.L.
#
# The Initial Developer of the Original Code is
# Arezqui Belaid <info@star2billing.com>
#

from django.utils.translation import ugettext_lazy as _
from dialer_contact.models import Phonebook, Contact
from dialer_campaign.models import Campaign, Subscriber
from dialer_campaign.constants import SUBSCRIBER_STATUS
from user_profile.models import UserProfile
from mod_utils.function_def import get_status_value
from dateutil.rrule import rrule, DAILY, HOURLY
from dateutil.parser import parse
from datetime import timedelta


def get_phonebook_list(user):
    """Return phonebook list of logged in user"""
    phonebook_list = Phonebook.objects.filter(user=user).order_by('id')
    result_list = []
    for phonebook in phonebook_list:
        contacts_in_phonebook = phonebook.phonebook_contacts()
        nbcontact = " -> %d contact(s)" % (contacts_in_phonebook)
        pb_string = phonebook.name + nbcontact
        result_list.append((phonebook.id, pb_string))
    return result_list


def check_dialer_setting(request, check_for, field_value=''):
    """Check Dialer Setting Limitation

    **Attribute**

        * ``check_for`` -  for campaign or for contact
    """
    try:
        # DialerSettings is linked with the User
        dialer_set_obj = request.user.userprofile.dialersetting
        if dialer_set_obj:
            # check running campaign for User
            if check_for == "campaign":
                # Total campaign matched with max_cpgs
                if Campaign.objects.filter(user=request.user).count() >= dialer_set_obj.max_cpg:
                    # Limit matched or exceeded
                    return True
                else:
                    # Limit not matched
                    return False

            # check contacts limit
            if check_for == "contact":
                # total contacts matched with max_contact
                if Contact.objects.filter(phonebook__user=request.user).count() >= dialer_set_obj.max_contact:
                    # Limit matched or exceeded
                    return True
                # limit not matched
                return False

            # check frequency limit
            if check_for == "frequency":
                if field_value > dialer_set_obj.max_frequency:
                    # Limit matched or exceeded
                    return True
                # Limit not exceeded
                return False

            # check call duration limit
            if check_for == "duration":
                if field_value > dialer_set_obj.callmaxduration:
                    # Limit matched or exceeded
                    return True
                # Limit not exceeded
                return False

            # check call retry limit
            if check_for == "retry":
                if field_value > dialer_set_obj.maxretry:
                    # Limit matched or exceeded
                    return True
                # Limit not exceeded
                return False

            # check call timeout limit
            if check_for == "timeout":
                if field_value > dialer_set_obj.max_calltimeout:
                    # Limit matched or exceeded
                    return True
                # Limit not exceeded
                return False

            # check subscriber limit
            if check_for == "subscriber":
                if Subscriber.objects.filter(campaign__user=request.user).count() > dialer_set_obj.max_subr_cpg:
                    # Limit matched or exceeded
                    return True
                # Limit not exceeded
                return False
    except:
        # DialerSettings not link to the User
        return False


def dialer_setting_limit(request, limit_for):
    """Return Dialer Setting's limit

     e.g. max_subr_cpg
          max_cpg
          max_contact
          max_frequency
          max_calltimeout
          maxretry
          callmaxduration
          smscampaign
    """
    try:
        # DialerSettings is linked with the User
        dialer_set_obj = request.user.userprofile.dialersetting
        if limit_for == "contact":
            return str(dialer_set_obj.max_contact)
        if limit_for == "subscriber":
            return str(dialer_set_obj.max_subr_cpg)
        if limit_for == "campaign":
            return str(dialer_set_obj.max_cpg)
        if limit_for == "frequency":
            return str(dialer_set_obj.max_frequency)
        if limit_for == "duration":
            return str(dialer_set_obj.callmaxduration)
        if limit_for == "retry":
            return str(dialer_set_obj.maxretry)
        if limit_for == "timeout":
            return str(dialer_set_obj.max_calltimeout)
        if limit_for == "smscampaign":
            return str(dialer_set_obj.sms_max_number_campaign)
        if limit_for == "smsfrequency":
            return str(dialer_set_obj.sms_max_frequency)
        if limit_for == "smsmaxretry":
            return str(dialer_set_obj.sms_maxretry)
        if limit_for == "smssubscriber":
            return str(dialer_set_obj.sms_max_number_subscriber_campaign)
    except:
        return False


def date_range(start, end, q):
    """Date  Range

    >>> from datetime import datetime
    >>> from django.utils.timezone import utc

    >>> s_date = datetime(2012, 07, 11, 0, 0, 0, 0).replace(tzinfo=utc)

    >>> e_date = datetime(2012, 07, 12, 23, 59, 59, 99999).replace(tzinfo=utc)

    >>> date_range(s_date, e_date, 2)
    [datetime.datetime(2012, 7, 11, 0, 0), datetime.datetime(2012, 7, 12, 0, 0)]

    """
    r = (end + timedelta(days=1) - start).days
    if int(q) <= 2:
        return list(rrule(DAILY, dtstart=parse(str(start)), until=parse(str(end))))
    if int(q) >= 3:
        return list(rrule(HOURLY, interval=1, dtstart=parse(str(start)), until=parse(str(end))))
    else:
        return [start + timedelta(days=i) for i in range(r)]


def user_dialer_setting(user):
    """Get Dialer setting for user"""
    try:
        return UserProfile.objects.get(user=user).dialersetting
    except:
        return []


def user_dialer_setting_msg(user):
    msg = ''
    if not user_dialer_setting(user):
        msg = _('your settings are not configured properly, please contact the administrator.')
    return msg


def get_subscriber_status(value):
    """Get subscriber status name"""
    return get_status_value(value, SUBSCRIBER_STATUS)


def get_subscriber_disposition(campaign_id, val):
    """To get subscriber disposition name from campaign's
    lead_disposition string"""
    dsp_dict = {}
    dsp_count = 1
    try:
        dsp_array = Campaign.objects.get(pk=campaign_id).lead_disposition.split(',')
        for i in dsp_array:
            dsp_dict[dsp_count] = i.strip()
            dsp_count += 1

        return dsp_dict[val]
    except:
        return '-'

########NEW FILE########
__FILENAME__ = create_subscriber
#
# Newfies-Dialer License
# http://www.newfies-dialer.org
#
# This Source Code Form is subject to the terms of the Mozilla Public
# License, v. 2.0. If a copy of the MPL was not distributed with this file,
# You can obtain one at http://mozilla.org/MPL/2.0/.
#
# Copyright (C) 2011-2014 Star2Billing S.L.
#
# The Initial Developer of the Original Code is
# Arezqui Belaid <info@star2billing.com>
#

from django.core.management.base import BaseCommand
from django.db import IntegrityError
from optparse import make_option
from dialer_campaign.models import Phonebook, Contact, Campaign
from dialer_campaign.tasks import collect_subscriber


class Command(BaseCommand):
    args = 'phonebook_id, list_of_phonenumber'
    help = "Create a new contact for a given phonenumber and phonebook\n" \
           "--------------------------------------------------------------\n" \
           "python manage.py create_subscriber --phonebook_id=1 --list_of_phonenumber=123456,9867456"

    option_list = BaseCommand.option_list + (
        make_option('--list_of_phonenumber',
                    default=None,
                    dest='list_of_phonenumber',
                    help=help),
        make_option('--phonebook_id',
                    default=None,
                    dest='phonebook_id',
                    help=help),
    )

    def handle(self, *args, **options):
        """Note that subscriber created this way are only for devel purposes"""
        list_of_phonenumber = ''  # default
        if options.get('list_of_phonenumber'):
            try:
                list_of_phonenumber = options.get('list_of_phonenumber').split(',')
            except ValueError:
                list_of_phonenumber = ''

        phonebook_id = ''
        if options.get('phonebook_id'):
            try:
                phonebook_id = options.get('phonebook_id')
                phonebook_id = int(phonebook_id)
            except ValueError:
                phonebook_id = ''

        try:
            obj_phonebook = Phonebook.objects.get(id=phonebook_id)
        except:
            print 'Can\'t find this Phonebook : %(id)s' % {'id': phonebook_id}
            return False

        for phonenumber in list_of_phonenumber:
            try:
                new_contact = Contact.objects.create(
                    contact=int(phonenumber),
                    phonebook=obj_phonebook)
            except IntegrityError:
                print "Duplicate contact!"
                return False

            print "Contact created id:%(id)s" % {'id': new_contact.id}

        try:
            obj_campaign = Campaign.objects.get(phonebook=obj_phonebook)
        except:
            print 'Can\'t find a Campaign with this phonebook'
            return False

        print "Launch Task : collect_subscriber(%(id)s)" % {'id': str(obj_campaign.id)}
        collect_subscriber.delay(obj_campaign.id)

########NEW FILE########
__FILENAME__ = 0001_initial_campaign
# -*- coding: utf-8 -*-
import datetime
from south.db import db
from south.v2 import SchemaMigration
from django.db import models


class Migration(SchemaMigration):

    def forwards(self, orm):
        # Adding model 'Campaign'
        db.create_table(u'dialer_campaign', (
            ('id', self.gf('django.db.models.fields.AutoField')(primary_key=True)),
            ('campaign_code', self.gf('django.db.models.fields.CharField')(default='XWZXJ', unique=True, max_length=20, blank=True)),
            ('name', self.gf('django.db.models.fields.CharField')(max_length=100)),
            ('description', self.gf('django.db.models.fields.TextField')(null=True, blank=True)),
            ('user', self.gf('django.db.models.fields.related.ForeignKey')(related_name='Campaign owner', to=orm['auth.User'])),
            ('status', self.gf('django.db.models.fields.IntegerField')(default=2, null=True, blank=True)),
            ('callerid', self.gf('django.db.models.fields.CharField')(max_length=80, blank=True)),
            ('caller_name', self.gf('django.db.models.fields.CharField')(max_length=80, blank=True)),
            ('startingdate', self.gf('django.db.models.fields.DateTimeField')(default=datetime.datetime(2013, 3, 11, 0, 0))),
            ('expirationdate', self.gf('django.db.models.fields.DateTimeField')(default=datetime.datetime(2013, 3, 12, 0, 0))),
            ('daily_start_time', self.gf('django.db.models.fields.TimeField')(default='00:00:00')),
            ('daily_stop_time', self.gf('django.db.models.fields.TimeField')(default='23:59:59')),
            ('monday', self.gf('django.db.models.fields.BooleanField')(default=True)),
            ('tuesday', self.gf('django.db.models.fields.BooleanField')(default=True)),
            ('wednesday', self.gf('django.db.models.fields.BooleanField')(default=True)),
            ('thursday', self.gf('django.db.models.fields.BooleanField')(default=True)),
            ('friday', self.gf('django.db.models.fields.BooleanField')(default=True)),
            ('saturday', self.gf('django.db.models.fields.BooleanField')(default=True)),
            ('sunday', self.gf('django.db.models.fields.BooleanField')(default=True)),
            ('frequency', self.gf('django.db.models.fields.IntegerField')(default='10', null=True, blank=True)),
            ('callmaxduration', self.gf('django.db.models.fields.IntegerField')(default='1800', null=True, blank=True)),
            ('maxretry', self.gf('django.db.models.fields.IntegerField')(default='0', null=True, blank=True)),
            ('intervalretry', self.gf('django.db.models.fields.IntegerField')(default='300', null=True, blank=True)),
            ('completion_maxretry', self.gf('django.db.models.fields.IntegerField')(default='0', null=True, blank=True)),
            ('completion_intervalretry', self.gf('django.db.models.fields.IntegerField')(default='900', null=True, blank=True)),
            ('calltimeout', self.gf('django.db.models.fields.IntegerField')(default='45', null=True, blank=True)),
            ('aleg_gateway', self.gf('django.db.models.fields.related.ForeignKey')(related_name='A-Leg Gateway', to=orm['dialer_gateway.Gateway'])),
            ('content_type', self.gf('django.db.models.fields.related.ForeignKey')(to=orm['contenttypes.ContentType'])),
            ('object_id', self.gf('django.db.models.fields.PositiveIntegerField')()),
            ('extra_data', self.gf('django.db.models.fields.CharField')(max_length=120, blank=True)),
            ('imported_phonebook', self.gf('django.db.models.fields.CharField')(default='', max_length=500, blank=True)),
            ('totalcontact', self.gf('django.db.models.fields.IntegerField')(default=0, null=True, blank=True)),
            ('completed', self.gf('django.db.models.fields.IntegerField')(default=0, null=True, blank=True)),
            ('has_been_started', self.gf('django.db.models.fields.BooleanField')(default=False)),
            ('has_been_duplicated', self.gf('django.db.models.fields.BooleanField')(default=False)),
            ('voicemail', self.gf('django.db.models.fields.BooleanField')(default=False)),
            ('amd_behavior', self.gf('django.db.models.fields.IntegerField')(default=1, null=True, blank=True)),
            ('voicemail_audiofile', self.gf('django.db.models.fields.related.ForeignKey')(to=orm['audiofield.AudioFile'], null=True, blank=True)),
            ('created_date', self.gf('django.db.models.fields.DateTimeField')(auto_now_add=True, blank=True)),
            ('updated_date', self.gf('django.db.models.fields.DateTimeField')(auto_now=True, blank=True)),
        ))
        db.send_create_signal('dialer_campaign', ['Campaign'])

        # Adding M2M table for field phonebook on 'Campaign'
        db.create_table(u'dialer_campaign_phonebook', (
            ('id', models.AutoField(verbose_name='ID', primary_key=True, auto_created=True)),
            ('campaign', models.ForeignKey(orm['dialer_campaign.campaign'], null=False)),
            ('phonebook', models.ForeignKey(orm['dialer_contact.phonebook'], null=False))
        ))
        db.create_unique(u'dialer_campaign_phonebook', ['campaign_id', 'phonebook_id'])

        # Adding model 'Subscriber'
        db.create_table(u'dialer_subscriber', (
            ('id', self.gf('django.db.models.fields.AutoField')(primary_key=True)),
            ('contact', self.gf('django.db.models.fields.related.ForeignKey')(to=orm['dialer_contact.Contact'], null=True, blank=True)),
            ('campaign', self.gf('django.db.models.fields.related.ForeignKey')(to=orm['dialer_campaign.Campaign'], null=True, blank=True)),
            ('last_attempt', self.gf('django.db.models.fields.DateTimeField')(null=True, blank=True)),
            ('count_attempt', self.gf('django.db.models.fields.IntegerField')(default=0, null=True, blank=True)),
            ('completion_count_attempt', self.gf('django.db.models.fields.IntegerField')(default=0, null=True, blank=True)),
            ('duplicate_contact', self.gf('django.db.models.fields.CharField')(max_length=90)),
            ('status', self.gf('django.db.models.fields.IntegerField')(default=1, null=True, blank=True)),
            ('created_date', self.gf('django.db.models.fields.DateTimeField')(auto_now_add=True, blank=True)),
            ('updated_date', self.gf('django.db.models.fields.DateTimeField')(auto_now=True, db_index=True, blank=True)),
        ))
        db.send_create_signal('dialer_campaign', ['Subscriber'])

        # Adding unique constraint on 'Subscriber', fields ['contact', 'campaign']
        db.create_unique(u'dialer_subscriber', ['contact_id', 'campaign_id'])

    def backwards(self, orm):
        # Removing unique constraint on 'Subscriber', fields ['contact', 'campaign']
        db.delete_unique(u'dialer_subscriber', ['contact_id', 'campaign_id'])

        # Deleting model 'Campaign'
        db.delete_table(u'dialer_campaign')

        # Removing M2M table for field phonebook on 'Campaign'
        db.delete_table('dialer_campaign_phonebook')

        # Deleting model 'Subscriber'
        db.delete_table(u'dialer_subscriber')

    models = {
        'audiofield.audiofile': {
            'Meta': {'object_name': 'AudioFile', 'db_table': "u'audio_file'"},
            'audio_file': ('audiofield.fields.AudioField', [], {'ext_whitelist': "['.mp3', '.wav', '.ogg']", 'max_length': '100', 'blank': 'True'}),
            'created_date': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '150'}),
            'updated_date': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'blank': 'True'}),
            'user': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['auth.User']"})
        },
        'auth.group': {
            'Meta': {'object_name': 'Group'},
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '80'}),
            'permissions': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['auth.Permission']", 'symmetrical': 'False', 'blank': 'True'})
        },
        'auth.permission': {
            'Meta': {'ordering': "('content_type__app_label', 'content_type__model', 'codename')", 'unique_together': "(('content_type', 'codename'),)", 'object_name': 'Permission'},
            'codename': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'content_type': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['contenttypes.ContentType']"}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '50'})
        },
        'auth.user': {
            'Meta': {'object_name': 'User'},
            'date_joined': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
            'email': ('django.db.models.fields.EmailField', [], {'max_length': '75', 'blank': 'True'}),
            'first_name': ('django.db.models.fields.CharField', [], {'max_length': '30', 'blank': 'True'}),
            'groups': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['auth.Group']", 'symmetrical': 'False', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'is_active': ('django.db.models.fields.BooleanField', [], {'default': 'True'}),
            'is_staff': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'is_superuser': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'last_login': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
            'last_name': ('django.db.models.fields.CharField', [], {'max_length': '30', 'blank': 'True'}),
            'password': ('django.db.models.fields.CharField', [], {'max_length': '128'}),
            'user_permissions': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['auth.Permission']", 'symmetrical': 'False', 'blank': 'True'}),
            'username': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '30'})
        },
        'contenttypes.contenttype': {
            'Meta': {'ordering': "('name',)", 'unique_together': "(('app_label', 'model'),)", 'object_name': 'ContentType', 'db_table': "'django_content_type'"},
            'app_label': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'model': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '100'})
        },
        'dialer_campaign.campaign': {
            'Meta': {'object_name': 'Campaign', 'db_table': "u'dialer_campaign'"},
            'aleg_gateway': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'A-Leg Gateway'", 'to': "orm['dialer_gateway.Gateway']"}),
            'amd_behavior': ('django.db.models.fields.IntegerField', [], {'default': '1', 'null': 'True', 'blank': 'True'}),
            'caller_name': ('django.db.models.fields.CharField', [], {'max_length': '80', 'blank': 'True'}),
            'callerid': ('django.db.models.fields.CharField', [], {'max_length': '80', 'blank': 'True'}),
            'callmaxduration': ('django.db.models.fields.IntegerField', [], {'default': "'1800'", 'null': 'True', 'blank': 'True'}),
            'calltimeout': ('django.db.models.fields.IntegerField', [], {'default': "'45'", 'null': 'True', 'blank': 'True'}),
            'campaign_code': ('django.db.models.fields.CharField', [], {'default': "'AILDP'", 'unique': 'True', 'max_length': '20', 'blank': 'True'}),
            'completed': ('django.db.models.fields.IntegerField', [], {'default': '0', 'null': 'True', 'blank': 'True'}),
            'completion_intervalretry': ('django.db.models.fields.IntegerField', [], {'default': "'900'", 'null': 'True', 'blank': 'True'}),
            'completion_maxretry': ('django.db.models.fields.IntegerField', [], {'default': "'0'", 'null': 'True', 'blank': 'True'}),
            'content_type': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['contenttypes.ContentType']"}),
            'created_date': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'daily_start_time': ('django.db.models.fields.TimeField', [], {'default': "'00:00:00'"}),
            'daily_stop_time': ('django.db.models.fields.TimeField', [], {'default': "'23:59:59'"}),
            'description': ('django.db.models.fields.TextField', [], {'null': 'True', 'blank': 'True'}),
            'expirationdate': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime(2013, 3, 12, 0, 0)'}),
            'extra_data': ('django.db.models.fields.CharField', [], {'max_length': '120', 'blank': 'True'}),
            'frequency': ('django.db.models.fields.IntegerField', [], {'default': "'10'", 'null': 'True', 'blank': 'True'}),
            'friday': ('django.db.models.fields.BooleanField', [], {'default': 'True'}),
            'has_been_duplicated': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'has_been_started': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'imported_phonebook': ('django.db.models.fields.CharField', [], {'default': "''", 'max_length': '500', 'blank': 'True'}),
            'intervalretry': ('django.db.models.fields.IntegerField', [], {'default': "'300'", 'null': 'True', 'blank': 'True'}),
            'maxretry': ('django.db.models.fields.IntegerField', [], {'default': "'0'", 'null': 'True', 'blank': 'True'}),
            'monday': ('django.db.models.fields.BooleanField', [], {'default': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'object_id': ('django.db.models.fields.PositiveIntegerField', [], {}),
            'phonebook': ('django.db.models.fields.related.ManyToManyField', [], {'symmetrical': 'False', 'to': "orm['dialer_contact.Phonebook']", 'null': 'True', 'blank': 'True'}),
            'saturday': ('django.db.models.fields.BooleanField', [], {'default': 'True'}),
            'startingdate': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime(2013, 3, 11, 0, 0)'}),
            'status': ('django.db.models.fields.IntegerField', [], {'default': '2', 'null': 'True', 'blank': 'True'}),
            'sunday': ('django.db.models.fields.BooleanField', [], {'default': 'True'}),
            'thursday': ('django.db.models.fields.BooleanField', [], {'default': 'True'}),
            'totalcontact': ('django.db.models.fields.IntegerField', [], {'default': '0', 'null': 'True', 'blank': 'True'}),
            'tuesday': ('django.db.models.fields.BooleanField', [], {'default': 'True'}),
            'updated_date': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'blank': 'True'}),
            'user': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'Campaign owner'", 'to': "orm['auth.User']"}),
            'voicemail': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'voicemail_audiofile': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['audiofield.AudioFile']", 'null': 'True', 'blank': 'True'}),
            'wednesday': ('django.db.models.fields.BooleanField', [], {'default': 'True'})
        },
        'dialer_campaign.subscriber': {
            'Meta': {'unique_together': "(['contact', 'campaign'],)", 'object_name': 'Subscriber', 'db_table': "u'dialer_subscriber'"},
            'campaign': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['dialer_campaign.Campaign']", 'null': 'True', 'blank': 'True'}),
            'completion_count_attempt': ('django.db.models.fields.IntegerField', [], {'default': '0', 'null': 'True', 'blank': 'True'}),
            'contact': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['dialer_contact.Contact']", 'null': 'True', 'blank': 'True'}),
            'count_attempt': ('django.db.models.fields.IntegerField', [], {'default': '0', 'null': 'True', 'blank': 'True'}),
            'created_date': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'duplicate_contact': ('django.db.models.fields.CharField', [], {'max_length': '90'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'last_attempt': ('django.db.models.fields.DateTimeField', [], {'null': 'True', 'blank': 'True'}),
            'status': ('django.db.models.fields.IntegerField', [], {'default': '1', 'null': 'True', 'blank': 'True'}),
            'updated_date': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'db_index': 'True', 'blank': 'True'})
        },
        'dialer_contact.contact': {
            'Meta': {'object_name': 'Contact', 'db_table': "u'dialer_contact'"},
            'additional_vars': ('jsonfield.fields.JSONField', [], {'null': 'True', 'blank': 'True'}),
            'city': ('django.db.models.fields.CharField', [], {'max_length': '120', 'null': 'True', 'blank': 'True'}),
            'contact': ('django.db.models.fields.CharField', [], {'max_length': '90'}),
            'country': ('django_countries.fields.CountryField', [], {'max_length': '2', 'null': 'True', 'blank': 'True'}),
            'created_date': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'description': ('django.db.models.fields.TextField', [], {'null': 'True', 'blank': 'True'}),
            'email': ('django.db.models.fields.EmailField', [], {'max_length': '75', 'null': 'True', 'blank': 'True'}),
            'first_name': ('django.db.models.fields.CharField', [], {'max_length': '120', 'null': 'True', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'last_name': ('django.db.models.fields.CharField', [], {'max_length': '120', 'null': 'True', 'blank': 'True'}),
            'phonebook': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['dialer_contact.Phonebook']"}),
            'status': ('django.db.models.fields.IntegerField', [], {'default': '1', 'null': 'True', 'blank': 'True'}),
            'updated_date': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'blank': 'True'})
        },
        'dialer_contact.phonebook': {
            'Meta': {'object_name': 'Phonebook', 'db_table': "u'dialer_phonebook'"},
            'created_date': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'description': ('django.db.models.fields.TextField', [], {'null': 'True', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '90'}),
            'updated_date': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'blank': 'True'}),
            'user': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'Phonebook owner'", 'to': "orm['auth.User']"})
        },
        'dialer_gateway.gateway': {
            'Meta': {'object_name': 'Gateway', 'db_table': "u'dialer_gateway'"},
            'addparameter': ('django.db.models.fields.CharField', [], {'max_length': '360', 'blank': 'True'}),
            'addprefix': ('django.db.models.fields.CharField', [], {'max_length': '60', 'blank': 'True'}),
            'count_call': ('django.db.models.fields.IntegerField', [], {'null': 'True', 'blank': 'True'}),
            'count_in_use': ('django.db.models.fields.IntegerField', [], {'null': 'True', 'blank': 'True'}),
            'created_date': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'description': ('django.db.models.fields.TextField', [], {'blank': 'True'}),
            'failover': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'Failover Gateway'", 'null': 'True', 'to': "orm['dialer_gateway.Gateway']"}),
            'gateway_codecs': ('django.db.models.fields.CharField', [], {'max_length': '500', 'blank': 'True'}),
            'gateway_retries': ('django.db.models.fields.CharField', [], {'max_length': '500', 'blank': 'True'}),
            'gateway_timeouts': ('django.db.models.fields.CharField', [], {'max_length': '500', 'blank': 'True'}),
            'gateways': ('django.db.models.fields.CharField', [], {'max_length': '500'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'maximum_call': ('django.db.models.fields.IntegerField', [], {'null': 'True', 'blank': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '255'}),
            'originate_dial_string': ('django.db.models.fields.CharField', [], {'max_length': '500', 'blank': 'True'}),
            'removeprefix': ('django.db.models.fields.CharField', [], {'max_length': '60', 'blank': 'True'}),
            'secondused': ('django.db.models.fields.IntegerField', [], {'null': 'True', 'blank': 'True'}),
            'status': ('django.db.models.fields.IntegerField', [], {'default': '1', 'null': 'True', 'blank': 'True'}),
            'updated_date': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'blank': 'True'})
        }
    }

    complete_apps = ['dialer_campaign']

########NEW FILE########
__FILENAME__ = 0002_auto__add_field_campaign_dnc
# -*- coding: utf-8 -*-
import datetime
from south.db import db
from south.v2 import SchemaMigration
from django.db import models


class Migration(SchemaMigration):

    def forwards(self, orm):
        # Adding field 'Campaign.dnc'
        db.add_column(u'dialer_campaign', 'dnc',
                      self.gf('django.db.models.fields.related.ForeignKey')(blank=True, related_name='DNC', null=True, to=orm['dnc.DNC']),
                      keep_default=False)

    def backwards(self, orm):
        # Deleting field 'Campaign.dnc'
        db.delete_column(u'dialer_campaign', 'dnc_id')

    models = {
        u'audiofield.audiofile': {
            'Meta': {'object_name': 'AudioFile', 'db_table': "u'audio_file'"},
            'audio_file': ('audiofield.fields.AudioField', [], {'ext_whitelist': "['.mp3', '.wav', '.ogg']", 'max_length': '100', 'blank': 'True'}),
            'created_date': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            u'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '150'}),
            'updated_date': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'blank': 'True'}),
            'user': ('django.db.models.fields.related.ForeignKey', [], {'to': u"orm['auth.User']"})
        },
        u'auth.group': {
            'Meta': {'object_name': 'Group'},
            u'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '80'}),
            'permissions': ('django.db.models.fields.related.ManyToManyField', [], {'to': u"orm['auth.Permission']", 'symmetrical': 'False', 'blank': 'True'})
        },
        u'auth.permission': {
            'Meta': {'ordering': "(u'content_type__app_label', u'content_type__model', u'codename')", 'unique_together': "((u'content_type', u'codename'),)", 'object_name': 'Permission'},
            'codename': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'content_type': ('django.db.models.fields.related.ForeignKey', [], {'to': u"orm['contenttypes.ContentType']"}),
            u'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '50'})
        },
        u'auth.user': {
            'Meta': {'object_name': 'User'},
            'date_joined': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
            'email': ('django.db.models.fields.EmailField', [], {'max_length': '75', 'blank': 'True'}),
            'first_name': ('django.db.models.fields.CharField', [], {'max_length': '30', 'blank': 'True'}),
            'groups': ('django.db.models.fields.related.ManyToManyField', [], {'to': u"orm['auth.Group']", 'symmetrical': 'False', 'blank': 'True'}),
            u'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'is_active': ('django.db.models.fields.BooleanField', [], {'default': 'True'}),
            'is_staff': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'is_superuser': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'last_login': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
            'last_name': ('django.db.models.fields.CharField', [], {'max_length': '30', 'blank': 'True'}),
            'password': ('django.db.models.fields.CharField', [], {'max_length': '128'}),
            'user_permissions': ('django.db.models.fields.related.ManyToManyField', [], {'to': u"orm['auth.Permission']", 'symmetrical': 'False', 'blank': 'True'}),
            'username': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '30'})
        },
        u'contenttypes.contenttype': {
            'Meta': {'ordering': "('name',)", 'unique_together': "(('app_label', 'model'),)", 'object_name': 'ContentType', 'db_table': "'django_content_type'"},
            'app_label': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            u'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'model': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '100'})
        },
        u'dialer_campaign.campaign': {
            'Meta': {'object_name': 'Campaign', 'db_table': "u'dialer_campaign'"},
            'aleg_gateway': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'A-Leg Gateway'", 'to': u"orm['dialer_gateway.Gateway']"}),
            'amd_behavior': ('django.db.models.fields.IntegerField', [], {'default': '1', 'null': 'True', 'blank': 'True'}),
            'caller_name': ('django.db.models.fields.CharField', [], {'max_length': '80', 'blank': 'True'}),
            'callerid': ('django.db.models.fields.CharField', [], {'max_length': '80', 'blank': 'True'}),
            'callmaxduration': ('django.db.models.fields.IntegerField', [], {'default': "'1800'", 'null': 'True', 'blank': 'True'}),
            'calltimeout': ('django.db.models.fields.IntegerField', [], {'default': "'45'", 'null': 'True', 'blank': 'True'}),
            'campaign_code': ('django.db.models.fields.CharField', [], {'default': "'OELPO'", 'unique': 'True', 'max_length': '20', 'blank': 'True'}),
            'completed': ('django.db.models.fields.IntegerField', [], {'default': '0', 'null': 'True', 'blank': 'True'}),
            'completion_intervalretry': ('django.db.models.fields.IntegerField', [], {'default': "'900'", 'null': 'True', 'blank': 'True'}),
            'completion_maxretry': ('django.db.models.fields.IntegerField', [], {'default': "'0'", 'null': 'True', 'blank': 'True'}),
            'content_type': ('django.db.models.fields.related.ForeignKey', [], {'to': u"orm['contenttypes.ContentType']"}),
            'created_date': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'daily_start_time': ('django.db.models.fields.TimeField', [], {'default': "'00:00:00'"}),
            'daily_stop_time': ('django.db.models.fields.TimeField', [], {'default': "'23:59:59'"}),
            'description': ('django.db.models.fields.TextField', [], {'null': 'True', 'blank': 'True'}),
            'dnc': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'DNC'", 'null': 'True', 'to': u"orm['dnc.DNC']"}),
            'expirationdate': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime(2013, 3, 19, 0, 0)'}),
            'extra_data': ('django.db.models.fields.CharField', [], {'max_length': '120', 'blank': 'True'}),
            'frequency': ('django.db.models.fields.IntegerField', [], {'default': "'10'", 'null': 'True', 'blank': 'True'}),
            'friday': ('django.db.models.fields.BooleanField', [], {'default': 'True'}),
            'has_been_duplicated': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'has_been_started': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            u'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'imported_phonebook': ('django.db.models.fields.CharField', [], {'default': "''", 'max_length': '500', 'blank': 'True'}),
            'intervalretry': ('django.db.models.fields.IntegerField', [], {'default': "'300'", 'null': 'True', 'blank': 'True'}),
            'maxretry': ('django.db.models.fields.IntegerField', [], {'default': "'0'", 'null': 'True', 'blank': 'True'}),
            'monday': ('django.db.models.fields.BooleanField', [], {'default': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'object_id': ('django.db.models.fields.PositiveIntegerField', [], {}),
            'phonebook': ('django.db.models.fields.related.ManyToManyField', [], {'symmetrical': 'False', 'to': u"orm['dialer_contact.Phonebook']", 'null': 'True', 'blank': 'True'}),
            'saturday': ('django.db.models.fields.BooleanField', [], {'default': 'True'}),
            'startingdate': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime(2013, 3, 18, 0, 0)'}),
            'status': ('django.db.models.fields.IntegerField', [], {'default': '2', 'null': 'True', 'blank': 'True'}),
            'sunday': ('django.db.models.fields.BooleanField', [], {'default': 'True'}),
            'thursday': ('django.db.models.fields.BooleanField', [], {'default': 'True'}),
            'totalcontact': ('django.db.models.fields.IntegerField', [], {'default': '0', 'null': 'True', 'blank': 'True'}),
            'tuesday': ('django.db.models.fields.BooleanField', [], {'default': 'True'}),
            'updated_date': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'blank': 'True'}),
            'user': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'Campaign owner'", 'to': u"orm['auth.User']"}),
            'voicemail': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'voicemail_audiofile': ('django.db.models.fields.related.ForeignKey', [], {'to': u"orm['audiofield.AudioFile']", 'null': 'True', 'blank': 'True'}),
            'wednesday': ('django.db.models.fields.BooleanField', [], {'default': 'True'})
        },
        u'dialer_campaign.subscriber': {
            'Meta': {'unique_together': "(['contact', 'campaign'],)", 'object_name': 'Subscriber', 'db_table': "u'dialer_subscriber'"},
            'campaign': ('django.db.models.fields.related.ForeignKey', [], {'to': u"orm['dialer_campaign.Campaign']", 'null': 'True', 'blank': 'True'}),
            'completion_count_attempt': ('django.db.models.fields.IntegerField', [], {'default': '0', 'null': 'True', 'blank': 'True'}),
            'contact': ('django.db.models.fields.related.ForeignKey', [], {'to': u"orm['dialer_contact.Contact']", 'null': 'True', 'blank': 'True'}),
            'count_attempt': ('django.db.models.fields.IntegerField', [], {'default': '0', 'null': 'True', 'blank': 'True'}),
            'created_date': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'duplicate_contact': ('django.db.models.fields.CharField', [], {'max_length': '90'}),
            u'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'last_attempt': ('django.db.models.fields.DateTimeField', [], {'null': 'True', 'blank': 'True'}),
            'status': ('django.db.models.fields.IntegerField', [], {'default': '1', 'null': 'True', 'blank': 'True'}),
            'updated_date': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'db_index': 'True', 'blank': 'True'})
        },
        u'dialer_contact.contact': {
            'Meta': {'object_name': 'Contact', 'db_table': "u'dialer_contact'"},
            'additional_vars': ('jsonfield.fields.JSONField', [], {'null': 'True', 'blank': 'True'}),
            'city': ('django.db.models.fields.CharField', [], {'max_length': '120', 'null': 'True', 'blank': 'True'}),
            'contact': ('django.db.models.fields.CharField', [], {'max_length': '90'}),
            'country': ('django_countries.fields.CountryField', [], {'max_length': '2', 'null': 'True', 'blank': 'True'}),
            'created_date': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'description': ('django.db.models.fields.TextField', [], {'null': 'True', 'blank': 'True'}),
            'email': ('django.db.models.fields.EmailField', [], {'max_length': '75', 'null': 'True', 'blank': 'True'}),
            'first_name': ('django.db.models.fields.CharField', [], {'max_length': '120', 'null': 'True', 'blank': 'True'}),
            u'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'last_name': ('django.db.models.fields.CharField', [], {'max_length': '120', 'null': 'True', 'blank': 'True'}),
            'phonebook': ('django.db.models.fields.related.ForeignKey', [], {'to': u"orm['dialer_contact.Phonebook']"}),
            'status': ('django.db.models.fields.IntegerField', [], {'default': '1', 'null': 'True', 'blank': 'True'}),
            'updated_date': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'blank': 'True'})
        },
        u'dialer_contact.phonebook': {
            'Meta': {'object_name': 'Phonebook', 'db_table': "u'dialer_phonebook'"},
            'created_date': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'description': ('django.db.models.fields.TextField', [], {'null': 'True', 'blank': 'True'}),
            u'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '90'}),
            'updated_date': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'blank': 'True'}),
            'user': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'Phonebook owner'", 'to': u"orm['auth.User']"})
        },
        u'dialer_gateway.gateway': {
            'Meta': {'object_name': 'Gateway', 'db_table': "u'dialer_gateway'"},
            'addparameter': ('django.db.models.fields.CharField', [], {'max_length': '360', 'blank': 'True'}),
            'addprefix': ('django.db.models.fields.CharField', [], {'max_length': '60', 'blank': 'True'}),
            'count_call': ('django.db.models.fields.IntegerField', [], {'null': 'True', 'blank': 'True'}),
            'count_in_use': ('django.db.models.fields.IntegerField', [], {'null': 'True', 'blank': 'True'}),
            'created_date': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'description': ('django.db.models.fields.TextField', [], {'blank': 'True'}),
            'failover': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'Failover Gateway'", 'null': 'True', 'to': u"orm['dialer_gateway.Gateway']"}),
            'gateway_codecs': ('django.db.models.fields.CharField', [], {'max_length': '500', 'blank': 'True'}),
            'gateway_retries': ('django.db.models.fields.CharField', [], {'max_length': '500', 'blank': 'True'}),
            'gateway_timeouts': ('django.db.models.fields.CharField', [], {'max_length': '500', 'blank': 'True'}),
            'gateways': ('django.db.models.fields.CharField', [], {'max_length': '500'}),
            u'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'maximum_call': ('django.db.models.fields.IntegerField', [], {'null': 'True', 'blank': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '255'}),
            'originate_dial_string': ('django.db.models.fields.CharField', [], {'max_length': '500', 'blank': 'True'}),
            'removeprefix': ('django.db.models.fields.CharField', [], {'max_length': '60', 'blank': 'True'}),
            'secondused': ('django.db.models.fields.IntegerField', [], {'null': 'True', 'blank': 'True'}),
            'status': ('django.db.models.fields.IntegerField', [], {'default': '1', 'null': 'True', 'blank': 'True'}),
            'updated_date': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'blank': 'True'})
        },
        u'dnc.dnc': {
            'Meta': {'object_name': 'DNC', 'db_table': "'dnc_list'"},
            'created_date': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            u'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '50', 'null': 'True'}),
            'updated_date': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'blank': 'True'}),
            'user': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'DNC owner'", 'to': u"orm['auth.User']"})
        }
    }

    complete_apps = ['dialer_campaign']

########NEW FILE########
__FILENAME__ = 0003_auto__add_field_campaign_agent_script__add_field_campaign_lead_disposi
# -*- coding: utf-8 -*-
import datetime
from south.db import db
from south.v2 import SchemaMigration
from django.db import models


class Migration(SchemaMigration):

    def forwards(self, orm):
        # Adding field 'Campaign.agent_script'
        db.add_column(u'dialer_campaign', 'agent_script',
                      self.gf('django.db.models.fields.TextField')(null=True, blank=True),
                      keep_default=False)

        # Adding field 'Campaign.lead_disposition'
        db.add_column(u'dialer_campaign', 'lead_disposition',
                      self.gf('django.db.models.fields.TextField')(null=True, blank=True),
                      keep_default=False)

    def backwards(self, orm):
        # Deleting field 'Campaign.agent_script'
        db.delete_column(u'dialer_campaign', 'agent_script')

        # Deleting field 'Campaign.lead_disposition'
        db.delete_column(u'dialer_campaign', 'lead_disposition')

    models = {
        u'audiofield.audiofile': {
            'Meta': {'object_name': 'AudioFile', 'db_table': "u'audio_file'"},
            'audio_file': ('audiofield.fields.AudioField', [], {'ext_whitelist': "['.mp3', '.wav', '.ogg']", 'max_length': '100', 'blank': 'True'}),
            'created_date': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            u'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '150'}),
            'updated_date': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'blank': 'True'}),
            'user': ('django.db.models.fields.related.ForeignKey', [], {'to': u"orm['auth.User']"})
        },
        u'auth.group': {
            'Meta': {'object_name': 'Group'},
            u'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '80'}),
            'permissions': ('django.db.models.fields.related.ManyToManyField', [], {'to': u"orm['auth.Permission']", 'symmetrical': 'False', 'blank': 'True'})
        },
        u'auth.permission': {
            'Meta': {'ordering': "(u'content_type__app_label', u'content_type__model', u'codename')", 'unique_together': "((u'content_type', u'codename'),)", 'object_name': 'Permission'},
            'codename': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'content_type': ('django.db.models.fields.related.ForeignKey', [], {'to': u"orm['contenttypes.ContentType']"}),
            u'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '50'})
        },
        u'auth.user': {
            'Meta': {'object_name': 'User'},
            'date_joined': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
            'email': ('django.db.models.fields.EmailField', [], {'max_length': '75', 'blank': 'True'}),
            'first_name': ('django.db.models.fields.CharField', [], {'max_length': '30', 'blank': 'True'}),
            'groups': ('django.db.models.fields.related.ManyToManyField', [], {'to': u"orm['auth.Group']", 'symmetrical': 'False', 'blank': 'True'}),
            u'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'is_active': ('django.db.models.fields.BooleanField', [], {'default': 'True'}),
            'is_staff': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'is_superuser': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'last_login': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
            'last_name': ('django.db.models.fields.CharField', [], {'max_length': '30', 'blank': 'True'}),
            'password': ('django.db.models.fields.CharField', [], {'max_length': '128'}),
            'user_permissions': ('django.db.models.fields.related.ManyToManyField', [], {'to': u"orm['auth.Permission']", 'symmetrical': 'False', 'blank': 'True'}),
            'username': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '30'})
        },
        u'contenttypes.contenttype': {
            'Meta': {'ordering': "('name',)", 'unique_together': "(('app_label', 'model'),)", 'object_name': 'ContentType', 'db_table': "'django_content_type'"},
            'app_label': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            u'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'model': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '100'})
        },
        u'dialer_campaign.campaign': {
            'Meta': {'object_name': 'Campaign', 'db_table': "u'dialer_campaign'"},
            'agent_script': ('django.db.models.fields.TextField', [], {'null': 'True', 'blank': 'True'}),
            'aleg_gateway': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'A-Leg Gateway'", 'to': u"orm['dialer_gateway.Gateway']"}),
            'amd_behavior': ('django.db.models.fields.IntegerField', [], {'default': '1', 'null': 'True', 'blank': 'True'}),
            'caller_name': ('django.db.models.fields.CharField', [], {'max_length': '80', 'blank': 'True'}),
            'callerid': ('django.db.models.fields.CharField', [], {'max_length': '80', 'blank': 'True'}),
            'callmaxduration': ('django.db.models.fields.IntegerField', [], {'default': "'1800'", 'null': 'True', 'blank': 'True'}),
            'calltimeout': ('django.db.models.fields.IntegerField', [], {'default': "'45'", 'null': 'True', 'blank': 'True'}),
            'campaign_code': ('django.db.models.fields.CharField', [], {'default': "'PDIWC'", 'unique': 'True', 'max_length': '20', 'blank': 'True'}),
            'completed': ('django.db.models.fields.IntegerField', [], {'default': '0', 'null': 'True', 'blank': 'True'}),
            'completion_intervalretry': ('django.db.models.fields.IntegerField', [], {'default': "'900'", 'null': 'True', 'blank': 'True'}),
            'completion_maxretry': ('django.db.models.fields.IntegerField', [], {'default': "'0'", 'null': 'True', 'blank': 'True'}),
            'content_type': ('django.db.models.fields.related.ForeignKey', [], {'to': u"orm['contenttypes.ContentType']"}),
            'created_date': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'daily_start_time': ('django.db.models.fields.TimeField', [], {'default': "'00:00:00'"}),
            'daily_stop_time': ('django.db.models.fields.TimeField', [], {'default': "'23:59:59'"}),
            'description': ('django.db.models.fields.TextField', [], {'null': 'True', 'blank': 'True'}),
            'dnc': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'DNC'", 'null': 'True', 'to': u"orm['dnc.DNC']"}),
            'expirationdate': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime(2013, 7, 24, 0, 0)'}),
            'extra_data': ('django.db.models.fields.CharField', [], {'max_length': '120', 'blank': 'True'}),
            'frequency': ('django.db.models.fields.IntegerField', [], {'default': "'10'", 'null': 'True', 'blank': 'True'}),
            'friday': ('django.db.models.fields.BooleanField', [], {'default': 'True'}),
            'has_been_duplicated': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'has_been_started': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            u'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'imported_phonebook': ('django.db.models.fields.CharField', [], {'default': "''", 'max_length': '500', 'blank': 'True'}),
            'intervalretry': ('django.db.models.fields.IntegerField', [], {'default': "'300'", 'null': 'True', 'blank': 'True'}),
            'lead_disposition': ('django.db.models.fields.TextField', [], {'null': 'True', 'blank': 'True'}),
            'maxretry': ('django.db.models.fields.IntegerField', [], {'default': "'0'", 'null': 'True', 'blank': 'True'}),
            'monday': ('django.db.models.fields.BooleanField', [], {'default': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'object_id': ('django.db.models.fields.PositiveIntegerField', [], {}),
            'phonebook': ('django.db.models.fields.related.ManyToManyField', [], {'symmetrical': 'False', 'to': u"orm['dialer_contact.Phonebook']", 'null': 'True', 'blank': 'True'}),
            'saturday': ('django.db.models.fields.BooleanField', [], {'default': 'True'}),
            'startingdate': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime(2013, 7, 23, 0, 0)'}),
            'status': ('django.db.models.fields.IntegerField', [], {'default': '2', 'null': 'True', 'blank': 'True'}),
            'sunday': ('django.db.models.fields.BooleanField', [], {'default': 'True'}),
            'thursday': ('django.db.models.fields.BooleanField', [], {'default': 'True'}),
            'totalcontact': ('django.db.models.fields.IntegerField', [], {'default': '0', 'null': 'True', 'blank': 'True'}),
            'tuesday': ('django.db.models.fields.BooleanField', [], {'default': 'True'}),
            'updated_date': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'blank': 'True'}),
            'user': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'Campaign owner'", 'to': u"orm['auth.User']"}),
            'voicemail': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'voicemail_audiofile': ('django.db.models.fields.related.ForeignKey', [], {'to': u"orm['audiofield.AudioFile']", 'null': 'True', 'blank': 'True'}),
            'wednesday': ('django.db.models.fields.BooleanField', [], {'default': 'True'})
        },
        u'dialer_campaign.subscriber': {
            'Meta': {'unique_together': "(['contact', 'campaign'],)", 'object_name': 'Subscriber', 'db_table': "u'dialer_subscriber'"},
            'campaign': ('django.db.models.fields.related.ForeignKey', [], {'to': u"orm['dialer_campaign.Campaign']", 'null': 'True', 'blank': 'True'}),
            'completion_count_attempt': ('django.db.models.fields.IntegerField', [], {'default': '0', 'null': 'True', 'blank': 'True'}),
            'contact': ('django.db.models.fields.related.ForeignKey', [], {'to': u"orm['dialer_contact.Contact']", 'null': 'True', 'blank': 'True'}),
            'count_attempt': ('django.db.models.fields.IntegerField', [], {'default': '0', 'null': 'True', 'blank': 'True'}),
            'created_date': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'duplicate_contact': ('django.db.models.fields.CharField', [], {'max_length': '90'}),
            u'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'last_attempt': ('django.db.models.fields.DateTimeField', [], {'null': 'True', 'blank': 'True'}),
            'status': ('django.db.models.fields.IntegerField', [], {'default': '1', 'null': 'True', 'blank': 'True'}),
            'updated_date': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'db_index': 'True', 'blank': 'True'})
        },
        u'dialer_contact.contact': {
            'Meta': {'object_name': 'Contact', 'db_table': "u'dialer_contact'"},
            'additional_vars': ('jsonfield.fields.JSONField', [], {'null': 'True', 'blank': 'True'}),
            'address': ('django.db.models.fields.TextField', [], {'null': 'True', 'blank': 'True'}),
            'city': ('django.db.models.fields.CharField', [], {'max_length': '120', 'null': 'True', 'blank': 'True'}),
            'contact': ('django.db.models.fields.CharField', [], {'max_length': '90'}),
            'country': ('django_countries.fields.CountryField', [], {'max_length': '2', 'null': 'True', 'blank': 'True'}),
            'created_date': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'description': ('django.db.models.fields.TextField', [], {'null': 'True', 'blank': 'True'}),
            'email': ('django.db.models.fields.EmailField', [], {'max_length': '75', 'null': 'True', 'blank': 'True'}),
            'first_name': ('django.db.models.fields.CharField', [], {'max_length': '120', 'null': 'True', 'blank': 'True'}),
            u'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'last_name': ('django.db.models.fields.CharField', [], {'max_length': '120', 'null': 'True', 'blank': 'True'}),
            'phonebook': ('django.db.models.fields.related.ForeignKey', [], {'to': u"orm['dialer_contact.Phonebook']"}),
            'state': ('django.db.models.fields.CharField', [], {'max_length': '120', 'null': 'True', 'blank': 'True'}),
            'status': ('django.db.models.fields.IntegerField', [], {'default': '1', 'null': 'True', 'blank': 'True'}),
            'unit_number': ('django.db.models.fields.CharField', [], {'max_length': '50', 'null': 'True', 'blank': 'True'}),
            'updated_date': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'blank': 'True'})
        },
        u'dialer_contact.phonebook': {
            'Meta': {'object_name': 'Phonebook', 'db_table': "u'dialer_phonebook'"},
            'created_date': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'description': ('django.db.models.fields.TextField', [], {'null': 'True', 'blank': 'True'}),
            u'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '90'}),
            'updated_date': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'blank': 'True'}),
            'user': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'Phonebook owner'", 'to': u"orm['auth.User']"})
        },
        u'dialer_gateway.gateway': {
            'Meta': {'object_name': 'Gateway', 'db_table': "u'dialer_gateway'"},
            'addparameter': ('django.db.models.fields.CharField', [], {'max_length': '360', 'blank': 'True'}),
            'addprefix': ('django.db.models.fields.CharField', [], {'max_length': '60', 'blank': 'True'}),
            'count_call': ('django.db.models.fields.IntegerField', [], {'null': 'True', 'blank': 'True'}),
            'count_in_use': ('django.db.models.fields.IntegerField', [], {'null': 'True', 'blank': 'True'}),
            'created_date': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'description': ('django.db.models.fields.TextField', [], {'blank': 'True'}),
            'failover': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'Failover Gateway'", 'null': 'True', 'to': u"orm['dialer_gateway.Gateway']"}),
            'gateway_codecs': ('django.db.models.fields.CharField', [], {'max_length': '500', 'blank': 'True'}),
            'gateway_retries': ('django.db.models.fields.CharField', [], {'max_length': '500', 'blank': 'True'}),
            'gateway_timeouts': ('django.db.models.fields.CharField', [], {'max_length': '500', 'blank': 'True'}),
            'gateways': ('django.db.models.fields.CharField', [], {'max_length': '500'}),
            u'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'maximum_call': ('django.db.models.fields.IntegerField', [], {'null': 'True', 'blank': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '255'}),
            'originate_dial_string': ('django.db.models.fields.CharField', [], {'max_length': '500', 'blank': 'True'}),
            'removeprefix': ('django.db.models.fields.CharField', [], {'max_length': '60', 'blank': 'True'}),
            'secondused': ('django.db.models.fields.IntegerField', [], {'null': 'True', 'blank': 'True'}),
            'status': ('django.db.models.fields.IntegerField', [], {'default': '1', 'null': 'True', 'blank': 'True'}),
            'updated_date': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'blank': 'True'})
        },
        u'dnc.dnc': {
            'Meta': {'object_name': 'DNC', 'db_table': "'dnc_list'"},
            'created_date': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            u'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '50', 'null': 'True'}),
            'updated_date': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'blank': 'True'}),
            'user': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'DNC owner'", 'to': u"orm['auth.User']"})
        }
    }

    complete_apps = ['dialer_campaign']

########NEW FILE########
__FILENAME__ = 0004_auto__add_field_subscriber_disposition
# -*- coding: utf-8 -*-
import datetime
from south.db import db
from south.v2 import SchemaMigration
from django.db import models


class Migration(SchemaMigration):

    def forwards(self, orm):
        # Adding field 'Subscriber.disposition'
        db.add_column(u'dialer_subscriber', 'disposition',
                      self.gf('django.db.models.fields.IntegerField')(null=True, blank=True),
                      keep_default=False)

    def backwards(self, orm):
        # Deleting field 'Subscriber.disposition'
        db.delete_column(u'dialer_subscriber', 'disposition')

    models = {
        u'audiofield.audiofile': {
            'Meta': {'object_name': 'AudioFile', 'db_table': "u'audio_file'"},
            'audio_file': ('audiofield.fields.AudioField', [], {'ext_whitelist': "['.mp3', '.wav', '.ogg']", 'max_length': '100', 'blank': 'True'}),
            'created_date': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            u'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '150'}),
            'updated_date': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'blank': 'True'}),
            'user': ('django.db.models.fields.related.ForeignKey', [], {'to': u"orm['auth.User']"})
        },
        u'auth.group': {
            'Meta': {'object_name': 'Group'},
            u'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '80'}),
            'permissions': ('django.db.models.fields.related.ManyToManyField', [], {'to': u"orm['auth.Permission']", 'symmetrical': 'False', 'blank': 'True'})
        },
        u'auth.permission': {
            'Meta': {'ordering': "(u'content_type__app_label', u'content_type__model', u'codename')", 'unique_together': "((u'content_type', u'codename'),)", 'object_name': 'Permission'},
            'codename': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'content_type': ('django.db.models.fields.related.ForeignKey', [], {'to': u"orm['contenttypes.ContentType']"}),
            u'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '50'})
        },
        u'auth.user': {
            'Meta': {'object_name': 'User'},
            'date_joined': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
            'email': ('django.db.models.fields.EmailField', [], {'max_length': '75', 'blank': 'True'}),
            'first_name': ('django.db.models.fields.CharField', [], {'max_length': '30', 'blank': 'True'}),
            'groups': ('django.db.models.fields.related.ManyToManyField', [], {'to': u"orm['auth.Group']", 'symmetrical': 'False', 'blank': 'True'}),
            u'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'is_active': ('django.db.models.fields.BooleanField', [], {'default': 'True'}),
            'is_staff': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'is_superuser': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'last_login': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
            'last_name': ('django.db.models.fields.CharField', [], {'max_length': '30', 'blank': 'True'}),
            'password': ('django.db.models.fields.CharField', [], {'max_length': '128'}),
            'user_permissions': ('django.db.models.fields.related.ManyToManyField', [], {'to': u"orm['auth.Permission']", 'symmetrical': 'False', 'blank': 'True'}),
            'username': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '30'})
        },
        u'contenttypes.contenttype': {
            'Meta': {'ordering': "('name',)", 'unique_together': "(('app_label', 'model'),)", 'object_name': 'ContentType', 'db_table': "'django_content_type'"},
            'app_label': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            u'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'model': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '100'})
        },
        u'dialer_campaign.campaign': {
            'Meta': {'object_name': 'Campaign', 'db_table': "u'dialer_campaign'"},
            'agent_script': ('django.db.models.fields.TextField', [], {'null': 'True', 'blank': 'True'}),
            'aleg_gateway': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'A-Leg Gateway'", 'to': u"orm['dialer_gateway.Gateway']"}),
            'amd_behavior': ('django.db.models.fields.IntegerField', [], {'default': '1', 'null': 'True', 'blank': 'True'}),
            'caller_name': ('django.db.models.fields.CharField', [], {'max_length': '80', 'blank': 'True'}),
            'callerid': ('django.db.models.fields.CharField', [], {'max_length': '80', 'blank': 'True'}),
            'callmaxduration': ('django.db.models.fields.IntegerField', [], {'default': "'1800'", 'null': 'True', 'blank': 'True'}),
            'calltimeout': ('django.db.models.fields.IntegerField', [], {'default': "'45'", 'null': 'True', 'blank': 'True'}),
            'campaign_code': ('django.db.models.fields.CharField', [], {'default': "'LIHJV'", 'unique': 'True', 'max_length': '20', 'blank': 'True'}),
            'completed': ('django.db.models.fields.IntegerField', [], {'default': '0', 'null': 'True', 'blank': 'True'}),
            'completion_intervalretry': ('django.db.models.fields.IntegerField', [], {'default': "'900'", 'null': 'True', 'blank': 'True'}),
            'completion_maxretry': ('django.db.models.fields.IntegerField', [], {'default': "'0'", 'null': 'True', 'blank': 'True'}),
            'content_type': ('django.db.models.fields.related.ForeignKey', [], {'to': u"orm['contenttypes.ContentType']"}),
            'created_date': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'daily_start_time': ('django.db.models.fields.TimeField', [], {'default': "'00:00:00'"}),
            'daily_stop_time': ('django.db.models.fields.TimeField', [], {'default': "'23:59:59'"}),
            'description': ('django.db.models.fields.TextField', [], {'null': 'True', 'blank': 'True'}),
            'dnc': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'DNC'", 'null': 'True', 'to': u"orm['dnc.DNC']"}),
            'expirationdate': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime(2013, 7, 25, 0, 0)'}),
            'extra_data': ('django.db.models.fields.CharField', [], {'max_length': '120', 'blank': 'True'}),
            'frequency': ('django.db.models.fields.IntegerField', [], {'default': "'10'", 'null': 'True', 'blank': 'True'}),
            'friday': ('django.db.models.fields.BooleanField', [], {'default': 'True'}),
            'has_been_duplicated': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'has_been_started': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            u'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'imported_phonebook': ('django.db.models.fields.CharField', [], {'default': "''", 'max_length': '500', 'blank': 'True'}),
            'intervalretry': ('django.db.models.fields.IntegerField', [], {'default': "'300'", 'null': 'True', 'blank': 'True'}),
            'lead_disposition': ('django.db.models.fields.TextField', [], {'null': 'True', 'blank': 'True'}),
            'maxretry': ('django.db.models.fields.IntegerField', [], {'default': "'0'", 'null': 'True', 'blank': 'True'}),
            'monday': ('django.db.models.fields.BooleanField', [], {'default': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'object_id': ('django.db.models.fields.PositiveIntegerField', [], {}),
            'phonebook': ('django.db.models.fields.related.ManyToManyField', [], {'symmetrical': 'False', 'to': u"orm['dialer_contact.Phonebook']", 'null': 'True', 'blank': 'True'}),
            'saturday': ('django.db.models.fields.BooleanField', [], {'default': 'True'}),
            'startingdate': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime(2013, 7, 24, 0, 0)'}),
            'status': ('django.db.models.fields.IntegerField', [], {'default': '2', 'null': 'True', 'blank': 'True'}),
            'sunday': ('django.db.models.fields.BooleanField', [], {'default': 'True'}),
            'thursday': ('django.db.models.fields.BooleanField', [], {'default': 'True'}),
            'totalcontact': ('django.db.models.fields.IntegerField', [], {'default': '0', 'null': 'True', 'blank': 'True'}),
            'tuesday': ('django.db.models.fields.BooleanField', [], {'default': 'True'}),
            'updated_date': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'blank': 'True'}),
            'user': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'Campaign owner'", 'to': u"orm['auth.User']"}),
            'voicemail': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'voicemail_audiofile': ('django.db.models.fields.related.ForeignKey', [], {'to': u"orm['audiofield.AudioFile']", 'null': 'True', 'blank': 'True'}),
            'wednesday': ('django.db.models.fields.BooleanField', [], {'default': 'True'})
        },
        u'dialer_campaign.subscriber': {
            'Meta': {'unique_together': "(['contact', 'campaign'],)", 'object_name': 'Subscriber', 'db_table': "u'dialer_subscriber'"},
            'campaign': ('django.db.models.fields.related.ForeignKey', [], {'to': u"orm['dialer_campaign.Campaign']", 'null': 'True', 'blank': 'True'}),
            'completion_count_attempt': ('django.db.models.fields.IntegerField', [], {'default': '0', 'null': 'True', 'blank': 'True'}),
            'contact': ('django.db.models.fields.related.ForeignKey', [], {'to': u"orm['dialer_contact.Contact']", 'null': 'True', 'blank': 'True'}),
            'count_attempt': ('django.db.models.fields.IntegerField', [], {'default': '0', 'null': 'True', 'blank': 'True'}),
            'created_date': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'disposition': ('django.db.models.fields.IntegerField', [], {'null': 'True', 'blank': 'True'}),
            'duplicate_contact': ('django.db.models.fields.CharField', [], {'max_length': '90'}),
            u'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'last_attempt': ('django.db.models.fields.DateTimeField', [], {'null': 'True', 'blank': 'True'}),
            'status': ('django.db.models.fields.IntegerField', [], {'default': '1', 'null': 'True', 'blank': 'True'}),
            'updated_date': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'db_index': 'True', 'blank': 'True'})
        },
        u'dialer_contact.contact': {
            'Meta': {'object_name': 'Contact', 'db_table': "u'dialer_contact'"},
            'additional_vars': ('jsonfield.fields.JSONField', [], {'null': 'True', 'blank': 'True'}),
            'address': ('django.db.models.fields.TextField', [], {'null': 'True', 'blank': 'True'}),
            'city': ('django.db.models.fields.CharField', [], {'max_length': '120', 'null': 'True', 'blank': 'True'}),
            'contact': ('django.db.models.fields.CharField', [], {'max_length': '90'}),
            'country': ('django_countries.fields.CountryField', [], {'max_length': '2', 'null': 'True', 'blank': 'True'}),
            'created_date': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'description': ('django.db.models.fields.TextField', [], {'null': 'True', 'blank': 'True'}),
            'email': ('django.db.models.fields.EmailField', [], {'max_length': '75', 'null': 'True', 'blank': 'True'}),
            'first_name': ('django.db.models.fields.CharField', [], {'max_length': '120', 'null': 'True', 'blank': 'True'}),
            u'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'last_name': ('django.db.models.fields.CharField', [], {'max_length': '120', 'null': 'True', 'blank': 'True'}),
            'phonebook': ('django.db.models.fields.related.ForeignKey', [], {'to': u"orm['dialer_contact.Phonebook']"}),
            'state': ('django.db.models.fields.CharField', [], {'max_length': '120', 'null': 'True', 'blank': 'True'}),
            'status': ('django.db.models.fields.IntegerField', [], {'default': '1', 'null': 'True', 'blank': 'True'}),
            'unit_number': ('django.db.models.fields.CharField', [], {'max_length': '50', 'null': 'True', 'blank': 'True'}),
            'updated_date': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'blank': 'True'})
        },
        u'dialer_contact.phonebook': {
            'Meta': {'object_name': 'Phonebook', 'db_table': "u'dialer_phonebook'"},
            'created_date': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'description': ('django.db.models.fields.TextField', [], {'null': 'True', 'blank': 'True'}),
            u'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '90'}),
            'updated_date': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'blank': 'True'}),
            'user': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'Phonebook owner'", 'to': u"orm['auth.User']"})
        },
        u'dialer_gateway.gateway': {
            'Meta': {'object_name': 'Gateway', 'db_table': "u'dialer_gateway'"},
            'addparameter': ('django.db.models.fields.CharField', [], {'max_length': '360', 'blank': 'True'}),
            'addprefix': ('django.db.models.fields.CharField', [], {'max_length': '60', 'blank': 'True'}),
            'count_call': ('django.db.models.fields.IntegerField', [], {'null': 'True', 'blank': 'True'}),
            'count_in_use': ('django.db.models.fields.IntegerField', [], {'null': 'True', 'blank': 'True'}),
            'created_date': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'description': ('django.db.models.fields.TextField', [], {'blank': 'True'}),
            'failover': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'Failover Gateway'", 'null': 'True', 'to': u"orm['dialer_gateway.Gateway']"}),
            'gateway_codecs': ('django.db.models.fields.CharField', [], {'max_length': '500', 'blank': 'True'}),
            'gateway_retries': ('django.db.models.fields.CharField', [], {'max_length': '500', 'blank': 'True'}),
            'gateway_timeouts': ('django.db.models.fields.CharField', [], {'max_length': '500', 'blank': 'True'}),
            'gateways': ('django.db.models.fields.CharField', [], {'max_length': '500'}),
            u'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'maximum_call': ('django.db.models.fields.IntegerField', [], {'null': 'True', 'blank': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '255'}),
            'originate_dial_string': ('django.db.models.fields.CharField', [], {'max_length': '500', 'blank': 'True'}),
            'removeprefix': ('django.db.models.fields.CharField', [], {'max_length': '60', 'blank': 'True'}),
            'secondused': ('django.db.models.fields.IntegerField', [], {'null': 'True', 'blank': 'True'}),
            'status': ('django.db.models.fields.IntegerField', [], {'default': '1', 'null': 'True', 'blank': 'True'}),
            'updated_date': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'blank': 'True'})
        },
        u'dnc.dnc': {
            'Meta': {'object_name': 'DNC', 'db_table': "'dnc_list'"},
            'created_date': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            u'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '50', 'null': 'True'}),
            'updated_date': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'blank': 'True'}),
            'user': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'DNC owner'", 'to': u"orm['auth.User']"})
        }
    }

    complete_apps = ['dialer_campaign']

########NEW FILE########
__FILENAME__ = 0005_auto__add_field_subscriber_collected_data__add_field_subscriber_agent_
# -*- coding: utf-8 -*-
import datetime
from south.db import db
from south.v2 import SchemaMigration
from django.db import models


class Migration(SchemaMigration):

    def forwards(self, orm):
        # Adding field 'Subscriber.collected_data'
        db.add_column(u'dialer_subscriber', 'collected_data',
                      self.gf('django.db.models.fields.TextField')(null=True, blank=True),
                      keep_default=False)

        # Adding field 'Subscriber.agent'
        db.add_column(u'dialer_subscriber', 'agent',
                      self.gf('django.db.models.fields.related.ForeignKey')(blank=True, related_name='agent', null=True, to=orm['auth.User']),
                      keep_default=False)

        # Adding field 'Campaign.external_link'
        db.add_column(u'dialer_campaign', 'external_link',
                      self.gf('jsonfield.fields.JSONField')(null=True, blank=True),
                      keep_default=False)

    def backwards(self, orm):
        # Deleting field 'Subscriber.collected_data'
        db.delete_column(u'dialer_subscriber', 'collected_data')

        # Deleting field 'Subscriber.agent'
        db.delete_column(u'dialer_subscriber', 'agent_id')

        # Deleting field 'Campaign.external_link'
        db.delete_column(u'dialer_campaign', 'external_link')

    models = {
        u'audiofield.audiofile': {
            'Meta': {'object_name': 'AudioFile', 'db_table': "u'audio_file'"},
            'audio_file': ('audiofield.fields.AudioField', [], {'ext_whitelist': "['.mp3', '.wav', '.ogg']", 'max_length': '100', 'blank': 'True'}),
            'created_date': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            u'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '150'}),
            'updated_date': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'blank': 'True'}),
            'user': ('django.db.models.fields.related.ForeignKey', [], {'to': u"orm['auth.User']"})
        },
        u'auth.group': {
            'Meta': {'object_name': 'Group'},
            u'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '80'}),
            'permissions': ('django.db.models.fields.related.ManyToManyField', [], {'to': u"orm['auth.Permission']", 'symmetrical': 'False', 'blank': 'True'})
        },
        u'auth.permission': {
            'Meta': {'ordering': "(u'content_type__app_label', u'content_type__model', u'codename')", 'unique_together': "((u'content_type', u'codename'),)", 'object_name': 'Permission'},
            'codename': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'content_type': ('django.db.models.fields.related.ForeignKey', [], {'to': u"orm['contenttypes.ContentType']"}),
            u'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '50'})
        },
        u'auth.user': {
            'Meta': {'object_name': 'User'},
            'date_joined': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
            'email': ('django.db.models.fields.EmailField', [], {'max_length': '75', 'blank': 'True'}),
            'first_name': ('django.db.models.fields.CharField', [], {'max_length': '30', 'blank': 'True'}),
            'groups': ('django.db.models.fields.related.ManyToManyField', [], {'to': u"orm['auth.Group']", 'symmetrical': 'False', 'blank': 'True'}),
            u'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'is_active': ('django.db.models.fields.BooleanField', [], {'default': 'True'}),
            'is_staff': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'is_superuser': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'last_login': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
            'last_name': ('django.db.models.fields.CharField', [], {'max_length': '30', 'blank': 'True'}),
            'password': ('django.db.models.fields.CharField', [], {'max_length': '128'}),
            'user_permissions': ('django.db.models.fields.related.ManyToManyField', [], {'to': u"orm['auth.Permission']", 'symmetrical': 'False', 'blank': 'True'}),
            'username': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '30'})
        },
        u'contenttypes.contenttype': {
            'Meta': {'ordering': "('name',)", 'unique_together': "(('app_label', 'model'),)", 'object_name': 'ContentType', 'db_table': "'django_content_type'"},
            'app_label': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            u'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'model': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '100'})
        },
        u'dialer_campaign.campaign': {
            'Meta': {'object_name': 'Campaign', 'db_table': "u'dialer_campaign'"},
            'agent_script': ('django.db.models.fields.TextField', [], {'null': 'True', 'blank': 'True'}),
            'aleg_gateway': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'A-Leg Gateway'", 'to': u"orm['dialer_gateway.Gateway']"}),
            'amd_behavior': ('django.db.models.fields.IntegerField', [], {'default': '1', 'null': 'True', 'blank': 'True'}),
            'caller_name': ('django.db.models.fields.CharField', [], {'max_length': '80', 'blank': 'True'}),
            'callerid': ('django.db.models.fields.CharField', [], {'max_length': '80', 'blank': 'True'}),
            'callmaxduration': ('django.db.models.fields.IntegerField', [], {'default': "'1800'", 'null': 'True', 'blank': 'True'}),
            'calltimeout': ('django.db.models.fields.IntegerField', [], {'default': "'45'", 'null': 'True', 'blank': 'True'}),
            'campaign_code': ('django.db.models.fields.CharField', [], {'default': "'VSOMS'", 'unique': 'True', 'max_length': '20', 'blank': 'True'}),
            'completed': ('django.db.models.fields.IntegerField', [], {'default': '0', 'null': 'True', 'blank': 'True'}),
            'completion_intervalretry': ('django.db.models.fields.IntegerField', [], {'default': "'900'", 'null': 'True', 'blank': 'True'}),
            'completion_maxretry': ('django.db.models.fields.IntegerField', [], {'default': "'0'", 'null': 'True', 'blank': 'True'}),
            'content_type': ('django.db.models.fields.related.ForeignKey', [], {'to': u"orm['contenttypes.ContentType']"}),
            'created_date': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'daily_start_time': ('django.db.models.fields.TimeField', [], {'default': "'00:00:00'"}),
            'daily_stop_time': ('django.db.models.fields.TimeField', [], {'default': "'23:59:59'"}),
            'description': ('django.db.models.fields.TextField', [], {'null': 'True', 'blank': 'True'}),
            'dnc': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'DNC'", 'null': 'True', 'to': u"orm['dnc.DNC']"}),
            'expirationdate': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime(2013, 7, 27, 0, 0)'}),
            'external_link': ('jsonfield.fields.JSONField', [], {'null': 'True', 'blank': 'True'}),
            'extra_data': ('django.db.models.fields.CharField', [], {'max_length': '120', 'blank': 'True'}),
            'frequency': ('django.db.models.fields.IntegerField', [], {'default': "'10'", 'null': 'True', 'blank': 'True'}),
            'friday': ('django.db.models.fields.BooleanField', [], {'default': 'True'}),
            'has_been_duplicated': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'has_been_started': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            u'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'imported_phonebook': ('django.db.models.fields.CharField', [], {'default': "''", 'max_length': '500', 'blank': 'True'}),
            'intervalretry': ('django.db.models.fields.IntegerField', [], {'default': "'300'", 'null': 'True', 'blank': 'True'}),
            'lead_disposition': ('django.db.models.fields.TextField', [], {'null': 'True', 'blank': 'True'}),
            'maxretry': ('django.db.models.fields.IntegerField', [], {'default': "'0'", 'null': 'True', 'blank': 'True'}),
            'monday': ('django.db.models.fields.BooleanField', [], {'default': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'object_id': ('django.db.models.fields.PositiveIntegerField', [], {}),
            'phonebook': ('django.db.models.fields.related.ManyToManyField', [], {'symmetrical': 'False', 'to': u"orm['dialer_contact.Phonebook']", 'null': 'True', 'blank': 'True'}),
            'saturday': ('django.db.models.fields.BooleanField', [], {'default': 'True'}),
            'startingdate': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime(2013, 7, 26, 0, 0)'}),
            'status': ('django.db.models.fields.IntegerField', [], {'default': '2', 'null': 'True', 'blank': 'True'}),
            'sunday': ('django.db.models.fields.BooleanField', [], {'default': 'True'}),
            'thursday': ('django.db.models.fields.BooleanField', [], {'default': 'True'}),
            'totalcontact': ('django.db.models.fields.IntegerField', [], {'default': '0', 'null': 'True', 'blank': 'True'}),
            'tuesday': ('django.db.models.fields.BooleanField', [], {'default': 'True'}),
            'updated_date': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'blank': 'True'}),
            'user': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'Campaign owner'", 'to': u"orm['auth.User']"}),
            'voicemail': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'voicemail_audiofile': ('django.db.models.fields.related.ForeignKey', [], {'to': u"orm['audiofield.AudioFile']", 'null': 'True', 'blank': 'True'}),
            'wednesday': ('django.db.models.fields.BooleanField', [], {'default': 'True'})
        },
        u'dialer_campaign.subscriber': {
            'Meta': {'unique_together': "(['contact', 'campaign'],)", 'object_name': 'Subscriber', 'db_table': "u'dialer_subscriber'"},
            'agent': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'agent'", 'null': 'True', 'to': u"orm['auth.User']"}),
            'campaign': ('django.db.models.fields.related.ForeignKey', [], {'to': u"orm['dialer_campaign.Campaign']", 'null': 'True', 'blank': 'True'}),
            'collected_data': ('django.db.models.fields.TextField', [], {'null': 'True', 'blank': 'True'}),
            'completion_count_attempt': ('django.db.models.fields.IntegerField', [], {'default': '0', 'null': 'True', 'blank': 'True'}),
            'contact': ('django.db.models.fields.related.ForeignKey', [], {'to': u"orm['dialer_contact.Contact']", 'null': 'True', 'blank': 'True'}),
            'count_attempt': ('django.db.models.fields.IntegerField', [], {'default': '0', 'null': 'True', 'blank': 'True'}),
            'created_date': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'disposition': ('django.db.models.fields.IntegerField', [], {'null': 'True', 'blank': 'True'}),
            'duplicate_contact': ('django.db.models.fields.CharField', [], {'max_length': '90'}),
            u'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'last_attempt': ('django.db.models.fields.DateTimeField', [], {'null': 'True', 'blank': 'True'}),
            'status': ('django.db.models.fields.IntegerField', [], {'default': '1', 'null': 'True', 'blank': 'True'}),
            'updated_date': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'db_index': 'True', 'blank': 'True'})
        },
        u'dialer_contact.contact': {
            'Meta': {'object_name': 'Contact', 'db_table': "u'dialer_contact'"},
            'additional_vars': ('jsonfield.fields.JSONField', [], {'null': 'True', 'blank': 'True'}),
            'address': ('django.db.models.fields.TextField', [], {'null': 'True', 'blank': 'True'}),
            'city': ('django.db.models.fields.CharField', [], {'max_length': '120', 'null': 'True', 'blank': 'True'}),
            'contact': ('django.db.models.fields.CharField', [], {'max_length': '90'}),
            'country': ('django_countries.fields.CountryField', [], {'max_length': '2', 'null': 'True', 'blank': 'True'}),
            'created_date': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'description': ('django.db.models.fields.TextField', [], {'null': 'True', 'blank': 'True'}),
            'email': ('django.db.models.fields.EmailField', [], {'max_length': '75', 'null': 'True', 'blank': 'True'}),
            'first_name': ('django.db.models.fields.CharField', [], {'max_length': '120', 'null': 'True', 'blank': 'True'}),
            u'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'last_name': ('django.db.models.fields.CharField', [], {'max_length': '120', 'null': 'True', 'blank': 'True'}),
            'phonebook': ('django.db.models.fields.related.ForeignKey', [], {'to': u"orm['dialer_contact.Phonebook']"}),
            'state': ('django.db.models.fields.CharField', [], {'max_length': '120', 'null': 'True', 'blank': 'True'}),
            'status': ('django.db.models.fields.IntegerField', [], {'default': '1', 'null': 'True', 'blank': 'True'}),
            'unit_number': ('django.db.models.fields.CharField', [], {'max_length': '50', 'null': 'True', 'blank': 'True'}),
            'updated_date': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'blank': 'True'})
        },
        u'dialer_contact.phonebook': {
            'Meta': {'object_name': 'Phonebook', 'db_table': "u'dialer_phonebook'"},
            'created_date': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'description': ('django.db.models.fields.TextField', [], {'null': 'True', 'blank': 'True'}),
            u'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '90'}),
            'updated_date': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'blank': 'True'}),
            'user': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'Phonebook owner'", 'to': u"orm['auth.User']"})
        },
        u'dialer_gateway.gateway': {
            'Meta': {'object_name': 'Gateway', 'db_table': "u'dialer_gateway'"},
            'addparameter': ('django.db.models.fields.CharField', [], {'max_length': '360', 'blank': 'True'}),
            'addprefix': ('django.db.models.fields.CharField', [], {'max_length': '60', 'blank': 'True'}),
            'count_call': ('django.db.models.fields.IntegerField', [], {'null': 'True', 'blank': 'True'}),
            'count_in_use': ('django.db.models.fields.IntegerField', [], {'null': 'True', 'blank': 'True'}),
            'created_date': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'description': ('django.db.models.fields.TextField', [], {'blank': 'True'}),
            'failover': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'Failover Gateway'", 'null': 'True', 'to': u"orm['dialer_gateway.Gateway']"}),
            'gateway_codecs': ('django.db.models.fields.CharField', [], {'max_length': '500', 'blank': 'True'}),
            'gateway_retries': ('django.db.models.fields.CharField', [], {'max_length': '500', 'blank': 'True'}),
            'gateway_timeouts': ('django.db.models.fields.CharField', [], {'max_length': '500', 'blank': 'True'}),
            'gateways': ('django.db.models.fields.CharField', [], {'max_length': '500'}),
            u'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'maximum_call': ('django.db.models.fields.IntegerField', [], {'null': 'True', 'blank': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '255'}),
            'originate_dial_string': ('django.db.models.fields.CharField', [], {'max_length': '500', 'blank': 'True'}),
            'removeprefix': ('django.db.models.fields.CharField', [], {'max_length': '60', 'blank': 'True'}),
            'secondused': ('django.db.models.fields.IntegerField', [], {'null': 'True', 'blank': 'True'}),
            'status': ('django.db.models.fields.IntegerField', [], {'default': '1', 'null': 'True', 'blank': 'True'}),
            'updated_date': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'blank': 'True'})
        },
        u'dnc.dnc': {
            'Meta': {'object_name': 'DNC', 'db_table': "'dnc_list'"},
            'created_date': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            u'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '50', 'null': 'True'}),
            'updated_date': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'blank': 'True'}),
            'user': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'DNC owner'", 'to': u"orm['auth.User']"})
        }
    }

    complete_apps = ['dialer_campaign']

########NEW FILE########
__FILENAME__ = 0006_auto__add_field_campaign_sms_gateway
# -*- coding: utf-8 -*-
import datetime
from south.db import db
from south.v2 import SchemaMigration
from django.db import models


class Migration(SchemaMigration):

    def forwards(self, orm):
        # Adding field 'Campaign.sms_gateway'
        db.add_column(u'dialer_campaign', 'sms_gateway',
                      self.gf('django.db.models.fields.related.ForeignKey')(blank=True, related_name='campaign_sms_gateway', null=True, to=orm['sms.Gateway']),
                      keep_default=False)

    def backwards(self, orm):
        # Deleting field 'Campaign.sms_gateway'
        db.delete_column(u'dialer_campaign', 'sms_gateway_id')

    models = {
        u'audiofield.audiofile': {
            'Meta': {'object_name': 'AudioFile', 'db_table': "u'audio_file'"},
            'audio_file': ('audiofield.fields.AudioField', [], {'ext_whitelist': "['.mp3', '.wav', '.ogg']", 'max_length': '100', 'blank': 'True'}),
            'created_date': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            u'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '150'}),
            'updated_date': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'blank': 'True'}),
            'user': ('django.db.models.fields.related.ForeignKey', [], {'to': u"orm['auth.User']"})
        },
        u'auth.group': {
            'Meta': {'object_name': 'Group'},
            u'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '80'}),
            'permissions': ('django.db.models.fields.related.ManyToManyField', [], {'to': u"orm['auth.Permission']", 'symmetrical': 'False', 'blank': 'True'})
        },
        u'auth.permission': {
            'Meta': {'ordering': "(u'content_type__app_label', u'content_type__model', u'codename')", 'unique_together': "((u'content_type', u'codename'),)", 'object_name': 'Permission'},
            'codename': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'content_type': ('django.db.models.fields.related.ForeignKey', [], {'to': u"orm['contenttypes.ContentType']"}),
            u'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '50'})
        },
        u'auth.user': {
            'Meta': {'object_name': 'User'},
            'date_joined': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
            'email': ('django.db.models.fields.EmailField', [], {'max_length': '75', 'blank': 'True'}),
            'first_name': ('django.db.models.fields.CharField', [], {'max_length': '30', 'blank': 'True'}),
            'groups': ('django.db.models.fields.related.ManyToManyField', [], {'symmetrical': 'False', 'related_name': "u'user_set'", 'blank': 'True', 'to': u"orm['auth.Group']"}),
            u'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'is_active': ('django.db.models.fields.BooleanField', [], {'default': 'True'}),
            'is_staff': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'is_superuser': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'last_login': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
            'last_name': ('django.db.models.fields.CharField', [], {'max_length': '30', 'blank': 'True'}),
            'password': ('django.db.models.fields.CharField', [], {'max_length': '128'}),
            'user_permissions': ('django.db.models.fields.related.ManyToManyField', [], {'symmetrical': 'False', 'related_name': "u'user_set'", 'blank': 'True', 'to': u"orm['auth.Permission']"}),
            'username': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '30'})
        },
        u'contenttypes.contenttype': {
            'Meta': {'ordering': "('name',)", 'unique_together': "(('app_label', 'model'),)", 'object_name': 'ContentType', 'db_table': "'django_content_type'"},
            'app_label': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            u'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'model': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '100'})
        },
        u'dialer_campaign.campaign': {
            'Meta': {'object_name': 'Campaign', 'db_table': "u'dialer_campaign'"},
            'agent_script': ('django.db.models.fields.TextField', [], {'null': 'True', 'blank': 'True'}),
            'aleg_gateway': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'A-Leg Gateway'", 'to': u"orm['dialer_gateway.Gateway']"}),
            'amd_behavior': ('django.db.models.fields.IntegerField', [], {'default': '1', 'null': 'True', 'blank': 'True'}),
            'caller_name': ('django.db.models.fields.CharField', [], {'max_length': '80', 'blank': 'True'}),
            'callerid': ('django.db.models.fields.CharField', [], {'max_length': '80', 'blank': 'True'}),
            'callmaxduration': ('django.db.models.fields.IntegerField', [], {'default': "'1800'", 'null': 'True', 'blank': 'True'}),
            'calltimeout': ('django.db.models.fields.IntegerField', [], {'default': "'45'", 'null': 'True', 'blank': 'True'}),
            'campaign_code': ('django.db.models.fields.CharField', [], {'default': "'PSUNN'", 'unique': 'True', 'max_length': '20', 'blank': 'True'}),
            'completed': ('django.db.models.fields.IntegerField', [], {'default': '0', 'null': 'True', 'blank': 'True'}),
            'completion_intervalretry': ('django.db.models.fields.IntegerField', [], {'default': "'900'", 'null': 'True', 'blank': 'True'}),
            'completion_maxretry': ('django.db.models.fields.IntegerField', [], {'default': "'0'", 'null': 'True', 'blank': 'True'}),
            'content_type': ('django.db.models.fields.related.ForeignKey', [], {'to': u"orm['contenttypes.ContentType']"}),
            'created_date': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'daily_start_time': ('django.db.models.fields.TimeField', [], {'default': "'00:00:00'"}),
            'daily_stop_time': ('django.db.models.fields.TimeField', [], {'default': "'23:59:59'"}),
            'description': ('django.db.models.fields.TextField', [], {'null': 'True', 'blank': 'True'}),
            'dnc': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'DNC'", 'null': 'True', 'to': u"orm['dnc.DNC']"}),
            'expirationdate': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime(2013, 12, 10, 0, 0)'}),
            'external_link': ('jsonfield.fields.JSONField', [], {'null': 'True', 'blank': 'True'}),
            'extra_data': ('django.db.models.fields.CharField', [], {'max_length': '120', 'blank': 'True'}),
            'frequency': ('django.db.models.fields.IntegerField', [], {'default': "'10'", 'null': 'True', 'blank': 'True'}),
            'friday': ('django.db.models.fields.BooleanField', [], {'default': 'True'}),
            'has_been_duplicated': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'has_been_started': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            u'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'imported_phonebook': ('django.db.models.fields.CharField', [], {'default': "''", 'max_length': '500', 'blank': 'True'}),
            'intervalretry': ('django.db.models.fields.IntegerField', [], {'default': "'300'", 'null': 'True', 'blank': 'True'}),
            'lead_disposition': ('django.db.models.fields.TextField', [], {'null': 'True', 'blank': 'True'}),
            'maxretry': ('django.db.models.fields.IntegerField', [], {'default': "'0'", 'null': 'True', 'blank': 'True'}),
            'monday': ('django.db.models.fields.BooleanField', [], {'default': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'object_id': ('django.db.models.fields.PositiveIntegerField', [], {}),
            'phonebook': ('django.db.models.fields.related.ManyToManyField', [], {'symmetrical': 'False', 'to': u"orm['dialer_contact.Phonebook']", 'null': 'True', 'blank': 'True'}),
            'saturday': ('django.db.models.fields.BooleanField', [], {'default': 'True'}),
            'sms_gateway': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'campaign_sms_gateway'", 'null': 'True', 'to': "orm['sms.Gateway']"}),
            'startingdate': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime(2013, 12, 9, 0, 0)'}),
            'status': ('django.db.models.fields.IntegerField', [], {'default': '2', 'null': 'True', 'blank': 'True'}),
            'sunday': ('django.db.models.fields.BooleanField', [], {'default': 'True'}),
            'thursday': ('django.db.models.fields.BooleanField', [], {'default': 'True'}),
            'totalcontact': ('django.db.models.fields.IntegerField', [], {'default': '0', 'null': 'True', 'blank': 'True'}),
            'tuesday': ('django.db.models.fields.BooleanField', [], {'default': 'True'}),
            'updated_date': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'blank': 'True'}),
            'user': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'Campaign owner'", 'to': u"orm['auth.User']"}),
            'voicemail': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'voicemail_audiofile': ('django.db.models.fields.related.ForeignKey', [], {'to': u"orm['audiofield.AudioFile']", 'null': 'True', 'blank': 'True'}),
            'wednesday': ('django.db.models.fields.BooleanField', [], {'default': 'True'})
        },
        u'dialer_campaign.subscriber': {
            'Meta': {'unique_together': "(['contact', 'campaign'],)", 'object_name': 'Subscriber', 'db_table': "u'dialer_subscriber'"},
            'agent': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'agent'", 'null': 'True', 'to': u"orm['auth.User']"}),
            'campaign': ('django.db.models.fields.related.ForeignKey', [], {'to': u"orm['dialer_campaign.Campaign']", 'null': 'True', 'blank': 'True'}),
            'collected_data': ('django.db.models.fields.TextField', [], {'null': 'True', 'blank': 'True'}),
            'completion_count_attempt': ('django.db.models.fields.IntegerField', [], {'default': '0', 'null': 'True', 'blank': 'True'}),
            'contact': ('django.db.models.fields.related.ForeignKey', [], {'to': u"orm['dialer_contact.Contact']", 'null': 'True', 'blank': 'True'}),
            'count_attempt': ('django.db.models.fields.IntegerField', [], {'default': '0', 'null': 'True', 'blank': 'True'}),
            'created_date': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'disposition': ('django.db.models.fields.IntegerField', [], {'null': 'True', 'blank': 'True'}),
            'duplicate_contact': ('django.db.models.fields.CharField', [], {'max_length': '90'}),
            u'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'last_attempt': ('django.db.models.fields.DateTimeField', [], {'null': 'True', 'blank': 'True'}),
            'status': ('django.db.models.fields.IntegerField', [], {'default': '1', 'null': 'True', 'blank': 'True'}),
            'updated_date': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'db_index': 'True', 'blank': 'True'})
        },
        u'dialer_contact.contact': {
            'Meta': {'object_name': 'Contact', 'db_table': "u'dialer_contact'"},
            'additional_vars': ('jsonfield.fields.JSONField', [], {'null': 'True', 'blank': 'True'}),
            'address': ('django.db.models.fields.CharField', [], {'max_length': '250', 'null': 'True', 'blank': 'True'}),
            'city': ('django.db.models.fields.CharField', [], {'max_length': '120', 'null': 'True', 'blank': 'True'}),
            'contact': ('django.db.models.fields.CharField', [], {'max_length': '90'}),
            'country': ('django_countries.fields.CountryField', [], {'max_length': '2', 'null': 'True', 'blank': 'True'}),
            'created_date': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'description': ('django.db.models.fields.TextField', [], {'null': 'True', 'blank': 'True'}),
            'email': ('django.db.models.fields.EmailField', [], {'max_length': '75', 'null': 'True', 'blank': 'True'}),
            'first_name': ('django.db.models.fields.CharField', [], {'max_length': '120', 'null': 'True', 'blank': 'True'}),
            u'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'last_name': ('django.db.models.fields.CharField', [], {'max_length': '120', 'null': 'True', 'blank': 'True'}),
            'phonebook': ('django.db.models.fields.related.ForeignKey', [], {'to': u"orm['dialer_contact.Phonebook']"}),
            'state': ('django.db.models.fields.CharField', [], {'max_length': '120', 'null': 'True', 'blank': 'True'}),
            'status': ('django.db.models.fields.IntegerField', [], {'default': '1', 'null': 'True', 'blank': 'True'}),
            'unit_number': ('django.db.models.fields.CharField', [], {'max_length': '50', 'null': 'True', 'blank': 'True'}),
            'updated_date': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'blank': 'True'})
        },
        u'dialer_contact.phonebook': {
            'Meta': {'object_name': 'Phonebook', 'db_table': "u'dialer_phonebook'"},
            'created_date': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'description': ('django.db.models.fields.TextField', [], {'null': 'True', 'blank': 'True'}),
            u'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '90'}),
            'updated_date': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'blank': 'True'}),
            'user': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'Phonebook owner'", 'to': u"orm['auth.User']"})
        },
        u'dialer_gateway.gateway': {
            'Meta': {'object_name': 'Gateway', 'db_table': "u'dialer_gateway'"},
            'addparameter': ('django.db.models.fields.CharField', [], {'max_length': '360', 'blank': 'True'}),
            'addprefix': ('django.db.models.fields.CharField', [], {'max_length': '60', 'blank': 'True'}),
            'count_call': ('django.db.models.fields.IntegerField', [], {'null': 'True', 'blank': 'True'}),
            'count_in_use': ('django.db.models.fields.IntegerField', [], {'null': 'True', 'blank': 'True'}),
            'created_date': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'description': ('django.db.models.fields.TextField', [], {'blank': 'True'}),
            'failover': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'Failover Gateway'", 'null': 'True', 'to': u"orm['dialer_gateway.Gateway']"}),
            'gateway_codecs': ('django.db.models.fields.CharField', [], {'max_length': '500', 'blank': 'True'}),
            'gateway_retries': ('django.db.models.fields.CharField', [], {'max_length': '500', 'blank': 'True'}),
            'gateway_timeouts': ('django.db.models.fields.CharField', [], {'max_length': '500', 'blank': 'True'}),
            'gateways': ('django.db.models.fields.CharField', [], {'max_length': '500'}),
            u'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'maximum_call': ('django.db.models.fields.IntegerField', [], {'null': 'True', 'blank': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '255'}),
            'originate_dial_string': ('django.db.models.fields.CharField', [], {'max_length': '500', 'blank': 'True'}),
            'removeprefix': ('django.db.models.fields.CharField', [], {'max_length': '60', 'blank': 'True'}),
            'secondused': ('django.db.models.fields.IntegerField', [], {'null': 'True', 'blank': 'True'}),
            'status': ('django.db.models.fields.IntegerField', [], {'default': '1', 'null': 'True', 'blank': 'True'}),
            'updated_date': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'blank': 'True'})
        },
        u'dnc.dnc': {
            'Meta': {'object_name': 'DNC', 'db_table': "'dnc_list'"},
            'created_date': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            u'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '50', 'null': 'True'}),
            'updated_date': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'blank': 'True'}),
            'user': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'DNC owner'", 'to': u"orm['auth.User']"})
        },
        'sms.gateway': {
            'Meta': {'object_name': 'Gateway'},
            'base_url': ('django.db.models.fields.URLField', [], {'max_length': '200'}),
            'charge_keyword': ('django.db.models.fields.CharField', [], {'max_length': '128', 'null': 'True', 'blank': 'True'}),
            'content_keyword': ('django.db.models.fields.CharField', [], {'max_length': '128'}),
            u'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '128'}),
            'recipient_keyword': ('django.db.models.fields.CharField', [], {'max_length': '128'}),
            'reply_content': ('django.db.models.fields.CharField', [], {'max_length': '128', 'null': 'True', 'blank': 'True'}),
            'reply_date': ('django.db.models.fields.CharField', [], {'max_length': '128', 'null': 'True', 'blank': 'True'}),
            'reply_date_format': ('django.db.models.fields.CharField', [], {'default': "'%Y-%m-%d %H:%M:%S'", 'max_length': '128', 'null': 'True', 'blank': 'True'}),
            'reply_sender': ('django.db.models.fields.CharField', [], {'max_length': '128', 'null': 'True', 'blank': 'True'}),
            'settings': ('jsonfield.fields.JSONField', [], {'null': 'True', 'blank': 'True'}),
            'status_date': ('django.db.models.fields.CharField', [], {'max_length': '128', 'null': 'True', 'blank': 'True'}),
            'status_date_format': ('django.db.models.fields.CharField', [], {'max_length': '128', 'null': 'True', 'blank': 'True'}),
            'status_error_code': ('django.db.models.fields.CharField', [], {'max_length': '128', 'null': 'True', 'blank': 'True'}),
            'status_mapping': ('jsonfield.fields.JSONField', [], {'null': 'True', 'blank': 'True'}),
            'status_msg_id': ('django.db.models.fields.CharField', [], {'max_length': '128', 'null': 'True', 'blank': 'True'}),
            'status_status': ('django.db.models.fields.CharField', [], {'max_length': '128', 'null': 'True', 'blank': 'True'}),
            'success_format': ('django.db.models.fields.CharField', [], {'max_length': '256', 'null': 'True', 'blank': 'True'}),
            'uuid_keyword': ('django.db.models.fields.CharField', [], {'max_length': '128', 'null': 'True', 'blank': 'True'})
        }
    }

    complete_apps = ['dialer_campaign']

########NEW FILE########
__FILENAME__ = models
#
# Newfies-Dialer License
# http://www.newfies-dialer.org
#
# This Source Code Form is subject to the terms of the Mozilla Public
# License, v. 2.0. If a copy of the MPL was not distributed with this file,
# You can obtain one at http://mozilla.org/MPL/2.0/.
#
# Copyright (C) 2011-2014 Star2Billing S.L.
#
# The Initial Developer of the Original Code is
# Arezqui Belaid <info@star2billing.com>
#

from django.db import models
from django.utils.translation import ugettext_lazy as _
from django.utils.translation import ugettext
from django.core.urlresolvers import reverse
from django.core.cache import cache
from django.db.models.signals import post_save
from django.contrib.contenttypes.models import ContentType
from django.contrib.contenttypes import generic
from django.db import transaction

from django_lets_go.intermediate_model_base_class import Model
from django_lets_go.common_functions import get_unique_code, percentage
from audiofield.models import AudioFile
from datetime import datetime
from django.utils.timezone import utc
from dateutil.relativedelta import relativedelta
import jsonfield
import logging
import re

from .constants import SUBSCRIBER_STATUS, CAMPAIGN_STATUS, AMD_BEHAVIOR
from dialer_contact.constants import CONTACT_STATUS
from dialer_contact.models import Phonebook, Contact
from dialer_gateway.models import Gateway
from user_profile.models import UserProfile
from sms.models import Gateway as SMS_Gateway
from dnc.models import DNC
#from agent.models import Agent

logger = logging.getLogger('newfies.filelog')


class CampaignManager(models.Manager):
    """Campaign Manager"""

    def get_running_campaign(self):
        """Return all the active campaigns which will be running based on
        the expiry date, the daily start/stop time and days of the week"""
        kwargs = {}
        kwargs['status'] = CAMPAIGN_STATUS.START
        tday = datetime.utcnow().replace(tzinfo=utc)
        kwargs['startingdate__lte'] = datetime(
            tday.year, tday.month, tday.day,
            tday.hour, tday.minute, tday.second, tday.microsecond).replace(tzinfo=utc)
        kwargs['expirationdate__gte'] = datetime(
            tday.year, tday.month, tday.day,
            tday.hour, tday.minute, tday.second, tday.microsecond).replace(tzinfo=utc)

        s_time = "%s:%s:%s" % (str(tday.hour), str(tday.minute), str(tday.second))
        kwargs['daily_start_time__lte'] = datetime.strptime(s_time, '%H:%M:%S')
        kwargs['daily_stop_time__gte'] = datetime.strptime(s_time, '%H:%M:%S')

        # weekday status 1 - YES
        # self.model._meta.get_field(tday.strftime("%A").lower()).value()
        kwargs[tday.strftime("%A").lower()] = 1

        return Campaign.objects.filter(**kwargs)

    def get_expired_campaign(self):
        """
        Return all the campaigns which are expired or going to expire
        based on the expiry date but status is not 'END'
        """
        kwargs = {}
        kwargs['expirationdate__lte'] = datetime.utcnow().replace(tzinfo=utc)
        return Campaign.objects.filter(**kwargs).exclude(status=CAMPAIGN_STATUS.END)


def common_contact_authorization(dialersetting, str_contact):
    """
    Common Function to check contact no is authorized or not.
    For this we will check the dialer settings : whitelist and blacklist
    """
    whitelist = dialersetting.whitelist
    blacklist = dialersetting.blacklist

    if whitelist == '*':
        whitelist = ''
    if blacklist == '*':
        blacklist = ''

    if whitelist and len(whitelist) > 0:
        try:
            if re.search(whitelist, str_contact):
                return True
        except ValueError:
            logger.error('Error to identify the whitelist')

    if blacklist and len(blacklist) > 0:
        try:
            if re.search(blacklist, str_contact):
                return False
        except ValueError:
            logger.error('Error to identify the blacklist')

    return True


class Campaign(Model):
    """This defines the Campaign

    **Attributes**:

        * ``campaign_code`` - Auto-generated campaign code to identify the campaign
        * ``name`` - Campaign name
        * ``description`` - Description about the Campaign
        * ``status`` - Campaign status
        * ``callerid`` - Caller ID
        * ``startingdate`` - Starting date of the Campaign
        * ``expirationdate`` - Expiry date of the Campaign
        * ``daily_start_time`` - Start time
        * ``daily_stop_time`` - End time
        * ``week_day_setting`` (monday, tuesday, wednesday, thursday, friday, \
        saturday, sunday)
        * ``frequency`` - Frequency, speed of the campaign. number of calls/min
        * ``callmaxduration`` - Max retry allowed per user
        * ``maxretry`` - Max retry allowed per user
        * ``intervalretry`` - Time to wait between retries in seconds
        * ``completion_maxretry`` - Number of retries until a contact completes survey
        * ``completion_intervalretry`` - Time delay in seconds before retrying contact \
            to complete survey
        * ``calltimeout`` - Number of seconds to timeout on calls
        * ``aleg_gateway`` - Gateway to use to reach the contact
        * ``extra_data`` - Additional data to pass to the application
        * ``totalcontact`` - Total Contact for this campaign
        * ``completed`` - Total Contact that completed Call / Survey
        * ``has_been_started`` - campaign started flag
        * ``has_been_duplicated`` - campaign duplicated flag
        * ``voicemail`` - Enable Voicemail Detection
        * ``amd_behavior`` - Detection Behaviour
        * ``sms_gateway`` - Gateway to transport the SMS

    **Relationships**:

        * ``content_type`` - Defines the application (``survey``) \
        to use when the call is established on the A-Leg

        * ``object_id`` - Defines the object of content_type application

        * ``content_object`` - Used to define the Voice App or the Survey with generic ForeignKey

        * ``phonebook`` - Many-To-Many relationship to the Phonebook model.

        * ``user`` - Foreign key relationship to the a User model. \
        Each campaign assigned to a User

        * ``voicemail_audiofile`` - Foreign key relationship to the a AudioFile model.

        * ``dnc`` - Foreign key relationship to the a DNC model.

    **Name of DB table**: dialer_campaign
    """
    campaign_code = models.CharField(
        unique=True, max_length=20, blank=True, verbose_name=_("campaign code"),
        help_text=_('this code is auto-generated by the platform, this is used to identify the campaign'),
        default=(lambda: get_unique_code(length=5)))
    name = models.CharField(max_length=100, verbose_name=_('name'))
    description = models.TextField(verbose_name=_('description'), blank=True,
                                   null=True, help_text=_("campaign description"))
    user = models.ForeignKey('auth.User', related_name='Campaign owner')
    status = models.IntegerField(choices=list(CAMPAIGN_STATUS), default=CAMPAIGN_STATUS.PAUSE,
                                 verbose_name=_("status"), blank=True, null=True)
    callerid = models.CharField(max_length=80, blank=True, verbose_name=_("Caller ID Number"),
                                help_text=_("outbound Caller ID"))
    caller_name = models.CharField(max_length=80, blank=True, verbose_name=_("Caller Name"),
                                   help_text=_("outbound Caller Name"))
    #General Starting & Stopping date
    startingdate = models.DateTimeField(default=(lambda: datetime.utcnow().replace(tzinfo=utc)),
                                        verbose_name=_('start'))
    expirationdate = models.DateTimeField(
        default=(lambda: datetime.utcnow().replace(tzinfo=utc) + relativedelta(days=+1)),
        verbose_name=_('finish'))
    #Per Day Starting & Stopping Time
    daily_start_time = models.TimeField(default='00:00:00', verbose_name=_('daily start time'))
    daily_stop_time = models.TimeField(default='23:59:59', verbose_name=_('daily stop time'))
    monday = models.BooleanField(default=True, verbose_name=_('monday'))
    tuesday = models.BooleanField(default=True, verbose_name=_('tuesday'))
    wednesday = models.BooleanField(default=True, verbose_name=_('wednesday'))
    thursday = models.BooleanField(default=True, verbose_name=_('thursday'))
    friday = models.BooleanField(default=True, verbose_name=_('friday'))
    saturday = models.BooleanField(default=True, verbose_name=_('saturday'))
    sunday = models.BooleanField(default=True, verbose_name=_('sunday'))
    #Campaign Settings
    frequency = models.IntegerField(default='10', blank=True, null=True, verbose_name=_('frequency'),
                                    help_text=_("calls per minute"))
    callmaxduration = models.IntegerField(default='1800', blank=True, null=True, verbose_name=_('max call duration'),
                                          help_text=_("maximum call duration in seconds"))
    #max retry on failure - Note that the answered call not completed are counted
    maxretry = models.IntegerField(default='0', blank=True, null=True, verbose_name=_('max retries'),
                                   help_text=_("maximum retries per contact"))
    intervalretry = models.IntegerField(default='300', blank=True, null=True, verbose_name=_('time between retries'),
                                        help_text=_("time delay in seconds before retrying contact"))
    completion_maxretry = models.IntegerField(default='0', blank=True, null=True,
                                              verbose_name=_('completion max retries'),
                                              help_text=_("number of retries until a contact completes survey"))
    completion_intervalretry = models.IntegerField(
        default='900', blank=True, null=True,
        verbose_name=_('completion time between retries'),
        help_text=_("time delay in seconds before retrying contact to complete survey"))
    calltimeout = models.IntegerField(default='45', blank=True, null=True, verbose_name=_('timeout on call'),
                                      help_text=_("connection timeout in seconds"))
    aleg_gateway = models.ForeignKey(Gateway, verbose_name=_("A-Leg gateway"), related_name="A-Leg Gateway",
                                     help_text=_("select outbound gateway"))
    sms_gateway = models.ForeignKey(SMS_Gateway, verbose_name=_("sms gateway"), null=True, blank=True,
                                    related_name="campaign_sms_gateway", help_text=_("select SMS gateway"))
    content_type = models.ForeignKey(ContentType, verbose_name=_("type"),
                                     limit_choices_to={"model__in": ["survey_template", "survey"]})
    object_id = models.PositiveIntegerField(verbose_name=_("application"))
    content_object = generic.GenericForeignKey('content_type', 'object_id')
    extra_data = models.CharField(max_length=120, blank=True, verbose_name=_("extra parameters"),
                                  help_text=_("additional application parameters."))
    phonebook = models.ManyToManyField(Phonebook, blank=True, null=True)
    imported_phonebook = models.CharField(max_length=500, default='', blank=True, verbose_name=_('imported phonebook'))
    totalcontact = models.IntegerField(default=0, blank=True, null=True, verbose_name=_('total contact'),
                                       help_text=_("total contact for this campaign"))
    completed = models.IntegerField(default=0, blank=True, null=True, verbose_name=_('completed'),
                                    help_text=_("total contact that completed call / survey"))
    #Flags
    has_been_started = models.BooleanField(default=False, verbose_name=_('has been started'))
    has_been_duplicated = models.BooleanField(default=False, verbose_name=_('has been duplicated'))
    dnc = models.ForeignKey(DNC, null=True, blank=True, verbose_name=_("DNC"),
                            help_text=_("do not call list"), related_name='DNC')
    #Voicemail Detection
    voicemail = models.BooleanField(default=False, verbose_name=_('voicemail detection'))
    amd_behavior = models.IntegerField(choices=list(AMD_BEHAVIOR), blank=True, null=True,
                                       default=AMD_BEHAVIOR.ALWAYS, verbose_name=_("detection behaviour"))
    voicemail_audiofile = models.ForeignKey(AudioFile, null=True, blank=True,
                                            verbose_name=_("voicemail audio file"))
    #Callcenter
    agent_script = models.TextField(verbose_name=_('agent script'), blank=True, null=True)
    lead_disposition = models.TextField(verbose_name=_('lead disposition'), blank=True, null=True)
    external_link = jsonfield.JSONField(null=True, blank=True, verbose_name=_('additional parameters (JSON)'),
        help_text=_("enter the list of parameters in Json format, e.g. {\"title\": [\"tab-1\", \"tab-2\"], \"url\": [\"https://duckduckgo.com/\", \"http://www.newfies-dialer.org/\"]}"))

    created_date = models.DateTimeField(auto_now_add=True, verbose_name=_('date'))
    updated_date = models.DateTimeField(auto_now=True)

    objects = CampaignManager()

    def __unicode__(self):
        return u"%s" % (self.name)

    class Meta:
        permissions = (
            ("view_campaign", _('can see campaign')),
            ("view_dashboard", _('can see campaign dashboard'))
        )
        db_table = u'dialer_campaign'
        verbose_name = _("campaign")
        verbose_name_plural = _("campaigns")

    def update_campaign_status(self):
        """Update the campaign's status

        For example,
        If campaign is active, you can change status to 'Pause' or 'Stop'
        """
        if self.status == CAMPAIGN_STATUS.START:
            return "<a href='%s'>Pause</a> | <a href='%s'>Abort</a> | <a href='%s'>Stop</a>" % \
                (reverse('dialer_campaign.views.update_campaign_status_admin',
                         args=[self.pk, CAMPAIGN_STATUS.PAUSE]),
                 reverse('dialer_campaign.views.update_campaign_status_admin',
                         args=[self.pk, CAMPAIGN_STATUS.ABORT]),
                 reverse('dialer_campaign.views.update_campaign_status_admin',
                         args=[self.pk, CAMPAIGN_STATUS.END]))

        if self.status == CAMPAIGN_STATUS.PAUSE:
            return "<a href='%s'>Start</a> | <a href='%s'>Abort</a> | <a href='%s'>Stop</a>" % \
                (reverse('dialer_campaign.views.update_campaign_status_admin',
                         args=[self.pk, CAMPAIGN_STATUS.START]),
                 reverse('dialer_campaign.views.update_campaign_status_admin',
                         args=[self.pk, CAMPAIGN_STATUS.ABORT]),
                 reverse('dialer_campaign.views.update_campaign_status_admin',
                         args=[self.pk, CAMPAIGN_STATUS.END]))

        if self.status == CAMPAIGN_STATUS.ABORT:
            return "<a href='%s'>Start</a> | <a href='%s'>Pause</a> | <a href='%s'>Stop</a>" % \
                (reverse('dialer_campaign.views.update_campaign_status_admin',
                         args=[self.pk, CAMPAIGN_STATUS.START]),
                 reverse('dialer_campaign.views.update_campaign_status_admin',
                         args=[self.pk, CAMPAIGN_STATUS.PAUSE]),
                 reverse('dialer_campaign.views.update_campaign_status_admin',
                         args=[self.pk, CAMPAIGN_STATUS.END]))

        if self.status == CAMPAIGN_STATUS.END:
            return "<a href='%s'>Start</a> | <a href='%s'>Pause</a> | <a href='%s'>Abort</a>" % \
                (reverse('dialer_campaign.views.update_campaign_status_admin',
                         args=[self.pk, CAMPAIGN_STATUS.START]),
                 reverse('dialer_campaign.views.update_campaign_status_admin',
                         args=[self.pk, CAMPAIGN_STATUS.PAUSE]),
                 reverse('dialer_campaign.views.update_campaign_status_admin',
                         args=[self.pk, CAMPAIGN_STATUS.ABORT]))
    update_campaign_status.allow_tags = True
    update_campaign_status.short_description = _('action')

    def is_authorized_contact(self, dialersetting, str_contact):
        """Check if a contact is authorized"""
        return common_contact_authorization(dialersetting, str_contact)

    def get_campaign_type(self):
        """Get campaign type"""
        if self.content_type.model == 'survey':
            return ugettext('survey')
        return ugettext('voice app')

    def get_active_max_frequency(self):
        """Get the active max frequency"""
        try:
            obj_userprofile = UserProfile.objects.get(user=self.user)
        except UserProfile.DoesNotExist:
            return self.frequency

        max_frequency = obj_userprofile.dialersetting.max_frequency
        if max_frequency < self.frequency:
            return max_frequency

        return self.frequency

    def get_active_callmaxduration(self):
        """Get the active call max duration"""
        try:
            obj_userprofile = UserProfile.objects.get(user=self.user)
        except UserProfile.DoesNotExist:
            return self.frequency

        callmaxduration = obj_userprofile.dialersetting.callmaxduration
        if callmaxduration < self.callmaxduration:
            return callmaxduration

        return self.callmaxduration

    def get_active_contact(self):
        """Get all the active Contacts from the phonebook"""
        list_contact = Contact.objects.filter(phonebook__campaign=self.id,
                                              status=CONTACT_STATUS.ACTIVE).all()
        if not list_contact:
            return False
        return list_contact

    def progress_bar(self):
        """Progress bar generated based on no of contacts"""
        # Cache subscriber_count
        count_contact = Contact.objects.filter(phonebook__campaign=self.id).count()

        # Cache need to be set per campaign
        # subscriber_count_key_campaign_id_1
        subscriber_count = cache.get('subscriber_count_key_campaign_id_' + str(self.id))

        if subscriber_count is None:
            list_contact = Contact.objects.values_list('id', flat=True)\
                .filter(phonebook__campaign=self.id)

            subscriber_count = 0
            try:
                subscriber_count += Subscriber.objects\
                    .filter(contact__in=list_contact,
                            campaign=self.id,
                            status=SUBSCRIBER_STATUS.SENT)\
                    .count()
            except:
                pass

            cache.set("subscriber_count_key_campaign_id_%s" % str(self.id), subscriber_count, 5)

        subscriber_count = int(subscriber_count)
        count_contact = int(count_contact)

        if count_contact > 0:
            percentage_pixel = int(percentage(subscriber_count, count_contact))
        else:
            percentage_pixel = 0
        subscriber_count_string = "subscribers (" + str(subscriber_count) + ")"
        return "<div title='%s' style='width: 100px; border: 1px solid #ccc;'><div style='height: 4px; width: %dpx; background: #555; '></div></div>" % \
            (subscriber_count_string, percentage_pixel)
    progress_bar.allow_tags = True
    progress_bar.short_description = _('progress')

    def subscriber_detail(self):
        """This will link to subscribers who are associated with
        the campaign"""
        model_name = Subscriber._meta.object_name.lower()
        app_label = self._meta.app_label
        link = '/admin/%s/%s/' % (app_label, model_name)
        link += '?campaign__id=%d' % self.id
        display_link = _("<a href='%(link)s'>%(name)s</a>") % {'link': link, 'name': _('details')}
        return display_link
    subscriber_detail.allow_tags = True
    subscriber_detail.short_description = _('subscriber')

    # OPTIMIZATION - GOOD
    @transaction.atomic
    def get_pending_subscriber_update(self, limit, status):
        """Get all the pending subscribers from the campaign"""
        #TODO: Improve this part with a PL/SQL

        #We cannot use select_related here as it's not compliant with locking the rows
        list_subscriber = Subscriber.objects.select_for_update()\
            .filter(campaign=self.id, status=SUBSCRIBER_STATUS.PENDING)\
            .all()[:limit]
        if not list_subscriber:
            return (False, 0)
        id_list_sb = []
        count = 0
        for elem_subscriber in list_subscriber:
            count = count + 1
            id_list_sb.append(elem_subscriber.id)
        #Update in bulk
        Subscriber.objects.filter(id__in=id_list_sb).update(status=status)
        return (list_subscriber, count)


class Subscriber(Model):
    """This defines the Contact imported to a Campaign

    **Attributes**:

        * ``last_attempt`` - last call attempt date
        * ``count_attempt`` - Count the amount of call attempt
        * ``completion_count_attempt`` - Count the amount of attempt to call in order to achieve completion
        * ``duplicate_contact`` - copy of the contact phonenumber
        * ``status`` - subscriber status

    **Relationships**:

        * ``contact`` - Foreign key relationship to the Contact model.
        * ``campaign`` - Foreign key relationship to the Campaign model.

    **Name of DB table**: dialer_subscriber
    """
    contact = models.ForeignKey(Contact, null=True, blank=True, help_text=_("select contact"))
    campaign = models.ForeignKey(Campaign, null=True, blank=True, help_text=_("select campaign"))
    last_attempt = models.DateTimeField(null=True, blank=True, verbose_name=_("last attempt"))
    count_attempt = models.IntegerField(default=0, null=True, blank=True, verbose_name=_("count attempts"))
    #Count the amount of attempt to call in order to achieve completion
    completion_count_attempt = models.IntegerField(default=0, null=True, blank=True,
                                                   verbose_name=_("completion count attempts"))
    #We duplicate contact to create a unique constraint
    duplicate_contact = models.CharField(max_length=90, verbose_name=_("contact"))
    status = models.IntegerField(choices=list(SUBSCRIBER_STATUS), default=SUBSCRIBER_STATUS.PENDING,
                                 verbose_name=_("status"), blank=True, null=True)
    disposition = models.IntegerField(verbose_name=_("disposition"), blank=True, null=True)
    collected_data = models.TextField(verbose_name=_('subscriber response'), blank=True, null=True,
                                      help_text=_("collect user call data"))
    #agent = models.ForeignKey(Agent, verbose_name=_("agent"),
    #                          blank=True, null=True,
    #                          related_name="agent")

    created_date = models.DateTimeField(auto_now_add=True, verbose_name=_('date'))
    updated_date = models.DateTimeField(auto_now=True, db_index=True)

    class Meta:
        permissions = (
            ("view_subscriber", _('can see subscriber')),
        )
        db_table = u'dialer_subscriber'
        verbose_name = _("subscriber")
        verbose_name_plural = _("subscribers")
        unique_together = ['contact', 'campaign']

    def __unicode__(self):
        return u"%s" % str(self.id)

    def contact_name(self):
        if hasattr(self.contact, 'first_name'):
            return self.contact.first_name
        elif self.contact:
            return self.contact.contact
        else:
            return ''

    def get_completion_attempts(self):
        return self.completion_count_attempt
    get_completion_attempts.allow_tags = True
    get_completion_attempts.short_description = _('completion attempts')

    def get_attempts(self):
        return self.count_attempt
    get_attempts.allow_tags = True
    get_attempts.short_description = _('attempts')

    # static method to perform a stored procedure
    # Ref link - http://www.chrisumbel.com/article/django_python_stored_procedures.aspx
    """
    @staticmethod
    def importcontact_pl_sql(campaign_id, phonebook_id):
        # create a cursor
        from django.db import connection
        cur = connection.cursor()

        # execute the stored procedure passing in
        # campaign_id, phonebook_id as a parameter
        cur.callproc('importcontact_pl_sql', [campaign_id, phonebook_id])

        cur.close()
        return True
    """


#Note : This will cause the running campaign to add the new contacts to the subscribers list
def post_save_add_contact(sender, **kwargs):
    """A ``post_save`` signal is sent by the Contact model instance whenever
    it is going to save.

    **Logic Description**:

        * When new contact is added into ``Contact`` model, active the
          campaign list will be checked with the contact status.
        * If the active campaign list count is more than one & the contact
          is active, the contact will be added into ``Subscriber``
          model.
    """
    obj = kwargs['instance']
    active_campaign_list = Campaign.objects.filter(phonebook__contact__id=obj.id,
                                                   status=CAMPAIGN_STATUS.START)
    # created instance = True + active contact + active_campaign
    if kwargs['created'] and obj.status == CONTACT_STATUS.ACTIVE \
            and active_campaign_list.count() >= 1:
        for elem_campaign in active_campaign_list:
            try:
                Subscriber.objects.create(
                    contact=obj,
                    duplicate_contact=obj.contact,
                    status=SUBSCRIBER_STATUS.PENDING,
                    campaign=elem_campaign)
            except:
                pass

post_save.connect(post_save_add_contact, sender=Contact)


# def post_update_campaign_status(sender, **kwargs):
#     """A ``post_save`` signal is sent by the Campaign model instance whenever
#     it is going to save.

#     If Campaign Status is start, perform collect_subscriber task
#     """
#     obj = kwargs['instance']
#     #Start tasks to import subscriber
#     if int(obj.status) == CAMPAIGN_STATUS.START:
#         from dialer_campaign.tasks import collect_subscriber
#         collect_subscriber.delay(obj.id)

# post_save.connect(post_update_campaign_status, sender=Campaign)

########NEW FILE########
__FILENAME__ = tasks
#
# Newfies-Dialer License
# http://www.newfies-dialer.org
#
# This Source Code Form is subject to the terms of the Mozilla Public
# License, v. 2.0. If a copy of the MPL was not distributed with this file,
# You can obtain one at http://mozilla.org/MPL/2.0/.
#
# Copyright (C) 2011-2014 Star2Billing S.L.
#
# The Initial Developer of the Original Code is
# Arezqui Belaid <info@star2billing.com>
#

from django.core.exceptions import ObjectDoesNotExist
from django.conf import settings
from celery.task import PeriodicTask
from celery.task import Task
from celery.utils.log import get_task_logger
from dialer_campaign.models import Campaign
from dialer_campaign.constants import SUBSCRIBER_STATUS, CAMPAIGN_STATUS
from dialer_cdr.constants import CALLREQUEST_STATUS, CALLREQUEST_TYPE
from dialer_cdr.models import Callrequest
from dialer_cdr.tasks import init_callrequest
from dialer_contact.tasks import collect_subscriber
from dnc.models import DNCContact
from django_lets_go.only_one_task import only_one
from datetime import datetime, timedelta
from django.utils.timezone import utc
from math import floor
from common_functions import debug_query
# from celery.task.http import HttpDispatchTask
# from common_functions import isint

LOCK_EXPIRE = 60 * 10 * 1  # Lock expires in 10 minutes
if settings.HEARTBEAT_MIN < 1 or settings.HEARTBEAT_MIN > 10:
    settings.HEARTBEAT_MIN = 1

if settings.DELAY_OUTBOUND < 0 or settings.DELAY_OUTBOUND > 1000:
    settings.DELAY_OUTBOUND = 0

logger = get_task_logger(__name__)


# OPTIMIZATION - FINE
class campaign_spool_contact(PeriodicTask):
    """A periodic task that checks the the running campaign
    for each running campaign it will check if it's necessary to import
    the contact from the phonebook to the subscriber list

    **Usage**:

        campaign_spool_contact.delay()
    """
    # The campaign have to run every minutes in order to control the number
    # of calls per minute. Cons : new calls might delay 60seconds
    run_every = timedelta(seconds=60)

    def run(self, **kwargs):
        logger.info("TASK :: campaign_spool_contact")

        for campaign in Campaign.objects.get_running_campaign():
            logger.debug("=> Spool Contact : Campaign name %s (id:%s)" % (campaign.name, str(campaign.id)))
            # Start collecting the contacts for this campaign
            collect_subscriber.delay(campaign.id)


# OPTIMIZATION - FINE
class pending_call_processing(Task):
    @only_one(ikey="check_pendingcall", timeout=LOCK_EXPIRE)
    def run(self, campaign_id):
        """
        This task retrieves the next outbound call to be made for a given
        campaign, and will create a new callrequest and schedule a task to
        process those calls

        **Attributes**:

            * ``campaign_id`` - Campaign ID
        """
        logger = self.get_logger()
        logger.info("TASK :: pending_call_processing = %d" % campaign_id)

        debug_query(0)

        try:
            obj_campaign = Campaign.objects\
                .select_related('user__userprofile__dialersetting', 'aleg_gateway', 'content_type')\
                .get(id=campaign_id)
        except:
            logger.error("Can't find this campaign")
            return False

        # TODO : Control the Speed
        # if there is many task pending we should slow down
        frequency = obj_campaign.frequency  # default 10 calls per minutes

        debug_query(1)

        #TODO: move this logic of setting call_type after CallRequest post_save
        # Default call_type
        call_type = CALLREQUEST_TYPE.ALLOW_RETRY
        # Check campaign's maxretry
        if obj_campaign.maxretry == 0:
            call_type = CALLREQUEST_TYPE.CANNOT_RETRY

        # Check user's dialer setting maxretry
        try:
            obj_campaign.user.userprofile.dialersetting
            if obj_campaign.user.userprofile.dialersetting.maxretry == 0:
                call_type = CALLREQUEST_TYPE.CANNOT_RETRY
        except ObjectDoesNotExist:
            logger.error("Can't find user's dialersetting")
            return False

        debug_query(2)

        # Speed
        # Check if the other tasks send for this campaign finished to be ran

        # Get the subscriber of this campaign
        # get_pending_subscriber get Max 1000 records
        if settings.HEARTBEAT_MIN == 1:  # 1 task per minute
            callfrequency = frequency  # task run only once per minute, so we can assign frequency
        else:
            callfrequency = int(frequency / settings.HEARTBEAT_MIN) + 1  # 1000 per minutes
            #callfrequency = int(frequency) + 1  # 1000 per minutes

        (list_subscriber, no_subscriber) = obj_campaign\
            .get_pending_subscriber_update(callfrequency, SUBSCRIBER_STATUS.IN_PROCESS)
        logger.info("##subscriber=%d campaign_id=%d callfreq=%d freq=%d" %
                    (no_subscriber, campaign_id, callfrequency, frequency))
        debug_query(3)

        if no_subscriber == 0:
            return False

        # Set time to wait for balanced dispatching of calls
        time_to_wait = (60.0 / settings.HEARTBEAT_MIN) / no_subscriber
        count = 0
        loopnow = datetime.utcnow()
        loopnow + timedelta(seconds=1.55)

        for elem_camp_subscriber in list_subscriber:
            # Loop on Subscriber and start the initcall's task
            count = count + 1
            second_towait = floor(count * time_to_wait)
            # ms_addtowait now used anymore, replaced by async eta
            ms_addtowait = (count * time_to_wait) - second_towait

            eta_delta = loopnow + timedelta(seconds=(count * time_to_wait))
            # as we use eta_delta ms_addtowait is set to 0
            ms_addtowait = 0

            logger.info("Init CallRequest in %d seconds (cmpg:%d,subscr:%d:eta_delta:%s)" %
                        (second_towait, campaign_id, elem_camp_subscriber.id, eta_delta))

            phone_number = elem_camp_subscriber.duplicate_contact
            debug_query(4)

            #Verify that the contact is authorized
            if not obj_campaign.is_authorized_contact(obj_campaign.user.userprofile.dialersetting, phone_number):
                logger.error("Error : Contact not authorized")
                elem_camp_subscriber.status = SUBSCRIBER_STATUS.NOT_AUTHORIZED
                elem_camp_subscriber.save()
                continue
            #Verify that the contact is not in the DNC list
            if obj_campaign.dnc:
                res_dnc = DNCContact.objects.filter(dnc_id=obj_campaign.dnc_id, phone_number=phone_number)
                if res_dnc:
                    logger.error("Contact (%s) in DNC list" % phone_number)
                    elem_camp_subscriber.status = SUBSCRIBER_STATUS.NOT_AUTHORIZED
                    elem_camp_subscriber.save()
                    continue
                else:
                    logger.debug("Contact (%s) not in DNC list" % phone_number)

            debug_query(5)

            #TODO: idea to speed up, create bluck of 10(Y) and then send a list
            # of callrequest_id to init_callrequest

            # Create Callrequest
            new_callrequest = Callrequest(
                status=CALLREQUEST_STATUS.PENDING,
                call_type=call_type,
                call_time=datetime.utcnow().replace(tzinfo=utc),
                timeout=obj_campaign.calltimeout,
                callerid=obj_campaign.callerid,
                caller_name=obj_campaign.caller_name,
                phone_number=phone_number,
                campaign=obj_campaign,
                aleg_gateway=obj_campaign.aleg_gateway,
                content_type=obj_campaign.content_type,
                object_id=obj_campaign.object_id,
                user=obj_campaign.user,
                extra_data=obj_campaign.extra_data,
                timelimit=obj_campaign.callmaxduration,
                subscriber=elem_camp_subscriber)
            new_callrequest.save()

            debug_query(6)

            second_towait = second_towait + settings.DELAY_OUTBOUND

            init_callrequest.apply_async(
                args=[new_callrequest.id, obj_campaign.id, obj_campaign.callmaxduration, ms_addtowait],
                # countdown=second_towait)
                eta=eta_delta)

            # Shell_plus
            # from dialer_cdr.tasks import init_callrequest
            # from datetime import datetime
            # new_callrequest_id = 112
            # obj_campaign_id = 3
            # countdown = 1
            # init_callrequest.apply_async(args=[new_callrequest.id, obj_campaign.id, obj_campaign.callmaxduration, ms_addtowait], countdown=1)

        debug_query(7)
        return True


# OPTIMIZATION - FINE
class campaign_running(PeriodicTask):
    """A periodic task that checks the campaign, create and spool the calls

    **Usage**:

        campaign_running.delay()

    """
    run_every = timedelta(seconds=int(60 / settings.HEARTBEAT_MIN))
    # NOTE : until we implement a PID Controller :
    # http://en.wikipedia.org/wiki/PID_controller

    # The campaign have to run every minutes in order to control the number
    # of calls per minute. Cons : new calls might delay 60seconds
    # run_every = timedelta(seconds=60)

    def run(self, **kwargs):
        logger.debug("TASK :: campaign_running")

        for campaign in Campaign.objects.get_running_campaign():
            logger.info("=> Campaign name %s (id:%s)" % (campaign.name, campaign.id))
            keytask = 'check_campaign_pendingcall-%d' % (campaign.id)
            pending_call_processing().delay(campaign.id, keytask=keytask)
        return True


# OPTIMIZATION - FINE
class campaign_expire_check(PeriodicTask):
    """A periodic task that checks the campaign expiration

    **Usage**:

        campaign_expire_check.delay()
    """
    run_every = timedelta(seconds=300)

    @only_one(ikey="campaign_expire_check", timeout=LOCK_EXPIRE)
    def run(self, **kwargs):
        logger.info("TASK :: campaign_expire_check")
        campaign_id_list = []
        for obj_campaign in Campaign.objects.get_expired_campaign():
            logger.debug("=> Campaign name %s (id:%s)" % (obj_campaign.name, obj_campaign.id))
            campaign_id_list.append(obj_campaign.id)

        #Update in bulk
        Campaign.objects.filter(id__in=campaign_id_list).update(status=CAMPAIGN_STATUS.END)
        return True

########NEW FILE########
__FILENAME__ = dialer_campaign_tags
#
# Newfies-Dialer License
# http://www.newfies-dialer.org
#
# This Source Code Form is subject to the terms of the Mozilla Public
# License, v. 2.0. If a copy of the MPL was not distributed with this file,
# You can obtain one at http://mozilla.org/MPL/2.0/.
#
# Copyright (C) 2011-2014 Star2Billing S.L.
#
# The Initial Developer of the Original Code is
# Arezqui Belaid <info@star2billing.com>
#

from django.db.models import get_model
from django.template.defaultfilters import register
from dialer_campaign.constants import CAMPAIGN_STATUS, CAMPAIGN_STATUS_COLOR
from django.utils.translation import ugettext as _
from dialer_campaign.function_def import get_subscriber_disposition, get_subscriber_status
from mod_utils.function_def import get_common_campaign_status_url, get_common_campaign_status,\
    get_status_value


@register.filter(name='campaign_status')
def campaign_status(value):
    """Campaign Status

    >>> campaign_status(1)
    'START'

    >>> campaign_status(2)
    'PAUSE'

    >>> campaign_status(3)
    'ABORT'

    >>> campaign_status(4)
    'END'

    >>> campaign_status(0)
    ''
    """
    return get_status_value(value, CAMPAIGN_STATUS)


@register.filter(name='get_campaign_status')
def get_campaign_status(id):
    """To get status name from CAMPAIGN_STATUS

    >>> get_campaign_status(1)
    '<font color="green">STARTED</font>'

    >>> get_campaign_status(2)
    '<font color="blue">PAUSED</font>'

    >>> get_campaign_status(3)
    '<font color="orange">ABORTED</font>'

    >>> get_campaign_status(4)
    '<font color="red">STOPPED</font>'
    """
    return get_common_campaign_status(id, CAMPAIGN_STATUS, CAMPAIGN_STATUS_COLOR)


@register.simple_tag(name='get_app_name')
def get_app_name(app_label, model_name, object_id):
    """To get app name from app_label, model_name & object_id
    Usage: {% get_app_name app_label model_name object_id %}
    """
    try:
        return get_model(app_label, model_name).objects.get(pk=object_id)
    except:
        return '-'


@register.filter(name='create_duplicate_campaign')
def create_duplicate_campaign(camp_id):
    """Create link to make duplicate campaign"""
    link = '<a href="#campaign-duplicate"  url="/campaign_duplicate/%s/" class="campaign-duplicate" data-toggle="modal" data-controls-modal="campaign-duplicate" title="%s"><i class="fa fa-copy"></i></a>' \
           % (camp_id, _('duplicate this campaign').capitalize())
    return link


def _return_link(app_name, obj_id):
    """
    Return link on campaign listing view
    """
    link = ''
    # Object view links
    if app_name == 'survey':
        link = '<a id="id_survey_seal_%s" href="#sealed-survey" url="/module/sealed_survey_view/%s/" title="%s" data-toggle="modal" data-controls-modal="sealed-survey"><i class="fa fa-search"></i></a>' % \
            (obj_id, obj_id, _('view sealed survey').title())

    # Object edit links
    if app_name == 'survey_template':
        link = '<a href="/module/survey/%s/" target="_blank" title="%s"><i class="fa fa-search"></i></a>' % \
            (obj_id, _('edit survey').title())

    return link


@register.simple_tag(name='get_campaign_app_view')
def get_campaign_app_view(campaign_object):
    link = ''
    if campaign_object.status and int(campaign_object.status) == CAMPAIGN_STATUS.START:
        if campaign_object.content_type.model == 'survey':
            link = _return_link('survey', campaign_object.object_id)

    if campaign_object.status and int(campaign_object.status) != CAMPAIGN_STATUS.START:
        if campaign_object.content_type.model == 'survey_template':
            link = _return_link('survey_template', campaign_object.object_id)
        if campaign_object.content_type.model == 'survey':
            link = _return_link('survey', campaign_object.object_id)

    return link


@register.simple_tag(name='get_campaign_status_url')
def get_campaign_status_url(id, status):
    """
    Helper to display campaign status button on the grid
    """
    return get_common_campaign_status_url(id, status, 'update_campaign_status_cust/', CAMPAIGN_STATUS)


@register.filter(name='subscriber_status')
def subscriber_status(value):
    """Subscriber Status

    >>> subscriber_status(1)
    'PENDING'
    """
    return get_subscriber_status(value)


@register.simple_tag(name='subscriber_disposition')
def subscriber_disposition(campaign_id, val):
    """To get subscriber disposition name from campaign's
    lead_disposition string"""
    return get_subscriber_disposition(campaign_id, val)

########NEW FILE########
__FILENAME__ = tests
#
# Newfies-Dialer License
# http://www.newfies-dialer.org
#
# This Source Code Form is subject to the terms of the Mozilla Public
# License, v. 2.0. If a copy of the MPL was not distributed with this file,
# You can obtain one at http://mozilla.org/MPL/2.0/.
#
# Copyright (C) 2011-2014 Star2Billing S.L.
#
# The Initial Developer of the Original Code is
# Arezqui Belaid <info@star2billing.com>
#

from django.contrib.auth.models import User
from django.contrib.contenttypes.models import ContentType
from django.core.management import call_command
from django.test import TestCase
from dialer_campaign.models import Campaign, Subscriber, common_contact_authorization
from dialer_campaign.forms import CampaignForm
from dialer_campaign.views import campaign_list, campaign_add,\
    campaign_change, campaign_del, notify_admin,\
    update_campaign_status_admin, campaign_duplicate, subscriber_list,\
    subscriber_export
from dialer_campaign.tasks import campaign_running, pending_call_processing,\
    collect_subscriber, campaign_expire_check
from dialer_campaign.templatetags.dialer_campaign_tags import get_campaign_status_url
from dialer_settings.models import DialerSetting
from dialer_campaign.constants import SUBSCRIBER_STATUS
from django_lets_go.utils import BaseAuthenticatedClient


class DialerCampaignView(BaseAuthenticatedClient):
    """Test cases for Campaign, Subscriber Admin Interface."""

    def test_admin_campaign_view_list(self):
        """Test Function to check admin campaign list"""
        response = self.client.get('/admin/dialer_campaign/campaign/')
        self.failUnlessEqual(response.status_code, 200)

    def test_admin_campaign_view_add(self):
        """Test Function to check admin campaign add"""
        response = self.client.get('/admin/dialer_campaign/campaign/add/')
        self.failUnlessEqual(response.status_code, 200)

        response = self.client.post(
            '/admin/dialer_campaign/campaign/add/',
            data={
                "name": "mycampaign_admin",
                "description": "xyz",
                "startingdate": "1301392136.0",
                "expirationdate": "1301332136.0",
                "frequency": "20",
                "callmaxduration": "50",
                "maxretry": "3",
                "intervalretry": "3000",
                "calltimeout": "60",
                "aleg_gateway": "1",
                "sms_gateway": "",
                "user": "1",
                "content_object": "type:32-id:1",
                "extra_data": "2000"})
        self.assertEqual(response.status_code, 200)

    def test_admin_subscriber_view_list(self):
        """Test Function to check admin subscriber list"""
        response = self.client.get('/admin/dialer_campaign/subscriber/')
        self.failUnlessEqual(response.status_code, 200)

    def test_admin_subscriber_view_add(self):
        """Test Function to check admin subscriber add"""
        response = self.client.get('/admin/dialer_campaign/subscriber/add/')
        self.failUnlessEqual(response.status_code, 200)

        response = self.client.post(
            '/admin/dialer_campaign/subscriber/add/',
            data={
                "status": "1",
                "campaign": "1",
                "duplicate_contact": "1234567",
                "count_attempt": "1",
                "completion_count_attempt": "1",
            })
        self.assertEqual(response.status_code, 200)


class DialerCampaignCustomerView(BaseAuthenticatedClient):
    """Test cases for Campaign, Subscriber Customer Interface."""

    fixtures = ['auth_user.json', 'gateway.json', 'dialer_setting.json',
                'user_profile.json', 'phonebook.json', 'contact.json',
                'survey.json', 'dnc_list.json', 'dnc_contact.json',
                'campaign.json', 'subscriber.json']

    def test_campaign_view_list(self):
        """Test Function to check campaign list"""
        response = self.client.get('/campaign/')
        self.assertEqual(response.status_code, 200)
        self.assertTemplateUsed(response, 'dialer_campaign/campaign/list.html')

        request = self.factory.get('/campaign/')
        request.user = self.user
        request.session = {}
        response = campaign_list(request)
        self.assertEqual(response.status_code, 200)

    def test_campaign_view_add(self):
        """Test Function to check add campaign"""
        request = self.factory.get('/campaign/add/')
        request.user = self.user
        request.session = {}
        response = campaign_add(request)
        self.assertEqual(response.status_code, 200)

        response = self.client.post('/campaign/add/', data={
            "name": "mylittlecampaign",
            "description": "xyz",
            "startingdate": "1301392136.0",
            "expirationdate": "1301332136.0",
            "frequency": "20",
            "callmaxduration": "50",
            "maxretry": "3",
            "intervalretry": "3000",
            "calltimeout": "60",
            "aleg_gateway": "1",
            "sms_gateway": "",
            "content_object": "type:43-id:1",
            "extra_data": "2000"}, follow=True)
        self.assertEqual(response.status_code, 200)

        request = self.factory.post('/campaign/add/', {
            "name": "mylittlecampaign",
            "description": "xyz",
            "startingdate": "1301392136.0",
            "expirationdate": "1301332136.0",
            "frequency": "20",
            "callmaxduration": "50",
            "maxretry": "3",
            "intervalretry": "3000",
            "calltimeout": "60",
            "aleg_gateway": "1",
            "sms_gateway": "",
            "content_object": "type:43-id:1",
            "extra_data": "2000"}, follow=True)
        request.user = self.user
        request.session = {}
        response = campaign_add(request)
        self.assertEqual(response.status_code, 200)

        request = self.factory.post('/campaign/add/', {
            "name": "mycampaign",
            "description": "xyz",
            "startingdate": "1301392136.0",
            "expirationdate": "1301332136.0",
            "frequency": "20",
            "callmaxduration": "50",
            "maxretry": "3",
            "intervalretry": "3000",
            "calltimeout": "60",
            "aleg_gateway": "1",
            "sms_gateway": "",
            "content_object": "type:43-id:1",
            "extra_data": "2000"}, follow=True)

        request.user = self.user
        request.session = {}
        response = campaign_add(request)
        self.assertEqual(response.status_code, 200)

    def test_campaign_view_update(self):
        """Test Function to check update campaign"""
        request = self.factory.post('/campaign/1/', {
            "name": "Sample campaign",
            "content_object": "type:43-id:1"}, follow=True)
        request.user = self.user
        request.session = {}
        response = campaign_change(request, 1)
        self.assertEqual(response.status_code, 200)

        request = self.factory.post('/campaign/1/', {'delete': True}, follow=True)
        request.user = self.user
        request.session = {}
        response = campaign_change(request, 1)
        self.assertEqual(response.status_code, 302)

    def test_campaign_view_delete(self):
        """Test Function to check delete campaign"""
        # delete campaign through campaign_change
        request = self.factory.post('/campaign/del/1/', follow=True)
        request.user = self.user
        request.session = {}
        response = campaign_del(request, 1)
        self.assertEqual(response['Location'], '/campaign/')
        self.assertEqual(response.status_code, 302)

        request = self.factory.post('/campaign/del/', {'select': '1'})
        request.user = self.user
        request.session = {}
        response = campaign_del(request, 0)
        self.assertEqual(response['Location'], '/campaign/')
        self.assertEqual(response.status_code, 302)

        request = self.factory.post('/campaign/del/0/?stop_campaign=True', {'select': '1'})
        request.user = self.user
        request.session = {}
        response = campaign_del(request, 0)
        self.assertEqual(response['Location'], '/campaign/')
        self.assertEqual(response.status_code, 302)

    def test_notify_admin(self):
        """Test Function to check notify_admin"""
        request = self.factory.post('/notify/admin/', follow=True)
        request.user = self.user
        request.session = {}
        request.session['has_notified'] = False
        response = notify_admin(request)
        self.assertEqual(response.status_code, 302)
        self.assertEqual(response['Location'], '/dashboard/')

    def test_update_campaign_status_admin(self):
        request = self.factory.post('update_campaign_status_admin/1/1/',
                                    follow=True)
        request.user = self.user
        request.session = {}
        response = update_campaign_status_admin(request, 1, 1)
        self.assertEqual(response.status_code, 302)
        self.assertEqual(response['Location'],
                         '/admin/dialer_campaign/campaign/')

    def test_campaign_duplicate(self):
        """Test duplicate campaign"""
        request = self.factory.get('campaign_duplicate/1/')
        request.user = self.user
        request.session = {}
        response = campaign_duplicate(request, 1)
        self.assertEqual(response.status_code, 200)

        request = self.factory.post(
            'campaign_duplicate/1/', {'name': 'duplicate', 'campaign_code': 'ZUXSA'},
            follow=True)
        request.user = self.user
        request.session = {}
        response = campaign_duplicate(request, 1)
        self.assertEqual(response.status_code, 302)

    def test_subscriber_list(self):
        """Test Function to check subscriber list"""
        response = self.client.get('/subscribers/')
        self.assertEqual(response.status_code, 200)
        self.assertTemplateUsed(response, 'dialer_campaign/subscriber/list.html')

        request = self.factory.get('/subscribers/')
        request.user = self.user
        request.session = {}
        response = subscriber_list(request)
        self.assertEqual(response.status_code, 200)

    def test_subscriber_list_export(self):
        """Test Function to check subscriber list"""
        response = self.client.get('/subscribers/export_subscriber/?format=csv')
        self.assertEqual(response.status_code, 200)

        request = self.factory.get('/subscribers/export_subscriber/?format=xml')
        request.user = self.user
        request.session = {}
        response = subscriber_export(request)
        self.assertEqual(response.status_code, 200)


class DialerCampaignCeleryTaskTestCase(TestCase):
    """Test cases for celery task"""

    fixtures = ['auth_user.json', 'gateway.json',
                'dialer_setting.json', 'user_profile.json',
                'phonebook.json', 'contact.json', 'survey.json',
                'dnc_list.json', 'dnc_contact.json',
                'campaign.json', 'subscriber.json',
                ]

    def test_check_pending_call_processing(self):
        """Test that the ``check_campaign_pendingcall``
        task runs with no errors, and returns the correct result."""
        result = pending_call_processing.delay(1)
        self.assertEqual(result.successful(), True)

    def test_campaign_running(self):
        """Test that the ``campaign_running``
        periodic task runs with no errors, and returns the correct result."""
        result = campaign_running.delay()
        self.assertEqual(result.successful(), True)

    def test_collect_subscriber(self):
        """Test that the ``collect_subscriber``
        task runs with no errors, and returns the correct result."""
        result = collect_subscriber.delay(1)
        self.assertEqual(result.successful(), True)

    def test_campaign_expire_check(self):
        """Test that the ``campaign_expire_check``
        periodic task runs with no errors, and returns the correct result."""
        result = campaign_expire_check.delay()
        self.assertEqual(result.successful(), True)


class DialerCampaignModel(TestCase):
    """Test Campaign, Subscriber models"""

    fixtures = ['auth_user.json', 'gateway.json',
                'dialer_setting.json', 'user_profile.json',
                'phonebook.json', 'contact.json', 'survey.json',
                'dnc_list.json', 'dnc_contact.json',
                'campaign.json', 'subscriber.json',
                ]

    def setUp(self):
        self.user = User.objects.get(username='admin')

        # Campaign model
        try:
            self.content_type_id = ContentType.objects.get(model='survey_template').id
        except:
            self.content_type_id = 1

        self.campaign = Campaign(
            name="sample_campaign",
            user=self.user,
            aleg_gateway_id=1,
            content_type_id=self.content_type_id,
            object_id=1,
            status=1
        )
        self.campaign.save()
        self.assertEqual(self.campaign.__unicode__(), u'sample_campaign')

        # Subscriber model
        self.subscriber = Subscriber(
            contact_id=1,
            campaign=self.campaign,
            count_attempt=0,
            completion_count_attempt=0,
            status=1
        )
        self.subscriber.save()
        self.assertTrue(self.subscriber.__unicode__())

        # Test mgt command
        call_command("create_subscriber", "123456|1")

        call_command("create_subscriber", "123456|3")

    def test_campaign_form(self):
        self.assertEqual(self.campaign.name, "sample_campaign")

        Campaign.objects.get_running_campaign()
        Campaign.objects.get_expired_campaign()
        dialersetting = DialerSetting.objects.get(pk=1)
        #self.user.get_profile().dialersetting
        common_contact_authorization(dialersetting, '1234567890')

        # status = 1
        self.campaign.update_campaign_status()
        get_campaign_status_url(self.campaign.pk, self.campaign.status)

        self.campaign.status = 2
        self.campaign.save()
        self.campaign.update_campaign_status()
        get_campaign_status_url(self.campaign.pk, self.campaign.status)

        self.campaign.status = 3
        self.campaign.save()
        self.campaign.update_campaign_status()
        get_campaign_status_url(self.campaign.pk, self.campaign.status)

        self.campaign.status = 4
        self.campaign.save()
        self.campaign.update_campaign_status()
        get_campaign_status_url(self.campaign.pk, self.campaign.status)

        self.campaign.is_authorized_contact(dialersetting, '123456789')
        self.campaign.get_active_max_frequency()
        self.campaign.get_active_callmaxduration()
        self.campaign.get_active_contact()
        self.campaign.progress_bar()
        self.campaign.subscriber_detail()
        self.campaign.get_pending_subscriber_update(10, SUBSCRIBER_STATUS.IN_PROCESS)

        self.assertEqual(self.subscriber.campaign, self.campaign)

        form = CampaignForm(self.user)
        obj = form.save(commit=False)
        obj.name = "new_campaign"
        obj.user = self.user
        obj.phonebook_id = 1
        obj.aleg_gateway_id = 1
        obj.content_type_id = self.content_type_id
        obj.object_id = 1
        obj.save()

        form = CampaignForm(self.user, instance=self.campaign)
        self.assertTrue(isinstance(form.instance, Campaign))

        form = CampaignForm(self.user, data={
            "name": "mylittle_campaign",
            "description": "xyz",
            "startingdate": "1301392136.0",
            "expirationdate": "1301332136.0",
            "frequency": "120",
            "callmaxduration": "50",
            "maxretry": "3",
            "intervalretry": "2000",
            "calltimeout": "60",
            "aleg_gateway": "1",
            "sms_gateway": "",
            "content_object": "type:32-id:1",
            "extra_data": "2000"})
        self.assertEquals(form.is_valid(), False)

    def teardown(self):
        self.campaign.delete()
        self.subscriber.delete()

########NEW FILE########
__FILENAME__ = urls
#
# Newfies-Dialer License
# http://www.newfies-dialer.org
#
# This Source Code Form is subject to the terms of the Mozilla Public
# License, v. 2.0. If a copy of the MPL was not distributed with this file,
# You can obtain one at http://mozilla.org/MPL/2.0/.
#
# Copyright (C) 2011-2014 Star2Billing S.L.
#
# The Initial Developer of the Original Code is
# Arezqui Belaid <info@star2billing.com>
#
from django.conf.urls import patterns

urlpatterns = patterns('dialer_campaign.views',
    #  Campaign urls
    (r'^campaign/$', 'campaign_list'),
    (r'^campaign/add/$', 'campaign_add'),
    (r'^campaign/del/(.+)/$', 'campaign_del'),
    (r'^campaign_duplicate/(.+)/$', 'campaign_duplicate'),

    # Campaign Actions (start|stop|pause|abort)
    (r'^campaign/update_campaign_status_cust/(\d*)/(\d*)/$',
        'update_campaign_status_cust'),
    (r'^campaign/(.+)/$', 'campaign_change'),
    # Campaign Actions (start|stop|pause|abort) for Admin UI
    (r'^update_campaign_status_admin/(\d*)/(\d*)/$',
        'update_campaign_status_admin'),

    #  Subscriber urls
    (r'^subscribers/$', 'subscriber_list'),
    (r'^subscribers/export_subscriber/$', 'subscriber_export'),

    # Send notification to admin regarding dialer setting
    (r'^notify/admin/$', 'notify_admin'),
)

########NEW FILE########
__FILENAME__ = views
#
# Newfies-Dialer License
# http://www.newfies-dialer.org
#
# This Source Code Form is subject to the terms of the Mozilla Public
# License, v. 2.0. If a copy of the MPL was not distributed with this file,
# You can obtain one at http://mozilla.org/MPL/2.0/.
#
# Copyright (C) 2011-2014 Star2Billing S.L.
#
# The Initial Developer of the Original Code is
# Arezqui Belaid <info@star2billing.com>
#

from django.contrib.auth.models import User
from django.contrib.auth.decorators import login_required, permission_required
from django.http import HttpResponseRedirect, HttpResponse, Http404
from django.shortcuts import render_to_response, get_object_or_404
from django.core.urlresolvers import reverse
from django.core.mail import mail_admins
from django.template.context import RequestContext
from django.utils.translation import ugettext as _
from django.contrib.contenttypes.models import ContentType
from dateutil.relativedelta import relativedelta
from django.utils.timezone import utc

from datetime import datetime
import re
import tablib
from frontend_notification.views import frontend_send_notification
from django_lets_go.common_functions import ceil_strdate, getvar, get_pagination_vars, unset_session_var

from .models import Campaign, Subscriber
from .forms import CampaignForm, DuplicateCampaignForm, \
    SubscriberSearchForm, CampaignSearchForm
from .constants import CAMPAIGN_STATUS, CAMPAIGN_COLUMN_NAME, \
    SUBSCRIBER_COLUMN_NAME
from .function_def import check_dialer_setting, dialer_setting_limit, \
    user_dialer_setting, get_subscriber_status, get_subscriber_disposition
from .tasks import collect_subscriber
from dialer_contact.models import Phonebook
from survey.models import Survey_template
from user_profile.constants import NOTIFICATION_NAME
from mod_utils.helper import Export_choice

redirect_url_to_campaign_list = '/campaign/'


@login_required
def update_campaign_status_admin(request, pk, status):
    """Campaign Status (e.g. start|stop|pause|abort) can be changed from
    admin interface (via campaign list)"""
    obj_campaign = Campaign.objects.get(id=pk)
    obj_campaign.status = status
    obj_campaign.save()
    frontend_send_notification(request, status, recipient=request.user)
    return HttpResponseRedirect(reverse("admin:dialer_campaign_campaign_changelist"))


@login_required
def update_campaign_status_cust(request, pk, status):
    """Campaign Status (e.g. start|stop|pause|abort) can be changed from
    customer interface (via dialer_campaign/campaign list)"""
    obj_campaign = Campaign.objects.get(id=pk)
    obj_campaign.status = status
    obj_campaign.save()

    pagination_path = redirect_url_to_campaign_list
    if request.session.get('pagination_path'):
        pagination_path = request.session.get('pagination_path')

    #Check if no phonebook attached
    if int(status) == CAMPAIGN_STATUS.START and obj_campaign.phonebook.all().count() == 0:
        request.session['error_msg'] = _('you must assign a phonebook to your campaign before starting it')
    else:
        recipient = request.user
        frontend_send_notification(request, status, recipient)

        # Notify user while campaign Start
        if int(status) == CAMPAIGN_STATUS.START and not obj_campaign.has_been_started:
            request.session['info_msg'] = _('campaign global settings cannot be edited when the campaign is started')
            # change has_been_started flag
            obj_campaign.has_been_started = True
            obj_campaign.save()

            if obj_campaign.content_type.model == 'survey_template':
                # Copy survey
                survey_template = Survey_template.objects.get(user=request.user, pk=obj_campaign.object_id)
                survey_template.copy_survey_template(obj_campaign.id)
            collect_subscriber.delay(obj_campaign.id)

    return HttpResponseRedirect(pagination_path)


@login_required
def notify_admin(request):
    """
    Url to notify the administrators regarding the user dialer settings configuration via mail
    """
    # Get all the admin users - admin superuser
    all_admin_user = User.objects.filter(is_superuser=True)
    for user in all_admin_user:
        recipient = user
        if not 'has_notified' in request.session:
            frontend_send_notification(
                request, NOTIFICATION_NAME.dialer_setting_configuration, recipient)
            # Send mail to ADMINS
            subject = _('dialer setting configuration').title()
            message = _('Notification - User Dialer Setting. The user "%(user)s" - "%(user_id)s" is not properly '
                        'configured to use the system, please configure their dialer settings.') % \
                {'user': request.user, 'user_id': request.user.id}
            # mail_admins() is a shortcut for sending an email to the site admins,
            # as defined in the ADMINS setting
            mail_admins(subject, message)
            request.session['has_notified'] = True

    return HttpResponseRedirect('/dashboard/')


@permission_required('dialer_campaign.view_campaign', login_url='/')
@login_required
def campaign_list(request):
    """List all campaigns for the logged in user

    **Attributes**:

        * ``template`` - dialer_campaign/campaign/list.html

    **Logic Description**:

        * List all campaigns belonging to the logged in user
    """
    form = CampaignSearchForm(request.user, request.POST or None)
    request.session['pagination_path'] = request.META['PATH_INFO'] + '?' + request.META['QUERY_STRING']
    sort_col_field_list = ['id', 'name', 'startingdate', 'status', 'totalcontact']
    pag_vars = get_pagination_vars(request, sort_col_field_list, default_sort_field='id')
    phonebook_id = ''
    status = 'all'
    post_var_with_page = 0

    if form.is_valid():
        field_list = ['phonebook_id', 'status']
        unset_session_var(request, field_list)
        phonebook_id = getvar(request, 'phonebook_id', setsession=True)
        status = getvar(request, 'status', setsession=True)
        post_var_with_page = 1

    # This logic to retain searched result set while accessing pagination or sorting on column
    # post_var_with_page will check following thing
    # 1) if page has previously searched value, then post_var_with_page become 1
    # 2) if not then post_var_with_page remain 0 & flush the session variables' value
    if request.GET.get('page') or request.GET.get('sort_by'):
        post_var_with_page = 1
        phonebook_id = request.session.get('session_phonebook_id')
        status = request.session.get('session_status')
        form = CampaignSearchForm(request.user, initial={'status': status, 'phonebook_id': phonebook_id})

    if post_var_with_page == 0:
        # default / unset session var
        field_list = ['status', 'phonebook_id']
        unset_session_var(request, field_list)

    #Set search on user as default
    kwargs = {'user': request.user}
    if phonebook_id and phonebook_id != '0':
        kwargs['phonebook__id__in'] = [int(phonebook_id)]
    if status and status != 'all':
        kwargs['status'] = status

    all_campaign_list = Campaign.objects.filter(**kwargs).order_by(pag_vars['sort_order'])
    campaign_list = all_campaign_list[pag_vars['start_page']:pag_vars['end_page']]
    campaign_count = all_campaign_list.count()

    data = {
        'form': form,
        'all_campaign_list': all_campaign_list,
        'campaign_list': campaign_list,
        'total_campaign': campaign_count,
        'CAMPAIGN_COLUMN_NAME': CAMPAIGN_COLUMN_NAME,
        'col_name_with_order': pag_vars['col_name_with_order'],
        'msg': request.session.get('msg'),
        'error_msg': request.session.get('error_msg'),
        'info_msg': request.session.get('info_msg'),
    }
    request.session['msg'] = ''
    request.session['error_msg'] = ''
    request.session['info_msg'] = ''
    return render_to_response('dialer_campaign/campaign/list.html', data, context_instance=RequestContext(request))


def get_content_type(object_string):
    """
    Retrieve ContentType and Object ID from a string
    It is used by campaign_add & campaign_change

    #get_content_type("type:38-id:1")
    #{'object_type': <ContentType: Phonebook>, 'object_id': '1'}
    """
    contenttype = {}
    matches = re.match("type:(\d+)-id:(\d+)", object_string).groups()
    object_type_id = matches[0]  # get 45 from "type:45-id:38"
    contenttype['object_id'] = matches[1]  # get 38 from "type:45-id:38"
    contenttype['object_type'] = ContentType.objects.get(id=object_type_id)
    return contenttype


@permission_required('dialer_campaign.add_campaign', login_url='/')
@login_required
def campaign_add(request):
    """Add a new campaign for the logged in user

    **Attributes**:

        * ``form`` - CampaignForm
        * ``template`` - dialer_campaign/campaign/change.html

    **Logic Description**:

        * Before adding a campaign, check dialer setting limit if
          applicable to the user.
        * Add the new campaign which will belong to the logged in user
          via CampaignForm & get redirected to campaign list
    """
    # If dialer setting is not attached with user, redirect to campaign list
    if not user_dialer_setting(request.user):
        request.session['error_msg'] = _("your settings aren't configured properly, please contact the admin.")
        return HttpResponseRedirect(redirect_url_to_campaign_list)

    # Check dialer setting limit
    if request.user and request.method != 'POST':
        # check Max Number of running campaign
        if check_dialer_setting(request, check_for="campaign"):
            msg = _("you have too many campaigns. Max allowed %(limit)s") % \
                {'limit': dialer_setting_limit(request, limit_for="campaign")}
            request.session['msg'] = msg

            # campaign limit reached
            frontend_send_notification(request, NOTIFICATION_NAME.campaign_limit_reached)
            return HttpResponseRedirect(redirect_url_to_campaign_list)

    form = CampaignForm(request.user, request.POST or None)
    # Add campaign
    if form.is_valid():
        obj = form.save(commit=False)
        contenttype = get_content_type(form.cleaned_data['content_object'])
        obj.content_type = contenttype['object_type']
        obj.object_id = contenttype['object_id']
        obj.user = request.user
        obj.save()
        form.save_m2m()
        request.session["msg"] = _('"%(name)s" added.') % {'name': request.POST['name']}
        return HttpResponseRedirect(redirect_url_to_campaign_list)

    data = {
        'form': form,
        'action': 'add',
    }
    return render_to_response('dialer_campaign/campaign/change.html', data, context_instance=RequestContext(request))


@permission_required('dialer_campaign.delete_campaign', login_url='/')
@login_required
def campaign_del(request, object_id):
    """Delete/Stop campaign for the logged in user

    **Attributes**:

        * ``object_id`` - Selected campaign object
        * ``object_list`` - Selected campaign objects

    **Logic Description**:

        * Delete/Stop the selected campaign from the campaign list
    """
    stop_campaign = request.GET.get('stop_campaign', False)
    if int(object_id) != 0:
        # When object_id is not 0
        campaign = get_object_or_404(Campaign, pk=object_id, user=request.user)
        if stop_campaign:
            campaign.status = CAMPAIGN_STATUS.END
            campaign.save()
            request.session["msg"] = _('the campaign "%(name)s" has been stopped.') % {'name': campaign.name}
        else:
            request.session["msg"] = _('the campaign "%(name)s" has been deleted.') % {'name': campaign.name}
            campaign.delete()
    else:
        # When object_id is 0 (Multiple records delete)
        values = request.POST.getlist('select')
        values = ", ".join(["%s" % el for el in values])
        try:
            campaign_list = Campaign.objects.filter(user=request.user).extra(where=['id IN (%s)' % values])
            if campaign_list:
                if stop_campaign:
                    campaign_list.update(status=CAMPAIGN_STATUS.END)
                    request.session["msg"] = _('%(count)s campaign(s) have been stopped.') % \
                        {'count': campaign_list.count()}
                else:
                    request.session["msg"] = _('%(count)s campaign(s) have been deleted.') % \
                        {'count': campaign_list.count()}
                    campaign_list.delete()
        except:
            raise Http404
    return HttpResponseRedirect(redirect_url_to_campaign_list)


@permission_required('dialer_campaign.change_campaign', login_url='/')
@login_required
def campaign_change(request, object_id):
    """
    Update/Delete campaign for the logged in user

    **Attributes**:

        * ``object_id`` - Selected campaign object
        * ``form`` - CampaignForm
        * ``template`` - dialer_campaign/campaign/change.html

    **Logic Description**:

        * Update/delete selected campaign from the campaign list
          via CampaignForm & get redirected to the campaign list

    """
    # If dialer setting is not attached with user, redirect to campaign list
    if not user_dialer_setting(request.user):
        return HttpResponseRedirect(redirect_url_to_campaign_list)

    campaign = get_object_or_404(Campaign, pk=object_id, user=request.user)
    content_object = "type:%s-id:%s" % (campaign.content_type_id, campaign.object_id)
    form = CampaignForm(request.user, request.POST or None, instance=campaign,
                        initial={'content_object': content_object})

    if campaign.status == CAMPAIGN_STATUS.START:
        request.session['info_msg'] = _('Started campaign can only edit the dialer settings and the scheduler')

    if request.method == 'POST':
        # Delete campaign
        if request.POST.get('delete'):
            return HttpResponseRedirect('%sdel/%s/' % (redirect_url_to_campaign_list, object_id))
        else:
            # Update campaign
            if form.is_valid():
                newcpg = form.save(commit=False)

                selected_content_object = form.cleaned_data['content_object']
                if not selected_content_object:
                    selected_content_object = form.cleaned_data['selected_content_object']
                # while campaign status is running
                if campaign.status == CAMPAIGN_STATUS.START:
                    if request.POST.get('selected_phonebook'):
                        selected_phonebook = str(request.POST.get('selected_phonebook')).split(',')
                        newcpg.phonebook = Phonebook.objects.filter(id__in=selected_phonebook)

                contenttype = get_content_type(selected_content_object)
                newcpg.content_type = contenttype['object_type']
                newcpg.object_id = contenttype['object_id']

                # Ugly hack: Solve problem when editing campaign
                newcpg.has_been_started = campaign.has_been_started
                newcpg.has_been_duplicated = campaign.has_been_duplicated
                newcpg.created_date = campaign.created_date
                newcpg.totalcontact = campaign.totalcontact
                newcpg.imported_phonebook = campaign.imported_phonebook
                newcpg.completed = campaign.completed
                # Save the updated Campaign
                newcpg.save()

                request.session["msg"] = _('the campaign "%(name)s" is updated.') % {'name': request.POST['name']}
                request.session['error_msg'] = ''
                return HttpResponseRedirect(redirect_url_to_campaign_list)

    data = {
        'form': form,
        'action': 'update',
        'error_msg': request.session.get('error_msg'),
        'info_msg': request.session.get('info_msg'),
    }
    request.session['error_msg'] = ''
    request.session['info_msg'] = ''
    return render_to_response('dialer_campaign/campaign/change.html', data, context_instance=RequestContext(request))


@login_required
def campaign_duplicate(request, id):
    """
    Duplicate campaign via DuplicateCampaignForm

    **Attributes**:

        * ``id`` - Selected campaign object
        * ``form`` - DuplicateCampaignForm
        * ``template`` - dialer_campaign/campaign/campaign_duplicate.html
    """
    form = DuplicateCampaignForm(request.user, request.POST or None)
    request.session['error_msg'] = ''
    if request.method == 'POST':
        if form.is_valid():
            original_camp = campaign_obj = Campaign.objects.get(pk=id)
            #Make duplicate campaign/survey
            new_survey_id = campaign_obj.object_id

            campaign_obj.pk = None
            campaign_obj.campaign_code = request.POST.get('campaign_code')
            campaign_obj.name = request.POST.get('name')
            campaign_obj.status = CAMPAIGN_STATUS.PAUSE
            campaign_obj.totalcontact = 0
            campaign_obj.completed = 0
            campaign_obj.startingdate = datetime.utcnow().replace(tzinfo=utc)
            campaign_obj.expirationdate = datetime.utcnow().replace(tzinfo=utc) + relativedelta(days=+1)
            campaign_obj.imported_phonebook = ''
            campaign_obj.has_been_started = False
            campaign_obj.has_been_duplicated = True
            campaign_obj.save()

            if campaign_obj.content_type.model == 'survey':
                survey_obj = original_camp.content_type.model_class().objects.get(pk=original_camp.object_id)
                new_survey_id = survey_obj.create_duplicate_survey(original_camp, campaign_obj)

            campaign_obj.object_id = new_survey_id
            campaign_obj.save()

            # Many to many field
            for pb in request.POST.getlist('phonebook'):
                campaign_obj.phonebook.add(pb)

            return HttpResponseRedirect(redirect_url_to_campaign_list)
        else:
            request.session['error_msg'] = True

    data = {
        'campaign_id': id,
        'form': form,
        'err_msg': request.session.get('error_msg'),
    }
    request.session['error_msg'] = ''
    return render_to_response('dialer_campaign/campaign/campaign_duplicate.html',
                              data, context_instance=RequestContext(request))


@permission_required('dialer_campaign.view_subscriber', login_url='/')
@login_required
def subscriber_list(request):
    """
    Subscriber list for the logged in user

    **Attributes**:

        * ``template`` - dialer_campaign/subscriber/list.html
        * ``form`` - SubscriberSearchForm

    **Logic Description**:

        * List all subscribers belonging to the logged in user & their campaign
    """
    sort_col_field_list = ['contact', 'updated_date', 'count_attempt', 'completion_count_attempt',
                           'status', 'disposition', 'collected_data', 'agent']
    pag_vars = get_pagination_vars(request, sort_col_field_list, default_sort_field='id')
    form = SubscriberSearchForm(request.user, request.POST or None)
    campaign_id = ''
    agent_id = ''
    status = 'all'
    start_date = end_date = None
    post_var_with_page = 0
    if form.is_valid():
        post_var_with_page = 1
        field_list = ['start_date', 'end_date', 'status', 'campaign_id', 'agent_id']
        unset_session_var(request, field_list)
        campaign_id = getvar(request, 'campaign_id', setsession=True)
        agent_id = getvar(request, 'agent_id', setsession=True)

        from_date = getvar(request, 'from_date')
        to_date = getvar(request, 'to_date')
        start_date = ceil_strdate(str(from_date), 'start')
        end_date = ceil_strdate(str(to_date), 'end')

        converted_start_date = start_date.strftime('%Y-%m-%d')
        converted_end_date = end_date.strftime('%Y-%m-%d')
        request.session['session_start_date'] = converted_start_date
        request.session['session_end_date'] = converted_end_date

        status = getvar(request, 'status', setsession=True)

    if request.GET.get('page') or request.GET.get('sort_by'):
        post_var_with_page = 1
        start_date = request.session.get('session_start_date')
        end_date = request.session.get('session_end_date')

        start_date = ceil_strdate(str(start_date), 'start')
        end_date = ceil_strdate(str(end_date), 'end')

        campaign_id = request.session.get('session_campaign_id')
        agent_id = request.session.get('session_agent_id')
        status = request.session.get('session_status')
        form = SubscriberSearchForm(
            request.user,
            initial={'from_date': start_date.strftime('%Y-%m-%d'),
                     'to_date': end_date.strftime('%Y-%m-%d'),
                     'campaign_id': campaign_id,
                     'agent_id': agent_id,
                     'status': status})

    if post_var_with_page == 0:
        # default
        tday = datetime.utcnow().replace(tzinfo=utc)
        from_date = tday.strftime('%Y-%m-%d')
        to_date = tday.strftime('%Y-%m-%d')
        start_date = datetime(tday.year, tday.month, tday.day, 0, 0, 0, 0).replace(tzinfo=utc)
        end_date = datetime(tday.year, tday.month, tday.day, 23, 59, 59, 999999).replace(tzinfo=utc)

        form = SubscriberSearchForm(request.user, initial={'from_date': from_date, 'to_date': to_date})
        # unset session var
        request.session['session_start_date'] = start_date
        request.session['session_end_date'] = end_date
        request.session['session_status'] = ''
        request.session['session_campaign_id'] = ''
        request.session['session_agent_id'] = ''

    kwargs = {}
    # updated_date might be replaced with last_attempt
    if start_date and end_date:
        kwargs['updated_date__range'] = (start_date, end_date)
    if start_date and end_date == '':
        kwargs['updated_date__gte'] = start_date
    if start_date == '' and end_date:
        kwargs['updated_date__lte'] = end_date

    if campaign_id and campaign_id != '0':
        kwargs['campaign_id'] = campaign_id

    #if agent_id and agent_id != '0':
    #    kwargs['agent_id'] = agent_id

    if status and status != 'all':
        kwargs['status'] = status

    subscriber_list = []
    all_subscriber_list = []
    subscriber_count = 0

    if request.user.is_superuser:
        subscriber_list = Subscriber.objects.all()
    else:
        subscriber_list = Subscriber.objects.filter(campaign__user=request.user)

    if kwargs:
        subscriber_list = subscriber_list.filter(**kwargs)
        request.session['subscriber_list_kwargs'] = kwargs

    all_subscriber_list = subscriber_list.order_by(pag_vars['sort_order'])
    subscriber_list = all_subscriber_list[pag_vars['start_page']:pag_vars['end_page']]
    subscriber_count = all_subscriber_list.count()

    data = {
        'subscriber_list': subscriber_list,
        'all_subscriber_list': all_subscriber_list,
        'total_subscribers': subscriber_count,
        'SUBSCRIBER_COLUMN_NAME': SUBSCRIBER_COLUMN_NAME,
        'col_name_with_order': pag_vars['col_name_with_order'],
        'msg': request.session.get('msg'),
        'error_msg': request.session.get('error_msg'),
        'form': form,
    }
    request.session['msg'] = ''
    request.session['error_msg'] = ''
    return render_to_response('dialer_campaign/subscriber/list.html', data, context_instance=RequestContext(request))


@login_required
def subscriber_export(request):
    """Export CSV file of subscriber record

    **Important variable**:

        * ``request.session['subscriber_list_kwargs']`` - stores subscriber_list kwargs

    **Exported fields**: ['contact', 'updated_date', 'count_attempt',
                          'completion_count_attempt', 'status', 'disposition',
                          'collected_data', 'agent']
    """
    format_type = request.GET['format']
    # get the response object, this can be used as a stream.
    response = HttpResponse(mimetype='text/%s' % format_type)

    # force download.
    response['Content-Disposition'] = 'attachment;filename=export.%s' % format_type

    if request.session.get('subscriber_list_kwargs'):
        kwargs = request.session['subscriber_list_kwargs']
        if request.user.is_superuser:
            subscriber_list = Subscriber.objects.all()
        else:
            subscriber_list = Subscriber.objects.filter(campaign__user=request.user)

        if kwargs:
            subscriber_list = subscriber_list.filter(**kwargs)

        headers = ('contact', 'updated_date', 'count_attempt', 'completion_count_attempt',
                   'status', 'disposition', 'collected_data', )  # 'agent',

        list_val = []
        for i in subscriber_list:
            updated_date = i.updated_date
            if format_type == Export_choice.JSON or Export_choice.XLS:
                updated_date = str(i.updated_date)

            list_val.append((
                i.contact.contact,
                updated_date,
                i.count_attempt,
                i.completion_count_attempt,
                get_subscriber_status(i.status),
                get_subscriber_disposition(i.campaign_id, i.disposition),
                i.collected_data,
                # i.agent,
            ))

        data = tablib.Dataset(*list_val, headers=headers)

        if format_type == Export_choice.XLS:
            response.write(data.xls)
        elif format_type == Export_choice.CSV:
            response.write(data.csv)
        elif format_type == Export_choice.JSON:
            response.write(data.json)

    return response

########NEW FILE########
__FILENAME__ = admin
#
# Newfies-Dialer License
# http://www.newfies-dialer.org
#
# This Source Code Form is subject to the terms of the Mozilla Public
# License, v. 2.0. If a copy of the MPL was not distributed with this file,
# You can obtain one at http://mozilla.org/MPL/2.0/.
#
# Copyright (C) 2011-2014 Star2Billing S.L.
#
# The Initial Developer of the Original Code is
# Arezqui Belaid <info@star2billing.com>
#

from django.contrib import admin
from django.contrib.admin.options import IncorrectLookupParameters
from django.contrib.admin.views.main import ERROR_FLAG
from django.conf.urls import patterns
from django.conf import settings
from django.core.urlresolvers import reverse
from django.template import RequestContext
from django.http import HttpResponse, HttpResponseRedirect
from django.shortcuts import render_to_response
from django.utils.translation import ugettext_lazy as _
from django.utils.translation import ungettext
from django.db.models import Sum, Avg, Count
from dialer_cdr.models import Callrequest, VoIPCall
from dialer_cdr.forms import AdminVoipSearchForm
from dialer_cdr.function_def import voipcall_record_common_fun, voipcall_search_admin_form_fun
from django_lets_go.common_functions import getvar
from mod_utils.helper import Export_choice
#from django_lets_go.app_label_renamer import AppLabelRenamer
from genericadmin.admin import GenericAdminModelAdmin
from datetime import datetime
from django.utils.timezone import utc
import tablib

# AppLabelRenamer(native_app_label=u'dialer_cdr', app_label=_('Dialer CDR')).main()
APP_LABEL = _('VoIP report')


class CallrequestAdmin(GenericAdminModelAdmin):
    """Allows the administrator to view and modify certain attributes
    of a Callrequest."""
    content_type_whitelist = ('survey/survey', )
    fieldsets = (
        (_('standard options').capitalize(), {
            'fields': ('user', 'request_uuid', 'call_time', 'campaign',
                       'status', 'hangup_cause', 'callerid', 'phone_number',
                       'timeout', 'timelimit', 'call_type', 'aleg_gateway',
                       'content_type', 'object_id', ),
        }),
        (_('advanced options').capitalize(), {
            'classes': ('collapse', ),
            'fields': ('extra_data', 'extra_dial_string', 'subscriber', 'completed'),
        }),
    )
    #If we try to display user / content_type low the performance
    list_display = ('id', 'request_uuid', 'aleg_uuid', 'call_time',
                    'status', 'callerid', 'phone_number', 'call_type',
                    'completed', 'num_attempt', 'last_attempt_time', )
    list_display_links = ('id', 'request_uuid', )
    list_filter = ['callerid', 'call_time', 'status', 'call_type', 'campaign']
    ordering = ('-id', )
    search_fields = ('request_uuid', )

admin.site.register(Callrequest, CallrequestAdmin)


class VoIPCallAdmin(admin.ModelAdmin):
    """Allows the administrator to view and modify certain attributes
    of a VoIPCall."""
    can_add = False
    detail_title = _("call report").title()
    list_display = ('id', 'leg_type', 'callid', 'callerid', 'phone_number',
                    'starting_date', 'min_duration', 'billsec', 'disposition',
                    'hangup_cause', 'hangup_cause_q850')
    valid_lookups = ('callrequest__campaign_id', )
    if settings.AMD:
        list_display += ('amd_status', )
    ordering = ('-id', )

    def lookup_allowed(self, lookup, *args, **kwargs):
        if lookup.startswith(self.valid_lookups):
            return True
        return super(VoIPCallAdmin, self).lookup_allowed(lookup, *args, **kwargs)

    def user_link(self, obj):
        """User link to user profile"""

        if obj.user.is_staff:
            url = reverse('admin:auth_staff_change', args=(obj.user_id, ))
        else:
            url = reverse('admin:auth_customer_change', args=(obj.user_id, ))
        return '<a href="%s"><b>%s</b></a>' % (url, obj.user)
    user_link.allow_tags = True
    user_link.short_description = _('user').capitalize()

    def used_gateway_link(self, obj):
        """Used gateway link to edit gateway detail"""
        if obj.used_gateway:
            url = reverse('admin:dialer_gateway_gateway_change', args=(obj.used_gateway.id, ))
            return '<a href="%s">%s</a>' % (url, obj.used_gateway)
    used_gateway_link.allow_tags = True
    used_gateway_link.short_description = _('gateway used').capitalize()

    def has_add_permission(self, request):
        """Remove add permission on VoIP Call Report model

        **Logic Description**:

            * Override django admin has_add_permission method to remove add
              permission on VoIP Call Report model
        """
        if not self.can_add:
            return False
        return super(VoIPCallAdmin, self).has_add_permission(request)

    def get_urls(self):
        urls = super(VoIPCallAdmin, self).get_urls()
        my_urls = patterns('',
            (r'^$', self.admin_site.admin_view(self.changelist_view)),
            (r'^voip_daily_report/$', self.admin_site.admin_view(self.voip_daily_report)),
            (r'^export_voip_report/$', self.admin_site.admin_view(self.export_voip_report)),
        )
        return my_urls + urls

    def changelist_view(self, request, extra_context=None):
        """
        Override changelist_view method of django-admin for search parameters

        **Attributes**:

            * ``form`` - AdminVoipSearchForm
            * ``template`` - admin/dialer_cdr/voipcall/change_list.html

        **Logic Description**:

            * VoIP report Record Listing with search option & Daily Call Report
              search Parameters: by date, by status and by billed.
        """
        opts = VoIPCall._meta
        query_string = ''
        form = AdminVoipSearchForm()
        if request.method == 'POST':
            # Session variable get record set with searched option into export file
            request.session['admin_voipcall_record_kwargs'] = voipcall_record_common_fun(request)

            query_string = voipcall_search_admin_form_fun(request)
            return HttpResponseRedirect("/admin/%s/%s/?%s" % (opts.app_label, opts.object_name.lower(), query_string))
        else:
            disposition = ''
            from_date = ''
            to_date = ''
            campaign_id = ''
            leg_type = ''

            from_date = getvar(request, 'starting_date__gte')
            to_date = getvar(request, 'starting_date__lte')[0:10]
            disposition = getvar(request, 'disposition__exact')
            campaign_id = getvar(request, 'callrequest__campaign_id')
            leg_type = getvar(request, 'leg_type__exact')

            form = AdminVoipSearchForm(initial={'disposition': disposition,
                                                'from_date': from_date,
                                                'to_date': to_date,
                                                'campaign_id': campaign_id,
                                                'leg_type': leg_type})

        ChangeList = self.get_changelist(request)
        try:
            cl = ChangeList(request, self.model, self.list_display,
                self.list_display_links, self.list_filter, self.date_hierarchy,
                self.search_fields, self.list_select_related,
                self.list_per_page, self.list_max_show_all, self.list_editable,
                self)
        except IncorrectLookupParameters:
            if ERROR_FLAG in request.GET.keys():
                return render_to_response('admin/invalid_setup.html', {'title': _('Database error')})
            return HttpResponseRedirect('%s?%s=1' % (request.path, ERROR_FLAG))

        if request.META['QUERY_STRING'] == '':
            # Default
            # Session variable get record set with searched option into export file
            request.session['admin_voipcall_record_kwargs'] = voipcall_record_common_fun(request)

            query_string = voipcall_search_admin_form_fun(request)
            return HttpResponseRedirect("/admin/%s/%s/?%s" % (opts.app_label, opts.object_name.lower(), query_string))

        cl.formset = None

        selection_note_all = ungettext('%(total_count)s selected', 'All %(total_count)s selected', cl.result_count)

        ctx = {
            'selection_note': _('0 of %(cnt)s selected') % {'cnt': len(cl.result_list)},
            'selection_note_all': selection_note_all % {'total_count': cl.result_count},
            'cl': cl,
            'form': form,
            'opts': opts,
            'model_name': opts.object_name.lower(),
            'app_label': APP_LABEL,
            'title': _('call report'),
        }
        return super(VoIPCallAdmin, self).changelist_view(request, extra_context=ctx)

    def voip_daily_report(self, request):
        opts = VoIPCall._meta
        kwargs = {}
        if request.method == 'POST':
            form = AdminVoipSearchForm(request.POST)
            kwargs = voipcall_record_common_fun(request)
        else:
            kwargs = voipcall_record_common_fun(request)
            tday = datetime.today()
            form = AdminVoipSearchForm(initial={"from_date": tday.strftime("%Y-%m-%d"),
                                                "to_date": tday.strftime("%Y-%m-%d")})
            if len(kwargs) == 0:
                kwargs['starting_date__gte'] = datetime(tday.year, tday.month, tday.day,
                                                        0, 0, 0, 0).replace(tzinfo=utc)

        select_data = {"starting_date": "SUBSTR(CAST(starting_date as CHAR(30)),1,10)"}
        # Get Total Records from VoIPCall Report table for Daily Call Report
        total_data = VoIPCall.objects.extra(select=select_data).values('starting_date').filter(**kwargs)\
            .annotate(Count('starting_date'))\
            .annotate(Sum('duration'))\
            .annotate(Avg('duration'))\
            .order_by('-starting_date')

        # Following code will count total voip calls, duration
        if total_data:
            max_duration = max([x['duration__sum'] for x in total_data])
            total_duration = sum([x['duration__sum'] for x in total_data])
            total_calls = sum([x['starting_date__count'] for x in total_data])
            total_avg_duration = (sum([x['duration__avg'] for x in total_data])) / total_calls
        else:
            max_duration = 0
            total_duration = 0
            total_calls = 0
            total_avg_duration = 0

        ctx = RequestContext(request, {
            'form': form,
            'total_data': total_data,
            'total_duration': total_duration,
            'total_calls': total_calls,
            'total_avg_duration': total_avg_duration,
            'max_duration': max_duration,
            'opts': opts,
            'model_name': opts.object_name.lower(),
            'app_label': APP_LABEL,
            'title': _('call aggregate report'),
        })
        return render_to_response('admin/dialer_cdr/voipcall/voip_report.html', context_instance=ctx)

    def export_voip_report(self, request):
        """Export a CSV file of VoIP call records

        **Important variable**:

            * request.session['admin_voipcall_record_kwargs'] - stores voipcall kwargs

        **Exported fields**: [user, callid, callerid, phone_number,
                              starting_date, duration, disposition,
                              used_gateway]
        """
        # get the response object, this can be used as a stream.
        format_type = request.GET['format']
        response = HttpResponse(mimetype='text/%s' % format_type)
        # force download.
        response['Content-Disposition'] = 'attachment;filename=export.%s' % format_type

        # super(VoIPCall_ReportAdmin, self).queryset(request)
        kwargs = request.session['admin_voipcall_record_kwargs']
        qs = VoIPCall.objects.filter(**kwargs)

        amd_status = ''
        if settings.AMD:
            amd_status = 'amd_status'

        headers = ('user', 'callid', 'callerid', 'phone_number', 'starting_date', 'duration',
                   'billsec', 'disposition', 'used_gateway', amd_status)

        list_val = []
        for i in qs:
            gateway_used = i.used_gateway.name if i.used_gateway else ''
            amd_status = i.amd_status if settings.AMD else ''

            starting_date = i.starting_date
            if format_type == Export_choice.JSON or format_type == Export_choice.XLS:
                starting_date = str(i.starting_date)

            list_val.append((i.user.username,
                             i.callid,
                             i.callerid,
                             i.phone_number,
                             starting_date,
                             i.duration,
                             i.billsec,
                             i.disposition,
                             gateway_used,
                             amd_status))

        data = tablib.Dataset(*list_val, headers=headers)

        if format_type == Export_choice.XLS:
            response.write(data.xls)
        elif format_type == Export_choice.CSV:
            response.write(data.csv)
        elif format_type == Export_choice.JSON:
            response.write(data.json)

        return response

admin.site.register(VoIPCall, VoIPCallAdmin)

########NEW FILE########
__FILENAME__ = constants
#
# Newfies-Dialer License
# http://www.newfies-dialer.org
#
# This Source Code Form is subject to the terms of the Mozilla Public
# License, v. 2.0. If a copy of the MPL was not distributed with this file,
# You can obtain one at http://mozilla.org/MPL/2.0/.
#
# Copyright (C) 2011-2014 Star2Billing S.L.
#
# The Initial Developer of the Original Code is
# Arezqui Belaid <info@star2billing.com>
#

from django.utils.translation import ugettext_lazy as _
from django_lets_go.utils import Choice


class CALLREQUEST_STATUS(Choice):
    """
    Store the Call Request Status
    """
    PENDING = 1, _("pending").capitalize()
    FAILURE = 2, _("failure").capitalize()
    RETRY = 3, _("retry").capitalize()
    SUCCESS = 4, _("success").capitalize()
    ABORT = 5, _("abort").capitalize()
    PAUSE = 6, _("pause").capitalize()
    CALLING = 7, _("calling").capitalize()


class CALLREQUEST_TYPE(Choice):
    """
    Store the Call Request Type
    """
    ALLOW_RETRY = 1, _('ALLOW RETRY')
    CANNOT_RETRY = 2, _('CANNOT RETRY')
    RETRY_DONE = 3, _('RETRY DONE')


class LEG_TYPE(Choice):
    """
    Store the Leg Type
    """
    A_LEG = 1, _('A-Leg')
    B_LEG = 2, _('B-Leg')


class VOIPCALL_DISPOSITION(Choice):
    """
    Store the Call Disposition
    """
    ANSWER = 'ANSWER', _('ANSWER')
    BUSY = 'BUSY', _('BUSY')
    NOANSWER = 'NOANSWER', _('NOANSWER')
    CANCEL = 'CANCEL', _('CANCEL')
    CONGESTION = 'CONGESTION', _('CONGESTION')
    FAILED = 'FAILED', _('FAILED')  # Added to catch all


class CDR_REPORT_COLUMN_NAME(Choice):
    """
    Column Name for the CDR Report
    """
    date = _('start date')
    call_id = _('call ID')
    leg = _('leg')
    caller_id = _('caller ID')
    phone_no = _('phone no')
    gateway = _('gateway')
    duration = _('duration')
    bill_sec = _('bill sec')
    disposition = _('disposition')
    amd_status = _('amd status')


class VOIPCALL_AMD_STATUS(Choice):
    """
    Store the AMD Status
    """
    PERSON = 1, _("person").capitalize()
    MACHINE = 2, _("machine").capitalize()
    UNSURE = 3, _("unsure").capitalize()

########NEW FILE########
__FILENAME__ = dialer_cdr_custom_spamlib
#
# Newfies-Dialer License
# http://www.newfies-dialer.org
#
# This Source Code Form is subject to the terms of the Mozilla Public
# License, v. 2.0. If a copy of the MPL was not distributed with this file,
# You can obtain one at http://mozilla.org/MPL/2.0/.
#
# Copyright (C) 2011-2014 Star2Billing S.L.
#
# The Initial Developer of the Original Code is
# Arezqui Belaid <info@star2billing.com>
#

from django.contrib.auth.models import User
from dilla import spam
import random
import logging

log = logging.getLogger('dilla')


@spam.strict_handler('dialer_cdr.VoIPCall.duration')
def get_duration(record, field):
    return random.randint(1, 100)


@spam.strict_handler('dialer_cdr.VoIPCall.user')
def get_user(record, field):
    return User.objects.get(pk=1)

########NEW FILE########
__FILENAME__ = forms
#
# Newfies-Dialer License
# http://www.newfies-dialer.org
#
# This Source Code Form is subject to the terms of the Mozilla Public
# License, v. 2.0. If a copy of the MPL was not distributed with this file,
# You can obtain one at http://mozilla.org/MPL/2.0/.
#
# Copyright (C) 2011-2014 Star2Billing S.L.
#
# The Initial Developer of the Original Code is
# Arezqui Belaid <info@star2billing.com>
#

from django import forms
from django.utils.translation import ugettext_lazy as _
from dialer_campaign.models import Campaign
from dialer_cdr.constants import VOIPCALL_DISPOSITION, LEG_TYPE
from dialer_contact.forms import SearchForm, AdminSearchForm

from mod_utils.forms import common_submit_buttons
from crispy_forms.helper import FormHelper
from crispy_forms.layout import Layout, Div

voip_call_disposition_list = []
voip_call_disposition_list.append(('all', _('all').upper()))
for i in VOIPCALL_DISPOSITION:
    voip_call_disposition_list.append((i[0], i[1]))


def get_leg_type_list():
    leg_type_list = []
    leg_type_list.append(('', _('all').upper()))
    LEG = dict(LEG_TYPE)
    for i in LEG:
        leg_type_list.append((i, LEG[i].encode('utf-8')))
    return leg_type_list


class VoipSearchForm(SearchForm):
    """
    VoIP call Report Search Parameters
    """
    disposition = forms.ChoiceField(label=_('disposition').capitalize(),
                                    choices=voip_call_disposition_list, required=False)
    campaign_id = forms.ChoiceField(label=_('campaign').capitalize(), required=False)
    leg_type = forms.ChoiceField(label=_("leg type").capitalize(), choices=list(LEG_TYPE), required=False)

    def __init__(self, user, *args, **kwargs):
        super(VoipSearchForm, self).__init__(*args, **kwargs)
        self.helper = FormHelper()
        self.helper.form_class = 'well'
        self.helper.layout = Layout(
            Div(
                Div('from_date', css_class='col-md-4'),
                Div('to_date', css_class='col-md-4'),
                Div('disposition', css_class='col-md-4'),
                Div('campaign_id', css_class='col-md-4'),
                Div('leg_type', css_class='col-md-4'),
                css_class='row'
            ),
        )
        common_submit_buttons(self.helper.layout, 'search')

        # To get user's campaign list which are attached with voipcall
        if user:
            self.fields['leg_type'].choices = get_leg_type_list()
            camp_list = []
            camp_list.append((0, _('all').upper()))
            content_type_list = ['survey']

            if user.is_superuser:
                # // , has_been_started=True
                campaign_list = Campaign.objects.values_list('id', 'name')\
                    .filter(content_type__model__in=content_type_list)\
                    .order_by('-id')
            else:
                # // , has_been_started=True
                campaign_list = Campaign.objects.values_list('id', 'name')\
                    .filter(user=user, content_type__model__in=content_type_list)\
                    .order_by('-id')

            for i in campaign_list:
                camp_list.append((i[0], i[1]))

            self.fields['campaign_id'].choices = camp_list


class AdminVoipSearchForm(AdminSearchForm):
    """
    VoIP call Report Search Parameters
    """
    disposition = forms.ChoiceField(label=_('disposition'), required=False, choices=voip_call_disposition_list)
    campaign_id = forms.ChoiceField(label=_('campaign'), required=False)
    leg_type = forms.ChoiceField(label=_("leg type"), choices=list(LEG_TYPE), required=False)

    def __init__(self, *args, **kwargs):
        super(AdminVoipSearchForm, self).__init__(*args, **kwargs)
        self.fields['leg_type'].choices = get_leg_type_list()

        campaign_list = []
        campaign_list.append((0, _('all').upper()))
        content_type_list = ['survey']

        # // , has_been_started=True
        camp_list = Campaign.objects.values_list('id', 'name')\
            .filter(content_type__model__in=content_type_list)\
            .order_by('-id')
        for i in camp_list:
            campaign_list.append((i[0], i[1]))

        self.fields['campaign_id'].choices = campaign_list

########NEW FILE########
__FILENAME__ = function_def
#
# Newfies-Dialer License
# http://www.newfies-dialer.org
#
# This Source Code Form is subject to the terms of the Mozilla Public
# License, v. 2.0. If a copy of the MPL was not distributed with this file,
# You can obtain one at http://mozilla.org/MPL/2.0/.
#
# Copyright (C) 2011-2014 Star2Billing S.L.
#
# The Initial Developer of the Original Code is
# Arezqui Belaid <info@star2billing.com>
#

from django.conf import settings
from django_lets_go.common_functions import getvar, ceil_strdate
from country_dialcode.models import Prefix
from datetime import datetime
from django.utils.timezone import utc


def voipcall_record_common_fun(request):
    """Return Form with Initial data or Array (kwargs) for Voipcall_Report
    Changelist_view"""
    start_date = ''
    end_date = ''
    start_date = getvar(request, 'from_date')
    end_date = getvar(request, 'to_date')

    # Assign form field value to local variable
    disposition = getvar(request, 'status')
    campaign_id = getvar(request, 'campaign_id')
    leg_type = getvar(request, 'leg_type')

    kwargs = {}
    if start_date and end_date:
        kwargs['starting_date__range'] = (start_date, end_date)
    if start_date and end_date == '':
        kwargs['starting_date__gte'] = start_date
    if start_date == '' and end_date:
        kwargs['starting_date__lte'] = end_date

    if disposition and disposition != 'all':
        kwargs['disposition__exact'] = disposition

    if campaign_id and campaign_id != '0':
        kwargs['callrequest__campaign_id'] = campaign_id

    if leg_type and leg_type != '':
        kwargs['leg_type__exact'] = leg_type

    if len(kwargs) == 0:
        tday = datetime.today()
        kwargs['starting_date__gte'] = datetime(tday.year, tday.month, tday.day, 0, 0, 0, 0).replace(tzinfo=utc)
        kwargs['starting_date__lte'] = datetime(tday.year, tday.month, tday.day, 23, 59, 59).replace(tzinfo=utc)
    return kwargs


def return_query_string(query_string, para):
    """
    Function is used in voipcall_search_admin_form_fun

    >>> return_query_string('key=1', 'key_val=apple')
    'key=1&key_val=apple'
    >>> return_query_string(False, 'key_val=apple')
    'key_val=apple'
    """
    if query_string:
        query_string += '&%s' % (para)
    else:
        query_string = para
    return query_string


def voipcall_search_admin_form_fun(request):
    """Return query string for Voipcall_Report Changelist_view"""
    start_date = ''
    end_date = ''
    if request.POST.get('from_date'):
        start_date = request.POST.get('from_date')

    if request.POST.get('to_date'):
        end_date = request.POST.get('to_date')

    # Assign form field value to local variable
    disposition = getvar(request, 'status')
    campaign_id = getvar(request, 'campaign_id')
    leg_type = getvar(request, 'leg_type')
    query_string = ''

    if start_date and end_date:
        date_string = 'starting_date__gte=' + start_date + \
            '&starting_date__lte=' + end_date + '+23%3A59%3A59'
        query_string = return_query_string(query_string, date_string)

    if start_date and end_date == '':
        date_string = 'starting_date__gte=' + start_date
        query_string = return_query_string(query_string, date_string)

    if start_date == '' and end_date:
        date_string = 'starting_date__lte=' + end_date
        query_string = return_query_string(query_string, date_string)

    if disposition and disposition != 'all':
        disposition_string = 'disposition__exact=' + disposition
        query_string = return_query_string(query_string, disposition_string)

    if campaign_id and campaign_id != '0':
        campaign_string = 'callrequest__campaign_id=' + str(campaign_id)
        query_string = return_query_string(query_string, campaign_string)

    if leg_type and leg_type != '':
        leg_type_string = 'leg_type__exact=' + str(leg_type)
        query_string = return_query_string(query_string, leg_type_string)

    if start_date == '' and end_date == '':
        tday = datetime.today()
        end_date = start_date = tday.strftime("%Y-%m-%d")
        date_string = 'starting_date__gte=' + start_date + \
            '&starting_date__lte=' + end_date + '+23%3A59%3A59'
        query_string = return_query_string(query_string, date_string)

    return query_string


def prefix_list_string(phone_number):
    """
    To return prefix string
    For Example :-
    phone_no = 34650XXXXXX
    prefix_string = (34650, 3465, 346, 34)

    >>> phone_no = 34650123456

    >>> prefix_list_string(phone_no)
    '34650, 3465, 346, 34'

    >>> phone_no = 34650123456

    >>> prefix_list_string(phone_no)
    '34650, 3465, 346, 34'
    """
    try:
        int(phone_number)
    except ValueError:
        return False
    phone_number = str(phone_number)
    prefix_range = range(settings.PREFIX_LIMIT_MIN, settings.PREFIX_LIMIT_MAX + 1)
    prefix_range.reverse()
    destination_prefix_list = ''
    for i in prefix_range:
        if i == settings.PREFIX_LIMIT_MIN:
            destination_prefix_list = destination_prefix_list + phone_number[0:i]
        else:
            destination_prefix_list = destination_prefix_list + phone_number[0:i] + ', '
    return str(destination_prefix_list)


def get_prefix_obj(phonenumber):
    """Get Prefix object"""
    prefix_obj = None
    list_prefix = prefix_list_string(phonenumber)
    if list_prefix:
        split_prefix_list = list_prefix.split(',')
        for prefix in split_prefix_list:
            try:
                prefix_obj = Prefix.objects.get(prefix=int(prefix))
                break
            except:
                prefix_obj = None
    return prefix_obj

########NEW FILE########
__FILENAME__ = create_callrequest_cdr
#
# Newfies-Dialer License
# http://www.newfies-dialer.org
#
# This Source Code Form is subject to the terms of the Mozilla Public
# License, v. 2.0. If a copy of the MPL was not distributed with this file,
# You can obtain one at http://mozilla.org/MPL/2.0/.
#
# Copyright (C) 2011-2014 Star2Billing S.L.
#
# The Initial Developer of the Original Code is
# Arezqui Belaid <info@star2billing.com>
#

from django.core.management.base import BaseCommand
from optparse import make_option
from django.utils.translation import gettext_lazy as _
from django.contrib.contenttypes.models import ContentType
from dialer_campaign.models import Campaign
from dialer_cdr.models import Callrequest, VoIPCall
#from survey.models import Section
from random import choice
from uuid import uuid1
from datetime import datetime, timedelta
from django.utils.timezone import utc
import random
import bisect

VOIPCALL_DISPOSITION = [
    ('ANSWER', 80), ('BUSY', 10), ('NOANSWER', 20), ('CANCEL', 5), ('CONGESTION', 4), ('FAILED', 10)]
SURVEY_RESULT_QUE = [
    'Please rank our support from 1 to 9, 1 being low and 9 being high',
    'Were you satisfy by the technical expertise of our agent, '
    'press 1 for yes press 2 for no and 3 to go back',
    'lease record a message to comment on our agent after the beep'
]
VOIPCALL_AMD_STATUS = [1, 2, 3]
RESPONSE = ['apple', 'orange', 'banana', 'mango', 'greps', 'watermelon']
PHONENUMBER_LENGHT = 5


class Command(BaseCommand):
    args = 'campaign_id, amount, delta_day'
    help = "Generate fake Call-requests and CDRs for a given campaign_id\n" \
           "------------------------------------------------------------\n" \
           "python manage.py create_callrequest_cdr --campaign_id=1 --amount=100 --delta-day=0"

    option_list = BaseCommand.option_list + (
        make_option('--amount', default=None, dest='amount', help=help),
        make_option('--delta-day', default=None, dest='delta-day', help=help),
        make_option('--campaign_id', default=None, dest='campaign_id', help=help),
    )

    def handle(self, *args, **options):
        """
        We will parse and set default values to parameters
        """
        amount = 1  # default
        if options.get('amount'):
            try:
                amount = int(options.get('amount'))
            except ValueError:
                amount = 1

        day_delta = 30  # default
        if options.get('delta-day'):
            try:
                day_delta = int(options.get('delta-day'))
            except ValueError:
                day_delta = 30

        campaign_id = 1  # default
        if options.get('campaign_id'):
            try:
                campaign_id = options.get('campaign_id')
                campaign_id = int(campaign_id)
            except ValueError:
                campaign_id = 1

        create_callrequest(campaign_id, amount, day_delta)


def weighted_choice(choices):
    values, weights = zip(*choices)
    total = 0
    cum_weights = []
    for w in weights:
        total += w
        cum_weights.append(total)
    x = random.random() * total
    i = bisect.bisect(cum_weights, x)
    return values[i]


def create_callrequest(campaign_id, amount, day_delta):
    """
    This function create fake Callrequest for a given:
        * campaign_id
        * amount
        * day_delta

    """
    try:
        obj_campaign = Campaign.objects.get(id=campaign_id)
    except:
        print _('Can\'t find this Campaign : %(id)s' % {'id': campaign_id})
        return False

    #content_type_id is survey
    try:
        content_type_id = ContentType.objects.get(model='survey').id
    except:
        content_type_id = 1

    list_vc = []
    for i in range(1, int(amount) + 1):
        delta_days = random.randint(0, day_delta)
        delta_minutes = random.randint(-720, 720)
        created_date = datetime.utcnow().replace(tzinfo=utc) \
            - timedelta(minutes=delta_minutes) \
            - timedelta(days=delta_days)

        phonenumber = '' . join([choice("1234567890") for i in range(PHONENUMBER_LENGHT)])
        new_callrequest = Callrequest.objects.create(
            request_uuid=uuid1(),
            user=obj_campaign.user,
            phone_number=phonenumber,
            campaign=obj_campaign,
            aleg_gateway_id=1,
            status=choice("12345678"),
            call_type=1,
            content_type_id=content_type_id,
            call_time=created_date,
            created_date=created_date,
            object_id=1)
        print "new_callrequest: " + str(new_callrequest)

        new_voipcall = VoIPCall(
            request_uuid=uuid1(),
            callid=uuid1(),
            user=obj_campaign.user,
            callrequest=new_callrequest,
            starting_date=created_date,
            phone_number=phonenumber,
            duration=random.randint(50, 1000),
            disposition=weighted_choice(VOIPCALL_DISPOSITION),
            amd_status=choice(VOIPCALL_AMD_STATUS))
        new_voipcall.starting_date = created_date
        # print "voipcall: " + str(new_voipcall)
        list_vc.append(new_voipcall)

        if i % 100 == 0:
            VoIPCall.objects.bulk_create(list_vc)
            list_vc = []

        """
        alpha = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ'
        response_count = choice("1234567890")

        # print "Get list section:"
        from survey.models import Section, ResultAggregate
        list_section = Section.objects.filter(survey_id=obj_campaign.object_id)
        #list_section = Section.objects.all()


        for j in range(1, 3):
            section_id = random.randint(0, len(list_section) - 1)
            print section_id
            print list_section[section_id]
            print "-----------------"
            try:
                cpg_result = Result.objects.create(
                                    section=list_section[section_id],
                                    response=choice(RESPONSE),
                                    record_file='xyz.mp3',
                                    recording_duration=10,
                                    callrequest=new_callrequest)
            except:
                pass
        #response = '' . join([choice(alpha) for i in range(length)])
        ResultAggregate.objects.create(
                            survey_id=obj_campaign.object_id,
                            section=list_section[section_id],
                            response=choice(RESPONSE),
                            #response=response,
                            count=response_count)
        """

    # create the last one
    if list_vc:
        VoIPCall.objects.bulk_create(list_vc)

    print _("Callrequests and CDRs created : %(count)s" % {'count': amount})

########NEW FILE########
__FILENAME__ = simulator
#
# Newfies-Dialer License
# http://www.newfies-dialer.org
#
# This Source Code Form is subject to the terms of the Mozilla Public
# License, v. 2.0. If a copy of the MPL was not distributed with this file,
# You can obtain one at http://mozilla.org/MPL/2.0/.
#
# Copyright (C) 2011-2014 Star2Billing S.L.
#
# The Initial Developer of the Original Code is
# Arezqui Belaid <info@star2billing.com>
#

from django.core.management.base import BaseCommand
from django.contrib.contenttypes.models import ContentType
from django.contrib.auth.models import User
from django.db import IntegrityError
from optparse import make_option
from dialer_campaign.models import Campaign, Subscriber
from dialer_campaign.constants import SUBSCRIBER_STATUS
from dialer_contact.models import Contact, Phonebook
from dialer_cdr.models import Callrequest
from dialer_cdr.constants import CALLREQUEST_TYPE
from callcenter.models import CallAgent
from callcenter.constants import AGENT_CALLSTATE_TYPE
from agent.models import Agent, AgentProfile
from random import choice, randint
from uuid import uuid1
import time
from datetime import datetime, timedelta
from django.utils.timezone import utc
from faker import Factory


def create_callrequest(phonenumber, campaign, subscriber):
    # Create callrequest
    admin_user = User.objects.filter(is_superuser=True)[0]

    #content_type_id is survey
    try:
        content_type_id = ContentType.objects.get(model='survey').id
    except:
        content_type_id = 1

    delta_days = randint(0, 10)
    delta_minutes = randint(-720, 720)
    created_date = datetime.utcnow().replace(tzinfo=utc) \
        - timedelta(minutes=delta_minutes) \
        - timedelta(days=delta_days)

    new_callrequest = Callrequest.objects.create(
        request_uuid=uuid1(),
        user=admin_user,
        phone_number=phonenumber,
        campaign=campaign,
        aleg_gateway=campaign.aleg_gateway,
        status=choice("12345678"),
        call_type=CALLREQUEST_TYPE.ALLOW_RETRY,
        content_type_id=content_type_id,
        call_time=created_date,
        created_date=created_date,
        object_id=campaign.object_id,
        subscriber=subscriber)

    return new_callrequest


def create_contact_subscriber(campaign, phonebook_id, agent_id):
    """Create new contact and subscriber"""
    length = 10
    chars = "1234567890"
    phonenumber = '' . join([choice(chars) for i in range(length)])
    print "phonenumber => %s" % phonenumber

    faker = Factory.create()
    faker.name()

    try:
        new_contact = Contact.objects.create(
            contact=phonenumber,
            phonebook_id=phonebook_id,
            first_name=faker.firstName(),
            last_name=faker.lastName(),
            email=faker.email(),
            address=faker.address(),
            city=faker.city(),
            state=faker.state(),
            country=faker.countryCode(),
            description=faker.text())
    except IntegrityError:
        print "Duplicate contact!"
        return False

    try:
        print "created contact=>%s (%d)" % (str(new_contact), new_contact.id)

        #When contact is created a subscriber is created automatically

        #Get Subscriber
        subscriber = Subscriber.objects.get(contact=new_contact, campaign_id=campaign.id)
        #Simulate the process of them being called and moved to the queue of the agent

        subscriber.status = SUBSCRIBER_STATUS.SENT
        subscriber.save()

    except IntegrityError:
        print "Cannot find subscriber!"
        return False

    try:
        # Create Callrequest

        new_callrequest = create_callrequest(phonenumber, campaign, subscriber)
        #print "new_callrequest: " + str(new_callrequest)

        # when a subscriber is routed to an agent
        # an instance is created in the CallAgent table

        #The agent name to test the simulator1 is 'agent'
        #Other scenario will implement several agent

        call_agent = CallAgent.objects.create(
            callrequest=new_callrequest,
            agent=AgentProfile.objects.get(user_id=agent_id),
            callstate=AGENT_CALLSTATE_TYPE.agent_offering,
        )

        print "new_call_agent: " + str(call_agent)

    except IntegrityError:
        print "Duplicate callrequest!"
        raise
        return False

    data = {
        'new_callrequest_id': new_callrequest.id,
        'call_agent_id': call_agent.id,
    }
    return data


class Command(BaseCommand):
    args = 'scenario'
    help = "Simulator\n" \
           "---------------------------\n" \
           "python manage.py simulator --scenario=1"

    option_list = BaseCommand.option_list + (
        make_option('--scenario',
                    default=1,
                    dest='scenario',
                    help="number representing the scenario that will be triggered (value: 1, 2 or 3)"),
    )

    def handle(self, *args, **options):
        """Note that subscriber created with callrequest"""

        campaign = Campaign.objects.all()[0]
        if campaign.phonebook.all().count() > 0:
            phonebook_id = campaign.phonebook.all()[0].id
        else:
            phonebook_id = Phonebook.objects.all()[0].id

        scenario = 1  # default
        try:
            scenario = int(options.get('scenario'))
        except ValueError:
            scenario = 1

        # delete previous contacts & subscriber
        #Contact.objects.filter(phonebook_id=phonebook_id).delete()
        #Subscriber.objects.filter(campaign=campaign).delete()
        #delay_list = [20, 10, 20]
        agent_id = Agent.objects.get(username='agent').id
        #print "agent => %s" % str(agent)

        if scenario == 1:
            # Implement scenario 1
            scenario_1(campaign, phonebook_id, agent_id)
        elif scenario == 2:
            # Implement scenario 2
            scenario_2(campaign, phonebook_id, agent_id)
        else:
            print("No scenario...")


def scenario_1(campaign, phonebook_id, agent_id):
    # Implementation scenario 1
    # Delete previous CallAgent data which are belong to agent_id
    #CallAgent.objects.filter(agent__user_id=agent_id).delete()
    CallAgent.objects.all().delete()

    time2wrapup = 3
    time2sleep = 15

    data = create_contact_subscriber(campaign, phonebook_id, agent_id)
    print Callrequest.objects.get(pk=data['new_callrequest_id'])

    time.sleep(time2wrapup)

    call_agent = CallAgent.objects.get(pk=data['call_agent_id'])
    call_agent.callstate = AGENT_CALLSTATE_TYPE.bridge_agent_start
    call_agent.save()

    print "delay : %s sec" % str(time2sleep)
    time.sleep(time2sleep)
    # When a subscriber finish the call with the agent
    # callrequest is removed from CallAgent
    call_agent.delete()

    data = create_contact_subscriber(campaign, phonebook_id, agent_id)
    print Callrequest.objects.get(pk=data['new_callrequest_id'])

    time.sleep(time2wrapup)

    call_agent = CallAgent.objects.get(pk=data['call_agent_id'])
    call_agent.callstate = AGENT_CALLSTATE_TYPE.bridge_agent_start
    call_agent.save()

    print "delay : %s sec" % str(time2sleep)
    time.sleep(time2sleep)
    # When a subscriber finish the call with the agent
    # callrequest is removed from CallAgent
    call_agent.delete()


def scenario_2(campaign, phonebook_id, agent_id):
    # Implementation scenario 2
    # Delete previous CallAgent data which are belong to agent_id
    #CallAgent.objects.filter(agent__user_id=agent_id).delete()
    CallAgent.objects.all().delete()

    time2wrapup = 5
    time2sleep = 15

    # Step 1 (for the first 20 seconds : 0-20 secs)
    # - Create contact (5 secs: agent_offering, then during 15 secs bridge_agent_start)
    data = create_contact_subscriber(campaign, phonebook_id, agent_id)
    print Callrequest.objects.get(pk=data['new_callrequest_id'])
    time.sleep(time2wrapup)

    call_agent = CallAgent.objects.get(pk=data['call_agent_id'])
    call_agent.callstate = AGENT_CALLSTATE_TYPE.bridge_agent_start
    call_agent.save()

    print "delay : %s sec" % str(time2sleep)
    time.sleep(time2sleep)
    call_agent.delete()

    # Step 2 (for the first 20 seconds : 0-20 secs)
    # - Create contact (5 secs: agent_offering) but no bridge_agent_start
    data = create_contact_subscriber(campaign, phonebook_id, agent_id)
    print Callrequest.objects.get(pk=data['new_callrequest_id'])
    time.sleep(time2wrapup)

    call_agent = CallAgent.objects.get(pk=data['call_agent_id'])
    #print "delay : %s sec" % str(time2sleep)
    #time.sleep(time2sleep)
    call_agent.delete()

    # Step 3 (for the first 20 seconds : 0-20 secs)
    # - Create contact (5 secs: agent_offering, then during 15 secs bridge_agent_start)
    data = create_contact_subscriber(campaign, phonebook_id, agent_id)
    print Callrequest.objects.get(pk=data['new_callrequest_id'])
    time.sleep(time2wrapup)

    call_agent = CallAgent.objects.get(pk=data['call_agent_id'])
    call_agent.callstate = AGENT_CALLSTATE_TYPE.bridge_agent_start
    call_agent.save()

    print "delay : %s sec" % str(time2sleep)
    time.sleep(time2sleep)
    call_agent.delete()

    # Step 4 (for the first 20 seconds : 0-20 secs)
    # - Create contact (5 secs: agent_offering, then during 1 secs bridge_agent_start)
    data = create_contact_subscriber(campaign, phonebook_id, agent_id)
    print Callrequest.objects.get(pk=data['new_callrequest_id'])
    time.sleep(time2wrapup)

    call_agent = CallAgent.objects.get(pk=data['call_agent_id'])
    call_agent.callstate = AGENT_CALLSTATE_TYPE.bridge_agent_start
    call_agent.save()

    print "delay : %s sec" % str(1)
    time.sleep(1)
    call_agent.delete()

    # Step 5 (for the first 20 seconds : 0-20 secs)
    # - Create contact (5 secs: agent_offering, then during 15 secs bridge_agent_start)
    data = create_contact_subscriber(campaign, phonebook_id, agent_id)
    print Callrequest.objects.get(pk=data['new_callrequest_id'])
    time.sleep(time2wrapup)

    call_agent = CallAgent.objects.get(pk=data['call_agent_id'])
    call_agent.callstate = AGENT_CALLSTATE_TYPE.bridge_agent_start
    call_agent.save()

    print "delay : %s sec" % str(time2sleep)
    time.sleep(time2sleep)
    call_agent.delete()

########NEW FILE########
__FILENAME__ = 0001_initial
# -*- coding: utf-8 -*-
import datetime
from south.db import db
from south.v2 import SchemaMigration
from django.db import models


class Migration(SchemaMigration):

    def forwards(self, orm):
        # Adding model 'Callrequest'
        db.create_table(u'dialer_callrequest', (
            (u'id', self.gf('django.db.models.fields.AutoField')(primary_key=True)),
            ('user', self.gf('django.db.models.fields.related.ForeignKey')(to=orm['auth.User'])),
            ('request_uuid', self.gf('django.db.models.fields.CharField')(default='9044872e-6067-11e3-a48e-00231470a30c', max_length=120, null=True, db_index=True, blank=True)),
            ('aleg_uuid', self.gf('django.db.models.fields.CharField')(max_length=120, null=True, blank=True)),
            ('call_time', self.gf('django.db.models.fields.DateTimeField')(default=datetime.datetime(2013, 12, 9, 0, 0))),
            ('created_date', self.gf('django.db.models.fields.DateTimeField')(auto_now_add=True, blank=True)),
            ('updated_date', self.gf('django.db.models.fields.DateTimeField')(auto_now=True, blank=True)),
            ('call_type', self.gf('django.db.models.fields.IntegerField')(default=1, null=True, blank=True)),
            ('status', self.gf('django.db.models.fields.IntegerField')(default=1, null=True, db_index=True, blank=True)),
            ('callerid', self.gf('django.db.models.fields.CharField')(max_length=80, blank=True)),
            ('phone_number', self.gf('django.db.models.fields.CharField')(max_length=80)),
            ('timeout', self.gf('django.db.models.fields.IntegerField')(default=30, blank=True)),
            ('timelimit', self.gf('django.db.models.fields.IntegerField')(default=3600, blank=True)),
            ('extra_dial_string', self.gf('django.db.models.fields.CharField')(max_length=500, blank=True)),
            ('subscriber', self.gf('django.db.models.fields.related.ForeignKey')(to=orm['dialer_campaign.Subscriber'], null=True, blank=True)),
            ('campaign', self.gf('django.db.models.fields.related.ForeignKey')(to=orm['dialer_campaign.Campaign'], null=True, blank=True)),
            ('aleg_gateway', self.gf('django.db.models.fields.related.ForeignKey')(to=orm['dialer_gateway.Gateway'], null=True, blank=True)),
            ('content_type', self.gf('django.db.models.fields.related.ForeignKey')(to=orm['contenttypes.ContentType'])),
            ('object_id', self.gf('django.db.models.fields.PositiveIntegerField')()),
            ('completed', self.gf('django.db.models.fields.BooleanField')(default=False)),
            ('extra_data', self.gf('django.db.models.fields.CharField')(max_length=120, blank=True)),
            ('num_attempt', self.gf('django.db.models.fields.IntegerField')(default=0)),
            ('last_attempt_time', self.gf('django.db.models.fields.DateTimeField')(null=True, blank=True)),
            ('result', self.gf('django.db.models.fields.CharField')(max_length=180, blank=True)),
            ('hangup_cause', self.gf('django.db.models.fields.CharField')(max_length=80, blank=True)),
            ('parent_callrequest', self.gf('django.db.models.fields.related.ForeignKey')(to=orm['dialer_cdr.Callrequest'], null=True, blank=True)),
        ))
        db.send_create_signal(u'dialer_cdr', ['Callrequest'])

        # Adding model 'VoIPCall'
        db.create_table('dialer_cdr', (
            (u'id', self.gf('django.db.models.fields.AutoField')(primary_key=True)),
            ('user', self.gf('django.db.models.fields.related.ForeignKey')(related_name='Call Sender', to=orm['auth.User'])),
            ('request_uuid', self.gf('django.db.models.fields.CharField')(default='904536ce-6067-11e3-a48e-00231470a30c', max_length=120, null=True, blank=True)),
            ('used_gateway', self.gf('django.db.models.fields.related.ForeignKey')(to=orm['dialer_gateway.Gateway'], null=True, blank=True)),
            ('callrequest', self.gf('django.db.models.fields.related.ForeignKey')(to=orm['dialer_cdr.Callrequest'], null=True, blank=True)),
            ('callid', self.gf('django.db.models.fields.CharField')(max_length=120)),
            ('callerid', self.gf('django.db.models.fields.CharField')(max_length=120)),
            ('phone_number', self.gf('django.db.models.fields.CharField')(max_length=120, null=True, blank=True)),
            ('dialcode', self.gf('django.db.models.fields.related.ForeignKey')(to=orm['country_dialcode.Prefix'], null=True, blank=True)),
            ('starting_date', self.gf('django.db.models.fields.DateTimeField')(auto_now_add=True, db_index=True, blank=True)),
            ('duration', self.gf('django.db.models.fields.IntegerField')(null=True, blank=True)),
            ('billsec', self.gf('django.db.models.fields.IntegerField')(null=True, blank=True)),
            ('progresssec', self.gf('django.db.models.fields.IntegerField')(null=True, blank=True)),
            ('answersec', self.gf('django.db.models.fields.IntegerField')(null=True, blank=True)),
            ('waitsec', self.gf('django.db.models.fields.IntegerField')(null=True, blank=True)),
            ('disposition', self.gf('django.db.models.fields.CharField')(max_length=40, null=True, blank=True)),
            ('hangup_cause', self.gf('django.db.models.fields.CharField')(max_length=40, null=True, blank=True)),
            ('hangup_cause_q850', self.gf('django.db.models.fields.CharField')(max_length=10, null=True, blank=True)),
            ('leg_type', self.gf('django.db.models.fields.SmallIntegerField')(default=1, null=True, blank=True)),
            ('amd_status', self.gf('django.db.models.fields.SmallIntegerField')(default=1, null=True, blank=True)),
        ))
        db.send_create_signal(u'dialer_cdr', ['VoIPCall'])

    def backwards(self, orm):
        # Deleting model 'Callrequest'
        db.delete_table(u'dialer_callrequest')

        # Deleting model 'VoIPCall'
        db.delete_table('dialer_cdr')

    models = {
        u'audiofield.audiofile': {
            'Meta': {'object_name': 'AudioFile', 'db_table': "u'audio_file'"},
            'audio_file': ('audiofield.fields.AudioField', [], {'ext_whitelist': "['.mp3', '.wav', '.ogg']", 'max_length': '100', 'blank': 'True'}),
            'created_date': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            u'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '150'}),
            'updated_date': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'blank': 'True'}),
            'user': ('django.db.models.fields.related.ForeignKey', [], {'to': u"orm['auth.User']"})
        },
        u'auth.group': {
            'Meta': {'object_name': 'Group'},
            u'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '80'}),
            'permissions': ('django.db.models.fields.related.ManyToManyField', [], {'to': u"orm['auth.Permission']", 'symmetrical': 'False', 'blank': 'True'})
        },
        u'auth.permission': {
            'Meta': {'ordering': "(u'content_type__app_label', u'content_type__model', u'codename')", 'unique_together': "((u'content_type', u'codename'),)", 'object_name': 'Permission'},
            'codename': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'content_type': ('django.db.models.fields.related.ForeignKey', [], {'to': u"orm['contenttypes.ContentType']"}),
            u'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '50'})
        },
        u'auth.user': {
            'Meta': {'object_name': 'User'},
            'date_joined': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
            'email': ('django.db.models.fields.EmailField', [], {'max_length': '75', 'blank': 'True'}),
            'first_name': ('django.db.models.fields.CharField', [], {'max_length': '30', 'blank': 'True'}),
            'groups': ('django.db.models.fields.related.ManyToManyField', [], {'symmetrical': 'False', 'related_name': "u'user_set'", 'blank': 'True', 'to': u"orm['auth.Group']"}),
            u'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'is_active': ('django.db.models.fields.BooleanField', [], {'default': 'True'}),
            'is_staff': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'is_superuser': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'last_login': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
            'last_name': ('django.db.models.fields.CharField', [], {'max_length': '30', 'blank': 'True'}),
            'password': ('django.db.models.fields.CharField', [], {'max_length': '128'}),
            'user_permissions': ('django.db.models.fields.related.ManyToManyField', [], {'symmetrical': 'False', 'related_name': "u'user_set'", 'blank': 'True', 'to': u"orm['auth.Permission']"}),
            'username': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '30'})
        },
        u'contenttypes.contenttype': {
            'Meta': {'ordering': "('name',)", 'unique_together': "(('app_label', 'model'),)", 'object_name': 'ContentType', 'db_table': "'django_content_type'"},
            'app_label': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            u'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'model': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '100'})
        },
        u'country_dialcode.country': {
            'Meta': {'object_name': 'Country', 'db_table': "'dialcode_country'"},
            'countrycode': ('django.db.models.fields.CharField', [], {'max_length': '3'}),
            'countryname': ('django.db.models.fields.CharField', [], {'max_length': '240'}),
            'countryprefix': ('django.db.models.fields.IntegerField', [], {'max_length': '12'}),
            u'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'iso2': ('django.db.models.fields.CharField', [], {'default': "''", 'max_length': '2'})
        },
        u'country_dialcode.prefix': {
            'Meta': {'ordering': "['prefix']", 'object_name': 'Prefix', 'db_table': "'dialcode_prefix'"},
            'carrier_name': ('django.db.models.fields.CharField', [], {'max_length': '180'}),
            'country_id': ('django.db.models.fields.related.ForeignKey', [], {'to': u"orm['country_dialcode.Country']", 'null': 'True', 'db_column': "'country_id'", 'blank': 'True'}),
            'destination': ('django.db.models.fields.CharField', [], {'max_length': '180'}),
            'prefix': ('django.db.models.fields.IntegerField', [], {'primary_key': 'True'}),
            'prefix_type': ('django.db.models.fields.IntegerField', [], {'default': '1'})
        },
        u'dialer_campaign.campaign': {
            'Meta': {'object_name': 'Campaign', 'db_table': "u'dialer_campaign'"},
            'agent_script': ('django.db.models.fields.TextField', [], {'null': 'True', 'blank': 'True'}),
            'aleg_gateway': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'A-Leg Gateway'", 'to': u"orm['dialer_gateway.Gateway']"}),
            'amd_behavior': ('django.db.models.fields.IntegerField', [], {'default': '1', 'null': 'True', 'blank': 'True'}),
            'caller_name': ('django.db.models.fields.CharField', [], {'max_length': '80', 'blank': 'True'}),
            'callerid': ('django.db.models.fields.CharField', [], {'max_length': '80', 'blank': 'True'}),
            'callmaxduration': ('django.db.models.fields.IntegerField', [], {'default': "'1800'", 'null': 'True', 'blank': 'True'}),
            'calltimeout': ('django.db.models.fields.IntegerField', [], {'default': "'45'", 'null': 'True', 'blank': 'True'}),
            'campaign_code': ('django.db.models.fields.CharField', [], {'default': "'EIMCG'", 'unique': 'True', 'max_length': '20', 'blank': 'True'}),
            'completed': ('django.db.models.fields.IntegerField', [], {'default': '0', 'null': 'True', 'blank': 'True'}),
            'completion_intervalretry': ('django.db.models.fields.IntegerField', [], {'default': "'900'", 'null': 'True', 'blank': 'True'}),
            'completion_maxretry': ('django.db.models.fields.IntegerField', [], {'default': "'0'", 'null': 'True', 'blank': 'True'}),
            'content_type': ('django.db.models.fields.related.ForeignKey', [], {'to': u"orm['contenttypes.ContentType']"}),
            'created_date': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'daily_start_time': ('django.db.models.fields.TimeField', [], {'default': "'00:00:00'"}),
            'daily_stop_time': ('django.db.models.fields.TimeField', [], {'default': "'23:59:59'"}),
            'description': ('django.db.models.fields.TextField', [], {'null': 'True', 'blank': 'True'}),
            'dnc': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'DNC'", 'null': 'True', 'to': u"orm['dnc.DNC']"}),
            'expirationdate': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime(2013, 12, 10, 0, 0)'}),
            'external_link': ('jsonfield.fields.JSONField', [], {'null': 'True', 'blank': 'True'}),
            'extra_data': ('django.db.models.fields.CharField', [], {'max_length': '120', 'blank': 'True'}),
            'frequency': ('django.db.models.fields.IntegerField', [], {'default': "'10'", 'null': 'True', 'blank': 'True'}),
            'friday': ('django.db.models.fields.BooleanField', [], {'default': 'True'}),
            'has_been_duplicated': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'has_been_started': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            u'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'imported_phonebook': ('django.db.models.fields.CharField', [], {'default': "''", 'max_length': '500', 'blank': 'True'}),
            'intervalretry': ('django.db.models.fields.IntegerField', [], {'default': "'300'", 'null': 'True', 'blank': 'True'}),
            'lead_disposition': ('django.db.models.fields.TextField', [], {'null': 'True', 'blank': 'True'}),
            'maxretry': ('django.db.models.fields.IntegerField', [], {'default': "'0'", 'null': 'True', 'blank': 'True'}),
            'monday': ('django.db.models.fields.BooleanField', [], {'default': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'object_id': ('django.db.models.fields.PositiveIntegerField', [], {}),
            'phonebook': ('django.db.models.fields.related.ManyToManyField', [], {'symmetrical': 'False', 'to': u"orm['dialer_contact.Phonebook']", 'null': 'True', 'blank': 'True'}),
            'saturday': ('django.db.models.fields.BooleanField', [], {'default': 'True'}),
            'startingdate': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime(2013, 12, 9, 0, 0)'}),
            'status': ('django.db.models.fields.IntegerField', [], {'default': '2', 'null': 'True', 'blank': 'True'}),
            'sunday': ('django.db.models.fields.BooleanField', [], {'default': 'True'}),
            'thursday': ('django.db.models.fields.BooleanField', [], {'default': 'True'}),
            'totalcontact': ('django.db.models.fields.IntegerField', [], {'default': '0', 'null': 'True', 'blank': 'True'}),
            'tuesday': ('django.db.models.fields.BooleanField', [], {'default': 'True'}),
            'updated_date': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'blank': 'True'}),
            'user': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'Campaign owner'", 'to': u"orm['auth.User']"}),
            'voicemail': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'voicemail_audiofile': ('django.db.models.fields.related.ForeignKey', [], {'to': u"orm['audiofield.AudioFile']", 'null': 'True', 'blank': 'True'}),
            'wednesday': ('django.db.models.fields.BooleanField', [], {'default': 'True'})
        },
        u'dialer_campaign.subscriber': {
            'Meta': {'unique_together': "(['contact', 'campaign'],)", 'object_name': 'Subscriber', 'db_table': "u'dialer_subscriber'"},
            'agent': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'agent'", 'null': 'True', 'to': u"orm['auth.User']"}),
            'campaign': ('django.db.models.fields.related.ForeignKey', [], {'to': u"orm['dialer_campaign.Campaign']", 'null': 'True', 'blank': 'True'}),
            'collected_data': ('django.db.models.fields.TextField', [], {'null': 'True', 'blank': 'True'}),
            'completion_count_attempt': ('django.db.models.fields.IntegerField', [], {'default': '0', 'null': 'True', 'blank': 'True'}),
            'contact': ('django.db.models.fields.related.ForeignKey', [], {'to': u"orm['dialer_contact.Contact']", 'null': 'True', 'blank': 'True'}),
            'count_attempt': ('django.db.models.fields.IntegerField', [], {'default': '0', 'null': 'True', 'blank': 'True'}),
            'created_date': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'disposition': ('django.db.models.fields.IntegerField', [], {'null': 'True', 'blank': 'True'}),
            'duplicate_contact': ('django.db.models.fields.CharField', [], {'max_length': '90'}),
            u'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'last_attempt': ('django.db.models.fields.DateTimeField', [], {'null': 'True', 'blank': 'True'}),
            'status': ('django.db.models.fields.IntegerField', [], {'default': '1', 'null': 'True', 'blank': 'True'}),
            'updated_date': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'db_index': 'True', 'blank': 'True'})
        },
        u'dialer_cdr.callrequest': {
            'Meta': {'object_name': 'Callrequest', 'db_table': "u'dialer_callrequest'"},
            'aleg_gateway': ('django.db.models.fields.related.ForeignKey', [], {'to': u"orm['dialer_gateway.Gateway']", 'null': 'True', 'blank': 'True'}),
            'aleg_uuid': ('django.db.models.fields.CharField', [], {'max_length': '120', 'null': 'True', 'blank': 'True'}),
            'call_time': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime(2013, 12, 9, 0, 0)'}),
            'call_type': ('django.db.models.fields.IntegerField', [], {'default': '1', 'null': 'True', 'blank': 'True'}),
            'callerid': ('django.db.models.fields.CharField', [], {'max_length': '80', 'blank': 'True'}),
            'campaign': ('django.db.models.fields.related.ForeignKey', [], {'to': u"orm['dialer_campaign.Campaign']", 'null': 'True', 'blank': 'True'}),
            'completed': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'content_type': ('django.db.models.fields.related.ForeignKey', [], {'to': u"orm['contenttypes.ContentType']"}),
            'created_date': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'extra_data': ('django.db.models.fields.CharField', [], {'max_length': '120', 'blank': 'True'}),
            'extra_dial_string': ('django.db.models.fields.CharField', [], {'max_length': '500', 'blank': 'True'}),
            'hangup_cause': ('django.db.models.fields.CharField', [], {'max_length': '80', 'blank': 'True'}),
            u'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'last_attempt_time': ('django.db.models.fields.DateTimeField', [], {'null': 'True', 'blank': 'True'}),
            'num_attempt': ('django.db.models.fields.IntegerField', [], {'default': '0'}),
            'object_id': ('django.db.models.fields.PositiveIntegerField', [], {}),
            'parent_callrequest': ('django.db.models.fields.related.ForeignKey', [], {'to': u"orm['dialer_cdr.Callrequest']", 'null': 'True', 'blank': 'True'}),
            'phone_number': ('django.db.models.fields.CharField', [], {'max_length': '80'}),
            'request_uuid': ('django.db.models.fields.CharField', [], {'default': "'9044872e-6067-11e3-a48e-00231470a30c'", 'max_length': '120', 'null': 'True', 'db_index': 'True', 'blank': 'True'}),
            'result': ('django.db.models.fields.CharField', [], {'max_length': '180', 'blank': 'True'}),
            'status': ('django.db.models.fields.IntegerField', [], {'default': '1', 'null': 'True', 'db_index': 'True', 'blank': 'True'}),
            'subscriber': ('django.db.models.fields.related.ForeignKey', [], {'to': u"orm['dialer_campaign.Subscriber']", 'null': 'True', 'blank': 'True'}),
            'timelimit': ('django.db.models.fields.IntegerField', [], {'default': '3600', 'blank': 'True'}),
            'timeout': ('django.db.models.fields.IntegerField', [], {'default': '30', 'blank': 'True'}),
            'updated_date': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'blank': 'True'}),
            'user': ('django.db.models.fields.related.ForeignKey', [], {'to': u"orm['auth.User']"})
        },
        u'dialer_cdr.voipcall': {
            'Meta': {'object_name': 'VoIPCall', 'db_table': "'dialer_cdr'"},
            'amd_status': ('django.db.models.fields.SmallIntegerField', [], {'default': '1', 'null': 'True', 'blank': 'True'}),
            'answersec': ('django.db.models.fields.IntegerField', [], {'null': 'True', 'blank': 'True'}),
            'billsec': ('django.db.models.fields.IntegerField', [], {'null': 'True', 'blank': 'True'}),
            'callerid': ('django.db.models.fields.CharField', [], {'max_length': '120'}),
            'callid': ('django.db.models.fields.CharField', [], {'max_length': '120'}),
            'callrequest': ('django.db.models.fields.related.ForeignKey', [], {'to': u"orm['dialer_cdr.Callrequest']", 'null': 'True', 'blank': 'True'}),
            'dialcode': ('django.db.models.fields.related.ForeignKey', [], {'to': u"orm['country_dialcode.Prefix']", 'null': 'True', 'blank': 'True'}),
            'disposition': ('django.db.models.fields.CharField', [], {'max_length': '40', 'null': 'True', 'blank': 'True'}),
            'duration': ('django.db.models.fields.IntegerField', [], {'null': 'True', 'blank': 'True'}),
            'hangup_cause': ('django.db.models.fields.CharField', [], {'max_length': '40', 'null': 'True', 'blank': 'True'}),
            'hangup_cause_q850': ('django.db.models.fields.CharField', [], {'max_length': '10', 'null': 'True', 'blank': 'True'}),
            u'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'leg_type': ('django.db.models.fields.SmallIntegerField', [], {'default': '1', 'null': 'True', 'blank': 'True'}),
            'phone_number': ('django.db.models.fields.CharField', [], {'max_length': '120', 'null': 'True', 'blank': 'True'}),
            'progresssec': ('django.db.models.fields.IntegerField', [], {'null': 'True', 'blank': 'True'}),
            'request_uuid': ('django.db.models.fields.CharField', [], {'default': "'904536ce-6067-11e3-a48e-00231470a30c'", 'max_length': '120', 'null': 'True', 'blank': 'True'}),
            'starting_date': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'db_index': 'True', 'blank': 'True'}),
            'used_gateway': ('django.db.models.fields.related.ForeignKey', [], {'to': u"orm['dialer_gateway.Gateway']", 'null': 'True', 'blank': 'True'}),
            'user': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'Call Sender'", 'to': u"orm['auth.User']"}),
            'waitsec': ('django.db.models.fields.IntegerField', [], {'null': 'True', 'blank': 'True'})
        },
        u'dialer_contact.contact': {
            'Meta': {'object_name': 'Contact', 'db_table': "u'dialer_contact'"},
            'additional_vars': ('jsonfield.fields.JSONField', [], {'null': 'True', 'blank': 'True'}),
            'address': ('django.db.models.fields.CharField', [], {'max_length': '250', 'null': 'True', 'blank': 'True'}),
            'city': ('django.db.models.fields.CharField', [], {'max_length': '120', 'null': 'True', 'blank': 'True'}),
            'contact': ('django.db.models.fields.CharField', [], {'max_length': '90'}),
            'country': ('django_countries.fields.CountryField', [], {'max_length': '2', 'null': 'True', 'blank': 'True'}),
            'created_date': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'description': ('django.db.models.fields.TextField', [], {'null': 'True', 'blank': 'True'}),
            'email': ('django.db.models.fields.EmailField', [], {'max_length': '75', 'null': 'True', 'blank': 'True'}),
            'first_name': ('django.db.models.fields.CharField', [], {'max_length': '120', 'null': 'True', 'blank': 'True'}),
            u'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'last_name': ('django.db.models.fields.CharField', [], {'max_length': '120', 'null': 'True', 'blank': 'True'}),
            'phonebook': ('django.db.models.fields.related.ForeignKey', [], {'to': u"orm['dialer_contact.Phonebook']"}),
            'state': ('django.db.models.fields.CharField', [], {'max_length': '120', 'null': 'True', 'blank': 'True'}),
            'status': ('django.db.models.fields.IntegerField', [], {'default': '1', 'null': 'True', 'blank': 'True'}),
            'unit_number': ('django.db.models.fields.CharField', [], {'max_length': '50', 'null': 'True', 'blank': 'True'}),
            'updated_date': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'blank': 'True'})
        },
        u'dialer_contact.phonebook': {
            'Meta': {'object_name': 'Phonebook', 'db_table': "u'dialer_phonebook'"},
            'created_date': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'description': ('django.db.models.fields.TextField', [], {'null': 'True', 'blank': 'True'}),
            u'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '90'}),
            'updated_date': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'blank': 'True'}),
            'user': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'Phonebook owner'", 'to': u"orm['auth.User']"})
        },
        u'dialer_gateway.gateway': {
            'Meta': {'object_name': 'Gateway', 'db_table': "u'dialer_gateway'"},
            'addparameter': ('django.db.models.fields.CharField', [], {'max_length': '360', 'blank': 'True'}),
            'addprefix': ('django.db.models.fields.CharField', [], {'max_length': '60', 'blank': 'True'}),
            'count_call': ('django.db.models.fields.IntegerField', [], {'null': 'True', 'blank': 'True'}),
            'count_in_use': ('django.db.models.fields.IntegerField', [], {'null': 'True', 'blank': 'True'}),
            'created_date': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'description': ('django.db.models.fields.TextField', [], {'blank': 'True'}),
            'failover': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'Failover Gateway'", 'null': 'True', 'to': u"orm['dialer_gateway.Gateway']"}),
            'gateway_codecs': ('django.db.models.fields.CharField', [], {'max_length': '500', 'blank': 'True'}),
            'gateway_retries': ('django.db.models.fields.CharField', [], {'max_length': '500', 'blank': 'True'}),
            'gateway_timeouts': ('django.db.models.fields.CharField', [], {'max_length': '500', 'blank': 'True'}),
            'gateways': ('django.db.models.fields.CharField', [], {'max_length': '500'}),
            u'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'maximum_call': ('django.db.models.fields.IntegerField', [], {'null': 'True', 'blank': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '255'}),
            'originate_dial_string': ('django.db.models.fields.CharField', [], {'max_length': '500', 'blank': 'True'}),
            'removeprefix': ('django.db.models.fields.CharField', [], {'max_length': '60', 'blank': 'True'}),
            'secondused': ('django.db.models.fields.IntegerField', [], {'null': 'True', 'blank': 'True'}),
            'status': ('django.db.models.fields.IntegerField', [], {'default': '1', 'null': 'True', 'blank': 'True'}),
            'updated_date': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'blank': 'True'})
        },
        u'dnc.dnc': {
            'Meta': {'object_name': 'DNC', 'db_table': "'dnc_list'"},
            'created_date': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            u'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '50', 'null': 'True'}),
            'updated_date': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'blank': 'True'}),
            'user': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'DNC owner'", 'to': u"orm['auth.User']"})
        }
    }

    complete_apps = ['dialer_cdr']

########NEW FILE########
__FILENAME__ = 0002_auto__add_field_callrequest_caller_name__add_field_callrequest_alarm_r
# -*- coding: utf-8 -*-
import datetime
from south.db import db
from south.v2 import SchemaMigration
from django.db import models


class Migration(SchemaMigration):

    def forwards(self, orm):
        # Adding field 'Callrequest.caller_name'
        db.add_column(u'dialer_callrequest', 'caller_name',
                      self.gf('django.db.models.fields.CharField')(default='', max_length=80, blank=True),
                      keep_default=False)

        # Adding field 'Callrequest.alarm_request_id'
        db.add_column(u'dialer_callrequest', 'alarm_request_id',
                      self.gf('django.db.models.fields.IntegerField')(default=0, null=True, blank=True),
                      keep_default=False)

    def backwards(self, orm):
        # Deleting field 'Callrequest.caller_name'
        db.delete_column(u'dialer_callrequest', 'caller_name')

        # Deleting field 'Callrequest.alarm_request_id'
        db.delete_column(u'dialer_callrequest', 'alarm_request_id')

    models = {
        u'audiofield.audiofile': {
            'Meta': {'object_name': 'AudioFile', 'db_table': "u'audio_file'"},
            'audio_file': ('audiofield.fields.AudioField', [], {'ext_whitelist': "['.mp3', '.wav', '.ogg']", 'max_length': '100', 'blank': 'True'}),
            'created_date': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            u'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '150'}),
            'updated_date': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'blank': 'True'}),
            'user': ('django.db.models.fields.related.ForeignKey', [], {'to': u"orm['auth.User']"})
        },
        u'auth.group': {
            'Meta': {'object_name': 'Group'},
            u'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '80'}),
            'permissions': ('django.db.models.fields.related.ManyToManyField', [], {'to': u"orm['auth.Permission']", 'symmetrical': 'False', 'blank': 'True'})
        },
        u'auth.permission': {
            'Meta': {'ordering': "(u'content_type__app_label', u'content_type__model', u'codename')", 'unique_together': "((u'content_type', u'codename'),)", 'object_name': 'Permission'},
            'codename': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'content_type': ('django.db.models.fields.related.ForeignKey', [], {'to': u"orm['contenttypes.ContentType']"}),
            u'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '50'})
        },
        u'auth.user': {
            'Meta': {'object_name': 'User'},
            'date_joined': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
            'email': ('django.db.models.fields.EmailField', [], {'max_length': '75', 'blank': 'True'}),
            'first_name': ('django.db.models.fields.CharField', [], {'max_length': '30', 'blank': 'True'}),
            'groups': ('django.db.models.fields.related.ManyToManyField', [], {'symmetrical': 'False', 'related_name': "u'user_set'", 'blank': 'True', 'to': u"orm['auth.Group']"}),
            u'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'is_active': ('django.db.models.fields.BooleanField', [], {'default': 'True'}),
            'is_staff': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'is_superuser': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'last_login': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
            'last_name': ('django.db.models.fields.CharField', [], {'max_length': '30', 'blank': 'True'}),
            'password': ('django.db.models.fields.CharField', [], {'max_length': '128'}),
            'user_permissions': ('django.db.models.fields.related.ManyToManyField', [], {'symmetrical': 'False', 'related_name': "u'user_set'", 'blank': 'True', 'to': u"orm['auth.Permission']"}),
            'username': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '30'})
        },
        u'contenttypes.contenttype': {
            'Meta': {'ordering': "('name',)", 'unique_together': "(('app_label', 'model'),)", 'object_name': 'ContentType', 'db_table': "'django_content_type'"},
            'app_label': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            u'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'model': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '100'})
        },
        u'country_dialcode.country': {
            'Meta': {'object_name': 'Country', 'db_table': "'dialcode_country'"},
            'countrycode': ('django.db.models.fields.CharField', [], {'max_length': '3'}),
            'countryname': ('django.db.models.fields.CharField', [], {'max_length': '240'}),
            'countryprefix': ('django.db.models.fields.IntegerField', [], {'max_length': '12'}),
            u'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'iso2': ('django.db.models.fields.CharField', [], {'default': "''", 'max_length': '2'})
        },
        u'country_dialcode.prefix': {
            'Meta': {'ordering': "['prefix']", 'object_name': 'Prefix', 'db_table': "'dialcode_prefix'"},
            'carrier_name': ('django.db.models.fields.CharField', [], {'max_length': '180'}),
            'country_id': ('django.db.models.fields.related.ForeignKey', [], {'to': u"orm['country_dialcode.Country']", 'null': 'True', 'db_column': "'country_id'", 'blank': 'True'}),
            'destination': ('django.db.models.fields.CharField', [], {'max_length': '180'}),
            'prefix': ('django.db.models.fields.IntegerField', [], {'primary_key': 'True'}),
            'prefix_type': ('django.db.models.fields.IntegerField', [], {'default': '1'})
        },
        u'dialer_campaign.campaign': {
            'Meta': {'object_name': 'Campaign', 'db_table': "u'dialer_campaign'"},
            'agent_script': ('django.db.models.fields.TextField', [], {'null': 'True', 'blank': 'True'}),
            'aleg_gateway': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'A-Leg Gateway'", 'to': u"orm['dialer_gateway.Gateway']"}),
            'amd_behavior': ('django.db.models.fields.IntegerField', [], {'default': '1', 'null': 'True', 'blank': 'True'}),
            'caller_name': ('django.db.models.fields.CharField', [], {'max_length': '80', 'blank': 'True'}),
            'callerid': ('django.db.models.fields.CharField', [], {'max_length': '80', 'blank': 'True'}),
            'callmaxduration': ('django.db.models.fields.IntegerField', [], {'default': "'1800'", 'null': 'True', 'blank': 'True'}),
            'calltimeout': ('django.db.models.fields.IntegerField', [], {'default': "'45'", 'null': 'True', 'blank': 'True'}),
            'campaign_code': ('django.db.models.fields.CharField', [], {'default': "'YXSVD'", 'unique': 'True', 'max_length': '20', 'blank': 'True'}),
            'completed': ('django.db.models.fields.IntegerField', [], {'default': '0', 'null': 'True', 'blank': 'True'}),
            'completion_intervalretry': ('django.db.models.fields.IntegerField', [], {'default': "'900'", 'null': 'True', 'blank': 'True'}),
            'completion_maxretry': ('django.db.models.fields.IntegerField', [], {'default': "'0'", 'null': 'True', 'blank': 'True'}),
            'content_type': ('django.db.models.fields.related.ForeignKey', [], {'to': u"orm['contenttypes.ContentType']"}),
            'created_date': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'daily_start_time': ('django.db.models.fields.TimeField', [], {'default': "'00:00:00'"}),
            'daily_stop_time': ('django.db.models.fields.TimeField', [], {'default': "'23:59:59'"}),
            'description': ('django.db.models.fields.TextField', [], {'null': 'True', 'blank': 'True'}),
            'dnc': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'DNC'", 'null': 'True', 'to': u"orm['dnc.DNC']"}),
            'expirationdate': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime(2013, 12, 10, 0, 0)'}),
            'external_link': ('jsonfield.fields.JSONField', [], {'null': 'True', 'blank': 'True'}),
            'extra_data': ('django.db.models.fields.CharField', [], {'max_length': '120', 'blank': 'True'}),
            'frequency': ('django.db.models.fields.IntegerField', [], {'default': "'10'", 'null': 'True', 'blank': 'True'}),
            'friday': ('django.db.models.fields.BooleanField', [], {'default': 'True'}),
            'has_been_duplicated': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'has_been_started': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            u'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'imported_phonebook': ('django.db.models.fields.CharField', [], {'default': "''", 'max_length': '500', 'blank': 'True'}),
            'intervalretry': ('django.db.models.fields.IntegerField', [], {'default': "'300'", 'null': 'True', 'blank': 'True'}),
            'lead_disposition': ('django.db.models.fields.TextField', [], {'null': 'True', 'blank': 'True'}),
            'maxretry': ('django.db.models.fields.IntegerField', [], {'default': "'0'", 'null': 'True', 'blank': 'True'}),
            'monday': ('django.db.models.fields.BooleanField', [], {'default': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'object_id': ('django.db.models.fields.PositiveIntegerField', [], {}),
            'phonebook': ('django.db.models.fields.related.ManyToManyField', [], {'symmetrical': 'False', 'to': u"orm['dialer_contact.Phonebook']", 'null': 'True', 'blank': 'True'}),
            'saturday': ('django.db.models.fields.BooleanField', [], {'default': 'True'}),
            'startingdate': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime(2013, 12, 9, 0, 0)'}),
            'status': ('django.db.models.fields.IntegerField', [], {'default': '2', 'null': 'True', 'blank': 'True'}),
            'sunday': ('django.db.models.fields.BooleanField', [], {'default': 'True'}),
            'thursday': ('django.db.models.fields.BooleanField', [], {'default': 'True'}),
            'totalcontact': ('django.db.models.fields.IntegerField', [], {'default': '0', 'null': 'True', 'blank': 'True'}),
            'tuesday': ('django.db.models.fields.BooleanField', [], {'default': 'True'}),
            'updated_date': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'blank': 'True'}),
            'user': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'Campaign owner'", 'to': u"orm['auth.User']"}),
            'voicemail': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'voicemail_audiofile': ('django.db.models.fields.related.ForeignKey', [], {'to': u"orm['audiofield.AudioFile']", 'null': 'True', 'blank': 'True'}),
            'wednesday': ('django.db.models.fields.BooleanField', [], {'default': 'True'})
        },
        u'dialer_campaign.subscriber': {
            'Meta': {'unique_together': "(['contact', 'campaign'],)", 'object_name': 'Subscriber', 'db_table': "u'dialer_subscriber'"},
            'agent': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'agent'", 'null': 'True', 'to': u"orm['auth.User']"}),
            'campaign': ('django.db.models.fields.related.ForeignKey', [], {'to': u"orm['dialer_campaign.Campaign']", 'null': 'True', 'blank': 'True'}),
            'collected_data': ('django.db.models.fields.TextField', [], {'null': 'True', 'blank': 'True'}),
            'completion_count_attempt': ('django.db.models.fields.IntegerField', [], {'default': '0', 'null': 'True', 'blank': 'True'}),
            'contact': ('django.db.models.fields.related.ForeignKey', [], {'to': u"orm['dialer_contact.Contact']", 'null': 'True', 'blank': 'True'}),
            'count_attempt': ('django.db.models.fields.IntegerField', [], {'default': '0', 'null': 'True', 'blank': 'True'}),
            'created_date': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'disposition': ('django.db.models.fields.IntegerField', [], {'null': 'True', 'blank': 'True'}),
            'duplicate_contact': ('django.db.models.fields.CharField', [], {'max_length': '90'}),
            u'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'last_attempt': ('django.db.models.fields.DateTimeField', [], {'null': 'True', 'blank': 'True'}),
            'status': ('django.db.models.fields.IntegerField', [], {'default': '1', 'null': 'True', 'blank': 'True'}),
            'updated_date': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'db_index': 'True', 'blank': 'True'})
        },
        u'dialer_cdr.callrequest': {
            'Meta': {'object_name': 'Callrequest', 'db_table': "u'dialer_callrequest'"},
            'alarm_request_id': ('django.db.models.fields.IntegerField', [], {'default': '0', 'null': 'True', 'blank': 'True'}),
            'aleg_gateway': ('django.db.models.fields.related.ForeignKey', [], {'to': u"orm['dialer_gateway.Gateway']", 'null': 'True', 'blank': 'True'}),
            'aleg_uuid': ('django.db.models.fields.CharField', [], {'max_length': '120', 'null': 'True', 'blank': 'True'}),
            'call_time': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime(2013, 12, 9, 0, 0)'}),
            'call_type': ('django.db.models.fields.IntegerField', [], {'default': '1', 'null': 'True', 'blank': 'True'}),
            'caller_name': ('django.db.models.fields.CharField', [], {'max_length': '80', 'blank': 'True'}),
            'callerid': ('django.db.models.fields.CharField', [], {'max_length': '80', 'blank': 'True'}),
            'campaign': ('django.db.models.fields.related.ForeignKey', [], {'to': u"orm['dialer_campaign.Campaign']", 'null': 'True', 'blank': 'True'}),
            'completed': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'content_type': ('django.db.models.fields.related.ForeignKey', [], {'to': u"orm['contenttypes.ContentType']"}),
            'created_date': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'extra_data': ('django.db.models.fields.CharField', [], {'max_length': '120', 'blank': 'True'}),
            'extra_dial_string': ('django.db.models.fields.CharField', [], {'max_length': '500', 'blank': 'True'}),
            'hangup_cause': ('django.db.models.fields.CharField', [], {'max_length': '80', 'blank': 'True'}),
            u'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'last_attempt_time': ('django.db.models.fields.DateTimeField', [], {'null': 'True', 'blank': 'True'}),
            'num_attempt': ('django.db.models.fields.IntegerField', [], {'default': '0'}),
            'object_id': ('django.db.models.fields.PositiveIntegerField', [], {}),
            'parent_callrequest': ('django.db.models.fields.related.ForeignKey', [], {'to': u"orm['dialer_cdr.Callrequest']", 'null': 'True', 'blank': 'True'}),
            'phone_number': ('django.db.models.fields.CharField', [], {'max_length': '80'}),
            'request_uuid': ('django.db.models.fields.CharField', [], {'default': "'9ff62c5e-6067-11e3-91c3-00231470a30c'", 'max_length': '120', 'null': 'True', 'db_index': 'True', 'blank': 'True'}),
            'result': ('django.db.models.fields.CharField', [], {'max_length': '180', 'blank': 'True'}),
            'status': ('django.db.models.fields.IntegerField', [], {'default': '1', 'null': 'True', 'db_index': 'True', 'blank': 'True'}),
            'subscriber': ('django.db.models.fields.related.ForeignKey', [], {'to': u"orm['dialer_campaign.Subscriber']", 'null': 'True', 'blank': 'True'}),
            'timelimit': ('django.db.models.fields.IntegerField', [], {'default': '3600', 'blank': 'True'}),
            'timeout': ('django.db.models.fields.IntegerField', [], {'default': '30', 'blank': 'True'}),
            'updated_date': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'blank': 'True'}),
            'user': ('django.db.models.fields.related.ForeignKey', [], {'to': u"orm['auth.User']"})
        },
        u'dialer_cdr.voipcall': {
            'Meta': {'object_name': 'VoIPCall', 'db_table': "'dialer_cdr'"},
            'amd_status': ('django.db.models.fields.SmallIntegerField', [], {'default': '1', 'null': 'True', 'blank': 'True'}),
            'answersec': ('django.db.models.fields.IntegerField', [], {'null': 'True', 'blank': 'True'}),
            'billsec': ('django.db.models.fields.IntegerField', [], {'null': 'True', 'blank': 'True'}),
            'callerid': ('django.db.models.fields.CharField', [], {'max_length': '120'}),
            'callid': ('django.db.models.fields.CharField', [], {'max_length': '120'}),
            'callrequest': ('django.db.models.fields.related.ForeignKey', [], {'to': u"orm['dialer_cdr.Callrequest']", 'null': 'True', 'blank': 'True'}),
            'dialcode': ('django.db.models.fields.related.ForeignKey', [], {'to': u"orm['country_dialcode.Prefix']", 'null': 'True', 'blank': 'True'}),
            'disposition': ('django.db.models.fields.CharField', [], {'max_length': '40', 'null': 'True', 'blank': 'True'}),
            'duration': ('django.db.models.fields.IntegerField', [], {'null': 'True', 'blank': 'True'}),
            'hangup_cause': ('django.db.models.fields.CharField', [], {'max_length': '40', 'null': 'True', 'blank': 'True'}),
            'hangup_cause_q850': ('django.db.models.fields.CharField', [], {'max_length': '10', 'null': 'True', 'blank': 'True'}),
            u'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'leg_type': ('django.db.models.fields.SmallIntegerField', [], {'default': '1', 'null': 'True', 'blank': 'True'}),
            'phone_number': ('django.db.models.fields.CharField', [], {'max_length': '120', 'null': 'True', 'blank': 'True'}),
            'progresssec': ('django.db.models.fields.IntegerField', [], {'null': 'True', 'blank': 'True'}),
            'request_uuid': ('django.db.models.fields.CharField', [], {'default': "'9ff6da8c-6067-11e3-91c3-00231470a30c'", 'max_length': '120', 'null': 'True', 'blank': 'True'}),
            'starting_date': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'db_index': 'True', 'blank': 'True'}),
            'used_gateway': ('django.db.models.fields.related.ForeignKey', [], {'to': u"orm['dialer_gateway.Gateway']", 'null': 'True', 'blank': 'True'}),
            'user': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'Call Sender'", 'to': u"orm['auth.User']"}),
            'waitsec': ('django.db.models.fields.IntegerField', [], {'null': 'True', 'blank': 'True'})
        },
        u'dialer_contact.contact': {
            'Meta': {'object_name': 'Contact', 'db_table': "u'dialer_contact'"},
            'additional_vars': ('jsonfield.fields.JSONField', [], {'null': 'True', 'blank': 'True'}),
            'address': ('django.db.models.fields.CharField', [], {'max_length': '250', 'null': 'True', 'blank': 'True'}),
            'city': ('django.db.models.fields.CharField', [], {'max_length': '120', 'null': 'True', 'blank': 'True'}),
            'contact': ('django.db.models.fields.CharField', [], {'max_length': '90'}),
            'country': ('django_countries.fields.CountryField', [], {'max_length': '2', 'null': 'True', 'blank': 'True'}),
            'created_date': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'description': ('django.db.models.fields.TextField', [], {'null': 'True', 'blank': 'True'}),
            'email': ('django.db.models.fields.EmailField', [], {'max_length': '75', 'null': 'True', 'blank': 'True'}),
            'first_name': ('django.db.models.fields.CharField', [], {'max_length': '120', 'null': 'True', 'blank': 'True'}),
            u'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'last_name': ('django.db.models.fields.CharField', [], {'max_length': '120', 'null': 'True', 'blank': 'True'}),
            'phonebook': ('django.db.models.fields.related.ForeignKey', [], {'to': u"orm['dialer_contact.Phonebook']"}),
            'state': ('django.db.models.fields.CharField', [], {'max_length': '120', 'null': 'True', 'blank': 'True'}),
            'status': ('django.db.models.fields.IntegerField', [], {'default': '1', 'null': 'True', 'blank': 'True'}),
            'unit_number': ('django.db.models.fields.CharField', [], {'max_length': '50', 'null': 'True', 'blank': 'True'}),
            'updated_date': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'blank': 'True'})
        },
        u'dialer_contact.phonebook': {
            'Meta': {'object_name': 'Phonebook', 'db_table': "u'dialer_phonebook'"},
            'created_date': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'description': ('django.db.models.fields.TextField', [], {'null': 'True', 'blank': 'True'}),
            u'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '90'}),
            'updated_date': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'blank': 'True'}),
            'user': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'Phonebook owner'", 'to': u"orm['auth.User']"})
        },
        u'dialer_gateway.gateway': {
            'Meta': {'object_name': 'Gateway', 'db_table': "u'dialer_gateway'"},
            'addparameter': ('django.db.models.fields.CharField', [], {'max_length': '360', 'blank': 'True'}),
            'addprefix': ('django.db.models.fields.CharField', [], {'max_length': '60', 'blank': 'True'}),
            'count_call': ('django.db.models.fields.IntegerField', [], {'null': 'True', 'blank': 'True'}),
            'count_in_use': ('django.db.models.fields.IntegerField', [], {'null': 'True', 'blank': 'True'}),
            'created_date': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'description': ('django.db.models.fields.TextField', [], {'blank': 'True'}),
            'failover': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'Failover Gateway'", 'null': 'True', 'to': u"orm['dialer_gateway.Gateway']"}),
            'gateway_codecs': ('django.db.models.fields.CharField', [], {'max_length': '500', 'blank': 'True'}),
            'gateway_retries': ('django.db.models.fields.CharField', [], {'max_length': '500', 'blank': 'True'}),
            'gateway_timeouts': ('django.db.models.fields.CharField', [], {'max_length': '500', 'blank': 'True'}),
            'gateways': ('django.db.models.fields.CharField', [], {'max_length': '500'}),
            u'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'maximum_call': ('django.db.models.fields.IntegerField', [], {'null': 'True', 'blank': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '255'}),
            'originate_dial_string': ('django.db.models.fields.CharField', [], {'max_length': '500', 'blank': 'True'}),
            'removeprefix': ('django.db.models.fields.CharField', [], {'max_length': '60', 'blank': 'True'}),
            'secondused': ('django.db.models.fields.IntegerField', [], {'null': 'True', 'blank': 'True'}),
            'status': ('django.db.models.fields.IntegerField', [], {'default': '1', 'null': 'True', 'blank': 'True'}),
            'updated_date': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'blank': 'True'})
        },
        u'dnc.dnc': {
            'Meta': {'object_name': 'DNC', 'db_table': "'dnc_list'"},
            'created_date': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            u'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '50', 'null': 'True'}),
            'updated_date': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'blank': 'True'}),
            'user': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'DNC owner'", 'to': u"orm['auth.User']"})
        }
    }

    complete_apps = ['dialer_cdr']

########NEW FILE########
__FILENAME__ = models
#
# Newfies-Dialer License
# http://www.newfies-dialer.org
#
# This Source Code Form is subject to the terms of the Mozilla Public
# License, v. 2.0. If a copy of the MPL was not distributed with this file,
# You can obtain one at http://mozilla.org/MPL/2.0/.
#
# Copyright (C) 2011-2014 Star2Billing S.L.
#
# The Initial Developer of the Original Code is
# Arezqui Belaid <info@star2billing.com>
#

from django.db import models
from django.utils.translation import ugettext_lazy as _
from django.contrib.contenttypes.models import ContentType
from django.contrib.contenttypes import generic
from dialer_gateway.models import Gateway
from dialer_campaign.models import Campaign, Subscriber
from dialer_cdr.constants import CALLREQUEST_STATUS, CALLREQUEST_TYPE, LEG_TYPE, VOIPCALL_DISPOSITION,\
    VOIPCALL_AMD_STATUS
from django_lets_go.intermediate_model_base_class import Model
from country_dialcode.models import Prefix
from datetime import datetime
from django.utils.timezone import utc
from uuid import uuid1


class CallRequestManager(models.Manager):
    """CallRequest Manager"""

    def get_pending_callrequest(self):
        """Return all the pending callrequest based on call time and status"""
        kwargs = {}
        kwargs['status'] = 1
        tday = datetime.utcnow().replace(tzinfo=utc)
        kwargs['call_time__lte'] = datetime(
            tday.year, tday.month, tday.day, tday.hour, tday.minute, tday.second, tday.microsecond).replace(tzinfo=utc)

        #return Callrequest.objects.all()
        return Callrequest.objects.filter(**kwargs)


def str_uuid1():
    return str(uuid1())


class Callrequest(Model):
    """This defines the call request, the dialer will read any new request
    and attempt to deliver the call.

    **Attributes**:

        * ``request_uuid`` - Unique id
        * ``call_time`` - Total call time
        * ``call_type`` - Call type
        * ``status`` - Call request status
        * ``callerid`` - Caller ID
        * ``last_attempt_time`` -
        * ``result`` --
        * ``timeout`` -
        * ``timelimit`` -
        * ``extra_dial_string`` -
        * ``phone_number`` -
        * ``parent_callrequest`` -
        * ``extra_data`` -
        * ``num_attempt`` -
        * ``hangup_cause`` -


    **Relationships**:

        * ``user`` - Foreign key relationship to the User model. Each campaign assigned to a User

        * ``content_type`` - Defines the application  (``voip_app`` or ``survey``) \
        to use when the call is established on the A-Leg

        * ``object_id`` - Defines the object of content_type application

        * ``content_object`` - Used to define the VoIP App or the Survey with \
        generic ForeignKey

        * ``aleg_gateway`` - Foreign key relationship to the Gateway model.\
        Gateway to use to call the subscriber

        * ``subscriber`` - Foreign key relationship to the Subscriber Model.

        * ``campaign`` - Foreign key relationship to the Campaign model.

    **Name of DB table**: dialer_callrequest
    """
    user = models.ForeignKey('auth.User')
    request_uuid = models.CharField(verbose_name=_("RequestUUID"), default=str_uuid1(), db_index=True,
                                    max_length=120, null=True, blank=True)
    aleg_uuid = models.CharField(max_length=120, help_text=_("a-leg call-ID"), null=True, blank=True)
    call_time = models.DateTimeField(default=(lambda: datetime.utcnow().replace(tzinfo=utc)))
    created_date = models.DateTimeField(auto_now_add=True, verbose_name=_('date'))
    updated_date = models.DateTimeField(auto_now=True)
    call_type = models.IntegerField(choices=list(CALLREQUEST_TYPE), default=CALLREQUEST_TYPE.ALLOW_RETRY,
                                    verbose_name=_("call request type"),
                                    blank=True, null=True)
    status = models.IntegerField(choices=list(CALLREQUEST_STATUS), default=CALLREQUEST_STATUS.PENDING,
                                 blank=True, null=True, db_index=True, verbose_name=_('status'))
    callerid = models.CharField(max_length=80, blank=True, verbose_name=_("Caller ID Number"),
                                help_text=_("outbound Caller ID"))
    caller_name = models.CharField(max_length=80, blank=True, verbose_name=_("caller name"),
                                   help_text=_("outbound caller-Name"))
    phone_number = models.CharField(max_length=80, verbose_name=_('phone number'))
    timeout = models.IntegerField(blank=True, default=30, verbose_name=_('time out'))
    timelimit = models.IntegerField(blank=True, default=3600, verbose_name=_('time limit'))
    extra_dial_string = models.CharField(max_length=500, blank=True, verbose_name=_('extra dial string'))
    subscriber = models.ForeignKey(Subscriber, null=True, blank=True, help_text=_("subscriber related to this call request"))

    campaign = models.ForeignKey(Campaign, null=True, blank=True, help_text=_("select Campaign"))
    aleg_gateway = models.ForeignKey(Gateway, null=True, blank=True, verbose_name=_("a-leg gateway"),
                                     help_text=_("select gateway"))
    #used to define the Voice App or the Survey
    content_type = models.ForeignKey(ContentType, verbose_name=_("type"))
    object_id = models.PositiveIntegerField(verbose_name=_("application"))
    content_object = generic.GenericForeignKey('content_type', 'object_id')
    #used to flag if the call is completed
    completed = models.BooleanField(default=False, verbose_name=_('call completed'))

    extra_data = models.CharField(max_length=120, blank=True, verbose_name=_("extra data"),
                                  help_text=_("define the additional data to pass to the application"))

    num_attempt = models.IntegerField(default=0)
    last_attempt_time = models.DateTimeField(null=True, blank=True)
    result = models.CharField(max_length=180, blank=True)
    hangup_cause = models.CharField(max_length=80, blank=True)

    # if the call fails, create a new pending instance and link them
    parent_callrequest = models.ForeignKey('self', null=True, blank=True)

    #AlarmRequest call / if this value is set then this is not a campaign call
    alarm_request_id = models.IntegerField(default=0, null=True, blank=True, verbose_name=_('alarm request id'))

    objects = CallRequestManager()

    class Meta:
        db_table = u'dialer_callrequest'
        verbose_name = _("call request")
        verbose_name_plural = _("call requests")

    def __unicode__(self):
        return u"%s [%s]" % (self.id, self.request_uuid)


class VoIPCall(models.Model):
    """This gives information of all the calls made with
    the carrier charges and revenue of each call.

    **Attributes**:

        * ``callid`` - callid of the phonecall
        * ``callerid`` - CallerID used to call out
        * ``phone_number`` - Phone number contacted
        * ``dialcode`` - Dialcode of the phonenumber
        * ``starting_date`` - Starting date of the call
        * ``duration`` - Duration of the call
        * ``billsec`` -
        * ``progresssec`` -
        * ``answersec`` -
        * ``waitsec`` -
        * ``disposition`` - Disposition of the call
        * ``hangup_cause`` -
        * ``hangup_cause_q850`` -

    **Relationships**:

        * ``user`` - Foreign key relationship to the User model.
        * ``used_gateway`` - Foreign key relationship to the Gateway model.
        * ``callrequest`` - Foreign key relationship to the Callrequest model.

    **Name of DB table**: dialer_cdr
    """
    user = models.ForeignKey('auth.User', related_name='Call Sender')
    request_uuid = models.CharField(verbose_name=_("RequestUUID"), null=True, blank=True,
                                    default=str_uuid1(), max_length=120)
    used_gateway = models.ForeignKey(Gateway, null=True, blank=True, verbose_name=_("used gateway"))
    callrequest = models.ForeignKey(Callrequest, null=True, blank=True, verbose_name=_("callrequest"))
    callid = models.CharField(max_length=120, help_text=_("VoIP call-ID"))
    callerid = models.CharField(max_length=120, verbose_name=_('CallerID'))
    phone_number = models.CharField(max_length=120, null=True, blank=True, verbose_name=_("phone number"),
                                    help_text=_(u'the international number of the recipient, without the leading +'))

    dialcode = models.ForeignKey(Prefix, verbose_name=_("destination"),
                                 null=True, blank=True, help_text=_("select prefix"))
    starting_date = models.DateTimeField(auto_now_add=True, verbose_name=_("starting date"),
                                         db_index=True)
    duration = models.IntegerField(null=True, blank=True, verbose_name=_("duration"))
    billsec = models.IntegerField(null=True, blank=True, verbose_name=_("bill sec"))
    progresssec = models.IntegerField(null=True, blank=True, verbose_name=_("progress sec"))
    answersec = models.IntegerField(null=True, blank=True, verbose_name=_("answer sec"))
    waitsec = models.IntegerField(null=True, blank=True, verbose_name=_("wait sec"))
    disposition = models.CharField(choices=VOIPCALL_DISPOSITION, null=True, blank=True,
                                   max_length=40, verbose_name=_("disposition"))
    hangup_cause = models.CharField(max_length=40, null=True, blank=True,
                                    verbose_name=_("hangup cause"))
    hangup_cause_q850 = models.CharField(max_length=10, null=True, blank=True)
    leg_type = models.SmallIntegerField(choices=list(LEG_TYPE), default=LEG_TYPE.A_LEG,
                                        verbose_name=_("leg"), null=True, blank=True)
    amd_status = models.SmallIntegerField(choices=list(VOIPCALL_AMD_STATUS), default=VOIPCALL_AMD_STATUS.PERSON,
                                          null=True, blank=True, verbose_name=_("AMD Status"))

    def destination_name(self):
        """Return Recipient dialcode"""
        if self.dialcode is None:
            return "0"
        else:
            return self.dialcode.name

    def min_duration(self):
        """Return duration in min & sec"""
        if self.duration:
            min = int(self.duration / 60)
            sec = int(self.duration % 60)
            return "%02d:%02d" % (min, sec)
        else:
            return "00:00"

    class Meta:
        permissions = (
            ("view_call_detail_report", _('can see call detail report')),
        )
        db_table = 'dialer_cdr'
        verbose_name = _("VoIP call")
        verbose_name_plural = _("VoIP calls")

    def __unicode__(self):
        return u"%d - %s" % (self.id, self.callid)

########NEW FILE########
__FILENAME__ = tasks
#
# Newfies-Dialer License
# http://www.newfies-dialer.org
#
# This Source Code Form is subject to the terms of the Mozilla Public
# License, v. 2.0. If a copy of the MPL was not distributed with this file,
# You can obtain one at http://mozilla.org/MPL/2.0/.
#
# Copyright (C) 2011-2014 Star2Billing S.L.
#
# The Initial Developer of the Original Code is
# Arezqui Belaid <info@star2billing.com>
#

from django.contrib.contenttypes.models import ContentType
from django.db import connection
from django.conf import settings
from celery.utils.log import get_task_logger
from celery.decorators import task
from celery.task import PeriodicTask

from dialer_campaign.constants import SUBSCRIBER_STATUS, AMD_BEHAVIOR
from dialer_cdr.models import Callrequest
from dialer_cdr.constants import CALLREQUEST_STATUS, CALLREQUEST_TYPE
from dialer_cdr.utils import voipcall_save  # BufferVoIPCall

from appointment.models.users import CalendarUserProfile
from appointment.models.alarms import AlarmRequest
from appointment.constants import ALARMREQUEST_STATUS, ALARM_STATUS
from sms.models import Message
from sms.tasks import SendMessage
#from dialer_cdr.function_def import get_prefix_obj
from dialer_gateway.utils import prepare_phonenumber
from datetime import datetime, timedelta
from django.utils.timezone import utc
from django_lets_go.only_one_task import only_one
from common_functions import debug_query
from uuid import uuid1
from time import sleep
try:
    import ESL as ESL
except ImportError:
    ESL = None


logger = get_task_logger(__name__)

LOCK_EXPIRE = 60 * 10 * 1  # Lock expires in 10 minutes


def dial_out(dial_command):
    if not ESL:
        logger.debug('ESL not installed')
        return 'load esl error'

    reload(ESL)
    c = ESL.ESLconnection(settings.ESL_HOSTNAME, settings.ESL_PORT, settings.ESL_SECRET)
    c.connected()
    ev = c.api("bgapi", str(dial_command))
    c.disconnect()
    if ev:
        result = ev.serialize()
        logger.debug(result)
        pos = result.find('Job-UUID:')
        if pos:
            request_uuid = result[pos + 10:pos + 46]
        else:
            request_uuid = 'error'
    else:
        request_uuid = 'error'
    return request_uuid


def check_retrycall_completion(callrequest):
    """
    We will check if the callrequest need to be restarted
    in order to achieve completion
    """

    #Check if subscriber is not completed and check if
    #subscriber.completion_count_attempt < campaign.completion_maxretry
    if (callrequest.subscriber.status == SUBSCRIBER_STATUS.COMPLETED
       or callrequest.subscriber.completion_count_attempt >= callrequest.campaign.completion_maxretry
       or not callrequest.campaign.completion_maxretry
       or callrequest.campaign.completion_maxretry == 0):
        logger.debug("Subscriber completed or limit reached!")
    else:
        #Increment subscriber.completion_count_attempt
        if callrequest.subscriber.completion_count_attempt:
            callrequest.subscriber.completion_count_attempt = callrequest.subscriber.completion_count_attempt + 1
        else:
            callrequest.subscriber.completion_count_attempt = 1
        callrequest.subscriber.save()

        #TODO: Add method in models.Callrequest to create copy
        # Init new callrequest -> delay at completion_intervalretry
        new_callrequest = Callrequest(
            request_uuid=uuid1(),
            parent_callrequest_id=callrequest.id,
            call_type=CALLREQUEST_TYPE.ALLOW_RETRY,
            num_attempt=callrequest.num_attempt + 1,
            user=callrequest.user,
            campaign_id=callrequest.campaign_id,
            aleg_gateway_id=callrequest.aleg_gateway_id,
            content_type=callrequest.content_type,
            object_id=callrequest.object_id,
            phone_number=callrequest.phone_number,
            timelimit=callrequest.timelimit,
            callerid=callrequest.callerid,
            caller_name=callrequest.caller_name,
            timeout=callrequest.timeout,
            content_object=callrequest.content_object,
            subscriber=callrequest.subscriber
        )
        new_callrequest.save()
        #NOTE : implement a PID algorithm
        second_towait = callrequest.campaign.completion_intervalretry
        logger.info("Init Completion Retry CallRequest %d in %d seconds" % (new_callrequest.id, second_towait))
        init_callrequest.apply_async(
            args=[new_callrequest.id, callrequest.campaign.id, callrequest.campaign.callmaxduration],
            countdown=second_towait)


@task(ignore_result=True)
def update_callrequest(callrequest, opt_hangup_cause):
    #Only the aleg will update the subscriber status / Bleg is only recorded
    #Update Callrequest Status
    if opt_hangup_cause == 'NORMAL_CLEARING':
        callrequest.status = CALLREQUEST_STATUS.SUCCESS
        if callrequest.subscriber.status != SUBSCRIBER_STATUS.COMPLETED:
            callrequest.subscriber.status = SUBSCRIBER_STATUS.SENT
    else:
        callrequest.status = CALLREQUEST_STATUS.FAILURE
        callrequest.subscriber.status = SUBSCRIBER_STATUS.FAIL
    callrequest.hangup_cause = opt_hangup_cause

    callrequest.save()
    callrequest.subscriber.save()
    debug_query(24)


@task(ignore_result=True)
def process_callevent(record):
    """
    Process the callevent, this tasks will:
        - Retrieve the callrequest using either callrequest_id or request_uuid
        - create the voipcall, and save different data
    """
    #TODO: add method in utils parse_callevent
    app_type = 'campaign'
    event_name = record[1]
    body = record[2]
    job_uuid = record[3]
    call_uuid = record[4]
    #used_gateway_id = record[5]
    callrequest_id = record[6]
    alarm_request_id = record[7]
    callerid = record[8]
    phonenumber = record[9]
    duration = record[10]
    billsec = record[11]
    hangup_cause = record[12]
    hangup_cause_q850 = record[13]
    starting_date = record[14]
    amd_status = record[17]
    leg = record[18]

    if event_name == 'BACKGROUND_JOB':
        #hangup cause come from body
        hangup_cause = body[5:]

    if hangup_cause == '':
        hangup_cause = body[5:]

    request_uuid = job_uuid
    opt_hangup_cause = hangup_cause
    debug_query(22)

    try:
        if callrequest_id == 0:
            callrequest = Callrequest.objects \
                .select_related('aleg_gateway', 'subscriber', 'campaign') \
                .get(request_uuid=request_uuid.strip(' \t\n\r'))
        else:
            #mainly coming here
            callrequest = Callrequest.objects \
                .select_related('aleg_gateway', 'subscriber', 'campaign') \
                .get(id=callrequest_id)
    except:
        logger.error("Cannot find Callrequest job_uuid : %s" % job_uuid)
        return True

    if callrequest.alarm_request_id:
        app_type = 'alarm'
        alarm_req = AlarmRequest.objects.get(pk=callrequest.alarm_request_id)
        #Overwrite alarm_request_id as this is equal to 0 when call fails
        alarm_request_id = callrequest.alarm_request_id

    logger.debug("Find Callrequest id : %d" % callrequest.id)
    debug_query(23)

    if leg == 'aleg' and app_type == 'campaign':
        #Update callrequest
        #update_callrequest.delay(callrequest, opt_hangup_cause)
        #Disabled above tasks to reduce amount of tasks

        #Only the aleg will update the subscriber status / Bleg is only recorded
        #Update Callrequest Status
        if opt_hangup_cause == 'NORMAL_CLEARING':
            callrequest.status = CALLREQUEST_STATUS.SUCCESS
            if callrequest.subscriber.status != SUBSCRIBER_STATUS.COMPLETED:
                callrequest.subscriber.status = SUBSCRIBER_STATUS.SENT
        else:
            callrequest.status = CALLREQUEST_STATUS.FAILURE
            callrequest.subscriber.status = SUBSCRIBER_STATUS.FAIL
        callrequest.hangup_cause = opt_hangup_cause
        # ...

        callrequest.save()
        callrequest.subscriber.save()
        debug_query(24)
    elif leg == 'aleg' and app_type == 'alarm':
        if opt_hangup_cause == 'NORMAL_CLEARING':
            callrequest.status = CALLREQUEST_STATUS.SUCCESS
            alarm_req.status = ALARMREQUEST_STATUS.SUCCESS
            alarm_req.duration = duration
            alarm_req.alarm.status = ALARM_STATUS.SUCCESS
        else:
            callrequest.status = CALLREQUEST_STATUS.FAILURE
            alarm_req.status = ALARMREQUEST_STATUS.FAILURE
            alarm_req.alarm.status = ALARM_STATUS.FAILURE
        callrequest.hangup_cause = opt_hangup_cause

        callrequest.save()
        alarm_req.save()
        alarm_req.alarm.save()
        debug_query(24)

    if call_uuid == '':
        call_uuid = job_uuid
    if callerid == '':
        callerid = callrequest.callerid
    if phonenumber == '':
        phonenumber = callrequest.phone_number
    #Create those in Bulk - add in a buffer until reach certain number
    # buff_voipcall.save(
    #     obj_callrequest=callrequest,
    #     request_uuid=request_uuid,
    #     leg=leg,
    #     hangup_cause=opt_hangup_cause,
    #     hangup_cause_q850=hangup_cause_q850,
    #     callerid=callerid,
    #     phonenumber=phonenumber,
    #     starting_date=starting_date,
    #     call_uuid=call_uuid,
    #     duration=duration,
    #     billsec=billsec,
    #     amd_status=amd_status)

    # debug_query(25)

    voipcall_save(
        callrequest=callrequest,
        request_uuid=request_uuid,
        leg=leg,
        hangup_cause=opt_hangup_cause,
        hangup_cause_q850=hangup_cause_q850,
        callerid=callerid,
        phonenumber=phonenumber,
        starting_date=starting_date,
        call_uuid=call_uuid,
        duration=duration,
        billsec=billsec,
        amd_status=amd_status)

    #If the call failed we will check if we want to make a retry call
    #Add condition to retry when it s machine and we want to reach a human
    if (app_type == 'campaign' and opt_hangup_cause != 'NORMAL_CLEARING'
        and callrequest.call_type == CALLREQUEST_TYPE.ALLOW_RETRY) or \
       (amd_status == 'machine' and callrequest.campaign.voicemail and
        callrequest.campaign.amd_behavior == AMD_BEHAVIOR.HUMAN_ONLY):
        #Update to Retry Done
        callrequest.call_type = CALLREQUEST_TYPE.RETRY_DONE
        callrequest.save()

        debug_query(26)

        #check if we are allowed to retry on failure
        if ((callrequest.subscriber.count_attempt - 1) >= callrequest.campaign.maxretry
           or not callrequest.campaign.maxretry):
            logger.error("Not allowed retry - Maxretry (%d)" %
                         callrequest.campaign.maxretry)
            #Check here if we should try for completion
            check_retrycall_completion(callrequest)
            debug_query(28)
        else:
            #Allowed Retry
            logger.error("Allowed Retry - Maxretry (%d)" % callrequest.campaign.maxretry)

            # Create new callrequest, Assign parent_callrequest,
            # Change callrequest_type & num_attempt
            new_callrequest = Callrequest(
                request_uuid=uuid1(),
                parent_callrequest_id=callrequest.id,
                call_type=CALLREQUEST_TYPE.ALLOW_RETRY,
                num_attempt=callrequest.num_attempt + 1,
                user=callrequest.user,
                campaign_id=callrequest.campaign_id,
                aleg_gateway_id=callrequest.aleg_gateway_id,
                content_type=callrequest.content_type,
                object_id=callrequest.object_id,
                phone_number=callrequest.phone_number,
                timelimit=callrequest.timelimit,
                callerid=callrequest.callerid,
                timeout=callrequest.timeout,
                subscriber_id=callrequest.subscriber_id
            )
            new_callrequest.save()
            #NOTE : implement a PID algorithm
            second_towait = callrequest.campaign.intervalretry
            debug_query(29)

            logger.debug("Init Retry CallRequest in  %d seconds" % second_towait)
            init_callrequest.apply_async(
                args=[new_callrequest.id, callrequest.campaign.id, callrequest.campaign.callmaxduration],
                countdown=second_towait)

    elif app_type == 'campaign':
        #The Call is Answered and it's a campaign call
        logger.debug("Check for completion call")

        #Check if we should relaunch a new call to achieve completion
        check_retrycall_completion(callrequest)

    elif opt_hangup_cause != 'NORMAL_CLEARING' and app_type == 'alarm':
        #
        check_retry_alarm(alarm_request_id)


# OPTIMIZATION - TO REVIEW
def callevent_processing():
    """
    Retrieve callevents and process them

    call_event table is created by listener.lua

    CREATE TABLE if not exists call_event (
        id serial NOT NULL PRIMARY KEY,
        event_name varchar(200) NOT NULL,
        body varchar(200) NOT NULL,
        job_uuid varchar(200),
        call_uuid varchar(200) NOT NULL,
        used_gateway_id integer,
        callrequest_id integer,
        alarm_request_id integer,
        callerid varchar(200),
        phonenumber varchar(200),
        duration integer DEFAULT 0,
        billsec integer DEFAULT 0,
        hangup_cause varchar(40),
        hangup_cause_q850 varchar(10),
        amd_status varchar(40),
        starting_date timestamp with time zone,
        status smallint,
        leg smallint,
        created_date timestamp with time zone NOT NULL
        );
    CREATE INDEX call_event_idx_status ON call_event (status);
    --CREATE INDEX call_event_idx_date ON call_event (created_date);
    --CREATE INDEX call_event_idx_uuid ON call_event (call_uuid);
    """
    debug_query(20)

    cursor = connection.cursor()
    #TODO (Areski)
    #Replace this for ORM with select_for_update or transaction

    try:
        sql_statement = "SELECT id, event_name, body, job_uuid, call_uuid, used_gateway_id, " \
            "callrequest_id, alarm_request_id, callerid, phonenumber, duration, billsec, hangup_cause, " \
            "hangup_cause_q850, starting_date, status, created_date, amd_status, leg " \
            "FROM call_event WHERE status=1 LIMIT 1000 OFFSET 0"

        cursor.execute(sql_statement)
        row = cursor.fetchall()
    except:
        #Error on sql / Lua listener might not be on
        logger.error("Error Fetching call_event")
    else:
        debug_query(21)
        # buff_voipcall = BufferVoIPCall()
        for record in row:
            call_event_id = record[0]
            event_name = record[1]
            #Update Call Event
            sql_statement = "UPDATE call_event SET status=2 WHERE id=%d" % call_event_id
            cursor.execute(sql_statement)

            logger.info("Processing Call_Event : %s" % event_name)
            process_callevent.delay(record)

        debug_query(30)
        # buff_voipcall.commit()
        # debug_query(31)
        logger.debug('End Loop : callevent_processing')


class task_pending_callevent(PeriodicTask):
    """
    A periodic task that checks the call events

    **Usage**:

        callevent_processing.delay()
    """
    #The campaign have to run every minutes in order to control the number
    # of calls per minute. Cons : new calls might delay 60seconds
    run_every = timedelta(seconds=15)

    #run_every = timedelta(seconds=15)

    #TODO: problem of the lock if it's a cloud, it won't be shared
    @only_one(ikey="task_pending_callevent", timeout=LOCK_EXPIRE)
    def run(self, **kwargs):
        logger.debug("ASK :: task_pending_callevent")
        callevent_processing()

"""
from celery.decorators import periodic_task
from datetime import timedelta

@periodic_task(run_every=timedelta(seconds=1))
@only_one(ikey="callrequest_pending", timeout=LOCK_EXPIRE)
def callrequest_pending(*args, **kwargs):
    #A periodic task that checks for pending calls
    #**Usage**:
    #    callrequest_pending.delay()
    #
    logger.info("TASK :: callrequest_pending")

    list_callrequest = Callrequest.objects\
                .get_pending_callrequest()[:settings.MAX_CALLS_PER_SECOND]
    logger.info("callrequest_pending - number_found=%d" % \
                len(list_callrequest))

    if not list_callrequest:
        logger.debug("No Pending Calls")

    for callrequest in list_callrequest:
        logger.info("=> CallRequest (id:%s, phone_number:%s)" %
                    (callrequest.id, callrequest.phone_number))

        callrequest.status = 7 # Update to Process
        callrequest.save()
        init_callrequest.delay(callrequest.id, callrequest.campaign.id, callrequest.campaign.callmaxduration)
"""


@task(ignore_result=True)
def init_callrequest(callrequest_id, campaign_id, callmaxduration, ms_addtowait=0, alarm_request_id=None):
    """
    This task read the callrequest, update it as 'In Process'
    then proceed on the call outbound, using the different call engine supported

    **Attributes**:

        * ``callrequest_id`` - Callrequest ID
        * ``campaign_id`` - Campaign ID
        * ``callmaxduration`` - Max duration
        * ``ms_addtowait`` - Milliseconds to wait before outbounding the call

    """
    outbound_failure = False
    subscriber_id = None
    contact_id = None
    debug_query(8)

    if ms_addtowait > 0:
        sleep(ms_addtowait)

    #Survey Call or Alarm Call
    if campaign_id:
        #TODO: use only https://docs.djangoproject.com/en/dev/ref/models/querysets/#django.db.models.query.QuerySet.only
        obj_callrequest = Callrequest.objects\
            .select_related('aleg_gateway', 'user__userprofile', 'subscriber', 'campaign').get(id=callrequest_id)
        subscriber_id = obj_callrequest.subscriber_id
        contact_id = obj_callrequest.subscriber.contact_id
    elif alarm_request_id:
        obj_callrequest = Callrequest.objects.select_related('aleg_gateway', 'user__userprofile').get(id=callrequest_id)
        alarm_request_id = obj_callrequest.alarm_request_id
    else:
        logger.info("TASK :: init_callrequest, wrong campaign_id & alarm_request_id")
        return False

    debug_query(9)
    logger.info("TASK :: init_callrequest - status:%s;cmpg:%s;alarm:%s" %
                (obj_callrequest.status, campaign_id, alarm_request_id))

    # TODO: move method prepare_phonenumber into the model gateway
    #obj_callrequest.aleg_gatewayprepare_phonenumber()
    dialout_phone_number = prepare_phonenumber(
        obj_callrequest.phone_number,
        obj_callrequest.aleg_gateway.addprefix,
        obj_callrequest.aleg_gateway.removeprefix,
        obj_callrequest.aleg_gateway.status)
    if not dialout_phone_number:
        logger.info("Error with dialout_phone_number - phone_number:%s" % (obj_callrequest.phone_number))
        return False
    else:
        logger.debug("dialout_phone_number : %s" % dialout_phone_number)

    debug_query(10)

    if settings.DIALERDEBUG:
        dialout_phone_number = settings.DIALERDEBUG_PHONENUMBER

    #Retrieve the Gateway for the A-Leg
    gateways = obj_callrequest.aleg_gateway.gateways
    gateway_id = obj_callrequest.aleg_gateway.id
    #gateway_codecs / gateway_retries
    gateway_timeouts = obj_callrequest.aleg_gateway.gateway_timeouts
    # fraud protection on short calls
    try:
        gateway_timeouts = int(gateway_timeouts)
        if gateway_timeouts < 10:
            gateway_timeouts = 10
    except ValueError:
        gateway_timeouts = 45
    originate_dial_string = obj_callrequest.aleg_gateway.originate_dial_string

    debug_query(11)

    #Sanitize gateways
    gateways = gateways.strip()
    if gateways[-1] != '/':
        gateways = gateways + '/'

    originate_dial_string = obj_callrequest.aleg_gateway.originate_dial_string
    if obj_callrequest.user.userprofile and obj_callrequest.user.userprofile.accountcode:
        originate_dial_string = originate_dial_string + ',accountcode=' + \
            str(obj_callrequest.user.userprofile.accountcode)

    debug_query(12)

    if settings.NEWFIES_DIALER_ENGINE.lower() == 'esl':
        try:
            args_list = []
            send_digits = False
            time_limit = callmaxduration

            # To wait before sending DTMF to the extension, you can add leading 'w'
            # characters.
            # Each 'w' character waits 0.5 seconds instead of sending a digit.
            # Each 'W' character waits 1.0 seconds instead of sending a digit.
            # You can also add the tone duration in ms by appending @[duration] after string.
            # Eg. 1w2w3@1000
            check_senddigit = dialout_phone_number.partition('w')
            if check_senddigit[1] == 'w':
                send_digits = check_senddigit[1] + check_senddigit[2]
                dialout_phone_number = check_senddigit[0]

            args_list.append("origination_caller_id_number=%s" % obj_callrequest.callerid)
            args_list.append("origination_caller_id_name='%s'" % obj_callrequest.caller_name)

            #Add App Vars
            args_list.append("campaign_id=%s,subscriber_id=%s,alarm_request_id=%s,used_gateway_id=%s,callrequest_id=%s,contact_id=%s" %
                (campaign_id, subscriber_id, alarm_request_id, gateway_id, obj_callrequest.id, contact_id))
            args_list.append(originate_dial_string)

            #Call Vars
            callvars = "bridge_early_media=true,originate_timeout=%d,newfiesdialer=true,leg_type=1" % \
                (gateway_timeouts, )
            args_list.append(callvars)

            #Default Test
            hangup_on_ring = ''
            send_preanswer = False
            # set hangup_on_ring
            try:
                hangup_on_ring = int(hangup_on_ring)
            except ValueError:
                hangup_on_ring = -1
            exec_on_media = 1
            if hangup_on_ring >= 10:  # 0->10 fraud protection on short calls
                args_list.append("execute_on_media_%d='sched_hangup +%d ORIGINATOR_CANCEL'" %
                                 (exec_on_media, hangup_on_ring))
                exec_on_media += 1

            #TODO: look and test http://wiki.freeswitch.org/wiki/Misc._Dialplan_Tools_queue_dtmf
            # Send digits
            if send_digits:
                if send_preanswer:
                    args_list.append("execute_on_media_%d='send_dtmf %s'" % (exec_on_media, send_digits))
                    exec_on_media += 1
                else:
                    args_list.append("execute_on_answer='send_dtmf %s'" % send_digits)

            # Set time_limit
            try:
                time_limit = int(time_limit)
            except ValueError:
                time_limit = -1
            #TODO : Fix time_limit - maybe implement this into Lua
            # if time_limit > 0:
            #     # create sched_hangup_id
            #     sched_hangup_id = str(uuid1())
            #     # create a new request uuid
            #     request_uuid = str(uuid1())
            #     args_list.append("api_on_answer_1='sched_api +%d %s hupall ALLOTTED_TIMEOUT'"
            #         % (time_limit, sched_hangup_id))

            # build originate string
            args_str = ','.join(args_list)

            #DEBUG
            #settings.ESL_SCRIPT = '&playback(/usr/local/freeswitch/sounds/en/us/callie/voicemail/8000/vm-record_greeting.wav)'
            if settings.DIALERDEBUG:
                dial_command = "originate {%s}user/areski '%s'" % (args_str, settings.ESL_SCRIPT)
            else:
                dial_command = "originate {%s}%s%s '%s'" % \
                    (args_str, gateways, dialout_phone_number, settings.ESL_SCRIPT)

            # originate {bridge_early_media=true,hangup_after_bridge=true,originate_timeout=10}user/areski &playback(/tmp/myfile.wav)
            # dial = "originate {bridge_early_media=true,hangup_after_bridge=true,originate_timeout=,newfiesdialer=true,used_gateway_id=1,callrequest_id=38,leg_type=1,origination_caller_id_number=234234234,origination_caller_id_name=234234,effective_caller_id_number=234234234,effective_caller_id_name=234234,}user//1000 '&lua(/usr/share/newfies-lua/newfies.lua)'"
            logger.warn('dial_command : %s' % dial_command)

            request_uuid = dial_out(dial_command)

            debug_query(14)

            if request_uuid and len(request_uuid) > 0 and request_uuid[:5] == 'error':
                outbound_failure = True
            debug_query(13)
        except:
            raise
            logger.error('error : ESL')
            outbound_failure = True
        logger.debug('Received RequestUUID :> %s' % request_uuid)
    else:
        logger.error('No other method supported!')
        obj_callrequest.status = CALLREQUEST_STATUS.FAILURE
        obj_callrequest.save()
        #ADD if alarm_request_id update AlarmRequest
        return False

    #Survey Call or Alarm Call
    if campaign_id:
        #Update Subscriber
        if not obj_callrequest.subscriber.count_attempt:
            obj_callrequest.subscriber.count_attempt = 1
        else:
            obj_callrequest.subscriber.count_attempt = obj_callrequest.subscriber.count_attempt + 1
        obj_callrequest.subscriber.last_attempt = datetime.utcnow().replace(tzinfo=utc)
        #check if the outbound call failed then update Subscriber
        if outbound_failure:
            obj_callrequest.subscriber.status = SUBSCRIBER_STATUS.FAIL
        obj_callrequest.subscriber.save()
    elif alarm_request_id:
        if outbound_failure:
            check_retry_alarm(alarm_request_id)

    #Update CallRequest Object
    obj_callrequest.request_uuid = request_uuid
    #check if the outbound call failed
    if outbound_failure:
        obj_callrequest.status = CALLREQUEST_STATUS.FAILURE
    else:
        obj_callrequest.status = CALLREQUEST_STATUS.CALLING
    obj_callrequest.save()

    debug_query(14)

    return True


def check_retry_alarm(alarm_request_id):
    obj_alarmreq = AlarmRequest.objects.get(id=alarm_request_id)
    if obj_alarmreq.alarm.maxretry >= obj_alarmreq.alarm.num_attempt:
        obj_alarmreq.update_status(ALARMREQUEST_STATUS.RETRY)
        obj_alarmreq.alarm.retry_alarm()
    else:
        obj_alarmreq.update_status(ALARMREQUEST_STATUS.FAILURE)
        #Check phonenumber_sms_failure
        if obj_alarmreq.alarm.phonenumber_sms_failure:

            # TODO: Use template SMS key (failure_reach) with this text as default
            failure_sms = "we haven't been able to reach '" \
                + str(obj_alarmreq.alarm.alarm_phonenumber) \
                + "' after trying " + str(obj_alarmreq.alarm.num_attempt) \
                + " times"

            sms_obj = Message.objects.create(
                content=failure_sms,
                recipient_number=obj_alarmreq.alarm.phonenumber_sms_failure,
                sender=obj_alarmreq.alarm.survey.user,
                content_type=ContentType.objects.get(model='alarmrequest'),
                object_id=obj_alarmreq.id,
            )
            try:
                calendar_user = obj_alarmreq.alarm.event.calendar.user
                calendar_setting = CalendarUserProfile.objects.get(user=calendar_user).calendar_setting
                SendMessage.delay(sms_obj.id, calendar_setting.sms_gateway_id)
            except:
                SendMessage.delay(sms_obj.id)

            print "Sent SMS Failure alarm : %s" % str(obj_alarmreq.alarm.alarm_phonenumber)

########NEW FILE########
__FILENAME__ = dialer_cdr_tags
# Newfies-Dialer License
# http://www.newfies-dialer.org
#
# This Source Code Form is subject to the terms of the Mozilla Public
# License, v. 2.0. If a copy of the MPL was not distributed with this file,
# You can obtain one at http://mozilla.org/MPL/2.0/.
#
# Copyright (C) 2011-2014 Star2Billing S.L.
#
# The Initial Developer of the Original Code is
# Arezqui Belaid <info@star2billing.com>
#

from django.template.defaultfilters import register
from dialer_cdr.constants import LEG_TYPE, VOIPCALL_AMD_STATUS
from mod_utils.function_def import get_status_value


@register.filter(name='leg_type_name')
def leg_type_name(value):
    """leg type

    >>> leg_type_name(1)
    u'A-Leg'

    >>> leg_type_name(2)
    u'B-Leg'

    >>> leg_type_name(0)
    ''
    """
    return get_status_value(value, LEG_TYPE)


@register.filter(name='amd_status_name')
def amd_status_name(value):
    """amd status name

    >>> amd_status_name(1)
    u'Person'

    >>> amd_status_name(2)
    u'Machine'

    >>> amd_status_name(0)
    ''
    """
    return get_status_value(value, VOIPCALL_AMD_STATUS)

########NEW FILE########
__FILENAME__ = icons
#
# Newfies-Dialer License
# http://www.newfies-dialer.org
#
# This Source Code Form is subject to the terms of the Mozilla Public
# License, v. 2.0. If a copy of the MPL was not distributed with this file,
# You can obtain one at http://mozilla.org/MPL/2.0/.
#
# Copyright (C) 2011-2014 Star2Billing S.L.
#
# The Initial Developer of the Original Code is
# Arezqui Belaid <info@star2billing.com>
#

from django import template
from django.conf import settings

register = template.Library()


def icon(icon_name):
    """
    template tag to display icon

    >>> icon('test')
    'class="icon" style="text-decoration:none;background-image:url(/static/newfies/icons/test.png);"'
    """
    return 'class="icon" style="text-decoration:none;background-image:url(%snewfies/icons/%s.png);"' \
           % (settings.STATIC_URL, icon_name)
register.simple_tag(icon)


def listicon(icon_name):
    """
    template tag to display list style icon

    >>> listicon('test')
    'style="text-decoration:none;list-style-image:url(/static/newfies/icons/test.png);"'
    """
    return 'style="text-decoration:none;list-style-image:url(%snewfies/icons/%s.png);"' \
           % (settings.STATIC_URL, icon_name)
register.simple_tag(listicon)


def icon_style(icon_name):
    """
    template tag to display style icon

    >>> icon_style('test')
    'style="text-decoration:none;background-image:url(/static/newfies/icons/test.png);"'
    """
    return 'style="text-decoration:none;background-image:url(%snewfies/icons/%s.png);"' \
           % (settings.STATIC_URL, icon_name)
register.simple_tag(icon_style)

########NEW FILE########
__FILENAME__ = tests
#
# Newfies-Dialer License
# http://www.newfies-dialer.org
#
# This Source Code Form is subject to the terms of the Mozilla Public
# License, v. 2.0. If a copy of the MPL was not distributed with this file,
# You can obtain one at http://mozilla.org/MPL/2.0/.
#
# Copyright (C) 2011-2014 Star2Billing S.L.
#
# The Initial Developer of the Original Code is
# Arezqui Belaid <info@star2billing.com>
#

from django.contrib.auth.models import User
from django.contrib.contenttypes.models import ContentType
from django.core.management import call_command
from django.test import TestCase
from django_lets_go.utils import BaseAuthenticatedClient
from dialer_campaign.models import Campaign
from dialer_cdr.models import Callrequest, VoIPCall
from dialer_cdr.forms import VoipSearchForm
from dialer_cdr.views import export_voipcall_report, voipcall_report
from dialer_cdr.function_def import voipcall_search_admin_form_fun
# from dialer_cdr.tasks import init_callrequest
from datetime import datetime
from django.utils.timezone import utc


class DialerCdrView(BaseAuthenticatedClient):
    """Test cases for Callrequest, VoIPCall Admin Interface."""

    def test_admin_callrequest_view_list(self):
        """Test Function to check admin callrequest list"""
        response = self.client.get('/admin/dialer_cdr/callrequest/')
        self.failUnlessEqual(response.status_code, 200)

    def test_admin_callrequest_view_add(self):
        """Test Function to check admin callrequest add"""
        response = self.client.get('/admin/dialer_cdr/callrequest/add/')
        self.failUnlessEqual(response.status_code, 200)

        response = self.client.post(
            '/admin/dialer_cdr/callrequest/add/',
            data={'status': '1', 'campaign': '1',
                  'aleg_uuid': 'e8fee8f6-40dd-11e1-964f-000c296bd875',
                  'callerid': '12345',
                  'request_uuid': 'e8fee8f6-40dd-11e1-964f-000c296bd875',
                  'phone_number': '123456789',
                  'aleg_gateway': '1',
                  'user': '1'})
        self.assertEqual(response.status_code, 200)

    def test_admin_voipcall_view_list(self):
        """Test Function to check admin voipcall list"""
        response = self.client.get('/admin/dialer_cdr/voipcall/')
        self.failUnlessEqual(response.status_code, 302)

    def test_admin_voipcall_view_report(self):
        """Test Function to check admin voipcall list"""
        response = self.client.get('/admin/dialer_cdr/voipcall/voip_daily_report/')
        self.failUnlessEqual(response.status_code, 200)

        response = self.client.post('/admin/dialer_cdr/voipcall/voip_daily_report/',
            data={'from_date': datetime.utcnow().replace(tzinfo=utc).strftime("%Y-%m-%d"),
                  'to_date': datetime.utcnow().replace(tzinfo=utc).strftime("%Y-%m-%d")})
        self.assertEqual(response.status_code, 200)

        request = self.factory.post(
            '/admin/dialer_cdr/voipcall/voip_daily_report/',
            data={'from_date': datetime.utcnow().replace(tzinfo=utc).strftime("%Y-%m-%d"),
                  'to_date': datetime.utcnow().replace(tzinfo=utc).strftime("%Y-%m-%d")})
        request.user = self.user
        request.session = {}
        response = voipcall_search_admin_form_fun(request)
        self.assertTrue(response)


class DialerCdrCustomerView(BaseAuthenticatedClient):
    """Test cases for Callrequest, VoIPCall Customer Interface."""

    fixtures = ['auth_user.json', 'gateway.json', 'dialer_setting.json',
                'user_profile.json', 'phonebook.json', 'contact.json',
                'dnc_list.json', 'dnc_contact.json', 'campaign.json',
                'subscriber.json',
                'survey_template.json', 'survey.json',
                'section_template.json', 'section.json',
                'callrequest.json', 'voipcall.json',
                ]

    def test_customer_voipcall(self):
        #response = self.client.post('/voipcall_report/',
        #                data={'from_date': datetime.utcnow().replace(tzinfo=utc).strftime("%Y-%m-%d"),
        #                      'to_date': datetime.utcnow().replace(tzinfo=utc).strftime("%Y-%m-%d")})
        #self.assertEqual(response.status_code, 200)

        request = self.factory.get('/voipcall_report/')
        request.user = self.user
        request.session = {}
        response = voipcall_report(request)
        self.assertEqual(response.status_code, 200)

    def test_export_voipcall_report(self):
        """Test Function to check VoIP call export report"""
        request = self.factory.get('/export_voipcall_report/?format=csv')
        request.user = self.user
        request.session = {}
        request.session['voipcall_record_qs'] = {}
        response = export_voipcall_report(request)
        self.assertEqual(response.status_code, 200)

        request = self.factory.get('/export_voipcall_report/?format=json')
        request.user = self.user
        request.session = {}
        request.session['voipcall_record_qs'] = {}
        response = export_voipcall_report(request)
        self.assertEqual(response.status_code, 200)

        request = self.factory.get('/export_voipcall_report/?format=xls')
        request.user = self.user
        request.session = {}
        request.session['voipcall_record_qs'] = {}
        response = export_voipcall_report(request)
        self.assertEqual(response.status_code, 200)


class DialerCdrCeleryTaskTestCase(TestCase):
    """Test cases for celery task"""

    fixtures = ['auth_user.json', 'gateway.json', 'dialer_setting.json',
                'user_profile.json', 'phonebook.json', 'contact.json',
                'dnc_list.json', 'dnc_contact.json', 'survey.json',
                'campaign.json', 'subscriber.json', 'callrequest.json', 'voipcall.json',
                'user_profile.json']

    def setUp(self):
        self.callrequest = Callrequest.objects.get(pk=1)
        self.campaign = Campaign.objects.get(pk=1)

    #def test_init_callrequest(self):
    #    """Test that the ``init_callrequest``
    #    task runs with no errors, and returns the correct result."""
    #    result = init_callrequest.delay(self.callrequest.id, self.campaign.id, 30)
    #    self.assertEqual(result.successful(), True)


class DialerCdrModel(TestCase):
    """Test Callrequest, VoIPCall models"""

    fixtures = ['auth_user.json', 'gateway.json', 'dialer_setting.json',
                'user_profile.json', 'phonebook.json', 'contact.json',
                'dnc_list.json', 'dnc_contact.json', 'survey.json',
                'campaign.json', 'subscriber.json', 'callrequest.json', 'voipcall.json',
                'user_profile.json']

    def setUp(self):
        self.user = User.objects.get(username='admin')
        VoipSearchForm(self.user)

        try:
            content_type_id = ContentType.objects.get(model='survey').id
        except:
            content_type_id = 1

        # Callrequest model
        self.callrequest = Callrequest(
            call_type=1,
            status=1,
            user=self.user,
            phone_number='123456',
            subscriber_id=1,
            campaign_id=1,
            aleg_gateway_id=1,
            content_type_id=content_type_id,
            object_id=1,
        )
        self.callrequest.save()

        # VoIPCall model
        self.voipcall = VoIPCall(
            user=self.user,
            used_gateway_id=1,
            callrequest=self.callrequest,
            callid='Top Gun',
            phone_number='123456',
            leg_type=1,
            duration=20,
        )
        self.voipcall.save()
        self.assertEqual(self.voipcall.__unicode__(), u'2 - Top Gun')

        # Test mgt command
        call_command("create_callrequest_cdr", "1|1")

        call_command("create_callrequest_cdr", "3|1")

    def test_name(self):
        self.assertEqual(self.callrequest.phone_number, "123456")
        #self.assertEqual(self.callrequest.__unicode__(), u'Top Gun')
        self.assertEqual(self.voipcall.phone_number, "123456")

        Callrequest.objects.get_pending_callrequest()

        self.voipcall.destination_name()
        self.voipcall.duration = ''
        self.voipcall.min_duration()
        self.voipcall.duration = 12
        self.voipcall.min_duration()

    def teardown(self):
        self.callrequest.delete()
        self.voipcall.delete()

########NEW FILE########
__FILENAME__ = urls
#
# Newfies-Dialer License
# http://www.newfies-dialer.org
#
# This Source Code Form is subject to the terms of the Mozilla Public
# License, v. 2.0. If a copy of the MPL was not distributed with this file,
# You can obtain one at http://mozilla.org/MPL/2.0/.
#
# Copyright (C) 2011-2014 Star2Billing S.L.
#
# The Initial Developer of the Original Code is
# Arezqui Belaid <info@star2billing.com>
#

from django.conf.urls import patterns

urlpatterns = patterns('dialer_cdr.views',
    # VoIP Call Report urls
    (r'^voipcall_report/$', 'voipcall_report'),
    (r'^export_voipcall_report/$', 'export_voipcall_report'),
)

########NEW FILE########
__FILENAME__ = utils
#
# Newfies-Dialer License
# http://www.newfies-dialer.org
#
# This Source Code Form is subject to the terms of the Mozilla Public
# License, v. 2.0. If a copy of the MPL was not distributed with this file,
# You can obtain one at http://mozilla.org/MPL/2.0/.
#
# Copyright (C) 2011-2014 Star2Billing S.L.
#
# The Initial Developer of the Original Code is
# Arezqui Belaid <info@star2billing.com>
#

from dialer_cdr.models import VoIPCall
from dialer_cdr.constants import VOIPCALL_AMD_STATUS, LEG_TYPE
from celery.utils.log import get_task_logger
#from dialer_cdr.function_def import get_prefix_obj

logger = get_task_logger(__name__)


class BufferVoIPCall:
    """
    BufferVoIPCall stores VoIPCall (CDR) into a buffer and allow
    to save CDRs per bulk.
    - save : store the CDRs in memory
    - commit : trigger the bulk_create method to save the CDRs
    """

    def __init__(self):
        self.list_voipcall = []

    def save(self, obj_callrequest, request_uuid, leg='aleg', hangup_cause='',
             hangup_cause_q850='', callerid='',
             phonenumber='', starting_date='',
             call_uuid='', duration=0, billsec=0, amd_status='person'):
        """
        Save voip call into buffer
        """
        if leg == 'aleg':
            #A-Leg
            leg_type = LEG_TYPE.A_LEG
            used_gateway = obj_callrequest.aleg_gateway
        else:
            #B-Leg
            leg_type = LEG_TYPE.B_LEG
            used_gateway = obj_callrequest.aleg_gateway
            #This code is useful if we want to let the survey editor select the gateway
            # if obj_callrequest.content_object.__class__.__name__ == 'Survey':
            #     #Get the gateway from the App
            #     used_gateway = obj_callrequest.content_object.gateway
            # else:
            #     #Survey
            #     used_gateway = obj_callrequest.aleg_gateway
        if amd_status == 'machine':
            amd_status_id = VOIPCALL_AMD_STATUS.MACHINE
        else:
            amd_status_id = VOIPCALL_AMD_STATUS.PERSON

        logger.debug('Create CDR - request_uuid=%s;leg=%d;hangup_cause=%s;billsec=%s;amd_status=%s' %
            (request_uuid, leg_type, hangup_cause, str(billsec), amd_status))

        #Get the first word only
        hangup_cause = hangup_cause.split()[0]

        if hangup_cause == 'NORMAL_CLEARING' or hangup_cause == 'ALLOTTED_TIMEOUT':
            hangup_cause = 'ANSWER'

        if hangup_cause == 'ANSWER':
            disposition = 'ANSWER'
        elif hangup_cause == 'USER_BUSY':
            disposition = 'BUSY'
        elif hangup_cause == 'NO_ANSWER':
            disposition = 'NOANSWER'
        elif hangup_cause == 'ORIGINATOR_CANCEL':
            disposition = 'CANCEL'
        elif hangup_cause == 'NORMAL_CIRCUIT_CONGESTION':
            disposition = 'CONGESTION'
        else:
            disposition = 'FAILED'

        #Note: Removed for test performance
        #Note: Look at prefix PG module : https://github.com/dimitri/prefix
        #prefix_obj = get_prefix_obj(phonenumber)

        #Save this for bulk saving
        self.list_voipcall.append(
            VoIPCall(
                user_id=obj_callrequest.user_id,
                request_uuid=request_uuid,
                leg_type=leg_type,
                used_gateway=used_gateway,
                callrequest_id=obj_callrequest.id,
                callid=call_uuid,
                callerid=callerid,
                phone_number=phonenumber,
                #dialcode=prefix_obj,
                starting_date=starting_date,
                duration=duration,
                billsec=billsec,
                disposition=disposition,
                hangup_cause=hangup_cause,
                hangup_cause_q850=hangup_cause_q850,
                amd_status=amd_status_id)
        )

    def commit(self):
        """
        function to create CDR / VoIP Call
        """
        VoIPCall.objects.bulk_create(self.list_voipcall)


def voipcall_save(callrequest, request_uuid, leg='aleg', hangup_cause='',
                  hangup_cause_q850='', callerid='', phonenumber='', starting_date='',
                  call_uuid='', duration=0, billsec=0, amd_status='person'):
    """
    This task will save the voipcall(CDR) to the DB,
    it will also reformat the disposition
    """
    #TODO: following code is duplicated, see above

    used_gateway = callrequest.aleg_gateway
    #Set Leg Type
    if leg == 'aleg':
        leg_type = LEG_TYPE.A_LEG
    else:
        leg_type = LEG_TYPE.B_LEG
    #Set AMD status
    if amd_status == 'machine':
        amd_status_id = VOIPCALL_AMD_STATUS.MACHINE
    else:
        amd_status_id = VOIPCALL_AMD_STATUS.PERSON

    logger.debug('Create CDR - request_uuid=%s;leg=%d;hangup_cause=%s;billsec=%s;amd_status=%s' %
        (request_uuid, leg_type, hangup_cause, str(billsec), amd_status))

    #Get the first word only
    hangup_cause = hangup_cause.split()[0]

    if hangup_cause == 'NORMAL_CLEARING' or hangup_cause == 'ALLOTTED_TIMEOUT':
        disposition = 'ANSWER'
    elif hangup_cause == 'USER_BUSY':
        disposition = 'BUSY'
    elif hangup_cause == 'NO_ANSWER':
        disposition = 'NOANSWER'
    elif hangup_cause == 'ORIGINATOR_CANCEL':
        disposition = 'CANCEL'
    elif hangup_cause == 'NORMAL_CIRCUIT_CONGESTION':
        disposition = 'CONGESTION'
    else:
        disposition = 'FAILED'

    #Note: Removed for test performance
    #Note: Look at prefix PG module : https://github.com/dimitri/prefix
    #prefix_obj = get_prefix_obj(phonenumber)

    #Save the VoIPCall
    new_voipcall = VoIPCall(
        user_id=callrequest.user_id,
        request_uuid=request_uuid,
        leg_type=leg_type,
        used_gateway=used_gateway,
        callrequest_id=callrequest.id,
        callid=call_uuid,
        callerid=callerid,
        phone_number=phonenumber,
        #dialcode=prefix_obj,
        starting_date=starting_date,
        duration=duration,
        billsec=billsec,
        disposition=disposition,
        hangup_cause=hangup_cause,
        hangup_cause_q850=hangup_cause_q850,
        amd_status=amd_status_id)
    new_voipcall.save()

########NEW FILE########
__FILENAME__ = views
#
# Newfies-Dialer License
# http://www.newfies-dialer.org
#
# This Source Code Form is subject to the terms of the Mozilla Public
# License, v. 2.0. If a copy of the MPL was not distributed with this file,
# You can obtain one at http://mozilla.org/MPL/2.0/.
#
# Copyright (C) 2011-2014 Star2Billing S.L.
#
# The Initial Developer of the Original Code is
# Arezqui Belaid <info@star2billing.com>
#

from django.contrib.auth.decorators import login_required, permission_required
from django.http import HttpResponse
from django.shortcuts import render_to_response
from django.template.context import RequestContext
from django.db.models import Sum, Avg, Count
from django.conf import settings
from dialer_cdr.models import VoIPCall
from dialer_cdr.constants import CDR_REPORT_COLUMN_NAME
from dialer_cdr.forms import VoipSearchForm
from django_lets_go.common_functions import ceil_strdate, unset_session_var, getvar, get_pagination_vars
from mod_utils.helper import Export_choice
#from dialer_cdr.constants import Export_choice
from datetime import datetime
from django.utils.timezone import utc
import tablib


def get_voipcall_daily_data(voipcall_list):
    """Get voipcall daily data"""
    select_data = {"starting_date": "SUBSTR(CAST(starting_date as CHAR(30)),1,10)"}

    # Get Total Rrecords from VoIPCall Report table for Daily Call Report
    total_data = voipcall_list.extra(select=select_data).values('starting_date')\
        .annotate(Count('starting_date'))\
        .annotate(Sum('duration'))\
        .annotate(Avg('duration'))\
        .order_by('-starting_date')

    # Following code will count total voip calls, duration
    if total_data:
        max_duration = max([x['duration__sum'] for x in total_data])
        total_duration = sum([x['duration__sum'] for x in total_data])
        total_calls = sum([x['starting_date__count'] for x in total_data])
        total_avg_duration = (sum([x['duration__avg'] for x in total_data])) / total_calls
    else:
        max_duration = 0
        total_duration = 0
        total_calls = 0
        total_avg_duration = 0

    data = {
        'total_data': total_data,
        'total_duration': total_duration,
        'total_calls': total_calls,
        'total_avg_duration': total_avg_duration,
        'max_duration': max_duration,
    }
    return data


@permission_required('dialer_cdr.view_call_detail_report', login_url='/')
@login_required
def voipcall_report(request):
    """VoIP Call Report

    **Attributes**:

        * ``form`` - VoipSearchForm
        * ``template`` - dialer_cdr/voipcall_report.html

    **Logic Description**:

        * Get VoIP call list according to search parameters for loggedin user

    **Important variable**:

        * ``request.session['voipcall_record_kwargs']`` - stores voipcall kwargs
    """
    sort_col_field_list = ['starting_date', 'leg_type', 'disposition', 'used_gateway', 'callerid',
                           'callid', 'phone_number', 'duration', 'billsec', 'amd_status']
    pag_vars = get_pagination_vars(request, sort_col_field_list, default_sort_field='starting_date')
    action = 'tabs-1'
    form = VoipSearchForm(request.user, request.POST or None)
    if form.is_valid():
        # Valid form
        field_list = ['start_date', 'end_date', 'disposition', 'campaign_id', 'leg_type']
        unset_session_var(request, field_list)

        from_date = getvar(request, 'from_date')
        to_date = getvar(request, 'to_date')
        start_date = ceil_strdate(str(from_date), 'start')
        end_date = ceil_strdate(str(to_date), 'end')

        converted_start_date = start_date.strftime('%Y-%m-%d')
        converted_end_date = end_date.strftime('%Y-%m-%d')
        request.session['session_start_date'] = converted_start_date
        request.session['session_end_date'] = converted_end_date

        disposition = getvar(request, 'disposition', setsession=True)
        campaign_id = getvar(request, 'campaign_id', setsession=True)
        leg_type = getvar(request, 'leg_type', setsession=True)
        form = VoipSearchForm(request.user, initial={'from_date': start_date.strftime('%Y-%m-%d'),
                                                     'to_date': end_date.strftime('%Y-%m-%d'),
                                                     'disposition': disposition,
                                                     'campaign_id': campaign_id,
                                                     'leg_type': leg_type})

    elif request.GET.get('page') or request.GET.get('sort_by'):
        # Pagination / Sort
        start_date = request.session.get('session_start_date')
        end_date = request.session.get('session_end_date')
        start_date = ceil_strdate(str(start_date), 'start')
        end_date = ceil_strdate(str(end_date), 'end')

        disposition = request.session.get('session_disposition')
        campaign_id = request.session.get('session_campaign_id')
        leg_type = request.session.get('session_leg_type')
        form = VoipSearchForm(request.user, initial={'from_date': start_date.strftime('%Y-%m-%d'),
                                                     'to_date': end_date.strftime('%Y-%m-%d'),
                                                     'disposition': disposition,
                                                     'campaign_id': campaign_id,
                                                     'leg_type': leg_type})
    else:
        # Default
        tday = datetime.utcnow().replace(tzinfo=utc)
        from_date = tday.strftime('%Y-%m-%d')
        to_date = tday.strftime('%Y-%m-%d')
        start_date = datetime(tday.year, tday.month, tday.day, 0, 0, 0, 0).replace(tzinfo=utc)
        end_date = datetime(tday.year, tday.month, tday.day, 23, 59, 59, 999999).replace(tzinfo=utc)
        disposition = 'all'
        campaign_id = 0
        leg_type = ''
        form = VoipSearchForm(request.user, initial={'from_date': from_date,
                                                     'to_date': to_date,
                                                     'disposition': disposition,
                                                     'campaign_id': campaign_id,
                                                     'leg_type': leg_type})
        # unset session var
        request.session['session_start_date'] = start_date
        request.session['session_end_date'] = end_date
        request.session['session_disposition'] = disposition
        request.session['session_campaign_id'] = ''
        request.session['session_leg_type'] = ''

    kwargs = {}
    if start_date and end_date:
        kwargs['starting_date__range'] = (start_date, end_date)
    if start_date and end_date == '':
        kwargs['starting_date__gte'] = start_date
    if start_date == '' and end_date:
        kwargs['starting_date__lte'] = end_date

    if disposition and disposition != 'all':
        kwargs['disposition__exact'] = disposition

    if campaign_id and int(campaign_id) != 0:
        kwargs['callrequest__campaign_id'] = campaign_id

    if leg_type and leg_type != '':
        kwargs['leg_type__exact'] = leg_type

    if not request.user.is_superuser:
        kwargs['user_id'] = request.user.id

    voipcall_list = VoIPCall.objects.filter(**kwargs)
    all_voipcall_list = voipcall_list.values_list('id', flat=True)

    # Session variable is used to get record set with searched option
    # into export file
    request.session['voipcall_record_kwargs'] = kwargs

    if request.GET.get('page') or request.GET.get('sort_by'):
        daily_data = request.session['voipcall_daily_data']
    else:
        if not voipcall_list:
            request.session['voipcall_daily_data'] = ''
        daily_data = get_voipcall_daily_data(voipcall_list)
        request.session['voipcall_daily_data'] = daily_data

    voipcall_list = voipcall_list.order_by(pag_vars['sort_order'])[pag_vars['start_page']:pag_vars['end_page']]

    data = {
        'form': form,
        'total_data': daily_data['total_data'],
        'total_duration': daily_data['total_duration'],
        'total_calls': daily_data['total_calls'],
        'total_avg_duration': daily_data['total_avg_duration'],
        'max_duration': daily_data['max_duration'],
        'all_voipcall_list': all_voipcall_list,
        'voipcall_list': voipcall_list,
        'CDR_REPORT_COLUMN_NAME': CDR_REPORT_COLUMN_NAME,
        'col_name_with_order': pag_vars['col_name_with_order'],
        'start_date': start_date,
        'end_date': end_date,
        'action': action,
    }
    request.session['msg'] = ''
    request.session['error_msg'] = ''
    return render_to_response('dialer_cdr/voipcall_report.html', data, context_instance=RequestContext(request))


@login_required
def export_voipcall_report(request):
    """Export CSV file of VoIP call record

    **Important variable**:

        * ``request.session['voipcall_record_kwargs']`` - stores voipcall kwargs

    **Exported fields**: [user, callid, callerid, phone_number, starting_date,
                          duration, disposition, used_gateway]
    """
    format_type = request.GET['format']
    # get the response object, this can be used as a stream.
    response = HttpResponse(mimetype='text/%s' % format_type)

    # force download.
    response['Content-Disposition'] = 'attachment;filename=export.%s' % format_type

    # super(VoIPCall_ReportAdmin, self).queryset(request)
    if request.session.get('voipcall_record_kwargs'):
        kwargs = request.session['voipcall_record_kwargs']
        qs = VoIPCall.objects.select_related('user__username').filter(**kwargs)

        amd_status = ''
        if settings.AMD:
            amd_status = 'amd_status'

        headers = ('user', 'callid', 'callerid', 'phone_number', 'starting_date', 'duration', 'billsec',
                   'disposition', 'hangup_cause', 'hangup_cause_q850', 'used_gateway', amd_status)

        list_val = []
        for i in qs:
            gateway_used = i.used_gateway.name if i.used_gateway else ''
            amd_status = i.amd_status if settings.AMD else ''

            starting_date = i.starting_date
            if format_type == Export_choice.JSON or format_type == Export_choice.XLS:
                starting_date = str(i.starting_date)

            list_val.append((i.user.username,
                             i.callid,
                             i.callerid,
                             i.phone_number,
                             starting_date,
                             i.duration,
                             i.billsec,
                             i.disposition,
                             i.hangup_cause,
                             i.hangup_cause_q850,
                             gateway_used,
                             amd_status))

        data = tablib.Dataset(*list_val, headers=headers)

        if format_type == Export_choice.XLS:
            response.write(data.xls)
        elif format_type == Export_choice.CSV:
            response.write(data.csv)
        elif format_type == Export_choice.JSON:
            response.write(data.json)

    return response

########NEW FILE########
__FILENAME__ = admin
#
# Newfies-Dialer License
# http://www.newfies-dialer.org
#
# This Source Code Form is subject to the terms of the Mozilla Public
# License, v. 2.0. If a copy of the MPL was not distributed with this file,
# You can obtain one at http://mozilla.org/MPL/2.0/.
#
# Copyright (C) 2011-2014 Star2Billing S.L.
#
# The Initial Developer of the Original Code is
# Arezqui Belaid <info@star2billing.com>
#

from django.contrib import admin
from django.contrib import messages
from django.conf.urls import patterns
from django.utils.translation import ugettext as _
from django.core.urlresolvers import reverse
from django.template import RequestContext
from django.http import HttpResponseRedirect
from django.shortcuts import render_to_response

from dialer_contact.models import Phonebook, Contact
from dialer_contact.forms import Contact_fileImport
from dialer_campaign.function_def import check_dialer_setting, dialer_setting_limit
from user_profile.constants import NOTIFICATION_NAME
from frontend_notification.views import frontend_send_notification
from django_lets_go.common_functions import striplist
from django_lets_go.app_label_renamer import AppLabelRenamer
import csv
import json
AppLabelRenamer(native_app_label=u'dialer_contact', app_label=_('Dialer Contact')).main()


class PhonebookAdmin(admin.ModelAdmin):
    """Allows the administrator to view and modify certain attributes
    of a Phonebook."""
    list_display = ('id', 'name', 'description', 'user', 'created_date',
                    'phonebook_contacts')
    list_filter = ['user', 'created_date']
    ordering = ('id', )
admin.site.register(Phonebook, PhonebookAdmin)


class ContactAdmin(admin.ModelAdmin):
    """Allows the administrator to view and modify certain attributes
    of a Contact."""
    list_display = ('id', 'phonebook', 'contact', 'contact_name', 'email',
                    'country', 'city', 'status', 'created_date')
    list_filter = ['phonebook', 'created_date']
    ordering = ('id', )

    def get_urls(self):
        urls = super(ContactAdmin, self).get_urls()
        my_urls = patterns('',
            (r'^add/$', self.admin_site.admin_view(self.add_view)),
            (r'^import_contact/$', self.admin_site.admin_view(self.import_contact)),
        )
        return my_urls + urls

    def add_view(self, request, extra_context=None):
        """Override django admin add_view method for checking the dialer
        setting limit

        **Logic Description**:

            * Before adding a contact, check the dialer setting limit if
              applicable to the user. If matched, the user will be
              redirected to the contact list
        """
        # Check dialer setting limit
        if request.user and request.method == 'POST':
            # check Max Number of subscribers per campaign
            if check_dialer_setting(request, check_for="contact"):
                msg = _("you have too many contacts. you are allowed a maximum of %(limit)s")\
                    % {'limit': dialer_setting_limit(request, limit_for="contact")}
                messages.error(request, msg)

                # campaign limit reached
                frontend_send_notification(request, NOTIFICATION_NAME.campaign_limit_reached)
                return HttpResponseRedirect(reverse("admin:dialer_campaign_contact_changelist"))

        ctx = {}
        return super(ContactAdmin, self).add_view(request, extra_context=ctx)

    def import_contact(self, request):
        """Add custom method in django admin view to import CSV file of
        Contacts

        **Attributes**:

            * ``form`` - Contact_fileImport
            * ``template`` - admin/dialer_campaign/contact/import_contact.html

        **Logic Description**:

            * Before adding contact, check the dialer setting limit if
              applicable to the user.
            * Add a new contact which will belong to the logged in user
              via csv file & get the result (Upload success & failure
              statistics)

        **Important variable**:

            * total_rows - Total no. of records in the CSV file
            * retail_record_count - No. of records which are imported from
              The CSV file
        """
        # Check dialer setting limit
        if request.user and request.method == 'POST':
            # check Max Number of subscribers per campaign
            if check_dialer_setting(request, check_for="contact"):
                msg = _("you have too many contacts. you are allowed a maximum of %(limit)s")\
                    % {'limit': dialer_setting_limit(request, limit_for="contact")}
                messages.error(request, msg)

                # campaign limit reached
                frontend_send_notification(request, NOTIFICATION_NAME.campaign_limit_reached)
                return HttpResponseRedirect(reverse("admin:dialer_campaign_contact_changelist"))

        opts = Contact._meta
        rdr = ''  # will contain CSV data
        msg = ''
        error_msg = ''
        success_import_list = []
        type_error_import_list = []
        contact_cnt = 0
        bulk_record = []
        form = Contact_fileImport(request.user, request.POST or None, request.FILES or None)
        if form.is_valid():
            # col_no - field name
            #  0     - contact
            #  1     - last_name
            #  2     - first_name
            #  3     - email
            #  4     - description
            #  5     - status
            #  6     - address
            #  7     - city
            #  8     - state
            #  9     - country
            # 10     - unit_number
            # 11     - additional_vars
            # To count total rows of CSV file
            records = csv.reader(request.FILES['csv_file'], delimiter='|', quotechar='"')
            total_rows = len(list(records))
            BULK_SIZE = 1000
            rdr = csv.reader(request.FILES['csv_file'], delimiter='|', quotechar='"')

            #Get Phonebook Obj
            phonebook = Phonebook.objects.get(pk=request.POST['phonebook'])

            contact_cnt = 0
            # Read each Row
            for row in rdr:
                row = striplist(row)
                if not row or str(row[0]) == 0:
                    continue

                # check field type
                if not int(row[5]):
                    error_msg = _("invalid value for import! please check the import samples or phonebook is not valid")
                    type_error_import_list.append(row)
                    break

                if len(row[9]) > 2:
                    error_msg = _("invalid value for country code, it needs to be a valid ISO 3166-1 alpha-2 codes (http://en.wikipedia.org/wiki/ISO_3166-1)")
                    type_error_import_list.append(row)
                    break

                row_11 = ''
                if row[11]:
                    row_11 = json.loads(row[11])

                bulk_record.append(
                    Contact(
                        phonebook=phonebook,
                        contact=row[0],
                        last_name=row[1],
                        first_name=row[2],
                        email=row[3],
                        description=row[4],
                        status=int(row[5]),
                        address=row[6],
                        city=row[7],
                        state=row[8],
                        country=row[9],
                        unit_number=row[10],
                        additional_vars=row_11)
                )

                contact_cnt = contact_cnt + 1
                if contact_cnt < 100:
                    success_import_list.append(row)

                if contact_cnt % BULK_SIZE == 0:
                    # Bulk insert
                    Contact.objects.bulk_create(bulk_record)
                    bulk_record = []

            # remaining record
            Contact.objects.bulk_create(bulk_record)
            bulk_record = []

            #check if there is contact imported
            if contact_cnt > 0:
                msg = _('%(contact_cnt)s contact(s) have been uploaded successfully out of %(total_rows)s row(s)!')\
                    % {'contact_cnt': contact_cnt, 'total_rows': total_rows}

        ctx = RequestContext(request, {
            'form': form,
            'opts': opts,
            'model_name': opts.object_name.lower(),
            'app_label': _('dialer contact'),
            'title': _('import contact'),
            'rdr': rdr,
            'msg': msg,
            'error_msg': error_msg,
            'success_import_list': success_import_list,
            'type_error_import_list': type_error_import_list,
        })
        return render_to_response('admin/dialer_contact/contact/import_contact.html', context_instance=ctx)
admin.site.register(Contact, ContactAdmin)

########NEW FILE########
__FILENAME__ = constants
#
# Newfies-Dialer License
# http://www.newfies-dialer.org
#
# This Source Code Form is subject to the terms of the Mozilla Public
# License, v. 2.0. If a copy of the MPL was not distributed with this file,
# You can obtain one at http://mozilla.org/MPL/2.0/.
#
# Copyright (C) 2011-2014 Star2Billing S.L.
#
# The Initial Developer of the Original Code is
# Arezqui Belaid <info@star2billing.com>
#

from django.utils.translation import ugettext_lazy as _
from django_lets_go.utils import Choice


class CONTACT_STATUS(Choice):
    ACTIVE = 1, _('active').upper()
    INACTIVE = 0, _('inactive').upper()


class CHOICE_TYPE(Choice):
    CONTAINS = 1, _('contains').capitalize()
    EQUALS = 2, _('equals').capitalize()
    BEGINS_WITH = 3, _('begins with').capitalize()
    ENDS_WITH = 4, _('ends with').capitalize()


class STATUS_CHOICE(Choice):
    INACTIVE = 0, _('inactive').upper()
    ACTIVE = 1, _('active').upper()
    ALL = 2, _('all').upper()


class PHONEBOOK_COLUMN_NAME(Choice):
    id = _('ID')
    name = _('name')
    description = _('description')
    date = _('date')
    contacts = _('contacts')


class CONTACT_COLUMN_NAME(Choice):
    id = _('ID')
    phonebook = _('phonebook')
    contact = _('contact')
    last_name = _('last name')
    first_name = _('first name')
    email = _('email')
    status = _('status')
    date = _('date')

########NEW FILE########
__FILENAME__ = forms
#
# Newfies-Dialer License
# http://www.newfies-dialer.org
#
# This Source Code Form is subject to the terms of the Mozilla Public
# License, v. 2.0. If a copy of the MPL was not distributed with this file,
# You can obtain one at http://mozilla.org/MPL/2.0/.
#
# Copyright (C) 2011-2014 Star2Billing S.L.
#
# The Initial Developer of the Original Code is
# Arezqui Belaid <info@star2billing.com>
#

from django import forms
from django.forms import ModelForm, Textarea
from django.forms.widgets import NumberInput
from django.utils.translation import ugettext_lazy as _
from dialer_contact.models import Phonebook, Contact
from dialer_contact.constants import STATUS_CHOICE
from dialer_campaign.function_def import get_phonebook_list
#from dialer_contact.constants import CHOICE_TYPE
from bootstrap3_datetime.widgets import DateTimePicker
from mod_utils.forms import SaveUserModelForm, common_submit_buttons
from crispy_forms.helper import FormHelper
from crispy_forms.bootstrap import TabHolder, Tab
from crispy_forms.layout import Layout, Fieldset, Div


class AdminSearchForm(forms.Form):
    """General Search Form with From & To date para."""
    from_date = forms.CharField(label=_('from'), required=False, max_length=10)
    to_date = forms.CharField(label=_('to'), required=False, max_length=10)


class SearchForm(AdminSearchForm):
    """General Search Form with From & To date para."""
    from_date = forms.CharField(label=_('from').capitalize(), required=False, max_length=10,
        widget=DateTimePicker(options={"format": "YYYY-MM-DD", "pickTime": False}))
    to_date = forms.CharField(label=_('to').capitalize(), required=False, max_length=10,
        widget=DateTimePicker(options={"format": "YYYY-MM-DD", "pickTime": False}))


class FileImport(forms.Form):
    """General Form : CSV file upload"""
    csv_file = forms.FileField(
        label=_('Upload CSV file using the pipe "|" as the field delimiter, e.g. ' +
                '1234567890|surname|forename|email@somewhere.com|test-contact|1|' +
                'address|city|state|US|unit|{"age":"32","title":"doctor"}|'),
        required=True,
        error_messages={'required': 'please upload a CSV File'})

    def clean_csv_file(self):
        """Form Validation :  File extension Check"""
        filename = self.cleaned_data["csv_file"]
        file_exts = ["csv", "txt"]
        if str(filename).split(".")[1].lower() in file_exts:
            return filename
        else:
            raise forms.ValidationError(_(u'document types accepted: %s' % ' '.join(file_exts)))


class Contact_fileImport(FileImport):
    """Admin Form : Import CSV file with phonebook"""
    phonebook = forms.ChoiceField(label=_("phonebook").capitalize(), required=False, help_text=_("select phonebook"))

    def __init__(self, user, *args, **kwargs):
        super(Contact_fileImport, self).__init__(*args, **kwargs)
        self.helper = FormHelper()
        self.helper.form_class = 'well'
        self.helper.layout = Layout(
            Div(
                Div(Fieldset('', 'phonebook', 'csv_file')),
            ),
        )
        common_submit_buttons(self.helper.layout, 'import')

        # To get user's phonebook list
        if user:  # and not user.is_superuser
            self.fields['phonebook'].choices = get_phonebook_list(user)


class PhonebookForm(SaveUserModelForm):
    """Phonebook ModelForm"""
    class Meta:
        model = Phonebook
        fields = ['name', 'description']
        exclude = ('user',)
        widgets = {
            'description': Textarea(attrs={'cols': 26, 'rows': 3}),
        }

    def __init__(self, *args, **kwargs):
        super(PhonebookForm, self).__init__(*args, **kwargs)
        self.helper = FormHelper()
        self.helper.form_class = 'well'
        self.helper.layout = Layout(
            Div(
                Div(Fieldset('', 'name', 'description', css_class='col-md-6')),
            ),
        )
        if self.instance.id:
            common_submit_buttons(self.helper.layout, 'update')
        else:
            common_submit_buttons(self.helper.layout)


def phonebook_list(user):
    """Return phonebook list of logged in user"""
    result_list = []
    result_list.append((0, '---'))
    for phonebook in Phonebook.objects.filter(user=user).order_by('id'):
        result_list.append((phonebook.id, phonebook.name))
    return result_list


class ContactForm(ModelForm):
    """Contact ModelForm"""

    class Meta:
        model = Contact
        widgets = {
            'description': Textarea(attrs={'cols': 23, 'rows': 3}),
        }

    def __init__(self, user, *args, **kwargs):
        super(ContactForm, self).__init__(*args, **kwargs)
        self.helper = FormHelper()

        if self.instance.id:
            form_action = common_submit_buttons(default_action='update')
        else:
            form_action = common_submit_buttons(default_action='add')
        css_class = 'col-md-6'
        self.helper.layout = Layout(
            TabHolder(
                Tab(_('general').capitalize(),
                    Div(
                        Div('phonebook', css_class=css_class),
                        Div('contact', css_class=css_class),
                        Div('last_name', css_class=css_class),
                        Div('first_name', css_class=css_class),
                        Div('status', css_class=css_class),
                        Div('email', css_class=css_class),
                        css_class='row'
                    ),
                    form_action,
                    css_class='well'
                    ),
                Tab(_('advanced data').capitalize(),
                    Div(
                        Div('unit_number', css_class=css_class),
                        Div('address', css_class=css_class),
                        Div('city', css_class=css_class),
                        Div('state', css_class=css_class),
                        Div('country', css_class=css_class),
                        Div('description', css_class=css_class),
                        Div('additional_vars', css_class=css_class),
                        css_class='row'
                    ),
                    form_action,
                    css_class='well'
                    ),
            ),
        )

        # To get user's phonebook list
        if user:
            self.fields['phonebook'].choices = phonebook_list(user)


class ContactSearchForm(forms.Form):
    """Search Form on Contact List"""
    contact_no = forms.CharField(label=_('contact number').capitalize(), required=False, widget=NumberInput())
    contact_name = forms.CharField(label=_('contact name').capitalize(), required=False, widget=forms.TextInput(attrs={'size': 15}))
    phonebook = forms.ChoiceField(label=_('phonebook').capitalize(), required=False)
    contact_status = forms.TypedChoiceField(label=_('status').capitalize(), required=False, choices=list(STATUS_CHOICE),
                                            initial=STATUS_CHOICE.ALL)

    def __init__(self, user, *args, **kwargs):
        super(ContactSearchForm, self).__init__(*args, **kwargs)
        self.helper = FormHelper()
        self.helper.form_class = 'well'
        css_class = 'col-md-3'
        self.helper.layout = Layout(
            Div(
                Div('contact_no', css_class=css_class),
                Div('contact_name', css_class=css_class),
                Div('phonebook', css_class=css_class),
                Div('contact_status', css_class=css_class),
                css_class='row'
            ),
        )
        common_submit_buttons(self.helper.layout, 'search')

        if user:
            self.fields['phonebook'].choices = phonebook_list(user)

########NEW FILE########
__FILENAME__ = create_contact
#
# Newfies-Dialer License
# http://www.newfies-dialer.org
#
# This Source Code Form is subject to the terms of the Mozilla Public
# License, v. 2.0. If a copy of the MPL was not distributed with this file,
# You can obtain one at http://mozilla.org/MPL/2.0/.
#
# Copyright (C) 2011-2014 Star2Billing S.L.
#
# The Initial Developer of the Original Code is
# Arezqui Belaid <info@star2billing.com>
#

from django.core.management.base import BaseCommand
from dialer_contact.models import Phonebook, Contact
from optparse import make_option
from django.db import IntegrityError
from random import choice


class Command(BaseCommand):
    args = "phonebook_id, amount"
    help = "Create a new contacts for a given phonebook\n"\
           "-------------------------------------------\n"\
           "python manage.py create_contact --phonebook_id=1 --amount=100 --prefix=@myip"

    option_list = BaseCommand.option_list + (
        make_option('--amount',
                    default=None,
                    dest='amount',
                    help='Amount to create, by default 1 contact will be created'),
        make_option('--phonebook_id',
                    default=None,
                    dest='phonebook_id',
                    help='Phonebook ID for the new contact'),
        make_option('--prefix',
                    default=None,
                    dest='prefix',
                    help='Prefix to be added after the phonenumber, ie. @myip'),
    )

    def handle(self, *args, **options):
        """
        Note that contacts created this way are only for devel purposes
        """
        amount = 1  # default
        if options.get('amount'):
            try:
                amount = int(options.get('amount'))
            except ValueError:
                amount = 1

        phonebook_id = 1
        if options.get('phonebook_id'):
            try:
                phonebook_id = options.get('phonebook_id')
                phonebook_id = int(phonebook_id)
            except ValueError:
                phonebook_id = 1

        prefix = ''
        if options.get('prefix'):
            prefix = options.get('prefix')

        try:
            obj_phonebook = Phonebook.objects.get(id=phonebook_id)
        except:
            print 'Can\'t find this Phonebook : %(id)s' % {'id': phonebook_id}
            return False

        length = 15
        chars = "1234567890"
        for k in range(1, int(amount) + 1):
            if k % 1000 == 0:
                print "%d contacts created..." % k
            phone_no = ''.join([choice(chars) for i in range(length)])

            #TODO: Use generate_series to speed up the contact creation
            #INSERT INTO numbers (num) VALUES ( generate_series(1,1000));

            try:
                Contact.objects.create(
                    contact=phone_no + prefix,
                    phonebook=obj_phonebook)
            except IntegrityError:
                print "Error : Duplicate contact - %s" % phone_no

        print "\nTotal contacts created : %(count)s" % {'count': amount}

########NEW FILE########
__FILENAME__ = create_phonebook_stresstest
#
# Newfies-Dialer License
# http://www.newfies-dialer.org
#
# This Source Code Form is subject to the terms of the Mozilla Public
# License, v. 2.0. If a copy of the MPL was not distributed with this file,
# You can obtain one at http://mozilla.org/MPL/2.0/.
#
# Copyright (C) 2011-2014 Star2Billing S.L.
#
# The Initial Developer of the Original Code is
# Arezqui Belaid <info@star2billing.com>
#

from django.core.management.base import BaseCommand
from dialer_contact.models import Phonebook, Contact
from optparse import make_option
from django.db import IntegrityError
from random import choice
from math import pow


PHONENUMBER_LENGHT = 15


class Command(BaseCommand):
    args = ""
    help = "Create a test phonebook with contacts\n"\
           "-------------------------------------------\n"\
           "python manage.py create_phonebook_stresstest --prefix=@myip"

    option_list = BaseCommand.option_list + (
        make_option('--user_id', default=None, dest='user_id',
                    help='User ID under which create phonebooks/contacts'),
        make_option('--prefix', default=None, dest='prefix',
                    help='Prefix to be added after the phonenumber, ie. @myip'),
    )

    def handle(self, *args, **options):
        """
        We will parse and set default values to parameters
        """
        user_id = 1
        try:
            user_id = int(options.get('user_id'))
        except ValueError:
            user_id = 1

        if options.get('prefix'):
            prefix = options.get('prefix')
        else:
            print 'Need a prefix'
            return False

        for l in range(0, 6):
            amount = int(pow(10, l))  # pow 5 will be 100.000
            try:
                pn_name = 'Phonebook-%d' % amount
                obj_phonebook = Phonebook.objects.create(name=pn_name, user_id=user_id)
            except:
                print "Can't create Phonebook"
                return False

            for k in range(1, int(amount) + 1):
                if k % 1000 == 0:
                    print "%d contacts created..." % k
                phonenumber = '' . join([choice("1234567890") for i in range(PHONENUMBER_LENGHT)])

                #TODO: Use generate_series to speed up the contact creation
                #INSERT INTO numbers (num) VALUES ( generate_series(1,1000));

                try:
                    Contact.objects.create(
                        contact=phonenumber + prefix,
                        phonebook=obj_phonebook)
                except IntegrityError:
                    print "Error : Duplicate contact - %s" % phonenumber

            print "\nTotal contacts created : %(count)s" % {'count': amount}

########NEW FILE########
__FILENAME__ = 0001_initial_dialer_contact
# -*- coding: utf-8 -*-
import datetime
from south.db import db
from south.v2 import SchemaMigration
from django.db import models


class Migration(SchemaMigration):

    def forwards(self, orm):
        # Adding model 'Phonebook'
        db.create_table(u'dialer_phonebook', (
            (u'id', self.gf('django.db.models.fields.AutoField')(primary_key=True)),
            ('name', self.gf('django.db.models.fields.CharField')(max_length=90)),
            ('description', self.gf('django.db.models.fields.TextField')(null=True, blank=True)),
            ('user', self.gf('django.db.models.fields.related.ForeignKey')(related_name='Phonebook owner', to=orm['auth.User'])),
            ('created_date', self.gf('django.db.models.fields.DateTimeField')(auto_now_add=True, blank=True)),
            ('updated_date', self.gf('django.db.models.fields.DateTimeField')(auto_now=True, blank=True)),
        ))
        db.send_create_signal(u'dialer_contact', ['Phonebook'])

        # Adding model 'Contact'
        db.create_table(u'dialer_contact', (
            (u'id', self.gf('django.db.models.fields.AutoField')(primary_key=True)),
            ('phonebook', self.gf('django.db.models.fields.related.ForeignKey')(to=orm['dialer_contact.Phonebook'])),
            ('contact', self.gf('django.db.models.fields.CharField')(max_length=90)),
            ('status', self.gf('django.db.models.fields.IntegerField')(default=1, null=True, blank=True)),
            ('last_name', self.gf('django.db.models.fields.CharField')(max_length=120, null=True, blank=True)),
            ('first_name', self.gf('django.db.models.fields.CharField')(max_length=120, null=True, blank=True)),
            ('email', self.gf('django.db.models.fields.EmailField')(max_length=75, null=True, blank=True)),
            ('city', self.gf('django.db.models.fields.CharField')(max_length=120, null=True, blank=True)),
            ('country', self.gf('django_countries.fields.CountryField')(max_length=2, null=True, blank=True)),
            ('additional_vars', self.gf('jsonfield.fields.JSONField')(null=True, blank=True)),
            ('description', self.gf('django.db.models.fields.TextField')(null=True, blank=True)),
            ('created_date', self.gf('django.db.models.fields.DateTimeField')(auto_now_add=True, blank=True)),
            ('updated_date', self.gf('django.db.models.fields.DateTimeField')(auto_now=True, blank=True)),
        ))
        db.send_create_signal(u'dialer_contact', ['Contact'])


    def backwards(self, orm):
        # Deleting model 'Phonebook'
        db.delete_table(u'dialer_phonebook')

        # Deleting model 'Contact'
        db.delete_table(u'dialer_contact')


    models = {
        u'auth.group': {
            'Meta': {'object_name': 'Group'},
            u'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '80'}),
            'permissions': ('django.db.models.fields.related.ManyToManyField', [], {'to': u"orm['auth.Permission']", 'symmetrical': 'False', 'blank': 'True'})
        },
        u'auth.permission': {
            'Meta': {'ordering': "(u'content_type__app_label', u'content_type__model', u'codename')", 'unique_together': "((u'content_type', u'codename'),)", 'object_name': 'Permission'},
            'codename': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'content_type': ('django.db.models.fields.related.ForeignKey', [], {'to': u"orm['contenttypes.ContentType']"}),
            u'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '50'})
        },
        u'auth.user': {
            'Meta': {'object_name': 'User'},
            'date_joined': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
            'email': ('django.db.models.fields.EmailField', [], {'max_length': '75', 'blank': 'True'}),
            'first_name': ('django.db.models.fields.CharField', [], {'max_length': '30', 'blank': 'True'}),
            'groups': ('django.db.models.fields.related.ManyToManyField', [], {'to': u"orm['auth.Group']", 'symmetrical': 'False', 'blank': 'True'}),
            u'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'is_active': ('django.db.models.fields.BooleanField', [], {'default': 'True'}),
            'is_staff': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'is_superuser': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'last_login': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
            'last_name': ('django.db.models.fields.CharField', [], {'max_length': '30', 'blank': 'True'}),
            'password': ('django.db.models.fields.CharField', [], {'max_length': '128'}),
            'user_permissions': ('django.db.models.fields.related.ManyToManyField', [], {'to': u"orm['auth.Permission']", 'symmetrical': 'False', 'blank': 'True'}),
            'username': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '30'})
        },
        u'contenttypes.contenttype': {
            'Meta': {'ordering': "('name',)", 'unique_together': "(('app_label', 'model'),)", 'object_name': 'ContentType', 'db_table': "'django_content_type'"},
            'app_label': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            u'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'model': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '100'})
        },
        u'dialer_contact.contact': {
            'Meta': {'object_name': 'Contact', 'db_table': "u'dialer_contact'"},
            'additional_vars': ('jsonfield.fields.JSONField', [], {'null': 'True', 'blank': 'True'}),
            'city': ('django.db.models.fields.CharField', [], {'max_length': '120', 'null': 'True', 'blank': 'True'}),
            'contact': ('django.db.models.fields.CharField', [], {'max_length': '90'}),
            'country': ('django_countries.fields.CountryField', [], {'max_length': '2', 'null': 'True', 'blank': 'True'}),
            'created_date': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'description': ('django.db.models.fields.TextField', [], {'null': 'True', 'blank': 'True'}),
            'email': ('django.db.models.fields.EmailField', [], {'max_length': '75', 'null': 'True', 'blank': 'True'}),
            'first_name': ('django.db.models.fields.CharField', [], {'max_length': '120', 'null': 'True', 'blank': 'True'}),
            u'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'last_name': ('django.db.models.fields.CharField', [], {'max_length': '120', 'null': 'True', 'blank': 'True'}),
            'phonebook': ('django.db.models.fields.related.ForeignKey', [], {'to': u"orm['dialer_contact.Phonebook']"}),
            'status': ('django.db.models.fields.IntegerField', [], {'default': '1', 'null': 'True', 'blank': 'True'}),
            'updated_date': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'blank': 'True'})
        },
        u'dialer_contact.phonebook': {
            'Meta': {'object_name': 'Phonebook', 'db_table': "u'dialer_phonebook'"},
            'created_date': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'description': ('django.db.models.fields.TextField', [], {'null': 'True', 'blank': 'True'}),
            u'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '90'}),
            'updated_date': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'blank': 'True'}),
            'user': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'Phonebook owner'", 'to': u"orm['auth.User']"})
        }
    }

    complete_apps = ['dialer_contact']
########NEW FILE########
__FILENAME__ = 0002_add_new_columns_address_states_unit
# -*- coding: utf-8 -*-
import datetime
from south.db import db
from south.v2 import SchemaMigration
from django.db import models


class Migration(SchemaMigration):

    def forwards(self, orm):
        # Adding field 'Contact.address'
        db.add_column(u'dialer_contact', 'address',
                      self.gf('django.db.models.fields.TextField')(null=True, blank=True),
                      keep_default=False)

        # Adding field 'Contact.state'
        db.add_column(u'dialer_contact', 'state',
                      self.gf('django.db.models.fields.CharField')(max_length=120, null=True, blank=True),
                      keep_default=False)

        # Adding field 'Contact.unit_number'
        db.add_column(u'dialer_contact', 'unit_number',
                      self.gf('django.db.models.fields.IntegerField')(null=True, blank=True),
                      keep_default=False)


    def backwards(self, orm):
        # Deleting field 'Contact.address'
        db.delete_column(u'dialer_contact', 'address')

        # Deleting field 'Contact.state'
        db.delete_column(u'dialer_contact', 'state')

        # Deleting field 'Contact.unit_number'
        db.delete_column(u'dialer_contact', 'unit_number')


    models = {
        u'auth.group': {
            'Meta': {'object_name': 'Group'},
            u'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '80'}),
            'permissions': ('django.db.models.fields.related.ManyToManyField', [], {'to': u"orm['auth.Permission']", 'symmetrical': 'False', 'blank': 'True'})
        },
        u'auth.permission': {
            'Meta': {'ordering': "(u'content_type__app_label', u'content_type__model', u'codename')", 'unique_together': "((u'content_type', u'codename'),)", 'object_name': 'Permission'},
            'codename': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'content_type': ('django.db.models.fields.related.ForeignKey', [], {'to': u"orm['contenttypes.ContentType']"}),
            u'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '50'})
        },
        u'auth.user': {
            'Meta': {'object_name': 'User'},
            'date_joined': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
            'email': ('django.db.models.fields.EmailField', [], {'max_length': '75', 'blank': 'True'}),
            'first_name': ('django.db.models.fields.CharField', [], {'max_length': '30', 'blank': 'True'}),
            'groups': ('django.db.models.fields.related.ManyToManyField', [], {'to': u"orm['auth.Group']", 'symmetrical': 'False', 'blank': 'True'}),
            u'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'is_active': ('django.db.models.fields.BooleanField', [], {'default': 'True'}),
            'is_staff': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'is_superuser': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'last_login': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
            'last_name': ('django.db.models.fields.CharField', [], {'max_length': '30', 'blank': 'True'}),
            'password': ('django.db.models.fields.CharField', [], {'max_length': '128'}),
            'user_permissions': ('django.db.models.fields.related.ManyToManyField', [], {'to': u"orm['auth.Permission']", 'symmetrical': 'False', 'blank': 'True'}),
            'username': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '30'})
        },
        u'contenttypes.contenttype': {
            'Meta': {'ordering': "('name',)", 'unique_together': "(('app_label', 'model'),)", 'object_name': 'ContentType', 'db_table': "'django_content_type'"},
            'app_label': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            u'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'model': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '100'})
        },
        u'dialer_contact.contact': {
            'Meta': {'object_name': 'Contact', 'db_table': "u'dialer_contact'"},
            'additional_vars': ('jsonfield.fields.JSONField', [], {'null': 'True', 'blank': 'True'}),
            'address': ('django.db.models.fields.TextField', [], {'null': 'True', 'blank': 'True'}),
            'city': ('django.db.models.fields.CharField', [], {'max_length': '120', 'null': 'True', 'blank': 'True'}),
            'contact': ('django.db.models.fields.CharField', [], {'max_length': '90'}),
            'country': ('django_countries.fields.CountryField', [], {'max_length': '2', 'null': 'True', 'blank': 'True'}),
            'created_date': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'description': ('django.db.models.fields.TextField', [], {'null': 'True', 'blank': 'True'}),
            'email': ('django.db.models.fields.EmailField', [], {'max_length': '75', 'null': 'True', 'blank': 'True'}),
            'first_name': ('django.db.models.fields.CharField', [], {'max_length': '120', 'null': 'True', 'blank': 'True'}),
            u'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'last_name': ('django.db.models.fields.CharField', [], {'max_length': '120', 'null': 'True', 'blank': 'True'}),
            'phonebook': ('django.db.models.fields.related.ForeignKey', [], {'to': u"orm['dialer_contact.Phonebook']"}),
            'state': ('django.db.models.fields.CharField', [], {'max_length': '120', 'null': 'True', 'blank': 'True'}),
            'status': ('django.db.models.fields.IntegerField', [], {'default': '1', 'null': 'True', 'blank': 'True'}),
            'unit_number': ('django.db.models.fields.IntegerField', [], {'null': 'True', 'blank': 'True'}),
            'updated_date': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'blank': 'True'})
        },
        u'dialer_contact.phonebook': {
            'Meta': {'object_name': 'Phonebook', 'db_table': "u'dialer_phonebook'"},
            'created_date': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'description': ('django.db.models.fields.TextField', [], {'null': 'True', 'blank': 'True'}),
            u'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '90'}),
            'updated_date': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'blank': 'True'}),
            'user': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'Phonebook owner'", 'to': u"orm['auth.User']"})
        }
    }

    complete_apps = ['dialer_contact']
########NEW FILE########
__FILENAME__ = 0003_update_column_unit_number_to_unit
# -*- coding: utf-8 -*-
import datetime
from south.db import db
from south.v2 import SchemaMigration
from django.db import models


class Migration(SchemaMigration):

    def forwards(self, orm):

        # Changing field 'Contact.unit_number'
        db.alter_column(u'dialer_contact', 'unit_number', self.gf('django.db.models.fields.CharField')(max_length=50, null=True))

    def backwards(self, orm):

        # Changing field 'Contact.unit_number'
        db.alter_column(u'dialer_contact', 'unit_number', self.gf('django.db.models.fields.IntegerField')(null=True))

    models = {
        u'auth.group': {
            'Meta': {'object_name': 'Group'},
            u'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '80'}),
            'permissions': ('django.db.models.fields.related.ManyToManyField', [], {'to': u"orm['auth.Permission']", 'symmetrical': 'False', 'blank': 'True'})
        },
        u'auth.permission': {
            'Meta': {'ordering': "(u'content_type__app_label', u'content_type__model', u'codename')", 'unique_together': "((u'content_type', u'codename'),)", 'object_name': 'Permission'},
            'codename': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'content_type': ('django.db.models.fields.related.ForeignKey', [], {'to': u"orm['contenttypes.ContentType']"}),
            u'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '50'})
        },
        u'auth.user': {
            'Meta': {'object_name': 'User'},
            'date_joined': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
            'email': ('django.db.models.fields.EmailField', [], {'max_length': '75', 'blank': 'True'}),
            'first_name': ('django.db.models.fields.CharField', [], {'max_length': '30', 'blank': 'True'}),
            'groups': ('django.db.models.fields.related.ManyToManyField', [], {'to': u"orm['auth.Group']", 'symmetrical': 'False', 'blank': 'True'}),
            u'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'is_active': ('django.db.models.fields.BooleanField', [], {'default': 'True'}),
            'is_staff': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'is_superuser': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'last_login': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
            'last_name': ('django.db.models.fields.CharField', [], {'max_length': '30', 'blank': 'True'}),
            'password': ('django.db.models.fields.CharField', [], {'max_length': '128'}),
            'user_permissions': ('django.db.models.fields.related.ManyToManyField', [], {'to': u"orm['auth.Permission']", 'symmetrical': 'False', 'blank': 'True'}),
            'username': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '30'})
        },
        u'contenttypes.contenttype': {
            'Meta': {'ordering': "('name',)", 'unique_together': "(('app_label', 'model'),)", 'object_name': 'ContentType', 'db_table': "'django_content_type'"},
            'app_label': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            u'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'model': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '100'})
        },
        u'dialer_contact.contact': {
            'Meta': {'object_name': 'Contact', 'db_table': "u'dialer_contact'"},
            'additional_vars': ('jsonfield.fields.JSONField', [], {'null': 'True', 'blank': 'True'}),
            'address': ('django.db.models.fields.TextField', [], {'null': 'True', 'blank': 'True'}),
            'city': ('django.db.models.fields.CharField', [], {'max_length': '120', 'null': 'True', 'blank': 'True'}),
            'contact': ('django.db.models.fields.CharField', [], {'max_length': '90'}),
            'country': ('django_countries.fields.CountryField', [], {'max_length': '2', 'null': 'True', 'blank': 'True'}),
            'created_date': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'description': ('django.db.models.fields.TextField', [], {'null': 'True', 'blank': 'True'}),
            'email': ('django.db.models.fields.EmailField', [], {'max_length': '75', 'null': 'True', 'blank': 'True'}),
            'first_name': ('django.db.models.fields.CharField', [], {'max_length': '120', 'null': 'True', 'blank': 'True'}),
            u'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'last_name': ('django.db.models.fields.CharField', [], {'max_length': '120', 'null': 'True', 'blank': 'True'}),
            'phonebook': ('django.db.models.fields.related.ForeignKey', [], {'to': u"orm['dialer_contact.Phonebook']"}),
            'state': ('django.db.models.fields.CharField', [], {'max_length': '120', 'null': 'True', 'blank': 'True'}),
            'status': ('django.db.models.fields.IntegerField', [], {'default': '1', 'null': 'True', 'blank': 'True'}),
            'unit_number': ('django.db.models.fields.CharField', [], {'max_length': '50', 'null': 'True', 'blank': 'True'}),
            'updated_date': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'blank': 'True'})
        },
        u'dialer_contact.phonebook': {
            'Meta': {'object_name': 'Phonebook', 'db_table': "u'dialer_phonebook'"},
            'created_date': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'description': ('django.db.models.fields.TextField', [], {'null': 'True', 'blank': 'True'}),
            u'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '90'}),
            'updated_date': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'blank': 'True'}),
            'user': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'Phonebook owner'", 'to': u"orm['auth.User']"})
        }
    }

    complete_apps = ['dialer_contact']
########NEW FILE########
__FILENAME__ = 0004_change_type_address
# -*- coding: utf-8 -*-
import datetime
from south.db import db
from south.v2 import SchemaMigration
from django.db import models


class Migration(SchemaMigration):

    def forwards(self, orm):

        # Changing field 'Contact.address'
        db.alter_column(u'dialer_contact', 'address', self.gf('django.db.models.fields.CharField')(max_length=250, null=True))

    def backwards(self, orm):

        # Changing field 'Contact.address'
        db.alter_column(u'dialer_contact', 'address', self.gf('django.db.models.fields.TextField')(null=True))

    models = {
        u'auth.group': {
            'Meta': {'object_name': 'Group'},
            u'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '80'}),
            'permissions': ('django.db.models.fields.related.ManyToManyField', [], {'to': u"orm['auth.Permission']", 'symmetrical': 'False', 'blank': 'True'})
        },
        u'auth.permission': {
            'Meta': {'ordering': "(u'content_type__app_label', u'content_type__model', u'codename')", 'unique_together': "((u'content_type', u'codename'),)", 'object_name': 'Permission'},
            'codename': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'content_type': ('django.db.models.fields.related.ForeignKey', [], {'to': u"orm['contenttypes.ContentType']"}),
            u'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '50'})
        },
        u'auth.user': {
            'Meta': {'object_name': 'User'},
            'date_joined': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
            'email': ('django.db.models.fields.EmailField', [], {'max_length': '75', 'blank': 'True'}),
            'first_name': ('django.db.models.fields.CharField', [], {'max_length': '30', 'blank': 'True'}),
            'groups': ('django.db.models.fields.related.ManyToManyField', [], {'to': u"orm['auth.Group']", 'symmetrical': 'False', 'blank': 'True'}),
            u'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'is_active': ('django.db.models.fields.BooleanField', [], {'default': 'True'}),
            'is_staff': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'is_superuser': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'last_login': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
            'last_name': ('django.db.models.fields.CharField', [], {'max_length': '30', 'blank': 'True'}),
            'password': ('django.db.models.fields.CharField', [], {'max_length': '128'}),
            'user_permissions': ('django.db.models.fields.related.ManyToManyField', [], {'to': u"orm['auth.Permission']", 'symmetrical': 'False', 'blank': 'True'}),
            'username': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '30'})
        },
        u'contenttypes.contenttype': {
            'Meta': {'ordering': "('name',)", 'unique_together': "(('app_label', 'model'),)", 'object_name': 'ContentType', 'db_table': "'django_content_type'"},
            'app_label': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            u'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'model': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '100'})
        },
        u'dialer_contact.contact': {
            'Meta': {'object_name': 'Contact', 'db_table': "u'dialer_contact'"},
            'additional_vars': ('jsonfield.fields.JSONField', [], {'null': 'True', 'blank': 'True'}),
            'address': ('django.db.models.fields.CharField', [], {'max_length': '250', 'null': 'True', 'blank': 'True'}),
            'city': ('django.db.models.fields.CharField', [], {'max_length': '120', 'null': 'True', 'blank': 'True'}),
            'contact': ('django.db.models.fields.CharField', [], {'max_length': '90'}),
            'country': ('django_countries.fields.CountryField', [], {'max_length': '2', 'null': 'True', 'blank': 'True'}),
            'created_date': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'description': ('django.db.models.fields.TextField', [], {'null': 'True', 'blank': 'True'}),
            'email': ('django.db.models.fields.EmailField', [], {'max_length': '75', 'null': 'True', 'blank': 'True'}),
            'first_name': ('django.db.models.fields.CharField', [], {'max_length': '120', 'null': 'True', 'blank': 'True'}),
            u'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'last_name': ('django.db.models.fields.CharField', [], {'max_length': '120', 'null': 'True', 'blank': 'True'}),
            'phonebook': ('django.db.models.fields.related.ForeignKey', [], {'to': u"orm['dialer_contact.Phonebook']"}),
            'state': ('django.db.models.fields.CharField', [], {'max_length': '120', 'null': 'True', 'blank': 'True'}),
            'status': ('django.db.models.fields.IntegerField', [], {'default': '1', 'null': 'True', 'blank': 'True'}),
            'unit_number': ('django.db.models.fields.CharField', [], {'max_length': '50', 'null': 'True', 'blank': 'True'}),
            'updated_date': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'blank': 'True'})
        },
        u'dialer_contact.phonebook': {
            'Meta': {'object_name': 'Phonebook', 'db_table': "u'dialer_phonebook'"},
            'created_date': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'description': ('django.db.models.fields.TextField', [], {'null': 'True', 'blank': 'True'}),
            u'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '90'}),
            'updated_date': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'blank': 'True'}),
            'user': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'Phonebook owner'", 'to': u"orm['auth.User']"})
        }
    }

    complete_apps = ['dialer_contact']
########NEW FILE########
__FILENAME__ = models
#
# Newfies-Dialer License
# http://www.newfies-dialer.org
#
# This Source Code Form is subject to the terms of the Mozilla Public
# License, v. 2.0. If a copy of the MPL was not distributed with this file,
# You can obtain one at http://mozilla.org/MPL/2.0/.
#
# Copyright (C) 2011-2014 Star2Billing S.L.
#
# The Initial Developer of the Original Code is
# Arezqui Belaid <info@star2billing.com>
#

from django.db import models
from django.utils.translation import ugettext_lazy as _
from django_countries.fields import CountryField
from django_lets_go.intermediate_model_base_class import Model
from dialer_contact.constants import CONTACT_STATUS
import jsonfield
import re


class Phonebook(Model):
    """This defines the Phonebook

    **Attributes**:

        * ``name`` - phonebook name.
        * ``description`` - description about the phonebook.

    **Relationships**:

        * ``user`` - Foreign key relationship to the User model.\
        Each phonebook is assigned to a User

    **Name of DB table**: dialer_phonebook
    """
    name = models.CharField(max_length=90, verbose_name=_('name'))
    description = models.TextField(null=True, blank=True, help_text=_("phonebook notes"))
    user = models.ForeignKey('auth.User', related_name='Phonebook owner')
    created_date = models.DateTimeField(auto_now_add=True, verbose_name=_('date'))
    updated_date = models.DateTimeField(auto_now=True)

    class Meta:
        permissions = (
            ("view_phonebook", _('can see phonebook')),
        )
        db_table = u'dialer_phonebook'
        verbose_name = _("phonebook")
        verbose_name_plural = _("phonebooks")

    def __unicode__(self):
            return u"%s" % self.name

    def phonebook_contacts(self):
        """This will return a count of the contacts in the phonebook"""
        return Contact.objects.filter(phonebook=self.id).count()
    phonebook_contacts.allow_tags = True
    phonebook_contacts.short_description = _('contacts')


class Contact(Model):
    """This defines the Contact

    **Attributes**:

        * ``contact`` - Contact no
        * ``last_name`` - Contact's last name
        * ``first_name`` - Contact's first name
        * ``email`` - Contact's e-mail address
        * ``city`` - city name
        * ``description`` - description about a Contact
        * ``status`` - contact status
        * ``additional_vars`` - Additional variables

    **Relationships**:

        * ``phonebook`` - Foreign key relationship to the Phonebook model.\
        Each contact mapped with a phonebook
        * ``country`` - Foreign key relationship to the Country model.\
        Each contact mapped with a country

    **Name of DB table**: dialer_contact
    """
    phonebook = models.ForeignKey(Phonebook, verbose_name=_('phonebook'))
    contact = models.CharField(max_length=90, verbose_name=_('contact number'))
    status = models.IntegerField(choices=list(CONTACT_STATUS), default=CONTACT_STATUS.ACTIVE,
                                 verbose_name=_("status"), blank=True, null=True)
    last_name = models.CharField(max_length=120, blank=True, null=True, verbose_name=_('last name'))
    first_name = models.CharField(max_length=120, blank=True, null=True, verbose_name=_('first name'))
    email = models.EmailField(blank=True, null=True, verbose_name=_('email'))
    address = models.CharField(max_length=250, null=True, blank=True, verbose_name=_("address"))
    city = models.CharField(max_length=120, blank=True, null=True, verbose_name=_('city'))
    state = models.CharField(max_length=120, blank=True, null=True, verbose_name=_('state'))
    country = CountryField(blank=True, null=True, verbose_name=_('country'))
    unit_number = models.CharField(max_length=50, blank=True, null=True, verbose_name=_("unit number"))
    additional_vars = jsonfield.JSONField(
        null=True, blank=True, verbose_name=_('additional parameters (JSON)'),
        help_text=_("enter the list of parameters in JSON format, e.g. {\"age\": \"32\"}"))
    description = models.TextField(null=True, blank=True, verbose_name=_("notes"))
    created_date = models.DateTimeField(auto_now_add=True, verbose_name=_('date'))
    updated_date = models.DateTimeField(auto_now=True)

    class Meta:
        permissions = (
            ("view_contact", _('can see contact')),
        )
        db_table = u'dialer_contact'
        verbose_name = _("contact")
        verbose_name_plural = _("contacts")

    def __unicode__(self):
        #this will be used by duplicate_contact
        return u"%s" % (self.contact)

    def contact_name(self):
        """Return Contact Name"""
        return u"%s %s" % (self.first_name, self.last_name)

    def replace_tag(self, text):
        """
        Replace tag by contact values.
        This function will replace all the following tags:

            {last_name}
            {first_name}
            {email}
            {country}
            {city}
            {phone_number}

        as well as, get additional_vars, and replace json tags
        """
        #text = text.encode('utf-8')
        taglist = {
            'last_name': self.last_name,
            'first_name': self.first_name,
            'email': self.email,
            'country': self.country,
            'city': self.city,
            'phone_number': self.contact,
        }
        if self.additional_vars:
            for index in self.additional_vars:
                taglist[index] = self.additional_vars[index]

        for ind in taglist:
            text = text.replace('{' + ind + '}', str(taglist[ind]))

        # replace the tags not found
        text = re.sub('{(\w+)}', '', text)
        return text

    contact_name.allow_tags = True
    contact_name.short_description = _('name')

########NEW FILE########
__FILENAME__ = tasks
#
# Newfies-Dialer License
# http://www.newfies-dialer.org
#
# This Source Code Form is subject to the terms of the Mozilla Public
# License, v. 2.0. If a copy of the MPL was not distributed with this file,
# You can obtain one at http://mozilla.org/MPL/2.0/.
#
# Copyright (C) 2011-2014 Star2Billing S.L.
#
# The Initial Developer of the Original Code is
# Arezqui Belaid <info@star2billing.com>
#

from django.conf import settings
from celery.decorators import task
# from celery.task import Task
from celery.utils.log import get_task_logger
from dialer_campaign.models import Campaign, Subscriber
from user_profile.models import UserProfile
# from django_lets_go.only_one_task import only_one

logger = get_task_logger(__name__)


@task()
def collect_subscriber(campaign_id):
    """
    This task will collect all the contact and create the Subscriber
    if the phonebook_id is no in the list of imported_phonebook IDs.

    **Attributes**:

        * ``campaign_id`` - Campaign ID
    """
    logger.debug("Collect subscribers for the campaign = %s" % str(campaign_id))

    #Retrieve the list of active contact
    obj_campaign = Campaign.objects.get(id=campaign_id)
    list_phonebook = obj_campaign.phonebook.all()

    for item_phonebook in list_phonebook:
        phonebook_id = item_phonebook.id

        # check if phonebook_id is missing in imported_phonebook list
        if not str(phonebook_id) in obj_campaign.imported_phonebook.split(','):
            #Run import
            logger.info("ImportPhonebook %d for campaign = %d" % (phonebook_id, campaign_id))

            #Faster method, ask the Database to do the job
            importcontact_custom_sql(campaign_id, phonebook_id)

            #Add the phonebook id to the imported list
            if obj_campaign.imported_phonebook == '':
                sep = ''
            else:
                sep = ','
            obj_campaign.imported_phonebook = obj_campaign.imported_phonebook + \
                '%s%d' % (sep, phonebook_id)
            obj_campaign.save()

    #Count contact imported
    count_contact = Subscriber.objects.filter(campaign=campaign_id).count()
    obj_campaign.totalcontact = count_contact
    obj_campaign.save()

    return True


def importcontact_custom_sql(campaign_id, phonebook_id):
    # Call PL-SQL stored procedure
    #Subscriber.importcontact_pl_sql(campaign_id, phonebook_id)

    # max_subr_cpg = max number of subscriber per campaign,
    # That is going to be checked when a contact is going to be imported
    # to the subscriber list

    #TODO: to review first... accr max_subr_cpn/max_subr_cpg
    campaign_obj = Campaign.objects.get(pk=campaign_id)
    max_subr_cpg = UserProfile.objects.get(user=campaign_obj.user).dialersetting.max_subr_cpg

    if max_subr_cpg > 0:
        #Check how many we are going to import and how many exist for that campaign already
        imported_subscriber_count = Subscriber.objects.filter(campaign_id=campaign_id).count()
        allowed_import = max_subr_cpg - imported_subscriber_count
        if allowed_import > 0:
            #handle negative value for to_import
            limit_import = 'LIMIT %d' % allowed_import
        else:
            limit_import = 'LIMIT 0'
    else:
        limit_import = ''

    from django.db import connection, transaction
    cursor = connection.cursor()
    if settings.DATABASES['default']['ENGINE'] == 'django.db.backends.postgresql_psycopg2':
        # Data insert operation - http://stackoverflow.com/questions/12451053/django-bulk-create-with-ignore-rows-that-cause-integrityerror
        sqlimport = "LOCK TABLE dialer_subscriber IN EXCLUSIVE MODE;" \
            "INSERT INTO dialer_subscriber "\
            "(contact_id, campaign_id, duplicate_contact, status, created_date, updated_date) "\
            "SELECT id, %d, contact, 1, NOW(), NOW() FROM dialer_contact "\
            "WHERE phonebook_id=%d AND dialer_contact.status=1 AND NOT EXISTS (" \
            "SELECT 1 FROM dialer_subscriber WHERE "\
            "dialer_subscriber.campaign_id=%d "\
            "AND dialer_contact.id = dialer_subscriber.contact_id ) %s;" % \
            (campaign_id, phonebook_id, campaign_id, limit_import)
    else:
        # MYSQL Support removed
        logger.error("Database not supported (%s)" % settings.DATABASES['default']['ENGINE'])
        return False

    cursor.execute(sqlimport)
    transaction.commit_unless_managed()

    return True

########NEW FILE########
__FILENAME__ = dialer_contact_tags
#
# Newfies-Dialer License
# http://www.newfies-dialer.org
#
# This Source Code Form is subject to the terms of the Mozilla Public
# License, v. 2.0. If a copy of the MPL was not distributed with this file,
# You can obtain one at http://mozilla.org/MPL/2.0/.
#
# Copyright (C) 2011-2014 Star2Billing S.L.
#
# The Initial Developer of the Original Code is
# Arezqui Belaid <info@star2billing.com>
#

from django.template.defaultfilters import register


@register.filter(name='contact_status')
def contact_status(value):
    """Contact status

    >>> contact_status(1)
    'ACTIVE'

    >>> contact_status(2)
    'INACTIVE'
    """
    return str('ACTIVE') if value == 1 else str('INACTIVE')

########NEW FILE########
__FILENAME__ = tests
#
# Newfies-Dialer License
# http://www.newfies-dialer.org
#
# This Source Code Form is subject to the terms of the Mozilla Public
# License, v. 2.0. If a copy of the MPL was not distributed with this file,
# You can obtain one at http://mozilla.org/MPL/2.0/.
#
# Copyright (C) 2011-2014 Star2Billing S.L.
#
# The Initial Developer of the Original Code is
# Arezqui Belaid <info@star2billing.com>
#

from django.contrib.auth.models import User
from django.template import Template, Context
from django.test import TestCase
#from django.conf import settings
from django.core.management import call_command
from dialer_contact.models import Phonebook, Contact
from dialer_contact.forms import Contact_fileImport, PhonebookForm, ContactForm, ContactSearchForm
from dialer_contact.views import phonebook_add, phonebook_change, phonebook_list,\
    phonebook_del, contact_list, contact_add, contact_change, contact_del, contact_import,\
    get_contact_count
from dialer_contact.tasks import collect_subscriber
from django_lets_go.utils import BaseAuthenticatedClient
from datetime import datetime
from django.utils.timezone import utc
#import os

#csv_file = open(
#    os.path.abspath('../../newfies-dialer/newfies/') + '/dialer_contact/fixtures/import_contacts.txt', 'r'
#)

#csv_file = open(
#    settings.APPLICATION_DIR + '/dialer_contact/fixtures/import_contacts.txt', 'r'
#)


class DialerContactView(BaseAuthenticatedClient):
    """Test cases for Phonebook, Contact, Campaign, Subscriber
       Admin Interface.
    """

    def test_admin_phonebook_view_list(self):
        """Test Function to check admin phonebook list"""
        # the breakpoint will be here
        # import pdb
        # pdb.set_trace()

        response = self.client.get("/admin/dialer_contact/phonebook/")
        self.failUnlessEqual(response.status_code, 200)

    def test_admin_phonebook_view_add(self):
        """Test Function to check admin phonebook add"""
        response = self.client.get("/admin/dialer_contact/phonebook/add/")
        self.assertEqual(response.status_code, 200)

        response = self.client.post(
            '/admin/dialer_contact/phonebook/add/',
            data={'name': 'test_phonebook', 'user': '1'},
            follow=True)
        self.assertEqual(response.status_code, 200)

    def test_admin_contact_view_list(self):
        """Test Function to check admin contact list"""
        response = self.client.get("/admin/dialer_contact/contact/")
        self.failUnlessEqual(response.status_code, 200)

    def test_admin_contact_view_add(self):
        """Test Function to check admin contact add"""
        response = self.client.get("/admin/dialer_contact/contact/add/")
        self.assertEqual(response.status_code, 200)

        response = self.client.post(
            '/admin/dialer_contact/contact/add/',
            data={'phonebook_id': '1', 'contact': '1234',
                  'last_name': 'xyz', 'first_name': 'abc',
                  'status': '1'})
        self.assertEqual(response.status_code, 200)

    def test_admin_contact_view_import(self):
        """Test Function to check admin import contact"""
        response = self.client.get('/admin/dialer_contact/contact/import_contact/')
        self.failUnlessEqual(response.status_code, 200)

        #response = self.client.post(
        #    '/admin/dialer_contact/contact/import_contact/',
        #    data={'phonebook_id': '1', 'csv_file': csv_file})
        #self.assertEqual(response.status_code, 200)


class DialerContactCustomerView(BaseAuthenticatedClient):
    """Test cases for Phonebook, Contact, Campaign, Subscriber
       Customer Interface.
    """

    #fixtures = ['auth_user.json', 'phonebook.json', 'contact.json']
    fixtures = ['auth_user.json', 'gateway.json', 'dialer_setting.json',
                'user_profile.json', 'contenttype.json',
                'phonebook.json', 'contact.json', 'survey.json',
                'dnc_list.json', 'dnc_contact.json',
                'campaign.json', 'subscriber.json']

    def test_phonebook_view_list(self):
        """Test Function to check phonebook list"""
        response = self.client.get('/phonebook/')
        self.assertTemplateUsed(response, 'dialer_contact/phonebook/list.html')

        request = self.factory.get('/phonebook/')
        request.user = self.user
        request.session = {}
        response = phonebook_list(request)
        self.assertEqual(response.status_code, 200)

    def test_phonebook_view_add(self):
        """Test Function to check add phonebook"""
        request = self.factory.post('/phonebook/add/', data={
            'name': 'My Phonebook',
            'description': 'phonebook',
        }, follow=True)
        request.user = self.user
        request.session = {}
        response = phonebook_add(request)
        self.assertEqual(response.status_code, 302)

        resp = self.client.post('/phonebook/add/', data={'name': '', 'description': 'phonebook'})
        self.assertEqual(resp.status_code, 200)
        self.assertEqual(resp.context['form']['name'].errors,
                         [u'This field is required.'])

    def test_phonebook_view_update(self):
        """Test Function to check update phonebook"""
        response = self.client.get('/phonebook/1/')
        self.assertEqual(response.status_code, 200)
        self.assertTemplateUsed(response, 'dialer_contact/phonebook/change.html')

        request = self.factory.post('/phonebook/1/', data={
            'name': 'Default_Phonebook',
        }, follow=True)
        request.user = self.user
        request.session = {}
        response = phonebook_change(request, 1)
        self.assertEqual(response.status_code, 302)

        out = Template(
            '{% block content %}'
            '{% if msg %}'
            '{{ msg|safe }}'
            '{% endif %}'
            '{% endblock %}'
        ).render(Context({
            'msg': request.session.get('msg'),
        }))
        self.assertEqual(out, '"Default_Phonebook" is updated.')

        # delete phonebook through phonebook_change
        request = self.factory.post('/phonebook/1/',
                                    data={'delete': True}, follow=True)
        request.user = self.user
        request.session = {}
        response = phonebook_change(request, 1)
        self.assertEqual(response.status_code, 200)

    def test_phonebook_view_delete(self):
        """Test Function to check delete phonebook"""
        request = self.factory.post('/phonebook/del/1/')
        request.user = self.user
        request.session = {}
        response = phonebook_del(request, 1)
        self.assertEqual(response.status_code, 302)

        out = Template(
            '{% block content %}'
            '{% if msg %}'
            '{{ msg|safe }}'
            '{% endif %}'
            '{% endblock %}'
        ).render(Context({
                         'msg': request.session.get('msg'),
                         }))
        self.assertEqual(out, '"Default_Phonebook" is deleted.')

        request = self.factory.post('/phonebook/del/', {'select': '1'})
        request.user = self.user
        request.session = {}
        response = phonebook_del(request, 0)
        self.assertEqual(response.status_code, 302)

    def test_contact_view_list(self):
        """Test Function to check Contact list"""
        response = self.client.get('/contact/')
        self.assertTrue(response.context['form'], ContactSearchForm(self.user))
        self.assertEqual(response.status_code, 200)
        self.assertTemplateUsed(response, 'dialer_contact/contact/list.html')

        request = self.factory.post('/contact/',
            data={'from_date': datetime.utcnow().replace(tzinfo=utc),
                  'to_date': datetime.utcnow().replace(tzinfo=utc),
                  'contact_name': '123'})
        request.user = self.user
        request.session = {}
        response = contact_list(request)
        self.assertEqual(response.status_code, 200)

    def test_contact_view_add(self):
        """Test Function to check add Contact"""
        response = self.client.get('/contact/add/')
        self.assertEqual(response.context['action'], 'add')
        self.assertEqual(response.status_code, 200)
        response = self.client.post('/contact/add/',
                                    data={'phonebook_id': '1', 'contact': '1234',
                                          'last_name': 'xyz', 'first_name': 'abc',
                                          'status': '1'})
        self.assertEqual(response.context['action'], 'add')
        self.assertEqual(response.status_code, 200)

        request = self.factory.get('/contact/add/')
        request.user = self.user
        request.session = {}
        response = contact_add(request)
        self.assertEqual(response.status_code, 200)

        response = self.client.post('/contact/add/',
                                    data={'contact': '1234'})
        self.assertEqual(response.status_code, 200)
        self.assertEqual(response.context['form']['phonebook'].errors,
                         [u'This field is required.'])

    def test_contact_view_update(self):
        """Test Function to check update Contact"""
        response = self.client.get('/contact/1/')
        self.assertTrue(response.context['form'], ContactForm(self.user))
        self.assertTemplateUsed(response, 'dialer_contact/contact/change.html')

        request = self.factory.post('/contact/1/', {'phonebook': '1'})
        request.user = self.user
        request.session = {}
        response = contact_change(request, 1)
        self.assertEqual(response.status_code, 200)

        # delete contact through contact_change
        request = self.factory.post('/contact/1/', data={'delete': True}, follow=True)
        request.user = self.user
        request.session = {}
        response = contact_change(request, 1)
        self.assertEqual(response.status_code, 200)

    def test_contact_view_delete(self):
        """Test Function to check delete contact"""
        request = self.factory.get('/contact/del/1/')
        request.user = self.user
        request.session = {}
        response = contact_del(request, 1)
        self.assertEqual(response.status_code, 302)

        request = self.factory.post('/contact/del/', {'select': '1'})
        request.user = self.user
        request.session = {}
        response = contact_del(request, 0)
        self.assertEqual(response.status_code, 302)

    def test_contact_view_import(self):
        """Test Function to check import Contact"""
        response = self.client.get('/contact_import/')
        self.assertTrue(response.context['form'], Contact_fileImport(self.user))
        self.assertEqual(response.status_code, 200)
        self.assertTemplateUsed(response, 'dialer_contact/contact/import_contact.html')

        request = self.factory.get('/contact_import/')
        request.user = self.user
        request.session = {}
        response = contact_import(request)
        self.assertEqual(response.status_code, 200)

    def test_get_contact_count(self):
        request = self.factory.get('/contact/', {'ids': '1'})
        request.user = self.user
        request.session = {}
        response = get_contact_count(request)
        self.assertEqual(response.status_code, 200)


class DialerContactCeleryTaskTestCase(TestCase):
    """Test cases for celery task"""

    fixtures = ['auth_user.json', 'gateway.json', 'dialer_setting.json',
                'user_profile.json', 'contenttype.json',
                'phonebook.json', 'contact.json', 'survey.json',
                'dnc_list.json', 'dnc_contact.json',
                'campaign.json', 'subscriber.json']

    def test_import_phonebook(self):
        """Test that the ``collect_subscriber``
        task runs with no errors, and returns the correct result."""
        result = collect_subscriber.delay(1)
        self.assertEqual(result.successful(), True)

        # Test mgt command
        call_command("create_contact", "1|10")

        call_command("create_contact", "3|10")


class DialerContactModel(TestCase):
    """Test Phonebook, Contact models"""

    fixtures = ['auth_user.json', 'phonebook.json', 'contact.json']

    def setUp(self):
        self.user = User.objects.get(username='admin')

        # Phonebook model
        self.phonebook = Phonebook(
            name='test_phonebook',
            user=self.user,
        )
        self.phonebook.save()

        # Contact model
        self.contact = Contact(
            phonebook=self.phonebook,
            contact=123456789,
            first_name='Tom',
            last_name='Gun',
        )
        self.contact.save()
        self.assertEqual(self.contact.__unicode__(), u'123456789')
        self.assertEqual(self.contact.contact_name(), 'Tom Gun')

    def test_phonebook_form(self):
        self.assertEqual(self.phonebook.name, 'test_phonebook')
        form = PhonebookForm({'name': 'sample_phonebook'})
        form.save(user=self.user)

        form = PhonebookForm(instance=self.phonebook)
        self.assertTrue(isinstance(form.instance, Phonebook))

    def test_contact_form(self):
        self.assertEqual(self.contact.phonebook, self.phonebook)
        form = ContactForm(self.user)
        form.contact = '123456'
        obj = form.save(commit=False)
        obj.phonebook = self.phonebook
        obj.save()

        form = ContactForm(self.user, instance=self.contact)
        self.assertTrue(isinstance(form.instance, Contact))

    def teardown(self):
        self.phonebook.delete()
        self.contact.delete()

########NEW FILE########
__FILENAME__ = urls
#
# Newfies-Dialer License
# http://www.newfies-dialer.org
#
# This Source Code Form is subject to the terms of the Mozilla Public
# License, v. 2.0. If a copy of the MPL was not distributed with this file,
# You can obtain one at http://mozilla.org/MPL/2.0/.
#
# Copyright (C) 2011-2014 Star2Billing S.L.
#
# The Initial Developer of the Original Code is
# Arezqui Belaid <info@star2billing.com>
#
from django.conf.urls import patterns


urlpatterns = patterns('dialer_contact.views',
    # Phonebook urls
    (r'^phonebook/$', 'phonebook_list'),
    (r'^phonebook/add/$', 'phonebook_add'),
    (r'^phonebook/contact_count/$', 'get_contact_count'),
    (r'^phonebook/del/(.+)/$', 'phonebook_del'),
    (r'^phonebook/(.+)/$', 'phonebook_change'),

    # Contacts urls
    (r'^contact/$', 'contact_list'),
    (r'^contact/add/$', 'contact_add'),
    (r'^contact_import/$', 'contact_import'),
    (r'^contact/del/(.+)/$', 'contact_del'),
    (r'^contact/(.+)/$', 'contact_change'),
)

########NEW FILE########
__FILENAME__ = views
#
# Newfies-Dialer License
# http://www.newfies-dialer.org
#
# This Source Code Form is subject to the terms of the Mozilla Public
# License, v. 2.0. If a copy of the MPL was not distributed with this file,
# You can obtain one at http://mozilla.org/MPL/2.0/.
#
# Copyright (C) 2011-2014 Star2Billing S.L.
#
# The Initial Developer of the Original Code is
# Arezqui Belaid <info@star2billing.com>
#
from django.contrib.auth.decorators import login_required, permission_required
from django.http import HttpResponseRedirect, HttpResponse, Http404
from django.shortcuts import render_to_response, get_object_or_404
from django.template.context import RequestContext
from django.utils.translation import ugettext as _
from django.db.models import Q
from django.db.models import Count
from dialer_contact.models import Phonebook, Contact
from dialer_contact.forms import ContactSearchForm, Contact_fileImport, PhonebookForm, ContactForm
from dialer_contact.constants import PHONEBOOK_COLUMN_NAME, CONTACT_COLUMN_NAME
from dialer_contact.constants import STATUS_CHOICE
from dialer_campaign.function_def import check_dialer_setting, dialer_setting_limit
from user_profile.constants import NOTIFICATION_NAME
from frontend_notification.views import frontend_send_notification
from django_lets_go.common_functions import striplist, getvar, get_pagination_vars,\
    unset_session_var, source_desti_field_chk
import csv
import json

redirect_url_to_phonebook_list = '/phonebook/'
redirect_url_to_contact_list = '/contact/'


@permission_required('dialer_contact.view_phonebook', login_url='/')
@login_required
def phonebook_list(request):
    """
    Phonebook list for the logged in user

    **Attributes**:

        * ``template`` - dialer_contact/phonebook/list.html

    **Logic Description**:

        * List all phonebooks which belong to the logged in user.
    """
    sort_col_field_list = ['id', 'name', 'updated_date']
    pag_vars = get_pagination_vars(request, sort_col_field_list, default_sort_field="id")
    phonebook_list = Phonebook.objects\
        .annotate(contact_count=Count('contact')).filter(user=request.user).order_by(pag_vars['sort_order'])
    data = {
        'msg': request.session.get('msg'),
        'phonebook_list': phonebook_list,
        'total_phonebook': phonebook_list.count(),
        'PHONEBOOK_COLUMN_NAME': PHONEBOOK_COLUMN_NAME,
        'col_name_with_order': pag_vars['col_name_with_order'],
    }
    request.session['msg'] = ''
    request.session['error_msg'] = ''
    return render_to_response('dialer_contact/phonebook/list.html', data, context_instance=RequestContext(request))


@permission_required('dialer_contact.add_phonebook', login_url='/')
@login_required
def phonebook_add(request):
    """Add new Phonebook for the logged in user

    **Attributes**:

        * ``form`` - PhonebookForm
        * ``template`` - dialer_contact/phonebook/change.html

    **Logic Description**:

        * Add a new phonebook which will belong to the logged in user
          via the phonebookForm & get redirected to the phonebook list
    """
    form = PhonebookForm(request.POST or None)
    if form.is_valid():
        form.save(user=request.user)
        request.session["msg"] = _('"%(name)s" added.') % {'name': request.POST['name']}
        return HttpResponseRedirect(redirect_url_to_phonebook_list)

    data = {
        'form': form,
        'action': 'add',
    }
    return render_to_response('dialer_contact/phonebook/change.html', data, context_instance=RequestContext(request))


@login_required
def get_contact_count(request):
    """To get total no of contacts belonging to a phonebook list"""
    values = request.GET.getlist('ids')
    values = ", ".join(["%s" % el for el in values])
    contact_count = Contact.objects.filter(phonebook__user=request.user)\
        .extra(where=['phonebook_id IN (%s)' % values]).count()

    return HttpResponse(contact_count)


@permission_required('dialer_contact.delete_phonebook', login_url='/')
@login_required
def phonebook_del(request, object_id):
    """Delete a phonebook for a logged in user

    **Attributes**:

        * ``object_id`` - Selected phonebook object
        * ``object_list`` - Selected phonebook objects

    **Logic Description**:

        * Delete contacts from a contact list belonging to a phonebook list.
        * Delete selected the phonebook from the phonebook list
    """
    if int(object_id) != 0:
        # When object_id is not 0
        phonebook = get_object_or_404(Phonebook, pk=object_id, user=request.user)

        # Delete all contacts belonging to a phonebook
        contact_list = Contact.objects.filter(phonebook=phonebook)
        contact_list.delete()

        # Delete phonebook
        phonebook.delete()
        request.session["msg"] = _('"%(name)s" is deleted.') % {'name': phonebook.name}
    else:
        # When object_id is 0 (Multiple records delete)
        values = request.POST.getlist('select')
        values = ", ".join(["%s" % el for el in values])
        try:
            # Delete all contacts belonging to a phonebook
            contact_list = Contact.objects\
                .filter(phonebook__user=request.user)\
                .extra(where=['phonebook_id IN (%s)' % values])
            if contact_list:
                contact_list.delete()

            # Delete phonebook
            phonebook_list = Phonebook.objects.filter(user=request.user).extra(where=['id IN (%s)' % values])
            if phonebook_list:
                phonebook_list.delete()
                request.session["msg"] = _('%(count)s phonebook(s) are deleted.') % {'count': phonebook_list.count()}
        except:
            raise Http404

    return HttpResponseRedirect(redirect_url_to_phonebook_list)


@permission_required('dialer_contact.change_phonebook', login_url='/')
@login_required
def phonebook_change(request, object_id):
    """Update/Delete Phonebook for the logged in user

    **Attributes**:

        * ``object_id`` - Selected phonebook object
        * ``form`` - PhonebookForm
        * ``template`` - dialer_contact/phonebook/change.html

    **Logic Description**:

        * Update/delete selected phonebook from the phonebook list
          via PhonebookForm & get redirected to phonebook list
    """
    phonebook = get_object_or_404(Phonebook, pk=object_id, user=request.user)
    form = PhonebookForm(request.POST or None, instance=phonebook)
    if form.is_valid():
        if request.POST.get('delete'):
            return HttpResponseRedirect('%sdel/%s/' % (redirect_url_to_phonebook_list, object_id))
        else:
            form.save()
            request.session["msg"] = _('"%(name)s" is updated.') % {'name': request.POST['name']}
            return HttpResponseRedirect(redirect_url_to_phonebook_list)

    data = {
        'form': form,
        'action': 'update',
    }
    return render_to_response('dialer_contact/phonebook/change.html', data, context_instance=RequestContext(request))


@permission_required('dialer_contact.view_contact', login_url='/')
@login_required
def contact_list(request):
    """Contact list for the logged in user

    **Attributes**:

        * ``template`` - dialer_contact/contact/list.html
        * ``form`` - ContactSearchForm

    **Logic Description**:

        * List all contacts from phonebooks belonging to the logged in user
    """
    sort_col_field_list = ['id', 'phonebook', 'contact', 'status', 'first_name', 'last_name', 'email', 'updated_date']
    pag_vars = get_pagination_vars(request, sort_col_field_list, default_sort_field='id')
    form = ContactSearchForm(request.user, request.POST or None)
    phonebook_id_list = Phonebook.objects.values_list('id', flat=True).filter(user=request.user)

    contact_no = ''
    contact_name = ''
    phonebook = ''
    contact_status = STATUS_CHOICE.ALL
    post_var_with_page = 0
    if form.is_valid():
        field_list = ['contact_no', 'contact_name', 'contact_status', 'phonebook']
        unset_session_var(request, field_list)

        contact_no = getvar(request, 'contact_no', setsession=True)
        contact_name = getvar(request, 'contact_name', setsession=True)
        contact_status = getvar(request, 'contact_status', setsession=True)
        phonebook = getvar(request, 'phonebook', setsession=True)
        post_var_with_page = 1

    if request.GET.get('page') or request.GET.get('sort_by'):
        post_var_with_page = 1
        contact_no = request.session.get('session_contact_no')
        contact_name = request.session.get('session_contact_name')
        contact_status = request.session.get('session_contact_status')
        phonebook = request.session.get('session_phonebook')
        form = ContactSearchForm(request.user,
                                 initial={'contact_no': contact_no,
                                          'contact_name': contact_name,
                                          'status': contact_status,
                                          'phonebook': phonebook})

    if post_var_with_page == 0:
        # default
        # unset session var
        field_list = ['contact_no', 'contact_name', 'contact_status', 'phonebook']
        unset_session_var(request, field_list)

    kwargs = {}
    if phonebook and phonebook != '0':
        kwargs['phonebook'] = phonebook

    if contact_status and int(contact_status) != STATUS_CHOICE.ALL:
        kwargs['status'] = contact_status

    contact_no_type = '1'
    contact_no = source_desti_field_chk(contact_no, contact_no_type, 'contact')
    for i in contact_no:
        kwargs[i] = contact_no[i]

    contact_list = []
    all_contact_list = []
    contact_count = 0

    if phonebook_id_list:
        contact_list = Contact.objects\
            .values('id', 'phonebook__name', 'contact', 'last_name', 'first_name', 'email', 'status', 'updated_date')\
            .filter(phonebook__in=phonebook_id_list)

        if kwargs:
            contact_list = contact_list.filter(**kwargs)

        if contact_name:
            # Search on contact name
            contact_name_filter = (
                Q(last_name__icontains=contact_name) | Q(first_name__icontains=contact_name)
            )
            if contact_name_filter:
                contact_list = contact_list.filter(contact_name_filter)

        all_contact_list = contact_list.order_by(pag_vars['sort_order'])
        contact_list = all_contact_list[pag_vars['start_page']:pag_vars['end_page']]
        contact_count = all_contact_list.count()

    data = {
        'contact_list': contact_list,
        'all_contact_list': all_contact_list,
        'total_contacts': contact_count,
        'CONTACT_COLUMN_NAME': CONTACT_COLUMN_NAME,
        'col_name_with_order': pag_vars['col_name_with_order'],
        'msg': request.session.get('msg'),
        'error_msg': request.session.get('error_msg'),
        'form': form,
    }
    request.session['msg'] = ''
    request.session['error_msg'] = ''
    return render_to_response('dialer_contact/contact/list.html', data, context_instance=RequestContext(request))


@permission_required('dialer_contact.add_contact', login_url='/')
@login_required
def contact_add(request):
    """Add a new contact into the selected phonebook for the logged in user

    **Attributes**:

        * ``form`` - ContactForm
        * ``template`` - dialer_contact/contact/change.html

    **Logic Description**:

        * Before adding a contact, check dialer setting limit if applicable
          to the user.
        * Add new contact belonging to the logged in user
          via ContactForm & get redirected to the contact list
    """
    # Check dialer setting limit
    if request.user and request.method == 'POST':
        if check_dialer_setting(request, check_for="contact"):
            request.session['msg'] = _("you have too many contacts. you are allowed a maximum of %(limit)s") % \
                {'limit': dialer_setting_limit(request, limit_for="contact")}

            # contact limit reached
            frontend_send_notification(request, NOTIFICATION_NAME.contact_limit_reached)
            return HttpResponseRedirect(redirect_url_to_contact_list)

    form = ContactForm(request.user, request.POST or None)
    # Add contact
    if form.is_valid():
        form.save()
        request.session["msg"] = _('"%s" is added.') % request.POST['contact']
        return HttpResponseRedirect(redirect_url_to_contact_list)

    data = {
        'form': form,
        'action': 'add',
    }
    return render_to_response('dialer_contact/contact/change.html', data, context_instance=RequestContext(request))


@permission_required('dialer_contact.delete_contact', login_url='/')
@login_required
def contact_del(request, object_id):
    """Delete contact for the logged in user

    **Attributes**:

        * ``object_id`` - Selected contact object
        * ``object_list`` - Selected contact objects

    **Logic Description**:

        * Delete selected contact from the contact list
    """
    if int(object_id) != 0:
        # When object_id is not 0
        contact = get_object_or_404(Contact, pk=object_id, phonebook__user=request.user)

        # Delete contact
        request.session["msg"] = _('"%s" is deleted.') % contact.contact
        contact.delete()
    else:
        # When object_id is 0 (Multiple records delete)
        values = request.POST.getlist('select')
        values = ", ".join(["%s" % el for el in values])

        try:
            contact_list = Contact.objects.extra(where=['id IN (%s)' % values])
            if contact_list:
                request.session["msg"] = _('%s contact(s) are deleted.') % contact_list.count()
                contact_list.delete()
        except:
            raise Http404
    return HttpResponseRedirect(redirect_url_to_contact_list)


@permission_required('dialer_contact.change_contact', login_url='/')
@login_required
def contact_change(request, object_id):
    """Update/Delete contact for the logged in user

    **Attributes**:

        * ``object_id`` - Selected contact object
        * ``form`` - ContactForm
        * ``template`` - dialer_contact/contact/change.html

    **Logic Description**:

        * Update/delete selected contact from the contact list
          via ContactForm & get redirected to the contact list
    """
    contact = get_object_or_404(Contact, pk=object_id, phonebook__user=request.user)

    form = ContactForm(request.user, request.POST or None, instance=contact)
    if form.is_valid():
        # Delete contact
        if request.POST.get('delete'):
            return HttpResponseRedirect('%sdel/%s/' % (redirect_url_to_contact_list, object_id))
        else:
            # Update contact
            form.save()
            request.session["msg"] = _('"%s" is updated.') % request.POST['contact']
            return HttpResponseRedirect(redirect_url_to_contact_list)
    data = {
        'form': form,
        'action': 'update',
    }
    return render_to_response('dialer_contact/contact/change.html', data, context_instance=RequestContext(request))


@login_required
def contact_import(request):
    """Import CSV file of Contacts for the logged in user

    **Attributes**:

        * ``form`` - Contact_fileImport
        * ``template`` - dialer_contact/contact/import_contact.html

    **Logic Description**:

        * Before adding contacts, check dialer setting limit if applicable
          to the user.
        * Add new contacts which will belong to the logged in user
          via csv file & get the result (upload success and failure
          statistics)

    **Important variable**:

        * total_rows - Total no. of records in the CSV file
        * retail_record_count - No. of records imported from the CSV file
    """
    # Check dialer setting limit
    if request.user and request.method == 'POST':
        # check  Max Number of contacts
        if check_dialer_setting(request, check_for="contact"):
            request.session['msg'] = _("you have too many contacts. you are allowed a maximum of %(limit)s") % \
                {'limit': dialer_setting_limit(request, limit_for="contact")}

            # contact limit reached
            frontend_send_notification(request, NOTIFICATION_NAME.contact_limit_reached)
            return HttpResponseRedirect(redirect_url_to_contact_list)

    form = Contact_fileImport(request.user, request.POST or None, request.FILES or None)
    csv_data = ''
    msg = ''
    error_msg = ''
    success_import_list = []
    type_error_import_list = []
    contact_cnt = 0
    bulk_record = []

    if form.is_valid():
        # col_no - field name
        #  0     - contact
        #  1     - last_name
        #  2     - first_name
        #  3     - email
        #  4     - description
        #  5     - status
        #  6     - address
        #  7     - city
        #  8     - country
        #  9     - country
        # 10     - unit_number
        # 11     - additional_vars
        # To count total rows of CSV file
        records = csv.reader(request.FILES['csv_file'], delimiter='|', quotechar='"')
        total_rows = len(list(records))
        BULK_SIZE = 1000
        csv_data = csv.reader(request.FILES['csv_file'], delimiter='|', quotechar='"')
        #Get Phonebook Obj
        phonebook = get_object_or_404(Phonebook, pk=request.POST['phonebook'], user=request.user)
        #Read each Row
        for row in csv_data:
            row = striplist(row)
            if not row or str(row[0]) == 0:
                continue

            #Check field type
            if not int(row[5]):
                error_msg = _("invalid value for import! please check the import samples or phonebook is not valid")
                type_error_import_list.append(row)
                break

            if len(row[9]) > 2:
                error_msg = _("invalid value for country code, it needs to be a valid ISO 3166-1 alpha-2 codes")
                type_error_import_list.append(row)
                break

            row_11 = ''
            if row[11]:
                try:
                    row_11 = json.loads(row[11])
                except:
                    row_11 = ''

            bulk_record.append(
                Contact(
                    phonebook=phonebook,
                    contact=row[0],
                    last_name=row[1],
                    first_name=row[2],
                    email=row[3],
                    description=row[4],
                    status=int(row[5]),
                    address=row[6],
                    city=row[7],
                    state=row[8],
                    country=row[9],  # Note: country needs to be a country code (CA, ES)
                    unit_number=row[10],
                    additional_vars=row_11)
            )

            contact_cnt = contact_cnt + 1

            if contact_cnt < 100:
                #We want to display only 100 lines of the success import
                success_import_list.append(row)

            if contact_cnt % BULK_SIZE == 0:
                #Bulk insert
                Contact.objects.bulk_create(bulk_record)
                bulk_record = []

        # remaining record
        Contact.objects.bulk_create(bulk_record)
        bulk_record = []

    #check if there is contact imported
    if contact_cnt > 0:
        msg = _('%(contact_cnt)s contact(s) have been uploaded successfully out of %(total_rows)s row(s)!') \
            % {'contact_cnt': contact_cnt, 'total_rows': total_rows}

    data = RequestContext(request, {
        'form': form,
        'csv_data': csv_data,
        'msg': msg,
        'error_msg': error_msg,
        'success_import_list': success_import_list,
        'type_error_import_list': type_error_import_list,
    })
    return render_to_response('dialer_contact/contact/import_contact.html',
                              data, context_instance=RequestContext(request))

########NEW FILE########
__FILENAME__ = admin
#
# Newfies-Dialer License
# http://www.newfies-dialer.org
#
# This Source Code Form is subject to the terms of the Mozilla Public
# License, v. 2.0. If a copy of the MPL was not distributed with this file,
# You can obtain one at http://mozilla.org/MPL/2.0/.
#
# Copyright (C) 2011-2014 Star2Billing S.L.
#
# The Initial Developer of the Original Code is
# Arezqui Belaid <info@star2billing.com>
#

from django.contrib import admin
from django.utils.translation import ugettext_lazy as _
from dialer_gateway.models import Gateway
from django_lets_go.app_label_renamer import AppLabelRenamer
AppLabelRenamer(native_app_label=u'dialer_gateway', app_label=_('Dialer Gateway')).main()

"""
class GatewayGroupAdmin(admin.ModelAdmin):
    list_display = ('id', 'name', 'description', 'created_date')
    list_display_links = ('name', )
    list_filter = ['metric']
    ordering = ('id', )
admin.site.register(GatewayGroup, GatewayGroupAdmin)
"""


class GatewayAdmin(admin.ModelAdmin):
    """Allows the administrator to view and modify certain attributes
    of a Gateway."""

    # fieldsets = (
    #     (_('standard options').capitalize(), {
    #         'fields': ('name', 'description', 'gateways', 'gateway_codecs',
    #             'gateway_timeouts', 'gateway_retries',
    #             'originate_dial_string', 'status'),
    #     }),
    #     (_('advanced options').capitalize(), {
    #         'classes': ('collapse',),
    #         'fields': ('addprefix', 'removeprefix', 'failover', 'addparameter',
    #                    'maximum_call', )
    #     }),
    # )
    fieldsets = (
        (_('standard options').capitalize(), {
            'fields': ('name', 'description', 'gateways',
                'gateway_timeouts', 'originate_dial_string', 'status',
                'addprefix', 'removeprefix', 'addparameter'),
        }),
    )
    list_display = ('id', 'name', 'gateways', 'addprefix',
                    'removeprefix', 'secondused', 'count_call', 'status',)
    list_display_links = ('name', )
    list_filter = ['gateways']
    ordering = ('id', )

admin.site.register(Gateway, GatewayAdmin)

########NEW FILE########
__FILENAME__ = constants
#
# Newfies-Dialer License
# http://www.newfies-dialer.org
#
# This Source Code Form is subject to the terms of the Mozilla Public
# License, v. 2.0. If a copy of the MPL was not distributed with this file,
# You can obtain one at http://mozilla.org/MPL/2.0/.
#
# Copyright (C) 2011-2014 Star2Billing S.L.
#
# The Initial Developer of the Original Code is
# Arezqui Belaid <info@star2billing.com>
#

from django.utils.translation import ugettext_lazy as _
from django_lets_go.utils import Choice


class GATEWAY_STATUS(Choice):
    ACTIVE = 1, _('active').upper()
    INACTIVE = 0, _('inactive').upper()


class GATEWAY_PROTOCOL(Choice):
    SIP = 'SIP', _('SIP')
    LOCAL = 'LOCAL', _('LOCAL')
    GSM = 'GSM', _('GSM')
    SKINNY = 'SKINNY', _('SKINNY')
    JINGLE = 'JINGLE', _('JINGLE')

########NEW FILE########
__FILENAME__ = forms
#
# Newfies-Dialer License
# http://www.newfies-dialer.org
#
# This Source Code Form is subject to the terms of the Mozilla Public
# License, v. 2.0. If a copy of the MPL was not distributed with this file,
# You can obtain one at http://mozilla.org/MPL/2.0/.
#
# Copyright (C) 2011-2014 Star2Billing S.L.
#
# The Initial Developer of the Original Code is
# Arezqui Belaid <info@star2billing.com>
#

########NEW FILE########
__FILENAME__ = models
#
# Newfies-Dialer License
# http://www.newfies-dialer.org
#
# This Source Code Form is subject to the terms of the Mozilla Public
# License, v. 2.0. If a copy of the MPL was not distributed with this file,
# You can obtain one at http://mozilla.org/MPL/2.0/.
#
# Copyright (C) 2011-2014 Star2Billing S.L.
#
# The Initial Developer of the Original Code is
# Arezqui Belaid <info@star2billing.com>
#

from django.db import models
from django.utils.translation import ugettext_lazy as _
from django_lets_go.intermediate_model_base_class import Model
from dialer_gateway.constants import GATEWAY_STATUS


class Gateway(Model):
    """This defines the trunk to deliver the Voip Calls.
    Each of the Gateways are routes that support different protocols and
    sets of rules to alter the dialed number.

    **Attributes**:

        * ``name`` - Gateway name.
        * ``description`` - Description about the Gateway.
        * ``addprefix`` - Add prefix.
        * ``removeprefix`` - Remove prefix.
        * ``gateways`` - "user/,user/", # Gateway string to try dialing \
            separated by comma. First in the list will be tried first
        * ``gateway_codecs`` - "'PCMA,PCMU','PCMA,PCMU'", \
        # Codec string as needed by FS for each gateway separated by comma
        * ``gateway_timeouts`` - "10,10", \
        # Seconds to timeout in string for each gateway separated by comma
        * ``gateway_retries`` - "2,1", \
        # Retry String for Gateways separated by comma, \
        on how many times each gateway should be retried
        * ``originate_dial_string`` - originate_dial_string
        * ``secondused`` -
        * ``failover`` -
        * ``addparameter`` -
        * ``count_call`` -
        * ``count_in_use`` -
        * ``maximum_call`` -
        * ``status`` - Gateway status

    **Name of DB table**: dialer_gateway
    """
    name = models.CharField(unique=True, max_length=255,
                verbose_name=_('name'), help_text=_("gateway name"))
    status = models.IntegerField(choices=list(GATEWAY_STATUS),
                default=GATEWAY_STATUS.ACTIVE,
                verbose_name=_("gateway status"), blank=True, null=True)
    description = models.TextField(verbose_name=_('description'), blank=True,
                               help_text=_("gateway provider notes"))
    addprefix = models.CharField(verbose_name=_('add prefix'),
                max_length=60, blank=True)
    removeprefix = models.CharField(verbose_name=_('remove prefix'),
                   max_length=60, blank=True)
    gateways = models.CharField(max_length=500, verbose_name=_("gateways"),
                help_text=_('Gateway string to dial, ie "sofia/gateway/myprovider/"'))

    gateway_codecs = models.CharField(max_length=500, blank=True,
        verbose_name=_("gateway codecs"),
        help_text=_('codec string as needed by FS, ie "PCMA,PCMU"'))

    gateway_timeouts = models.CharField(max_length=500, blank=True,
        verbose_name=_("gateway timeouts"),
        help_text=_('timeout in seconds, ie "10"'))

    gateway_retries = models.CharField(max_length=500, blank=True,
        verbose_name=_("gateway retries"),
        help_text=_('"2,1", # retry String for Gateways separated by comma, on how many times each gateway should be retried'))

    originate_dial_string = models.CharField(max_length=500, blank=True,
        verbose_name=_("originate dial string"),
        help_text=_('add channels variables : http://wiki.freeswitch.org/wiki/Channel_Variables, ie: bridge_early_media=true,hangup_after_bridge=true'))

    secondused = models.IntegerField(null=True, blank=True,
                verbose_name=_("second used"))

    created_date = models.DateTimeField(auto_now_add=True,
                verbose_name=_('date'))
    updated_date = models.DateTimeField(auto_now=True)

    failover = models.ForeignKey('self', null=True, blank=True,
                related_name="Failover Gateway", help_text=_("select gateway"))
    addparameter = models.CharField(verbose_name=_('add parameter'),
                   max_length=360, blank=True)
    count_call = models.IntegerField(null=True, blank=True,
                verbose_name=_("call count"))
    count_in_use = models.IntegerField(null=True, blank=True,
                verbose_name=_("count in use"))
    maximum_call = models.IntegerField(verbose_name=_('max concurrent calls'),
                   null=True, blank=True)
    #gatewaygroup = models.ManyToManyField(GatewayGroup)

    class Meta:
        db_table = u'dialer_gateway'
        verbose_name = _("dialer gateway")
        verbose_name_plural = _("dialer gateways")

    def set_name(self, name):
        self.name = name

    def __unicode__(self):
            return u"%s" % self.name

    #def prepare_phonenumber(self):
    #    return True


"""
class GatewayGroup(Model):
    name = models.CharField(max_length=90)
    description = models.TextField(null=True, blank=True,
                               help_text=_("Short description \
                               about the Gateway Group"))

    created_date = models.DateTimeField(auto_now_add=True, verbose_name='Date')
    updated_date = models.DateTimeField(auto_now=True)

    class Meta:
        db_table = u'dialer_gateway_group'
        verbose_name = _("Dialer Gateway Group")
        verbose_name_plural = _("Dialer Gateway Groups")

    def __unicode__(self):
            return u"%s" % self.name
"""

########NEW FILE########
__FILENAME__ = tests
#
# Newfies-Dialer License
# http://www.newfies-dialer.org
#
# This Source Code Form is subject to the terms of the Mozilla Public
# License, v. 2.0. If a copy of the MPL was not distributed with this file,
# You can obtain one at http://mozilla.org/MPL/2.0/.
#
# Copyright (C) 2011-2014 Star2Billing S.L.
#
# The Initial Developer of the Original Code is
# Arezqui Belaid <info@star2billing.com>
#

from django.test import TestCase
from django_lets_go.utils import BaseAuthenticatedClient
from dialer_gateway.models import Gateway
from dialer_gateway.utils import prepare_phonenumber


class GatewayView(BaseAuthenticatedClient):
    """Test Function to check Gateway Admin pages"""

    def test_admin_gateway_view_list(self):
        """Test Function to check admin gateway list"""
        response = self.client.get("/admin/dialer_gateway/gateway/")
        self.assertEqual(response.status_code, 200)

    def test_admin_gateway_view_add(self):
        """Test Function to check admin gateway add"""
        response = self.client.get("/admin/dialer_gateway/gateway/add/")
        self.assertEqual(response.status_code, 200)

        response = self.client.post(
            '/admin/dialer_gateway/gateway/add/',
            data={
                "status": "1",
                "name": "Default_Gateway",
                "gateway_codecs": "PCMA,PCMU",
                "gateway_timeouts": "10,10",
                "gateway_retries": "2,1",
                "gateways": "user/,user",
            }, follow=True)
        self.assertEqual(response.status_code, 200)


class GatewayModel(TestCase):
    """Test Gateway model"""

    def setUp(self):
        self.gateway = Gateway(
            name='test gateway',
            status=2,
            removeprefix='94'
        )
        self.gateway.set_name("MyGateway")
        self.gateway.save()
        self.assertEqual(self.gateway.__unicode__(), u'MyGateway')

        response = prepare_phonenumber('9897525414', '91', '+', self.gateway.status)
        self.assertEqual(response, False)

        response = prepare_phonenumber('', '91', '+', self.gateway.status)
        self.assertEqual(response, False)

        response = prepare_phonenumber('+9897525414', '91', '+', self.gateway.status)
        self.assertEqual(response, False)

        self.gateway.status = 1
        self.gateway.save()
        response = prepare_phonenumber('9897525414', '91', '+', self.gateway.status)
        self.assertEqual(response, '919897525414')

    def test_name(self):
        self.assertEqual(self.gateway.name, "MyGateway")

    def teardown(self):
        self.gateway.delete()

########NEW FILE########
__FILENAME__ = urls
#
# Newfies-Dialer License
# http://www.newfies-dialer.org
#
# This Source Code Form is subject to the terms of the Mozilla Public
# License, v. 2.0. If a copy of the MPL was not distributed with this file,
# You can obtain one at http://mozilla.org/MPL/2.0/.
#
# Copyright (C) 2011-2014 Star2Billing S.L.
#
# The Initial Developer of the Original Code is
# Arezqui Belaid <info@star2billing.com>
#

from django.conf.urls import patterns


urlpatterns = patterns('dialer_gateway.views',)

########NEW FILE########
__FILENAME__ = utils
#
# Newfies-Dialer License
# http://www.newfies-dialer.org
#
# This Source Code Form is subject to the terms of the Mozilla Public
# License, v. 2.0. If a copy of the MPL was not distributed with this file,
# You can obtain one at http://mozilla.org/MPL/2.0/.
#
# Copyright (C) 2011-2014 Star2Billing S.L.
#
# The Initial Developer of the Original Code is
# Arezqui Belaid <info@star2billing.com>
#

from dialer_gateway.constants import GATEWAY_STATUS


def prepare_phonenumber(phone_number, addprefix, removeprefix, gw_status):
    """
    apply prefix modification for a given phone_number and gateway
    """
    if not phone_number:
        return False

    if gw_status != GATEWAY_STATUS.ACTIVE:
        #Gateway not Active
        return False

    if (len(removeprefix) > 0
       and phone_number.startswith(removeprefix)):
        phone_number = phone_number[len(removeprefix):]

    phone_number = addprefix + phone_number

    return phone_number

########NEW FILE########
__FILENAME__ = views
#
# Newfies-Dialer License
# http://www.newfies-dialer.org
#
# This Source Code Form is subject to the terms of the Mozilla Public
# License, v. 2.0. If a copy of the MPL was not distributed with this file,
# You can obtain one at http://mozilla.org/MPL/2.0/.
#
# Copyright (C) 2011-2014 Star2Billing S.L.
#
# The Initial Developer of the Original Code is
# Arezqui Belaid <info@star2billing.com>
#

########NEW FILE########
__FILENAME__ = admin
#
# Newfies-Dialer License
# http://www.newfies-dialer.org
#
# This Source Code Form is subject to the terms of the Mozilla Public
# License, v. 2.0. If a copy of the MPL was not distributed with this file,
# You can obtain one at http://mozilla.org/MPL/2.0/.
#
# Copyright (C) 2011-2014 Star2Billing S.L.
#
# The Initial Developer of the Original Code is
# Arezqui Belaid <info@star2billing.com>
#

from django.contrib import admin
from django.utils.translation import ugettext_lazy as _
from dialer_settings.models import DialerSetting
from django_lets_go.app_label_renamer import AppLabelRenamer
AppLabelRenamer(native_app_label=u'dialer_settings', app_label=_('Dialer Settings')).main()


# DialerSetting
class DialerSettingAdmin(admin.ModelAdmin):
    """Allows the administrator to view and modify certain attributes
    of a DialerSetting."""
    list_display = ('name', 'max_frequency', 'callmaxduration', 'maxretry',
                    'max_calltimeout', 'max_cpg', 'max_subr_cpg', 'max_contact',
                    'sms_max_frequency', 'sms_maxretry', 'sms_max_number_campaign',
                    'sms_max_number_subscriber_campaign', 'updated_date')
    # 'blacklist', 'whitelist',
    #list_filter = ['setting_group']
    search_fields = ('name', )
    ordering = ('-name', )

admin.site.register(DialerSetting, DialerSettingAdmin)

########NEW FILE########
__FILENAME__ = forms
#
# Newfies-Dialer License
# http://www.newfies-dialer.org
#
# This Source Code Form is subject to the terms of the Mozilla Public
# License, v. 2.0. If a copy of the MPL was not distributed with this file,
# You can obtain one at http://mozilla.org/MPL/2.0/.
#
# Copyright (C) 2011-2014 Star2Billing S.L.
#
# The Initial Developer of the Original Code is
# Arezqui Belaid <info@star2billing.com>
#

########NEW FILE########
__FILENAME__ = 0001_initial
# -*- coding: utf-8 -*-
import datetime
from south.db import db
from south.v2 import SchemaMigration
from django.db import models


class Migration(SchemaMigration):

    def forwards(self, orm):
        # Adding model 'DialerSetting'
        db.create_table('dialer_setting', (
            (u'id', self.gf('django.db.models.fields.AutoField')(primary_key=True)),
            ('name', self.gf('django.db.models.fields.CharField')(max_length=50, null=True)),
            ('max_frequency', self.gf('django.db.models.fields.IntegerField')(default='100', null=True, blank=True)),
            ('callmaxduration', self.gf('django.db.models.fields.IntegerField')(default='1800', null=True, blank=True)),
            ('maxretry', self.gf('django.db.models.fields.IntegerField')(default='3', null=True, blank=True)),
            ('max_calltimeout', self.gf('django.db.models.fields.IntegerField')(default='45', null=True, blank=True)),
            ('max_number_campaign', self.gf('django.db.models.fields.IntegerField')(default=100)),
            ('max_number_subscriber_campaign', self.gf('django.db.models.fields.IntegerField')(default=100000)),
            ('blacklist', self.gf('django.db.models.fields.TextField')(default='', null=True, blank=True)),
            ('whitelist', self.gf('django.db.models.fields.TextField')(default='', null=True, blank=True)),
            ('created_date', self.gf('django.db.models.fields.DateTimeField')(auto_now_add=True, blank=True)),
            ('updated_date', self.gf('django.db.models.fields.DateTimeField')(auto_now=True, blank=True)),
        ))
        db.send_create_signal(u'dialer_settings', ['DialerSetting'])


    def backwards(self, orm):
        # Deleting model 'DialerSetting'
        db.delete_table('dialer_setting')


    models = {
        u'dialer_settings.dialersetting': {
            'Meta': {'object_name': 'DialerSetting', 'db_table': "'dialer_setting'"},
            'blacklist': ('django.db.models.fields.TextField', [], {'default': "''", 'null': 'True', 'blank': 'True'}),
            'callmaxduration': ('django.db.models.fields.IntegerField', [], {'default': "'1800'", 'null': 'True', 'blank': 'True'}),
            'created_date': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            u'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'max_calltimeout': ('django.db.models.fields.IntegerField', [], {'default': "'45'", 'null': 'True', 'blank': 'True'}),
            'max_frequency': ('django.db.models.fields.IntegerField', [], {'default': "'100'", 'null': 'True', 'blank': 'True'}),
            'max_number_campaign': ('django.db.models.fields.IntegerField', [], {'default': '100'}),
            'max_number_subscriber_campaign': ('django.db.models.fields.IntegerField', [], {'default': '100000'}),
            'maxretry': ('django.db.models.fields.IntegerField', [], {'default': "'3'", 'null': 'True', 'blank': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '50', 'null': 'True'}),
            'updated_date': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'blank': 'True'}),
            'whitelist': ('django.db.models.fields.TextField', [], {'default': "''", 'null': 'True', 'blank': 'True'})
        }
    }

    complete_apps = ['dialer_settings']
########NEW FILE########
__FILENAME__ = 0002_add_max_number_contact
# -*- coding: utf-8 -*-
import datetime
from south.db import db
from south.v2 import SchemaMigration
from django.db import models


class Migration(SchemaMigration):

    def forwards(self, orm):
        # Adding field 'DialerSetting.max_number_contact'
        db.add_column('dialer_setting', 'max_number_contact',
                      self.gf('django.db.models.fields.IntegerField')(default=1000000),
                      keep_default=False)


    def backwards(self, orm):
        # Deleting field 'DialerSetting.max_number_contact'
        db.delete_column('dialer_setting', 'max_number_contact')


    models = {
        u'dialer_settings.dialersetting': {
            'Meta': {'object_name': 'DialerSetting', 'db_table': "'dialer_setting'"},
            'blacklist': ('django.db.models.fields.TextField', [], {'default': "''", 'null': 'True', 'blank': 'True'}),
            'callmaxduration': ('django.db.models.fields.IntegerField', [], {'default': "'1800'", 'null': 'True', 'blank': 'True'}),
            'created_date': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            u'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'max_calltimeout': ('django.db.models.fields.IntegerField', [], {'default': "'45'", 'null': 'True', 'blank': 'True'}),
            'max_frequency': ('django.db.models.fields.IntegerField', [], {'default': "'100'", 'null': 'True', 'blank': 'True'}),
            'max_number_campaign': ('django.db.models.fields.IntegerField', [], {'default': '100'}),
            'max_number_contact': ('django.db.models.fields.IntegerField', [], {'default': '1000000'}),
            'max_number_subscriber_campaign': ('django.db.models.fields.IntegerField', [], {'default': '100000'}),
            'maxretry': ('django.db.models.fields.IntegerField', [], {'default': "'3'", 'null': 'True', 'blank': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '50', 'null': 'True'}),
            'updated_date': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'blank': 'True'}),
            'whitelist': ('django.db.models.fields.TextField', [], {'default': "''", 'null': 'True', 'blank': 'True'})
        }
    }

    complete_apps = ['dialer_settings']
########NEW FILE########
__FILENAME__ = 0003_rename_long_fieldname
# -*- coding: utf-8 -*-
import datetime
from south.db import db
from south.v2 import SchemaMigration
from django.db import models


class Migration(SchemaMigration):

    def forwards(self, orm):
        # Deleting field 'DialerSetting.max_number_campaign'
        db.delete_column('dialer_setting', 'max_number_campaign')

        # Deleting field 'DialerSetting.max_number_subscriber_campaign'
        db.delete_column('dialer_setting', 'max_number_subscriber_campaign')

        # Deleting field 'DialerSetting.max_number_contact'
        db.delete_column('dialer_setting', 'max_number_contact')

        # Adding field 'DialerSetting.max_cpg'
        db.add_column('dialer_setting', 'max_cpg',
                      self.gf('django.db.models.fields.IntegerField')(default=100),
                      keep_default=False)

        # Adding field 'DialerSetting.max_subr_cpg'
        db.add_column('dialer_setting', 'max_subr_cpg',
                      self.gf('django.db.models.fields.IntegerField')(default=100000),
                      keep_default=False)

        # Adding field 'DialerSetting.max_contact'
        db.add_column('dialer_setting', 'max_contact',
                      self.gf('django.db.models.fields.IntegerField')(default=1000000),
                      keep_default=False)


    def backwards(self, orm):
        # Adding field 'DialerSetting.max_number_campaign'
        db.add_column('dialer_setting', 'max_number_campaign',
                      self.gf('django.db.models.fields.IntegerField')(default=100),
                      keep_default=False)

        # Adding field 'DialerSetting.max_number_subscriber_campaign'
        db.add_column('dialer_setting', 'max_number_subscriber_campaign',
                      self.gf('django.db.models.fields.IntegerField')(default=100000),
                      keep_default=False)

        # Adding field 'DialerSetting.max_number_contact'
        db.add_column('dialer_setting', 'max_number_contact',
                      self.gf('django.db.models.fields.IntegerField')(default=1000000),
                      keep_default=False)

        # Deleting field 'DialerSetting.max_cpg'
        db.delete_column('dialer_setting', 'max_cpg')

        # Deleting field 'DialerSetting.max_subr_cpg'
        db.delete_column('dialer_setting', 'max_subr_cpg')

        # Deleting field 'DialerSetting.max_contact'
        db.delete_column('dialer_setting', 'max_contact')


    models = {
        u'dialer_settings.dialersetting': {
            'Meta': {'object_name': 'DialerSetting', 'db_table': "'dialer_setting'"},
            'blacklist': ('django.db.models.fields.TextField', [], {'default': "''", 'null': 'True', 'blank': 'True'}),
            'callmaxduration': ('django.db.models.fields.IntegerField', [], {'default': "'1800'", 'null': 'True', 'blank': 'True'}),
            'created_date': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            u'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'max_calltimeout': ('django.db.models.fields.IntegerField', [], {'default': "'45'", 'null': 'True', 'blank': 'True'}),
            'max_contact': ('django.db.models.fields.IntegerField', [], {'default': '1000000'}),
            'max_cpg': ('django.db.models.fields.IntegerField', [], {'default': '100'}),
            'max_frequency': ('django.db.models.fields.IntegerField', [], {'default': "'100'", 'null': 'True', 'blank': 'True'}),
            'max_subr_cpg': ('django.db.models.fields.IntegerField', [], {'default': '100000'}),
            'maxretry': ('django.db.models.fields.IntegerField', [], {'default': "'3'", 'null': 'True', 'blank': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '50', 'null': 'True'}),
            'updated_date': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'blank': 'True'}),
            'whitelist': ('django.db.models.fields.TextField', [], {'default': "''", 'null': 'True', 'blank': 'True'})
        }
    }

    complete_apps = ['dialer_settings']
########NEW FILE########
__FILENAME__ = 0004_auto__add_field_dialersetting_sms_max_frequency__add_field_dialersetti
# -*- coding: utf-8 -*-
import datetime
from south.db import db
from south.v2 import SchemaMigration
from django.db import models


class Migration(SchemaMigration):

    def forwards(self, orm):
        # Adding field 'DialerSetting.sms_max_frequency'
        db.add_column('dialer_setting', 'sms_max_frequency',
                      self.gf('django.db.models.fields.IntegerField')(default='100', null=True, blank=True),
                      keep_default=False)

        # Adding field 'DialerSetting.sms_maxretry'
        db.add_column('dialer_setting', 'sms_maxretry',
                      self.gf('django.db.models.fields.IntegerField')(default='3', null=True, blank=True),
                      keep_default=False)

        # Adding field 'DialerSetting.sms_max_number_campaign'
        db.add_column('dialer_setting', 'sms_max_number_campaign',
                      self.gf('django.db.models.fields.IntegerField')(default=10),
                      keep_default=False)

        # Adding field 'DialerSetting.sms_max_number_subscriber_campaign'
        db.add_column('dialer_setting', 'sms_max_number_subscriber_campaign',
                      self.gf('django.db.models.fields.IntegerField')(default=10000),
                      keep_default=False)


    def backwards(self, orm):
        # Deleting field 'DialerSetting.sms_max_frequency'
        db.delete_column('dialer_setting', 'sms_max_frequency')

        # Deleting field 'DialerSetting.sms_maxretry'
        db.delete_column('dialer_setting', 'sms_maxretry')

        # Deleting field 'DialerSetting.sms_max_number_campaign'
        db.delete_column('dialer_setting', 'sms_max_number_campaign')

        # Deleting field 'DialerSetting.sms_max_number_subscriber_campaign'
        db.delete_column('dialer_setting', 'sms_max_number_subscriber_campaign')


    models = {
        u'dialer_settings.dialersetting': {
            'Meta': {'object_name': 'DialerSetting', 'db_table': "'dialer_setting'"},
            'blacklist': ('django.db.models.fields.TextField', [], {'default': "''", 'null': 'True', 'blank': 'True'}),
            'callmaxduration': ('django.db.models.fields.IntegerField', [], {'default': "'1800'", 'null': 'True', 'blank': 'True'}),
            'created_date': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            u'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'max_calltimeout': ('django.db.models.fields.IntegerField', [], {'default': "'45'", 'null': 'True', 'blank': 'True'}),
            'max_contact': ('django.db.models.fields.IntegerField', [], {'default': '1000000'}),
            'max_cpg': ('django.db.models.fields.IntegerField', [], {'default': '100'}),
            'max_frequency': ('django.db.models.fields.IntegerField', [], {'default': "'100'", 'null': 'True', 'blank': 'True'}),
            'max_subr_cpg': ('django.db.models.fields.IntegerField', [], {'default': '100000'}),
            'maxretry': ('django.db.models.fields.IntegerField', [], {'default': "'3'", 'null': 'True', 'blank': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '50', 'null': 'True'}),
            'sms_max_frequency': ('django.db.models.fields.IntegerField', [], {'default': "'100'", 'null': 'True', 'blank': 'True'}),
            'sms_max_number_campaign': ('django.db.models.fields.IntegerField', [], {'default': '10'}),
            'sms_max_number_subscriber_campaign': ('django.db.models.fields.IntegerField', [], {'default': '10000'}),
            'sms_maxretry': ('django.db.models.fields.IntegerField', [], {'default': "'3'", 'null': 'True', 'blank': 'True'}),
            'updated_date': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'blank': 'True'}),
            'whitelist': ('django.db.models.fields.TextField', [], {'default': "''", 'null': 'True', 'blank': 'True'})
        }
    }

    complete_apps = ['dialer_settings']
########NEW FILE########
__FILENAME__ = models
#
# Newfies-Dialer License
# http://www.newfies-dialer.org
#
# This Source Code Form is subject to the terms of the Mozilla Public
# License, v. 2.0. If a copy of the MPL was not distributed with this file,
# You can obtain one at http://mozilla.org/MPL/2.0/.
#
# Copyright (C) 2011-2014 Star2Billing S.L.
#
# The Initial Developer of the Original Code is
# Arezqui Belaid <info@star2billing.com>
#

from django.db import models
from django.utils.translation import ugettext_lazy as _


class DialerSetting(models.Model):
    """This defines the settings to apply to a user

    **Attributes**:

        * ``name`` - Settings name.
        * ``max_frequency`` - Max frequency, speed of the campaign.\
        This is the number of calls per minute.
        * ``callmaxduration`` - Max retries allowed
        * ``maxretry`` - Max retries allowed per user
        * ``max_calltimeout`` - Maximum number of seconds to timeout on calls
        * ``max_cpg`` - Max Number of campaigns
        * ``max_subr_cpg`` - Max Number of subscriber
        * ``blacklist`` - Used to blacklist phone numbers to be called
        * ``whitelist`` - Used to whitelist phone numbers to be called

    **Name of DB table**: dialer_setting
    """
    name = models.CharField(max_length=50, blank=False,
                            null=True, verbose_name=_("name"),
                            help_text=_("settings name"))
    #Campaign Settings
    max_frequency = models.IntegerField(default='100', blank=True,
                                        null=True, verbose_name=_("max frequency"),
                                        help_text=_("maximum calls per minute"))
    callmaxduration = models.IntegerField(default='1800', blank=True,
                                          null=True, verbose_name=_('max Call Duration'),
                                          help_text=_("maximum call duration in seconds (1800 = 30 Minutes)"))

    maxretry = models.IntegerField(default='3', blank=True, null=True,
                                   verbose_name=_('max retries'),
                                   help_text=_("maximum retries per user."))
    max_calltimeout = models.IntegerField(default='45', blank=True, null=True,
                                          verbose_name=_('timeout on call'),
                                          help_text=_("maximum call timeout in seconds"))

    max_cpg = models.IntegerField(default=100, verbose_name=_('maximum number of campaigns'),
                                  help_text=_("maximum number of campaigns"))
    max_subr_cpg = models.IntegerField(default=100000, verbose_name=_('maximum subscribers per campaign'),
                                       help_text=_("maximum subscribers per campaign. Unlimited if the value equal 0"))

    max_contact = models.IntegerField(default=1000000, verbose_name=_('maximum number of contacts'),
                                      help_text=_("maximum number of contacts per user. Unlimited if the value equal 0"))

    blacklist = models.TextField(blank=True, null=True, default='', verbose_name=_("blacklist"),
                                 help_text=_("use regular expressions to blacklist phone numbers. For example, '^[2-4][1]+' will prevent all phone numbers starting with 2,3 or 4 and followed by 1 being called."))

    whitelist = models.TextField(blank=True, null=True, default='', verbose_name=_("whitelist"),
                                 help_text=_("use regular expressions to whitelist phone numbers"))

    # SMS Campaign Settings
    sms_max_frequency = models.IntegerField(default='100', blank=True, null=True,
                                            verbose_name=_("Max frequency"),
                                            help_text=_("Maximum SMS per minute"))
    sms_maxretry = models.IntegerField(default='3', blank=True, null=True,
                                       verbose_name=_('Max Retries'),
                                       help_text=_("Maximum SMS retries per user."))
    sms_max_number_campaign = models.IntegerField(
        default=10, verbose_name=_("Max SMS campaigns"),
        help_text=_("Maximum number of SMS campaigns"))
    sms_max_number_subscriber_campaign = models.IntegerField(
        default=10000, verbose_name=_("Max subscribers of SMS campaigns"),
        help_text=_("Maximum subscribers per SMS campaign"))

    created_date = models.DateTimeField(auto_now_add=True)
    updated_date = models.DateTimeField(auto_now=True)

    def __unicode__(self):
        return '[%s] %s' % (self.id, self.name)

    class Meta:
        verbose_name = _("dialer setting")
        verbose_name_plural = _("dialer settings")
        db_table = "dialer_setting"

########NEW FILE########
__FILENAME__ = tests
#
# Newfies-Dialer License
# http://www.newfies-dialer.org
#
# This Source Code Form is subject to the terms of the Mozilla Public
# License, v. 2.0. If a copy of the MPL was not distributed with this file,
# You can obtain one at http://mozilla.org/MPL/2.0/.
#
# Copyright (C) 2011-2014 Star2Billing S.L.
#
# The Initial Developer of the Original Code is
# Arezqui Belaid <info@star2billing.com>
#

from django.test import TestCase
from dialer_settings.models import DialerSetting


class DialerSettingModel(TestCase):
    """Test DialerSetting model"""

    fixtures = ['auth_user.json']

    def setUp(self):
        self.dialer_setting = DialerSetting(
            name='test_setting',
            max_frequency=100,
            callmaxduration=1800,
            maxretry=3,
            max_calltimeout=45,
            max_cpg=10,
            max_subr_cpg=1000,
        )
        self.dialer_setting.save()

        self.assertTrue(self.dialer_setting.__unicode__())

    def test_name(self):
        self.assertEqual(self.dialer_setting.name, "test_setting")

    def teardown(self):
        self.dialer_setting.delete()

########NEW FILE########
__FILENAME__ = urls
#
# Newfies-Dialer License
# http://www.newfies-dialer.org
#
# This Source Code Form is subject to the terms of the Mozilla Public
# License, v. 2.0. If a copy of the MPL was not distributed with this file,
# You can obtain one at http://mozilla.org/MPL/2.0/.
#
# Copyright (C) 2011-2014 Star2Billing S.L.
#
# The Initial Developer of the Original Code is
# Arezqui Belaid <info@star2billing.com>
#

from django.conf.urls import patterns


urlpatterns = patterns('dialer_settings.views',)

########NEW FILE########
__FILENAME__ = views
#
# Newfies-Dialer License
# http://www.newfies-dialer.org
#
# This Source Code Form is subject to the terms of the Mozilla Public
# License, v. 2.0. If a copy of the MPL was not distributed with this file,
# You can obtain one at http://mozilla.org/MPL/2.0/.
#
# Copyright (C) 2011-2014 Star2Billing S.L.
#
# The Initial Developer of the Original Code is
# Arezqui Belaid <info@star2billing.com>
#

########NEW FILE########
__FILENAME__ = admin
#
# Newfies-Dialer License
# http://www.newfies-dialer.org
#
# This Source Code Form is subject to the terms of the Mozilla Public
# License, v. 2.0. If a copy of the MPL was not distributed with this file,
# You can obtain one at http://mozilla.org/MPL/2.0/.
#
# Copyright (C) 2011-2014 Star2Billing S.L.
#
# The Initial Developer of the Original Code is
# Arezqui Belaid <info@star2billing.com>
#

from django.contrib import admin
from django.utils.translation import ugettext_lazy as _
from dnc.models import DNC, DNCContact
from django_lets_go.app_label_renamer import AppLabelRenamer
AppLabelRenamer(native_app_label=u'dnc', app_label=_('do not call').title()).main()


class DNCAdmin(admin.ModelAdmin):
    """Allows the administrator to view and modify certain attributes
    of a Gateway."""
    list_display = ('id', 'name', 'user', 'dnc_contacts_count')
    list_display_links = ('name', )
    list_filter = ['user']
    ordering = ('id', )

admin.site.register(DNC, DNCAdmin)


class DNCContactAdmin(admin.ModelAdmin):
    """Allows the administrator to view and modify certain attributes
    of a Gateway."""
    list_display = ('id', 'dnc', 'phone_number')
    list_display_links = ('id', )
    list_filter = ['dnc', 'updated_date']
    ordering = ('id', )

admin.site.register(DNCContact, DNCContactAdmin)

########NEW FILE########
__FILENAME__ = constants
#
# Newfies-Dialer License
# http://www.newfies-dialer.org
#
# This Source Code Form is subject to the terms of the Mozilla Public
# License, v. 2.0. If a copy of the MPL was not distributed with this file,
# You can obtain one at http://mozilla.org/MPL/2.0/.
#
# Copyright (C) 2011-2014 Star2Billing S.L.
#
# The Initial Developer of the Original Code is
# Arezqui Belaid <info@star2billing.com>
#

from django.utils.translation import ugettext_lazy as _
from django_lets_go.utils import Choice


class DNC_COLUMN_NAME(Choice):
    id = _('ID')
    name = _('name')
    date = _('date')
    contacts = _('contacts')


class DNC_CONTACT_COLUMN_NAME(Choice):
    id = _('ID')
    dnc = _('dnc').upper()
    phone_number = _('phone number')
    date = _('date')

########NEW FILE########
__FILENAME__ = forms
#
# Newfies-Dialer License
# http://www.newfies-dialer.org
#
# This Source Code Form is subject to the terms of the Mozilla Public
# License, v. 2.0. If a copy of the MPL was not distributed with this file,
# You can obtain one at http://mozilla.org/MPL/2.0/.
#
# Copyright (C) 2011-2014 Star2Billing S.L.
#
# The Initial Developer of the Original Code is
# Arezqui Belaid <info@star2billing.com>
#

from django import forms
from django.forms import ModelForm, Textarea
from django.utils.translation import ugettext_lazy as _
from django.forms.util import ErrorList
from dnc.models import DNC, DNCContact
from dialer_contact.forms import FileImport
from mod_utils.forms import Exportfile

# from django.core.urlresolvers import reverse
from mod_utils.forms import SaveUserModelForm, common_submit_buttons
from crispy_forms.helper import FormHelper
from crispy_forms.layout import Layout, Fieldset, Div, HTML


class DNCListForm(SaveUserModelForm):
    """DNC List Form"""

    class Meta:
        model = DNC
        fields = ['name', 'description']
        exclude = ('user',)
        widgets = {
            'description': Textarea(attrs={'cols': 26, 'rows': 3}),
        }

    def __init__(self, *args, **kwargs):
        super(DNCListForm, self).__init__(*args, **kwargs)
        self.helper = FormHelper()
        self.helper.form_class = 'well'
        self.helper.layout = Layout(
            Div(
                Div(Fieldset('', 'name', 'description', css_class='col-md-6')),
            ),
        )
        if self.instance.id:
            common_submit_buttons(self.helper.layout, 'update')
        else:
            common_submit_buttons(self.helper.layout)


class DNCContactSearchForm(forms.Form):
    """Search Form on Contact List"""
    phone_number = forms.IntegerField(label=_('phone number').title(), required=False)
    dnc = forms.ChoiceField(label=_('Do Not Call list').title(), required=False)

    def __init__(self, user, *args, **kwargs):
        super(DNCContactSearchForm, self).__init__(*args, **kwargs)
        self.helper = FormHelper()
        self.helper.form_class = 'well'
        self.helper.layout = Layout(
            Div(
                Div('phone_number', css_class='col-md-4'),
                Div('dnc', css_class='col-md-4'),
                css_class='row'
            ),
        )
        common_submit_buttons(self.helper.layout, 'search')
        # To get user's dnc list
        if user:
            dnc_list_user = []
            dnc_list_user.append((0, '---'))
            for i in DNC.objects.values_list('id', 'name').filter(user=user).order_by('-id'):
                dnc_list_user.append((i[0], i[1]))

            self.fields['dnc'].choices = dnc_list_user


class DNCContactForm(ModelForm):
    """DNCContact ModelForm"""

    class Meta:
        model = DNCContact
        fields = ['dnc', 'phone_number']

    def __init__(self, user, *args, **kwargs):
        super(DNCContactForm, self).__init__(*args, **kwargs)
        self.helper = FormHelper()
        self.helper.form_class = 'well'
        self.helper.layout = Layout(
            Div(
                Div(Fieldset('', 'dnc', 'phone_number', css_class='col-md-6')),
            ),
        )
        common_submit_buttons(self.helper.layout, 'search')
        if user:
            self.fields['dnc'].choices = DNC.objects.values_list('id', 'name').filter(user=user).order_by('id')

        if self.instance.id:
            common_submit_buttons(self.helper.layout, 'update')
        else:
            common_submit_buttons(self.helper.layout)

    def clean_phone_number(self):
        phone_number = self.cleaned_data.get('phone_number', None)
        try:
            int(phone_number)
        except:
            msg = _('Please enter a valid phone number')
            self._errors['phone_number'] = ErrorList([msg])
            del self.cleaned_data['phone_number']
        return phone_number


def get_dnc_list(user):
    """get dnc list for ``dnc_list`` field which is used by DNCContact_fileImport
    & DNCContact_fileExport
    """
    result_list = []
    for dnc in DNC.objects.filter(user=user).order_by('id'):
        contacts_in_dnc = dnc.dnc_contacts_count()
        nbcontact = " -> %d contact(s)" % (contacts_in_dnc)
        dnc_string = dnc.name + nbcontact
        result_list.append((dnc.id, dnc_string))
    return result_list


class DNCContact_fileImport(FileImport):
    """Admin Form : Import CSV file with DNC list"""
    dnc_list = forms.ChoiceField(label=_("DNC List"), required=True, help_text=_("select DNC list"))

    def __init__(self, user, *args, **kwargs):
        super(DNCContact_fileImport, self).__init__(*args, **kwargs)
        self.helper = FormHelper()
        self.helper.form_class = 'well'
        self.helper.layout = Layout(
            Div(
                Div(Fieldset('', 'dnc_list', 'csv_file', css_class='col-md-6')),
            ),
        )
        common_submit_buttons(self.helper.layout, 'import')

        # To get user's dnc_list list
        # and not user.is_superuser
        if user:
            self.fields['dnc_list'].choices = get_dnc_list(user)
            self.fields['csv_file'].label = _('Upload CSV file')


class DNCContact_fileExport(Exportfile):
    """
    DNC Contact Export
    """
    dnc_list = forms.ChoiceField(label=_("DNC list"), required=True, help_text=_("select DNC list"))

    def __init__(self, user, *args, **kwargs):
        super(DNCContact_fileExport, self).__init__(*args, **kwargs)
        self.helper = FormHelper()
        self.helper.form_class = 'well'
        self.helper.layout = Layout(
            Div(
                Div(Fieldset('', 'dnc_list', css_class='col-md-6')),
                css_class='row'
            ),
            Div(
                Div(HTML("""
                    <b>%s : </b>
                    <div class="btn-group" data-toggle="buttons">
                        {% for choice in form.export_to.field.choices %}
                        <label class="btn btn-default">
                            <input name='{{ form.export_to.name }}' type='radio' value='{{ choice.0 }}'/> {{ choice.1 }}
                        </label>
                        {% endfor %}
                    </div>
                   """ % _('export to').capitalize()), css_class='col-md-6'),
                css_class='row'
            ),
        )
        common_submit_buttons(self.helper.layout, 'add')

        # To get user's dnc_list list
        if user:  # and not user.is_superuser
            self.fields['dnc_list'].choices = get_dnc_list(user)

########NEW FILE########
__FILENAME__ = 0001_dnc_models
# -*- coding: utf-8 -*-
from south.utils import datetime_utils as datetime
from south.db import db
from south.v2 import SchemaMigration
from django.db import models


class Migration(SchemaMigration):

    def forwards(self, orm):
        # Adding model 'DNC'
        db.create_table('dnc_list', (
            (u'id', self.gf('django.db.models.fields.AutoField')(primary_key=True)),
            ('name', self.gf('django.db.models.fields.CharField')(max_length=50, null=True)),
            ('user', self.gf('django.db.models.fields.related.ForeignKey')(related_name='DNC owner', to=orm['auth.User'])),
            ('created_date', self.gf('django.db.models.fields.DateTimeField')(auto_now_add=True, blank=True)),
            ('updated_date', self.gf('django.db.models.fields.DateTimeField')(auto_now=True, blank=True)),
        ))
        db.send_create_signal(u'dnc', ['DNC'])

        # Adding model 'DNCContact'
        db.create_table('dnc_contact', (
            (u'id', self.gf('django.db.models.fields.AutoField')(primary_key=True)),
            ('dnc', self.gf('django.db.models.fields.related.ForeignKey')(to=orm['dnc.DNC'])),
            ('phone_number', self.gf('django.db.models.fields.CharField')(max_length=120, db_index=True)),
            ('created_date', self.gf('django.db.models.fields.DateTimeField')(auto_now_add=True, blank=True)),
            ('updated_date', self.gf('django.db.models.fields.DateTimeField')(auto_now=True, blank=True)),
        ))
        db.send_create_signal(u'dnc', ['DNCContact'])


    def backwards(self, orm):
        # Deleting model 'DNC'
        db.delete_table('dnc_list')

        # Deleting model 'DNCContact'
        db.delete_table('dnc_contact')


    models = {
        u'auth.group': {
            'Meta': {'object_name': 'Group'},
            u'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '80'}),
            'permissions': ('django.db.models.fields.related.ManyToManyField', [], {'to': u"orm['auth.Permission']", 'symmetrical': 'False', 'blank': 'True'})
        },
        u'auth.permission': {
            'Meta': {'ordering': "(u'content_type__app_label', u'content_type__model', u'codename')", 'unique_together': "((u'content_type', u'codename'),)", 'object_name': 'Permission'},
            'codename': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'content_type': ('django.db.models.fields.related.ForeignKey', [], {'to': u"orm['contenttypes.ContentType']"}),
            u'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '50'})
        },
        u'auth.user': {
            'Meta': {'object_name': 'User'},
            'date_joined': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
            'email': ('django.db.models.fields.EmailField', [], {'max_length': '75', 'blank': 'True'}),
            'first_name': ('django.db.models.fields.CharField', [], {'max_length': '30', 'blank': 'True'}),
            'groups': ('django.db.models.fields.related.ManyToManyField', [], {'symmetrical': 'False', 'related_name': "u'user_set'", 'blank': 'True', 'to': u"orm['auth.Group']"}),
            u'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'is_active': ('django.db.models.fields.BooleanField', [], {'default': 'True'}),
            'is_staff': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'is_superuser': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'last_login': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
            'last_name': ('django.db.models.fields.CharField', [], {'max_length': '30', 'blank': 'True'}),
            'password': ('django.db.models.fields.CharField', [], {'max_length': '128'}),
            'user_permissions': ('django.db.models.fields.related.ManyToManyField', [], {'symmetrical': 'False', 'related_name': "u'user_set'", 'blank': 'True', 'to': u"orm['auth.Permission']"}),
            'username': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '30'})
        },
        u'contenttypes.contenttype': {
            'Meta': {'ordering': "('name',)", 'unique_together': "(('app_label', 'model'),)", 'object_name': 'ContentType', 'db_table': "'django_content_type'"},
            'app_label': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            u'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'model': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '100'})
        },
        u'dnc.dnc': {
            'Meta': {'object_name': 'DNC', 'db_table': "'dnc_list'"},
            'created_date': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            u'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '50', 'null': 'True'}),
            'updated_date': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'blank': 'True'}),
            'user': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'DNC owner'", 'to': u"orm['auth.User']"})
        },
        u'dnc.dnccontact': {
            'Meta': {'object_name': 'DNCContact', 'db_table': "'dnc_contact'"},
            'created_date': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'dnc': ('django.db.models.fields.related.ForeignKey', [], {'to': u"orm['dnc.DNC']"}),
            u'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'phone_number': ('django.db.models.fields.CharField', [], {'max_length': '120', 'db_index': 'True'}),
            'updated_date': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'blank': 'True'})
        }
    }

    complete_apps = ['dnc']
########NEW FILE########
__FILENAME__ = 0002_dnc_add_description
# -*- coding: utf-8 -*-
from south.utils import datetime_utils as datetime
from south.db import db
from south.v2 import SchemaMigration
from django.db import models


class Migration(SchemaMigration):

    def forwards(self, orm):
        # Adding field 'DNC.description'
        db.add_column('dnc_list', 'description',
                      self.gf('django.db.models.fields.TextField')(null=True, blank=True),
                      keep_default=False)


    def backwards(self, orm):
        # Deleting field 'DNC.description'
        db.delete_column('dnc_list', 'description')


    models = {
        u'auth.group': {
            'Meta': {'object_name': 'Group'},
            u'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '80'}),
            'permissions': ('django.db.models.fields.related.ManyToManyField', [], {'to': u"orm['auth.Permission']", 'symmetrical': 'False', 'blank': 'True'})
        },
        u'auth.permission': {
            'Meta': {'ordering': "(u'content_type__app_label', u'content_type__model', u'codename')", 'unique_together': "((u'content_type', u'codename'),)", 'object_name': 'Permission'},
            'codename': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'content_type': ('django.db.models.fields.related.ForeignKey', [], {'to': u"orm['contenttypes.ContentType']"}),
            u'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '50'})
        },
        u'auth.user': {
            'Meta': {'object_name': 'User'},
            'date_joined': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
            'email': ('django.db.models.fields.EmailField', [], {'max_length': '75', 'blank': 'True'}),
            'first_name': ('django.db.models.fields.CharField', [], {'max_length': '30', 'blank': 'True'}),
            'groups': ('django.db.models.fields.related.ManyToManyField', [], {'symmetrical': 'False', 'related_name': "u'user_set'", 'blank': 'True', 'to': u"orm['auth.Group']"}),
            u'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'is_active': ('django.db.models.fields.BooleanField', [], {'default': 'True'}),
            'is_staff': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'is_superuser': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'last_login': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
            'last_name': ('django.db.models.fields.CharField', [], {'max_length': '30', 'blank': 'True'}),
            'password': ('django.db.models.fields.CharField', [], {'max_length': '128'}),
            'user_permissions': ('django.db.models.fields.related.ManyToManyField', [], {'symmetrical': 'False', 'related_name': "u'user_set'", 'blank': 'True', 'to': u"orm['auth.Permission']"}),
            'username': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '30'})
        },
        u'contenttypes.contenttype': {
            'Meta': {'ordering': "('name',)", 'unique_together': "(('app_label', 'model'),)", 'object_name': 'ContentType', 'db_table': "'django_content_type'"},
            'app_label': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            u'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'model': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '100'})
        },
        u'dnc.dnc': {
            'Meta': {'object_name': 'DNC', 'db_table': "'dnc_list'"},
            'created_date': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'description': ('django.db.models.fields.TextField', [], {'null': 'True', 'blank': 'True'}),
            u'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '50', 'null': 'True'}),
            'updated_date': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'blank': 'True'}),
            'user': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'DNC owner'", 'to': u"orm['auth.User']"})
        },
        u'dnc.dnccontact': {
            'Meta': {'object_name': 'DNCContact', 'db_table': "'dnc_contact'"},
            'created_date': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'dnc': ('django.db.models.fields.related.ForeignKey', [], {'to': u"orm['dnc.DNC']"}),
            u'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'phone_number': ('django.db.models.fields.CharField', [], {'max_length': '120', 'db_index': 'True'}),
            'updated_date': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'blank': 'True'})
        }
    }

    complete_apps = ['dnc']
########NEW FILE########
__FILENAME__ = models
#
# Newfies-Dialer License
# http://www.newfies-dialer.org
#
# This Source Code Form is subject to the terms of the Mozilla Public
# License, v. 2.0. If a copy of the MPL was not distributed with this file,
# You can obtain one at http://mozilla.org/MPL/2.0/.
#
# Copyright (C) 2011-2014 Star2Billing S.L.
#
# The Initial Developer of the Original Code is
# Arezqui Belaid <info@star2billing.com>
#

from django.db import models
from django.utils.translation import ugettext_lazy as _


class DNC(models.Model):
    """This defines the Do Not Call List

    **Attributes**:

        * ``name`` - List name.

    **Relationships**:

        * ``user`` - Foreign key relationship to the User model.

    **Name of DB table**: dnc_list
    """
    name = models.CharField(max_length=50, blank=False, null=True, verbose_name=_("name"),
                            help_text=_("Enter a DNC list name"))
    description = models.TextField(null=True, blank=True, help_text=_("DNC notes"))
    user = models.ForeignKey('auth.User', related_name='DNC owner')

    created_date = models.DateTimeField(auto_now_add=True)
    updated_date = models.DateTimeField(auto_now=True)

    def __unicode__(self):
        return '[%s] %s' % (self.id, self.name)

    class Meta:
        permissions = (
            ("view_dnc", _('can see Do Not Call list')),
        )
        db_table = "dnc_list"
        verbose_name = _("Do Not Call list")
        verbose_name_plural = _("Do Not Call lists")

    def dnc_contacts_count(self):
        """This will return a count of the contacts in the dnc"""
        return DNCContact.objects.filter(dnc=self.id).count()
    dnc_contacts_count.allow_tags = True
    dnc_contacts_count.short_description = _('DNC contacts')


class DNCContact(models.Model):
    """This defines the Do Not Call Contact for each DNC List

    **Attributes**:

        * ``phone_number`` - Phone number
        * ``dnc`` - DNC List

    **Relationships**:

        * ``dnc`` - Foreign key relationship to the DNC model.

    **Name of DB table**: dnc_contact
    """
    dnc = models.ForeignKey(DNC, verbose_name=_("Do Not Call List"))
    phone_number = models.CharField(max_length=120, db_index=True, verbose_name=_("phone number"))

    created_date = models.DateTimeField(auto_now_add=True)
    updated_date = models.DateTimeField(auto_now=True,)

    def __unicode__(self):
        return '[%s] %s' % (self.id, self.phone_number)

    class Meta:
        permissions = (
            ("view_dnc_contact", _('can see Do Not Call contact')),
        )
        db_table = "dnc_contact"
        verbose_name = _("Do Not Call contact")
        verbose_name_plural = _("Do Not Call contacts")

########NEW FILE########
__FILENAME__ = tests
#
# Newfies-Dialer License
# http://www.newfies-dialer.org
#
# This Source Code Form is subject to the terms of the Mozilla Public
# License, v. 2.0. If a copy of the MPL was not distributed with this file,
# You can obtain one at http://mozilla.org/MPL/2.0/.
#
# Copyright (C) 2011-2014 Star2Billing S.L.
#
# The Initial Developer of the Original Code is
# Arezqui Belaid <info@star2billing.com>
#

from django.test import TestCase
from django.contrib.auth.models import User
from django.conf import settings
from dnc.models import DNC, DNCContact
from dnc.views import dnc_add, dnc_change, dnc_list, dnc_del,\
    dnc_contact_list, dnc_contact_add, dnc_contact_change, \
    dnc_contact_del, get_dnc_contact_count, dnc_contact_import
from dnc.forms import DNCListForm, DNCContactForm, DNCContactSearchForm,\
    DNCContact_fileImport
from django_lets_go.utils import BaseAuthenticatedClient
"""
import os

csv_file = open(
    os.path.abspath('../../newfies-dialer/newfies/') + '/dnc/fixtures/import_dnc_contact_10.txt', 'r'
)
new_file = open(
    os.path.abspath('../../newfies-dialer/newfies/') + '/dialer_audio/fixtures/testcase_audio.mp3', 'r'
)
"""
csv_file = open(
    settings.APPLICATION_DIR + '/dnc/fixtures/import_dnc_contact_10.txt', 'r'
)
new_file = open(
    settings.APPLICATION_DIR + '/dialer_audio/fixtures/testcase_audio.mp3', 'r'
)


class DNCAdminView(BaseAuthenticatedClient):
    """
    Test cases for DNC list, DNC Contact Admin Interface.
    """

    def test_admin_dnc_view_list(self):
        """Test Function to check admin dnc list"""
        response = self.client.get("/admin/dnc/dnc/")
        self.failUnlessEqual(response.status_code, 200)

    def test_admin_dnc_view_add(self):
        """Test Function to check admin dnc add"""
        response = self.client.get("/admin/dnc/dnc/add/")
        self.assertEqual(response.status_code, 200)

        response = self.client.post(
            '/admin/dnc/dnc/add/',
            data={'name': 'test_dnc', 'user': '1'},
            follow=True)
        self.assertEqual(response.status_code, 200)

    def test_admin_dnc_contact_view_list(self):
        """Test Function to check admin dnc contact list"""
        response = self.client.get("/admin/dnc/dnccontact/")
        self.failUnlessEqual(response.status_code, 200)

    def test_admin_dnc_contact_view_add(self):
        """Test Function to check admin dnc contact add"""
        response = self.client.get("/admin/dnc/dnccontact/add/")
        self.assertEqual(response.status_code, 200)

        response = self.client.post(
            '/admin/dnc/dnccontact/add/',
            data={'dnc_id': '1', 'phone_number': '1234'})
        self.assertEqual(response.status_code, 200)


class DNCCustomerView(BaseAuthenticatedClient):
    """Test cases for DNC list & DNC contact
       Customer Interface.
    """

    fixtures = ['auth_user.json', 'dnc_list.json', 'dnc_contact.json']

    def test_dnc_view_list(self):
        """Test Function to check dnc list"""
        response = self.client.get('/module/dnc_list/')
        self.assertTemplateUsed(response, 'dnc/dnc_list/list.html')

        request = self.factory.get('/module/dnc_list/')
        request.user = self.user
        request.session = {}
        response = dnc_list(request)
        self.assertEqual(response.status_code, 200)

    def test_dnc_view_add(self):
        """Test Function to check add dnc"""
        request = self.factory.post('/module/dnc_list/add/', data={
            'name': 'My DNC'}, follow=True)
        request.user = self.user
        request.session = {}
        response = dnc_add(request)
        self.assertEqual(response.status_code, 302)

        resp = self.client.post('/module/dnc_list/add/', data={'name': ''})
        self.assertEqual(resp.status_code, 200)
        self.assertEqual(resp.context['form']['name'].errors,
                         [u'This field is required.'])

    def test_dnc_view_update(self):
        """Test Function to check update dnc"""
        response = self.client.get('/module/dnc_list/1/')
        self.assertEqual(response.status_code, 200)
        self.assertTemplateUsed(response, 'dnc/dnc_list/change.html')

        request = self.factory.post('/module/dnc_list/1/',
            data={'name': 'Default_DNC'}, follow=True)
        request.user = self.user
        request.session = {}
        response = dnc_change(request, 1)
        self.assertEqual(response.status_code, 302)

        # delete dnc through dnc_change
        request = self.factory.post('/module/dnc_list/1/',
                                    data={'delete': True}, follow=True)
        request.user = self.user
        request.session = {}
        response = dnc_change(request, 1)
        self.assertEqual(response.status_code, 200)

    def test_dnc_view_delete(self):
        """Test Function to check delete dnc"""
        request = self.factory.post('/module/dnc_list/del/1/')
        request.user = self.user
        request.session = {}
        response = dnc_del(request, 1)
        self.assertEqual(response.status_code, 302)

        request = self.factory.post('/module/dnc_list/del/', {'select': '1'})
        request.user = self.user
        request.session = {}
        response = dnc_del(request, 0)
        self.assertEqual(response.status_code, 302)

    def test_dnc_contact_view_list(self):
        """Test Function to check DNC Contact list"""
        response = self.client.get('/module/dnc_contact/')
        self.assertTrue(response.context['form'], DNCContactSearchForm(self.user))
        self.assertEqual(response.status_code, 200)
        self.assertTemplateUsed(response, 'dnc/dnc_contact/list.html')

        request = self.factory.post('/module/dnc_contact/',
                                    data={'phone_number': '123'})
        request.user = self.user
        request.session = {}
        response = dnc_contact_list(request)
        self.assertEqual(response.status_code, 200)

    def test_dnc_contact_view_add(self):
        """Test Function to check add DNC Contact"""
        response = self.client.get('/module/dnc_contact/add/')
        self.assertEqual(response.context['action'], 'add')
        self.assertEqual(response.status_code, 200)
        response = self.client.post('/module/dnc_contact/add/',
                                    data={'dnc_id': '1', 'phone_number': '1234'})
        self.assertEqual(response.status_code, 200)

        request = self.factory.get('/module/dnc_contact/add/')
        request.user = self.user
        request.session = {}
        response = dnc_contact_add(request)
        self.assertEqual(response.status_code, 200)

        response = self.client.post('/module/dnc_contact/add/',
                                    data={'phone_number': '1234'})
        self.assertEqual(response.status_code, 200)

    def test_dnc_contact_view_update(self):
        """Test Function to check update DNC Contact"""
        response = self.client.get('/module/dnc_contact/1/')
        self.assertTrue(response.context['form'], DNCContactForm(self.user))
        self.assertEqual(response.context['action'], 'update')
        self.assertTemplateUsed(response, 'dnc/dnc_contact/change.html')

        request = self.factory.post('/module/dnc_contact/1/',
            {'dnc': '1', 'phone_number': '154'})
        request.user = self.user
        request.session = {}
        response = dnc_contact_change(request, 1)
        self.assertEqual(response.status_code, 302)

        # delete contact through dnc_contact_change
        request = self.factory.post('/module/dnc_contact/1/',
                                    data={'delete': True}, follow=True)
        request.user = self.user
        request.session = {}
        response = dnc_contact_change(request, 1)
        self.assertEqual(response.status_code, 200)

    def test_dnc_contact_view_delete(self):
        """Test Function to check delete dnc contact"""
        request = self.factory.get('/module/dnc_contact/del/1/')
        request.user = self.user
        request.session = {}
        response = dnc_contact_del(request, 1)
        self.assertEqual(response.status_code, 302)

        request = self.factory.post('/module/dnc_contact/del/', {'select': '1'})
        request.user = self.user
        request.session = {}
        response = dnc_contact_del(request, 0)
        self.assertEqual(response['Location'], '/module/dnc_contact/')
        self.assertEqual(response.status_code, 302)

    def test_dnc_contact_view_import(self):
        """Test Function to check import dnc Contact"""
        response = self.client.get('/module/dnc_contact_import/')
        self.assertTrue(response.context['form'],
                        DNCContact_fileImport(self.user))
        self.assertEqual(response.status_code, 200)
        self.assertTemplateUsed(response,
                                'dnc/dnc_contact/import_dnc_contact.html')

        response = self.client.post('/module/dnc_contact_import/',
                                    data={'dnc_list': '1',
                                          'csv_file': csv_file})
        self.assertEqual(response.status_code, 200)

        response = self.client.post('/module/dnc_contact_import/',
                                    data={'dnc_list': '1',
                                          'csv_file': new_file})
        self.assertEqual(response.status_code, 200)

        request = self.factory.get('/module/dnc_contact_import/')
        request.user = self.user
        request.session = {}
        response = dnc_contact_import(request)
        self.assertEqual(response.status_code, 200)

    def test_get_dnc_contact_count(self):
        request = self.factory.get('/module/dnc_contact/', {'ids': '1'})
        request.user = self.user
        request.session = {}
        response = get_dnc_contact_count(request)
        self.assertEqual(response.status_code, 200)


class DNCModel(TestCase):
    """
    Test DNC model
    """

    fixtures = ['auth_user.json']

    def setUp(self):
        self.user = User.objects.get(username='admin')
        self.dnc = DNC(
            name='test_dnc',
            user=self.user
        )
        self.dnc.save()

        self.assertTrue(self.dnc.__unicode__())
        self.dnc_contact = DNCContact(
            dnc=self.dnc,
            phone_number='123456'
        )
        self.dnc_contact.save()

        self.assertTrue(self.dnc_contact.__unicode__())

    def test_dnc_form(self):
        self.assertEqual(self.dnc.name, 'test_dnc')
        form = DNCListForm({'name': 'sample_dnc'})
        form.save(user=self.user)

        form = DNCListForm(instance=self.dnc)
        self.assertTrue(isinstance(form.instance, DNC))

    def test_dnc_contact_form(self):
        self.assertEqual(self.dnc_contact.dnc, self.dnc)
        form = DNCContactForm(self.user)
        form.phone_number = '123456'
        obj = form.save(commit=False)
        obj.dnc = self.dnc
        obj.save()

        form = DNCContactForm(self.user, instance=self.dnc_contact)
        self.assertTrue(isinstance(form.instance, DNCContact))

    def test_name(self):
        self.assertEqual(self.dnc.name, "test_dnc")
        self.assertEqual(self.dnc_contact.phone_number, "123456")

    def teardown(self):
        self.dnc.delete()
        self.dnc_contact.delete()

########NEW FILE########
__FILENAME__ = urls
#
# Newfies-Dialer License
# http://www.newfies-dialer.org
#
# This Source Code Form is subject to the terms of the Mozilla Public
# License, v. 2.0. If a copy of the MPL was not distributed with this file,
# You can obtain one at http://mozilla.org/MPL/2.0/.
#
# Copyright (C) 2011-2014 Star2Billing S.L.
#
# The Initial Developer of the Original Code is
# Arezqui Belaid <info@star2billing.com>
#

from django.conf.urls import patterns


urlpatterns = patterns('dnc.views',
    # DNC urls
    (r'^module/dnc_list/$', 'dnc_list'),
    (r'^module/dnc_list/add/$', 'dnc_add'),
    (r'^module/dnc_list/contact_count/$', 'get_dnc_contact_count'),
    (r'^module/dnc_list/del/(.+)/$', 'dnc_del'),
    (r'^module/dnc_list/(.+)/$', 'dnc_change'),

    # DNC Contacts urls
    (r'^module/dnc_contact/$', 'dnc_contact_list'),
    (r'^module/dnc_contact/add/$', 'dnc_contact_add'),
    (r'^module/dnc_contact_import/$', 'dnc_contact_import'),
    (r'^module/dnc_contact/export/$', 'dnc_contact_export'),
    (r'^module/dnc_contact/export_view/$', 'dnc_contact_export_view'),
    (r'^module/dnc_contact/del/(.+)/$', 'dnc_contact_del'),
    (r'^module/dnc_contact/(.+)/$', 'dnc_contact_change'),
)

########NEW FILE########
__FILENAME__ = views
#
# Newfies-Dialer License
# http://www.newfies-dialer.org
#
# This Source Code Form is subject to the terms of the Mozilla Public
# License, v. 2.0. If a copy of the MPL was not distributed with this file,
# You can obtain one at http://mozilla.org/MPL/2.0/.
#
# Copyright (C) 2011-2014 Star2Billing S.L.
#
# The Initial Developer of the Original Code is
# Arezqui Belaid <info@star2billing.com>
#
from django.contrib.auth.decorators import login_required, permission_required
from django.http import HttpResponseRedirect, HttpResponse, Http404
from django.shortcuts import render_to_response, get_object_or_404
from django.template.context import RequestContext
from django.utils.translation import ugettext as _
from dnc.models import DNC, DNCContact
from dnc.forms import DNCListForm, DNCContactSearchForm, DNCContactForm,\
    DNCContact_fileImport, DNCContact_fileExport
from dnc.constants import DNC_COLUMN_NAME, DNC_CONTACT_COLUMN_NAME
from django_lets_go.common_functions import get_pagination_vars, striplist, source_desti_field_chk,\
    getvar
from mod_utils.helper import Export_choice
import tablib
import csv

dnc_list_redirect_url = '/module/dnc_list/'
dnc_contact_redirect_url = '/module/dnc_contact/'


@permission_required('dnc.view_dnc', login_url='/')
@login_required
def dnc_list(request):
    """DNC list for the logged in user

    **Attributes**:

        * ``template`` - dnc/dnc_list/list.html

    **Logic Description**:

        * List all dnc which belong to the logged in user.
    """
    sort_col_field_list = ['id', 'name', 'updated_date']
    pag_vars = get_pagination_vars(request, sort_col_field_list, default_sort_field='id')
    dnc_list = DNC.objects.filter(user=request.user).order_by(pag_vars['sort_order'])
    data = {
        'msg': request.session.get('msg'),
        'dnc_list': dnc_list,
        'total_dnc': dnc_list.count(),
        'DNC_COLUMN_NAME': DNC_COLUMN_NAME,
        'col_name_with_order': pag_vars['col_name_with_order'],
    }
    request.session['msg'] = ''
    request.session['error_msg'] = ''
    return render_to_response('dnc/dnc_list/list.html', data, context_instance=RequestContext(request))


@permission_required('dnc.add_dnc', login_url='/')
@login_required
def dnc_add(request):
    """Add new DNC for the logged in user

    **Attributes**:

        * ``form`` - DNCListForm
        * ``template`` - dnc/dnc_list/change.html

    **Logic Description**:

        * Add a new DNC which will belong to the logged in user
          via the DNCListForm & get redirected to the dnc list
    """
    form = DNCListForm(request.POST or None)
    if form.is_valid():
        form.save(user=request.user)
        request.session["msg"] = _('"%(name)s" added.') % {'name': request.POST['name']}
        return HttpResponseRedirect(dnc_list_redirect_url)
    data = {
        'form': form,
        'action': 'add',
    }
    return render_to_response('dnc/dnc_list/change.html', data, context_instance=RequestContext(request))


@login_required
def get_dnc_contact_count(request):
    """To get total no of dnc contacts belonging to a dnc list"""
    values = request.GET.getlist('ids')
    values = ", ".join(["%s" % el for el in values])
    contact_count = DNCContact.objects.filter(dnc__user=request.user).extra(where=['dnc_id IN (%s)' % values]).count()
    return HttpResponse(contact_count)


@permission_required('dnc.delete_dnc', login_url='/')
@login_required
def dnc_del(request, object_id):
    """Delete a DNC for a logged in user

    **Attributes**:

        * ``object_id`` - Selected DNC object
        * ``object_list`` - Selected DNC objects

    **Logic Description**:

        * Delete contacts from a contact list belonging to a DNC list.
        * Delete the selected the selected DNC list
    """
    if int(object_id) != 0:
        # When object_id is not 0
        dnc = get_object_or_404(DNC, pk=object_id, user=request.user)

        # 1) delete all contacts belonging to a dnc
        dnc_contact_list = DNCContact.objects.filter(dnc=dnc)
        dnc_contact_list.delete()

        # 2) delete dnc
        request.session["msg"] = _('"%(name)s" is deleted.') % {'name': dnc.name}
        dnc.delete()
    else:
        # When object_id is 0 (Multiple records delete)
        values = request.POST.getlist('select')
        values = ", ".join(["%s" % el for el in values])
        try:
            # 1) delete all dnc contacts belonging to a dnc list
            dnc_contact_list = DNCContact.objects.filter(dnc__user=request.user)\
                .extra(where=['dnc_id IN (%s)' % values])
            if dnc_contact_list:
                dnc_contact_list.delete()

            # 2) delete dnc
            dnc_list = DNC.objects.filter(user=request.user).extra(where=['id IN (%s)' % values])
            if dnc_list:
                request.session["msg"] = _('%(count)s DNC list(s) are deleted.') % {'count': dnc_list.count()}
                dnc_list.delete()
        except:
            raise Http404

    return HttpResponseRedirect(dnc_list_redirect_url)


@permission_required('dnc.change_dnc', login_url='/')
@login_required
def dnc_change(request, object_id):
    """Update/Delete DNC for the logged in user

    **Attributes**:

        * ``object_id`` - Selected dnc object
        * ``form`` - DNCListForm
        * ``template`` - dnc/dnc_list/change.html

    **Logic Description**:

        * Update/delete selected dnc from the dnc list
          via DNCListForm & get redirected to dnc list
    """
    dnc = get_object_or_404(DNC, pk=object_id, user=request.user)
    form = DNCListForm(request.POST or None, instance=dnc)
    if form.is_valid():
        if request.POST.get('delete'):
            dnc_del(request, object_id)
            return HttpResponseRedirect(dnc_list_redirect_url)
        else:
            form.save()
            request.session["msg"] = _('"%(name)s" is updated.') % {'name': request.POST['name']}
            return HttpResponseRedirect(dnc_list_redirect_url)
    data = {
        'form': form,
        'action': 'update',
    }
    return render_to_response('dnc/dnc_list/change.html', data, context_instance=RequestContext(request))


@permission_required('dnc.view_dnc_contact', login_url='/')
@login_required
def dnc_contact_list(request):
    """DNC Contact list for the logged in user

    **Attributes**:

        * ``template`` - dnc/dnc_contact/list.html
        * ``form`` - ContactSearchForm

    **Logic Description**:

        * List all dnc contacts from dnc lists belonging to the logged in user
    """
    sort_col_field_list = ['id', 'dnc', 'phone_number', 'updated_date']
    pag_vars = get_pagination_vars(request, sort_col_field_list, default_sort_field='id')
    form = DNCContactSearchForm(request.user, request.POST or None)
    dnc_id_list = DNC.objects.values_list('id', flat=True).filter(user=request.user)
    phone_number = ''
    dnc = ''
    post_var_with_page = 0
    if form.is_valid():
        request.session['session_phone_number'] = ''
        request.session['session_dnc'] = ''
        post_var_with_page = 1
        phone_number = getvar(request, 'phone_number', setsession=True)
        dnc = getvar(request, 'dnc', setsession=True)

    if request.GET.get('page') or request.GET.get('sort_by'):
        post_var_with_page = 1
        phone_number = request.session.get('session_phone_number')
        dnc = request.session.get('session_dnc')
        form = DNCContactSearchForm(request.user, initial={'phone_number': phone_number, 'dnc': dnc})

    if post_var_with_page == 0:
        # default
        # unset session var
        request.session['session_phone_number'] = ''
        request.session['session_dnc'] = ''

    kwargs = {'dnc__in': dnc_id_list}
    if dnc and dnc != '0':
        kwargs['dnc_id'] = dnc

    phone_number_type = '1'
    phone_number = source_desti_field_chk(phone_number, phone_number_type, 'phone_number')
    for i in phone_number:
        kwargs[i] = phone_number[i]

    phone_number_list = []
    all_phone_number_list = []
    phone_number_count = 0

    if dnc_id_list:
        all_phone_number_list = DNCContact.objects.values(
            'id', 'dnc__name', 'phone_number', 'updated_date').filter(**kwargs).order_by(pag_vars['sort_order'])

        phone_number_list = all_phone_number_list[pag_vars['start_page']:pag_vars['end_page']]
        phone_number_count = all_phone_number_list.count()

    data = {
        'phone_number_list': phone_number_list,
        'all_phone_number_list': all_phone_number_list,
        'total_phone_numbers': phone_number_count,
        'DNC_CONTACT_COLUMN_NAME': DNC_CONTACT_COLUMN_NAME,
        'col_name_with_order': pag_vars['col_name_with_order'],
        'msg': request.session.get('msg'),
        'error_msg': request.session.get('error_msg'),
        'form': form,
    }
    request.session['msg'] = ''
    request.session['error_msg'] = ''
    return render_to_response('dnc/dnc_contact/list.html', data, context_instance=RequestContext(request))


@permission_required('dnc.add_dnccontact', login_url='/')
@login_required
def dnc_contact_add(request):
    """Add a new dnc contact into the selected dnc for the logged in user

    **Attributes**:

        * ``form`` - DNCContactForm
        * ``template`` - dnc/dnc_contact/change.html

    **Logic Description**:

        * Add new dnc contact belonging to the logged in user
          via DNCContactForm & get redirected to the contact list
    """
    form = DNCContactForm(request.user, request.POST or None)
    # Add dnc contact
    if form.is_valid():
        form.save()
        request.session["msg"] = _('"%(name)s" added.') % {'name': request.POST['phone_number']}
        return HttpResponseRedirect(dnc_contact_redirect_url)
    data = {
        'form': form,
        'action': 'add',
    }
    return render_to_response('dnc/dnc_contact/change.html', data, context_instance=RequestContext(request))


@permission_required('dnc.delete_dnccontact', login_url='/')
@login_required
def dnc_contact_del(request, object_id):
    """Delete dnc contact for the logged in user

    **Attributes**:

        * ``object_id`` - Selected dnc contact object
        * ``object_list`` - Selected dnc contact objects

    **Logic Description**:

        * Delete selected dnc contact from the dnc contact list
    """
    if int(object_id) != 0:
        # When object_id is not 0
        dnc_contact = get_object_or_404(DNCContact, pk=object_id, dnc__user=request.user)

        # Delete dnc contact
        request.session["msg"] = _('"%(name)s" is deleted.') % {'name': dnc_contact.phone_number}
        dnc_contact.delete()
    else:
        # When object_id is 0 (Multiple records delete)
        values = request.POST.getlist('select')
        values = ", ".join(["%s" % el for el in values])

        try:
            dnc_contact_list = DNCContact.objects.extra(where=['id IN (%s)' % values])
            if dnc_contact_list:
                request.session["msg"] = _('%(count)s contact(s) are deleted.') % {'count': dnc_contact_list.count()}
                dnc_contact_list.delete()
        except:
            raise Http404
    return HttpResponseRedirect(dnc_contact_redirect_url)


@permission_required('dnc.change_dnccontact', login_url='/')
@login_required
def dnc_contact_change(request, object_id):
    """Update/Delete dnc contact for the logged in user

    **Attributes**:

        * ``object_id`` - Selected dnc contact object
        * ``form`` - DNCContactForm
        * ``template`` - dnc/dnc_contact/change.html

    **Logic Description**:

        * Update/delete selected dnc contact from the dnc contact list
          via DNCContactForm & get redirected to the dnc contact list
    """
    dnc_contact = get_object_or_404(DNCContact, pk=object_id, dnc__user=request.user)
    form = DNCContactForm(request.user, request.POST or None, instance=dnc_contact)
    if form.is_valid():
        # Delete dnc contact
        if request.POST.get('delete'):
            dnc_contact_del(request, object_id)
            return HttpResponseRedirect(dnc_contact_redirect_url)
        else:
            # Update dnc contact
            form.save()
            request.session["msg"] = _('"%(name)s" is updated.') % {'name': request.POST['phone_number']}
            return HttpResponseRedirect(dnc_contact_redirect_url)

    data = {
        'form': form,
        'action': 'update',
    }
    return render_to_response('dnc/dnc_contact/change.html', data, context_instance=RequestContext(request))


@login_required
def dnc_contact_import(request):
    """Import CSV file of DNC Contacts for the logged in user

    **Attributes**:

        * ``form`` - DNCContact_fileImport
        * ``template`` - dnc/dnc_contact/import_contact.html

    **Logic Description**:

        * Add new dnc contacts which will belong to the logged in user
          via csv file & get the result (upload success and failure
          statistics)

    **Important variable**:

        * total_rows - Total no. of records in the CSV file
        * retail_record_count - No. of records imported from the CSV file
    """
    form = DNCContact_fileImport(request.user, request.POST or None, request.FILES or None)
    csv_data = ''
    msg = ''
    error_msg = ''
    success_import_list = []
    type_error_import_list = []
    contact_cnt = 0
    dup_contact_cnt = 0
    bulk_record = []

    if form.is_valid():
        # col_no - field name
        #  0     - contact
        # To count total rows of CSV file
        #Get DNC Obj
        dnc = get_object_or_404(DNC, pk=request.POST['dnc_list'], user=request.user)

        records = csv.reader(request.FILES['csv_file'])
        total_rows = len(list(records))
        BULK_SIZE = 1000
        csv_data = csv.reader(request.FILES['csv_file'])

        #Read each Row
        for row in csv_data:
            row = striplist(row)
            if not row or str(row[0]) == 0:
                continue

            #Check field type
            try:
                int(row[0])
            except ValueError:
                error_msg = _("Some of the imported data was invalid!")
                type_error_import_list.append(row)
                continue

            bulk_record.append(
                DNCContact(
                    dnc_id=dnc.id,
                    phone_number=row[0])
            )
            contact_cnt = contact_cnt + 1
            if contact_cnt < 100:
                #We want to display only 100 lines of the success import
                success_import_list.append(row)

            if contact_cnt % BULK_SIZE == 0:
                #Bulk insert
                DNCContact.objects.bulk_create(bulk_record)
                bulk_record = []

        if bulk_record:
            #Remaining record
            DNCContact.objects.bulk_create(bulk_record)
            bulk_record = []

    #check if there is contact imported
    if contact_cnt > 0:
        msg = _('%(contact_cnt)s DNC contact(s) have been uploaded successfully out of %(total_rows)s row(s)!') \
            % {'contact_cnt': contact_cnt,
               'total_rows': total_rows}

    if dup_contact_cnt > 0:
        error_msg = _('Duplicate DNC contact(s) %(dup_contact_cnt)s are not inserted!!') \
            % {'dup_contact_cnt': dup_contact_cnt}

    data = RequestContext(request, {
        'form': form,
        'msg': msg,
        'error_msg': error_msg,
        'success_import_list': success_import_list,
        'type_error_import_list': type_error_import_list,
    })
    return render_to_response('dnc/dnc_contact/import_dnc_contact.html', data, context_instance=RequestContext(request))


@login_required
def dnc_contact_export(request):
    """Export CSV file of DNC contact"""
    format_type = request.GET['format']
    dnc_list_id = ''
    if request.GET.get('dnc_list_id'):
        dnc_list_id = request.GET.get('dnc_list_id')

    # get the response object, this can be used as a stream.
    response = HttpResponse(mimetype='text/%s' % format_type)
    # force download.
    response['Content-Disposition'] = 'attachment;filename=export.%s' % format_type

    headers = ('phone_number',)

    if dnc_list_id:
        dnc_contact = DNCContact.objects.filter(dnc_id=dnc_list_id)
    else:
        dnc_contact = DNCContact.objects.filter(dnc__user=request.user)

    list_val = []
    for i in dnc_contact:
        list_val.append((i.phone_number,))

    data = tablib.Dataset(*list_val, headers=headers)

    if format_type == Export_choice.XLS:
        response.write(data.xls)
    elif format_type == Export_choice.CSV:
        response.write(data.csv)
    elif format_type == Export_choice.JSON:
        response.write(data.json)

    return response


@login_required
def dnc_contact_export_view(request):
    """Export CSV file of dnc contact form view

    **Attributes**:

        * ``form`` - DNCContact_fileExport
        * ``template`` - dnc/dnc_contact/export_dnc_contact.html

    **Logic Description**:

        * DNC contacts export form will be redirected to ``/dnc_contact/export/`` view
          with format & dnc_list_id parameters
    """
    form = DNCContact_fileExport(request.user, request.POST or None, initial={'export_to': Export_choice.CSV})
    if form.is_valid():
        dnc_list_id = request.POST['dnc_list']
        export_to = request.POST['export_to']
        return HttpResponseRedirect(dnc_contact_redirect_url + 'export/?format=' + export_to + '&dnc_list_id=' + dnc_list_id)

    template = 'dnc/dnc_contact/export_dnc_contact.html'
    data = {
        'form': form,
        'action': 'update',
    }
    return render_to_response(template, data,
                              context_instance=RequestContext(request))

########NEW FILE########
__FILENAME__ = constants
#
# Newfies-Dialer License
# http://www.newfies-dialer.org
#
# This Source Code Form is subject to the terms of the Mozilla Public
# License, v. 2.0. If a copy of the MPL was not distributed with this file,
# You can obtain one at http://mozilla.org/MPL/2.0/.
#
# Copyright (C) 2011-2014 Star2Billing S.L.
#
# The Initial Developer of the Original Code is
# Arezqui Belaid <info@star2billing.com>
#

from django.utils.translation import ugettext_lazy as _
from django_lets_go.utils import Choice


class SEARCH_TYPE(Choice):
    A_Last_30_days = 1, _('last 30 days').capitalize()
    B_Last_7_days = 2, _('last 7 days').capitalize()
    C_Yesterday = 3, _('yesterday').capitalize()
    D_Last_24_hours = 4, _('last 24 hours').capitalize()
    E_Last_12_hours = 5, _('last 12 hours').capitalize()
    F_Last_6_hours = 6, _('last 6 hours').capitalize()
    G_Last_hour = 7, _('last hour').capitalize()


# Disposition color
COLOR_DISPOSITION = {
    'ANSWER': '#42CD2C',
    'NOANSWER': '#0A9289',
    'BUSY': '#4DBCE9',
    'CANCEL': '#E08022',
    'CONGESTION': '#AF0415',
    'FAILED': '#DE2213'
}

########NEW FILE########
__FILENAME__ = forms
#
# Newfies-Dialer License
# http://www.newfies-dialer.org
#
# This Source Code Form is subject to the terms of the Mozilla Public
# License, v. 2.0. If a copy of the MPL was not distributed with this file,
# You can obtain one at http://mozilla.org/MPL/2.0/.
#
# Copyright (C) 2011-2014 Star2Billing S.L.
#
# The Initial Developer of the Original Code is
# Arezqui Belaid <info@star2billing.com>
#
from django import forms
from django.utils.translation import ugettext_lazy as _
from dialer_campaign.models import Campaign
from frontend.constants import SEARCH_TYPE
from crispy_forms.helper import FormHelper
from crispy_forms.layout import Layout, Div, Submit, HTML
from crispy_forms.bootstrap import FormActions


class LoginForm(forms.Form):
    """Client Login Form"""
    user = forms.CharField(max_length=30, label=_('username'), required=True)
    user.widget.attrs['placeholder'] = _('Username')
    password = forms.CharField(max_length=30, label=_('password'), required=True, widget=forms.PasswordInput())
    password.widget.attrs['placeholder'] = _('Password')

    def __init__(self, *args, **kwargs):
        super(LoginForm, self).__init__(*args, **kwargs)
        self.helper = FormHelper()
        self.helper.form_action = '/login/'
        self.helper.form_show_labels = False
        self.helper.form_class = 'form-inline well'
        self.helper.layout = Layout(
            Div(
                Div('user', css_class='col-xs-3'),
                Div('password', css_class='col-xs-3'),
            ),
            FormActions(
                Submit('submit', 'Login'),
                HTML('<a class="btn btn-warning" href="/password_reset/">%s?</a>' % _('forgot password').capitalize()),
            ),
        )


class DashboardForm(forms.Form):
    """Dashboard Form"""
    campaign = forms.ChoiceField(label=_('campaign'), required=False)
    search_type = forms.ChoiceField(label=_('type'), required=False, choices=list(SEARCH_TYPE),
                                    initial=SEARCH_TYPE.D_Last_24_hours)

    def __init__(self, user, *args, **kwargs):
        super(DashboardForm, self).__init__(*args, **kwargs)
        self.helper = FormHelper()
        self.helper.form_show_labels = False
        self.helper.form_class = 'well form-inline text-right'
        self.helper.layout = Layout(
            Div(
                Div('campaign', css_class='form-group'),
                Div('search_type', css_class='form-group'),
                Div(Submit('submit', _('Search')), css_class='form-group'),
            ),
        )

        # To get user's running campaign list
        if user:
            campaign_choices = [(0, _('Select campaign'))]
            for cp in Campaign.objects.filter(user=user).order_by('-id'):
                campaign_choices.append((cp.id, unicode(cp.name)))

            self.fields['campaign'].choices = campaign_choices

########NEW FILE########
__FILENAME__ = function_def
#
# Newfies-Dialer License
# http://www.newfies-dialer.org
#
# This Source Code Form is subject to the terms of the Mozilla Public
# License, v. 2.0. If a copy of the MPL was not distributed with this file,
# You can obtain one at http://mozilla.org/MPL/2.0/.
#
# Copyright (C) 2011-2014 Star2Billing S.L.
#
# The Initial Developer of the Original Code is
# Arezqui Belaid <info@star2billing.com>
#

from django.utils.timezone import utc
from frontend.forms import SEARCH_TYPE
from dateutil.relativedelta import relativedelta
from datetime import datetime


def calculate_date(search_type):
    """calculate date"""
    end_date = datetime.today().replace(tzinfo=utc)
    search_type = int(search_type)

    # Last 30 days
    if search_type == SEARCH_TYPE.A_Last_30_days:
        start_date = end_date + relativedelta(days=-int(30))

    # Last 7 days
    if search_type == SEARCH_TYPE.B_Last_7_days:
        start_date = end_date + relativedelta(days=-int(7))

    # Yesterday
    if search_type == SEARCH_TYPE.C_Yesterday:
        start_date = end_date + relativedelta(days=-int(1),
            hour=0, minute=0, second=0)

    # Last 24 hours
    if search_type == SEARCH_TYPE.D_Last_24_hours:
        start_date = end_date + relativedelta(hours=-int(24))

    # Last 12 hours
    if search_type == SEARCH_TYPE.E_Last_12_hours:
        start_date = end_date + relativedelta(hours=-int(12))

    # Last 6 hours
    if search_type == SEARCH_TYPE.F_Last_6_hours:
        start_date = end_date + relativedelta(hours=-int(6))

    # Last hour
    if search_type == SEARCH_TYPE.G_Last_hour:
        start_date = end_date + relativedelta(hours=-int(1))

    return start_date.replace(tzinfo=utc)

########NEW FILE########
__FILENAME__ = models
#
# Newfies-Dialer License
# http://www.newfies-dialer.org
#
# This Source Code Form is subject to the terms of the Mozilla Public
# License, v. 2.0. If a copy of the MPL was not distributed with this file,
# You can obtain one at http://mozilla.org/MPL/2.0/.
#
# Copyright (C) 2011-2014 Star2Billing S.L.
#
# The Initial Developer of the Original Code is
# Arezqui Belaid <info@star2billing.com>
#

########NEW FILE########
__FILENAME__ = tests
#
# Newfies-Dialer License
# http://www.newfies-dialer.org
#
# This Source Code Form is subject to the terms of the Mozilla Public
# License, v. 2.0. If a copy of the MPL was not distributed with this file,
# You can obtain one at http://mozilla.org/MPL/2.0/.
#
# Copyright (C) 2011-2014 Star2Billing S.L.
#
# The Initial Developer of the Original Code is
# Arezqui Belaid <info@star2billing.com>
#

from django.core.management import call_command
from django_lets_go.utils import BaseAuthenticatedClient
from frontend.forms import LoginForm, DashboardForm
from frontend.views import customer_dashboard, index, \
    login_view, logout_view
from frontend.constants import SEARCH_TYPE
from newfies_dialer.urls import custom_404_view, custom_500_view


class FrontendView(BaseAuthenticatedClient):
    """Test cases for Newfies-Dialer Admin Interface."""

    def test_admin(self):
        """Test Function to check Admin index page"""
        response = self.client.get('/admin/')
        self.failUnlessEqual(response.status_code, 200)
        self.assertTemplateUsed(response, 'admin/base_site.html')
        response = self.client.login(username=self.user.username,
                                     password='admin')
        self.assertEqual(response, True)


class FrontendCustomerView(BaseAuthenticatedClient):
    """Test cases for Newfies-Dialer Customer Interface."""

    fixtures = ['auth_user.json', 'gateway.json', 'dialer_setting.json',
                'user_profile.json', 'phonebook.json', 'contact.json',
                'survey.json', 'dnc_list.json', 'dnc_contact.json',
                'campaign.json', 'subscriber.json', 'callrequest.json',
                'voipcall.json']

    def test_a_mgt_command(self):
        # Test mgt command
        call_command("create_callrequest_cdr", "1|100")

    def test_login_view(self):
        """Test Function to check login view"""
        response = self.client.post('/login/',
                {'user': 'admin',
                 'password': 'admin'}, follow=True)
        self.assertEqual(response.status_code, 200)

        request = self.factory.post('/login/',
                {'user': 'admin',
                 'password': 'admin'}, follow=True)
        request.user = self.user
        request.session = self.client.session
        response = login_view(request)
        self.assertEqual(response.status_code, 302)

        request = self.factory.post('/login/',
                {'user': '', 'password': ''}, follow=True)
        request.user = self.user
        request.session = self.client.session
        response = login_view(request)
        self.assertEqual(response.status_code, 200)

        request = self.factory.post('/login/',
                {'user': 'admin', 'password': 'admin123'}, follow=True)
        request.user = self.user
        request.session = self.client.session
        response = login_view(request)
        self.assertEqual(response.status_code, 200)

    def test_pleaselog(self):
        """Test Function to check pleaselog view"""
        response = self.client.get('/pleaselog/')
        self.assertTemplateUsed(response, 'frontend/index.html')
        self.assertEqual(response.status_code, 200)

    def test_index(self):
        """Test Function to check customer index page"""
        response = self.client.get('/')
        self.assertTrue(response.context['loginform'], LoginForm())
        self.assertEqual(response.status_code, 200)
        self.assertTemplateUsed(response, 'frontend/index.html')

        request = self.factory.get('/')
        request.user = self.user
        request.session = {}
        response = index(request)
        self.assertEqual(response.status_code, 200)

    def test_dashboard(self):
        """Test Function to check customer dashboard"""
        response = self.client.get('/dashboard/')
        self.assertTrue(response.context['form'], DashboardForm(self.user))
        self.assertEqual(response.status_code, 200)
        self.assertTemplateUsed(response, 'frontend/dashboard.html')

        request = self.factory.post('/dashboard/',
                {'campaign': '1',
                 'search_type': SEARCH_TYPE.A_Last_30_days})

        request.user = self.user
        request.session = {}
        response = customer_dashboard(request)
        self.assertEqual(response.status_code, 200)

        request = self.factory.post('/dashboard/',
                {'campaign': '1',
                 'search_type': SEARCH_TYPE.B_Last_7_days})

        request.user = self.user
        request.session = {}
        response = customer_dashboard(request)
        self.assertEqual(response.status_code, 200)

        request = self.factory.post('/dashboard/',
                {'campaign': '1',
                 'search_type': SEARCH_TYPE.C_Yesterday})

        request.user = self.user
        request.session = {}
        response = customer_dashboard(request)
        self.assertEqual(response.status_code, 200)

        request = self.factory.post('/dashboard/',
                {'campaign': '1',
                 'search_type': SEARCH_TYPE.D_Last_24_hours})

        request.user = self.user
        request.session = {}
        response = customer_dashboard(request)
        self.assertEqual(response.status_code, 200)

        request = self.factory.post('/dashboard/',
                {'campaign': '1',
                 'search_type': SEARCH_TYPE.E_Last_12_hours})

        request.user = self.user
        request.session = {}
        response = customer_dashboard(request)
        self.assertEqual(response.status_code, 200)

        request = self.factory.post('/dashboard/',
                {'campaign': '1',
                 'search_type': SEARCH_TYPE.F_Last_6_hours})

        request.user = self.user
        request.session = {}
        response = customer_dashboard(request)
        self.assertEqual(response.status_code, 200)

        request = self.factory.post('/dashboard/',
                {'campaign': '1',
                 'search_type': SEARCH_TYPE.G_Last_hour})

        request.user = self.user
        request.session = {}
        response = customer_dashboard(request)
        self.assertEqual(response.status_code, 200)
        response = customer_dashboard(request, on_index='yes')

    def test_logout_view(self):
        """Test Function to check logout view"""
        response = self.client.post('/logout/', follow=True)
        self.assertEqual(response.status_code, 200)

        request = self.factory.post('/logout/', follow=True)
        request.user = self.user
        request.session = self.client.session
        request.LANGUAGE_CODE = 'en'
        response = logout_view(request)
        self.assertEqual(response.status_code, 302)

    def test_custom_404_view(self):
        request = self.factory.post('/logout/')
        request.user = self.user
        request.session = {}
        response = custom_404_view(request)
        self.assertEqual(response.status_code, 500)

    def test_custom_500_view(self):
        """Test Function to check 500_view"""
        request = self.factory.post('/xyz/')
        request.user = self.user
        request.session = {}
        response = custom_500_view(request)
        self.assertEqual(response.status_code, 500)

########NEW FILE########
__FILENAME__ = urls
#
# Newfies-Dialer License
# http://www.newfies-dialer.org
#
# This Source Code Form is subject to the terms of the Mozilla Public
# License, v. 2.0. If a copy of the MPL was not distributed with this file,
# You can obtain one at http://mozilla.org/MPL/2.0/.
#
# Copyright (C) 2011-2014 Star2Billing S.L.
#
# The Initial Developer of the Original Code is
# Arezqui Belaid <info@star2billing.com>
#
from django.conf.urls import patterns


urlpatterns = patterns('frontend.views',
    (r'^$', 'index'),
    (r'^login/$', 'login_view'),
    (r'^logout/$', 'logout_view'),
    (r'^index/$', 'index'),
    (r'^pleaselog/$', 'pleaselog'),
    (r'^dashboard/$', 'customer_dashboard'),
)

########NEW FILE########
__FILENAME__ = views
#
# Newfies-Dialer License
# http://www.newfies-dialer.org
#
# This Source Code Form is subject to the terms of the Mozilla Public
# License, v. 2.0. If a copy of the MPL was not distributed with this file,
# You can obtain one at http://mozilla.org/MPL/2.0/.
#
# Copyright (C) 2011-2014 Star2Billing S.L.
#
# The Initial Developer of the Original Code is
# Arezqui Belaid <info@star2billing.com>
#

from django.contrib.auth import authenticate, login, logout
from django.contrib.auth.decorators import login_required,\
    permission_required
from django.http import HttpResponseRedirect
from django.shortcuts import render_to_response
from django.db.models import Sum, Avg, Count
from django.conf import settings
from django.template.context import RequestContext
from django.utils.translation import ugettext as _
from dialer_contact.models import Contact
from dialer_contact.constants import CONTACT_STATUS
from dialer_campaign.models import Campaign, Subscriber
from dialer_campaign.function_def import date_range
from dialer_cdr.models import VoIPCall
from dialer_cdr.constants import VOIPCALL_DISPOSITION
from frontend.forms import LoginForm, DashboardForm
from frontend.function_def import calculate_date
from frontend.constants import COLOR_DISPOSITION, SEARCH_TYPE
from django_lets_go.common_functions import percentage
from datetime import datetime
from django.utils.timezone import utc
from dateutil.relativedelta import relativedelta
import time
import logging


def logout_view(request):
    try:
        del request.session['has_notified']
    except KeyError:
        pass

    logout(request)
    # set language cookie
    response = HttpResponseRedirect('/')
    response.set_cookie(settings.LANGUAGE_COOKIE_NAME, request.LANGUAGE_CODE)
    return response


def login_view(request):
    """Check User credentials

    **Attributes**:

        * ``form`` - LoginForm
        * ``template`` - frontend/index.html

    **Logic Description**:

        * Submitted user credentials need to be checked. If it is not valid
          then the system will redirect to the login page.
        * If submitted user credentials are valid then system will redirect to
          the dashboard.
    """
    errorlogin = ''
    loginform = LoginForm(request.POST or None)
    if loginform.is_valid():
        cd = loginform.cleaned_data
        user = authenticate(username=cd['user'], password=cd['password'])
        if user is not None:
            if user.is_active:
                login(request, user)
                request.session['has_notified'] = False
                # Redirect to a success page (dashboard).
                return HttpResponseRedirect('/dashboard/')
            else:
                # Return a 'disabled account' error message
                errorlogin = _('disabled account')
        else:
            # Return an 'invalid login' error message.
            errorlogin = _('invalid login.')
    else:
        # Return an 'Valid User Credentials' error message.
        errorlogin = _('enter valid user credentials.')

    data = {
        'loginform': loginform,
        'errorlogin': errorlogin,
        'is_authenticated': request.user.is_authenticated(),
    }

    return render_to_response('frontend/index.html', data, context_instance=RequestContext(request))


def index(request):
    """Index view of the Customer Interface

    **Attributes**:

        * ``form`` - LoginForm
        * ``template`` - frontend/index.html
    """
    data = {
        'user': request.user,
        'loginform': LoginForm(),
        'errorlogin': '',
    }
    return render_to_response('frontend/index.html', data, context_instance=RequestContext(request))


def pleaselog(request):
    data = {
        'loginform': LoginForm(),
        'notlogged': True,
    }
    return render_to_response('frontend/index.html', data, context_instance=RequestContext(request))


@permission_required('dialer_campaign.view_dashboard', login_url='/')
@login_required
def customer_dashboard(request, on_index=None):
    """Customer dashboard gives the following information

        * Total Campaigns contacts
        * Amount of contact reached today
        * Disposition of calls via pie chart
        * Call records & Duration of calls are shown on graph by days/hours

    **Attributes**:

        * ``template`` - frontend/dashboard.html
        * ``form`` - DashboardForm
    """
    logging.debug('Start Dashboard')
    # All campaign for logged in User
    campaign_id_list = Campaign.objects.values_list('id', flat=True).filter(user=request.user).order_by('id')

    # Contacts count which are active and belong to those phonebook(s) which is
    # associated with all campaign
    pb_active_contact_count = Contact.objects\
        .filter(phonebook__campaign__in=campaign_id_list, status=CONTACT_STATUS.ACTIVE).count()

    form = DashboardForm(request.user, request.POST or None)
    logging.debug('Got Campaign list')

    total_record = dict()
    total_duration_sum = 0
    total_call_count = 0
    total_answered = 0
    total_not_answered = 0
    total_busy = 0
    total_cancel = 0
    total_congestion = 0
    total_failed = 0
    search_type = SEARCH_TYPE.D_Last_24_hours  # default Last 24 hours
    selected_campaign = ''

    if campaign_id_list:
        selected_campaign = campaign_id_list[0]  # default campaign id

    # selected_campaign should not be empty
    if selected_campaign:
        if form.is_valid():
            selected_campaign = request.POST['campaign']
            search_type = request.POST['search_type']

        end_date = datetime.utcnow().replace(tzinfo=utc)
        start_date = calculate_date(search_type)

        # date_length is used to do group by starting_date
        if int(search_type) >= SEARCH_TYPE.B_Last_7_days:  # all options except 30 days
            date_length = 13
            if int(search_type) == SEARCH_TYPE.C_Yesterday:  # yesterday
                tday = datetime.utcnow().replace(tzinfo=utc)
                start_date = datetime(tday.year, tday.month, tday.day,
                    0, 0, 0, 0).replace(tzinfo=utc) - relativedelta(days=1)
                end_date = datetime(tday.year, tday.month, tday.day,
                    23, 59, 59, 999999).replace(tzinfo=utc) - relativedelta(days=1)
            if int(search_type) >= SEARCH_TYPE.E_Last_12_hours:
                date_length = 16
        else:
            date_length = 10  # Last 30 days option

        select_data = {
            "starting_date": "SUBSTR(CAST(starting_date as CHAR(30)),1,%s)" % str(date_length)
        }

        # This calls list is used by pie chart
        calls = VoIPCall.objects\
            .filter(callrequest__campaign=selected_campaign,
                    duration__isnull=False,
                    user=request.user,
                    starting_date__range=(start_date, end_date))\
            .extra(select=select_data)\
            .values('starting_date', 'disposition')\
            .annotate(Count('starting_date'))\
            .order_by('starting_date')

        logging.debug('Aggregate VoIPCall')

        for i in calls:
            total_call_count += i['starting_date__count']
            if (i['disposition'] == VOIPCALL_DISPOSITION.ANSWER
               or i['disposition'] == 'NORMAL_CLEARING'):
                total_answered += i['starting_date__count']
            elif (i['disposition'] == VOIPCALL_DISPOSITION.BUSY
               or i['disposition'] == 'USER_BUSY'):
                total_busy += i['starting_date__count']
            elif (i['disposition'] == VOIPCALL_DISPOSITION.NOANSWER
               or i['disposition'] == 'NO_ANSWER'):
                total_not_answered += i['starting_date__count']
            elif (i['disposition'] == VOIPCALL_DISPOSITION.CANCEL
               or i['disposition'] == 'ORIGINATOR_CANCEL'):
                total_cancel += i['starting_date__count']
            elif (i['disposition'] == VOIPCALL_DISPOSITION.CONGESTION
               or i['disposition'] == 'NORMAL_CIRCUIT_CONGESTION'):
                total_congestion += i['starting_date__count']
            else:
                #VOIP CALL FAILED
                total_failed += i['starting_date__count']

        # following calls list is without disposition & group by call date
        calls = VoIPCall.objects\
            .filter(callrequest__campaign=selected_campaign,
                    duration__isnull=False,
                    user=request.user,
                    starting_date__range=(start_date, end_date))\
            .extra(select=select_data)\
            .values('starting_date').annotate(Sum('duration'))\
            .annotate(Avg('duration'))\
            .annotate(Count('starting_date'))\
            .order_by('starting_date')

        logging.debug('Aggregate VoIPCall (2)')

        mintime = start_date
        maxtime = end_date
        calls_dict = {}
        calls_dict_with_min = {}

        for data in calls:
            if int(search_type) >= SEARCH_TYPE.B_Last_7_days:
                ctime = datetime(int(data['starting_date'][0:4]),
                                 int(data['starting_date'][5:7]),
                                 int(data['starting_date'][8:10]),
                                 int(data['starting_date'][11:13]),
                                 0,
                                 0,
                                 0).replace(tzinfo=utc)
                if int(search_type) >= SEARCH_TYPE.E_Last_12_hours:
                    ctime = datetime(int(data['starting_date'][0:4]),
                                     int(data['starting_date'][5:7]),
                                     int(data['starting_date'][8:10]),
                                     int(data['starting_date'][11:13]),
                                     int(data['starting_date'][14:16]),
                                     0,
                                     0).replace(tzinfo=utc)
            else:
                ctime = datetime(int(data['starting_date'][0:4]),
                                 int(data['starting_date'][5:7]),
                                 int(data['starting_date'][8:10]),
                                 0,
                                 0,
                                 0,
                                 0).replace(tzinfo=utc)
            if ctime > maxtime:
                maxtime = ctime
            elif ctime < mintime:
                mintime = ctime

            # all options except 30 days
            if int(search_type) >= SEARCH_TYPE.B_Last_7_days:
                calls_dict[int(ctime.strftime("%Y%m%d%H"))] =\
                    {
                        'call_count': data['starting_date__count'],
                        'duration_sum': data['duration__sum'],
                        'duration_avg': float(data['duration__avg']),
                    }

                calls_dict_with_min[int(ctime.strftime("%Y%m%d%H%M"))] =\
                    {
                        'call_count': data['starting_date__count'],
                        'duration_sum': data['duration__sum'],
                        'duration_avg': float(data['duration__avg']),
                    }
            else:
                # Last 30 days option
                calls_dict[int(ctime.strftime("%Y%m%d"))] =\
                    {
                        'call_count': data['starting_date__count'],
                        'duration_sum': data['duration__sum'],
                        'duration_avg': float(data['duration__avg']),
                    }

        logging.debug('After Call Loops')

        dateList = date_range(mintime, maxtime, q=search_type)

        for date in dateList:
            inttime = int(date.strftime("%Y%m%d"))

            # last 7 days | yesterday | last 24 hrs
            if int(search_type) == SEARCH_TYPE.B_Last_7_days \
                or int(search_type) == SEARCH_TYPE.C_Yesterday \
                    or int(search_type) == SEARCH_TYPE.D_Last_24_hours:

                for option in range(0, 24):
                    day_time = int(str(inttime) + str(option).zfill(2))

                    graph_day = datetime(int(date.strftime("%Y")),
                                         int(date.strftime("%m")),
                                         int(date.strftime("%d")),
                                         int(str(option).zfill(2))).replace(tzinfo=utc)

                    dt = int(1000 * time.mktime(graph_day.timetuple()))
                    total_record[dt] = {
                        'call_count': 0,
                        'duration_sum': 0,
                        'duration_avg': 0.0,
                    }

                    if day_time in calls_dict.keys():
                        total_record[dt]['call_count'] += calls_dict[day_time]['call_count']
                        total_record[dt]['duration_sum'] += calls_dict[day_time]['duration_sum']
                        total_record[dt]['duration_avg'] += float(calls_dict[day_time]['duration_avg'])

            # last 12 hrs | last 6 hrs | last 1 hrs
            elif (int(search_type) == SEARCH_TYPE.E_Last_12_hours
                 or int(search_type) == SEARCH_TYPE.F_Last_6_hours
                 or int(search_type) == SEARCH_TYPE.G_Last_hour):

                for hour in range(0, 24):
                    for minute in range(0, 60):
                        hr_time = int(str(inttime) + str(hour).zfill(2) + str(minute).zfill(2))

                        graph_day = datetime(int(date.strftime("%Y")),
                                             int(date.strftime("%m")),
                                             int(date.strftime("%d")),
                                             int(str(hour).zfill(2)),
                                             int(str(minute).zfill(2))).replace(tzinfo=utc)

                        dt = int(1000 * time.mktime(graph_day.timetuple()))
                        total_record[dt] = {
                            'call_count': 0,
                            'duration_sum': 0,
                            'duration_avg': 0.0,
                        }

                        if hr_time in calls_dict_with_min.keys():
                            total_record[dt]['call_count'] += calls_dict_with_min[hr_time]['call_count']
                            total_record[dt]['duration_sum'] += calls_dict_with_min[hr_time]['duration_sum']
                            total_record[dt]['duration_avg'] += float(calls_dict_with_min[hr_time]['duration_avg'])
            else:
                # Last 30 days option
                graph_day = datetime(int(date.strftime("%Y")),
                                     int(date.strftime("%m")),
                                     int(date.strftime("%d"))).replace(tzinfo=utc)
                dt = int(1000 * time.mktime(graph_day.timetuple()))
                total_record[dt] = {
                    'call_count': 0,
                    'duration_sum': 0,
                    'duration_avg': 0,
                }
                if inttime in calls_dict.keys():
                    total_record[dt]['call_count'] += calls_dict[inttime]['call_count']
                    total_record[dt]['duration_sum'] += calls_dict[inttime]['duration_sum']
                    total_record[dt]['duration_avg'] += float(calls_dict[inttime]['duration_avg'])

    logging.debug('After dateList Loops')

    # sorting on date col
    total_record = total_record.items()
    total_record = sorted(total_record, key=lambda k: k[0])

    # lineplusbarwithfocuschart
    final_charttype = "linePlusBarWithFocusChart"
    xdata = []
    ydata = []
    ydata2 = []
    for i in total_record:
        xdata.append(i[0])
        ydata.append(i[1]['call_count'])
        ydata2.append(i[1]['duration_sum'])

    tooltip_date = "%d %b %y %H:%M %p"
    kwargs1 = {}
    kwargs1['bar'] = True
    extra_serie1 = {"tooltip": {"y_start": "", "y_end": " calls"}, "date_format": tooltip_date}
    extra_serie2 = {"tooltip": {"y_start": "", "y_end": " sec"}, "date_format": tooltip_date}

    final_chartdata = {
        'x': xdata,
        'name1': 'Calls', 'y1': ydata, 'extra1': extra_serie1, 'kwargs1': kwargs1,
        'name2': 'Duration', 'y2': ydata2, 'extra2': extra_serie2,
    }

    # Contacts which are successfully called for running campaign
    reached_contact = 0
    if campaign_id_list:
        tday = datetime.utcnow().replace(tzinfo=utc)
        start_date = datetime(tday.year, tday.month, tday.day, 0, 0, 0, 0).replace(tzinfo=utc)
        end_date = datetime(tday.year, tday.month, tday.day, 23, 59, 59, 999999).replace(tzinfo=utc)
        reached_contact = Subscriber.objects\
            .filter(campaign_id__in=campaign_id_list,  # status=5,
                    updated_date__range=(start_date, end_date))\
            .count()

    # PieChart
    hangup_analytic_charttype = "pieChart"
    xdata = []
    ydata = []
    hangup_analytic_chartdata = {'x': xdata, 'y1': ydata}
    if total_call_count != 0:
        for i in VOIPCALL_DISPOSITION:
            xdata.append(i[0])

        # Y-axis order depend upon VOIPCALL_DISPOSITION
        # 'ANSWER', 'BUSY', 'CANCEL', 'CONGESTION', 'FAILED', 'NOANSWER'
        ydata = [percentage(total_answered, total_call_count),
                 percentage(total_busy, total_call_count),
                 percentage(total_cancel, total_call_count),
                 percentage(total_congestion, total_call_count),
                 percentage(total_failed, total_call_count),
                 percentage(total_not_answered, total_call_count)]

        color_list = [
            COLOR_DISPOSITION['ANSWER'],
            COLOR_DISPOSITION['BUSY'],
            COLOR_DISPOSITION['CANCEL'],
            COLOR_DISPOSITION['CONGESTION'],
            COLOR_DISPOSITION['FAILED'],
            COLOR_DISPOSITION['NOANSWER'],
        ]

        extra_serie = {"tooltip": {"y_start": "", "y_end": " %"},
                       "color_list": color_list}
        hangup_analytic_chartdata = {'x': xdata, 'y1': ydata, 'extra1': extra_serie}

    data = {
        'form': form,
        'campaign_phonebook_active_contact_count': pb_active_contact_count,
        'reached_contact': reached_contact,
        'total_duration_sum': total_duration_sum,
        'total_call_count': total_call_count,
        'total_answered': total_answered,
        'total_not_answered': total_not_answered,
        'total_busy': total_busy,
        'total_cancel': total_cancel,
        'total_congestion': total_congestion,
        'total_failed': total_failed,
        'answered_color': COLOR_DISPOSITION['ANSWER'],
        'busy_color': COLOR_DISPOSITION['BUSY'],
        'not_answered_color': COLOR_DISPOSITION['NOANSWER'],
        'cancel_color': COLOR_DISPOSITION['CANCEL'],
        'congestion_color': COLOR_DISPOSITION['CONGESTION'],
        'failed_color': COLOR_DISPOSITION['FAILED'],
        'VOIPCALL_DISPOSITION': VOIPCALL_DISPOSITION,
        'hangup_analytic_chartdata': hangup_analytic_chartdata,
        'hangup_analytic_charttype': hangup_analytic_charttype,
        'hangup_chartcontainer': 'piechart_container',
        'hangup_extra': {
            'x_is_date': False,
            'x_axis_format': '',
            'tag_script_js': True,
            'jquery_on_ready': True,
        },
        'final_chartdata': final_chartdata,
        'final_charttype': final_charttype,
        'final_chartcontainer': 'lineplusbarwithfocuschart_container',
        'final_extra': {
            'x_is_date': True,
            'x_axis_format': '%d %b %Y',
            'tag_script_js': True,
            'jquery_on_ready': True,
            'resize': True,
        }
    }
    if on_index == 'yes':
        return data
    return render_to_response('frontend/dashboard.html', data, context_instance=RequestContext(request))

########NEW FILE########
__FILENAME__ = manage
#!/usr/bin/env python
import os
import sys

if __name__ == "__main__":
    os.environ.setdefault("DJANGO_SETTINGS_MODULE", "newfies_dialer.settings")

    from django.core.management import execute_from_command_line

    execute_from_command_line(sys.argv)

########NEW FILE########
__FILENAME__ = admin
#
# Newfies-Dialer License
# http://www.newfies-dialer.org
#
# This Source Code Form is subject to the terms of the Mozilla Public
# License, v. 2.0. If a copy of the MPL was not distributed with this file,
# You can obtain one at http://mozilla.org/MPL/2.0/.
#
# Copyright (C) 2011-2014 Star2Billing S.L.
#
# The Initial Developer of the Original Code is
# Arezqui Belaid <info@star2billing.com>
#

from django.contrib import admin
# from django.utils.translation import ugettext as _
from mod_mailer.models import MailTemplate, MailSpooler


class MailTemplateAdmin(admin.ModelAdmin):
    list_display = ('id', 'template_key', 'label', 'from_email', 'from_name', 'subject', 'created_date')
    list_display_links = ['id', 'template_key']

admin.site.register(MailTemplate, MailTemplateAdmin)


#MailSpooler
class MailSpoolerAdmin(admin.ModelAdmin):
    list_display = ('id', 'mailtemplate', 'contact_email', 'mailspooler_type', 'created_date')
    list_display_links = ['id', 'mailtemplate']
    #raw_id_fields = ('contact',)

admin.site.register(MailSpooler, MailSpoolerAdmin)

########NEW FILE########
__FILENAME__ = constants
#
# Newfies-Dialer License
# http://www.newfies-dialer.org
#
# This Source Code Form is subject to the terms of the Mozilla Public
# License, v. 2.0. If a copy of the MPL was not distributed with this file,
# You can obtain one at http://mozilla.org/MPL/2.0/.
#
# Copyright (C) 2011-2014 Star2Billing S.L.
#
# The Initial Developer of the Original Code is
# Arezqui Belaid <info@star2billing.com>
#

from django.utils.translation import ugettext_lazy as _
from django_lets_go.utils import Choice


class MAILSPOOLER_TYPE(Choice):
    PENDING = 1, _('pending').upper()
    SENT = 2, _('sent').upper()
    FAILURE = 3, _('failure').upper()
    IN_PROCESS = 4, _('in_process').upper()

########NEW FILE########
__FILENAME__ = forms
#
# Newfies-Dialer License
# http://www.newfies-dialer.org
#
# This Source Code Form is subject to the terms of the Mozilla Public
# License, v. 2.0. If a copy of the MPL was not distributed with this file,
# You can obtain one at http://mozilla.org/MPL/2.0/.
#
# Copyright (C) 2011-2014 Star2Billing S.L.
#
# The Initial Developer of the Original Code is
# Arezqui Belaid <info@star2billing.com>
#

# place form definition here

########NEW FILE########
__FILENAME__ = models
#
# Newfies-Dialer License
# http://www.newfies-dialer.org
#
# This Source Code Form is subject to the terms of the Mozilla Public
# License, v. 2.0. If a copy of the MPL was not distributed with this file,
# You can obtain one at http://mozilla.org/MPL/2.0/.
#
# Copyright (C) 2011-2014 Star2Billing S.L.
#
# The Initial Developer of the Original Code is
# Arezqui Belaid <info@star2billing.com>
#
from django.db import models
from django.utils.translation import ugettext as _
from django.utils.encoding import force_unicode
from mailer import send_html_mail
#from user_profile.models import User
from mod_mailer.constants import MAILSPOOLER_TYPE
from dialer_contact.models import Contact


class MailTemplate(models.Model):
    """
    This table store the Mail Template
    """
    label = models.CharField(max_length=75, verbose_name=_('label'),
                             help_text=_('mail template name'))
    template_key = models.CharField(max_length=30, unique=True, verbose_name=_('template key'),
                                    help_text=_('unique name used to pick some template for recurring action, such as activation or warning'))
    from_email = models.EmailField(max_length=75, verbose_name=_('from_email'),
                                   help_text=_('sender email'))
    from_name = models.CharField(max_length=75, verbose_name=_('from_name'),
                                 help_text=_('sender name'))
    subject = models.CharField(max_length=200, verbose_name=_('subject'),
                               help_text=_('email subject'))
    message_plaintext = models.TextField(max_length=5000, verbose_name=_('message plaintext'),
                                         help_text=_('plain text version of the email'))
    message_html = models.TextField(max_length=5000, verbose_name=_('message_html'),
                                    help_text=_('HTML version of the Email'))
    created_date = models.DateTimeField(auto_now_add=True)

    class Meta:
        verbose_name = _('Mail template')
        verbose_name_plural = _('Mail templates')

    def __unicode__(self):
        return force_unicode(self.template_key)


class MailSpooler(models.Model):
    """
    This table store the Mail Spooler
    """
    mailtemplate = models.ForeignKey(MailTemplate, verbose_name=_('mail template'))
    contact_email = models.EmailField(verbose_name=_('contact email'))
    created_date = models.DateTimeField(auto_now_add=True)
    parameter = models.CharField(max_length=1000,
                                 verbose_name=_('parameter'), blank=True, null=True)
    mailspooler_type = models.IntegerField(choices=list(MAILSPOOLER_TYPE),
                                           blank=True, null=True, verbose_name=_("type"),
                                           default=MAILSPOOLER_TYPE.PENDING)

    class Meta:
        verbose_name = _('mail spooler')

    def __unicode__(self):
        return force_unicode(self.id)


def send_email_template(template_key, target_user, ctxt):
    """
    Send email via mail backend
    """
    try:
        mailtemplate = MailTemplate.objects.get(template_key=template_key)
    except:
        #No Mail Template
        return False

    message_plaintext = mailtemplate.message_plaintext
    message_html = mailtemplate.message_html

    # Replace tags
    for ctag in ctxt:
        mtag = '%' + ctag + '%'
        vtag = ctxt[ctag]
        message_plaintext = message_plaintext.replace(mtag, vtag.encode('utf-8'))
        message_html = message_html.replace(mtag, vtag.encode('utf-8'))

    send_html_mail(
        mailtemplate.subject,
        message_plaintext,
        message_html,
        mailtemplate.from_email,
        [target_user.email],
        headers={'From': '%s <%s>' % (mailtemplate.from_name, mailtemplate.from_email)},
    )
    #new_mailspooler = MailSpooler(mailtemplate=mailtemplate, user=target_user)
    #new_mailspooler.save()

########NEW FILE########
__FILENAME__ = tasks
#
# Newfies-Dialer License
# http://www.newfies-dialer.org
#
# This Source Code Form is subject to the terms of the Mozilla Public
# License, v. 2.0. If a copy of the MPL was not distributed with this file,
# You can obtain one at http://mozilla.org/MPL/2.0/.
#
# Copyright (C) 2011-2014 Star2Billing S.L.
#
# The Initial Developer of the Original Code is
# Arezqui Belaid <info@star2billing.com>
#

from django.conf import settings
from celery.decorators import task, periodic_task
from celery.task import PeriodicTask
from celery.utils.log import get_task_logger
from django_lets_go.only_one_task import only_one
from mod_mailer.models import MailSpooler, MailTemplate
from mod_mailer.constants import MAILSPOOLER_TYPE
from mailer.engine import send_all
from mailer.models import Message
from mailer import send_html_mail
from datetime import timedelta


LOCK_EXPIRE = 60 * 5  # Lock expires in 5 minutes

logger = get_task_logger(__name__)


# allow a sysadmin to pause the sending of mail temporarily.
PAUSE_SEND = getattr(settings, "MAILER_PAUSE_SEND", False)


@task()
def sendmail_task(current_mail_id):
    """
    Task to send Mail
    """
    logger.info("TASK :: sendmail_task")

    current_mailspooler = MailSpooler.objects.get(id=current_mail_id)

    if current_mailspooler.mailspooler_type != MAILSPOOLER_TYPE.IN_PROCESS:
        logger.info("ERROR :: Trying to send mail which is not set as IN_PROCESS")
        return False

    mailtemplate = MailTemplate.objects.get(pk=current_mailspooler.mailtemplate.id)
    #contact_email = current_mailspooler.contact.email

    send_html_mail(
        mailtemplate.subject,
        mailtemplate.message_plaintext,
        mailtemplate.message_html,
        mailtemplate.from_email,
        [current_mailspooler.contact_email],
    )

    current_mailspooler.mailspooler_type = MAILSPOOLER_TYPE.SENT
    current_mailspooler.save()

    logger.info("Mail Sent - ID:%d" % current_mailspooler.id)


class mailspooler_pending(PeriodicTask):
    """A periodic task that spool mail that needs to be sent

    **Usage**:

        mailspooler_pending.delay()
    """
    run_every = timedelta(seconds=10)

    @only_one(ikey="mailspooler_pending", timeout=LOCK_EXPIRE)
    def run(self, **kwargs):
        logger.info("TASK :: mailspooler_pending")

        try:
            list_pending_mail = MailSpooler.objects.filter(mailspooler_type=MAILSPOOLER_TYPE.PENDING)[:50]
            logger.info("Check for pending Mail...")
        except MailSpooler.DoesNotExist:
            logger.info("MailSpooler doesn't exist!")
            return False

        for current_mailspooler in list_pending_mail:
            #To avoid duplicate sending
            current_mailspooler.mailspooler_type = MAILSPOOLER_TYPE.IN_PROCESS  # In Process
            current_mailspooler.save()
            logger.info("Calling Task to send MAIL!")
            sendmail_task.delay(current_mailspooler.id)


@periodic_task(run_every=timedelta(seconds=60))  # every 10 seconds
def sendmail_pending(*args, **kwargs):
    """A periodic task that send pending mail

    **Usage**:

        sendmail_pending.delay()
    """
    logger.info("TASK :: sendmail_pending")
    if not PAUSE_SEND:
        send_all()
    else:
        logger.info("Sending mail is paused.")


@periodic_task(run_every=timedelta(days=1))  # every 1 day
def sendmail_retry_deferred(*args, **kwargs):
    """A periodic task that send deferred mail

    **Usage**:

        sendmail_retry_deferred.delay()
    """
    logger.info("TASK :: sendmail_retry_deferred")
    count = Message.objects.retry_deferred()  # @@@ new_priority not yet supported
    if count and count > 0:
        logger.info("%s message(s) retried" % count)

########NEW FILE########
__FILENAME__ = tests
#
# Newfies-Dialer License
# http://www.newfies-dialer.org
#
# This Source Code Form is subject to the terms of the Mozilla Public
# License, v. 2.0. If a copy of the MPL was not distributed with this file,
# You can obtain one at http://mozilla.org/MPL/2.0/.
#
# Copyright (C) 2011-2014 Star2Billing S.L.
#
# The Initial Developer of the Original Code is
# Arezqui Belaid <info@star2billing.com>
#

#from django.test import TestCase
#from django.contrib.auth.models import User
#from django.conf import settings
from django_lets_go.utils import BaseAuthenticatedClient


class ModMailerAdminView(BaseAuthenticatedClient):
    """
    Test cases for mail MailTemplate list Admin Interface.
    """

    def test_admin_mail_template_view_list(self):
        """Test Function to check admin MailTemplate list"""
        response = self.client.get("/admin/mod_mailer/mailtemplate/")
        self.failUnlessEqual(response.status_code, 200)

    def test_admin_mail_template_view_add(self):
        """Test Function to check admin MailTemplate add"""
        response = self.client.get("/admin/mod_mailer/mailtemplate/add/")
        self.assertEqual(response.status_code, 200)
        response = self.client.post(
            '/admin/mod_mailer/mailtemplate/add/',
            data={'label': 'test', 'template_key': 'template_key_xyz',
                  'from_email': 'xyz@gmail.com', 'from_name': 'xyz',
                  'subject': 'sample_template', 'message_plaintext': 'test msg',
                  'message_html': '<b>test msg</b>'}, follow=True)
        self.assertEqual(response.status_code, 200)

    def test_admin_mailspooler_view_list(self):
        """Test Function to check admin mailspooler list"""
        response = self.client.get("/admin/mod_mailer/mailspooler/")
        self.failUnlessEqual(response.status_code, 200)

    def test_admin_mailspooler_view_add(self):
        """Test Function to check admin mailspooler add"""
        response = self.client.get("/admin/mod_mailer/mailspooler/add/")
        self.assertEqual(response.status_code, 200)
        response = self.client.post(
            '/admin/mod_mailer/mailspooler/add/',
            data={'mailtemplate': '1', 'contact_email': 'areski@gmail.com',
                  'parameter': '', 'mailspooler_type': '1'},
            follow=True)
        self.assertEqual(response.status_code, 200)

########NEW FILE########
__FILENAME__ = views
#
# Newfies-Dialer License
# http://www.newfies-dialer.org
#
# This Source Code Form is subject to the terms of the Mozilla Public
# License, v. 2.0. If a copy of the MPL was not distributed with this file,
# You can obtain one at http://mozilla.org/MPL/2.0/.
#
# Copyright (C) 2011-2014 Star2Billing S.L.
#
# The Initial Developer of the Original Code is
# Arezqui Belaid <info@star2billing.com>
#

# Create your views here.

########NEW FILE########
__FILENAME__ = forms
#
# Newfies-Dialer License
# http://www.newfies-dialer.org
#
# This Source Code Form is subject to the terms of the Mozilla Public
# License, v. 2.0. If a copy of the MPL was not distributed with this file,
# You can obtain one at http://mozilla.org/MPL/2.0/.
#
# Copyright (C) 2011-2014 Star2Billing S.L.
#
# The Initial Developer of the Original Code is
# Arezqui Belaid <info@star2billing.com>
#
from django import forms
from django.utils.translation import ugettext_lazy as _
from django.contrib.auth.forms import SetPasswordForm
from crispy_forms.helper import FormHelper
from crispy_forms.layout import Layout, Submit, Div, Field
from crispy_forms.bootstrap import FormActions


class ForgotForm(forms.Form):
    """Forgot password Form"""
    email = forms.EmailField(max_length=60, label=_('email').capitalize(), required=True)
    email.widget.attrs['class'] = 'form-control'

    def __init__(self, *args, **kwargs):
        super(ForgotForm, self).__init__(*args, **kwargs)
        self.helper = FormHelper()
        self.helper.form_class = 'well'
        self.helper.layout = Layout(
            Div(
                Div('email', css_class='col-md-4'),
                css_class='row'
            ),
            FormActions(Submit('submit', _('reset my password').capitalize()))
        )


class CustomSetPasswordForm(SetPasswordForm):
    """Set Password Form"""
    def __init__(self, *args, **kwargs):
        super(CustomSetPasswordForm, self).__init__(*args, **kwargs)
        self.helper = FormHelper()
        self.helper.layout = Layout(
            Div(
                Div(
                    Field('new_password1'),
                    Field('new_password2'),
                    Submit('submit', _('change my password').capitalize()),
                    css_class='col-md-4'
                ),
                css_class='well col-md-12'
            ),
        )

########NEW FILE########
__FILENAME__ = tests
#
# Newfies-Dialer License
# http://www.newfies-dialer.org
#
# This Source Code Form is subject to the terms of the Mozilla Public
# License, v. 2.0. If a copy of the MPL was not distributed with this file,
# You can obtain one at http://mozilla.org/MPL/2.0/.
#
# Copyright (C) 2011-2014 Star2Billing S.L.
#
# The Initial Developer of the Original Code is
# Arezqui Belaid <info@star2billing.com>
#

from django.test import TestCase


class FrontendForgotPassword(TestCase):
    """Test cases for Newfies-Dialer Customer Interface. for forgot password"""

    def test_check_password_reset(self):
        """Test Function to check password reset"""
        response = self.client.get('/password_reset/')
        self.assertEqual(response.status_code, 200)
        self.assertTemplateUsed(response, 'mod_registration/password_reset_form.html')
        response = self.client.post('/password_reset/',
                                    {'email': 'admin@localhost.com'},
                                    follow=True)
        self.assertEqual(response.status_code, 200)

        response = self.client.get('/password_reset/done/')
        self.assertEqual(response.status_code, 200)
        self.assertTemplateUsed(response, 'mod_registration/password_reset_done.html')

        """
        response = self.client.get('/reset/1-2xc-5791af4cc6b67e88ce8e/')
        self.assertEqual(response.status_code, 200)
        self.assertTemplateUsed(
            response,
            'frontend/registration/password_reset_confirm.html')
        response = self.client.post('/reset/1-2xc-5791af4cc6b67e88ce8e/',
            {
                'new_password1': 'admin',
                'new_password2': 'admin'
            },
            follow=True)
        self.assertEqual(response.status_code, 200)
        """
        response = self.client.get('/reset/done/')
        self.assertEqual(response.status_code, 200)
        self.assertTemplateUsed(response, 'mod_registration/password_reset_complete.html')

########NEW FILE########
__FILENAME__ = urls
#
# Newfies-Dialer License
# http://www.newfies-dialer.org
#
# This Source Code Form is subject to the terms of the Mozilla Public
# License, v. 2.0. If a copy of the MPL was not distributed with this file,
# You can obtain one at http://mozilla.org/MPL/2.0/.
#
# Copyright (C) 2011-2014 Star2Billing S.L.
#
# The Initial Developer of the Original Code is
# Arezqui Belaid <info@star2billing.com>
#
from django.conf.urls import patterns


urlpatterns = patterns('mod_registration.views',
    # Password reset for Customer UI
    (r'^password_reset/$', 'cust_password_reset'),
    (r'^password_reset/done/$', 'cust_password_reset_done'),
    (r'^reset/(?P<uidb64>[0-9A-Za-z_\-]+)/(?P<token>.+)/$',
        'cust_password_reset_confirm'),
    (r'^reset/done/$', 'cust_password_reset_complete'),
)

########NEW FILE########
__FILENAME__ = views
#
# Newfies-Dialer License
# http://www.newfies-dialer.org
#
# This Source Code Form is subject to the terms of the Mozilla Public
# License, v. 2.0. If a copy of the MPL was not distributed with this file,
# You can obtain one at http://mozilla.org/MPL/2.0/.
#
# Copyright (C) 2011-2014 Star2Billing S.L.
#
# The Initial Developer of the Original Code is
# Arezqui Belaid <info@star2billing.com>
#

from django.contrib.auth.views import password_reset, password_reset_done,\
    password_reset_confirm, password_reset_complete
from django.http import HttpResponseRedirect
from frontend.forms import LoginForm
from mod_registration.forms import ForgotForm, CustomSetPasswordForm
from django.conf import settings


def cust_password_reset(request):
    """Use ``django.contrib.auth.views.password_reset`` view method for
    forgotten password on the Customer UI

    This method sends an e-mail to the user's email-id which is entered in
    ``password_reset_form``
    """
    if not request.user.is_authenticated():
        data = {
            'loginform': LoginForm(),
            'forgotform': ForgotForm(request.POST or None),
        }
        return password_reset(
            request,
            template_name='mod_registration/password_reset_form.html',
            email_template_name='mod_registration/password_reset_email.html',
            post_reset_redirect='/password_reset/done/',
            from_email=settings.EMAIL_ADMIN,
            extra_context=data)
    else:
        return HttpResponseRedirect("/")


def cust_password_reset_done(request):
    """Use ``django.contrib.auth.views.password_reset_done`` view method for
    forgotten password on the Customer UI

    This will show a message to the user who is seeking to reset their
    password.
    """
    if not request.user.is_authenticated():
        data = {
            'loginform': LoginForm(),
            'forgotform': ForgotForm(),
        }
        return password_reset_done(request, template_name='mod_registration/password_reset_done.html', extra_context=data)
    else:
        return HttpResponseRedirect("/")


def cust_password_reset_confirm(request, uidb64=None, token=None):
    """Use ``django.contrib.auth.views.password_reset_confirm`` view method for
    forgotten password on the Customer UI

    This will allow a user to reset their password.
    """
    if not request.user.is_authenticated():
        data = {
            'loginform': LoginForm(),
            'custom_set_password_form': CustomSetPasswordForm(request.POST or None)
        }
        return password_reset_confirm(
            request, uidb64=uidb64, token=token,
            template_name='mod_registration/password_reset_confirm.html',
            post_reset_redirect='/reset/done/',
            extra_context=data)
    else:
        return HttpResponseRedirect("/")


def cust_password_reset_complete(request):
    """Use ``django.contrib.auth.views.password_reset_complete`` view method
    for forgotten password on theCustomer UI

    This shows an acknowledgement to the user after successfully resetting
    their password for the system.
    """
    if not request.user.is_authenticated():
        data = {'loginform': LoginForm()}
        return password_reset_complete(
            request, template_name='mod_registration/password_reset_complete.html',
            extra_context=data)
    else:
        return HttpResponseRedirect("/")

########NEW FILE########
__FILENAME__ = admin
#
# Newfies-Dialer License
# http://www.newfies-dialer.org
#
# This Source Code Form is subject to the terms of the Mozilla Public
# License, v. 2.0. If a copy of the MPL was not distributed with this file,
# You can obtain one at http://mozilla.org/MPL/2.0/.
#
# Copyright (C) 2011-2012 Star2Billing S.L.
#
# The Initial Developer of the Original Code is
# Arezqui Belaid <info@star2billing.com>
#

from django.contrib import admin
from django.contrib import messages
from django.conf.urls import patterns
from django.core.urlresolvers import reverse
from django.utils.translation import ugettext as _
from django.contrib.admin.options import IncorrectLookupParameters
from django.contrib.admin.views.main import ERROR_FLAG
from django.template import RequestContext
from django.http import HttpResponse, HttpResponseRedirect
from django.shortcuts import render_to_response
from django.db.models import Count
from django.utils.translation import ungettext
from dialer_campaign.function_def import dialer_setting_limit
from django_lets_go.common_functions import variable_value
from mod_utils.helper import Export_choice
from mod_sms.models import SMSCampaign, SMSCampaignSubscriber, SMSMessage, SMSTemplate
from mod_sms.function_def import check_sms_dialer_setting,\
    sms_record_common_fun, sms_search_admin_form_fun
from mod_sms.forms import AdminSMSSearchForm
from genericadmin.admin import GenericAdminModelAdmin
from datetime import datetime
from django.utils.timezone import utc
import tablib


class SMSCampaignAdmin(GenericAdminModelAdmin):
    """
    Allows the administrator to view and modify certain attributes
    of a SMSCampaign.
    """
    fieldsets = (
        (_('Standard options'), {
            'fields': ('campaign_code', 'name', 'description', 'callerid',
                       'user', 'status', 'startingdate', 'expirationdate',
                       'sms_gateway', 'text_message',
                       'extra_data', 'phonebook',
                       ),
        }),
        (_('Advanced options'), {
            'classes': ('collapse',),
            'fields': ('frequency', 'maxretry',
                       'intervalretry', 'imported_phonebook', 'daily_start_time',
                       'daily_stop_time', 'monday', 'tuesday', 'wednesday',
                       'thursday', 'friday', 'saturday', 'sunday')
        }),
    )
    list_display = ('id', 'name', 'campaign_code', 'user',
                    'startingdate', 'expirationdate', 'frequency',
                    'maxretry', 'sms_gateway', 'status',
                    'update_sms_campaign_status', 'count_contact_of_phonebook',
                    'sms_campaignsubscriber_detail', 'progress_bar')

    list_display_links = ('id', 'name', )
    #list_filter = ['user', 'status', 'startingdate', 'created_date']
    ordering = ('id', )
    filter_horizontal = ('phonebook',)

    def get_urls(self):
        urls = super(SMSCampaignAdmin, self).get_urls()
        my_urls = patterns('',
            (r'^$', self.admin_site.admin_view(self.changelist_view)),
            (r'^add/$', self.admin_site.admin_view(self.add_view)),
        )
        return my_urls + urls

    def add_view(self, request, extra_context=None):
        """
        Override django add_view method for checking the dialer setting limit

        **Logic Description**:

            * Before adding sms campaign, check dialer setting limit if applicable
              to the user, if matched then the user will be redirected to
              the sms campaign list
        """
        # Check dialer setting limit
        # check Max Number of running sms campaigns
        if check_sms_dialer_setting(request, check_for="smscampaign"):
            msg = _("you have too many sms campaigns. Max allowed %(limit)s") \
                % {'limit': dialer_setting_limit(request, limit_for="smscampaign")}
            messages.error(request, msg)

            # campaign limit reached
            #common_send_notification(request, '3')
            return HttpResponseRedirect(reverse("admin:sms_campaign_campaign_changelist"))
        ctx = {}
        return super(SMSCampaignAdmin, self).add_view(request, extra_context=ctx)
admin.site.register(SMSCampaign, SMSCampaignAdmin)


class SMSCampaignSubscriberAdmin(admin.ModelAdmin):
    """Allows the administrator to view and modify certain attributes
    of a SMSCampaignSubscriber."""
    list_display = ('id', 'contact', 'sms_campaign',
                    'last_attempt', 'count_attempt', 'duplicate_contact',
                    'contact_name', 'status', 'created_date')
    list_filter = ['sms_campaign', 'status', 'created_date', 'last_attempt']
    ordering = ('id', )

admin.site.register(SMSCampaignSubscriber, SMSCampaignSubscriberAdmin)


class SMSMessageAdmin(admin.ModelAdmin):
    """Allows the administrator to view and modify certain attributes
    of a SMSMessage."""
    can_add = True
    detail_title = _("SMS report")
    list_display = ('sender', 'recipient_number', 'send_date', 'uuid',
                    'status', 'status_message', 'sms_gateway')
    ordering = ('-id', )

    def has_add_permission(self, request):
        """Remove add permission on SMSMessage Report model

        **Logic Description**:

            * Override django admin has_add_permission method to remove add
              permission on SMSMessage Report model
        """
        if not self.can_add:
            return False
        return super(SMSMessageAdmin, self).has_add_permission(request)

    def get_urls(self):
        urls = super(SMSMessageAdmin, self).get_urls()
        my_urls = patterns('',
            (r'^$', self.admin_site.admin_view(self.changelist_view)),
            (r'^sms_daily_report/$', self.admin_site.admin_view(self.sms_daily_report)),
            (r'^export_sms_report/$', self.admin_site.admin_view(self.export_sms_report)),
        )
        return my_urls + urls

    def changelist_view(self, request, extra_context=None):
        """Override changelist_view method of django-admin for search parameters

        **Attributes**:

            * ``form`` - AdminSMSSearchForm
            * ``template`` - admin/mod_sms/smsmessage/sms_report.html

        **Logic Description**:

            * SMSMessage report Record Listing with search option
              search Parameters: by date, by status and by billed.
        """
        opts = SMSMessage._meta

        query_string = ''
        form = AdminSMSSearchForm(request.POST or None)
        if form.is_valid():
            query_string = sms_search_admin_form_fun(request)
            return HttpResponseRedirect(
                "/admin/" + opts.app_label + "/" + opts.object_name.lower() + "/?" + query_string)
        else:
            status = ''
            from_date = ''
            to_date = ''
            smscampaign = ''
            if request.GET.get('send_date__gte'):
                from_date = variable_value(request, 'send_date__gte')
            if request.GET.get('send_date__lte'):
                to_date = variable_value(request, 'send_date__lte')[0:10]
            if request.GET.get('status__exact'):
                status = variable_value(request, 'status__exact')
            if request.GET.get('sms_campaign'):
                smscampaign = variable_value(request, 'sms_campaign')
            form = AdminSMSSearchForm(initial={'status': status,
                                               'from_date': from_date,
                                               'to_date': to_date,
                                               'smscampaign': smscampaign})

        ChangeList = self.get_changelist(request)
        try:
            cl = ChangeList(request, self.model, self.list_display,
                self.list_display_links, self.list_filter, self.date_hierarchy,
                self.search_fields, self.list_select_related,
                self.list_per_page, self.list_max_show_all, self.list_editable,
                self)
        except IncorrectLookupParameters:
            if ERROR_FLAG in request.GET.keys():
                return render_to_response('admin/invalid_setup.html',
                                          {'title': _('Database error')})
            return HttpResponseRedirect(request.path + '?' + ERROR_FLAG + '=1')

        kwargs = {}
        if request.META['QUERY_STRING'] == '':
            tday = datetime.utcnow().replace(tzinfo=utc)
            kwargs['send_date__gte'] = datetime(tday.year, tday.month, tday.day,
                0, 0, 0, 0).replace(tzinfo=utc)
            cl.root_query_set.filter(**kwargs)

        cl.formset = None
        # Session variable is used to get record set with searched option into export file
        request.session['admin_sms_record_qs'] = cl.root_query_set

        selection_note_all = ungettext('%(total_count)s selected',
            'All %(total_count)s selected', cl.result_count)

        ctx = {
            'selection_note': _('0 of %(cnt)s selected') % {'cnt': len(cl.result_list)},
            'selection_note_all': selection_note_all % {'total_count': cl.result_count},
            'cl': cl,
            'form': form,
            'opts': opts,
            'model_name': opts.object_name.lower(),
            'app_label': _('SMS module'),
            'title': _('SMS report'),
        }
        return super(SMSMessageAdmin, self).changelist_view(request, extra_context=ctx)

    def sms_daily_report(self, request):
        opts = SMSMessage._meta
        kwargs = {}

        form = AdminSMSSearchForm(request.POST or None)
        if form.is_valid():
            kwargs = sms_record_common_fun(request)
            request.session['from_date'] = request.POST.get('from_date')
            request.session['to_date'] = request.POST.get('to_date')
            request.session['status'] = request.POST.get('status')
            request.session['smscampaign'] = request.POST.get('smscampaign')
        else:
            kwargs = sms_record_common_fun(request)
            tday = datetime.utcnow().replace(tzinfo=utc)
            if len(kwargs) == 0:
                kwargs['send_date__gte'] = datetime(tday.year, tday.month, tday.day,
                    0, 0, 0, 0).replace(tzinfo=utc)

        select_data = {"send_date": "SUBSTR(CAST(send_date as CHAR(30)),1,10)"}

        # Get Total Records from VoIPCall Report table for Daily Call Report
        total_data = SMSMessage.objects.extra(select=select_data)\
            .values('send_date').filter(**kwargs).annotate(Count('send_date'))\
            .order_by('-send_date')

        # Following code will count total sms calls, duration
        if total_data.count() != 0:
            total_sms = sum([x['send_date__count'] for x in total_data])
        else:
            total_sms = 0

        ctx = RequestContext(request, {
            'form': form,
            'total_data': total_data.reverse(),
            'total_sms': total_sms,
            'opts': opts,
            'model_name': opts.object_name.lower(),
            'app_label': _('SMS module'),
            'title': _('SMS aggregate report'),
        })

        return render_to_response('admin/mod_sms/smsmessage/sms_report.html', context_instance=ctx)

    def export_sms_report(self, request):
        """Export a CSV file of SMS records

        **Important variable**:

            * request.session['admin_sms_record_qs'] - stores sms query set

        **Exported fields**: ['sender', 'recipient_number', 'send_date',
                              'uuid', 'status', 'status_message', 'gateway']
        """
        format_type = request.GET['format']
        # get the response object, this can be used as a stream.
        response = HttpResponse(mimetype='text/%s' % format_type)

        # force download.
        response['Content-Disposition'] = 'attachment;filename=sms_export.%s' % format_type

        # super(SMSMessageAdmin, self).queryset(request)
        qs = request.session['admin_sms_record_qs']

        headers = ('sender', 'recipient_number', 'send_date', 'uuid',
                   'status', 'status_message', 'gateway')
        list_val = []

        for i in qs:
            gateway = i.gateway.name if i.gateway else ''
            send_date = i.send_date
            if format_type == Export_choice.JSON:
                send_date = str(i.send_date)

            list_val.append(
                (i.sender,
                 i.recipient_number,
                 send_date,
                 i.uuid,
                 i.status,
                 i.status_message,
                 gateway
                 ))

        data = tablib.Dataset(*list_val, headers=headers)

        if format_type == Export_choice.XLS:
            response.write(data.xls)
        elif format_type == Export_choice.CSV:
            response.write(data.csv)
        elif format_type == Export_choice.JSON:
            response.write(data.json)
        return response


class SMSTemplateAdmin(admin.ModelAdmin):
    list_display = ('label', 'sms_text', 'created_date')
    ordering = ('-id', )


admin.site.register(SMSMessage, SMSMessageAdmin)
admin.site.register(SMSTemplate, SMSTemplateAdmin)

########NEW FILE########
__FILENAME__ = constants
#
# Newfies-Dialer License
# http://www.newfies-dialer.org
#
# This Source Code Form is subject to the terms of the Mozilla Public
# License, v. 2.0. If a copy of the MPL was not distributed with this file,
# You can obtain one at http://mozilla.org/MPL/2.0/.
#
# Copyright (C) 2011-2012 Star2Billing S.L.
#
# The Initial Developer of the Original Code is
# Arezqui Belaid <info@star2billing.com>
#

from django.utils.translation import ugettext as _
from django_lets_go.utils import Choice


class SMS_CAMPAIGN_STATUS(Choice):
    START = 1, 'START'
    PAUSE = 2, 'PAUSE'
    ABORT = 3, 'ABORT'
    END = 4, 'END'

SMS_CAMPAIGN_STATUS_COLOR = {1: "green", 2: "blue", 3: "orange", 4: "red"}


class SMS_SUBSCRIBER_STATUS(Choice):
    PENDING = 1, _('pending').upper()
    PAUSE = 2, _('pause').upper()
    ABORT = 3, _('abort').upper()
    FAIL = 4, _('fail').upper()
    COMPLETE = 5, _('complete').upper()
    IN_PROCESS = 6, _('in process').upper()
    NOT_AUTHORIZED = 7, _('not authorized').upper()


class SMS_CAMPAIGN_COLUMN_NAME(Choice):
    key = _('key').title()
    name = _('name').title()
    start_date = _('start date').title()
    sms_gateway = _('SMS Gateway')
    totalcontact = _('total contact').title()
    status = _('status').title()
    action = _('action').title()


class SMS_NOTIFICATION_NAME(Choice):
    sms_campaign_started = 9, _('SMS campaign started')
    sms_campaign_paused = 10, _('SMS campaign paused')
    sms_campaign_aborted = 11, _('SMS campaign aborted')
    sms_campaign_stopped = 12, _('SMS campaign stopped')
    sms_campaign_limit_reached = 13, _('SMS campaign limit reached')
    sms_contact_limit_reached = 14, _('SMS contact limit reached')
    sms_dialer_setting_configuration = 15, _('SMS dialer setting configuration')


class SMS_REPORT_COLUMN_NAME(Choice):
    send_date = _('send date').title()
    recipient_number = _('recipient').title()
    uuid = _('UUID')
    status = _('status').title()
    status_msg = _('status msg').title()
    gateway = _('gateway').title()


class SMS_MESSAGE_STATUS(Choice):
    UNSENT = 'Unsent'
    SENT = 'Sent'
    DELIVERED = 'Delivered'
    FAILED = 'Failed'
    NO_ROUTE = 'No_Route'
    UNAUTHORIZED = 'Unauthorized'


# SMS Disposition color
COLOR_SMS_DISPOSITION = {
    'UNSENT': '#4DBCE9',
    'SENT': '#0A9289',
    'DELIVERED': '#42CD2C',
    'FAILED': '#DE2213',
    'NO_ROUTE': '#AF0415',
    'UNAUTHORIZED': '#E08022'
}

########NEW FILE########
__FILENAME__ = forms
#
# Newfies-Dialer License
# http://www.newfies-dialer.org
#
# This Source Code Form is subject to the terms of the Mozilla Public
# License, v. 2.0. If a copy of the MPL was not distributed with this file,
# You can obtain one at http://mozilla.org/MPL/2.0/.
#
# Copyright (C) 2011-2012 Star2Billing S.L.
#
# The Initial Developer of the Original Code is
# Arezqui Belaid <info@star2billing.com>
#

from django import forms
from django.forms.util import ErrorList
from django.forms import ModelForm, Textarea
from django.utils.translation import ugettext_lazy as _

from dialer_campaign.function_def import user_dialer_setting
from dialer_contact.forms import SearchForm, AdminSearchForm
from sms.models.message import MESSAGE_STATUSES
from mod_sms.models import SMSCampaign, get_unique_code
from frontend.constants import SEARCH_TYPE
from bootstrap3_datetime.widgets import DateTimePicker
from dialer_campaign.forms import get_phonebook_list,\
    campaign_status_list as sms_campaign_status_list

from mod_utils.forms import SaveUserModelForm, common_submit_buttons
from crispy_forms.helper import FormHelper
from crispy_forms.layout import Layout, Div, Submit, Field, HTML
from crispy_forms.bootstrap import TabHolder, Tab


def get_smscampaign_list(user=None):
    """get list of smscampaign"""
    camp_list = []
    camp_list.append((0, _('all').upper()))
    if user is None:
        pb_list = SMSCampaign.objects.all()
    else:
        pb_list = SMSCampaign.objects.filter(user=user)
    for i in pb_list:
        camp_list.append((i.id, i.name))
    return camp_list


class SMSCampaignForm(ModelForm):
    """SMSCampaign ModelForm"""
    campaign_code = forms.CharField(widget=forms.HiddenInput)
    #content_object = forms.ChoiceField(label=_("Application"),)

    class Meta:
        model = SMSCampaign
        #fields = ['campaign_code', 'name', 'callerid', 'sms_gateway',
        #          'phonebook', 'extra_data', 'text_message',
        #          'frequency', 'maxretry', 'intervalretry',
        #          'startingdate', 'expirationdate',
        #          'daily_start_time', 'daily_stop_time',
        #          'monday', 'tuesday', 'wednesday', 'thursday', 'friday',
        #          'saturday', 'sunday']
        exclude = ('user', 'status', 'imported_phonebook')
        widgets = {
            'extra_data': Textarea(attrs={'cols': 23, 'rows': 3}),
            'text_message': Textarea(attrs={'cols': 23, 'rows': 3}),
            'startingdate': DateTimePicker(options={"format": "YYYY-MM-DD HH:mm:ss"}),
            'expirationdate': DateTimePicker(options={"format": "YYYY-MM-DD HH:mm:ss"}),
        }

    def __init__(self, user, *args, **kwargs):
        super(SMSCampaignForm, self).__init__(*args, **kwargs)
        self.user = user
        self.helper = FormHelper()

        if self.instance.id:
            form_action = common_submit_buttons(default_action='update')
        else:
            form_action = common_submit_buttons(default_action='add')

        week_days = ['monday', 'tuesday', 'wednesday', 'thursday', 'friday', 'saturday', 'sunday']
        week_days_html = """<div class="row"><div class="col-md-12 col-xs-6">"""

        for i in week_days:
            week_days_html += """
                <div class="col-md-3">
                    <div class="btn-group" data-toggle="buttons">
                        <label for="{{ form.%s.auto_id }}">{{ form.%s.label }}</label><br/>
                        <div class="make-switch switch-small">
                        {{ form.%s }}
                        </div>
                    </div>
                </div>
                """ % (i, i, i)

        week_days_html += """</div></div>"""
        css_class = 'col-md-6'
        self.helper.layout = Layout(
            Field('campaign_code'),
            TabHolder(
                Tab(_('general settings').title(),
                    Div(
                        Div('name', css_class=css_class),
                        Div('callerid', css_class=css_class),
                        Div('sms_gateway', css_class=css_class),
                        Div('phonebook', css_class=css_class),
                        Div('extra_data', css_class=css_class),
                        Div('text_message', css_class=css_class),
                        css_class='row'
                    ),
                    form_action,
                    css_class='well'
                    ),
                Tab(_('completion settings').title(),
                    Div(
                        Div('frequency', css_class=css_class),
                        Div('maxretry', css_class=css_class),
                        Div('intervalretry', css_class=css_class),
                        css_class='row'
                    ),
                    form_action,
                    css_class='well'
                    ),
                Tab('schedule',
                    Div(
                        Div(HTML("""<label>%s<label>""" % (_('week days').capitalize())), css_class="col-md-3"),
                        HTML(week_days_html),
                        HTML("""<div>&nbsp;</div>"""),
                        Div('startingdate', css_class=css_class),
                        Div('expirationdate', css_class=css_class),
                        Div('daily_start_time', css_class=css_class),
                        Div('daily_stop_time', css_class=css_class),
                        css_class='row'
                    ),
                    form_action,
                    css_class='well'
                    ),
            ),
        )

        self.fields['campaign_code'].initial = get_unique_code(length=5)
        if user:
            phonebook_list = get_phonebook_list(user)
            self.fields['phonebook'].choices = phonebook_list
            self.fields['phonebook'].initial = str(phonebook_list[0][0])

    def clean(self):
        cleaned_data = self.cleaned_data
        frequency = cleaned_data.get('frequency')
        maxretry = cleaned_data.get('maxretry')
        phonebook = cleaned_data.get('phonebook')

        if not phonebook:
            msg = _('you must select at least one phonebook')
            self._errors['phonebook'] = ErrorList([msg])
            del self.cleaned_data['phonebook']

        sms_dialer_set = user_dialer_setting(self.user)
        if sms_dialer_set:
            if frequency > sms_dialer_set.sms_max_frequency:
                msg = _('Maximum Frequency limit of %d exceeded.' % sms_dialer_set.sms_max_frequency)
                self._errors['frequency'] = ErrorList([msg])
                del self.cleaned_data['frequency']

            if maxretry > sms_dialer_set.sms_maxretry:
                msg = _('Maximum Retries limit of %d exceeded.' % sms_dialer_set.sms_maxretry)
                self._errors['maxretry'] = ErrorList([msg])
                del self.cleaned_data['maxretry']

        return cleaned_data


class SMSCampaignAdminForm(ModelForm):
    """Admin SMSCampaign ModelForm"""
    class Meta:
        model = SMSCampaign
        fields = ['campaign_code', 'name', 'description', 'user', 'status',
                  'callerid', 'startingdate', 'expirationdate', 'sms_gateway',
                  'text_message', 'phonebook', 'frequency', 'maxretry',
                  'intervalretry', 'daily_start_time', 'daily_stop_time',
                  'monday', 'tuesday', 'wednesday', 'thursday', 'friday',
                  'saturday', 'sunday']

    def __init__(self, *args, **kwargs):
        super(SMSCampaignAdminForm, self).__init__(*args, **kwargs)
        self.fields['campaign_code'].widget.attrs['readonly'] = True
        self.fields['campaign_code'].initial = get_unique_code(length=5)


message_list = []
message_list.append(('all', _('all').upper()))
for i in MESSAGE_STATUSES:
    message_list.append((i[0], i[1]))


class SMSDashboardForm(forms.Form):
    """SMSDashboard Form"""
    smscampaign = forms.ChoiceField(label=_('SMS Campaign'), required=False)
    search_type = forms.ChoiceField(label=_('type'), required=False, choices=list(SEARCH_TYPE),
                                    initial=SEARCH_TYPE.D_Last_24_hours)

    def __init__(self, user, *args, **kwargs):
        super(SMSDashboardForm, self).__init__(*args, **kwargs)
        self.helper = FormHelper()
        self.helper.form_show_labels = False
        self.helper.form_class = 'well form-inline text-right'
        self.helper.layout = Layout(
            Div(
                Div('smscampaign', css_class='form-group'),
                Div('search_type', css_class='form-group'),
                Div(Submit('submit', _('search').title()), css_class='form-group'),
            ),
        )

        # To get user's running campaign list
        if user:
            campaign_list = SMSCampaign.objects.filter(user=user).order_by('-id')

            campaign_choices = [(0, _('Select campaign'))]
            for cp in campaign_list:
                campaign_choices.append((cp.id, unicode(cp.name)))

            self.fields['smscampaign'].choices = campaign_choices


class SMSSearchForm(SearchForm):
    """SMS Report Search Parameters"""
    status = forms.ChoiceField(label=_('status'), choices=message_list, required=False)
    smscampaign = forms.ChoiceField(label=_('SMS Campaign'), required=False)

    def __init__(self, user, *args, **kwargs):
        super(SMSSearchForm, self).__init__(*args, **kwargs)
        self.helper = FormHelper()
        self.helper.form_class = 'well'
        css_class = 'col-md-4'
        self.helper.layout = Layout(
            Div(
                Div('from_date', css_class=css_class),
                Div('to_date', css_class=css_class),
                Div('status', css_class=css_class),
                Div('smscampaign', css_class=css_class),
                css_class='row'
            ),
        )
        common_submit_buttons(self.helper.layout, 'search')
        if user:
            self.fields['smscampaign'].choices = get_smscampaign_list(user)


class AdminSMSSearchForm(AdminSearchForm):
    """SMS Report Search Parameters"""
    status = forms.ChoiceField(label=_('status'), choices=message_list,
                               required=False)
    smscampaign = forms.ChoiceField(label=_('SMS Campaign'), required=False)

    def __init__(self, *args, **kwargs):
        super(AdminSMSSearchForm, self).__init__(*args, **kwargs)
        self.fields.keyOrder = [
            'from_date', 'to_date', 'status', 'smscampaign'
        ]
        for i in self.fields.keyOrder:
            self.fields[i].widget.attrs['class'] = "form-control"
        self.fields['smscampaign'].choices = get_smscampaign_list()


class SMSCampaignSearchForm(forms.Form):
    phonebook_id = forms.ChoiceField(label=_("phonebook").capitalize())
    status = forms.ChoiceField(label=_("status").capitalize(), choices=sms_campaign_status_list)

    def __init__(self, user, *args, **kwargs):
        super(SMSCampaignSearchForm, self).__init__(*args, **kwargs)
        self.helper = FormHelper()
        self.helper.form_class = 'well'
        css_class = 'col-md-3'
        self.helper.layout = Layout(
            Div(
                Div('phonebook_id', css_class=css_class),
                Div('status', css_class=css_class),
                css_class='row'
            ),
        )
        common_submit_buttons(self.helper.layout, 'search')
        if user:
            self.fields['phonebook_id'].choices = get_phonebook_list(user)


class DuplicateSMSCampaignForm(ModelForm):
    """DuplicateSMSCampaignForm ModelForm"""
    campaign_code = forms.CharField(widget=forms.HiddenInput)

    class Meta:
        model = SMSCampaign
        fields = ['campaign_code', 'name', 'phonebook']

    def __init__(self, user, *args, **kwargs):
        super(DuplicateSMSCampaignForm, self).__init__(*args, **kwargs)
        self.helper = FormHelper()
        self.helper.form_tag = False
        css_class = 'col-md-12'
        self.helper.layout = Layout(
            Field('campaign_code'),
            Div(
                Div('name', css_class=css_class),
                Div('phonebook', css_class=css_class),
                css_class='row'
            )
        )
        self.fields['campaign_code'].initial = get_unique_code(length=5)

        if user:
            self.fields['phonebook'].choices = get_phonebook_list(user)

########NEW FILE########
__FILENAME__ = function_def
#
# Newfies-Dialer License
# http://www.newfies-dialer.org
#
# This Source Code Form is subject to the terms of the Mozilla Public
# License, v. 2.0. If a copy of the MPL was not distributed with this file,
# You can obtain one at http://mozilla.org/MPL/2.0/.
#
# Copyright (C) 2011-2012 Star2Billing S.L.
#
# The Initial Developer of the Original Code is
# Arezqui Belaid <info@star2billing.com>
#
from dialer_cdr.function_def import return_query_string
from dialer_contact.models import Contact
from django_lets_go.common_functions import variable_value
from user_profile.models import UserProfile
from mod_sms.models import SMSCampaign
#from dialer_setting.models import DialerSetting
from mod_sms.constants import SMS_CAMPAIGN_STATUS, SMS_NOTIFICATION_NAME
from datetime import datetime
from django.utils.timezone import utc


def check_sms_dialer_setting(request, check_for, field_value=''):
    """Check SMS Dialer Setting Limitation

    **Attribute**

        * ``check_for`` -  for sms campaign or for contact
    """
    try:
        user_dialersetting = UserProfile.objects.get(
            user=request.user, dialersetting__isnull=False).dialersetting
        # DialerSettings link to the User
        if user_dialersetting:

            # check running campaign for User
            if check_for == "smscampaign":
                smscampaign_count = SMSCampaign.objects.filter(
                    user=request.user).count()
                # Total active sms campaign matched with
                # sms_max_number_campaign
                if smscampaign_count >= user_dialersetting.sms_max_number_campaign:
                    # Limit matched or exceeded
                    return True
                else:
                    # Limit not matched
                    return False

            # check for subscriber per campaign
            if check_for == "smscontact":
                # SMS Campaign list for User
                smscampaign_list = SMSCampaign.objects.filter(user=request.user)
                for i in smscampaign_list:
                    # Total contacts per campaign
                    contact_count = Contact.objects.filter(
                        phonebook__campaign=i.id).count()
                    # Total active contacts matched with
                    # sms_max_number_subscriber_campaign
                    if contact_count >= user_dialersetting.sms_max_number_subscriber_campaign:
                        # Limit matched or exceeded
                        return True
                    # Limit not matched
                return False

            # check for frequency limit
            if check_for == "smsfrequency":
                if field_value > user_dialersetting.sms_max_frequency:
                    # Limit matched or exceeded
                    return True
                    # Limit not exceeded
                return False

            # check for sms retry limit
            if check_for == "smsretry":
                if field_value > user_dialersetting.sms_maxretry:
                    # Limit matched or exceeded
                    return True
                    # Limit not exceeded
                return False
        else:
            # SMS DialerSettings not link to the DialerSettings
            return False
    except:
        # SMS DialerSettings not link to the User
        return False


def sms_record_common_fun(request):
    """Return Form with Initial data or Array (kwargs) for SMS_Report
    Changelist_view"""
    start_date = ''
    end_date = ''
    if request.POST.get('from_date'):
        from_date = request.POST.get('from_date')
        start_date = datetime(int(from_date[0:4]), int(from_date[5:7]),
            int(from_date[8:10]), 0, 0, 0, 0).replace(tzinfo=utc)
    if request.POST.get('to_date'):
        to_date = request.POST.get('to_date')
        end_date = datetime(int(to_date[0:4]), int(to_date[5:7]),
            int(to_date[8:10]), 23, 59, 59, 999999).replace(tzinfo=utc)

    # Assign form field value to local variable
    status = variable_value(request, 'status')
    smscampaign = variable_value(request, 'smscampaign')

    # Patch code for persist search
    if request.method != 'POST':

        if request.session.get('from_date'):
            from_date = request.session['from_date']
            start_date = datetime(
                int(from_date[0:4]), int(from_date[5:7]), int(from_date[8:10]),
                0, 0, 0, 0).replace(tzinfo=utc)

        if request.session.get('to_date'):
            to_date = request.session['to_date']
            end_date = datetime(
                int(to_date[0:4]), int(to_date[5:7]), int(to_date[8:10]),
                23, 59, 59, 999999).replace(tzinfo=utc)

        if request.session.get('status'):
            status = request.session['status']

        if request.session.get('smscampaign'):
            smscampaign = request.session['smscampaign']

    kwargs = {}
    if start_date and end_date:
        kwargs['send_date__range'] = (start_date, end_date)
    if start_date and end_date == '':
        kwargs['send_date__gte'] = start_date
    if start_date == '' and end_date:
        kwargs['send_date__lte'] = end_date

    if status:
        if status != 'all':
            kwargs['status__exact'] = status

    if smscampaign and smscampaign != '0':
        kwargs['sms_campaign'] = smscampaign

    if len(kwargs) == 0:
        tday = datetime.utcnow().replace(tzinfo=utc)
        kwargs['send_date__gte'] = datetime(tday.year, tday.month, tday.day,
                                            0, 0, 0, 0).replace(tzinfo=utc)
    return kwargs


def sms_search_admin_form_fun(request):
    """Return query string for SMSMessage Changelist_view"""
    start_date = ''
    end_date = ''
    smscampaign = ''
    if request.POST.get('from_date'):
        start_date = request.POST.get('from_date')

    if request.POST.get('to_date'):
        end_date = request.POST.get('to_date')

    # Assign form field value to local variable
    status = variable_value(request, 'status')
    smscampaign = variable_value(request, 'smscampaign')
    query_string = ''

    if start_date and end_date:
        date_string = 'send_date__gte=' + start_date + '&send_date__lte=' \
            + end_date + '+23%3A59%3A59'
        query_string = return_query_string(query_string, date_string)

    if start_date and end_date == '':
        date_string = 'send_date__gte=' + start_date
        query_string = return_query_string(query_string, date_string)

    if start_date == '' and end_date:
        date_string = 'send_date__lte=' + end_date
        query_string = return_query_string(query_string, date_string)

    if status:
        if status != 'all':
            status_string = 'status__exact=' + status
            query_string = return_query_string(query_string, status_string)

    if smscampaign and smscampaign != '0':
        smscampaign_string = 'sms_campaign=' + smscampaign
        query_string = return_query_string(query_string, smscampaign_string)

    return query_string


def get_sms_notification_status(status):
    """To differentiate campaign & sms campaign status

    >>> get_sms_notification_status(1)
    9

    >>> get_sms_notification_status(2)
    10

    >>> get_sms_notification_status(3)
    11

    >>> get_sms_notification_status(4)
    12
    """
    if status == SMS_CAMPAIGN_STATUS.START:
        return SMS_NOTIFICATION_NAME.sms_campaign_started
    if status == SMS_CAMPAIGN_STATUS.PAUSE:
        return SMS_NOTIFICATION_NAME.sms_campaign_paused
    if status == SMS_CAMPAIGN_STATUS.ABORT:
        return SMS_NOTIFICATION_NAME.sms_campaign_aborted
    if status == SMS_CAMPAIGN_STATUS.END:
        return SMS_NOTIFICATION_NAME.sms_campaign_stopped


def count_contact_of_smscampaign(smscampaign_id):
    """Count no of Contacts from phonebook belonging to the sms campaign"""
    count_contact = Contact.objects.filter(phonebook__smscampaign=smscampaign_id).count()
    if not count_contact:
        return str("phonebook empty")
    return count_contact

########NEW FILE########
__FILENAME__ = create_sms
#
# Newfies-Dialer License
# http://www.newfies-dialer.org
#
# This Source Code Form is subject to the terms of the Mozilla Public
# License, v. 2.0. If a copy of the MPL was not distributed with this file,
# You can obtain one at http://mozilla.org/MPL/2.0/.
#
# Copyright (C) 2011-2012 Star2Billing S.L.
#
# The Initial Developer of the Original Code is
# Arezqui Belaid <info@star2billing.com>
#

from django.core.management.base import BaseCommand
from django.utils.translation import gettext_lazy as _
from django.contrib.contenttypes.models import ContentType
from django.contrib.auth.models import User
from mod_sms.models import SMSMessage, SMSCampaign
from random import choice
from uuid import uuid1
import random
from datetime import datetime, timedelta
from django.utils.timezone import utc


MESSAGE_STATUSES = ['Unsent', 'Sent', 'Delivered', 'Failed', 'No_Route', 'Unauthorized']


def create_sms(smscampaign_id, quantity):
    """
    Create sms
    """

    admin_user = User.objects.get(pk=1)
    try:
        obj_campaign = SMSCampaign.objects.get(id=smscampaign_id)
    except:
        print _('Can\'t find this SMS Campaign : %(id)s' % {'id': smscampaign_id})
        return False

    #'survey' | 'voiceapp'
    try:
        content_type_id = ContentType.objects.get(model='survey').id
    except:
        content_type_id = 1

    length = 5
    chars = "1234567890"
    #alpha = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ'

    day_delta_int = 3
    delta_days = random.randint(0, day_delta_int)
    delta_minutes = random.randint(1, 1440)

    send_date = datetime.utcnow().replace(tzinfo=utc) - timedelta(
        minutes=delta_minutes) - timedelta(days=delta_days)

    duration = 10
    delivery_date = str(datetime.utcnow().replace(tzinfo=utc) - timedelta(
        minutes=delta_minutes) - timedelta(days=delta_days)
        + timedelta(seconds=duration))

    for i in range(1, int(quantity) + 1):
        phonenumber = '' . join([choice(chars) for i in range(length)])
        new_sms = SMSMessage.objects.create(
            content='this is test',
            recipient_number=phonenumber,
            sender=obj_campaign.user,
            sender_number=phonenumber,
            send_date=send_date,
            delivery_date=delivery_date,
            uuid=uuid1(),
            content_type_id=content_type_id,
            object_id=1,
            status=choice(MESSAGE_STATUSES),
            sms_campaign=obj_campaign,
            sms_gateway_id=1)
        print "new_sms:"
        print new_sms

    print _("No of SMS :%(count)s" % {'count': quantity})


class Command(BaseCommand):
    # Use : create_sms '1|1324242' '3|124242'
    #                              'campaign_id|quantity'
    args = _('"sms_campaign_id|quantity" "sms_campaign_id|quantity"')
    help = _("Create new SMSs for a given sms_campaign_id")

    def handle(self, *args, **options):
        """Note that subscriber created this way are only for devel purposes"""

        for newinst in args:
            res = newinst.split('|')
            campaign_id = res[0]
            quantity = res[1]

            create_sms(campaign_id, quantity)

########NEW FILE########
__FILENAME__ = models
#
# Newfies-Dialer License
# http://www.newfies-dialer.org
#
# This Source Code Form is subject to the terms of the Mozilla Public
# License, v. 2.0. If a copy of the MPL was not distributed with this file,
# You can obtain one at http://mozilla.org/MPL/2.0/.
#
# Copyright (C) 2011-2012 Star2Billing S.L.
#
# The Initial Developer of the Original Code is
# Arezqui Belaid <info@star2billing.com>
#

from django.db import models
from django.utils.translation import ugettext_lazy as _
from django.core.urlresolvers import reverse
from django.core.cache import cache
from django.db.models.signals import post_save
from django.utils.encoding import force_unicode
from dateutil.relativedelta import relativedelta
from dialer_contact.models import Phonebook, Contact
from dialer_contact.constants import CONTACT_STATUS
from dialer_campaign.models import common_contact_authorization
from user_profile.models import UserProfile
from sms.models import Message
from sms.models import Gateway
from constants import SMS_CAMPAIGN_STATUS, SMS_SUBSCRIBER_STATUS
from django_lets_go.intermediate_model_base_class import Model
from django_lets_go.common_functions import get_unique_code
from datetime import datetime
from django.utils.timezone import utc


class SMSCampaignManager(models.Manager):
    """SMSCampaign Manager"""

    def get_running_sms_campaign(self):
        """Return all the active smscampaigns which will be running based on
        the expiry date, the daily start/stop time and days of the week"""
        kwargs = {}
        kwargs['status'] = SMS_CAMPAIGN_STATUS.START
        tday = datetime.utcnow().replace(tzinfo=utc)
        kwargs['startingdate__lte'] = datetime(tday.year, tday.month,
            tday.day, tday.hour, tday.minute, tday.second, tday.microsecond).replace(tzinfo=utc)
        kwargs['expirationdate__gte'] = datetime(tday.year, tday.month,
            tday.day, tday.hour, tday.minute, tday.second, tday.microsecond).replace(tzinfo=utc)

        s_time = str(tday.hour) + ":" + str(tday.minute) + ":" + str(tday.second)
        kwargs['daily_start_time__lte'] = datetime.strptime(s_time, '%H:%M:%S')
        kwargs['daily_stop_time__gte'] = datetime.strptime(s_time, '%H:%M:%S')

        # weekday status 1 - YES
        # self.model._meta.get_field(tday.strftime("%A").lower()).value()
        kwargs[tday.strftime("%A").lower()] = 1

        return SMSCampaign.objects.filter(**kwargs)

    def get_expired_sms_campaign(self):
        """Return all the smscampaigns which are expired or going to expire
         based on the expiry date but status is not 'END'"""
        kwargs = {}
        kwargs['expirationdate__lte'] = datetime.utcnow().replace(tzinfo=utc)
        return SMSCampaign.objects.filter(**kwargs).exclude(status=SMS_CAMPAIGN_STATUS.END)


class SMSCampaign(Model):
    """This defines the SMSCampaign

    **Attributes**:

        * ``campaign_code`` - Auto-generated campaign code to identify the campaign
        * ``name`` - Campaign name
        * ``description`` - Description about the Campaign
        * ``status`` - Campaign status
        * ``callerid`` - Caller ID
        * ``startingdate`` - Starting date of the Campaign
        * ``expirationdate`` - Expiry date of the Campaign
        * ``daily_start_time`` - Start time
        * ``daily_stop_time`` - End time
        * ``week_day_setting`` (monday, tuesday, wednesday, thursday, friday, \
        saturday, sunday)
        * ``frequency`` - Frequency, speed of the campaign. number of calls/min
        * ``maxretry`` - Max retry allowed per user
        * ``intervalretry`` - Time to wait between retries in seconds
        * ``sms_gateway`` - Gateway to transport the SMS
        * ``extra_data`` - Additional data to pass to the application

    **Relationships**:

        * ``content_type`` - Defines the application (``voice_app`` or ``survey``) \
        to use when the call is established on the A-Leg

        * ``object_id`` - Defines the object of content_type application

        * ``content_object`` - Used to define the Voice App or the Survey with generic ForeignKey

        * ``phonebook`` - Many-To-Many relationship to the Phonebook model.

        * ``user`` - Foreign key relationship to the a User model. \
        Each campaign assigned to a User

    **Name of DB table**: sms_campaign
    """
    campaign_code = models.CharField(unique=True, max_length=20, blank=True,
                                     verbose_name=_("SMS campaign code"),
                                     help_text=_('this code is auto-generated by the platform, \
                                     this is used to identify the campaign'),
                                     default=(lambda: get_unique_code(length=5)))

    name = models.CharField(max_length=100, verbose_name=_('name'))
    description = models.TextField(verbose_name=_('description'), blank=True,
                                   null=True, help_text=_("campaign description"))
    user = models.ForeignKey('auth.User', related_name='SMSCampaign owner')
    status = models.IntegerField(choices=list(SMS_CAMPAIGN_STATUS),
                                 default=SMS_CAMPAIGN_STATUS.PAUSE, verbose_name=_("status"))
    callerid = models.CharField(max_length=80, blank=True,
                                verbose_name=_("Caller ID Number"),
                                help_text=_("outbound Caller ID"))
    #General Starting & Stopping date
    startingdate = models.DateTimeField(default=(lambda: datetime.utcnow().replace(tzinfo=utc)),
                                        verbose_name=_('start'))

    expirationdate = models.DateTimeField(
        default=(lambda: datetime.utcnow().replace(tzinfo=utc) + relativedelta(months=+1)),
        verbose_name=_('finish'))
    #Per Day Starting & Stopping Time
    daily_start_time = models.TimeField(default='00:00:00')
    daily_stop_time = models.TimeField(default='23:59:59')
    monday = models.BooleanField(default=True, verbose_name=_('monday'))
    tuesday = models.BooleanField(default=True, verbose_name=_('tuesday'))
    wednesday = models.BooleanField(default=True, verbose_name=_('wednesday'))
    thursday = models.BooleanField(default=True, verbose_name=_('thursday'))
    friday = models.BooleanField(default=True, verbose_name=_('friday'))
    saturday = models.BooleanField(default=True, verbose_name=_('saturday'))
    sunday = models.BooleanField(default=True, verbose_name=_('sunday'))
    #Campaign Settings
    frequency = models.IntegerField(default='10', blank=True, null=True,
                                    verbose_name=_('frequency'),
                                    help_text=_("SMS per minute"))

    maxretry = models.IntegerField(default='0', blank=True, null=True,
                                   verbose_name=_('max retries'),
                                   help_text=_("maximum retries per contact"))
    intervalretry = models.IntegerField(default='300', blank=True, null=True,
        verbose_name=_('time between Retries'),
        help_text=_("time delay in seconds before retrying contact"))

    sms_gateway = models.ForeignKey(Gateway, verbose_name=_("sms gateway"),
                                    related_name="SMS Gateway",
                                    help_text=_("select SMS gateway"))
    text_message = models.TextField(verbose_name=_('text Message'), blank=False, null=False)

    extra_data = models.CharField(max_length=120, blank=True,
                                  verbose_name=_("extra parameters"),
                                  help_text=_("additional application parameters."))

    created_date = models.DateTimeField(auto_now_add=True, verbose_name='Date')
    updated_date = models.DateTimeField(auto_now=True)

    phonebook = models.ManyToManyField(Phonebook, blank=True, null=True)

    imported_phonebook = models.CharField(max_length=500, default='',
                                          verbose_name=_('list of imported phonebook'))
    totalcontact = models.IntegerField(default=0, blank=True, null=True,
                                       verbose_name=_('total contact'),
                                       help_text=_("total contact for this campaign"))

    objects = SMSCampaignManager()

    def __unicode__(self):
        return u"%s" % (self.name)

    class Meta:
        permissions = (
            ("view_smscampaign", _('can see SMS campaign')),
            ("view_sms_dashboard", _('can see SMS campaign dashboard'))
        )
        db_table = u'sms_campaign'
        verbose_name = _("SMS campaign")
        verbose_name_plural = _("SMS campaigns")

    def update_sms_campaign_status(self):
        """Update the sms_campaign's status

        For example,
        If campaign is active, you can change status to 'Pause' or 'Stop'
        """
        # active - 1 | pause - 2 | abort - 3 | stop - 4
        if self.status == SMS_CAMPAIGN_STATUS.START:
            return "<a href='%s'>Pause</a> | <a href='%s'>Abort</a> | <a href='%s'>Stop</a>" % (
                reverse('mod_sms.views.update_sms_campaign_status_admin', args=[self.pk, SMS_CAMPAIGN_STATUS.PAUSE]),
                reverse('mod_sms.views.update_sms_campaign_status_admin', args=[self.pk, SMS_CAMPAIGN_STATUS.ABORT]),
                reverse('mod_sms.views.update_sms_campaign_status_admin', args=[self.pk, SMS_CAMPAIGN_STATUS.END]))

        if self.status == SMS_CAMPAIGN_STATUS.PAUSE:
            return "<a href='%s'>Start</a> | <a href='%s'>Abort</a> | <a href='%s'>Stop</a>" % (
                reverse('mod_sms.views.update_sms_campaign_status_admin', args=[self.pk, SMS_CAMPAIGN_STATUS.START]),
                reverse('mod_sms.views.update_sms_campaign_status_admin', args=[self.pk, SMS_CAMPAIGN_STATUS.ABORT]),
                reverse('mod_sms.views.update_sms_campaign_status_admin', args=[self.pk, SMS_CAMPAIGN_STATUS.END]))

        if self.status == SMS_CAMPAIGN_STATUS.ABORT:
            return "<a href='%s'>Start</a> | <a href='%s'>Pause</a> | <a href='%s'>Stop</a>" % (
                reverse('mod_sms.views.update_sms_campaign_status_admin', args=[self.pk, SMS_CAMPAIGN_STATUS.START]),
                reverse('mod_sms.views.update_sms_campaign_status_admin', args=[self.pk, SMS_CAMPAIGN_STATUS.PAUSE]),
                reverse('mod_sms.views.update_sms_campaign_status_admin', args=[self.pk, SMS_CAMPAIGN_STATUS.END]))

        if self.status == SMS_CAMPAIGN_STATUS.END:
            return "<a href='%s'>Start</a> | <a href='%s'>Pause</a> | <a href='%s'>Abort</a>" % (
                reverse('mod_sms.views.update_sms_campaign_status_admin', args=[self.pk, SMS_CAMPAIGN_STATUS.START]),
                reverse('mod_sms.views.update_sms_campaign_status_admin', args=[self.pk, SMS_CAMPAIGN_STATUS.PAUSE]),
                reverse('mod_sms.views.update_sms_campaign_status_admin', args=[self.pk, SMS_CAMPAIGN_STATUS.ABORT]))

    update_sms_campaign_status.allow_tags = True
    update_sms_campaign_status.short_description = _('action')

    def count_contact_of_phonebook(self, status=None):
        """Count the no. of Contacts in a phonebook"""
        if status == CONTACT_STATUS.ACTIVE:
            count_contact = Contact.objects.filter(
                status=CONTACT_STATUS.ACTIVE,
                phonebook__smscampaign=self.id).count()
        else:
            count_contact = Contact.objects.filter(
                phonebook__smscampaign=self.id).count()
        if not count_contact:
            return _("Phonebook Empty")
        return count_contact
    count_contact_of_phonebook.allow_tags = True
    count_contact_of_phonebook.short_description = _('contact')

    def is_authorized_contact(self, str_contact):
        """Check if a contact is authorized"""
        try:
            dialersetting = UserProfile.objects.get(user=self.user).dialersetting
            return common_contact_authorization(dialersetting, str_contact)
        except UserProfile.DoesNotExist:
            return False

    def get_active_max_frequency(self):
        """Get the active max frequency"""
        try:
            sms_dialersetting = UserProfile.objects.get(user=self.user).dialersetting
        except UserProfile.DoesNotExist:
            return self.frequency

        # sms_max_frequency
        max_frequency = sms_dialersetting.sms_max_frequency
        if max_frequency < self.frequency:
            return max_frequency

        return self.frequency

    def get_active_contact(self):
        """Get all the active Contacts from the phonebook"""
        list_contact = Contact.objects.filter(
            phonebook__smscampaign=self.id,
            status=CONTACT_STATUS.ACTIVE).all()
        if not list_contact:
            return False
        return list_contact

    def get_active_contact_no_subscriber(self):
        """List of active contacts that do not exist in Campaign Subscriber"""
        # The list of active contacts that doesn't
        # exist in SMSCampaignSubscriber

        #TODO : This might kill performance on huge phonebook...
        query = \
            'SELECT dc.id, dc.phonebook_id, dc.contact, dc.last_name, \
            dc.first_name, dc.email, dc.city, dc.description, \
            dc.status, dc.additional_vars, dc.created_date, dc.updated_date \
            FROM dialer_contact as dc \
            INNER JOIN dialer_phonebook ON \
            (dc.phonebook_id = dialer_phonebook.id) \
            INNER JOIN sms_campaign_phonebook ON \
            (dialer_phonebook.id = sms_campaign_phonebook.phonebook_id) \
            WHERE sms_campaign_phonebook.smscampaign_id = %s \
            AND dc.status = 1 \
            AND dc.id NOT IN \
            (SELECT  sms_campaign_subscriber.contact_id \
            FROM sms_campaign_subscriber \
            WHERE sms_campaign_subscriber.sms_campaign_id = %s)' % \
            (str(self.id), str(self.id),)

        raw_contact_list = Contact.objects.raw(query)
        return raw_contact_list

    def progress_bar(self):
        """Progress bar generated based on no of contacts"""
        # Cache campaignsubscriber_count
        count_contact = Contact.objects.filter(phonebook__smscampaign=self.id).count()

        # Cache need to be set per campaign
        # sms_campaignsubscriber_count_key_campaign_id_1
        sms_campaignsubscriber_count = cache.get(
            'sms_campaignsubscriber_count_key_campaign_id_' + str(self.id))
        #sms_campaignsubscriber_count = None
        if sms_campaignsubscriber_count is None:
            list_contact = Contact.objects.values_list('id', flat=True)\
                .filter(phonebook__smscampaign=self.id)
            sms_campaignsubscriber_count = 0

            try:
                sms_campaignsubscriber_count += SMSCampaignSubscriber.objects.filter(
                    contact__in=list_contact, sms_campaign=self.id,
                    status=SMS_SUBSCRIBER_STATUS.COMPLETE).count()
            except:
                pass

            cache.set("sms_campaignsubscriber_count_key_campaign_id_" + str(self.id),
                      sms_campaignsubscriber_count, 5)

        sms_campaignsubscriber_count = int(sms_campaignsubscriber_count)
        count_contact = int(count_contact)

        if count_contact > 0:
            percentage_pixel = (float(sms_campaignsubscriber_count) / count_contact) * 100
            percentage_pixel = int(percentage_pixel)
        else:
            percentage_pixel = 0
        sms_campaignsubscriber_count_string = "sms_campaign-subscribers (" + \
            str(sms_campaignsubscriber_count) + ")"
        return "<div title='%s' style='width: 100px; border: 1px solid #ccc;'>\
                <div style='height: 4px; width: %dpx; background: #555; '>\
                </div></div>" % (sms_campaignsubscriber_count_string, percentage_pixel)
    progress_bar.allow_tags = True
    progress_bar.short_description = _('progress')

    def sms_campaignsubscriber_detail(self):
        """This will link to sms_campaign subscribers who are associated with
        the sms_campaign"""
        model_name = SMSCampaignSubscriber._meta.object_name.lower()
        app_label = self._meta.app_label
        link = '/admin/%s/%s/' % (app_label, model_name)
        link += '?sms_campaign__id=%d' % self.id
        display_link = _("<a href='%(link)s'>%(name)s</a>") %\
            {'link': link, 'name': _('details')}
        return display_link
    sms_campaignsubscriber_detail.allow_tags = True
    sms_campaignsubscriber_detail.short_description = _('SMSCampaign Subscriber')

    def get_pending_subscriber(self, limit=1000):
        """Get all the pending subscribers from the sms_campaign"""
        list_subscriber = SMSCampaignSubscriber.objects.filter(
            sms_campaign=self.id, status=SMS_SUBSCRIBER_STATUS.PENDING)\
            .all()[:limit]
        if not list_subscriber:
            return False
        return list_subscriber

    def get_pending_subscriber_update(self, limit=1000, status=6):
        """Get all the pending subscribers from the campaign"""
        # TODO in django 1.4 : replace by SELECT FOR UPDATE
        list_subscriber = SMSCampaignSubscriber.objects.filter(
            sms_campaign=self.id, status=SMS_SUBSCRIBER_STATUS.PENDING)\
            .all()[:limit]
        if not list_subscriber:
            return False
        for elem_subscriber in list_subscriber:
            elem_subscriber.status = status
            elem_subscriber.save()
        return list_subscriber

    def common_sms_campaign_status(self, status):
        """SMS Campaign Status (e.g. start | stop | abort | pause) needs to be changed.
        It is a common function for the admin and customer UI's

        **Attributes**:

            * ``status`` - selected status for the sms campaign record

        **Logic Description**:

            * Selected SMS Campaign's status needs to be changed.
              Changed status can be start, stop or pause.

            * This function is used by ``update_sms_campaign_status_admin()`` &
              ``update_sms_campaign_status_cust()``
        """
        previous_status = self.status
        self.status = status
        self.save()

        # Start tasks to import subscriber
        if status == SMS_CAMPAIGN_STATUS.START and previous_status != SMS_CAMPAIGN_STATUS.START:
            from mod_sms.tasks import sms_collect_subscriber
            sms_collect_subscriber.delay(self.id)

        return self.user


class SMSCampaignSubscriber(Model):
    """This defines the Contact imported to a SMSCampaign

    **Attributes**:

        * ``last_attempt`` -
        * ``count_attempt`` -
        * ``duplicate_contact`` -
        * ``status`` -

    **Relationships**:

        * ``contact`` - Foreign key relationship to the Contact model.
        * ``campaign`` - Foreign key relationship to the Campaign model.

    **Name of DB table**: sms_campaign_subscriber
    """
    message = models.ForeignKey(Message, null=True, blank=True,
                                help_text=_("select message"))
    contact = models.ForeignKey(Contact, null=True, blank=True,
                                help_text=_("select contact"))
    sms_campaign = models.ForeignKey(SMSCampaign, null=True, blank=True,
                                     help_text=_("select SMS campaign"))
    last_attempt = models.DateTimeField(null=True, blank=True,
                                        verbose_name=_("last attempt"))
    count_attempt = models.IntegerField(null=True, blank=True, default='0',
                                        verbose_name=_("count attempts"))
    #We duplicate contact to create a unique constraint
    duplicate_contact = models.CharField(max_length=90,
                                         verbose_name=_("contact"))
    status = models.IntegerField(choices=list(SMS_SUBSCRIBER_STATUS),
                                 default=SMS_SUBSCRIBER_STATUS.PENDING,
                                 blank=True, null=True, verbose_name=_("status"),
                                 db_index=True)

    created_date = models.DateTimeField(auto_now_add=True, verbose_name='Date')
    updated_date = models.DateTimeField(auto_now=True)

    class Meta:
        db_table = u'sms_campaign_subscriber'
        verbose_name = _("SMS campaign subscriber")
        verbose_name_plural = _("SMS campaign subscribers")
        unique_together = ['contact', 'sms_campaign']

    def __unicode__(self):
            return u"%s" % str(self.id)

    def contact_name(self):
        if self.contact:
            return self.contact.first_name
        else:
            return ''

    # static method to perform a stored procedure
    # Ref link - http://www.chrisumbel.com/article/django_python_stored_procedures.aspx
    """
    @staticmethod
    def importcontact_pl_sql(campaign_id, phonebook_id):
        # create a cursor
        from django.db import connection
        cur = connection.cursor()

        # execute the stored procedure passing in
        # campaign_id, phonebook_id as a parameter
        cur.callproc('importcontact_pl_sql', [campaign_id, phonebook_id])

        cur.close()
        return True
    """


class SMSMessage(Message):
    """extension on Message

    **Attributes**:


    **Relationships**:

        * ``message`` - One to one relationship to the Message model.
        * ``sms_campaign`` - Foreign key relationship to the SMSCampaign model.

    **Name of DB table**: message_smscampaign
    """
    message = models.OneToOneField(Message)
    sms_campaign = models.ForeignKey(SMSCampaign, null=True, blank=True,
                                     help_text=_("select SMS campaign"))
    sms_gateway = models.ForeignKey(Gateway, null=True, blank=True,
                                    verbose_name=_("sms gateway"),
                                    related_name="smsmessage_smsgateway",
                                    help_text=_("select SMS gateway"))

    class Meta:
        permissions = (
            ("view_sms_report", _('can see SMS report')),
        )
        db_table = u'smsmessage'
        verbose_name = _("SMS message")
        verbose_name_plural = _("SMS messages")


class SMSTemplate(Model):
    """
    This table store the SMS Template
    """
    label = models.CharField(max_length=75, help_text=_('SMS template name'))
    template_key = models.CharField(max_length=30, unique=True,
                                    help_text=_('Unique name used to pick some template for recurring action, such as activation or warning'))
    sender_phonenumber = models.CharField(max_length=75)
    sms_text = models.TextField(max_length=500)
    created_date = models.DateTimeField(auto_now_add=True)

    class Meta:
        db_table = u'sms_template'
        verbose_name = _('SMS template')
        verbose_name_plural = _('SMS templates')

    def __unicode__(self):
        return force_unicode(self.template_key)


def post_save_add_contact(sender, **kwargs):
    """A ``post_save`` signal is sent by the Contact model instance whenever
    it is going to save.

    **Logic Description**:

        * When new contact is added into ``Contact`` model, active the
          campaign list will be checked with the contact status.
        * If the active campaign list count is more than one & the contact
          is active, the contact will be added into ``SMSCampaignSubscriber``
          model.
    """
    obj = kwargs['instance']
    active_campaign_list = SMSCampaign.objects.filter(
        phonebook__contact__id=obj.id, status=SMS_CAMPAIGN_STATUS.START)
    # created instance = True + active contact + active_campaign
    if kwargs['created'] and obj.status == SMS_CAMPAIGN_STATUS.START and active_campaign_list.count() >= 1:
        for elem_campaign in active_campaign_list:
            try:
                SMSCampaignSubscriber.objects.create(
                    contact=obj,
                    duplicate_contact=obj.contact,
                    status=SMS_CAMPAIGN_STATUS.START,  # START
                    sms_campaign=elem_campaign)
            except:
                pass

post_save.connect(post_save_add_contact, sender=Contact)

########NEW FILE########
__FILENAME__ = tasks
#
# Newfies-Dialer License
# http://www.newfies-dialer.org
#
# This Source Code Form is subject to the terms of the Mozilla Public
# License, v. 2.0. If a copy of the MPL was not distributed with this file,
# You can obtain one at http://mozilla.org/MPL/2.0/.
#
# Copyright (C) 2011-2012 Star2Billing S.L.
#
# The Initial Developer of the Original Code is
# Arezqui Belaid <info@star2billing.com>
#

from django.contrib.contenttypes.models import ContentType
from django.conf import settings
from celery.task import PeriodicTask
from celery.task import Task
from celery.decorators import task
from django_lets_go.only_one_task import only_one
from celery.utils.log import get_task_logger
from sms.tasks import SendMessage
from mod_sms.models import SMSCampaign, SMSCampaignSubscriber, SMSMessage
from mod_sms.constants import SMS_SUBSCRIBER_STATUS, SMS_CAMPAIGN_STATUS
from dialer_campaign.function_def import user_dialer_setting
from datetime import datetime, timedelta
from django.utils.timezone import utc
from math import ceil

logger = get_task_logger(__name__)
LOCK_EXPIRE = 60 * 10 * 1  # Lock expires in 10 minutes
DIV_MIN = 10  # This will divide the minutes by that value and allow to not wait too long for the calls


def get_sms_maxretry(sms_campaign):
    """ If SMS Campaign's maxretry is 0 then
        we should use SMS Dialer Setting sms_maxretry
    """
    if sms_campaign.maxretry is None or not sms_campaign.maxretry >= 0:
        sms_dialer_set = user_dialer_setting(sms_campaign.user)
        maxretry = int(sms_dialer_set.sms_maxretry)
    else:
        maxretry = int(sms_campaign.maxretry)
    return maxretry


@task()
def init_smsrequest(obj_subscriber, obj_sms_campaign):
    """This task outbounds the call

    **Attributes**:

        * ``obj_subscriber`` - SMSCampaignSubscriber object
        * ``user`` - User object
    """
    logger.warning("init_smsrequest contact:%s" % obj_subscriber.contact.contact)

    maxretry = get_sms_maxretry(obj_sms_campaign)

    # Update SMSCampaignSubscriber
    if obj_subscriber.count_attempt <= maxretry:
        if obj_subscriber.count_attempt is None or not obj_subscriber.count_attempt >= 0:
            obj_subscriber.count_attempt = 1
        else:
            obj_subscriber.count_attempt += 1

        text_message = obj_subscriber.contact.replace_tag(obj_subscriber.sms_campaign.text_message)

        # Create Message object
        msg_obj = SMSMessage.objects.create(
            content=text_message,
            recipient_number=obj_subscriber.contact.contact,
            sender=obj_subscriber.sms_campaign.user,
            sender_number=obj_subscriber.sms_campaign.callerid,
            status='Unsent',
            content_type=ContentType.objects.get(model='smscampaignsubscriber'),
            object_id=obj_subscriber.id,
            sms_campaign=obj_sms_campaign,
        )

        obj_subscriber.message = msg_obj
        obj_subscriber.last_attempt = datetime.utcnow().replace(tzinfo=utc)
        obj_subscriber.save()

        # Send sms
        logger.warning("Call msg_obj id:%d - gateway_id:%d" % (msg_obj.id, obj_sms_campaign.sms_gateway_id))
        SendMessage.delay(msg_obj.id, obj_sms_campaign.sms_gateway_id)
    else:
        logger.error("Max retry exceeded, sub_id:%s" % obj_subscriber.id)

    return True


#TODO: Put a priority on this task
class check_sms_campaign_pendingcall(Task):
    @only_one(ikey="check_pendingsms", timeout=LOCK_EXPIRE)
    def run(self, sms_campaign_id):
        """This will execute the outbound calls in the sms_campaign

        **Attributes**:

            * ``sms_campaign_id`` - SMSCampaign ID

        **Usage**:

            check_sms_campaign_pendingcall.delay(sms_campaign_id)
        """
        logger = self.get_logger()

        logger.info("TASK :: check_sms_campaign_pendingcall = %s" % str(sms_campaign_id))
        try:
            obj_sms_campaign = SMSCampaign.objects.get(id=sms_campaign_id)
        except:
            logger.error('Cannot find this SMS Campaign')
            return False

        #TODO: Control the Speed
        #if there is many task pending we should slow down
        frequency = obj_sms_campaign.frequency  # default 10 calls per minutes

        #Speed
        #check if the other tasks send for this sms_campaign finished to be ran

        #Get the subscriber of this sms_campaign
        # get_pending_subscriber get Max 1000 records
        list_subscriber = obj_sms_campaign.get_pending_subscriber_update(
            frequency, SMS_SUBSCRIBER_STATUS.IN_PROCESS)
        if list_subscriber:
            logger.debug("Number of subscriber found : %d" % len(list_subscriber))

        try:
            no_subscriber = list_subscriber.count()
        except AttributeError:
            no_subscriber = 0

        if no_subscriber == 0:
            logger.info("No Subscriber to proceed on this sms_campaign")
            return False

        #find how to dispatch them in the current minutes
        time_to_wait = 6.0 / no_subscriber
        count = 0

        for elem_camp_subscriber in list_subscriber:
            """Loop on Subscriber and start the initcall task"""
            count = count + 1
            logger.info("Add SMS Message for Subscriber (%s) & wait (%s) " %
                        (str(elem_camp_subscriber.id), str(time_to_wait)))

            #Check if the contact is authorized
            if not obj_sms_campaign.is_authorized_contact(elem_camp_subscriber.contact.contact):
                logger.error("Error : Contact not authorized")
                elem_camp_subscriber.status = SMS_SUBSCRIBER_STATUS.NOT_AUTHORIZED  # Update to Not Authorized
                elem_camp_subscriber.save()
                return True

            #Todo Check if it's a good practice / implement a PID algorithm
            second_towait = ceil(count * time_to_wait)
            launch_date = datetime.utcnow().replace(tzinfo=utc) + timedelta(seconds=second_towait)

            logger.warning("Init SMS in %s at %s" % (str(second_towait), launch_date.strftime("%b %d %Y %I:%M:%S")))

            # Send sms through init_smsrequest
            init_smsrequest.apply_async(
                args=[elem_camp_subscriber, obj_sms_campaign],
                countdown=second_towait)

        return True


class spool_sms_nocampaign(PeriodicTask):
    """A periodic task that checks the sms not assigned to a campaign, create and tasks the calls

    **Usage**:

        spool_sms_nocampaign.delay()
    """
    run_every = timedelta(seconds=int(60 / DIV_MIN))
    #NOTE : until we implement a PID Controller :
    #http://en.wikipedia.org/wiki/PID_controller

    #The sms_campaign have to run every minutes in order to control the number
    # of calls per minute. Cons : new calls might delay 60seconds
    #run_every = timedelta(seconds=60)

    @only_one(ikey="spool_sms_nocampaign", timeout=LOCK_EXPIRE)
    def run(self, **kwargs):
        logger = self.get_logger(**kwargs)
        logger.warning("TASK :: Check spool_sms_nocampaign")

        #start_from = datetime.utcnow().replace(tzinfo=utc)
        #list_sms = SMSMessage.objects.filter(delivery_date__lte=start_from, status='Unsent', sms_campaign__isnull=True)
        list_sms = SMSMessage.objects.filter(status='Unsent', sms_campaign__isnull=True)
        logger.warning("TASK :: Check spool_sms_nocampaign -> COUNT SMS (%d)" % list_sms.count())

        for sms in list_sms:
            logger.debug("=> SMS Message (id:%d - phonenumber:%s)" % (sms.id, sms.sender_number))
            # Send SMS
            SendMessage.delay(sms.id, sms.sms_gateway_id)


class sms_campaign_running(PeriodicTask):
    """A periodic task that checks the sms_campaign, create and tasks the calls

    **Usage**:

        sms_campaign_running.delay()
    """
    run_every = timedelta(seconds=int(60 / DIV_MIN))
    #NOTE : until we implement a PID Controller :
    #http://en.wikipedia.org/wiki/PID_controller

    #The sms_campaign have to run every minutes in order to control the number
    # of calls per minute. Cons : new calls might delay 60seconds
    #run_every = timedelta(seconds=60)

    def run(self, **kwargs):
        logger = self.get_logger(**kwargs)
        logger.warning("TASK :: Check if there is sms_campaign_running")

        for sms_campaign in SMSCampaign.objects.get_running_sms_campaign():
            logger.debug("=> SMS Campaign name %s (id:%s)" % (sms_campaign.name,
                                                              sms_campaign.id))
            keytask = 'check_smscampaign_pendingsms-%d' % (sms_campaign.id)
            check_sms_campaign_pendingcall.delay(sms_campaign.id, keytask=keytask)


#!!! USED
class SMSImportPhonebook(Task):
    """
    ImportPhonebook class call the import for a specific campaign_id and phonebook_id

    **Usage**:

        SMSImportPhonebook.delay(campaign_id, phonebook_id)
    """
    @only_one(ikey="import_phonebook", timeout=LOCK_EXPIRE)
    def run(self, campaign_id, phonebook_id):
        """
        Read all the contact from phonebook_id and insert into subscriber
        """
        logger = self.get_logger()
        logger.info("TASK :: import_phonebook")
        obj_campaign = SMSCampaign.objects.get(id=campaign_id)

        #Faster method, ask the Database to do the job
        importcontact_custom_sql(campaign_id, phonebook_id)

        #Count contact imported
        count_contact = SMSCampaignSubscriber.objects.filter(sms_campaign=campaign_id).count()

        #Add the phonebook id to the imported list
        if obj_campaign.imported_phonebook == '':
            sep = ''
        else:
            sep = ','
        obj_campaign.imported_phonebook = obj_campaign.imported_phonebook + \
            '%s%d' % (sep, phonebook_id)
        obj_campaign.totalcontact = count_contact
        obj_campaign.save()
        return True


#!!! USED
# OPTIMIZATION - FINE
class sms_campaign_spool_contact(PeriodicTask):
    """A periodic task that checks the the running campaign
    for each running campaign it will check if it's necessary to import
    the contact from the phonebook to the subscriber list

    **Usage**:

        sms_campaign_spool_contact.delay()
    """
    # The campaign have to run every minutes in order to control the number
    # of calls per minute. Cons : new calls might delay 60seconds
    run_every = timedelta(seconds=60)

    def run(self, **kwargs):
        logger.info("TASK :: sms_campaign_spool_contact")

        for campaign in SMSCampaign.objects.get_running_sms_campaign():
            logger.debug("=> Spool Contact : SMSCampaign name %s (id:%s)" %
                        (campaign.name, str(campaign.id)))
            # Start collecting the contacts for this campaign
            sms_collect_subscriber.delay(campaign.id)


#!!! USED
@task()
def sms_collect_subscriber(campaign_id):
    """
    This task will collect all the contact and create the Subscriber
    if the phonebook_id is no in the list of imported_phonebook IDs.

    **Attributes**:

        * ``campaign_id`` - Campaign ID

    **Usage**:

        sms_collect_subscriber.delay(campaign_id)
    """
    logger.debug("Collect subscribers for the campaign = %s" % str(campaign_id))

    #Retrieve the list of active contact
    obj_campaign = SMSCampaign.objects.get(id=campaign_id)
    list_phonebook = obj_campaign.phonebook.all()

    for item_phonebook in list_phonebook:
        phonebook_id = item_phonebook.id

        # check if phonebook_id is missing in imported_phonebook list
        if not str(phonebook_id) in obj_campaign.imported_phonebook.split(','):
            #Run import
            logger.info("SMS ImportPhonebook %d for campaign = %d" % (phonebook_id, campaign_id))
            keytask = 'sms_import_phonebook-%d-%d' % (campaign_id, phonebook_id)
            SMSImportPhonebook().delay(obj_campaign.id, phonebook_id, keytask=keytask)

    return True


def importcontact_custom_sql(sms_campaign_id, phonebook_id):
    from django.db import connection, transaction
    cursor = connection.cursor()

    # Call PL-SQL stored procedure
    #CampaignSubscriber.importcontact_pl_sql(sms_campaign_id, phonebook_id)

    # Data insert operation - commit required
    if settings.DATABASES['default']['ENGINE'] == 'django.db.backends.mysql':
        # Data insert operation - commit required
        sqlimport = "INSERT IGNORE INTO sms_campaign_subscriber (contact_id, "\
            "sms_campaign_id, duplicate_contact, status, created_date, updated_date) "\
            "SELECT id, %d, contact, 1, NOW(), NOW() FROM dialer_contact "\
            "WHERE phonebook_id=%d AND dialer_contact.status=1" % \
            (sms_campaign_id, phonebook_id)

    elif settings.DATABASES['default']['ENGINE'] == 'django.db.backends.postgresql_psycopg2':
        # Data insert operation -
        # http://stackoverflow.com/questions/12451053/django-bulk-create-with-ignore-rows-that-cause-integrityerror
        sqlimport = "LOCK TABLE sms_campaign_subscriber IN EXCLUSIVE MODE;" \
            "INSERT INTO sms_campaign_subscriber (contact_id, "\
            "sms_campaign_id, duplicate_contact, status, created_date, updated_date) "\
            "SELECT id, %d, contact, 1, NOW(), NOW() FROM dialer_contact "\
            "WHERE phonebook_id=%d AND dialer_contact.status=1 AND NOT EXISTS (" \
            "SELECT 1 FROM sms_campaign_subscriber WHERE "\
            "sms_campaign_subscriber.sms_campaign_id=%d "\
            "AND dialer_contact.id = sms_campaign_subscriber.contact_id );" % \
            (sms_campaign_id, phonebook_id, sms_campaign_id)
    else:
        # Other DB
        logger.error("Database not supported (%s)" %
                     settings.DATABASES['default']['ENGINE'])
        return False

    cursor.execute(sqlimport)
    transaction.commit_unless_managed()

    return True


#Expire check
class sms_campaign_expire_check(PeriodicTask):
    """A periodic task that checks the SMS campaign expiration

    **Usage**:

        sms_campaign_expire_check.delay()
    """
    #The sms_campaign have to run every minutes in order to control the number
    # of calls per minute. Cons : new calls might delay 60seconds
    run_every = timedelta(seconds=60)

    @only_one(ikey="sms_campaign_expire_check", timeout=LOCK_EXPIRE)
    def run(self, **kwargs):
        logger = self.get_logger(**kwargs)
        logger.info("TASK :: sms_campaign_expire_check")
        for sms_campaign in SMSCampaign.objects.get_expired_sms_campaign():
            logger.debug("=> SMS Campaign name %s (id:%s)" % (sms_campaign.name,
                                                              sms_campaign.id))
            sms_campaign.common_sms_campaign_status(SMS_CAMPAIGN_STATUS.END)


class resend_sms_update_smscampaignsubscriber(PeriodicTask):
    """A periodic task that resend the failed sms,

    **Usage**:

        resend_sms_update_smscampaignsubscriber.delay()
    """
    run_every = timedelta(seconds=60)

    @only_one(ikey="resend_sms_update_smscampaignsubscriber", timeout=LOCK_EXPIRE)
    def run(self, **kwargs):
        logger = self.get_logger(**kwargs)
        logger.warning("TASK :: RESEND sms")

        for sms_campaign in SMSCampaign.objects.get_running_sms_campaign():
            logger.info("=> SMS Campaign name %s (id:%s)" % (sms_campaign.name, sms_campaign.id))
            sms_maxretry = get_sms_maxretry(sms_campaign)
            limit = 1000
            list_subscriber = SMSCampaignSubscriber.objects.filter(
                sms_campaign=sms_campaign,
                status=SMS_SUBSCRIBER_STATUS.IN_PROCESS)[:limit]

            if not list_subscriber:
                #Go to the next campaign
                logger.info("No subscribers in this campaign (id:%s)" % (sms_campaign.id))
                continue

            for subscriber in list_subscriber:
                if not subscriber.message:
                    logger.error("=> SMS with No Message")
                    subscriber.status = SMS_SUBSCRIBER_STATUS.FAIL  # 'FAIL'
                    subscriber.save()
                    continue

                logger.warning("=> SMS Message Status = %s" % subscriber.message.status)
                if subscriber.message.status == 'Failed':
                    # check sms_maxretry
                    if subscriber.count_attempt >= sms_maxretry:
                        subscriber.status = SMS_SUBSCRIBER_STATUS.FAIL  # 'FAIL'
                        subscriber.save()
                    else:

                        text_message = subscriber.contact.replace_tag(subscriber.sms_campaign.text_message)
                        logger.info("SendMessage text_message:%s" % text_message)

                        # Create Message object
                        msg_obj = SMSMessage.objects.create(
                            content=text_message,
                            recipient_number=subscriber.contact.contact,
                            sender=subscriber.sms_campaign.user,
                            sender_number=subscriber.sms_campaign.callerid,
                            status='Unsent',
                            content_type=ContentType.objects.get(model='smscampaignsubscriber'),
                            object_id=subscriber.id,
                            sms_campaign=sms_campaign,
                        )

                        # Send sms
                        SendMessage.delay(msg_obj.id, subscriber.sms_campaign.sms_gateway_id)

                        subscriber.message = msg_obj
                        subscriber.last_attempt = datetime.utcnow().replace(tzinfo=utc)
                        subscriber.count_attempt += 1
                        subscriber.save()

                if subscriber.message.status == 'Sent' or subscriber.message.status == 'Delivered':
                    subscriber.status = SMS_SUBSCRIBER_STATUS.COMPLETE  # 'COMPLETE'
                    subscriber.save()

########NEW FILE########
__FILENAME__ = mod_sms_tags
#
# Newfies-Dialer License
# http://www.newfies-dialer.org
#
# This Source Code Form is subject to the terms of the Mozilla Public
# License, v. 2.0. If a copy of the MPL was not distributed with this file,
# You can obtain one at http://mozilla.org/MPL/2.0/.
#
# Copyright (C) 2011-2012 Star2Billing S.L.
#
# The Initial Developer of the Original Code is
# Arezqui Belaid <info@star2billing.com>
#

from django.template.defaultfilters import register
from django.utils.translation import ugettext as _
from mod_sms.constants import SMS_CAMPAIGN_STATUS, SMS_CAMPAIGN_STATUS_COLOR
from mod_utils.function_def import get_common_campaign_status_url, get_common_campaign_status,\
    get_status_value


@register.filter(name='sms_campaign_status')
def sms_campaign_status(value):
    """SMS Campaign Status

    >>> sms_campaign_status(1)
    'START'

    >>> sms_campaign_status(2)
    'PAUSE'

    >>> sms_campaign_status(3)
    'ABORT'

    >>> sms_campaign_status(4)
    'END'

    >>> sms_campaign_status(0)
    ''
    """
    return get_status_value(value, SMS_CAMPAIGN_STATUS)


@register.filter(name='get_sms_campaign_status')
def get_sms_campaign_status(id):
    return get_common_campaign_status(id, SMS_CAMPAIGN_STATUS, SMS_CAMPAIGN_STATUS_COLOR)


@register.simple_tag(name='get_sms_campaign_status_url')
def get_sms_campaign_status_url(id, status):
    return get_common_campaign_status_url(
        id, status, 'update_sms_campaign_status_cust/', SMS_CAMPAIGN_STATUS)


@register.filter(name='create_duplicate_sms_campaign')
def create_duplicate_sms_campaign(sms_campaign_id):
    """Create link to make duplicate campaign"""
    link = '<a href="#sms-campaign-duplicate"  url="/sms_campaign/duplicate/%s/" class="sms-campaign-duplicate" data-toggle="modal" data-controls-modal="sms-campaign-duplicate" title="%s"><i class="fa fa-copy"></i></a>' \
           % (sms_campaign_id, _('duplicate this sms campaign').capitalize())
    return link


@register.filter(name='get_sms_campaign_textmessage')
def get_sms_campaign_textmessage(sms_campaign_id):
    """Create link to get sms campaign's text-message"""
    link = '<a href="#sms-campaign-textmessage"  url="/sms_campaign/text_message/%s/" class="sms-campaign-textmessage" data-toggle="modal" data-controls-modal="sms-campaign-textmessage" title="%s"><i class="fa fa-search"></i></a>' \
           % (sms_campaign_id, _('get text-message of this sms campaign').capitalize())
    return link

########NEW FILE########
__FILENAME__ = tests
#
# Newfies-Dialer License
# http://www.newfies-dialer.org
#
# This Source Code Form is subject to the terms of the Mozilla Public
# License, v. 2.0. If a copy of the MPL was not distributed with this file,
# You can obtain one at http://mozilla.org/MPL/2.0/.
#
# Copyright (C) 2011-2012 Star2Billing S.L.
#
# The Initial Developer of the Original Code is
# Arezqui Belaid <info@star2billing.com>
#


from django.contrib.auth.models import User
from django.core.management import call_command
from django.test import TestCase
from mod_sms.models import SMSCampaign, SMSMessage, SMSCampaignSubscriber
from mod_sms.views import sms_campaign_list, sms_campaign_add,\
    sms_campaign_change, sms_campaign_del, update_sms_campaign_status_admin,\
    update_sms_campaign_status_cust, sms_dashboard, sms_report, export_sms_report
from mod_sms.templatetags.mod_sms_tags import get_sms_campaign_status_url
from mod_sms.tasks import init_smsrequest, check_sms_campaign_pendingcall, spool_sms_nocampaign,\
    sms_campaign_running, SMSImportPhonebook, sms_campaign_spool_contact, sms_collect_subscriber,\
    sms_campaign_expire_check, resend_sms_update_smscampaignsubscriber
from mod_sms.constants import SMS_CAMPAIGN_STATUS
from user_profile.models import UserProfile
from mod_sms.forms import SMSDashboardForm
from frontend.constants import SEARCH_TYPE
from django_lets_go.utils import BaseAuthenticatedClient
from datetime import datetime
from django.utils.timezone import utc
from uuid import uuid1


class SMSAdminView(BaseAuthenticatedClient):
    """Test cases for SMSCampaign, SMSSubscriber Admin Interface."""

    def test_admin_sms_campaign_view_list(self):
        """Test Function to check admin campaign list"""
        response = self.client.get('/admin/mod_sms/smscampaign/')
        self.failUnlessEqual(response.status_code, 200)

    def test_admin_sms_campaign_view_add(self):
        """Test Function to check admin campaign add"""
        response = self.client.get('/admin/mod_sms/smscampaign/add/')
        self.failUnlessEqual(response.status_code, 200)

    def test_admin_sms_subscriber_view_list(self):
        """Test Function to check admin subscriber list"""
        response = self.client.get('/admin/mod_sms/smscampaignsubscriber/')
        self.failUnlessEqual(response.status_code, 200)

    def test_admin_sms_subscriber_view_add(self):
        """Test Function to check admin subscriber add"""
        response = self.client.get('/admin/mod_sms/smscampaignsubscriber/add/')
        self.failUnlessEqual(response.status_code, 200)

    def test_admin_sms_template_view_list(self):
        """Test Function to check admin subscriber list"""
        response = self.client.get('/admin/mod_sms/smstemplate/')
        self.failUnlessEqual(response.status_code, 200)

    def test_admin_sms_template_view_add(self):
        """Test Function to check admin subscriber add"""
        response = self.client.get('/admin/mod_sms/smstemplate/add/')
        self.failUnlessEqual(response.status_code, 200)

    def test_admin_smsmessage_view_list(self):
        """Test Function to check admin subscriber list"""
        response = self.client.get('/admin/mod_sms/smsmessage/')
        self.failUnlessEqual(response.status_code, 200)

    def test_admin_smsmessage_report(self):
        """Test Function to check admin subscriber add"""
        response = self.client.get('/admin/mod_sms/smsmessage/sms_daily_report/')
        self.failUnlessEqual(response.status_code, 200)


class SMSModuleCustomerView(BaseAuthenticatedClient):
    """Test cases for SMSCampaign Customer Interface."""

    fixtures = ['example_gateways.json', 'auth_user.json', 'gateway.json',
                'phonebook.json', 'contact.json', 'dialer_setting.json',
                'sms_campaign.json', 'user_profile.json', 'message.json',
                'sms_message.json']

    def test_sms_campaign_list(self):
        """Test Function to check sms campaign list"""
        response = self.client.get('/sms_campaign/')
        self.assertEqual(response.status_code, 200)
        self.assertTemplateUsed(response, 'mod_sms/list.html')

        request = self.factory.get('/sms_campaign/')
        request.user = self.user
        request.session = {}
        response = sms_campaign_list(request)
        self.assertEqual(response.status_code, 200)

    def test_sms_campaign_view_add(self):
        """Test Function to check add campaign"""
        request = self.factory.get('/sms_campaign/add/')
        request.user = self.user
        request.session = {}
        response = sms_campaign_add(request)
        self.assertEqual(response.status_code, 200)

        response = self.client.post('/sms_campaign/add/', data={
            "name": "my sms campaign",
            "description": "xyz",
            "sms_gateway": "1",
        }, follow=True)
        self.assertEqual(response.status_code, 200)

        request = self.factory.post('/sms_campaign/add/', {
            "name": "my sms campaign 2",
            "description": "xyz",
            "sms_gateway": "1",
        }, follow=True)
        request.user = self.user
        request.session = {}
        response = sms_campaign_add(request)
        self.assertEqual(response.status_code, 200)

    def test_sms_campaign_view_update(self):
        """Test Function to check update sms campaign"""
        request = self.factory.post('/sms_campaign/1/', {
            "name": "Sample sms campaign",
        }, follow=True)
        request.user = self.user
        request.session = {}
        response = sms_campaign_change(request, 1)
        self.assertEqual(response.status_code, 200)

        request = self.factory.post('/sms_campaign/1/',
            {'delete': 'true'}, follow=True)
        request.user = self.user
        request.session = {}
        response = sms_campaign_change(request, 1)
        self.assertEqual(response.status_code, 200)

    def test_sms_campaign_view_delete(self):
        """Test Function to check delete sms campaign"""
        # delete campaign through campaign_change
        request = self.factory.post('/sms_campaign/del/1/', follow=True)
        request.user = self.user
        request.session = {}
        response = sms_campaign_del(request, 1)
        self.assertEqual(response['Location'], '/sms_campaign/')
        self.assertEqual(response.status_code, 302)

        request = self.factory.post('/sms_campaign/del/', {'select': '1'})
        request.user = self.user
        request.session = {}
        response = sms_campaign_del(request, 0)
        self.assertEqual(response['Location'], '/sms_campaign/')
        self.assertEqual(response.status_code, 302)

    def test_update_sms_campaign_status_admin(self):
        request = self.factory.post('update_sms_campaign_status_admin/1/1/',
            follow=True)
        request.user = self.user
        request.session = {}
        response = update_sms_campaign_status_admin(request, 1, 1)
        self.assertEqual(response.status_code, 302)
        self.assertEqual(response['Location'],
            '/admin/mod_sms/smscampaign/')

    def test_update_sms_campaign_status_cust(self):
        request = self.factory.post(
            'update_sms_campaign_status_cust/1/1/', follow=True)
        request.user = self.user
        request.session = {}
        response = update_sms_campaign_status_cust(request, 1, 1)
        self.assertEqual(response.status_code, 302)
        self.assertEqual(response['Location'], '/sms_campaign/')

        request = self.factory.post(
            'update_sms_campaign_status_cust/1/2/', follow=True)
        request.user = self.user
        request.session = {}
        response = update_sms_campaign_status_cust(request, 1, 2)
        self.assertEqual(response.status_code, 302)

        request = self.factory.post(
            'update_sms_campaign_status_cust/1/3/', follow=True)
        request.user = self.user
        request.session = {}
        response = update_sms_campaign_status_cust(request, 1, 3)
        self.assertEqual(response.status_code, 302)

        request = self.factory.post(
            'update_sms_campaign_status_cust/1/4/', follow=True)
        request.user = self.user
        request.session = {}
        response = update_sms_campaign_status_cust(request, 1, 4)
        self.assertEqual(response.status_code, 302)

    def test_sms_dashboard(self):
        """Test Function to check customer sms_dashboard"""
        response = self.client.get('/sms_dashboard/')
        self.assertTrue(response.context['form'], SMSDashboardForm(self.user))
        self.assertEqual(response.status_code, 200)
        self.assertTemplateUsed(response, 'mod_sms/sms_dashboard.html')

        request = self.factory.post('/sms_dashboard/',
            {'smscampaign': '1',
             'search_type': SEARCH_TYPE.A_Last_30_days})

        request.user = self.user
        request.session = {}
        response = sms_dashboard(request)
        self.assertEqual(response.status_code, 200)

        request = self.factory.post('/sms_dashboard/',
            {'smscampaign': '1',
             'search_type': SEARCH_TYPE.B_Last_7_days})

        request.user = self.user
        request.session = {}
        response = sms_dashboard(request)
        self.assertEqual(response.status_code, 200)

        request = self.factory.post('/sms_dashboard/',
            {'smscampaign': '1',
             'search_type': SEARCH_TYPE.C_Yesterday})

        request.user = self.user
        request.session = {}
        response = sms_dashboard(request)
        self.assertEqual(response.status_code, 200)

        request = self.factory.post('/sms_dashboard/',
            {'smscampaign': '1',
             'search_type': SEARCH_TYPE.D_Last_24_hours})

        request.user = self.user
        request.session = {}
        response = sms_dashboard(request)
        self.assertEqual(response.status_code, 200)

        request = self.factory.post('/sms_dashboard/',
            {'smscampaign': '1',
             'search_type': SEARCH_TYPE.E_Last_12_hours})

        request.user = self.user
        request.session = {}
        response = sms_dashboard(request)
        self.assertEqual(response.status_code, 200)

        request = self.factory.post('/sms_dashboard/',
            {'smscampaign': '1',
             'search_type': SEARCH_TYPE.F_Last_6_hours})

        request.user = self.user
        request.session = {}
        response = sms_dashboard(request)
        self.assertEqual(response.status_code, 200)

        request = self.factory.post('/sms_dashboard/',
            {'smscampaign': '1',
             'search_type': SEARCH_TYPE.G_Last_hour})

        request.user = self.user
        request.session = {}
        response = sms_dashboard(request)
        self.assertEqual(response.status_code, 200)
        response = sms_dashboard(request, on_index='yes')

    def test_sms_report(self):
        """Test Function to check sms report"""
        response = self.client.get('/sms_report/')
        self.assertEqual(response.status_code, 200)
        self.assertTemplateUsed(
            response, 'mod_sms/sms_report.html')

        response = self.client.post(
            '/sms_report/', data={'from_date': datetime.utcnow().replace(tzinfo=utc).strftime("%Y-%m-%d"),
                                  'to_date': datetime.utcnow().replace(tzinfo=utc).strftime("%Y-%m-%d")})
        self.assertEqual(response.status_code, 200)

        request = self.factory.get('/sms_report/')
        request.user = self.user
        request.session = {}
        response = sms_report(request)
        self.assertEqual(response.status_code, 200)

    def test_export_sms_report(self):
        """Test Function to check message export report"""
        request = self.factory.get('/export_sms_report/?format=csv')
        request.user = self.user
        request.session = {}
        request.session['sms_record_kwargs'] = {}
        response = export_sms_report(request)
        self.assertEqual(response.status_code, 200)

        request = self.factory.get('/export_sms_report/?format=json')
        request.user = self.user
        request.session = {}
        request.session['sms_record_kwargs'] = {}
        response = export_sms_report(request)
        self.assertEqual(response.status_code, 200)

        request = self.factory.get('/export_sms_report/?format=xls')
        request.user = self.user
        request.session = {}
        request.session['sms_record_kwargs'] = {}
        response = export_sms_report(request)
        self.assertEqual(response.status_code, 200)


class SMSCeleryTaskTestCase(TestCase):
    """Test cases for celery task"""

    fixtures = ['example_gateways.json', 'auth_user.json', 'gateway.json',
                'phonebook.json', 'contact.json', 'dialer_setting.json',
                'user_profile.json', 'sms_campaign.json', 'message.json',
                'sms_message.json', 'sms_campaign_subscriber.json']

    def test_init_smsrequest(self):
        """Test that the ``init_smsrequest``
        task runs with no errors, and returns the correct result."""
        sms_campaign_obj = SMSCampaign.objects.get(pk=1)
        sms_campaign_subscriber_obj = SMSCampaignSubscriber.objects.get(pk=1)
        result = init_smsrequest.delay(sms_campaign_subscriber_obj, sms_campaign_obj)
        self.assertEqual(result.successful(), True)

    def test_check_sms_campaign_pendingcall(self):
        """Test that the ``check_sms_campaign_pendingcall``
        periodic task runs with no errors, and returns the correct result."""
        result = check_sms_campaign_pendingcall.delay(1)
        self.assertEqual(result.successful(), True)

    def test_sms_campaign_running(self):
        """Test that the ``sms_campaign_running``
        task runs with no errors, and returns the correct result."""
        result = sms_campaign_running.delay()
        self.assertEqual(result.successful(), True)

    def test_sms_campaign_spool_contact(self):
        """Test that the ``sms_campaign_spool_contact``
        periodic task runs with no errors, and returns the correct result."""
        result = sms_campaign_spool_contact.delay()
        self.assertEqual(result.successful(), True)

    def test_import_phonebook(self):
        """Test that the ``import_phonebook``
        periodic task runs with no errors, and returns the correct result."""
        result = SMSImportPhonebook.delay(1, 1)
        self.assertEqual(result.successful(), True)

    def test_sms_campaign_expire_check(self):
        """Test that the ``sms_campaign_expire_check``
        task runs with no errors, and returns the correct result."""
        result = sms_campaign_expire_check.delay()
        self.assertEqual(result.successful(), True)

    def test_resend_sms_update_smscampaignsubscriber(self):
        """Test that the ``resend_sms_update_smscampaignsubscriber``
        periodic task runs with no errors, and returns the correct result."""
        result = resend_sms_update_smscampaignsubscriber.delay()
        self.assertEqual(result.successful(), True)


class SMSCampaignModel(TestCase):
    """Test SMSCampaign, SMSSubscriber models"""

    fixtures = ['example_gateways.json', 'auth_user.json', 'gateway.json',
                'phonebook.json', 'contact.json', 'dialer_setting.json',
                'sms_campaign.json', 'user_profile.json', 'message.json',
                'sms_message.json']

    def setUp(self):
        self.user = User.objects.get(username='admin')

        self.sms_dialer_setting = UserProfile.objects.get(user=self.user).dialersetting
        self.sms_dialer_setting.save()

        self.smscampaign = SMSCampaign(
            name="SMS Campaign",
            user=self.user,
            sms_gateway_id=1,
            status=2
        )
        self.smscampaign.save()
        self.assertEqual(self.smscampaign.__unicode__(), u'SMS Campaign')

        self.sms = SMSMessage(
            message_id=1,
            sms_campaign_id=1,
            sms_gateway_id=1,
            sender=self.user,
            content_type_id=1,
            object_id=1,
            uuid=str(uuid1()),
        )
        self.sms.save()

        # Subscriber model
        self.smssubscriber = SMSCampaignSubscriber(
            message_id=1,
            sms_campaign=self.smscampaign,
            contact_id=1,
            count_attempt=0,
            duplicate_contact=1,
            status=1
        )
        self.smssubscriber.save()
        self.assertTrue(self.smssubscriber.__unicode__())

        # Test mgt command
        call_command("create_sms", "1|10")

    def test_campaign_form(self):
        self.assertEqual(self.smscampaign.name, "SMS Campaign")
        SMSCampaign.objects.get_running_sms_campaign()
        SMSCampaign.objects.get_expired_sms_campaign()

        self.smscampaign.status = SMS_CAMPAIGN_STATUS.PAUSE
        self.smscampaign.save()
        self.smscampaign.update_sms_campaign_status()
        get_sms_campaign_status_url(self.smscampaign.pk, self.smscampaign.status)

        self.smscampaign.status = SMS_CAMPAIGN_STATUS.ABORT
        self.smscampaign.save()
        self.smscampaign.update_sms_campaign_status()
        get_sms_campaign_status_url(self.smscampaign.pk, self.smscampaign.status)

        self.smscampaign.status = SMS_CAMPAIGN_STATUS.END
        self.smscampaign.save()
        self.smscampaign.update_sms_campaign_status()
        get_sms_campaign_status_url(self.smscampaign.pk, self.smscampaign.status)

        self.smscampaign.is_authorized_contact('123456789')

        self.smscampaign.get_active_max_frequency()
        self.smscampaign.get_active_contact()
        self.smscampaign.progress_bar()
        self.smscampaign.sms_campaignsubscriber_detail()
        self.smscampaign.get_pending_subscriber()
        self.smscampaign.get_pending_subscriber_update()

        self.smscampaign.common_sms_campaign_status(SMS_CAMPAIGN_STATUS.START)
        self.smscampaign.common_sms_campaign_status(SMS_CAMPAIGN_STATUS.PAUSE)
        self.smscampaign.common_sms_campaign_status(SMS_CAMPAIGN_STATUS.ABORT)
        self.smscampaign.common_sms_campaign_status(SMS_CAMPAIGN_STATUS.END)

        self.assertEqual(self.smssubscriber.sms_campaign, self.smscampaign)

    def teardown(self):
        self.smscampaign.delete()
        self.smssubscriber.delete()

########NEW FILE########
__FILENAME__ = urls
#
# Newfies-Dialer License
# http://www.newfies-dialer.org
#
# This Source Code Form is subject to the terms of the Mozilla Public
# License, v. 2.0. If a copy of the MPL was not distributed with this file,
# You can obtain one at http://mozilla.org/MPL/2.0/.
#
# Copyright (C) 2011-2012 Star2Billing S.L.
#
# The Initial Developer of the Original Code is
# Arezqui Belaid <info@star2billing.com>
#

from django.conf.urls import patterns

urlpatterns = patterns('mod_sms.views',

    # SMS Campaign urls
    (r'^sms_dashboard/$', 'sms_dashboard'),
    (r'^sms_campaign/$', 'sms_campaign_list'),
    (r'^sms_campaign/add/$', 'sms_campaign_add'),
    (r'^sms_campaign/del/(.+)/$', 'sms_campaign_del'),
    (r'^sms_campaign/duplicate/(.+)/$', 'sms_campaign_duplicate'),
    (r'^sms_campaign/text_message/(.+)/$', 'sms_campaign_text_message'),

    # SMS Campaign Actions (start|stop|pause|abort) for customer UI
    (r'^sms_campaign/update_sms_campaign_status_cust/(\d*)/(\d*)/$',
        'update_sms_campaign_status_cust'),
    (r'^sms_campaign/(.+)/$', 'sms_campaign_change'),

    # SMS Campaign Actions (start|stop|pause|abort) for Admin UI
    (r'^update_sms_campaign_status_admin/(\d*)/(\d*)/$',
        'update_sms_campaign_status_admin'),

    # SMS Report urls
    (r'^sms_report/$', 'sms_report'),
    (r'^export_sms_report/$', 'export_sms_report'),
)

########NEW FILE########
__FILENAME__ = views
#
# Newfies-Dialer License
# http://www.newfies-dialer.org
#
# This Source Code Form is subject to the terms of the Mozilla Public
# License, v. 2.0. If a copy of the MPL was not distributed with this file,
# You can obtain one at http://mozilla.org/MPL/2.0/.
#
# Copyright (C) 2011-2012 Star2Billing S.L.
#
# The Initial Developer of the Original Code is
# Arezqui Belaid <info@star2billing.com>
#

from django.contrib.auth.models import User
from django.contrib.auth.decorators import login_required, permission_required
from django.http import HttpResponseRedirect, HttpResponse
from django.shortcuts import render_to_response, get_object_or_404
from django.db.models import Count
from django.core.urlresolvers import reverse
from django.template.context import RequestContext
from django.utils.translation import ugettext as _
from dialer_contact.models import Contact
from dialer_contact.constants import CONTACT_STATUS
from dialer_campaign.function_def import date_range, user_dialer_setting, \
    dialer_setting_limit
from frontend.function_def import calculate_date
from frontend.constants import SEARCH_TYPE
from frontend_notification.views import frontend_send_notification
from django_lets_go.common_functions import get_pagination_vars, ceil_strdate,\
    percentage, getvar, unset_session_var
from mod_utils.helper import Export_choice
from mod_sms.models import SMSCampaign, SMSCampaignSubscriber, SMSMessage
from mod_sms.constants import SMS_CAMPAIGN_STATUS, SMS_CAMPAIGN_COLUMN_NAME,\
    SMS_REPORT_COLUMN_NAME, COLOR_SMS_DISPOSITION, SMS_NOTIFICATION_NAME,\
    SMS_SUBSCRIBER_STATUS, SMS_MESSAGE_STATUS
from mod_sms.forms import SMSCampaignForm, SMSDashboardForm, SMSSearchForm,\
    SMSCampaignSearchForm, DuplicateSMSCampaignForm
from mod_sms.function_def import check_sms_dialer_setting, get_sms_notification_status
from datetime import datetime
from django.utils.timezone import utc
from dateutil.relativedelta import relativedelta
import tablib
import time


redirect_url_to_smscampaign_list = '/sms_campaign/'


@login_required
def update_sms_campaign_status_admin(request, pk, status):
    """SMS Campaign Status (e.g. start|stop|pause|abort) can be changed from
    admin interface (via sms campaign list)"""
    smscampaign = SMSCampaign.objects.get(pk=pk)
    recipient = smscampaign.common_sms_campaign_status(status)
    sms_notification_status = get_sms_notification_status(int(status))
    frontend_send_notification(request, sms_notification_status, recipient)
    return HttpResponseRedirect(reverse("admin:mod_sms_smscampaign_changelist"))


@login_required
def update_sms_campaign_status_cust(request, pk, status):
    """SMS Campaign Status (e.g. start|stop|pause|abort) can be changed from
    customer interface (via sms campaign list)"""
    smscampaign = SMSCampaign.objects.get(pk=pk)
    recipient = smscampaign.common_sms_campaign_status(status)
    sms_notification_status = get_sms_notification_status(int(status))
    frontend_send_notification(request, sms_notification_status, recipient)
    return HttpResponseRedirect(redirect_url_to_smscampaign_list)


# SMSCampaign
@permission_required('mod_sms.view_smscampaign', login_url='/')
@login_required
def sms_campaign_list(request):
    """List all sms campaigns for the logged in user

    **Attributes**:

        * ``template`` - mod_sms/list.html

    **Logic Description**:

        * List all sms campaigns belonging to the logged in user
    """
    form = SMSCampaignSearchForm(request.user, request.POST or None)
    sort_col_field_list = ['id', 'name', 'startingdate', 'status', 'totalcontact']
    pag_vars = get_pagination_vars(request, sort_col_field_list, default_sort_field='id')

    phonebook_id = ''
    status = 'all'
    post_var_with_page = 0
    if form.is_valid():
        field_list = ['phonebook_id', 'status']
        unset_session_var(request, field_list)
        post_var_with_page = 1
        phonebook_id = getvar(request, 'phonebook_id', setsession=True)
        status = getvar(request, 'status', setsession=True)

    if request.GET.get('page') or request.GET.get('sort_by'):
        post_var_with_page = 1
        phonebook_id = request.session.get('session_phonebook_id')
        status = request.session.get('session_status')
        form = SMSCampaignSearchForm(request.user, initial={'status': status,
                                                            'phonebook_id': phonebook_id})

    if post_var_with_page == 0:
        # default
        # unset session var
        field_list = ['status', 'phonebook_id']
        unset_session_var(request, field_list)

    kwargs = {}
    if phonebook_id and phonebook_id != '0':
        kwargs['phonebook__id__in'] = [int(phonebook_id)]

    if status and status != 'all':
        kwargs['status'] = status

    smscampaign_list = SMSCampaign.objects.filter(user=request.user).order_by(pag_vars['sort_order'])
    smscampaign_count = smscampaign_list.count()
    if kwargs:
        all_smscampaign_list = smscampaign_list.filter(**kwargs).order_by(pag_vars['sort_order'])
        smscampaign_list = all_smscampaign_list[pag_vars['start_page']:pag_vars['end_page']]
        smscampaign_count = all_smscampaign_list.count()

    data = {
        'form': form,
        'smscampaign_list': smscampaign_list,
        'total_campaign': smscampaign_count,
        'SMS_CAMPAIGN_COLUMN_NAME': SMS_CAMPAIGN_COLUMN_NAME,
        'col_name_with_order': pag_vars['col_name_with_order'],
        'msg': request.session.get('msg'),
        'error_msg': request.session.get('error_msg'),
        'info_msg': request.session.get('info_msg'),
    }
    request.session['msg'] = ''
    request.session['error_msg'] = ''
    request.session['info_msg'] = ''
    return render_to_response('mod_sms/list.html', data, context_instance=RequestContext(request))


@permission_required('mod_sms.add_smscampaign', login_url='/')
@login_required
def sms_campaign_add(request):
    """Add a new sms campaign for the logged in user

    **Attributes**:

        * ``form`` - SMSCampaignForm
        * ``template`` - mod_sms/change.html

    **Logic Description**:

        * Before adding a sms campaign, check dialer setting limit if
          applicable to the user.
        * Add the new sms campaign which will belong to the logged in user
          via SMSCampaignForm & get redirected to sms campaign list
    """
    # If dialer setting is not attached with user, redirect to sms campaign list
    if not user_dialer_setting(request.user):
        request.session['error_msg'] = \
            _("in order to add a sms campaign, you need to have your \
               settings configured properly, please contact the admin.")
        return HttpResponseRedirect(redirect_url_to_smscampaign_list)

    # Check dialer setting limit
    if request.user and request.method != 'POST':
        # check Max Number of running campaign
        if check_sms_dialer_setting(request, check_for="smscampaign"):
            msg = _("you have too many sms campaigns. Max allowed %(limit)s")\
                % {'limit': dialer_setting_limit(request, limit_for="smscampaign")}
            request.session['msg'] = msg

            # sms campaign limit reached
            frontend_send_notification(request, SMS_NOTIFICATION_NAME.sms_campaign_limit_reached)
            return HttpResponseRedirect(redirect_url_to_smscampaign_list)

    form = SMSCampaignForm(request.user, request.POST or None)
    # Add sms campaign
    if form.is_valid():
        obj = form.save(commit=False)
        obj.user = User.objects.get(username=request.user)
        obj.save()
        form.save_m2m()
        request.session["msg"] = _('"%(name)s" is added.') % {'name': request.POST['name']}
        return HttpResponseRedirect(redirect_url_to_smscampaign_list)

    data = {
        'form': form,
        'action': 'add',
    }
    return render_to_response('mod_sms/change.html', data, context_instance=RequestContext(request))


@permission_required('mod_sms.delete_smsmessage', login_url='/')
@login_required
def sms_campaign_del(request, object_id):
    """Delete/Stop sms campaign for the logged in user

    **Attributes**:

        * ``object_id`` - Selected sms campaign object
        * ``object_list`` - Selected sms campaign objects

    **Logic Description**:

        * Delete/Stop the selected sms campaign from the sms campaign list
    """
    stop_sms_campaign = request.GET.get('stop_sms_campaign', False)
    try:
        # When object_id is not 0
        sms_campaign = get_object_or_404(SMSCampaign, pk=object_id, user=request.user)
        # Delete/Stop sms campaign
        if sms_campaign:
            if stop_sms_campaign:
                sms_campaign.status = SMS_CAMPAIGN_STATUS.END
                sms_campaign.save()
                request.session["msg"] = _('"%(name)s" is stopped.') % {'name': sms_campaign.name}
            else:
                request.session["msg"] = _('"%(name)s" is deleted.') % {'name': sms_campaign.name}
                sms_campaign.delete()
    except:
        # When object_id is 0 (Multiple records delete)
        values = request.POST.getlist('select')
        values = ", ".join(["%s" % el for el in values])
        sms_campaign_list = SMSCampaign.objects.extra(where=['id IN (%s)' % values])
        if sms_campaign_list:
            if stop_sms_campaign:
                sms_campaign_list.update(status=SMS_CAMPAIGN_STATUS.END)
                request.session["msg"] = _('%(count)s sms campaign(s) are stopped.') % {'count': sms_campaign_list.count()}
            else:
                request.session["msg"] = _('%(count)s sms campaign(s) are deleted.') % {'count': sms_campaign_list.count()}
                sms_campaign_list.delete()
    return HttpResponseRedirect(redirect_url_to_smscampaign_list)


@permission_required('mod_sms.change_smsmessage', login_url='/')
@login_required
def sms_campaign_change(request, object_id):
    """Update/Delete sms campaign for the logged in user

    **Attributes**:

        * ``object_id`` - Selected campaign object
        * ``form`` - SMSCampaignForm
        * ``template`` - mod_sms/change.html

    **Logic Description**:

        * Update/delete selected sms campaign from the sms campaign list
          via SMSCampaignForm & get redirected to the sms campaign list
    """
    # If dialer setting is not attached with user, redirect to sms campaign list
    if not user_dialer_setting(request.user):
        return HttpResponseRedirect(redirect_url_to_smscampaign_list)

    sms_campaign = get_object_or_404(SMSCampaign, pk=object_id, user=request.user)
    form = SMSCampaignForm(request.user, request.POST or None, instance=sms_campaign)
    if form.is_valid():
        # Delete sms campaign
        if request.POST.get('delete'):
            sms_campaign_del(request, object_id)
            return HttpResponseRedirect(redirect_url_to_smscampaign_list)
        else:
            # Update sms campaign
            obj = form.save()
            obj.save()
            request.session["msg"] = _('"%(name)s" is updated.') % {'name': request.POST['name']}
            return HttpResponseRedirect(redirect_url_to_smscampaign_list)
    data = {
        'form': form,
        'action': 'update',
    }
    return render_to_response('mod_sms/change.html', data, context_instance=RequestContext(request))


@login_required
def sms_campaign_duplicate(request, id):
    """
    Duplicate sms campaign via DuplicateSMSCampaignForm

    **Attributes**:

        * ``id`` - Selected sms campaign object
        * ``form`` - DuplicateSMSCampaignForm
        * ``template`` - mod_sms/sms_campaign_duplicate.html
    """
    # If dialer setting is not attached with user, redirect to sms campaign list
    if not user_dialer_setting(request.user):
        return HttpResponseRedirect(redirect_url_to_smscampaign_list)

    form = DuplicateSMSCampaignForm(request.user, request.POST or None)
    request.session['error_msg'] = ''
    if request.method == 'POST':
        if form.is_valid():
            sms_campaign_obj = SMSCampaign.objects.get(pk=id)

            sms_campaign_obj.pk = None
            sms_campaign_obj.campaign_code = request.POST.get('campaign_code')
            sms_campaign_obj.name = request.POST.get('name')
            sms_campaign_obj.status = SMS_CAMPAIGN_STATUS.PAUSE
            sms_campaign_obj.startingdate = datetime.utcnow().replace(tzinfo=utc)
            sms_campaign_obj.expirationdate = datetime.utcnow().replace(tzinfo=utc) + relativedelta(days=+1)
            sms_campaign_obj.imported_phonebook = ''
            sms_campaign_obj.totalcontact = 0
            sms_campaign_obj.save()

            # Many to many field
            for pb in request.POST.getlist('phonebook'):
                sms_campaign_obj.phonebook.add(pb)

            return HttpResponseRedirect(redirect_url_to_smscampaign_list)
        else:
            request.session['error_msg'] = True

    data = {
        'sms_campaign_id': id,
        'form': form,
        'err_msg': request.session.get('error_msg'),
    }
    request.session['error_msg'] = ''
    return render_to_response('mod_sms/sms_campaign_duplicate.html', data, context_instance=RequestContext(request))


@login_required
def sms_campaign_text_message(request, object_id):
    """
    Get sms campaign's text message

    **Attributes**:

        * ``object_id`` - Selected sms campaign object
        * ``template`` - mod_sms/sms_campaign_text_message.html
    """
    # If dialer setting is not attached with user, redirect to sms campaign list
    if not user_dialer_setting(request.user):
        return HttpResponseRedirect(redirect_url_to_smscampaign_list)

    sms_campaign = get_object_or_404(SMSCampaign, pk=object_id, user=request.user)
    data = {
        'sms_campaign': sms_campaign,
    }
    request.session['error_msg'] = ''
    return render_to_response('mod_sms/sms_campaign_text_message.html', data, context_instance=RequestContext(request))


@permission_required('mod_sms.view_sms_dashboard', login_url='/')
@login_required
def sms_dashboard(request, on_index=None):
    """SMS dashboard gives the following information

        * No of SMSCampaigns for logged in user
        * Total phonebook contacts
        * Total SMSCampaigns contacts
        * Amount of contact reached today
        * Disposition of sms via pie chart
        * SMS count shown on graph by days/hours

    **Attributes**:

        * ``template`` - mod_sms/sms_dashboard.html
        * ``form`` - SMSDashboardForm
    """
    # All sms_campaign for logged in User
    sms_campaign_id_list = SMSCampaign.objects.values_list('id', flat=True).filter(user=request.user).order_by('id')

    # Contacts count which are active and belong to those phonebook(s) which is
    # associated with all sms campaign
    pb_active_contact_count = Contact.objects.filter(
        phonebook__smscampaign__in=sms_campaign_id_list,
        status=CONTACT_STATUS.ACTIVE).count()

    form = SMSDashboardForm(request.user, request.POST or None)

    total_record = dict()
    total_sms_count = 0
    total_unsent = 0
    total_sent = 0
    total_delivered = 0
    total_failed = 0
    total_no_route = 0
    total_unauthorized = 0

    select_graph_for = 'sms count'  # default
    search_type = SEARCH_TYPE.D_Last_24_hours  # default Last 24 hours
    selected_sms_campaign = ''

    if sms_campaign_id_list:
        selected_sms_campaign = sms_campaign_id_list[0]  # default sms campaign id

    # selected_sms_campaign should not be empty
    if selected_sms_campaign:

        if form.is_valid():
            selected_sms_campaign = request.POST['smscampaign']
            search_type = request.POST['search_type']

        end_date = datetime.utcnow().replace(tzinfo=utc)
        start_date = calculate_date(search_type)

        # date_length is used to do group by starting_date
        if int(search_type) >= SEARCH_TYPE.B_Last_7_days:  # all options except 30 days
            date_length = 13
            if int(search_type) == SEARCH_TYPE.C_Yesterday:  # yesterday
                now = datetime.utcnow().replace(tzinfo=utc)
                start_date = datetime(now.year, now.month, now.day, 0, 0, 0, 0).replace(tzinfo=utc) \
                    - relativedelta(days=1)
                end_date = datetime(now.year, now.month, now.day, 23, 59, 59, 999999).replace(tzinfo=utc) \
                    - relativedelta(days=1)
            if int(search_type) >= SEARCH_TYPE.E_Last_12_hours:
                date_length = 16
        else:
            date_length = 10  # Last 30 days option

        select_data = {
            "send_date": "SUBSTR(CAST(send_date as CHAR(30)),1," + str(date_length) + ")"}

        # This calls list is used by pie chart
        list_sms = SMSMessage.objects.filter(
            sender=request.user,
            sms_campaign_id=selected_sms_campaign,
            send_date__range=(start_date, end_date))\
            .extra(select=select_data)\
            .values('send_date', 'status')\
            .annotate(Count('send_date'))\
            .order_by('send_date')

        for i in list_sms:
            # convert unicode date string into date
            if i['status'] == 'Unsent':
                total_unsent += i['send_date__count']
            elif i['status'] == 'Sent':
                total_sent += i['send_date__count']
            elif i['status'] == 'Delivered':
                total_delivered += i['send_date__count']
            elif i['status'] == 'Failed':
                total_failed += i['send_date__count']
            elif i['status'] == 'No_Route':
                total_no_route += i['send_date__count']
            else:
                total_unauthorized += i['send_date__count']  # Unauthorized

            total_sms_count += i['send_date__count']

        list_sms = SMSMessage.objects.filter(
            sender=request.user,
            sms_campaign_id=selected_sms_campaign,
            send_date__range=(start_date, end_date))\
            .extra(select=select_data).values('send_date')\
            .annotate(Count('send_date')).order_by('send_date')

        mintime = start_date
        maxtime = end_date
        sms_dict = {}
        sms_dict_with_min = {}

        for data in list_sms:
            if int(search_type) >= SEARCH_TYPE.B_Last_7_days:
                ctime = datetime(int(data['send_date'][0:4]),
                                 int(data['send_date'][5:7]),
                                 int(data['send_date'][8:10]),
                                 int(data['send_date'][11:13]),
                                 0, 0, 0).replace(tzinfo=utc)
                if int(search_type) >= SEARCH_TYPE.E_Last_12_hours:
                    ctime = datetime(int(data['send_date'][0:4]),
                                     int(data['send_date'][5:7]),
                                     int(data['send_date'][8:10]),
                                     int(data['send_date'][11:13]),
                                     int(data['send_date'][14:16]),
                                     0, 0).replace(tzinfo=utc)
            else:
                ctime = datetime(int(data['send_date'][0:4]),
                                 int(data['send_date'][5:7]),
                                 int(data['send_date'][8:10]),
                                 0, 0, 0, 0).replace(tzinfo=utc)
            if ctime > maxtime:
                maxtime = ctime
            elif ctime < mintime:
                mintime = ctime

            # all options except 30 days
            if int(search_type) >= SEARCH_TYPE.B_Last_7_days:
                sms_dict[int(ctime.strftime("%Y%m%d%H"))] = {
                    'sms_count': data['send_date__count']
                }
                sms_dict_with_min[int(ctime.strftime("%Y%m%d%H%M"))] = {
                    'sms_count': data['send_date__count']
                }
            else:
                # Last 30 days option
                sms_dict[int(ctime.strftime("%Y%m%d"))] = {
                    'sms_count': data['send_date__count']
                }

        dateList = date_range(mintime, maxtime, q=search_type)

        i = 0
        total_record = {}
        for date in dateList:
            inttime = int(date.strftime("%Y%m%d"))
            # last 7 days | yesterday | last 24 hrs
            if (int(search_type) == SEARCH_TYPE.B_Last_7_days
               or int(search_type) == SEARCH_TYPE.C_Yesterday
               or int(search_type) == SEARCH_TYPE.D_Last_24_hours):

                for option in range(0, 24):
                    day_time = int(str(inttime) + str(option).zfill(2))

                    graph_day = datetime(int(date.strftime("%Y")),
                                         int(date.strftime("%m")),
                                         int(date.strftime("%d")),
                                         int(str(option).zfill(2))).replace(tzinfo=utc)

                    dt = int(1000 * time.mktime(graph_day.timetuple()))
                    total_record[dt] = {'sms_count': 0}

                    if day_time in sms_dict.keys():
                        total_record[dt]['sms_count'] += sms_dict[day_time]['sms_count']

            # last 12 hrs | last 6 hrs | last 1 hrs
            elif (int(search_type) == SEARCH_TYPE.E_Last_12_hours
                 or int(search_type) == SEARCH_TYPE.F_Last_6_hours
                 or int(search_type) == SEARCH_TYPE.G_Last_hour):

                for hour in range(0, 24):
                    for minute in range(0, 60):
                        hr_time = int(str(inttime) + str(hour).zfill(2) + str(minute).zfill(2))

                        graph_day = datetime(int(date.strftime("%Y")),
                                             int(date.strftime("%m")),
                                             int(date.strftime("%d")),
                                             int(str(hour).zfill(2)),
                                             int(str(minute).zfill(2))).replace(tzinfo=utc)

                        dt = int(1000 * time.mktime(graph_day.timetuple()))
                        total_record[dt] = {'sms_count': 0}

                        if hr_time in sms_dict_with_min.keys():
                            total_record[dt]['sms_count'] += sms_dict_with_min[hr_time]['sms_count']

            else:
                # Last 30 days option
                graph_day = datetime(int(date.strftime("%Y")),
                                     int(date.strftime("%m")),
                                     int(date.strftime("%d"))).replace(tzinfo=utc)
                dt = int(1000 * time.mktime(graph_day.timetuple()))
                total_record[dt] = {'sms_count': 0}
                if inttime in sms_dict.keys():
                    total_record[dt]['sms_count'] += sms_dict[inttime]['sms_count']

    # sorting on date col
    total_record = total_record.items()
    total_record = sorted(total_record, key=lambda k: k[0])

    # lineWithFocusChart
    final_charttype = "lineWithFocusChart"
    xdata = []
    ydata = []
    for i in total_record:
        xdata.append(i[0])
        ydata.append(i[1]['sms_count'])

    tooltip_date = "%d %b %y %H:%M %p"
    extra_serie1 = {
        "tooltip": {"y_start": "", "y_end": " SMS"},
        "date_format": tooltip_date
    }

    final_chartdata = {
        'x': xdata,
        'name1': 'SMS', 'y1': ydata, 'extra1': extra_serie1,
    }

    # Contacts which are successfully messaged for running sms campaign
    reached_contact = 0
    if sms_campaign_id_list:
        now = datetime.utcnow().replace(tzinfo=utc)
        start_date = datetime(now.year, now.month, now.day, 0, 0, 0, 0).replace(tzinfo=utc)
        end_date = datetime(now.year, now.month, now.day, 23, 59, 59, 999999).replace(tzinfo=utc)
        sms_campaign_subscriber = SMSCampaignSubscriber.objects.filter(
            sms_campaign_id__in=sms_campaign_id_list,
            status=SMS_SUBSCRIBER_STATUS.COMPLETE,
            updated_date__range=(start_date, end_date)).count()
        reached_contact += sms_campaign_subscriber

    # PieChart
    sms_analytic_charttype = "pieChart"
    xdata = []
    ydata = []
    sms_analytic_chartdata = {'x': xdata, 'y1': ydata}

    if total_sms_count != 0:
        for i in SMS_MESSAGE_STATUS:
            xdata.append(i[0].upper())

        # Y-axis order depend upon SMS_MESSAGE_STATUS
        # 'UNSENT', 'SENT', 'DELIVERED', 'FAILED', 'NO_ROUTE', 'UNAUTHORIZED'
        ydata = [
            percentage(total_unsent, total_sms_count),
            percentage(total_sent, total_sms_count),
            percentage(total_delivered, total_sms_count),
            percentage(total_failed, total_sms_count),
            percentage(total_no_route, total_sms_count),
            percentage(total_unauthorized, total_sms_count),
        ]

        color_list = [
            COLOR_SMS_DISPOSITION['UNSENT'],
            COLOR_SMS_DISPOSITION['SENT'],
            COLOR_SMS_DISPOSITION['DELIVERED'],
            COLOR_SMS_DISPOSITION['FAILED'],
            COLOR_SMS_DISPOSITION['NO_ROUTE'],
            COLOR_SMS_DISPOSITION['UNAUTHORIZED'],
        ]
        extra_serie = {
            "tooltip": {"y_start": "", "y_end": " %"},
            "color_list": color_list
        }
        kwargs1 = {}
        kwargs1['resize'] = True
        sms_analytic_chartdata = {
            'x': xdata, 'y1': ydata, 'extra1': extra_serie,
            'kwargs1': kwargs1,
        }

    data = {
        'form': form,
        'SEARCH_TYPE': SEARCH_TYPE,
        'pb_active_contact_count': pb_active_contact_count,
        'reached_contact': reached_contact,
        'total_record': total_record,
        'select_graph_for': select_graph_for,
        'total_sms_count': total_sms_count,
        'total_unsent': total_unsent,
        'total_sent': total_sent,
        'total_delivered': total_delivered,
        'total_failed': total_failed,
        'total_no_route': total_no_route,
        'total_unauthorized': total_unauthorized,
        'unsent_color': COLOR_SMS_DISPOSITION['UNSENT'],
        'sent_color': COLOR_SMS_DISPOSITION['SENT'],
        'delivered_color': COLOR_SMS_DISPOSITION['DELIVERED'],
        'failed_color': COLOR_SMS_DISPOSITION['FAILED'],
        'no_route_color': COLOR_SMS_DISPOSITION['NO_ROUTE'],
        'unauthorized_color': COLOR_SMS_DISPOSITION['UNAUTHORIZED'],
        'final_chartcontainer': 'lineplusbarwithfocuschart_container',
        'final_chartdata': final_chartdata,
        'final_charttype': final_charttype,
        'final_extra': {
            'x_is_date': True,
            'x_axis_format': '%d %b %Y',
            'tag_script_js': True,
            'jquery_on_ready': False,
        },
        'sms_analytic_chartcontainer': 'piechart_container',
        'sms_analytic_charttype': sms_analytic_charttype,
        'sms_analytic_chartdata': sms_analytic_chartdata,
        'sms_analytic_extra': {
            'x_is_date': False,
            'x_axis_format': '',
            'tag_script_js': True,
            'jquery_on_ready': False,
        },
    }
    if on_index == 'yes':
        return data
    return render_to_response('mod_sms/sms_dashboard.html', data, context_instance=RequestContext(request))


@login_required
@permission_required('mod_sms.view_sms_report', login_url='/')
def sms_report(request):
    """SMS Report

    **Attributes**:

        * ``form`` - SMSSearchForm
        * ``template`` - mod_sms/sms_report.html

    **Logic Description**:

        * Get SMS list according to search parameters for logged-in user

    **Important variable**:

        * ``request.session['sms_record_kwargs']`` - stores sms kwargs
    """
    sort_col_field_list = ['send_date', 'recipient_number', 'uuid', 'status', 'status_message', 'gateway']
    pag_vars = get_pagination_vars(request, sort_col_field_list, default_sort_field='send_date')

    from_date = ''
    to_date = ''
    status = 'all'
    smscampaign = ''

    form = SMSSearchForm(request.user, request.POST or None)
    action = 'tabs-1'
    kwargs = {}
    post_var_with_page = 0
    if form.is_valid():
        post_var_with_page = 1
        field_list = ['start_date', 'end_date', 'status', 'smscampaign']
        unset_session_var(request, field_list)

        from_date = getvar(request, 'from_date')
        to_date = getvar(request, 'to_date')
        start_date = ceil_strdate(str(from_date), 'start')
        end_date = ceil_strdate(str(to_date), 'end')

        converted_start_date = start_date.strftime('%Y-%m-%d')
        converted_end_date = end_date.strftime('%Y-%m-%d')
        request.session['session_start_date'] = converted_start_date
        request.session['session_end_date'] = converted_end_date

        status = getvar(request, 'status', setsession=True)
        smscampaign = getvar(request, 'smscampaign', setsession=True)

    if request.GET.get('page') or request.GET.get('sort_by'):
        post_var_with_page = 1
        start_date = request.session.get('session_start_date')
        end_date = request.session.get('session_end_date')
        start_date = ceil_strdate(start_date, 'start')
        end_date = ceil_strdate(end_date, 'end')
        status = request.session.get('session_status')
        smscampaign = request.session.get('session_smscampaign')

        form = SMSSearchForm(request.user,
                             initial={'from_date': start_date.strftime('%Y-%m-%d'),
                                      'to_date': end_date.strftime('%Y-%m-%d'),
                                      'status': status,
                                      'smscampaign': smscampaign})

    if post_var_with_page == 0:
        # default
        tday = datetime.utcnow().replace(tzinfo=utc)
        from_date = tday.strftime('%Y-%m-%d')
        to_date = tday.strftime('%Y-%m-%d')
        start_date = datetime(tday.year, tday.month, tday.day, 0, 0, 0, 0).replace(tzinfo=utc)
        end_date = datetime(tday.year, tday.month, tday.day, 23, 59, 59, 999999).replace(tzinfo=utc)
        status = 'all'
        smscampaign = ''
        form = SMSSearchForm(request.user, initial={'from_date': from_date, 'to_date': to_date,
                                                    'status': status, 'smscampaign': smscampaign})
        # unset session var
        request.session['session_start_date'] = start_date
        request.session['session_end_date'] = end_date
        request.session['session_status'] = status
        request.session['session_smscampaign'] = smscampaign

    kwargs['sender'] = request.user

    if start_date and end_date:
        kwargs['send_date__range'] = (start_date, end_date)
    if start_date and end_date == '':
        kwargs['send_date__gte'] = start_date
    if start_date == '' and end_date:
        kwargs['send_date__lte'] = end_date

    if status and status != 'all':
        kwargs['status__exact'] = status

    if smscampaign and smscampaign != '0':
        kwargs['sms_campaign_id'] = smscampaign

    smslist = SMSMessage.objects.filter(**kwargs)
    all_sms_list = smslist.values_list('id', flat=True)
    sms_list = smslist.order_by(pag_vars['sort_order'])[pag_vars['start_page']:pag_vars['end_page']]

    # Session variable is used to get record set with searched option
    # into export file
    request.session['sms_record_kwargs'] = kwargs

    select_data = {"send_date": "SUBSTR(CAST(send_date as CHAR(30)),1,10)"}
    # Get Total Rrecords from SMSMessage Report table for Daily SMS Report
    total_data = all_sms_list.extra(select=select_data).values('send_date')\
        .annotate(Count('send_date')).order_by('-send_date')

    # Following code will count total sms
    if total_data.count() != 0:
        total_sms = sum([x['send_date__count'] for x in total_data])
    else:
        total_sms = 0

    data = {
        'form': form,
        'from_date': from_date,
        'all_sms_list': all_sms_list,
        'sms_list': sms_list,
        'sms_count': all_sms_list.count() if all_sms_list else 0,
        'SMS_REPORT_COLUMN_NAME': SMS_REPORT_COLUMN_NAME,
        'col_name_with_order': pag_vars['col_name_with_order'],
        'start_date': start_date,
        'end_date': end_date,
        'to_date': to_date,
        'action': action,
        'status': status,
        'total_data': total_data.reverse(),
        'total_sms': total_sms,
    }

    return render_to_response('mod_sms/sms_report.html', data, context_instance=RequestContext(request))


@login_required
def export_sms_report(request):
    """Export CSV file of SMS record

    **Important variable**:

        * ``request.session['sms_record_kwargs']`` - stores sms query set

    **Exported fields**: ['sender', 'recipient_number', 'send_date', 'uuid',
               'status', 'status_message', 'gateway']
    """
    format_type = request.GET['format']
    # get the response object, this can be used as a stream.
    response = HttpResponse(mimetype='text/%s' % format_type)

    # force download.
    response['Content-Disposition'] = 'attachment;filename=sms_export.%s' % format_type
    kwargs = {}
    kwargs = request.session['sms_record_kwargs']
    qs = SMSMessage.objects.filter(**kwargs)

    headers = ('sender', 'recipient_number', 'send_date', 'uuid',
               'status', 'status_message', 'gateway')
    list_val = []
    for i in qs:
        send_date = i.send_date
        if format_type == Export_choice.JSON or format_type == Export_choice.XLS:
            send_date = str(i.send_date)
        gateway = i.gateway.name if i.gateway else ''
        list_val.append([
            i.sender.username,
            i.recipient_number,
            send_date,
            str(i.uuid),
            i.status,
            i.status_message,
            gateway,
        ])

    data = tablib.Dataset(*list_val, headers=headers)

    if format_type == Export_choice.XLS:
        response.write(data.xls)
    elif format_type == Export_choice.CSV:
        response.write(data.csv)
    elif format_type == Export_choice.JSON:
        response.write(data.json)

    return response

########NEW FILE########
__FILENAME__ = forms
#
# Newfies-Dialer License
# http://www.newfies-dialer.org
#
# This Source Code Form is subject to the terms of the Mozilla Public
# License, v. 2.0. If a copy of the MPL was not distributed with this file,
# You can obtain one at http://mozilla.org/MPL/2.0/.
#
# Copyright (C) 2011-2014 Star2Billing S.L.
#
# The Initial Developer of the Original Code is
# Arezqui Belaid <info@star2billing.com>
#
from django import forms
from django.forms import ModelForm
from django.utils.safestring import mark_safe
from django.utils.translation import ugettext_lazy as _
from mod_utils.helper import Export_choice

from crispy_forms.layout import HTML
from crispy_forms.bootstrap import FormActions
#from crispy_forms.layout import Submit


class HorizRadioRenderer(forms.RadioSelect.renderer):
    """This overrides widget method to put radio buttons horizontally
    instead of vertically.
    """
    def render(self):
        """Outputs radios"""
        return mark_safe(u'\n'.join([u'%s\n' % w for w in self]))


class Exportfile(forms.Form):
    """
    Abstract Form : export file in various format e.g. XLS, CSV, JSON
    """
    export_to = forms.TypedChoiceField(label=_('export to').capitalize(), required=True,
                                       choices=list(Export_choice),
                                       widget=forms.RadioSelect(renderer=HorizRadioRenderer))


class SaveUserModelForm(ModelForm):
    """SaveUserModelForm ModelForm"""

    def save(self, *args, **kwargs):
        """save that retrieve the user"""
        self.user = kwargs.pop('user', None)
        kwargs['commit'] = False
        obj = super(SaveUserModelForm, self).save(*args, **kwargs)
        if self.user:
            obj.user = self.user
        obj.save()
        return obj


def common_submit_buttons(layout_section=None, default_action='add'):
    """
    function to remove the first button and add update and delete button
    """
    start_div = '<div class="row"><div class="col-md-12 text-right">'
    end_div = '</div></div>'
    if default_action == 'update':
        form_action = FormActions(
            HTML('%s<button type="submit" id="update" name="update" class="btn btn-primary" value="submit">'
                 '<i class="fa fa-edit fa-lg"></i> %s</button>'
                 '<button type="submit" id="delete" name="delete" class="btn btn-danger" value="submit">'
                 '<i class="fa fa-trash-o fa-lg"></i> %s</button>%s' % (start_div, _('update').title(), _('delete').title(), end_div))
        )
        if layout_section is None:
            return form_action
        layout_section.append(form_action)
    elif default_action == 'add':
        form_action = FormActions(
            HTML('%s<button type="submit" id="add" name="add" class="btn btn-primary" value="submit">'
                 '<i class="fa fa-save fa-lg"></i> %s</button>%s' % (start_div, _('save').title(), end_div)
                 ),
        )
        if layout_section is None:
            return form_action
        layout_section.append(form_action)
    elif default_action == 'import':
        form_action = FormActions(
            HTML('%s<button type="submit" id="add" name="add" class="btn btn-primary" value="submit">'
                 '<i class="fa fa-save fa-lg"></i> %s</button>%s' % (start_div, _('import').title(), end_div)
                 ),
        )
        layout_section.append(form_action)
    elif default_action == 'search':
        start_div = '<div class="row"><div class="col-md-12 text-left">'
        form_action = FormActions(
            HTML('%s<button type="submit" id="id_submit" name="submit" class="btn btn-primary" value="submit">'
                 '<i class="fa fa-search fa-lg"></i> %s</button>%s' % (start_div, _('search').title(), end_div))
        )
        layout_section.append(form_action)
    return layout_section

########NEW FILE########
__FILENAME__ = function_def
#
# Newfies-Dialer License
# http://www.newfies-dialer.org
#
# This Source Code Form is subject to the terms of the Mozilla Public
# License, v. 2.0. If a copy of the MPL was not distributed with this file,
# You can obtain one at http://mozilla.org/MPL/2.0/.
#
# Copyright (C) 2011-2014 Star2Billing S.L.
#
# The Initial Developer of the Original Code is
# Arezqui Belaid <info@star2billing.com>
#

from django.utils.translation import ugettext_lazy as _


def tpl_control_icon(icon):
    """
    function to produce control html icon
    """
    return '<i class="fa %s icon-small"></i>' % (icon)


def get_common_campaign_status_url(id, status, status_link, STATUS_OF_CAMPAIGN):
    """
    Helper to display campaign status button on the grid

    example : get_common_campaign_status_url(id, status, 'update_campaign_status_cust/', CAMPAIGN_STATUS)

              get_common_campaign_status_url(id, status, 'update_sms_campaign_status_cust/', SMS_CAMPAIGN_STATUS)
    """
    #Store html for campaign control button
    control_play_style = tpl_control_icon('fa-play')
    control_pause_style = tpl_control_icon('fa-pause')
    control_abort_style = tpl_control_icon('fa-eject')
    control_stop_style = tpl_control_icon('fa-stop')

    #set different url for the campaign status
    url_cpg_status = status_link + '%s' % str(id)
    url_cpg_start = '%s/%s/' % (url_cpg_status, STATUS_OF_CAMPAIGN.START)
    url_cpg_pause = '%s/%s/' % (url_cpg_status, STATUS_OF_CAMPAIGN.PAUSE)
    url_cpg_abort = '%s/%s/' % (url_cpg_status, STATUS_OF_CAMPAIGN.ABORT)
    url_cpg_stop = '%s/%s/' % (url_cpg_status, STATUS_OF_CAMPAIGN.END)

    #according to the current status, disable link and change the button color
    if status == STATUS_OF_CAMPAIGN.START:
        url_cpg_start = '#'
        control_play_style = tpl_control_icon('fa-play')
    elif status == STATUS_OF_CAMPAIGN.PAUSE:
        url_cpg_pause = '#'
        control_pause_style = tpl_control_icon('fa-pause')
    elif status == STATUS_OF_CAMPAIGN.ABORT:
        url_cpg_abort = '#'
        control_abort_style = tpl_control_icon('fa-eject')
    elif status == STATUS_OF_CAMPAIGN.END:
        url_cpg_stop = '#'
        control_stop_style = tpl_control_icon('fa-stop')

    #return all the html button for campaign status management
    return "<a href='%s' title='%s'>%s</a> <a href='%s' title='%s'>%s</a> <a href='%s' title='%s'>%s</a> <a href='%s' title='%s'>%s</a>" % \
        (url_cpg_start, _("start").capitalize(), control_play_style,
         url_cpg_pause, _("pause").capitalize(), control_pause_style,
         url_cpg_abort, _("abort").capitalize(), control_abort_style,
         url_cpg_stop, _("stop").capitalize(), control_stop_style)


def get_common_campaign_status(id, STATUS_OF_CAMPAIGN, STATUS_COLOR):
    """To get status name from CAMPAIGN_STATUS as well as SMS_CAMPAIGN_STATUS

    example : get_common_campaign_status(id, CAMPAIGN_STATUS, CAMPAIGN_STATUS_COLOR)
              get_common_campaign_status(id, SMS_CAMPAIGN_STATUS, SMS_CAMPAIGN_STATUS_COLOR)
    """
    if STATUS_OF_CAMPAIGN.START == id:
        return '<font color="%s">%s</font>' % (STATUS_COLOR[id], _("started").capitalize())
    elif STATUS_OF_CAMPAIGN.PAUSE == id:
        return '<font color="%s">%s</font>' % (STATUS_COLOR[id], _("paused").capitalize())
    elif STATUS_OF_CAMPAIGN.ABORT == id:
        return '<font color="%s">%s</font>' % (STATUS_COLOR[id], _("aborted").capitalize())
    else:
        return '<font color="%s">%s</font>' % (STATUS_COLOR[id], _("stopped").capitalize())


def get_status_value(value, STATUS_LIST):
    """common function to get status value

    example: get_status_value(1, EVENT_STATUS)
             get_status_value(3, ALARM_STATUS)
    """
    if not value:
        return ''
    STATUS = dict(STATUS_LIST)
    try:
        return STATUS[value].encode('utf-8')
    except:
        return ''

########NEW FILE########
__FILENAME__ = helper
#
# Newfies-Dialer License
# http://www.newfies-dialer.org
#
# This Source Code Form is subject to the terms of the Mozilla Public
# License, v. 2.0. If a copy of the MPL was not distributed with this file,
# You can obtain one at http://mozilla.org/MPL/2.0/.
#
# Copyright (C) 2011-2014 Star2Billing S.L.
#
# The Initial Developer of the Original Code is
# Arezqui Belaid <info@star2billing.com>
#

from django_lets_go.utils import Choice
from django.utils.translation import ugettext_lazy as _


class Export_choice(Choice):
    CSV = 'csv', _('csv').upper()
    XLS = 'xls', _('xls').upper()
    JSON = 'json', _('json').upper()

########NEW FILE########
__FILENAME__ = management
#
# Newfies-Dialer License
# http://www.newfies-dialer.org
#
# This Source Code Form is subject to the terms of the Mozilla Public
# License, v. 2.0. If a copy of the MPL was not distributed with this file,
# You can obtain one at http://mozilla.org/MPL/2.0/.
#
# Copyright (C) 2011-2014 Star2Billing S.L.
#
# The Initial Developer of the Original Code is
# Arezqui Belaid <info@star2billing.com>
#

from django.conf import settings
from django.db.models import signals
from django.utils.translation import ugettext_noop as _
from user_profile.constants import NOTIFICATION_NAME
from mod_sms.constants import SMS_NOTIFICATION_NAME


#Info about management.py
#http://stackoverflow.com/questions/4455533/what-is-management-py-in-django

if "notification" in settings.INSTALLED_APPS:
    from notification import models as notification

    def create_notice_types(app, created_models, verbosity, **kwargs):
        kwargs = {}
        kwargs['default'] = NOTIFICATION_NAME.campaign_started
        notification.create_notice_type(
            "campaign_started", _("campaign started"), _("campaign started"), **kwargs)

        kwargs['default'] = NOTIFICATION_NAME.campaign_paused
        notification.create_notice_type(
            "campaign_paused", _("campaign paused"), _("campaign paused"), **kwargs)

        kwargs['default'] = NOTIFICATION_NAME.campaign_aborted
        notification.create_notice_type(
            "campaign_aborted", _("campaign aborted"), _("campaign aborted"), **kwargs)

        kwargs['default'] = NOTIFICATION_NAME.campaign_stopped
        notification.create_notice_type(
            "campaign_stopped", _("campaign stopped"), _("campaign stopped"), **kwargs)

        kwargs['default'] = NOTIFICATION_NAME.campaign_limit_reached
        notification.create_notice_type(
            "campaign_limit_reached", _("campaign limit reached"), _("campaign limit reached"), **kwargs)

        kwargs['default'] = NOTIFICATION_NAME.contact_limit_reached
        notification.create_notice_type(
            "contact_limit_reached", _("contact limit reached"), _("contact limit reached"), **kwargs)

        kwargs['default'] = NOTIFICATION_NAME.dialer_setting_configuration
        notification.create_notice_type(
            "dialer_setting_configuration", _("dialer setting configuration"),
            _("the user needs to be mapped with dialer settings by the administrator"), **kwargs)

        kwargs['default'] = NOTIFICATION_NAME.callrequest_not_found
        notification.create_notice_type(
            "callrequest_not_found", _("call request not found"), _("call request not found"), **kwargs)

        # mod_sms notification
        kwargs['default'] = SMS_NOTIFICATION_NAME.sms_campaign_started
        notification.create_notice_type(
            "sms_campaign_started", _("SMS Campaign started"), _("SMS Campaign started"), **kwargs)

        kwargs['default'] = SMS_NOTIFICATION_NAME.sms_campaign_paused
        notification.create_notice_type(
            "sms_campaign_paused", _("SMS Campaign paused"), _("SMS Campaign paused"), **kwargs)

        kwargs['default'] = SMS_NOTIFICATION_NAME.sms_campaign_aborted
        notification.create_notice_type(
            "sms_campaign_aborted", _("SMS Campaign aborted"), _("SMS Campaign aborted"), **kwargs)

        kwargs['default'] = SMS_NOTIFICATION_NAME.sms_campaign_stopped
        notification.create_notice_type(
            "sms_campaign_stopped", _("SMS Campaign stopped"), _("SMS Campaign stopped"), **kwargs)

        kwargs['default'] = SMS_NOTIFICATION_NAME.sms_campaign_limit_reached
        notification.create_notice_type(
            "sms_campaign_limit_reached", _("SMS Campaign limit reached"),
            _("SMS Campaign limit reached"), **kwargs)

        kwargs['default'] = SMS_NOTIFICATION_NAME.sms_contact_limit_reached
        notification.create_notice_type(
            "sms_contact_limit_reached", _("SMS Contact limit reached"),
            _("SMS Contact limit reached"), **kwargs)

        kwargs['default'] = SMS_NOTIFICATION_NAME.sms_dialer_setting_configuration
        notification.create_notice_type(
            "sms_dialer_setting_configuration", _("SMS Dialer setting configuration"),
            _("The SMS Dialer settings needs to be mapped with dialer settings by the administrator"),
            **kwargs)
    signals.post_syncdb.connect(create_notice_types, sender=notification)
else:
    print "Skipping creation of NoticeTypes as notification app not found"

########NEW FILE########
__FILENAME__ = utils_tags
#
# Newfies-Dialer License
# http://www.newfies-dialer.org
#
# This Source Code Form is subject to the terms of the Mozilla Public
# License, v. 2.0. If a copy of the MPL was not distributed with this file,
# You can obtain one at http://mozilla.org/MPL/2.0/.
#
# Copyright (C) 2011-2014 Star2Billing S.L.
#
# The Initial Developer of the Original Code is
# Arezqui Belaid <info@star2billing.com>
#

from django.utils.safestring import mark_safe
from django.template.defaultfilters import register
from django_lets_go.common_functions import word_capital
import re
from string import Template


def striphtml(data):
    p = re.compile(r'<.*?>')
    return mark_safe(p.sub('', data))


@register.simple_tag(name='field_html_code')
def field_html_code(field, main_class='col-md-6 col-xs-8', flag_error_text=True, flag_help_text=True):
    """
    Usage: {% field_html_code field 'col-md-6 col-xs-8' %}
    """
    tmp_div = Template("""
        <div class="$main_class">
            <div class="form-group $has_error">
                <label class="control-label" for="$field_auto_id">$field_label</label>
                $field
                $field_errors
                $field_help_text
            </div>
        </div>
    """)
    has_error = 'has-error' if field.errors else ''
    field_errors = ''
    if field.errors and flag_error_text:
        field_errors = '<span class="help-block">%s</span>\n' % striphtml(str(field.errors)).capitalize()

    field_help_text = ''
    if flag_help_text:
        field_help_text = '<span class="help-block">%s</span>\n' % (field.help_text.capitalize())

    htmlcell = tmp_div.substitute(
        main_class=main_class, has_error=has_error,
        field_auto_id=field.auto_id, field_label=word_capital(field.label),
        field=str(field).decode("utf-8"), field_errors=field_errors,
        field_help_text=field_help_text)

    return mark_safe(htmlcell)


@register.filter(name='check_url_for_template_width')
def check_url_for_template_width(current_url):
    """"""
    full_width_on_requested_path = [
        '/dashboard/', '/sms_dashboard/', '/campaign/', '/sms_campaign/',
        'user_detail_change', '/audio/', '/user_notification/',
    ]
    if current_url == '/':
        return True
    else:
        current_url = str(current_url)
        for path in full_width_on_requested_path:
            if path in current_url:
                return True
        return False

########NEW FILE########
__FILENAME__ = test_runner
#
# Newfies-Dialer License
# http://www.newfies-dialer.org
#
# This Source Code Form is subject to the terms of the Mozilla Public
# License, v. 2.0. If a copy of the MPL was not distributed with this file,
# You can obtain one at http://mozilla.org/MPL/2.0/.
#
# Copyright (C) 2011-2014 Star2Billing S.L.
#
# The Initial Developer of the Original Code is
# Arezqui Belaid <info@star2billing.com>
#

from djcelery.contrib.test_runner import CeleryTestSuiteRunner
from django_nose import NoseTestSuiteRunner
#from django_selenium.selenium_runner import SeleniumTestRunner


#class MyRunner(CeleryTestSuiteRunner, SeleniumTestRunner):
#    pass


class MyRunner(CeleryTestSuiteRunner, NoseTestSuiteRunner):
    pass

########NEW FILE########
__FILENAME__ = settings
#
# Newfies-Dialer License
# http://www.newfies-dialer.org
#
# This Source Code Form is subject to the terms of the Mozilla Public
# License, v. 2.0. If a copy of the MPL was not distributed with this file,
# You can obtain one at http://mozilla.org/MPL/2.0/.
#
# Copyright (C) 2011-2014 Star2Billing S.L.
#
# The Initial Developer of the Original Code is
# Arezqui Belaid <info@star2billing.com>
#
import os
import djcelery
djcelery.setup_loader()

# Django settings for project.
DEBUG = False
TEMPLATE_DEBUG = False

ADMINS = (
    ('Your Name', 'your_email@domain.com'),
)
MANAGERS = ADMINS

SERVER_EMAIL = 'newfies@localhost.com'

APPLICATION_DIR = os.path.dirname(globals()['__file__']) + '/../'

DATABASES = {
    'default': {
        # 'postgresql_psycopg2','postgresql','sqlite3','oracle', 'django.db.backends.mysql'
        'ENGINE': 'django.db.backends.sqlite3',
        # Database name or path to database file if using sqlite3.
        'NAME': APPLICATION_DIR + '/database/newfies-dialer.db',
        'USER': '',                      # Not used with sqlite3.
        'PASSWORD': '',                  # Not used with sqlite3.
        'HOST': '',                      # Not used with sqlite3.
        'PORT': '',                      # Not used with sqlite3.
        # 'OPTIONS': {
        #    'init_command': 'SET storage_engine=INNODB',
        # }
    }
}

CACHES = {
    'default': {
        'BACKEND': 'django.core.cache.backends.filebased.FileBasedCache',
        'LOCATION': '/var/tmp/django_cache',
    }
}

# Local time zone for this installation. Choices can be found here:
# http://en.wikipedia.org/wiki/List_of_tz_zones_by_name
# although not all choices may be available on all operating systems.
# On Unix systems, a value of None will cause Django to use the same
# timezone as the operating system.
# If running in a Windows environment this must be set to the same as your
# system time zone.
TIME_ZONE = 'America/Chicago'

# set use of timezone true or false
USE_TZ = True

# Language code for this installation. All choices can be found here:
# http://www.i18nguy.com/unicode/language-identifiers.html
LANGUAGE_CODE = 'en-us'

SITE_ID = 1

# If you set this to False, Django will make some optimizations so as not
# to load the internationalization machinery.
USE_I18N = True

# If you set this to False, Django will not format dates, numbers and
# calendars according to the current locale
USE_L10N = False

DATETIME_FORMAT = 'Y-m-d H:i:s'

DATE_FORMAT = 'Y-m-d'

# Absolute path to the directory static files should be collected to.
# Don't put anything in this directory yourself; store your static files
# in apps' "static/" subdirectories and in STATICFILES_DIRS.
# Example: "/home/media/media.lawrence.com/static/"
STATIC_ROOT = os.path.join(APPLICATION_DIR, 'static')

# URL prefix for static files.
# Example: "http://media.lawrence.com/static/"
STATIC_URL = '/static/'

# Absolute path to the directory that holds media.
# Example: "/home/media/media.lawrence.com/"
MEDIA_ROOT = os.path.join(APPLICATION_DIR, 'usermedia')

# URL that handles the media served from MEDIA_ROOT. Make sure to use a
# trailing slash if there is a path component (optional in other cases).
# Examples: "http://media.lawrence.com", "http://example.com/media/"
MEDIA_URL = '/usermedia/'

# Additional locations of static files
STATICFILES_DIRS = (
    # Put strings here, like "/home/html/static" or "C:/www/django/static".
    # Always use forward slashes, even on Windows.
    # Don't forget to use absolute paths, not relative paths.
    # os.path.join(APPLICATION_DIR, "resources"),
    ("newfies", os.path.join(APPLICATION_DIR, "resources")),
)

# List of finder classes that know how to find static files in
# various locations.
STATICFILES_FINDERS = (
    'django.contrib.staticfiles.finders.FileSystemFinder',
    'django.contrib.staticfiles.finders.AppDirectoriesFinder',
    #'django.contrib.staticfiles.finders.DefaultStorageFinder',
    'dajaxice.finders.DajaxiceFinder',
    'djangobower.finders.BowerFinder',
)

# Make this unique, and don't share it with anybody.
SECRET_KEY = 'ujau$^uei_ak=@-v8va(&@q_sc0^1nn*qpwyc-776n&qoam@+v'

# List of callables that know how to import templates from various sources.
TEMPLATE_LOADERS = (
    'django.template.loaders.filesystem.Loader',
    'django.template.loaders.app_directories.Loader',
    'django.template.loaders.eggs.Loader',
)

MIDDLEWARE_CLASSES = (
    #'raven.contrib.django.middleware.SentryResponseErrorIdMiddleware',
    #'raven.contrib.django.middleware.Sentry404CatchMiddleware',
    'corsheaders.middleware.CorsMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.locale.LocaleMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    #'pagination.middleware.PaginationMiddleware',
    'linaro_django_pagination.middleware.PaginationMiddleware',
    'django_lets_go.filter_persist_middleware.FilterPersistMiddleware',
    'audiofield.middleware.threadlocals.ThreadLocals',
)


TEMPLATE_CONTEXT_PROCESSORS = (
    "django.contrib.auth.context_processors.auth",
    "django.core.context_processors.debug",
    "django.core.context_processors.i18n",
    "django.core.context_processors.media",
    "django.core.context_processors.static",
    "django.core.context_processors.csrf",
    "django.core.context_processors.tz",
    "django.contrib.messages.context_processors.messages",
    # newfies custom context_processors
    "context_processors.newfies_version",
    "context_processors.newfies_common_template_variable",
    # django-notification
    "notification.context_processors.notification",
    #needed by Sentry
    "django.core.context_processors.request",
)

SESSION_SERIALIZER = 'django.contrib.sessions.serializers.PickleSerializer'

ROOT_URLCONF = 'newfies_dialer.urls'

TEMPLATE_DIRS = (
    # Put strings here, like "/home/html/django_templates" or
    # "C:/www/django/templates".
    # Always use forward slashes, even on Windows.
    # Don't forget to use absolute paths, not relative paths.
    os.path.join(APPLICATION_DIR, 'templates'),
)

INTERNAL_IPS = ('127.0.0.1',)

ALLOWED_HOSTS = ['127.0.0.1']

DAJAXICE_MEDIA_PREFIX = "dajaxice"
#DAJAXICE_MEDIA_PREFIX = "dajax"  # http://domain.com/dajax/
#DAJAXICE_CACHE_CONTROL = 10 * 24 * 60 * 60

INSTALLED_APPS = (
    #admin tool apps
    'admin_tools',
    'admin_tools.theming',
    'admin_tools.menu',
    'admin_tools.dashboard',
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.sites',
    'django.contrib.staticfiles',
    # 'django.contrib.markup',
    'django_countries',
    'admin_tools_stats',
    'genericadmin',
    'mailer',
    'south',
    'djcelery',
    'audiofield',
    'tagging',
    'adminsortable',
    'dajaxice',
    'dajax',
    'dateutil',
    #'pagination',
    'linaro_django_pagination',
    #'memcache_status',
    'country_dialcode',
    'django_lets_go',
    'sms',
    'mod_sms',
    'dialer_contact',
    'dialer_audio',
    'dialer_campaign',
    'dialer_cdr',
    'dialer_gateway',
    'dialer_settings',
    'mod_registration',
    'user_profile',
    'notification',
    'survey',
    'dnc',
    'frontend',
    #'agent',
    #'callcenter',
    'appointment',
    'mod_mailer',
    'mod_utils',
    #'raven.contrib.django',
    'frontend_notification',
    'django_nvd3',
    'rest_framework',
    'rest_framework.authtoken',
    'corsheaders',
    'djangobower',
    'activelink',
    'bootstrap3_datetime',
    'crispy_forms',
)

CRISPY_TEMPLATE_PACK = 'bootstrap3'

# Django extensions
try:
    import gunicorn
except ImportError:
    pass
else:
    INSTALLED_APPS = INSTALLED_APPS + ('gunicorn',)

# Redisboard
try:
    import redisboard
except ImportError:
    pass
else:
    INSTALLED_APPS = INSTALLED_APPS + ('redisboard',)

# Debug Toolbar
try:
    import debug_toolbar
except ImportError:
    pass
else:
    INSTALLED_APPS = INSTALLED_APPS + ('debug_toolbar', )
    #INSTALLED_APPS = INSTALLED_APPS + ('debug_toolbar', 'template_timings_panel',)
    MIDDLEWARE_CLASSES = MIDDLEWARE_CLASSES + \
        ('debug_toolbar.middleware.DebugToolbarMiddleware',)
    DEBUG_TOOLBAR_PANELS = [
        'debug_toolbar.panels.versions.VersionsPanel',
        'debug_toolbar.panels.timer.TimerPanel',
        'debug_toolbar.panels.settings.SettingsPanel',
        'debug_toolbar.panels.headers.HeadersPanel',
        'debug_toolbar.panels.request.RequestPanel',
        'debug_toolbar.panels.sql.SQLPanel',
        # StaticFilesPanel broken https://github.com/django-debug-toolbar/django-debug-toolbar/issues/503
        # 'debug_toolbar.panels.staticfiles.StaticFilesPanel',
        'debug_toolbar.panels.templates.TemplatesPanel',
        'debug_toolbar.panels.cache.CachePanel',
        'debug_toolbar.panels.signals.SignalsPanel',
        'debug_toolbar.panels.logging.LoggingPanel',
        'debug_toolbar.panels.redirects.RedirectsPanel',
        #'template_timings_panel.panels.TemplateTimings.TemplateTimings',
    ]
    DEBUG_TOOLBAR_CONFIG = {
        'INTERCEPT_REDIRECTS': False,
        'HIDE_DJANGO_SQL': False,
        'ENABLE_STACKTRACES': True,
        'SQL_WARNING_THRESHOLD': 100,   # milliseconds
    }
    DEBUG_TOOLBAR_PATCH_SETTINGS = False

# Django extensions
try:
    import django_extensions
except ImportError:
    pass
else:
    INSTALLED_APPS = INSTALLED_APPS + ('django_extensions',)

# Nose
try:
    import nose
except ImportError:
    pass
else:
    INSTALLED_APPS = INSTALLED_APPS + ('django_nose',)
    TEST_RUNNER = 'utils.test_runner.MyRunner'

# Dilla
try:
    import django_dilla
except ImportError:
    pass
else:
    INSTALLED_APPS = INSTALLED_APPS + ('dilla',)

#No of records per page
#=======================
PAGE_SIZE = 10

# AUTH MODULE SETTINGS
AUTH_PROFILE_MODULE = 'user_profile.UserProfile'
#AUTH_USER_MODEL = 'user_profile.UserProfile'
LOGIN_REDIRECT_URL = '/'
LOGIN_URL = '/pleaselog/'

#DILLA SETTINGS
#==============
DICTIONARY = "/usr/share/dict/words"
DILLA_USE_LOREM_IPSUM = False  # set to True ignores dictionary
DILLA_APPS = [
    'auth',
    #'dialer_gateway',
    'voip_app',
    'dialer_campaign',
    'dialer_cdr',
]
DILLA_SPAMLIBS = [
    #'voip_app.voip_app_custom_spamlib',
    #'dialer_campaign.dialer_campaign_custom_spamlib',
    'dialer_cdr.dialer_cdr_custom_spamlib',
]
# To use Dilla
# > python manage.py run_dilla --cycles=100


#MEMCACHE
#========
#CACHES = {
#  'default': {
#    'BACKEND': 'django.core.cache.backends.memcached.MemcachedCache',
#    'LOCATION': '127.0.0.1:11211',
#    'KEY_PREFIX': 'newfies_',
#  }
#}


#REST FRAMEWORK
#==============
REST_FRAMEWORK = {
    #'DEFAULT_PERMISSION_CLASSES': ('rest_framework.permissions.IsAdminUser',),
    'PAGINATE_BY': 10,
    'DEFAULT_AUTHENTICATION_CLASSES': (
        'rest_framework.authentication.SessionAuthentication',
        'rest_framework.authentication.BasicAuthentication',
        'rest_framework.authentication.TokenAuthentication',
    ),
    'DEFAULT_PERMISSION_CLASSES': (
        'rest_framework.permissions.IsAuthenticated',
        #'rest_framework.permissions.DjangoModelPermissions',
    ),
    #'DEFAULT_THROTTLE_CLASSES': (
    #    'rest_framework.throttling.SimpleRateThrottle',
    #),
    #'DEFAULT_THROTTLE_RATES': {
    #    'anon': '100/day',
    #    'user': '1000/day'
    #}
}

#REDIS-CACHE
#===========
CACHES = {
    'default': {
        'BACKEND': 'redis_cache.RedisCache',
        'LOCATION': '127.0.0.1:6379',
        #'OPTIONS': {
        #    'DB': 1,
        #    'PASSWORD': 'yadayada',
        #    'PARSER_CLASS': 'redis.connection.HiredisParser'
        #},
    },
}

#CELERY SETTINGS
#===============
## Broker settings
BROKER_URL = "redis://localhost:6379/0"
#BROKER_URL = 'amqp://guest:guest@localhost:5672//'
REDIS_HOST = 'localhost'
REDIS_PORT = 6379
REDIS_DB = 0
#REDIS_CONNECT_RETRY = True

## Using the database to store task state and results.
CELERY_RESULT_BACKEND = "redis://localhost:6379/0"
CELERY_TASK_RESULT_EXPIRES = 18000  # 5 hours.

#CELERY_REDIS_CONNECT_RETRY = True
CELERY_TIMEZONE = 'Europe/Madrid'
CELERY_ENABLE_UTC = True
CELERY_ACCEPT_CONTENT = ['json', 'pickle']

REDIS_DB = 0
# REDIS_CONNECT_RETRY = True

CELERY_DEFAULT_QUEUE = 'newfies'
CELERY_DEFAULT_EXCHANGE = "newfies_tasks"
CELERY_DEFAULT_EXCHANGE_TYPE = "topic"
CELERY_DEFAULT_ROUTING_KEY = "task.newfies"
CELERY_QUEUES = {
    'newfies': {
        'binding_key': '#',
    },
}

from kombu import Queue

CELERY_DEFAULT_QUEUE = 'default'
#Define list of Queues and their routing keys
CELERY_QUEUES = (
    Queue('default', routing_key='task.#'),
    Queue('sms_tasks', routing_key='mod_sms.#'),
    Queue('appointment', routing_key='appointment.#'),
)
CELERY_DEFAULT_EXCHANGE = 'tasks'
CELERY_DEFAULT_EXCHANGE_TYPE = 'topic'
CELERY_DEFAULT_ROUTING_KEY = 'task.default'

# python manage.py celeryd -EB -l info --purge --queue=sms_tasks
# Define tasks and which queue they will use with their routing key
CELERY_ROUTES = {
    'mod_sms.tasks.sms_campaign_running': {
        'queue': 'sms_tasks',
        'routing_key': 'mod_sms.sms_campaign_running',
    },
}

"""
from datetime import timedelta
from celery.schedules import crontab

CELERYBEAT_SCHEDULE = {
    "runs-every-second": {
        "task": "dialer_campaign.tasks.campaign_running",
        "schedule": timedelta(seconds=1),
        #"args": (50)
    },
}
"""

#LANGUAGES
#===========
gettext = lambda s: s
LANGUAGES = (
    ('en', gettext('English')),
    ('fr', gettext('French')),
    ('es', gettext('Spanish')),
    ('pt', gettext('Portuguese')),
    ('zh', gettext('Chinese')),
    ('tr', gettext('Turkish')),
    ('ja', gettext('Japanese')),
)

LOCALE_PATHS = (
    os.path.join(APPLICATION_DIR, 'locale'),
)

LANGUAGE_COOKIE_NAME = 'newfies_dialer_language'

#DJANGO-ADMIN-TOOL
#=================
ADMIN_TOOLS_MENU = 'custom_admin_tools.menu.CustomMenu'
ADMIN_TOOLS_INDEX_DASHBOARD = 'custom_admin_tools.dashboard.CustomIndexDashboard'
ADMIN_TOOLS_APP_INDEX_DASHBOARD = 'custom_admin_tools.dashboard.CustomAppIndexDashboard'
ADMIN_MEDIA_PREFIX = '/static/admin/'

#EMAIL BACKEND
#=============
# Use only in Debug mode. Not in production
#EMAIL_BACKEND = 'django.core.mail.backends.console.EmailBackend'
EMAIL_BACKEND = 'django.core.mail.backends.dummy.EmailBackend'
MAILER_EMAIL_BACKEND = 'django.core.mail.backends.smtp.EmailBackend'

# EMAIL_ADMIN will be used for forget password email sent
EMAIL_ADMIN = 'newfies_admin@localhost.com'

# ADD 'dummy','plivo','twilio','esl'
NEWFIES_DIALER_ENGINE = 'esl'

#TASTYPIE API
#============
API_ALLOWED_IP = ['127.0.0.1', 'localhost']

#SENTRY SETTINGS
#===============
#SENTRY_DSN = 'http://asdada:asdasd@localhost:9000/1'

#DIALER
#======
MAX_CALLS_PER_SECOND = 20  # By default configured to 20 calls per second

# Number of time the spooling tasks will be run per minute,
# value like 10 will allow not waiting too long for 1st calls
HEARTBEAT_MIN = 10  # accepted value from 1 to 10

# Delay outbound call of X seconds
DELAY_OUTBOUND = 0

# Frontend widget values
CHANNEL_TYPE_VALUE = 1  # 0-Keep original, 1-Mono, 2-Stereo

# 0-Keep original, 8000-8000Hz, 16000-16000Hz, 22050-22050Hz,
# 44100-44100Hz, 48000-48000Hz, 96000-96000Hz
FREQ_TYPE_VALUE = 8000

# 0-Keep original, 1-Convert to MP3, 2-Convert to WAV, 3-Convert to OGG
CONVERT_TYPE_VALUE = 2

AUDIO_DEBUG = False

#ESL
#===
ESL_HOSTNAME = '127.0.0.1'
ESL_PORT = '8021'
ESL_SECRET = 'ClueCon'
ESL_SCRIPT = '&lua(/usr/share/newfies-lua/newfies.lua)'

#TEXT-TO-SPEECH
#==============
TTS_ENGINE = 'FLITE'  # FLITE, CEPSTRAL, ACAPELA

ACCOUNT_LOGIN = 'EVAL_XXXX'
APPLICATION_LOGIN = 'EVAL_XXXXXXX'
APPLICATION_PASSWORD = 'XXXXXXXX'

SERVICE_URL = 'http://vaas.acapela-group.com/Services/Synthesizer'
QUALITY = '22k'  # 22k, 8k, 8ka, 8kmu
ACAPELA_GENDER = 'W'
ACAPELA_INTONATION = 'NORMAL'

#DEBUG DIALER
#============
DIALERDEBUG = False
DIALERDEBUG_PHONENUMBER = 1000


#Survey in dev
#=============
SURVEYDEV = False
AMD = False

#Demo mode
#=========
#This will disable certain save, to avoid changing password
DEMO_MODE = False

#IPYTHON
#=======
IPYTHON_ARGUMENTS = [
    '--ext', 'django_extensions.management.notebook_extension',
    '--profile=nbserver',
    '--debug'
]

#GENERAL
#=======
# PREFIX_LIMIT_MIN & PREFIX_LIMIT_MAX are used to know
# how many digits are used to match against the dialcode prefix database
PREFIX_LIMIT_MIN = 2
PREFIX_LIMIT_MAX = 5

# List of phonenumber prefix to ignore, this will be remove prior analysis
PREFIX_TO_IGNORE = "+,0,00,000,0000,00000,011,55555,99999"

#CORS (Cross-Origin Resource Sharing)
#====================================

#if True, the whitelist will not be used and all origins will be accepted
CORS_ORIGIN_ALLOW_ALL = True

#specify a list of origin hostnames that are authorized to make a cross-site HTTP request
#CORS_ORIGIN_WHITELIST = ()

#specify a regex list of origin hostnames that are authorized to make a cross-site HTTP request
#CORS_ORIGIN_REGEX_WHITELIST = ('^http?://(\w+\.)?google\.com$', )

#specify the allowed HTTP methods that can be used when making the actual request
CORS_ALLOW_METHODS = (
    'GET',
    'POST',
    'PUT',
    'PATCH',
    'DELETE',
    'OPTIONS'
)


#specify which non-standard HTTP headers can be used when making the actual request
CORS_ALLOW_HEADERS = (
    'x-requested-with',
    'content-type',
    'accept',
    'origin',
    'authorization',
    'x-csrftoken',
)

CORS_ORIGIN_WHITELIST = (
    'hostname.example.com',
)
#specify which HTTP headers are to be exposed to the browser
CORS_EXPOSE_HEADERS = ()

#specify whether or not cookies are allowed to be included
CORS_ALLOW_CREDENTIALS = False

# Django-bower
# ------------
# Specifie path to components root (you need to use absolute path)
BOWER_COMPONENTS_ROOT = os.path.join(APPLICATION_DIR, 'components')

BOWER_PATH = '/usr/bin/bower'

BOWER_INSTALLED_APPS = (
    'jquery#2.0.3',
    'jquery-ui#~1.10.3',
    'bootstrap#3.0.3',
    'bootstrap-switch#2.0.0',
    'bootbox#4.1.0',
    'd3#3.3.6',
    'nvd3#1.1.12-beta',
    'components-font-awesome#4.0.3',
)

#Need to build documentation with Django 1.6
LOGGING_CONFIG = None

# DAJAXICE setting
# Not Include XmlHttpRequest.js inside dajaxice.core.js
DAJAXICE_XMLHTTPREQUEST_JS_IMPORT = False

#IMPORT LOCAL SETTINGS
#=====================
try:
    from settings_local import *
except ImportError:
    pass

########NEW FILE########
__FILENAME__ = settings_test
#
# Newfies-Dialer License
# http://www.newfies-dialer.org
#
# This Source Code Form is subject to the terms of the Mozilla Public
# License, v. 2.0. If a copy of the MPL was not distributed with this file,
# You can obtain one at http://mozilla.org/MPL/2.0/.
#
# Copyright (C) 2011-2014 Star2Billing S.L.
#
# The Initial Developer of the Original Code is
# Arezqui Belaid <info@star2billing.com>
#

#IMPORT SETTINGS
#===============
from settings import *


# make tests faster
# False : test will make the test database be created using syncdb
SOUTH_TESTS_MIGRATE = False

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': ':memory:',
    }
}

BROKER_BACKEND = "memory"
CELERY_ALWAYS_EAGER = True

INSTALLED_APPS += ('django_nose', )
TEST_RUNNER = 'django_nose.run_tests'

########NEW FILE########
__FILENAME__ = urls
#
# Newfies-Dialer License
# http://www.newfies-dialer.org
#
# This Source Code Form is subject to the terms of the Mozilla Public
# License, v. 2.0. If a copy of the MPL was not distributed with this file,
# You can obtain one at http://mozilla.org/MPL/2.0/.
#
# Copyright (C) 2011-2014 Star2Billing S.L.
#
# The Initial Developer of the Original Code is
# Arezqui Belaid <info@star2billing.com>
#
from django.conf.urls import handler404, handler500, \
    include, patterns, url
from django.conf import settings
from apirest.urls import urlpatterns as urlpatterns_apirest
from agent.api_urls import urlpatterns as urlpatterns_agent_apirest
from appointment.urls import urlpatterns as urlpatterns_appointment
from frontend.urls import urlpatterns as urlpatterns_frontend
from dialer_contact.urls import urlpatterns as urlpatterns_dialer_contact
from dialer_campaign.urls import urlpatterns as urlpatterns_dialer_campaign
from dialer_cdr.urls import urlpatterns as urlpatterns_dialer_cdr
from dnc.urls import urlpatterns as urlpatterns_dnc
from user_profile.urls import urlpatterns as urlpatterns_user_profile
from survey.urls import urlpatterns as urlpatterns_survey
from dialer_audio.urls import urlpatterns as urlpatterns_dialer_audio
from frontend_notification.urls import urlpatterns as urlpatterns_frontend_notification
from mod_registration.urls import urlpatterns as urlpatterns_mod_registration
#from agent.urls import urlpatterns as urlpatterns_agent
#from callcenter.urls import urlpatterns as urlpatterns_callcenter
from mod_sms.urls import urlpatterns as urlpatterns_mod_sms
from dajaxice.core import dajaxice_autodiscover, dajaxice_config
from django.contrib import admin
import os


admin.autodiscover()
dajaxice_autodiscover()

js_info_dict = {
    'domain': 'djangojs',
    'packages': ('dialer_campaign',
                 'user_profile',
                 'survey',
                 'audiofield'),
}

urlpatterns = patterns('',
    (r'^logout/$', 'frontend.views.logout_view'),
    (r'^admin/', include(admin.site.urls)),
    (r'^i18n/', include('django.conf.urls.i18n')),
    (r'^jsi18n/$', 'django.views.i18n.javascript_catalog', js_info_dict),
    (r'^admin_tools/', include('admin_tools.urls')),
    (r'^static/(?P<path>.*)$', 'django.views.static.serve',
        {'document_root': settings.STATIC_ROOT}),
    #(r'^sentry/', include('sentry.web.urls')),
    #(r'^%s/' % settings.DAJAXICE_MEDIA_PREFIX, include('dajaxice.urls')),
    url(dajaxice_config.dajaxice_url, include('dajaxice.urls')),
)

if settings.DEBUG:
    import debug_toolbar
    urlpatterns += patterns('', url(r'^__debug__/', include(debug_toolbar.urls)),)

urlpatterns += urlpatterns_apirest
urlpatterns += urlpatterns_agent_apirest
urlpatterns += urlpatterns_frontend
urlpatterns += urlpatterns_mod_registration
urlpatterns += urlpatterns_dialer_contact
urlpatterns += urlpatterns_dialer_campaign
urlpatterns += urlpatterns_dialer_cdr
urlpatterns += urlpatterns_dnc
urlpatterns += urlpatterns_user_profile
urlpatterns += urlpatterns_survey
urlpatterns += urlpatterns_dialer_audio
urlpatterns += urlpatterns_frontend_notification
#urlpatterns += urlpatterns_agent
#urlpatterns += urlpatterns_callcenter
urlpatterns += urlpatterns_appointment
urlpatterns += urlpatterns_mod_sms

urlpatterns += patterns('',
    (r'^%s/(?P<path>.*)$' % settings.MEDIA_URL.strip(os.sep),
        'django.views.static.serve', {'document_root': settings.MEDIA_ROOT}),
)


handler404 = 'urls.custom_404_view'
handler500 = 'urls.custom_500_view'


def custom_404_view(request, template_name='404.html'):
    """404 error handler which includes ``request`` in the context.

    Templates: `404.html`
    Context: None
    """
    from django.template import Context, loader
    from django.http import HttpResponseServerError

    t = loader.get_template('404.html')  # Need to create a 404.html template.
    return HttpResponseServerError(t.render(Context({
        'request': request,
    })))


def custom_500_view(request, template_name='500.html'):
    """500 error handler which includes ``request`` in the context.

    Templates: `500.html`
    Context: None
    """
    from django.template import Context, loader
    from django.http import HttpResponseServerError

    t = loader.get_template('500.html')  # Need to create a 500.html template.
    return HttpResponseServerError(t.render(Context({
        'request': request,
    })))

########NEW FILE########
__FILENAME__ = runtests
#!/usr/bin/env python

#
# Usage : python manage.py test --with-xtraceback --with-color
# Run on shell test coverage : python manage.py test --progressive-with-bar --with-coverage --cover-html --cover-package=newfies
#
#

import sys
import logging
from optparse import OptionParser
from coverage import coverage
import settings

#from tests.config import configure

logging.disable(logging.CRITICAL)


import os
from django.utils.importlib import import_module


PINAX_ROOT = os.path.abspath(os.path.dirname(newfies.__file__))

def setup_environ(dunder_file=None, project_path=None, relative_project_path=None, settings_path=None):
    assert not (dunder_file and project_path), ("You must not specify both "
        "__file__ and project_path")

    if dunder_file is not None:
        file_path = os.path.abspath(os.path.dirname(dunder_file))
        if relative_project_path is not None:
            project_path = os.path.abspath(os.path.join(file_path, *relative_project_path))
        else:
            project_path = file_path

    # the basename must be the project name and importable.
    project_name = os.path.basename(project_path)

    # setup Django correctly (the hard-coding of settings is only temporary.
    # carljm's proposal will remove that)
    if settings_path is None:
        if "DJANGO_SETTINGS_MODULE" not in os.environ:
            os.environ["DJANGO_SETTINGS_MODULE"] = "%s.settings" % project_name
    else:
        os.environ["DJANGO_SETTINGS_MODULE"] = settings_path

    # ensure the importablity of project
    sys.path.append(os.path.join(project_path, os.pardir))
    import_module(project_name)
    sys.path.pop()

    # Pinax adds an app directory for users as a reliable location for
    # Django apps
    sys.path.insert(0, os.path.join(project_path, "newfies"))


def run_tests(options, *test_args):
    from django_nose import NoseTestSuiteRunner
    test_runner = NoseTestSuiteRunner(verbosity=options.verbosity,
                                      pdb=options.pdb,
                                      )
    if not test_args:
        test_args = ['tests']
    num_failures = test_runner.run_tests(test_args)
    if num_failures:
        sys.exit(num_failures)


if __name__ == '__main__':
    parser = OptionParser()
    parser.add_option('-c', '--coverage', dest='use_coverage', default=False,
                      action='store_true', help="Generate coverage report")
    parser.add_option('-v', '--verbosity', dest='verbosity', default=1,
                      type='int', help="Verbosity of output")
    parser.add_option('-d', '--pdb', dest='pdb', default=False,
                      action='store_true', help="Whether to drop into PDB on failure/error")
    (options, args) = parser.parse_args()

    # If no args, then use 'progressive' plugin to keep the screen real estate
    # used down to a minimum.  Otherwise, use the spec plugin
    nose_args = ['-s', '-x',
                 '--with-progressive' if not args else '--with-spec']
    #configure(nose_args)


    project_path = os.path.join(PINAX_ROOT, "projects", name)
    setup_environ()

    if options.use_coverage:
        print 'Running tests with coverage'
        c = coverage(source=['newfies'])
        c.start()
        run_tests(options, *args)
        c.stop()
        print 'Generate HTML reports'
        c.html_report()
    else:
        run_tests(options, *args)

########NEW FILE########
__FILENAME__ = admin
# -*- coding: utf-8 -*-
#
# Newfies-Dialer License
# http://www.newfies-dialer.org
#
# This Source Code Form is subject to the terms of the Mozilla Public
# License, v. 2.0. If a copy of the MPL was not distributed with this file,
# You can obtain one at http://mozilla.org/MPL/2.0/.
#
# Copyright (C) 2011-2014 Star2Billing S.L.
#
# The Initial Developer of the Original Code is
# Arezqui Belaid <info@star2billing.com>
#

from django.contrib import admin
# from django.utils.translation import ugettext as _
from survey.models import Survey, Section, Branching, \
    Survey_template, Section_template, Branching_template, \
    Result, ResultAggregate
from adminsortable.admin import SortableAdmin, SortableTabularInline
# from django_lets_go.app_label_renamer import AppLabelRenamer

# AppLabelRenamer(native_app_label=u'survey', app_label=_('Survey')).main()


#Templates Section, Survey and Branching for Admin
class SectionTemplateInline(SortableTabularInline):
    """
    Inline Section Template
    """
    model = Section_template


class SurveyTemplateAdmin(admin.ModelAdmin):
    """
    Allows the administrator to view and modify survey.
    """
    inlines = [SectionTemplateInline]
    list_display = ('id', 'name', 'created_date', 'tts_language')
    list_display_links = ('id', 'name')

admin.site.register(Survey_template, SurveyTemplateAdmin)


class BranchingTemplateAdmin(admin.ModelAdmin):
    """
    Allows the administrator to view and modify branching.
    """
    list_display = ('id', 'keys', 'section', 'goto', 'created_date')
    search_fields = ['keys']
    list_filter = ['created_date', 'section']

admin.site.register(Branching_template, BranchingTemplateAdmin)


#Section, Survey and Branching for Admin
class SectionInline(SortableTabularInline):
    """
    Inline Section
    """
    model = Section


class SurveyAdmin(admin.ModelAdmin):

    """Allows the administrator to view and modify survey."""

    inlines = [SectionInline]
    list_display = ('id', 'name', 'created_date', 'tts_language')
    list_display_links = ('id', 'name')

admin.site.register(Survey, SurveyAdmin)


class SectionTemplateAdmin(SortableAdmin):

    """Allows the administrator to view and modify survey question."""

    list_display = ('id', 'survey', 'created_date')
    search_fields = ['question']
    list_filter = ['created_date', 'survey']

admin.site.register(Section_template, SectionTemplateAdmin)


class SectionAdmin(SortableAdmin):

    """Allows the administrator to view and modify survey question."""

    list_display = ('id', 'survey', 'created_date')
    search_fields = ['question']
    list_filter = ['created_date', 'survey']

admin.site.register(Section, SectionAdmin)


class BranchingAdmin(admin.ModelAdmin):

    """Allows the administrator to view and modify branching."""

    list_display = ('id', 'keys', 'section', 'goto', 'created_date')
    search_fields = ['keys']
    list_filter = ['created_date', 'section']

admin.site.register(Branching, BranchingAdmin)


#Result
class ResultAdmin(admin.ModelAdmin):

    """Allows the administrator to view and modify survey results."""

    list_display = ('id', 'callrequest', 'section', 'response',
                    'record_file', 'created_date')
    search_fields = ['campaign']
    list_filter = ['created_date']
    list_display_links = ('id',)
    ordering = ('id', )

admin.site.register(Result, ResultAdmin)


class ResultAggregateAdmin(admin.ModelAdmin):

    """Allows the administrator to view and modify survey aggregated result."""

    list_display = ('id', 'survey', 'section', 'response',
                    'count', 'created_date')
    search_fields = ['survey']
    list_filter = ['created_date', 'survey']
    list_display_links = ('id',)
    ordering = ('id', )

admin.site.register(ResultAggregate, ResultAggregateAdmin)

########NEW FILE########
__FILENAME__ = ajax
#
# Newfies-Dialer License
# http://www.newfies-dialer.org
#
# This Source Code Form is subject to the terms of the Mozilla Public
# License, v. 2.0. If a copy of the MPL was not distributed with this file,
# You can obtain one at http://mozilla.org/MPL/2.0/.
#
# Copyright (C) 2011-2014 Star2Billing S.L.
#
# The Initial Developer of the Original Code is
# Arezqui Belaid <info@star2billing.com>
#

from django.contrib.auth.decorators import login_required

from dajaxice.decorators import dajaxice_register
from dajax.core import Dajax

from survey.models import Section_template, Branching_template


@login_required
@dajaxice_register
def section_sort(request, id, sort_order):
    dajax = Dajax()

    try:
        section = Section_template.objects.get(pk=int(id))
        section.order = sort_order
        section.save()
        # dajax.alert("(%s) has been successfully sorted! % \
        #    (survey_question.question))
    except:
        pass
    return dajax.json()


@login_required
@dajaxice_register
def default_branching_goto(request, id, goto_id):
    dajax = Dajax()
    try:
        if id:
            branching_obj = Branching_template.objects.get(id=id)
            branching_obj.goto_id = goto_id
            branching_obj.save()
            # dajax.alert("(%s) has been successfully sorted! % \
            #    (survey_question.question))
    except:
        pass
    return dajax.json()

########NEW FILE########
__FILENAME__ = constants
#
# Newfies-Dialer License
# http://www.newfies-dialer.org
#
# This Source Code Form is subject to the terms of the Mozilla Public
# License, v. 2.0. If a copy of the MPL was not distributed with this file,
# You can obtain one at http://mozilla.org/MPL/2.0/.
#
# Copyright (C) 2011-2014 Star2Billing S.L.
#
# The Initial Developer of the Original Code is
# Arezqui Belaid <info@star2billing.com>
#

from django.utils.translation import ugettext as _
from django_lets_go.utils import Choice


class SECTION_TYPE(Choice):
    PLAY_MESSAGE = 1, _('play message').capitalize()
    MULTI_CHOICE = 2, _('multi-choice').capitalize()
    RATING_SECTION = 3, _('rating question').capitalize()
    CAPTURE_DIGITS = 4, _('capture digits').capitalize()
    RECORD_MSG = 5, _('record message').capitalize()
    CALL_TRANSFER = 6, _('call transfer').capitalize()
    HANGUP_SECTION = 7, _('hangup').capitalize()
    CONFERENCE = 8, _('conference').capitalize()
    DNC = 9, _('DNC')
    SMS = 10, _('SMS')


class SURVEY_COLUMN_NAME(Choice):
    name = _('name')
    description = _('description')
    date = _('date')


class SURVEY_CALL_RESULT_NAME(Choice):
    date = _('call-date ')
    destination = _('destination')
    duration = _('duration')
    disposition = _('disposition')
    result = _('survey result')


class SEALED_SURVEY_COLUMN_NAME(Choice):
    name = _('name')
    description = _('description')
    campaign = _('campaign')
    date = _('date')

########NEW FILE########
__FILENAME__ = forms
#
# Newfies-Dialer License
# http://www.newfies-dialer.org
#
# This Source Code Form is subject to the terms of the Mozilla Public
# License, v. 2.0. If a copy of the MPL was not distributed with this file,
# You can obtain one at http://mozilla.org/MPL/2.0/.
#
# Copyright (C) 2011-2014 Star2Billing S.L.
#
# The Initial Developer of the Original Code is
# Arezqui Belaid <info@star2billing.com>
#

from django import forms
from django.forms import ModelForm, Textarea
from django.utils.translation import ugettext_lazy as _
from dialer_campaign.models import Campaign
from dialer_contact.forms import SearchForm
from survey.models import Survey_template, Section_template, \
    Branching_template, Survey
from survey.constants import SECTION_TYPE
from audiofield.models import AudioFile
from mod_utils.forms import SaveUserModelForm, common_submit_buttons
from crispy_forms.helper import FormHelper
from crispy_forms.layout import Layout, Div, Field, Fieldset, HTML
from crispy_forms.bootstrap import AppendedText


def get_audiofile_list(user):
    """Get audio file list for logged in user
    with default none option"""
    list_af = []
    list_af.append(('', '---'))
    af_list = AudioFile.objects.values_list('id', 'name').filter(user=user).order_by('-id')
    for i in af_list:
        list_af.append((i[0], i[1]))
    return list_af


def get_section_question_list(survey_id, section_id):
    """Get survey question list for logged in user
    with default none option"""
    section_branch_list = Branching_template\
        .objects.values_list('section_id', flat=True)\
        .filter(section_id=section_id)
    list_sq = []
    list_sq.append(('', _('hangup').capitalize()))

    section_list = Section_template.objects.filter(survey_id=survey_id)\
        .exclude(pk=section_id).exclude(id__in=section_branch_list)
    for i in section_list:
        if i.question:
            q_string = i.question
        else:
            q_string = i.script
        list_sq.append((i.id, "Goto: %s" % (q_string)))

    return list_sq


def get_multi_question_choice_list(section_id):
    """
    Get survey question list for the user with a default none option
    """
    keys_list = Branching_template.objects.values_list('keys', flat=True)\
        .filter(section_id=int(section_id)).exclude(keys='')
    list_sq = []
    obj_section = Section_template.objects.get(id=int(section_id))

    if keys_list:
        keys_list = [integral for integral in keys_list]

    for i in range(0, 10):
        if (obj_section.__dict__['key_' + str(i)]
           and i not in keys_list):
            list_sq.append((i, '%s' % (obj_section.__dict__['key_' + str(i)])))

    list_sq.append(('any', _('any other key').capitalize()))
    list_sq.append(('invalid', _('invalid').capitalize()))
    return list_sq


def get_rating_choice_list(section_id):
    """
    Get survey rating laps for logged in user
    with default any other key option
    """
    keys_list = Branching_template.objects.values_list('keys', flat=True)\
        .filter(section_id=int(section_id)).exclude(keys='')

    obj_section = Section_template.objects.get(id=int(section_id))

    if keys_list:
        keys_list = [integral for integral in keys_list]

    list_sq = []
    if obj_section.rating_laps:
        for i in range(1, int(obj_section.rating_laps) + 1):
            if i not in keys_list:
                list_sq.append((i, '%s' % (str(i))))

    list_sq.append(('any', _('any other key').capitalize()))
    list_sq.append(('invalid', _('invalid').capitalize()))
    return list_sq


class SurveyForm(SaveUserModelForm):
    """Survey ModelForm"""

    class Meta:
        model = Survey_template
        exclude = ('user',)

    def __init__(self, *args, **kwargs):
        super(SurveyForm, self).__init__(*args, **kwargs)
        self.helper = FormHelper()
        self.helper.form_tag = False
        css_class = 'col-md-4'
        self.helper.layout = Layout(
            Div(
                Div('name', css_class=css_class),
                Div('tts_language', css_class=css_class),
                Div('description', css_class=css_class),
                css_class='row'
            ),
        )
        self.fields['description'].widget = forms.TextInput()

html_code_of_completed_field = """
                    <label for="{{ form.completed.auto_id }}">%s</label><br/>
                    <div class="make-switch switch-small">
                    {{ form.completed }}
                    </div>
                    """ % (_('completed').title())

append_html_code_to_audio_field = """<a href="#" id="helpover" rel="popover" data-placement="top" data-content="If an audio file is not selected, the script will be played using Text-To-Speech" data-original-title="information"><i class="fa-info"></i></a>"""


class PlayMessageSectionForm(ModelForm):
    """PlayMessageForm ModelForm"""

    class Meta:
        model = Section_template
        #fields = ['type', 'survey', 'question',  'audiofile', 'completed']  # 'retries',

    def __init__(self, user, *args, **kwargs):
        super(PlayMessageSectionForm, self).__init__(*args, **kwargs)
        self.helper = FormHelper()
        self.helper.form_tag = False
        self.helper.layout = Layout(
            Field('survey'),
            Div(Div('type', css_class='col-md-10 col-xs-12'), css_class='row'),
            Div(
                Div('question', css_class='col-md-8 col-xs-12'),
                Div('audiofile', css_class='col-md-4 col-xs-12'),
                css_class='row'
            ),
            Div(
                Div(HTML(html_code_of_completed_field), css_class='col-md-6 col-xs-10'),
                css_class='row'
            ),
        )
        if self.instance.audiofile:
            self.helper.layout[2][1] = AppendedText('audiofile', append_html_code_to_audio_field)

        self.fields['survey'].widget = forms.HiddenInput()
        self.fields['question'].label = _('section title').capitalize()
        self.fields['type'].widget.attrs['onchange'] = 'this.form.submit();'
        if user:
            self.fields['audiofile'].choices = get_audiofile_list(user)


class MultipleChoiceSectionForm(ModelForm):
    """MultipleChoiceSectionForm ModelForm"""

    class Meta:
        model = Section_template
        #fields = ['type', 'survey', 'question', 'retries', 'timeout', 'audiofile', 'invalid_audiofile',
        #          'key_0', 'key_1', 'key_2', 'key_3', 'key_4', 'key_5', 'key_6', 'key_7', 'key_8', 'key_9',
        #          'completed']

    def __init__(self, user, *args, **kwargs):
        super(MultipleChoiceSectionForm, self).__init__(*args, **kwargs)
        self.helper = FormHelper()
        self.helper.form_tag = False
        self.helper.layout = Layout(
            Field('survey'),
            Div(Div('type', css_class='col-md-10 col-xs-12'), css_class='row'),
            Div(
                Div('question', css_class='col-md-8 col-xs-12'),
                Div('audiofile', css_class='col-md-4 col-xs-12'),
                css_class='row'
            ),
            Div(
                Div('retries', css_class='col-md-6 col-xs-10'),
                Div('timeout', css_class='col-md-6 col-xs-10'),
                css_class='row'
            ),
            Div(
                Div(
                    HTML("""%s""" % _('configure valid multi-choice options. The value of each field will be shown in the survey report')),
                    css_class='col-md-12 col-xs-12'
                ),
                css_class='row'
            ),
            Div(
                Div('key_0', css_class='col-xs-2'),
                Div('key_1', css_class='col-xs-2'),
                Div('key_2', css_class='col-xs-2'),
                Div('key_3', css_class='col-xs-2'),
                Div('key_4', css_class='col-xs-2'),
                Div('key_5', css_class='col-xs-2'),
                Div('key_6', css_class='col-xs-2'),
                Div('key_7', css_class='col-xs-2'),
                Div('key_8', css_class='col-xs-2'),
                Div('key_9', css_class='col-xs-2'),
                css_class='row'
            ),
            Div(Div('invalid_audiofile', css_class='col-md-6 col-xs-8'), css_class='row'),
            Div(
                Div(HTML(html_code_of_completed_field), css_class='col-md-6 col-xs-10'),
                css_class='row'
            ),
        )
        if self.instance.audiofile:
            self.helper.layout[2][1] = AppendedText('audiofile', append_html_code_to_audio_field)
        if user:
            self.fields['audiofile'].choices = get_audiofile_list(user)
            self.fields['invalid_audiofile'].choices = self.fields['audiofile'].choices

        self.fields['survey'].widget = forms.HiddenInput()
        self.fields['type'].widget.attrs['onchange'] = 'this.form.submit();'


class RatingSectionForm(ModelForm):
    """RatingSectionForm ModelForm"""

    class Meta:
        model = Section_template
        #fields = ['type', 'survey', 'question', 'rating_laps',
        #          'retries', 'timeout', 'audiofile', 'invalid_audiofile', 'completed']

    def __init__(self, user, *args, **kwargs):
        super(RatingSectionForm, self).__init__(*args, **kwargs)
        self.helper = FormHelper()
        self.helper.form_tag = False
        self.helper.layout = Layout(
            Field('survey'),
            Div(Div('type', css_class='col-md-10 col-xs-12'), css_class='row'),
            Div(
                Div('question', css_class='col-md-8 col-xs-12'),
                Div('audiofile', css_class='col-md-4 col-xs-12'),
                css_class='row'
            ),
            Div(
                Div('retries', css_class='col-md-4 col-xs-4'),
                Div('timeout', css_class='col-md-4 col-xs-4'),
                Div('rating_laps', css_class='col-md-4 col-xs-4'),
                css_class='row'
            ),
            Div(Div('invalid_audiofile', css_class='col-md-6 col-xs-8'), css_class='row'),
            Div(
                Div(HTML(html_code_of_completed_field), css_class='col-md-6 col-xs-10'),
                css_class='row'
            ),
        )
        if self.instance.audiofile:
            self.helper.layout[2][1] = AppendedText('audiofile', append_html_code_to_audio_field)
        if user:
            self.fields['audiofile'].choices = get_audiofile_list(user)
            self.fields['invalid_audiofile'].choices = self.fields['audiofile'].choices

        self.fields['survey'].widget = forms.HiddenInput()
        self.fields['type'].widget.attrs['onchange'] = 'this.form.submit();'
        self.fields['rating_laps'].widget.attrs['maxlength'] = 3


class CaptureDigitsSectionForm(ModelForm):
    """CaptureDigitsSectionForm ModelForm"""

    class Meta:
        model = Section_template
        #fields = ['type', 'survey', 'question', 'validate_number', 'number_digits', 'min_number', 'max_number',
        #          'retries', 'timeout', 'audiofile', 'invalid_audiofile', 'completed']

    def __init__(self, user, *args, **kwargs):
        super(CaptureDigitsSectionForm, self).__init__(*args, **kwargs)
        self.helper = FormHelper()
        self.helper.form_tag = False
        self.helper.layout = Layout(
            Field('survey'),
            Div(Div('type', css_class='col-md-10 col-xs-12'), css_class='row'),
            Div(
                Div('question', css_class='col-md-8 col-xs-12'),
                Div('audiofile', css_class='col-md-4 col-xs-12'),
                css_class='row'
            ),
            Div(
                Div('retries', css_class='col-md-6 col-xs-10'),
                Div('timeout', css_class='col-md-6 col-xs-10'),
                css_class='row'
            ),
            Div(
                Div(HTML("""
                    <div class="btn-group" data-toggle="buttons">
                        <label for="{{ form.validate_number.auto_id }}">{{ form.validate_number.label }}</label><br/>
                        <div class="make-switch switch-small">
                        {{ form.validate_number }}
                        </div>
                    </div>
                """), css_class='col-md-4 col-xs-12'),
                css_class='row'
            ),
            Div(
                Div('number_digits', css_class='col-md-6 col-xs-10'),
                Div('min_number', css_class='col-md-3 col-xs-10'),
                Div('max_number', css_class='col-md-3 col-xs-10'),
                css_class='row'
            ),
            Div(Div('invalid_audiofile', css_class='col-md-6 col-xs-8'), css_class='row'),
            Div(
                Div(HTML(html_code_of_completed_field), css_class='col-md-6 col-xs-10'),
                css_class='row'
            ),
        )
        if self.instance.audiofile:
            self.helper.layout[2][1] = AppendedText('audiofile', append_html_code_to_audio_field)
        if user:
            self.fields['audiofile'].choices = get_audiofile_list(user)

        self.fields['survey'].widget = forms.HiddenInput()
        self.fields['type'].widget.attrs['onchange'] = 'this.form.submit();'


class RecordMessageSectionForm(ModelForm):
    """RecordMessageSectionForm ModelForm"""

    class Meta:
        model = Section_template
        #fields = ['type', 'survey', 'question', 'audiofile', 'completed']

    def __init__(self, user, *args, **kwargs):
        super(RecordMessageSectionForm, self).__init__(*args, **kwargs)
        self.helper = FormHelper()
        self.helper.form_tag = False
        self.helper.layout = Layout(
            Field('survey'),
            Div(Div('type', css_class='col-md-10 col-xs-12'), css_class='row'),
            Div(
                Div('question', css_class='col-md-8 col-xs-12'),
                Div('audiofile', css_class='col-md-4 col-xs-12'),
                css_class='row'
            ),
            Div(
                Div(HTML(html_code_of_completed_field), css_class='col-md-6 col-xs-10'),
                css_class='row'
            ),
        )
        if self.instance.audiofile:
            self.helper.layout[2][1] = AppendedText('audiofile', append_html_code_to_audio_field)
        if user:
            self.fields['audiofile'].choices = get_audiofile_list(user)

        self.fields['survey'].widget = forms.HiddenInput()
        self.fields['question'].label = _('section title').capitalize()
        self.fields['type'].widget.attrs['onchange'] = 'this.form.submit();'


class ConferenceSectionForm(ModelForm):
    """ConferenceSectionForm ModelForm"""

    class Meta:
        model = Section_template
        #fields = ['type', 'survey', 'question', 'audiofile', 'conference', 'completed']

    def __init__(self, user, *args, **kwargs):
        super(ConferenceSectionForm, self).__init__(*args, **kwargs)
        self.helper = FormHelper()
        self.helper.form_tag = False
        self.helper.layout = Layout(
            Field('survey'),
            Div(Div('type', css_class='col-md-10 col-xs-12'), css_class='row'),
            Div(
                Div('question', css_class='col-md-8 col-xs-12'),
                Div('audiofile', css_class='col-md-4 col-xs-12'),
                Div('conference', css_class='col-md-6 col-xs-10'),
                css_class='row'
            ),
            Div(
                Div(HTML(html_code_of_completed_field), css_class='col-md-6 col-xs-10'),
                css_class='row'
            ),
        )
        if self.instance.audiofile:
            self.helper.layout[2][1] = AppendedText('audiofile', append_html_code_to_audio_field)
        if user:
            self.fields['audiofile'].choices = get_audiofile_list(user)
        self.fields['survey'].widget = forms.HiddenInput()
        self.fields['type'].widget.attrs['onchange'] = 'this.form.submit();'
        self.fields['question'].label = _('section title').capitalize()


class CallTransferSectionForm(ModelForm):
    """CallTransferSectionForm ModelForm"""

    class Meta:
        model = Section_template
        #fields = ['type', 'survey', 'question', 'audiofile', 'phonenumber', 'completed']

    def __init__(self, user, *args, **kwargs):
        super(CallTransferSectionForm, self).__init__(*args, **kwargs)
        self.helper = FormHelper()
        self.helper.form_tag = False
        self.helper.layout = Layout(
            Field('survey'),
            Div(Div('type', css_class='col-md-10 col-xs-12'), css_class='row'),
            Div(
                Div('question', css_class='col-md-8 col-xs-12'),
                Div('audiofile', css_class='col-md-4 col-xs-12'),
                Div('phonenumber', css_class='col-md-6 col-xs-10'),
                css_class='row'
            ),
            Div(
                Div(HTML(html_code_of_completed_field), css_class='col-md-6 col-xs-10'),
                css_class='row'
            ),
        )
        if self.instance.audiofile:
            self.helper.layout[2][1] = AppendedText('audiofile', append_html_code_to_audio_field)
        if user:
            self.fields['audiofile'].choices = get_audiofile_list(user)
        self.fields['survey'].widget = forms.HiddenInput()
        self.fields['type'].widget.attrs['onchange'] = 'this.form.submit();'
        self.fields['question'].label = _('section title').capitalize()


class SMSSectionForm(ModelForm):
    """SMSSectionForm ModelForm"""

    class Meta:
        model = Section_template
        #fields = ['type', 'survey', 'question', 'retries', 'audiofile', 'completed', 'sms_text']
        widgets = {
            'sms_text': Textarea(attrs={'cols': 23, 'rows': 2}),
        }

    def __init__(self, user, *args, **kwargs):
        super(SMSSectionForm, self).__init__(*args, **kwargs)
        self.helper = FormHelper()
        self.helper.form_tag = False
        self.helper.layout = Layout(
            Field('survey'),
            Div(Div('type', css_class='col-md-10 col-xs-12'), css_class='row'),
            Div(
                Div('question', css_class='col-md-8 col-xs-12'),
                Div('audiofile', css_class='col-md-4 col-xs-12'),
                css_class='row'
            ),
            Div(Div('retries', css_class='col-md-4 col-xs-4'), css_class='row'),
            Div(Div('sms_text', css_class='col-md-10 col-xs-10'), css_class='row'),
            Div(
                Div(HTML(html_code_of_completed_field), css_class='col-md-6 col-xs-10'),
                css_class='row'
            ),
        )
        if self.instance.audiofile:
            self.helper.layout[2][1] = AppendedText('audiofile', append_html_code_to_audio_field)
        self.fields['survey'].widget = forms.HiddenInput()
        self.fields['type'].widget.attrs['onchange'] = 'this.form.submit();'
        self.fields['question'].label = _('section title').capitalize()
        if user:
            self.fields['audiofile'].choices = get_audiofile_list(user)


class ScriptForm(ModelForm):
    """ScriptForm ModelForm"""

    class Meta:
        model = Section_template
        fields = ['script']

    def __init__(self, *args, **kwargs):
        super(ScriptForm, self).__init__(*args, **kwargs)
        self.helper = FormHelper()
        self.helper.form_tag = False
        css_class = 'col-md-12'
        self.helper.layout = Layout(
            Div(
                Div('script', css_class=css_class),
                css_class='row'
            )
        )


class BranchingForm(ModelForm):
    """BranchingForm ModelForm"""

    class Meta:
        model = Branching_template
        #fields = ['keys', 'section', 'goto']

    def __init__(self, survey_id, section_id, *args, **kwargs):
        super(BranchingForm, self).__init__(*args, **kwargs)
        self.helper = FormHelper()
        self.helper.form_tag = False
        css_class = 'col-xs-6'
        self.helper.layout = Layout(
            Field('section'),
        )

        #instance = getattr(self, 'instance', None)
        self.fields['section'].widget = forms.HiddenInput()

        # multiple choice section
        obj_section = Section_template.objects.get(id=section_id)

        if obj_section.type == SECTION_TYPE.MULTI_CHOICE:
            self.fields['keys'] = forms.ChoiceField(
                choices=get_multi_question_choice_list(section_id),
                required=False)

        # rating section
        if obj_section.type == SECTION_TYPE.RATING_SECTION:
            self.fields['keys'] = forms.ChoiceField(
                choices=get_rating_choice_list(section_id),
                required=False)

        if (obj_section.type == SECTION_TYPE.PLAY_MESSAGE
           or obj_section.type == SECTION_TYPE.RECORD_MSG
           or obj_section.type == SECTION_TYPE.CALL_TRANSFER
           or obj_section.type == SECTION_TYPE.CONFERENCE
           or obj_section.type == SECTION_TYPE.SMS):
            self.fields['keys'].initial = 0
            self.fields['keys'].widget = forms.HiddenInput()

            self.helper.layout.append(
                Div(
                    Field('keys'),
                    Div('goto', css_class=css_class),
                    css_class='row'
                )
            )
        else:
            if obj_section.type != SECTION_TYPE.HANGUP_SECTION and obj_section.type != SECTION_TYPE.DNC:
                self.helper.layout.append(
                    Div(
                        Div(HTML(
                            """
                            <div class="btn-group" data-toggle="buttons">
                                <label class="btn btn-default">
                                    <input type="radio" name="keys_button" id="button-anything"> %s
                                </label>
                                <label class="btn btn-default">
                                    <input type="radio" name="keys_button" id="button-invalid"> %s
                                </label>
                            </div>
                            """ % (_('any other key').title(), _('invalid').title())
                            ), css_class=css_class),
                        css_class='row'
                    )
                )
                self.helper.layout.append(
                    Div(
                        Div(Fieldset('', 'keys', 'goto'), css_class=css_class),
                        css_class='row'
                    )
                )
            else:
                self.helper.layout.append(
                    Div(
                        Div(HTML('%s' % _('no branching, this will terminate the call')), css_class=css_class),
                        css_class='row'
                    )
                )

        self.fields['goto'].choices = get_section_question_list(survey_id, section_id)


class SurveyReportForm(forms.Form):
    """Survey Report Form"""
    campaign = forms.ChoiceField(label=_('campaign'), required=False)

    def __init__(self, user, *args, **kwargs):
        super(SurveyReportForm, self).__init__(*args, **kwargs)
        self.fields.keyOrder = ['campaign']
        # To get user's campaign list which are attached with survey
        if user:
            camp_list = []
            camp_list.append((0, _('select campaign').title()))

            if user.is_superuser:
                campaign_list = Campaign.objects.values_list('id', 'name')\
                    .filter(content_type__model='survey', has_been_started=True).order_by('-id')
            else:
                campaign_list = Campaign.objects.values_list('id', 'name')\
                    .filter(user=user, content_type__model='survey', has_been_started=True).order_by('-id')
            for i in campaign_list:
                camp_list.append((i[0], i[1]))

            self.fields['campaign'].choices = camp_list


class SurveyDetailReportForm(SearchForm):
    """Survey Report Form"""
    survey_id = forms.ChoiceField(label=_('survey').capitalize(), required=False)

    def __init__(self, user, *args, **kwargs):
        super(SurveyDetailReportForm, self).__init__(*args, **kwargs)
        self.helper = FormHelper()
        self.helper.form_class = 'well'
        css_class = 'col-md-4'
        self.helper.layout = Layout(
            Div(
                Div('survey_id', css_class=css_class),
                Div('from_date', css_class=css_class),
                Div('to_date', css_class=css_class),
                css_class='row'
            ),
        )
        common_submit_buttons(self.helper.layout, 'search')

        if user:
            survey_list = []
            survey_list.append((0, _('select survey').title()))
            if user.is_superuser:
                survey_objs = Survey.objects.values_list('id', 'name', 'campaign__name').all().order_by('-id')
            else:
                survey_objs = Survey.objects.values_list('id', 'name', 'campaign__name').filter(user=user).order_by('-id')

            for i in survey_objs:
                if i[2]:
                    survey_name = i[1] + " : " + i[2]
                else:
                    survey_name = i[1]
                survey_list.append((i[0], survey_name))
            self.fields['survey_id'].choices = survey_list


class SurveyFileImport(forms.Form):
    """General Form : file upload"""
    name = forms.CharField(label=_('survey name').title(), required=True)
    survey_file = forms.FileField(label=_("upload file").title(), required=True, help_text=_("browse text file"),
                                  error_messages={'required': 'please upload File'})

    def __init__(self, *args, **kwargs):
        super(SurveyFileImport, self).__init__(*args, **kwargs)
        self.helper = FormHelper()
        self.helper.form_tag = False
        css_class = 'col-md-12'
        self.helper.layout = Layout(
            Div(
                Div('name', css_class=css_class),
                Div('survey_file', css_class=css_class),
                css_class='row'
            )
        )

    def clean_csv_file(self):
        """Form Validation :  File extension Check"""
        filename = self.cleaned_data["survey_file"]
        file_exts = ["txt"]
        if str(filename).split(".")[1].lower() in file_exts:
            return filename
        else:
            raise forms.ValidationError(_(u'document types accepted: %s' % ' '.join(file_exts)))


class SealSurveyForm(SurveyFileImport):
    """General Form : SealSurveyForm"""
    def __init__(self, *args, **kwargs):
        super(SealSurveyForm, self).__init__(*args, **kwargs)
        self.fields.keyOrder = ['name']
        self.helper = FormHelper()
        self.helper.form_tag = False
        css_class = 'col-md-12'
        self.helper.layout = Layout(
            Div(
                Div('name', css_class=css_class),
                css_class='row'
            )
        )

########NEW FILE########
__FILENAME__ = function_def
#
# Newfies-Dialer License
# http://www.newfies-dialer.org
#
# This Source Code Form is subject to the terms of the Mozilla Public
# License, v. 2.0. If a copy of the MPL was not distributed with this file,
# You can obtain one at http://mozilla.org/MPL/2.0/.
#
# Copyright (C) 2011-2014 Star2Billing S.L.
#
# The Initial Developer of the Original Code is
# Arezqui Belaid <info@star2billing.com>
#
from django.conf import settings


def getaudio_acapela(text, tts_language='en'):
    """
    Run Acapela Text2Speech and return audio url
    """
    import acapela
    DIRECTORY = settings.MEDIA_ROOT + '/tts/'
    if not tts_language:
        tts_language = 'en'
    tts_acapela = acapela.Acapela(
        settings.ACCOUNT_LOGIN, settings.APPLICATION_LOGIN,
        settings.APPLICATION_PASSWORD, settings.SERVICE_URL,
        settings.QUALITY, DIRECTORY)
    tts_acapela.prepare(
        text, tts_language, settings.ACAPELA_GENDER,
        settings.ACAPELA_INTONATION)
    output_filename = tts_acapela.run()
    audiofile = 'tts/' + output_filename
    return audiofile

########NEW FILE########
__FILENAME__ = 0001_initial_survey
# -*- coding: utf-8 -*-
import datetime
from south.db import db
from south.v2 import SchemaMigration
from django.db import models


class Migration(SchemaMigration):

    def forwards(self, orm):
        # Adding model 'Survey_template'
        db.create_table('survey_survey_template', (
            ('id', self.gf('django.db.models.fields.AutoField')(primary_key=True)),
            ('name', self.gf('django.db.models.fields.CharField')(max_length=90)),
            ('tts_language', self.gf('django_lets_go.language_field.LanguageField')(default='en', max_length=2, null=True, blank=True)),
            ('description', self.gf('django.db.models.fields.TextField')(null=True, blank=True)),
            ('created_date', self.gf('django.db.models.fields.DateTimeField')(auto_now_add=True, blank=True)),
            ('updated_date', self.gf('django.db.models.fields.DateTimeField')(auto_now=True, blank=True)),
            ('user', self.gf('django.db.models.fields.related.ForeignKey')(related_name='survey_template_user', to=orm['auth.User'])),
        ))
        db.send_create_signal('survey', ['Survey_template'])

        # Adding model 'Survey'
        db.create_table('survey_survey', (
            ('id', self.gf('django.db.models.fields.AutoField')(primary_key=True)),
            ('name', self.gf('django.db.models.fields.CharField')(max_length=90)),
            ('tts_language', self.gf('django_lets_go.language_field.LanguageField')(default='en', max_length=2, null=True, blank=True)),
            ('description', self.gf('django.db.models.fields.TextField')(null=True, blank=True)),
            ('created_date', self.gf('django.db.models.fields.DateTimeField')(auto_now_add=True, blank=True)),
            ('updated_date', self.gf('django.db.models.fields.DateTimeField')(auto_now=True, blank=True)),
            ('user', self.gf('django.db.models.fields.related.ForeignKey')(related_name='survey_user', to=orm['auth.User'])),
            ('campaign', self.gf('django.db.models.fields.related.ForeignKey')(to=orm['dialer_campaign.Campaign'], null=True, blank=True)),
        ))
        db.send_create_signal('survey', ['Survey'])

        # Adding model 'Section_template'
        db.create_table('survey_section_template', (
            ('id', self.gf('django.db.models.fields.AutoField')(primary_key=True)),
            ('order', self.gf('django.db.models.fields.PositiveIntegerField')(default=1, db_index=True)),
            ('type', self.gf('django.db.models.fields.IntegerField')(default=1, max_length=20, null=True, blank=True)),
            ('question', self.gf('django.db.models.fields.CharField')(max_length=500)),
            ('script', self.gf('django.db.models.fields.CharField')(max_length=1000, null=True, blank=True)),
            ('audiofile', self.gf('django.db.models.fields.related.ForeignKey')(to=orm['audiofield.AudioFile'], null=True, blank=True)),
            ('retries', self.gf('django.db.models.fields.IntegerField')(default=0, max_length=1, null=True, blank=True)),
            ('timeout', self.gf('django.db.models.fields.IntegerField')(default=5, max_length=2, null=True, blank=True)),
            ('key_0', self.gf('django.db.models.fields.CharField')(max_length=100, null=True, blank=True)),
            ('key_1', self.gf('django.db.models.fields.CharField')(max_length=100, null=True, blank=True)),
            ('key_2', self.gf('django.db.models.fields.CharField')(max_length=100, null=True, blank=True)),
            ('key_3', self.gf('django.db.models.fields.CharField')(max_length=100, null=True, blank=True)),
            ('key_4', self.gf('django.db.models.fields.CharField')(max_length=100, null=True, blank=True)),
            ('key_5', self.gf('django.db.models.fields.CharField')(max_length=100, null=True, blank=True)),
            ('key_6', self.gf('django.db.models.fields.CharField')(max_length=100, null=True, blank=True)),
            ('key_7', self.gf('django.db.models.fields.CharField')(max_length=100, null=True, blank=True)),
            ('key_8', self.gf('django.db.models.fields.CharField')(max_length=100, null=True, blank=True)),
            ('key_9', self.gf('django.db.models.fields.CharField')(max_length=100, null=True, blank=True)),
            ('rating_laps', self.gf('django.db.models.fields.IntegerField')(default=9, max_length=1, null=True, blank=True)),
            ('validate_number', self.gf('django.db.models.fields.BooleanField')(default=True)),
            ('number_digits', self.gf('django.db.models.fields.IntegerField')(default='2', max_length=2, null=True, blank=True)),
            ('min_number', self.gf('django.db.models.fields.BigIntegerField')(default=0, max_length=50, null=True, blank=True)),
            ('max_number', self.gf('django.db.models.fields.BigIntegerField')(default=99, max_length=50, null=True, blank=True)),
            ('phonenumber', self.gf('django.db.models.fields.CharField')(max_length=50, null=True, blank=True)),
            ('completed', self.gf('django.db.models.fields.BooleanField')(default=False)),
            ('created_date', self.gf('django.db.models.fields.DateTimeField')(auto_now_add=True, blank=True)),
            ('updated_date', self.gf('django.db.models.fields.DateTimeField')(auto_now=True, blank=True)),
            ('survey', self.gf('django.db.models.fields.related.ForeignKey')(to=orm['survey.Survey_template'])),
            ('invalid_audiofile', self.gf('django.db.models.fields.related.ForeignKey')(blank=True, related_name='survey_template_invalid_audiofile', null=True, to=orm['audiofield.AudioFile'])),
        ))
        db.send_create_signal('survey', ['Section_template'])

        # Adding model 'Section'
        db.create_table('survey_section', (
            ('id', self.gf('django.db.models.fields.AutoField')(primary_key=True)),
            ('order', self.gf('django.db.models.fields.PositiveIntegerField')(default=1, db_index=True)),
            ('type', self.gf('django.db.models.fields.IntegerField')(default=1, max_length=20, null=True, blank=True)),
            ('question', self.gf('django.db.models.fields.CharField')(max_length=500)),
            ('script', self.gf('django.db.models.fields.CharField')(max_length=1000, null=True, blank=True)),
            ('audiofile', self.gf('django.db.models.fields.related.ForeignKey')(to=orm['audiofield.AudioFile'], null=True, blank=True)),
            ('retries', self.gf('django.db.models.fields.IntegerField')(default=0, max_length=1, null=True, blank=True)),
            ('timeout', self.gf('django.db.models.fields.IntegerField')(default=5, max_length=2, null=True, blank=True)),
            ('key_0', self.gf('django.db.models.fields.CharField')(max_length=100, null=True, blank=True)),
            ('key_1', self.gf('django.db.models.fields.CharField')(max_length=100, null=True, blank=True)),
            ('key_2', self.gf('django.db.models.fields.CharField')(max_length=100, null=True, blank=True)),
            ('key_3', self.gf('django.db.models.fields.CharField')(max_length=100, null=True, blank=True)),
            ('key_4', self.gf('django.db.models.fields.CharField')(max_length=100, null=True, blank=True)),
            ('key_5', self.gf('django.db.models.fields.CharField')(max_length=100, null=True, blank=True)),
            ('key_6', self.gf('django.db.models.fields.CharField')(max_length=100, null=True, blank=True)),
            ('key_7', self.gf('django.db.models.fields.CharField')(max_length=100, null=True, blank=True)),
            ('key_8', self.gf('django.db.models.fields.CharField')(max_length=100, null=True, blank=True)),
            ('key_9', self.gf('django.db.models.fields.CharField')(max_length=100, null=True, blank=True)),
            ('rating_laps', self.gf('django.db.models.fields.IntegerField')(default=9, max_length=1, null=True, blank=True)),
            ('validate_number', self.gf('django.db.models.fields.BooleanField')(default=True)),
            ('number_digits', self.gf('django.db.models.fields.IntegerField')(default='2', max_length=2, null=True, blank=True)),
            ('min_number', self.gf('django.db.models.fields.BigIntegerField')(default=0, max_length=50, null=True, blank=True)),
            ('max_number', self.gf('django.db.models.fields.BigIntegerField')(default=99, max_length=50, null=True, blank=True)),
            ('phonenumber', self.gf('django.db.models.fields.CharField')(max_length=50, null=True, blank=True)),
            ('completed', self.gf('django.db.models.fields.BooleanField')(default=False)),
            ('created_date', self.gf('django.db.models.fields.DateTimeField')(auto_now_add=True, blank=True)),
            ('updated_date', self.gf('django.db.models.fields.DateTimeField')(auto_now=True, blank=True)),
            ('survey', self.gf('django.db.models.fields.related.ForeignKey')(to=orm['survey.Survey'])),
            ('invalid_audiofile', self.gf('django.db.models.fields.related.ForeignKey')(blank=True, related_name='survey_invalid_audiofile', null=True, to=orm['audiofield.AudioFile'])),
            ('section_template', self.gf('django.db.models.fields.IntegerField')(default=0, max_length=10, null=True, blank=True)),
        ))
        db.send_create_signal('survey', ['Section'])

        # Adding model 'Branching_template'
        db.create_table('survey_branching_template', (
            ('id', self.gf('django.db.models.fields.AutoField')(primary_key=True)),
            ('keys', self.gf('django.db.models.fields.CharField')(max_length=150, blank=True)),
            ('created_date', self.gf('django.db.models.fields.DateTimeField')(auto_now_add=True, blank=True)),
            ('updated_date', self.gf('django.db.models.fields.DateTimeField')(auto_now=True, blank=True)),
            ('section', self.gf('django.db.models.fields.related.ForeignKey')(related_name='Branching Template Section', to=orm['survey.Section_template'])),
            ('goto', self.gf('django.db.models.fields.related.ForeignKey')(blank=True, related_name='Goto Template Section', null=True, to=orm['survey.Section_template'])),
        ))
        db.send_create_signal('survey', ['Branching_template'])

        # Adding unique constraint on 'Branching_template', fields ['keys', 'section']
        db.create_unique('survey_branching_template', ['keys', 'section_id'])

        # Adding model 'Branching'
        db.create_table('survey_branching', (
            ('id', self.gf('django.db.models.fields.AutoField')(primary_key=True)),
            ('keys', self.gf('django.db.models.fields.CharField')(max_length=150, blank=True)),
            ('created_date', self.gf('django.db.models.fields.DateTimeField')(auto_now_add=True, blank=True)),
            ('updated_date', self.gf('django.db.models.fields.DateTimeField')(auto_now=True, blank=True)),
            ('section', self.gf('django.db.models.fields.related.ForeignKey')(related_name='Branching Section', to=orm['survey.Section'])),
            ('goto', self.gf('django.db.models.fields.related.ForeignKey')(blank=True, related_name='Goto Section', null=True, to=orm['survey.Section'])),
        ))
        db.send_create_signal('survey', ['Branching'])

        # Adding unique constraint on 'Branching', fields ['keys', 'section']
        db.create_unique('survey_branching', ['keys', 'section_id'])

        # Adding model 'Result'
        db.create_table('survey_result', (
            ('id', self.gf('django.db.models.fields.AutoField')(primary_key=True)),
            ('callrequest', self.gf('django.db.models.fields.related.ForeignKey')(blank=True, related_name='survey_callrequest', null=True, to=orm['dialer_cdr.Callrequest'])),
            ('section', self.gf('django.db.models.fields.related.ForeignKey')(related_name='Result Section', to=orm['survey.Section'])),
            ('response', self.gf('django.db.models.fields.CharField')(max_length=150)),
            ('record_file', self.gf('django.db.models.fields.CharField')(default='', max_length=200, blank=True)),
            ('recording_duration', self.gf('django.db.models.fields.IntegerField')(default=0, max_length=10, null=True, blank=True)),
            ('created_date', self.gf('django.db.models.fields.DateTimeField')(auto_now_add=True, blank=True)),
        ))
        db.send_create_signal('survey', ['Result'])

        # Adding unique constraint on 'Result', fields ['callrequest', 'section']
        db.create_unique('survey_result', ['callrequest_id', 'section_id'])

        # Adding model 'ResultAggregate'
        db.create_table('survey_resultaggregate', (
            ('id', self.gf('django.db.models.fields.AutoField')(primary_key=True)),
            ('campaign', self.gf('django.db.models.fields.related.ForeignKey')(to=orm['dialer_campaign.Campaign'], null=True, blank=True)),
            ('survey', self.gf('django.db.models.fields.related.ForeignKey')(related_name='ResultSum Survey', to=orm['survey.Survey'])),
            ('section', self.gf('django.db.models.fields.related.ForeignKey')(related_name='ResultSum Section', to=orm['survey.Section'])),
            ('response', self.gf('django.db.models.fields.CharField')(max_length=150, db_index=True)),
            ('count', self.gf('django.db.models.fields.IntegerField')(default=0, max_length=20)),
            ('created_date', self.gf('django.db.models.fields.DateTimeField')(auto_now_add=True, blank=True)),
        ))
        db.send_create_signal('survey', ['ResultAggregate'])

        # Adding unique constraint on 'ResultAggregate', fields ['campaign', 'survey', 'section', 'response']
        db.create_unique('survey_resultaggregate', ['campaign_id', 'survey_id', 'section_id', 'response'])


    def backwards(self, orm):
        # Removing unique constraint on 'ResultAggregate', fields ['campaign', 'survey', 'section', 'response']
        db.delete_unique('survey_resultaggregate', ['campaign_id', 'survey_id', 'section_id', 'response'])

        # Removing unique constraint on 'Result', fields ['callrequest', 'section']
        db.delete_unique('survey_result', ['callrequest_id', 'section_id'])

        # Removing unique constraint on 'Branching', fields ['keys', 'section']
        db.delete_unique('survey_branching', ['keys', 'section_id'])

        # Removing unique constraint on 'Branching_template', fields ['keys', 'section']
        db.delete_unique('survey_branching_template', ['keys', 'section_id'])

        # Deleting model 'Survey_template'
        db.delete_table('survey_survey_template')

        # Deleting model 'Survey'
        db.delete_table('survey_survey')

        # Deleting model 'Section_template'
        db.delete_table('survey_section_template')

        # Deleting model 'Section'
        db.delete_table('survey_section')

        # Deleting model 'Branching_template'
        db.delete_table('survey_branching_template')

        # Deleting model 'Branching'
        db.delete_table('survey_branching')

        # Deleting model 'Result'
        db.delete_table('survey_result')

        # Deleting model 'ResultAggregate'
        db.delete_table('survey_resultaggregate')


    models = {
        'audiofield.audiofile': {
            'Meta': {'object_name': 'AudioFile', 'db_table': "u'audio_file'"},
            'audio_file': ('audiofield.fields.AudioField', [], {'ext_whitelist': "['.mp3', '.wav', '.ogg']", 'max_length': '100', 'blank': 'True'}),
            'created_date': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '150'}),
            'updated_date': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'blank': 'True'}),
            'user': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['auth.User']"})
        },
        'auth.group': {
            'Meta': {'object_name': 'Group'},
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '80'}),
            'permissions': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['auth.Permission']", 'symmetrical': 'False', 'blank': 'True'})
        },
        'auth.permission': {
            'Meta': {'ordering': "('content_type__app_label', 'content_type__model', 'codename')", 'unique_together': "(('content_type', 'codename'),)", 'object_name': 'Permission'},
            'codename': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'content_type': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['contenttypes.ContentType']"}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '50'})
        },
        'auth.user': {
            'Meta': {'object_name': 'User'},
            'date_joined': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
            'email': ('django.db.models.fields.EmailField', [], {'max_length': '75', 'blank': 'True'}),
            'first_name': ('django.db.models.fields.CharField', [], {'max_length': '30', 'blank': 'True'}),
            'groups': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['auth.Group']", 'symmetrical': 'False', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'is_active': ('django.db.models.fields.BooleanField', [], {'default': 'True'}),
            'is_staff': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'is_superuser': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'last_login': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
            'last_name': ('django.db.models.fields.CharField', [], {'max_length': '30', 'blank': 'True'}),
            'password': ('django.db.models.fields.CharField', [], {'max_length': '128'}),
            'user_permissions': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['auth.Permission']", 'symmetrical': 'False', 'blank': 'True'}),
            'username': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '30'})
        },
        'contenttypes.contenttype': {
            'Meta': {'ordering': "('name',)", 'unique_together': "(('app_label', 'model'),)", 'object_name': 'ContentType', 'db_table': "'django_content_type'"},
            'app_label': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'model': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '100'})
        },
        'dialer_campaign.campaign': {
            'Meta': {'object_name': 'Campaign', 'db_table': "u'dialer_campaign'"},
            'aleg_gateway': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'A-Leg Gateway'", 'to': "orm['dialer_gateway.Gateway']"}),
            'amd_behavior': ('django.db.models.fields.IntegerField', [], {'default': '1', 'null': 'True', 'blank': 'True'}),
            'caller_name': ('django.db.models.fields.CharField', [], {'max_length': '80', 'blank': 'True'}),
            'callerid': ('django.db.models.fields.CharField', [], {'max_length': '80', 'blank': 'True'}),
            'callmaxduration': ('django.db.models.fields.IntegerField', [], {'default': "'1800'", 'null': 'True', 'blank': 'True'}),
            'calltimeout': ('django.db.models.fields.IntegerField', [], {'default': "'45'", 'null': 'True', 'blank': 'True'}),
            'campaign_code': ('django.db.models.fields.CharField', [], {'default': "'DDXRH'", 'unique': 'True', 'max_length': '20', 'blank': 'True'}),
            'completed': ('django.db.models.fields.IntegerField', [], {'default': '0', 'null': 'True', 'blank': 'True'}),
            'completion_intervalretry': ('django.db.models.fields.IntegerField', [], {'default': "'900'", 'null': 'True', 'blank': 'True'}),
            'completion_maxretry': ('django.db.models.fields.IntegerField', [], {'default': "'0'", 'null': 'True', 'blank': 'True'}),
            'content_type': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['contenttypes.ContentType']"}),
            'created_date': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'daily_start_time': ('django.db.models.fields.TimeField', [], {'default': "'00:00:00'"}),
            'daily_stop_time': ('django.db.models.fields.TimeField', [], {'default': "'23:59:59'"}),
            'description': ('django.db.models.fields.TextField', [], {'null': 'True', 'blank': 'True'}),
            'expirationdate': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime(2013, 3, 12, 0, 0)'}),
            'extra_data': ('django.db.models.fields.CharField', [], {'max_length': '120', 'blank': 'True'}),
            'frequency': ('django.db.models.fields.IntegerField', [], {'default': "'10'", 'null': 'True', 'blank': 'True'}),
            'friday': ('django.db.models.fields.BooleanField', [], {'default': 'True'}),
            'has_been_duplicated': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'has_been_started': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'imported_phonebook': ('django.db.models.fields.CharField', [], {'default': "''", 'max_length': '500', 'blank': 'True'}),
            'intervalretry': ('django.db.models.fields.IntegerField', [], {'default': "'300'", 'null': 'True', 'blank': 'True'}),
            'maxretry': ('django.db.models.fields.IntegerField', [], {'default': "'0'", 'null': 'True', 'blank': 'True'}),
            'monday': ('django.db.models.fields.BooleanField', [], {'default': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'object_id': ('django.db.models.fields.PositiveIntegerField', [], {}),
            'phonebook': ('django.db.models.fields.related.ManyToManyField', [], {'symmetrical': 'False', 'to': "orm['dialer_contact.Phonebook']", 'null': 'True', 'blank': 'True'}),
            'saturday': ('django.db.models.fields.BooleanField', [], {'default': 'True'}),
            'startingdate': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime(2013, 3, 11, 0, 0)'}),
            'status': ('django.db.models.fields.IntegerField', [], {'default': '2', 'null': 'True', 'blank': 'True'}),
            'sunday': ('django.db.models.fields.BooleanField', [], {'default': 'True'}),
            'thursday': ('django.db.models.fields.BooleanField', [], {'default': 'True'}),
            'totalcontact': ('django.db.models.fields.IntegerField', [], {'default': '0', 'null': 'True', 'blank': 'True'}),
            'tuesday': ('django.db.models.fields.BooleanField', [], {'default': 'True'}),
            'updated_date': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'blank': 'True'}),
            'user': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'Campaign owner'", 'to': "orm['auth.User']"}),
            'voicemail': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'voicemail_audiofile': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['audiofield.AudioFile']", 'null': 'True', 'blank': 'True'}),
            'wednesday': ('django.db.models.fields.BooleanField', [], {'default': 'True'})
        },
        'dialer_campaign.subscriber': {
            'Meta': {'unique_together': "(['contact', 'campaign'],)", 'object_name': 'Subscriber', 'db_table': "u'dialer_subscriber'"},
            'campaign': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['dialer_campaign.Campaign']", 'null': 'True', 'blank': 'True'}),
            'completion_count_attempt': ('django.db.models.fields.IntegerField', [], {'default': '0', 'null': 'True', 'blank': 'True'}),
            'contact': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['dialer_contact.Contact']", 'null': 'True', 'blank': 'True'}),
            'count_attempt': ('django.db.models.fields.IntegerField', [], {'default': '0', 'null': 'True', 'blank': 'True'}),
            'created_date': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'duplicate_contact': ('django.db.models.fields.CharField', [], {'max_length': '90'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'last_attempt': ('django.db.models.fields.DateTimeField', [], {'null': 'True', 'blank': 'True'}),
            'status': ('django.db.models.fields.IntegerField', [], {'default': '1', 'null': 'True', 'blank': 'True'}),
            'updated_date': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'db_index': 'True', 'blank': 'True'})
        },
        'dialer_cdr.callrequest': {
            'Meta': {'object_name': 'Callrequest', 'db_table': "u'dialer_callrequest'"},
            'aleg_gateway': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['dialer_gateway.Gateway']", 'null': 'True', 'blank': 'True'}),
            'aleg_uuid': ('django.db.models.fields.CharField', [], {'max_length': '120', 'null': 'True', 'blank': 'True'}),
            'call_time': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime(2013, 3, 11, 0, 0)'}),
            'call_type': ('django.db.models.fields.IntegerField', [], {'default': '1', 'null': 'True', 'blank': 'True'}),
            'callerid': ('django.db.models.fields.CharField', [], {'max_length': '80', 'blank': 'True'}),
            'campaign': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['dialer_campaign.Campaign']", 'null': 'True', 'blank': 'True'}),
            'completed': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'content_type': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['contenttypes.ContentType']"}),
            'created_date': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'extra_data': ('django.db.models.fields.CharField', [], {'max_length': '120', 'blank': 'True'}),
            'extra_dial_string': ('django.db.models.fields.CharField', [], {'max_length': '500', 'blank': 'True'}),
            'hangup_cause': ('django.db.models.fields.CharField', [], {'max_length': '80', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'last_attempt_time': ('django.db.models.fields.DateTimeField', [], {'null': 'True', 'blank': 'True'}),
            'num_attempt': ('django.db.models.fields.IntegerField', [], {'default': '0'}),
            'object_id': ('django.db.models.fields.PositiveIntegerField', [], {}),
            'parent_callrequest': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['dialer_cdr.Callrequest']", 'null': 'True', 'blank': 'True'}),
            'phone_number': ('django.db.models.fields.CharField', [], {'max_length': '80'}),
            'request_uuid': ('django.db.models.fields.CharField', [], {'default': "'07c27666-8a3b-11e2-82d5-00231470a30c'", 'max_length': '120', 'null': 'True', 'db_index': 'True', 'blank': 'True'}),
            'result': ('django.db.models.fields.CharField', [], {'max_length': '180', 'blank': 'True'}),
            'status': ('django.db.models.fields.IntegerField', [], {'default': '1', 'null': 'True', 'db_index': 'True', 'blank': 'True'}),
            'subscriber': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['dialer_campaign.Subscriber']", 'null': 'True', 'blank': 'True'}),
            'timelimit': ('django.db.models.fields.IntegerField', [], {'default': '3600', 'blank': 'True'}),
            'timeout': ('django.db.models.fields.IntegerField', [], {'default': '30', 'blank': 'True'}),
            'updated_date': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'blank': 'True'}),
            'user': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['auth.User']"})
        },
        'dialer_contact.contact': {
            'Meta': {'object_name': 'Contact', 'db_table': "u'dialer_contact'"},
            'additional_vars': ('jsonfield.fields.JSONField', [], {'null': 'True', 'blank': 'True'}),
            'city': ('django.db.models.fields.CharField', [], {'max_length': '120', 'null': 'True', 'blank': 'True'}),
            'contact': ('django.db.models.fields.CharField', [], {'max_length': '90'}),
            'country': ('django_countries.fields.CountryField', [], {'max_length': '2', 'null': 'True', 'blank': 'True'}),
            'created_date': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'description': ('django.db.models.fields.TextField', [], {'null': 'True', 'blank': 'True'}),
            'email': ('django.db.models.fields.EmailField', [], {'max_length': '75', 'null': 'True', 'blank': 'True'}),
            'first_name': ('django.db.models.fields.CharField', [], {'max_length': '120', 'null': 'True', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'last_name': ('django.db.models.fields.CharField', [], {'max_length': '120', 'null': 'True', 'blank': 'True'}),
            'phonebook': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['dialer_contact.Phonebook']"}),
            'status': ('django.db.models.fields.IntegerField', [], {'default': '1', 'null': 'True', 'blank': 'True'}),
            'updated_date': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'blank': 'True'})
        },
        'dialer_contact.phonebook': {
            'Meta': {'object_name': 'Phonebook', 'db_table': "u'dialer_phonebook'"},
            'created_date': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'description': ('django.db.models.fields.TextField', [], {'null': 'True', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '90'}),
            'updated_date': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'blank': 'True'}),
            'user': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'Phonebook owner'", 'to': "orm['auth.User']"})
        },
        'dialer_gateway.gateway': {
            'Meta': {'object_name': 'Gateway', 'db_table': "u'dialer_gateway'"},
            'addparameter': ('django.db.models.fields.CharField', [], {'max_length': '360', 'blank': 'True'}),
            'addprefix': ('django.db.models.fields.CharField', [], {'max_length': '60', 'blank': 'True'}),
            'count_call': ('django.db.models.fields.IntegerField', [], {'null': 'True', 'blank': 'True'}),
            'count_in_use': ('django.db.models.fields.IntegerField', [], {'null': 'True', 'blank': 'True'}),
            'created_date': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'description': ('django.db.models.fields.TextField', [], {'blank': 'True'}),
            'failover': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'Failover Gateway'", 'null': 'True', 'to': "orm['dialer_gateway.Gateway']"}),
            'gateway_codecs': ('django.db.models.fields.CharField', [], {'max_length': '500', 'blank': 'True'}),
            'gateway_retries': ('django.db.models.fields.CharField', [], {'max_length': '500', 'blank': 'True'}),
            'gateway_timeouts': ('django.db.models.fields.CharField', [], {'max_length': '500', 'blank': 'True'}),
            'gateways': ('django.db.models.fields.CharField', [], {'max_length': '500'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'maximum_call': ('django.db.models.fields.IntegerField', [], {'null': 'True', 'blank': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '255'}),
            'originate_dial_string': ('django.db.models.fields.CharField', [], {'max_length': '500', 'blank': 'True'}),
            'removeprefix': ('django.db.models.fields.CharField', [], {'max_length': '60', 'blank': 'True'}),
            'secondused': ('django.db.models.fields.IntegerField', [], {'null': 'True', 'blank': 'True'}),
            'status': ('django.db.models.fields.IntegerField', [], {'default': '1', 'null': 'True', 'blank': 'True'}),
            'updated_date': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'blank': 'True'})
        },
        'survey.branching': {
            'Meta': {'unique_together': "(('keys', 'section'),)", 'object_name': 'Branching'},
            'created_date': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'goto': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'Goto Section'", 'null': 'True', 'to': "orm['survey.Section']"}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'keys': ('django.db.models.fields.CharField', [], {'max_length': '150', 'blank': 'True'}),
            'section': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'Branching Section'", 'to': "orm['survey.Section']"}),
            'updated_date': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'blank': 'True'})
        },
        'survey.branching_template': {
            'Meta': {'unique_together': "(('keys', 'section'),)", 'object_name': 'Branching_template'},
            'created_date': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'goto': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'Goto Template Section'", 'null': 'True', 'to': "orm['survey.Section_template']"}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'keys': ('django.db.models.fields.CharField', [], {'max_length': '150', 'blank': 'True'}),
            'section': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'Branching Template Section'", 'to': "orm['survey.Section_template']"}),
            'updated_date': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'blank': 'True'})
        },
        'survey.result': {
            'Meta': {'unique_together': "(('callrequest', 'section'),)", 'object_name': 'Result'},
            'callrequest': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'survey_callrequest'", 'null': 'True', 'to': "orm['dialer_cdr.Callrequest']"}),
            'created_date': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'record_file': ('django.db.models.fields.CharField', [], {'default': "''", 'max_length': '200', 'blank': 'True'}),
            'recording_duration': ('django.db.models.fields.IntegerField', [], {'default': '0', 'max_length': '10', 'null': 'True', 'blank': 'True'}),
            'response': ('django.db.models.fields.CharField', [], {'max_length': '150'}),
            'section': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'Result Section'", 'to': "orm['survey.Section']"})
        },
        'survey.resultaggregate': {
            'Meta': {'unique_together': "(('campaign', 'survey', 'section', 'response'),)", 'object_name': 'ResultAggregate'},
            'campaign': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['dialer_campaign.Campaign']", 'null': 'True', 'blank': 'True'}),
            'count': ('django.db.models.fields.IntegerField', [], {'default': '0', 'max_length': '20'}),
            'created_date': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'response': ('django.db.models.fields.CharField', [], {'max_length': '150', 'db_index': 'True'}),
            'section': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'ResultSum Section'", 'to': "orm['survey.Section']"}),
            'survey': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'ResultSum Survey'", 'to': "orm['survey.Survey']"})
        },
        'survey.section': {
            'Meta': {'ordering': "['order', 'survey']", 'object_name': 'Section'},
            'audiofile': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['audiofield.AudioFile']", 'null': 'True', 'blank': 'True'}),
            'completed': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'created_date': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'invalid_audiofile': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'survey_invalid_audiofile'", 'null': 'True', 'to': "orm['audiofield.AudioFile']"}),
            'key_0': ('django.db.models.fields.CharField', [], {'max_length': '100', 'null': 'True', 'blank': 'True'}),
            'key_1': ('django.db.models.fields.CharField', [], {'max_length': '100', 'null': 'True', 'blank': 'True'}),
            'key_2': ('django.db.models.fields.CharField', [], {'max_length': '100', 'null': 'True', 'blank': 'True'}),
            'key_3': ('django.db.models.fields.CharField', [], {'max_length': '100', 'null': 'True', 'blank': 'True'}),
            'key_4': ('django.db.models.fields.CharField', [], {'max_length': '100', 'null': 'True', 'blank': 'True'}),
            'key_5': ('django.db.models.fields.CharField', [], {'max_length': '100', 'null': 'True', 'blank': 'True'}),
            'key_6': ('django.db.models.fields.CharField', [], {'max_length': '100', 'null': 'True', 'blank': 'True'}),
            'key_7': ('django.db.models.fields.CharField', [], {'max_length': '100', 'null': 'True', 'blank': 'True'}),
            'key_8': ('django.db.models.fields.CharField', [], {'max_length': '100', 'null': 'True', 'blank': 'True'}),
            'key_9': ('django.db.models.fields.CharField', [], {'max_length': '100', 'null': 'True', 'blank': 'True'}),
            'max_number': ('django.db.models.fields.BigIntegerField', [], {'default': '99', 'max_length': '50', 'null': 'True', 'blank': 'True'}),
            'min_number': ('django.db.models.fields.BigIntegerField', [], {'default': '0', 'max_length': '50', 'null': 'True', 'blank': 'True'}),
            'number_digits': ('django.db.models.fields.IntegerField', [], {'default': "'2'", 'max_length': '2', 'null': 'True', 'blank': 'True'}),
            'order': ('django.db.models.fields.PositiveIntegerField', [], {'default': '1', 'db_index': 'True'}),
            'phonenumber': ('django.db.models.fields.CharField', [], {'max_length': '50', 'null': 'True', 'blank': 'True'}),
            'question': ('django.db.models.fields.CharField', [], {'max_length': '500'}),
            'rating_laps': ('django.db.models.fields.IntegerField', [], {'default': '9', 'max_length': '1', 'null': 'True', 'blank': 'True'}),
            'retries': ('django.db.models.fields.IntegerField', [], {'default': '0', 'max_length': '1', 'null': 'True', 'blank': 'True'}),
            'script': ('django.db.models.fields.CharField', [], {'max_length': '1000', 'null': 'True', 'blank': 'True'}),
            'section_template': ('django.db.models.fields.IntegerField', [], {'default': '0', 'max_length': '10', 'null': 'True', 'blank': 'True'}),
            'survey': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['survey.Survey']"}),
            'timeout': ('django.db.models.fields.IntegerField', [], {'default': '5', 'max_length': '2', 'null': 'True', 'blank': 'True'}),
            'type': ('django.db.models.fields.IntegerField', [], {'default': '1', 'max_length': '20', 'null': 'True', 'blank': 'True'}),
            'updated_date': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'blank': 'True'}),
            'validate_number': ('django.db.models.fields.BooleanField', [], {'default': 'True'})
        },
        'survey.section_template': {
            'Meta': {'ordering': "['order', 'survey']", 'object_name': 'Section_template'},
            'audiofile': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['audiofield.AudioFile']", 'null': 'True', 'blank': 'True'}),
            'completed': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'created_date': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'invalid_audiofile': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'survey_template_invalid_audiofile'", 'null': 'True', 'to': "orm['audiofield.AudioFile']"}),
            'key_0': ('django.db.models.fields.CharField', [], {'max_length': '100', 'null': 'True', 'blank': 'True'}),
            'key_1': ('django.db.models.fields.CharField', [], {'max_length': '100', 'null': 'True', 'blank': 'True'}),
            'key_2': ('django.db.models.fields.CharField', [], {'max_length': '100', 'null': 'True', 'blank': 'True'}),
            'key_3': ('django.db.models.fields.CharField', [], {'max_length': '100', 'null': 'True', 'blank': 'True'}),
            'key_4': ('django.db.models.fields.CharField', [], {'max_length': '100', 'null': 'True', 'blank': 'True'}),
            'key_5': ('django.db.models.fields.CharField', [], {'max_length': '100', 'null': 'True', 'blank': 'True'}),
            'key_6': ('django.db.models.fields.CharField', [], {'max_length': '100', 'null': 'True', 'blank': 'True'}),
            'key_7': ('django.db.models.fields.CharField', [], {'max_length': '100', 'null': 'True', 'blank': 'True'}),
            'key_8': ('django.db.models.fields.CharField', [], {'max_length': '100', 'null': 'True', 'blank': 'True'}),
            'key_9': ('django.db.models.fields.CharField', [], {'max_length': '100', 'null': 'True', 'blank': 'True'}),
            'max_number': ('django.db.models.fields.BigIntegerField', [], {'default': '99', 'max_length': '50', 'null': 'True', 'blank': 'True'}),
            'min_number': ('django.db.models.fields.BigIntegerField', [], {'default': '0', 'max_length': '50', 'null': 'True', 'blank': 'True'}),
            'number_digits': ('django.db.models.fields.IntegerField', [], {'default': "'2'", 'max_length': '2', 'null': 'True', 'blank': 'True'}),
            'order': ('django.db.models.fields.PositiveIntegerField', [], {'default': '1', 'db_index': 'True'}),
            'phonenumber': ('django.db.models.fields.CharField', [], {'max_length': '50', 'null': 'True', 'blank': 'True'}),
            'question': ('django.db.models.fields.CharField', [], {'max_length': '500'}),
            'rating_laps': ('django.db.models.fields.IntegerField', [], {'default': '9', 'max_length': '1', 'null': 'True', 'blank': 'True'}),
            'retries': ('django.db.models.fields.IntegerField', [], {'default': '0', 'max_length': '1', 'null': 'True', 'blank': 'True'}),
            'script': ('django.db.models.fields.CharField', [], {'max_length': '1000', 'null': 'True', 'blank': 'True'}),
            'survey': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['survey.Survey_template']"}),
            'timeout': ('django.db.models.fields.IntegerField', [], {'default': '5', 'max_length': '2', 'null': 'True', 'blank': 'True'}),
            'type': ('django.db.models.fields.IntegerField', [], {'default': '1', 'max_length': '20', 'null': 'True', 'blank': 'True'}),
            'updated_date': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'blank': 'True'}),
            'validate_number': ('django.db.models.fields.BooleanField', [], {'default': 'True'})
        },
        'survey.survey': {
            'Meta': {'object_name': 'Survey'},
            'campaign': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['dialer_campaign.Campaign']", 'null': 'True', 'blank': 'True'}),
            'created_date': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'description': ('django.db.models.fields.TextField', [], {'null': 'True', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '90'}),
            'tts_language': ('django_lets_go.language_field.LanguageField', [], {'default': "'en'", 'max_length': '2', 'null': 'True', 'blank': 'True'}),
            'updated_date': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'blank': 'True'}),
            'user': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'survey_user'", 'to': "orm['auth.User']"})
        },
        'survey.survey_template': {
            'Meta': {'object_name': 'Survey_template'},
            'created_date': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'description': ('django.db.models.fields.TextField', [], {'null': 'True', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '90'}),
            'tts_language': ('django_lets_go.language_field.LanguageField', [], {'default': "'en'", 'max_length': '2', 'null': 'True', 'blank': 'True'}),
            'updated_date': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'blank': 'True'}),
            'user': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'survey_template_user'", 'to': "orm['auth.User']"})
        }
    }

    complete_apps = ['survey']
########NEW FILE########
__FILENAME__ = 0002_add_new_column_conference
# -*- coding: utf-8 -*-
import datetime
from south.db import db
from south.v2 import SchemaMigration
from django.db import models


class Migration(SchemaMigration):

    def forwards(self, orm):
        # Adding field 'Section.conference'
        db.add_column('survey_section', 'conference',
                      self.gf('django.db.models.fields.CharField')(max_length=50, null=True, blank=True),
                      keep_default=False)

        # Adding field 'Section_template.conference'
        db.add_column('survey_section_template', 'conference',
                      self.gf('django.db.models.fields.CharField')(max_length=50, null=True, blank=True),
                      keep_default=False)


    def backwards(self, orm):
        # Deleting field 'Section.conference'
        db.delete_column('survey_section', 'conference')

        # Deleting field 'Section_template.conference'
        db.delete_column('survey_section_template', 'conference')


    models = {
        'audiofield.audiofile': {
            'Meta': {'object_name': 'AudioFile', 'db_table': "u'audio_file'"},
            'audio_file': ('audiofield.fields.AudioField', [], {'ext_whitelist': "['.mp3', '.wav', '.ogg']", 'max_length': '100', 'blank': 'True'}),
            'created_date': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '150'}),
            'updated_date': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'blank': 'True'}),
            'user': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['auth.User']"})
        },
        'auth.group': {
            'Meta': {'object_name': 'Group'},
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '80'}),
            'permissions': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['auth.Permission']", 'symmetrical': 'False', 'blank': 'True'})
        },
        'auth.permission': {
            'Meta': {'ordering': "('content_type__app_label', 'content_type__model', 'codename')", 'unique_together': "(('content_type', 'codename'),)", 'object_name': 'Permission'},
            'codename': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'content_type': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['contenttypes.ContentType']"}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '50'})
        },
        'auth.user': {
            'Meta': {'object_name': 'User'},
            'date_joined': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
            'email': ('django.db.models.fields.EmailField', [], {'max_length': '75', 'blank': 'True'}),
            'first_name': ('django.db.models.fields.CharField', [], {'max_length': '30', 'blank': 'True'}),
            'groups': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['auth.Group']", 'symmetrical': 'False', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'is_active': ('django.db.models.fields.BooleanField', [], {'default': 'True'}),
            'is_staff': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'is_superuser': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'last_login': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
            'last_name': ('django.db.models.fields.CharField', [], {'max_length': '30', 'blank': 'True'}),
            'password': ('django.db.models.fields.CharField', [], {'max_length': '128'}),
            'user_permissions': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['auth.Permission']", 'symmetrical': 'False', 'blank': 'True'}),
            'username': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '30'})
        },
        'contenttypes.contenttype': {
            'Meta': {'ordering': "('name',)", 'unique_together': "(('app_label', 'model'),)", 'object_name': 'ContentType', 'db_table': "'django_content_type'"},
            'app_label': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'model': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '100'})
        },
        'dialer_campaign.campaign': {
            'Meta': {'object_name': 'Campaign', 'db_table': "u'dialer_campaign'"},
            'aleg_gateway': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'A-Leg Gateway'", 'to': "orm['dialer_gateway.Gateway']"}),
            'amd_behavior': ('django.db.models.fields.IntegerField', [], {'default': '1', 'null': 'True', 'blank': 'True'}),
            'caller_name': ('django.db.models.fields.CharField', [], {'max_length': '80', 'blank': 'True'}),
            'callerid': ('django.db.models.fields.CharField', [], {'max_length': '80', 'blank': 'True'}),
            'callmaxduration': ('django.db.models.fields.IntegerField', [], {'default': "'1800'", 'null': 'True', 'blank': 'True'}),
            'calltimeout': ('django.db.models.fields.IntegerField', [], {'default': "'45'", 'null': 'True', 'blank': 'True'}),
            'campaign_code': ('django.db.models.fields.CharField', [], {'default': "'CRJIF'", 'unique': 'True', 'max_length': '20', 'blank': 'True'}),
            'completed': ('django.db.models.fields.IntegerField', [], {'default': '0', 'null': 'True', 'blank': 'True'}),
            'completion_intervalretry': ('django.db.models.fields.IntegerField', [], {'default': "'900'", 'null': 'True', 'blank': 'True'}),
            'completion_maxretry': ('django.db.models.fields.IntegerField', [], {'default': "'0'", 'null': 'True', 'blank': 'True'}),
            'content_type': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['contenttypes.ContentType']"}),
            'created_date': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'daily_start_time': ('django.db.models.fields.TimeField', [], {'default': "'00:00:00'"}),
            'daily_stop_time': ('django.db.models.fields.TimeField', [], {'default': "'23:59:59'"}),
            'description': ('django.db.models.fields.TextField', [], {'null': 'True', 'blank': 'True'}),
            'expirationdate': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime(2013, 3, 12, 0, 0)'}),
            'extra_data': ('django.db.models.fields.CharField', [], {'max_length': '120', 'blank': 'True'}),
            'frequency': ('django.db.models.fields.IntegerField', [], {'default': "'10'", 'null': 'True', 'blank': 'True'}),
            'friday': ('django.db.models.fields.BooleanField', [], {'default': 'True'}),
            'has_been_duplicated': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'has_been_started': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'imported_phonebook': ('django.db.models.fields.CharField', [], {'default': "''", 'max_length': '500', 'blank': 'True'}),
            'intervalretry': ('django.db.models.fields.IntegerField', [], {'default': "'300'", 'null': 'True', 'blank': 'True'}),
            'maxretry': ('django.db.models.fields.IntegerField', [], {'default': "'0'", 'null': 'True', 'blank': 'True'}),
            'monday': ('django.db.models.fields.BooleanField', [], {'default': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'object_id': ('django.db.models.fields.PositiveIntegerField', [], {}),
            'phonebook': ('django.db.models.fields.related.ManyToManyField', [], {'symmetrical': 'False', 'to': "orm['dialer_contact.Phonebook']", 'null': 'True', 'blank': 'True'}),
            'saturday': ('django.db.models.fields.BooleanField', [], {'default': 'True'}),
            'startingdate': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime(2013, 3, 11, 0, 0)'}),
            'status': ('django.db.models.fields.IntegerField', [], {'default': '2', 'null': 'True', 'blank': 'True'}),
            'sunday': ('django.db.models.fields.BooleanField', [], {'default': 'True'}),
            'thursday': ('django.db.models.fields.BooleanField', [], {'default': 'True'}),
            'totalcontact': ('django.db.models.fields.IntegerField', [], {'default': '0', 'null': 'True', 'blank': 'True'}),
            'tuesday': ('django.db.models.fields.BooleanField', [], {'default': 'True'}),
            'updated_date': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'blank': 'True'}),
            'user': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'Campaign owner'", 'to': "orm['auth.User']"}),
            'voicemail': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'voicemail_audiofile': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['audiofield.AudioFile']", 'null': 'True', 'blank': 'True'}),
            'wednesday': ('django.db.models.fields.BooleanField', [], {'default': 'True'})
        },
        'dialer_campaign.subscriber': {
            'Meta': {'unique_together': "(['contact', 'campaign'],)", 'object_name': 'Subscriber', 'db_table': "u'dialer_subscriber'"},
            'campaign': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['dialer_campaign.Campaign']", 'null': 'True', 'blank': 'True'}),
            'completion_count_attempt': ('django.db.models.fields.IntegerField', [], {'default': '0', 'null': 'True', 'blank': 'True'}),
            'contact': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['dialer_contact.Contact']", 'null': 'True', 'blank': 'True'}),
            'count_attempt': ('django.db.models.fields.IntegerField', [], {'default': '0', 'null': 'True', 'blank': 'True'}),
            'created_date': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'duplicate_contact': ('django.db.models.fields.CharField', [], {'max_length': '90'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'last_attempt': ('django.db.models.fields.DateTimeField', [], {'null': 'True', 'blank': 'True'}),
            'status': ('django.db.models.fields.IntegerField', [], {'default': '1', 'null': 'True', 'blank': 'True'}),
            'updated_date': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'db_index': 'True', 'blank': 'True'})
        },
        'dialer_cdr.callrequest': {
            'Meta': {'object_name': 'Callrequest', 'db_table': "u'dialer_callrequest'"},
            'aleg_gateway': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['dialer_gateway.Gateway']", 'null': 'True', 'blank': 'True'}),
            'aleg_uuid': ('django.db.models.fields.CharField', [], {'max_length': '120', 'null': 'True', 'blank': 'True'}),
            'call_time': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime(2013, 3, 11, 0, 0)'}),
            'call_type': ('django.db.models.fields.IntegerField', [], {'default': '1', 'null': 'True', 'blank': 'True'}),
            'callerid': ('django.db.models.fields.CharField', [], {'max_length': '80', 'blank': 'True'}),
            'campaign': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['dialer_campaign.Campaign']", 'null': 'True', 'blank': 'True'}),
            'completed': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'content_type': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['contenttypes.ContentType']"}),
            'created_date': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'extra_data': ('django.db.models.fields.CharField', [], {'max_length': '120', 'blank': 'True'}),
            'extra_dial_string': ('django.db.models.fields.CharField', [], {'max_length': '500', 'blank': 'True'}),
            'hangup_cause': ('django.db.models.fields.CharField', [], {'max_length': '80', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'last_attempt_time': ('django.db.models.fields.DateTimeField', [], {'null': 'True', 'blank': 'True'}),
            'num_attempt': ('django.db.models.fields.IntegerField', [], {'default': '0'}),
            'object_id': ('django.db.models.fields.PositiveIntegerField', [], {}),
            'parent_callrequest': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['dialer_cdr.Callrequest']", 'null': 'True', 'blank': 'True'}),
            'phone_number': ('django.db.models.fields.CharField', [], {'max_length': '80'}),
            'request_uuid': ('django.db.models.fields.CharField', [], {'default': "'58f52fc4-8a3b-11e2-88b4-00231470a30c'", 'max_length': '120', 'null': 'True', 'db_index': 'True', 'blank': 'True'}),
            'result': ('django.db.models.fields.CharField', [], {'max_length': '180', 'blank': 'True'}),
            'status': ('django.db.models.fields.IntegerField', [], {'default': '1', 'null': 'True', 'db_index': 'True', 'blank': 'True'}),
            'subscriber': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['dialer_campaign.Subscriber']", 'null': 'True', 'blank': 'True'}),
            'timelimit': ('django.db.models.fields.IntegerField', [], {'default': '3600', 'blank': 'True'}),
            'timeout': ('django.db.models.fields.IntegerField', [], {'default': '30', 'blank': 'True'}),
            'updated_date': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'blank': 'True'}),
            'user': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['auth.User']"})
        },
        'dialer_contact.contact': {
            'Meta': {'object_name': 'Contact', 'db_table': "u'dialer_contact'"},
            'additional_vars': ('jsonfield.fields.JSONField', [], {'null': 'True', 'blank': 'True'}),
            'city': ('django.db.models.fields.CharField', [], {'max_length': '120', 'null': 'True', 'blank': 'True'}),
            'contact': ('django.db.models.fields.CharField', [], {'max_length': '90'}),
            'country': ('django_countries.fields.CountryField', [], {'max_length': '2', 'null': 'True', 'blank': 'True'}),
            'created_date': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'description': ('django.db.models.fields.TextField', [], {'null': 'True', 'blank': 'True'}),
            'email': ('django.db.models.fields.EmailField', [], {'max_length': '75', 'null': 'True', 'blank': 'True'}),
            'first_name': ('django.db.models.fields.CharField', [], {'max_length': '120', 'null': 'True', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'last_name': ('django.db.models.fields.CharField', [], {'max_length': '120', 'null': 'True', 'blank': 'True'}),
            'phonebook': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['dialer_contact.Phonebook']"}),
            'status': ('django.db.models.fields.IntegerField', [], {'default': '1', 'null': 'True', 'blank': 'True'}),
            'updated_date': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'blank': 'True'})
        },
        'dialer_contact.phonebook': {
            'Meta': {'object_name': 'Phonebook', 'db_table': "u'dialer_phonebook'"},
            'created_date': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'description': ('django.db.models.fields.TextField', [], {'null': 'True', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '90'}),
            'updated_date': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'blank': 'True'}),
            'user': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'Phonebook owner'", 'to': "orm['auth.User']"})
        },
        'dialer_gateway.gateway': {
            'Meta': {'object_name': 'Gateway', 'db_table': "u'dialer_gateway'"},
            'addparameter': ('django.db.models.fields.CharField', [], {'max_length': '360', 'blank': 'True'}),
            'addprefix': ('django.db.models.fields.CharField', [], {'max_length': '60', 'blank': 'True'}),
            'count_call': ('django.db.models.fields.IntegerField', [], {'null': 'True', 'blank': 'True'}),
            'count_in_use': ('django.db.models.fields.IntegerField', [], {'null': 'True', 'blank': 'True'}),
            'created_date': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'description': ('django.db.models.fields.TextField', [], {'blank': 'True'}),
            'failover': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'Failover Gateway'", 'null': 'True', 'to': "orm['dialer_gateway.Gateway']"}),
            'gateway_codecs': ('django.db.models.fields.CharField', [], {'max_length': '500', 'blank': 'True'}),
            'gateway_retries': ('django.db.models.fields.CharField', [], {'max_length': '500', 'blank': 'True'}),
            'gateway_timeouts': ('django.db.models.fields.CharField', [], {'max_length': '500', 'blank': 'True'}),
            'gateways': ('django.db.models.fields.CharField', [], {'max_length': '500'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'maximum_call': ('django.db.models.fields.IntegerField', [], {'null': 'True', 'blank': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '255'}),
            'originate_dial_string': ('django.db.models.fields.CharField', [], {'max_length': '500', 'blank': 'True'}),
            'removeprefix': ('django.db.models.fields.CharField', [], {'max_length': '60', 'blank': 'True'}),
            'secondused': ('django.db.models.fields.IntegerField', [], {'null': 'True', 'blank': 'True'}),
            'status': ('django.db.models.fields.IntegerField', [], {'default': '1', 'null': 'True', 'blank': 'True'}),
            'updated_date': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'blank': 'True'})
        },
        'survey.branching': {
            'Meta': {'unique_together': "(('keys', 'section'),)", 'object_name': 'Branching'},
            'created_date': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'goto': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'Goto Section'", 'null': 'True', 'to': "orm['survey.Section']"}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'keys': ('django.db.models.fields.CharField', [], {'max_length': '150', 'blank': 'True'}),
            'section': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'Branching Section'", 'to': "orm['survey.Section']"}),
            'updated_date': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'blank': 'True'})
        },
        'survey.branching_template': {
            'Meta': {'unique_together': "(('keys', 'section'),)", 'object_name': 'Branching_template'},
            'created_date': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'goto': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'Goto Template Section'", 'null': 'True', 'to': "orm['survey.Section_template']"}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'keys': ('django.db.models.fields.CharField', [], {'max_length': '150', 'blank': 'True'}),
            'section': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'Branching Template Section'", 'to': "orm['survey.Section_template']"}),
            'updated_date': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'blank': 'True'})
        },
        'survey.result': {
            'Meta': {'unique_together': "(('callrequest', 'section'),)", 'object_name': 'Result'},
            'callrequest': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'survey_callrequest'", 'null': 'True', 'to': "orm['dialer_cdr.Callrequest']"}),
            'created_date': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'record_file': ('django.db.models.fields.CharField', [], {'default': "''", 'max_length': '200', 'blank': 'True'}),
            'recording_duration': ('django.db.models.fields.IntegerField', [], {'default': '0', 'max_length': '10', 'null': 'True', 'blank': 'True'}),
            'response': ('django.db.models.fields.CharField', [], {'max_length': '150'}),
            'section': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'Result Section'", 'to': "orm['survey.Section']"})
        },
        'survey.resultaggregate': {
            'Meta': {'unique_together': "(('campaign', 'survey', 'section', 'response'),)", 'object_name': 'ResultAggregate'},
            'campaign': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['dialer_campaign.Campaign']", 'null': 'True', 'blank': 'True'}),
            'count': ('django.db.models.fields.IntegerField', [], {'default': '0', 'max_length': '20'}),
            'created_date': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'response': ('django.db.models.fields.CharField', [], {'max_length': '150', 'db_index': 'True'}),
            'section': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'ResultSum Section'", 'to': "orm['survey.Section']"}),
            'survey': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'ResultSum Survey'", 'to': "orm['survey.Survey']"})
        },
        'survey.section': {
            'Meta': {'ordering': "['order', 'survey']", 'object_name': 'Section'},
            'audiofile': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['audiofield.AudioFile']", 'null': 'True', 'blank': 'True'}),
            'completed': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'conference': ('django.db.models.fields.CharField', [], {'max_length': '50', 'null': 'True', 'blank': 'True'}),
            'created_date': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'invalid_audiofile': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'survey_invalid_audiofile'", 'null': 'True', 'to': "orm['audiofield.AudioFile']"}),
            'key_0': ('django.db.models.fields.CharField', [], {'max_length': '100', 'null': 'True', 'blank': 'True'}),
            'key_1': ('django.db.models.fields.CharField', [], {'max_length': '100', 'null': 'True', 'blank': 'True'}),
            'key_2': ('django.db.models.fields.CharField', [], {'max_length': '100', 'null': 'True', 'blank': 'True'}),
            'key_3': ('django.db.models.fields.CharField', [], {'max_length': '100', 'null': 'True', 'blank': 'True'}),
            'key_4': ('django.db.models.fields.CharField', [], {'max_length': '100', 'null': 'True', 'blank': 'True'}),
            'key_5': ('django.db.models.fields.CharField', [], {'max_length': '100', 'null': 'True', 'blank': 'True'}),
            'key_6': ('django.db.models.fields.CharField', [], {'max_length': '100', 'null': 'True', 'blank': 'True'}),
            'key_7': ('django.db.models.fields.CharField', [], {'max_length': '100', 'null': 'True', 'blank': 'True'}),
            'key_8': ('django.db.models.fields.CharField', [], {'max_length': '100', 'null': 'True', 'blank': 'True'}),
            'key_9': ('django.db.models.fields.CharField', [], {'max_length': '100', 'null': 'True', 'blank': 'True'}),
            'max_number': ('django.db.models.fields.BigIntegerField', [], {'default': '99', 'max_length': '50', 'null': 'True', 'blank': 'True'}),
            'min_number': ('django.db.models.fields.BigIntegerField', [], {'default': '0', 'max_length': '50', 'null': 'True', 'blank': 'True'}),
            'number_digits': ('django.db.models.fields.IntegerField', [], {'default': "'2'", 'max_length': '2', 'null': 'True', 'blank': 'True'}),
            'order': ('django.db.models.fields.PositiveIntegerField', [], {'default': '1', 'db_index': 'True'}),
            'phonenumber': ('django.db.models.fields.CharField', [], {'max_length': '50', 'null': 'True', 'blank': 'True'}),
            'question': ('django.db.models.fields.CharField', [], {'max_length': '500'}),
            'rating_laps': ('django.db.models.fields.IntegerField', [], {'default': '9', 'max_length': '1', 'null': 'True', 'blank': 'True'}),
            'retries': ('django.db.models.fields.IntegerField', [], {'default': '0', 'max_length': '1', 'null': 'True', 'blank': 'True'}),
            'script': ('django.db.models.fields.CharField', [], {'max_length': '1000', 'null': 'True', 'blank': 'True'}),
            'section_template': ('django.db.models.fields.IntegerField', [], {'default': '0', 'max_length': '10', 'null': 'True', 'blank': 'True'}),
            'survey': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['survey.Survey']"}),
            'timeout': ('django.db.models.fields.IntegerField', [], {'default': '5', 'max_length': '2', 'null': 'True', 'blank': 'True'}),
            'type': ('django.db.models.fields.IntegerField', [], {'default': '1', 'max_length': '20', 'null': 'True', 'blank': 'True'}),
            'updated_date': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'blank': 'True'}),
            'validate_number': ('django.db.models.fields.BooleanField', [], {'default': 'True'})
        },
        'survey.section_template': {
            'Meta': {'ordering': "['order', 'survey']", 'object_name': 'Section_template'},
            'audiofile': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['audiofield.AudioFile']", 'null': 'True', 'blank': 'True'}),
            'completed': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'conference': ('django.db.models.fields.CharField', [], {'max_length': '50', 'null': 'True', 'blank': 'True'}),
            'created_date': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'invalid_audiofile': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'survey_template_invalid_audiofile'", 'null': 'True', 'to': "orm['audiofield.AudioFile']"}),
            'key_0': ('django.db.models.fields.CharField', [], {'max_length': '100', 'null': 'True', 'blank': 'True'}),
            'key_1': ('django.db.models.fields.CharField', [], {'max_length': '100', 'null': 'True', 'blank': 'True'}),
            'key_2': ('django.db.models.fields.CharField', [], {'max_length': '100', 'null': 'True', 'blank': 'True'}),
            'key_3': ('django.db.models.fields.CharField', [], {'max_length': '100', 'null': 'True', 'blank': 'True'}),
            'key_4': ('django.db.models.fields.CharField', [], {'max_length': '100', 'null': 'True', 'blank': 'True'}),
            'key_5': ('django.db.models.fields.CharField', [], {'max_length': '100', 'null': 'True', 'blank': 'True'}),
            'key_6': ('django.db.models.fields.CharField', [], {'max_length': '100', 'null': 'True', 'blank': 'True'}),
            'key_7': ('django.db.models.fields.CharField', [], {'max_length': '100', 'null': 'True', 'blank': 'True'}),
            'key_8': ('django.db.models.fields.CharField', [], {'max_length': '100', 'null': 'True', 'blank': 'True'}),
            'key_9': ('django.db.models.fields.CharField', [], {'max_length': '100', 'null': 'True', 'blank': 'True'}),
            'max_number': ('django.db.models.fields.BigIntegerField', [], {'default': '99', 'max_length': '50', 'null': 'True', 'blank': 'True'}),
            'min_number': ('django.db.models.fields.BigIntegerField', [], {'default': '0', 'max_length': '50', 'null': 'True', 'blank': 'True'}),
            'number_digits': ('django.db.models.fields.IntegerField', [], {'default': "'2'", 'max_length': '2', 'null': 'True', 'blank': 'True'}),
            'order': ('django.db.models.fields.PositiveIntegerField', [], {'default': '1', 'db_index': 'True'}),
            'phonenumber': ('django.db.models.fields.CharField', [], {'max_length': '50', 'null': 'True', 'blank': 'True'}),
            'question': ('django.db.models.fields.CharField', [], {'max_length': '500'}),
            'rating_laps': ('django.db.models.fields.IntegerField', [], {'default': '9', 'max_length': '1', 'null': 'True', 'blank': 'True'}),
            'retries': ('django.db.models.fields.IntegerField', [], {'default': '0', 'max_length': '1', 'null': 'True', 'blank': 'True'}),
            'script': ('django.db.models.fields.CharField', [], {'max_length': '1000', 'null': 'True', 'blank': 'True'}),
            'survey': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['survey.Survey_template']"}),
            'timeout': ('django.db.models.fields.IntegerField', [], {'default': '5', 'max_length': '2', 'null': 'True', 'blank': 'True'}),
            'type': ('django.db.models.fields.IntegerField', [], {'default': '1', 'max_length': '20', 'null': 'True', 'blank': 'True'}),
            'updated_date': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'blank': 'True'}),
            'validate_number': ('django.db.models.fields.BooleanField', [], {'default': 'True'})
        },
        'survey.survey': {
            'Meta': {'object_name': 'Survey'},
            'campaign': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['dialer_campaign.Campaign']", 'null': 'True', 'blank': 'True'}),
            'created_date': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'description': ('django.db.models.fields.TextField', [], {'null': 'True', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '90'}),
            'tts_language': ('django_lets_go.language_field.LanguageField', [], {'default': "'en'", 'max_length': '2', 'null': 'True', 'blank': 'True'}),
            'updated_date': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'blank': 'True'}),
            'user': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'survey_user'", 'to': "orm['auth.User']"})
        },
        'survey.survey_template': {
            'Meta': {'object_name': 'Survey_template'},
            'created_date': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'description': ('django.db.models.fields.TextField', [], {'null': 'True', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '90'}),
            'tts_language': ('django_lets_go.language_field.LanguageField', [], {'default': "'en'", 'max_length': '2', 'null': 'True', 'blank': 'True'}),
            'updated_date': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'blank': 'True'}),
            'user': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'survey_template_user'", 'to': "orm['auth.User']"})
        }
    }

    complete_apps = ['survey']
########NEW FILE########
__FILENAME__ = 0003_remove_campaign_resultaggregate
# -*- coding: utf-8 -*-
import datetime
from south.db import db
from south.v2 import SchemaMigration
from django.db import models


class Migration(SchemaMigration):

    def forwards(self, orm):
        # Removing unique constraint on 'ResultAggregate', fields ['section', 'survey', 'response', 'campaign']
        db.delete_unique(u'survey_resultaggregate', ['section_id', 'survey_id', 'response', 'campaign_id'])

        # Deleting field 'ResultAggregate.campaign'
        db.delete_column(u'survey_resultaggregate', 'campaign_id')

        # Adding unique constraint on 'ResultAggregate', fields ['section', 'survey', 'response']
        db.create_unique(u'survey_resultaggregate', ['section_id', 'survey_id', 'response'])


    def backwards(self, orm):
        # Removing unique constraint on 'ResultAggregate', fields ['section', 'survey', 'response']
        db.delete_unique(u'survey_resultaggregate', ['section_id', 'survey_id', 'response'])

        # Adding field 'ResultAggregate.campaign'
        db.add_column(u'survey_resultaggregate', 'campaign',
                      self.gf('django.db.models.fields.related.ForeignKey')(to=orm['dialer_campaign.Campaign'], null=True, blank=True),
                      keep_default=False)

        # Adding unique constraint on 'ResultAggregate', fields ['section', 'survey', 'response', 'campaign']
        db.create_unique(u'survey_resultaggregate', ['section_id', 'survey_id', 'response', 'campaign_id'])


    models = {
        u'audiofield.audiofile': {
            'Meta': {'object_name': 'AudioFile', 'db_table': "u'audio_file'"},
            'audio_file': ('audiofield.fields.AudioField', [], {'ext_whitelist': "['.mp3', '.wav', '.ogg']", 'max_length': '100', 'blank': 'True'}),
            'created_date': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            u'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '150'}),
            'updated_date': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'blank': 'True'}),
            'user': ('django.db.models.fields.related.ForeignKey', [], {'to': u"orm['auth.User']"})
        },
        u'auth.group': {
            'Meta': {'object_name': 'Group'},
            u'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '80'}),
            'permissions': ('django.db.models.fields.related.ManyToManyField', [], {'to': u"orm['auth.Permission']", 'symmetrical': 'False', 'blank': 'True'})
        },
        u'auth.permission': {
            'Meta': {'ordering': "(u'content_type__app_label', u'content_type__model', u'codename')", 'unique_together': "((u'content_type', u'codename'),)", 'object_name': 'Permission'},
            'codename': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'content_type': ('django.db.models.fields.related.ForeignKey', [], {'to': u"orm['contenttypes.ContentType']"}),
            u'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '50'})
        },
        u'auth.user': {
            'Meta': {'object_name': 'User'},
            'date_joined': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
            'email': ('django.db.models.fields.EmailField', [], {'max_length': '75', 'blank': 'True'}),
            'first_name': ('django.db.models.fields.CharField', [], {'max_length': '30', 'blank': 'True'}),
            'groups': ('django.db.models.fields.related.ManyToManyField', [], {'to': u"orm['auth.Group']", 'symmetrical': 'False', 'blank': 'True'}),
            u'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'is_active': ('django.db.models.fields.BooleanField', [], {'default': 'True'}),
            'is_staff': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'is_superuser': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'last_login': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
            'last_name': ('django.db.models.fields.CharField', [], {'max_length': '30', 'blank': 'True'}),
            'password': ('django.db.models.fields.CharField', [], {'max_length': '128'}),
            'user_permissions': ('django.db.models.fields.related.ManyToManyField', [], {'to': u"orm['auth.Permission']", 'symmetrical': 'False', 'blank': 'True'}),
            'username': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '30'})
        },
        u'contenttypes.contenttype': {
            'Meta': {'ordering': "('name',)", 'unique_together': "(('app_label', 'model'),)", 'object_name': 'ContentType', 'db_table': "'django_content_type'"},
            'app_label': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            u'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'model': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '100'})
        },
        u'dialer_campaign.campaign': {
            'Meta': {'object_name': 'Campaign', 'db_table': "u'dialer_campaign'"},
            'agent_script': ('django.db.models.fields.TextField', [], {'null': 'True', 'blank': 'True'}),
            'aleg_gateway': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'A-Leg Gateway'", 'to': u"orm['dialer_gateway.Gateway']"}),
            'amd_behavior': ('django.db.models.fields.IntegerField', [], {'default': '1', 'null': 'True', 'blank': 'True'}),
            'caller_name': ('django.db.models.fields.CharField', [], {'max_length': '80', 'blank': 'True'}),
            'callerid': ('django.db.models.fields.CharField', [], {'max_length': '80', 'blank': 'True'}),
            'callmaxduration': ('django.db.models.fields.IntegerField', [], {'default': "'1800'", 'null': 'True', 'blank': 'True'}),
            'calltimeout': ('django.db.models.fields.IntegerField', [], {'default': "'45'", 'null': 'True', 'blank': 'True'}),
            'campaign_code': ('django.db.models.fields.CharField', [], {'default': "'QGNZR'", 'unique': 'True', 'max_length': '20', 'blank': 'True'}),
            'completed': ('django.db.models.fields.IntegerField', [], {'default': '0', 'null': 'True', 'blank': 'True'}),
            'completion_intervalretry': ('django.db.models.fields.IntegerField', [], {'default': "'900'", 'null': 'True', 'blank': 'True'}),
            'completion_maxretry': ('django.db.models.fields.IntegerField', [], {'default': "'0'", 'null': 'True', 'blank': 'True'}),
            'content_type': ('django.db.models.fields.related.ForeignKey', [], {'to': u"orm['contenttypes.ContentType']"}),
            'created_date': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'daily_start_time': ('django.db.models.fields.TimeField', [], {'default': "'00:00:00'"}),
            'daily_stop_time': ('django.db.models.fields.TimeField', [], {'default': "'23:59:59'"}),
            'description': ('django.db.models.fields.TextField', [], {'null': 'True', 'blank': 'True'}),
            'dnc': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'DNC'", 'null': 'True', 'to': u"orm['dnc.DNC']"}),
            'expirationdate': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime(2013, 11, 21, 0, 0)'}),
            'external_link': ('jsonfield.fields.JSONField', [], {'null': 'True', 'blank': 'True'}),
            'extra_data': ('django.db.models.fields.CharField', [], {'max_length': '120', 'blank': 'True'}),
            'frequency': ('django.db.models.fields.IntegerField', [], {'default': "'10'", 'null': 'True', 'blank': 'True'}),
            'friday': ('django.db.models.fields.BooleanField', [], {'default': 'True'}),
            'has_been_duplicated': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'has_been_started': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            u'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'imported_phonebook': ('django.db.models.fields.CharField', [], {'default': "''", 'max_length': '500', 'blank': 'True'}),
            'intervalretry': ('django.db.models.fields.IntegerField', [], {'default': "'300'", 'null': 'True', 'blank': 'True'}),
            'lead_disposition': ('django.db.models.fields.TextField', [], {'null': 'True', 'blank': 'True'}),
            'maxretry': ('django.db.models.fields.IntegerField', [], {'default': "'0'", 'null': 'True', 'blank': 'True'}),
            'monday': ('django.db.models.fields.BooleanField', [], {'default': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'object_id': ('django.db.models.fields.PositiveIntegerField', [], {}),
            'phonebook': ('django.db.models.fields.related.ManyToManyField', [], {'symmetrical': 'False', 'to': u"orm['dialer_contact.Phonebook']", 'null': 'True', 'blank': 'True'}),
            'saturday': ('django.db.models.fields.BooleanField', [], {'default': 'True'}),
            'startingdate': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime(2013, 11, 20, 0, 0)'}),
            'status': ('django.db.models.fields.IntegerField', [], {'default': '2', 'null': 'True', 'blank': 'True'}),
            'sunday': ('django.db.models.fields.BooleanField', [], {'default': 'True'}),
            'thursday': ('django.db.models.fields.BooleanField', [], {'default': 'True'}),
            'totalcontact': ('django.db.models.fields.IntegerField', [], {'default': '0', 'null': 'True', 'blank': 'True'}),
            'tuesday': ('django.db.models.fields.BooleanField', [], {'default': 'True'}),
            'updated_date': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'blank': 'True'}),
            'user': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'Campaign owner'", 'to': u"orm['auth.User']"}),
            'voicemail': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'voicemail_audiofile': ('django.db.models.fields.related.ForeignKey', [], {'to': u"orm['audiofield.AudioFile']", 'null': 'True', 'blank': 'True'}),
            'wednesday': ('django.db.models.fields.BooleanField', [], {'default': 'True'})
        },
        u'dialer_campaign.subscriber': {
            'Meta': {'unique_together': "(['contact', 'campaign'],)", 'object_name': 'Subscriber', 'db_table': "u'dialer_subscriber'"},
            'agent': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'agent'", 'null': 'True', 'to': u"orm['auth.User']"}),
            'campaign': ('django.db.models.fields.related.ForeignKey', [], {'to': u"orm['dialer_campaign.Campaign']", 'null': 'True', 'blank': 'True'}),
            'collected_data': ('django.db.models.fields.TextField', [], {'null': 'True', 'blank': 'True'}),
            'completion_count_attempt': ('django.db.models.fields.IntegerField', [], {'default': '0', 'null': 'True', 'blank': 'True'}),
            'contact': ('django.db.models.fields.related.ForeignKey', [], {'to': u"orm['dialer_contact.Contact']", 'null': 'True', 'blank': 'True'}),
            'count_attempt': ('django.db.models.fields.IntegerField', [], {'default': '0', 'null': 'True', 'blank': 'True'}),
            'created_date': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'disposition': ('django.db.models.fields.IntegerField', [], {'null': 'True', 'blank': 'True'}),
            'duplicate_contact': ('django.db.models.fields.CharField', [], {'max_length': '90'}),
            u'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'last_attempt': ('django.db.models.fields.DateTimeField', [], {'null': 'True', 'blank': 'True'}),
            'status': ('django.db.models.fields.IntegerField', [], {'default': '1', 'null': 'True', 'blank': 'True'}),
            'updated_date': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'db_index': 'True', 'blank': 'True'})
        },
        u'dialer_cdr.callrequest': {
            'Meta': {'object_name': 'Callrequest', 'db_table': "u'dialer_callrequest'"},
            'alarm_request_id': ('django.db.models.fields.IntegerField', [], {'default': '0', 'null': 'True', 'blank': 'True'}),
            'aleg_gateway': ('django.db.models.fields.related.ForeignKey', [], {'to': u"orm['dialer_gateway.Gateway']", 'null': 'True', 'blank': 'True'}),
            'aleg_uuid': ('django.db.models.fields.CharField', [], {'max_length': '120', 'null': 'True', 'blank': 'True'}),
            'call_time': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime(2013, 11, 20, 0, 0)'}),
            'call_type': ('django.db.models.fields.IntegerField', [], {'default': '1', 'null': 'True', 'blank': 'True'}),
            'caller_name': ('django.db.models.fields.CharField', [], {'max_length': '80', 'blank': 'True'}),
            'callerid': ('django.db.models.fields.CharField', [], {'max_length': '80', 'blank': 'True'}),
            'campaign': ('django.db.models.fields.related.ForeignKey', [], {'to': u"orm['dialer_campaign.Campaign']", 'null': 'True', 'blank': 'True'}),
            'completed': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'content_type': ('django.db.models.fields.related.ForeignKey', [], {'to': u"orm['contenttypes.ContentType']"}),
            'created_date': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'extra_data': ('django.db.models.fields.CharField', [], {'max_length': '120', 'blank': 'True'}),
            'extra_dial_string': ('django.db.models.fields.CharField', [], {'max_length': '500', 'blank': 'True'}),
            'hangup_cause': ('django.db.models.fields.CharField', [], {'max_length': '80', 'blank': 'True'}),
            u'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'last_attempt_time': ('django.db.models.fields.DateTimeField', [], {'null': 'True', 'blank': 'True'}),
            'num_attempt': ('django.db.models.fields.IntegerField', [], {'default': '0'}),
            'object_id': ('django.db.models.fields.PositiveIntegerField', [], {}),
            'parent_callrequest': ('django.db.models.fields.related.ForeignKey', [], {'to': u"orm['dialer_cdr.Callrequest']", 'null': 'True', 'blank': 'True'}),
            'phone_number': ('django.db.models.fields.CharField', [], {'max_length': '80'}),
            'request_uuid': ('django.db.models.fields.CharField', [], {'default': "'0c90255a-520c-11e3-a1d6-00231470a30c'", 'max_length': '120', 'null': 'True', 'db_index': 'True', 'blank': 'True'}),
            'result': ('django.db.models.fields.CharField', [], {'max_length': '180', 'blank': 'True'}),
            'status': ('django.db.models.fields.IntegerField', [], {'default': '1', 'null': 'True', 'db_index': 'True', 'blank': 'True'}),
            'subscriber': ('django.db.models.fields.related.ForeignKey', [], {'to': u"orm['dialer_campaign.Subscriber']", 'null': 'True', 'blank': 'True'}),
            'timelimit': ('django.db.models.fields.IntegerField', [], {'default': '3600', 'blank': 'True'}),
            'timeout': ('django.db.models.fields.IntegerField', [], {'default': '30', 'blank': 'True'}),
            'updated_date': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'blank': 'True'}),
            'user': ('django.db.models.fields.related.ForeignKey', [], {'to': u"orm['auth.User']"})
        },
        u'dialer_contact.contact': {
            'Meta': {'object_name': 'Contact', 'db_table': "u'dialer_contact'"},
            'additional_vars': ('jsonfield.fields.JSONField', [], {'null': 'True', 'blank': 'True'}),
            'address': ('django.db.models.fields.CharField', [], {'max_length': '250', 'null': 'True', 'blank': 'True'}),
            'city': ('django.db.models.fields.CharField', [], {'max_length': '120', 'null': 'True', 'blank': 'True'}),
            'contact': ('django.db.models.fields.CharField', [], {'max_length': '90'}),
            'country': ('django_countries.fields.CountryField', [], {'max_length': '2', 'null': 'True', 'blank': 'True'}),
            'created_date': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'description': ('django.db.models.fields.TextField', [], {'null': 'True', 'blank': 'True'}),
            'email': ('django.db.models.fields.EmailField', [], {'max_length': '75', 'null': 'True', 'blank': 'True'}),
            'first_name': ('django.db.models.fields.CharField', [], {'max_length': '120', 'null': 'True', 'blank': 'True'}),
            u'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'last_name': ('django.db.models.fields.CharField', [], {'max_length': '120', 'null': 'True', 'blank': 'True'}),
            'phonebook': ('django.db.models.fields.related.ForeignKey', [], {'to': u"orm['dialer_contact.Phonebook']"}),
            'state': ('django.db.models.fields.CharField', [], {'max_length': '120', 'null': 'True', 'blank': 'True'}),
            'status': ('django.db.models.fields.IntegerField', [], {'default': '1', 'null': 'True', 'blank': 'True'}),
            'unit_number': ('django.db.models.fields.CharField', [], {'max_length': '50', 'null': 'True', 'blank': 'True'}),
            'updated_date': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'blank': 'True'})
        },
        u'dialer_contact.phonebook': {
            'Meta': {'object_name': 'Phonebook', 'db_table': "u'dialer_phonebook'"},
            'created_date': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'description': ('django.db.models.fields.TextField', [], {'null': 'True', 'blank': 'True'}),
            u'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '90'}),
            'updated_date': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'blank': 'True'}),
            'user': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'Phonebook owner'", 'to': u"orm['auth.User']"})
        },
        u'dialer_gateway.gateway': {
            'Meta': {'object_name': 'Gateway', 'db_table': "u'dialer_gateway'"},
            'addparameter': ('django.db.models.fields.CharField', [], {'max_length': '360', 'blank': 'True'}),
            'addprefix': ('django.db.models.fields.CharField', [], {'max_length': '60', 'blank': 'True'}),
            'count_call': ('django.db.models.fields.IntegerField', [], {'null': 'True', 'blank': 'True'}),
            'count_in_use': ('django.db.models.fields.IntegerField', [], {'null': 'True', 'blank': 'True'}),
            'created_date': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'description': ('django.db.models.fields.TextField', [], {'blank': 'True'}),
            'failover': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'Failover Gateway'", 'null': 'True', 'to': u"orm['dialer_gateway.Gateway']"}),
            'gateway_codecs': ('django.db.models.fields.CharField', [], {'max_length': '500', 'blank': 'True'}),
            'gateway_retries': ('django.db.models.fields.CharField', [], {'max_length': '500', 'blank': 'True'}),
            'gateway_timeouts': ('django.db.models.fields.CharField', [], {'max_length': '500', 'blank': 'True'}),
            'gateways': ('django.db.models.fields.CharField', [], {'max_length': '500'}),
            u'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'maximum_call': ('django.db.models.fields.IntegerField', [], {'null': 'True', 'blank': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '255'}),
            'originate_dial_string': ('django.db.models.fields.CharField', [], {'max_length': '500', 'blank': 'True'}),
            'removeprefix': ('django.db.models.fields.CharField', [], {'max_length': '60', 'blank': 'True'}),
            'secondused': ('django.db.models.fields.IntegerField', [], {'null': 'True', 'blank': 'True'}),
            'status': ('django.db.models.fields.IntegerField', [], {'default': '1', 'null': 'True', 'blank': 'True'}),
            'updated_date': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'blank': 'True'})
        },
        u'dnc.dnc': {
            'Meta': {'object_name': 'DNC', 'db_table': "'dnc_list'"},
            'created_date': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            u'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '50', 'null': 'True'}),
            'updated_date': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'blank': 'True'}),
            'user': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'DNC owner'", 'to': u"orm['auth.User']"})
        },
        u'survey.branching': {
            'Meta': {'unique_together': "(('keys', 'section'),)", 'object_name': 'Branching'},
            'created_date': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'goto': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'Goto Section'", 'null': 'True', 'to': u"orm['survey.Section']"}),
            u'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'keys': ('django.db.models.fields.CharField', [], {'max_length': '150', 'blank': 'True'}),
            'section': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'Branching Section'", 'to': u"orm['survey.Section']"}),
            'updated_date': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'blank': 'True'})
        },
        u'survey.branching_template': {
            'Meta': {'unique_together': "(('keys', 'section'),)", 'object_name': 'Branching_template'},
            'created_date': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'goto': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'Goto Template Section'", 'null': 'True', 'to': u"orm['survey.Section_template']"}),
            u'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'keys': ('django.db.models.fields.CharField', [], {'max_length': '150', 'blank': 'True'}),
            'section': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'Branching Template Section'", 'to': u"orm['survey.Section_template']"}),
            'updated_date': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'blank': 'True'})
        },
        u'survey.result': {
            'Meta': {'unique_together': "(('callrequest', 'section'),)", 'object_name': 'Result'},
            'callrequest': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'survey_callrequest'", 'null': 'True', 'to': u"orm['dialer_cdr.Callrequest']"}),
            'created_date': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            u'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'record_file': ('django.db.models.fields.CharField', [], {'default': "''", 'max_length': '200', 'blank': 'True'}),
            'recording_duration': ('django.db.models.fields.IntegerField', [], {'default': '0', 'max_length': '10', 'null': 'True', 'blank': 'True'}),
            'response': ('django.db.models.fields.CharField', [], {'max_length': '150'}),
            'section': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'Result Section'", 'to': u"orm['survey.Section']"})
        },
        u'survey.resultaggregate': {
            'Meta': {'unique_together': "(('survey', 'section', 'response'),)", 'object_name': 'ResultAggregate'},
            'count': ('django.db.models.fields.IntegerField', [], {'default': '0', 'max_length': '20'}),
            'created_date': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            u'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'response': ('django.db.models.fields.CharField', [], {'max_length': '150', 'db_index': 'True'}),
            'section': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'ResultSum Section'", 'to': u"orm['survey.Section']"}),
            'survey': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'ResultSum Survey'", 'to': u"orm['survey.Survey']"})
        },
        u'survey.section': {
            'Meta': {'ordering': "['order', 'survey']", 'object_name': 'Section'},
            'audiofile': ('django.db.models.fields.related.ForeignKey', [], {'to': u"orm['audiofield.AudioFile']", 'null': 'True', 'blank': 'True'}),
            'completed': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'conference': ('django.db.models.fields.CharField', [], {'max_length': '50', 'null': 'True', 'blank': 'True'}),
            'created_date': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            u'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'invalid_audiofile': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'survey_invalid_audiofile'", 'null': 'True', 'to': u"orm['audiofield.AudioFile']"}),
            'key_0': ('django.db.models.fields.CharField', [], {'max_length': '100', 'null': 'True', 'blank': 'True'}),
            'key_1': ('django.db.models.fields.CharField', [], {'max_length': '100', 'null': 'True', 'blank': 'True'}),
            'key_2': ('django.db.models.fields.CharField', [], {'max_length': '100', 'null': 'True', 'blank': 'True'}),
            'key_3': ('django.db.models.fields.CharField', [], {'max_length': '100', 'null': 'True', 'blank': 'True'}),
            'key_4': ('django.db.models.fields.CharField', [], {'max_length': '100', 'null': 'True', 'blank': 'True'}),
            'key_5': ('django.db.models.fields.CharField', [], {'max_length': '100', 'null': 'True', 'blank': 'True'}),
            'key_6': ('django.db.models.fields.CharField', [], {'max_length': '100', 'null': 'True', 'blank': 'True'}),
            'key_7': ('django.db.models.fields.CharField', [], {'max_length': '100', 'null': 'True', 'blank': 'True'}),
            'key_8': ('django.db.models.fields.CharField', [], {'max_length': '100', 'null': 'True', 'blank': 'True'}),
            'key_9': ('django.db.models.fields.CharField', [], {'max_length': '100', 'null': 'True', 'blank': 'True'}),
            'max_number': ('django.db.models.fields.BigIntegerField', [], {'default': '99', 'max_length': '50', 'null': 'True', 'blank': 'True'}),
            'min_number': ('django.db.models.fields.BigIntegerField', [], {'default': '0', 'max_length': '50', 'null': 'True', 'blank': 'True'}),
            'number_digits': ('django.db.models.fields.IntegerField', [], {'default': "'2'", 'max_length': '2', 'null': 'True', 'blank': 'True'}),
            'order': ('django.db.models.fields.PositiveIntegerField', [], {'default': '1', 'db_index': 'True'}),
            'phonenumber': ('django.db.models.fields.CharField', [], {'max_length': '50', 'null': 'True', 'blank': 'True'}),
            'question': ('django.db.models.fields.CharField', [], {'max_length': '500'}),
            'rating_laps': ('django.db.models.fields.IntegerField', [], {'default': '9', 'max_length': '1', 'null': 'True', 'blank': 'True'}),
            'retries': ('django.db.models.fields.IntegerField', [], {'default': '0', 'max_length': '1', 'null': 'True', 'blank': 'True'}),
            'script': ('django.db.models.fields.CharField', [], {'max_length': '1000', 'null': 'True', 'blank': 'True'}),
            'section_template': ('django.db.models.fields.IntegerField', [], {'default': '0', 'max_length': '10', 'null': 'True', 'blank': 'True'}),
            'survey': ('django.db.models.fields.related.ForeignKey', [], {'to': u"orm['survey.Survey']"}),
            'timeout': ('django.db.models.fields.IntegerField', [], {'default': '5', 'max_length': '2', 'null': 'True', 'blank': 'True'}),
            'type': ('django.db.models.fields.IntegerField', [], {'default': '1', 'max_length': '20', 'null': 'True', 'blank': 'True'}),
            'updated_date': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'blank': 'True'}),
            'validate_number': ('django.db.models.fields.BooleanField', [], {'default': 'True'})
        },
        u'survey.section_template': {
            'Meta': {'ordering': "['order', 'survey']", 'object_name': 'Section_template'},
            'audiofile': ('django.db.models.fields.related.ForeignKey', [], {'to': u"orm['audiofield.AudioFile']", 'null': 'True', 'blank': 'True'}),
            'completed': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'conference': ('django.db.models.fields.CharField', [], {'max_length': '50', 'null': 'True', 'blank': 'True'}),
            'created_date': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            u'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'invalid_audiofile': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'survey_template_invalid_audiofile'", 'null': 'True', 'to': u"orm['audiofield.AudioFile']"}),
            'key_0': ('django.db.models.fields.CharField', [], {'max_length': '100', 'null': 'True', 'blank': 'True'}),
            'key_1': ('django.db.models.fields.CharField', [], {'max_length': '100', 'null': 'True', 'blank': 'True'}),
            'key_2': ('django.db.models.fields.CharField', [], {'max_length': '100', 'null': 'True', 'blank': 'True'}),
            'key_3': ('django.db.models.fields.CharField', [], {'max_length': '100', 'null': 'True', 'blank': 'True'}),
            'key_4': ('django.db.models.fields.CharField', [], {'max_length': '100', 'null': 'True', 'blank': 'True'}),
            'key_5': ('django.db.models.fields.CharField', [], {'max_length': '100', 'null': 'True', 'blank': 'True'}),
            'key_6': ('django.db.models.fields.CharField', [], {'max_length': '100', 'null': 'True', 'blank': 'True'}),
            'key_7': ('django.db.models.fields.CharField', [], {'max_length': '100', 'null': 'True', 'blank': 'True'}),
            'key_8': ('django.db.models.fields.CharField', [], {'max_length': '100', 'null': 'True', 'blank': 'True'}),
            'key_9': ('django.db.models.fields.CharField', [], {'max_length': '100', 'null': 'True', 'blank': 'True'}),
            'max_number': ('django.db.models.fields.BigIntegerField', [], {'default': '99', 'max_length': '50', 'null': 'True', 'blank': 'True'}),
            'min_number': ('django.db.models.fields.BigIntegerField', [], {'default': '0', 'max_length': '50', 'null': 'True', 'blank': 'True'}),
            'number_digits': ('django.db.models.fields.IntegerField', [], {'default': "'2'", 'max_length': '2', 'null': 'True', 'blank': 'True'}),
            'order': ('django.db.models.fields.PositiveIntegerField', [], {'default': '1', 'db_index': 'True'}),
            'phonenumber': ('django.db.models.fields.CharField', [], {'max_length': '50', 'null': 'True', 'blank': 'True'}),
            'question': ('django.db.models.fields.CharField', [], {'max_length': '500'}),
            'rating_laps': ('django.db.models.fields.IntegerField', [], {'default': '9', 'max_length': '1', 'null': 'True', 'blank': 'True'}),
            'retries': ('django.db.models.fields.IntegerField', [], {'default': '0', 'max_length': '1', 'null': 'True', 'blank': 'True'}),
            'script': ('django.db.models.fields.CharField', [], {'max_length': '1000', 'null': 'True', 'blank': 'True'}),
            'survey': ('django.db.models.fields.related.ForeignKey', [], {'to': u"orm['survey.Survey_template']"}),
            'timeout': ('django.db.models.fields.IntegerField', [], {'default': '5', 'max_length': '2', 'null': 'True', 'blank': 'True'}),
            'type': ('django.db.models.fields.IntegerField', [], {'default': '1', 'max_length': '20', 'null': 'True', 'blank': 'True'}),
            'updated_date': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'blank': 'True'}),
            'validate_number': ('django.db.models.fields.BooleanField', [], {'default': 'True'})
        },
        u'survey.survey': {
            'Meta': {'object_name': 'Survey'},
            'campaign': ('django.db.models.fields.related.ForeignKey', [], {'to': u"orm['dialer_campaign.Campaign']", 'null': 'True', 'blank': 'True'}),
            'created_date': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'description': ('django.db.models.fields.TextField', [], {'null': 'True', 'blank': 'True'}),
            u'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '90'}),
            'tts_language': ('django_lets_go.language_field.LanguageField', [], {'default': "'en'", 'max_length': '2', 'null': 'True', 'blank': 'True'}),
            'updated_date': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'blank': 'True'}),
            'user': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'survey_user'", 'to': u"orm['auth.User']"})
        },
        u'survey.survey_template': {
            'Meta': {'object_name': 'Survey_template'},
            'created_date': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'description': ('django.db.models.fields.TextField', [], {'null': 'True', 'blank': 'True'}),
            u'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '90'}),
            'tts_language': ('django_lets_go.language_field.LanguageField', [], {'default': "'en'", 'max_length': '2', 'null': 'True', 'blank': 'True'}),
            'updated_date': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'blank': 'True'}),
            'user': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'survey_template_user'", 'to': u"orm['auth.User']"})
        }
    }

    complete_apps = ['survey']
########NEW FILE########
__FILENAME__ = 0004_auto__add_field_section_sms_text__chg_field_section_type__add_field_se
# -*- coding: utf-8 -*-
import datetime
from south.db import db
from south.v2 import SchemaMigration
from django.db import models


class Migration(SchemaMigration):

    def forwards(self, orm):
        # Adding field 'Section.sms_text'
        db.add_column(u'survey_section', 'sms_text',
                      self.gf('django.db.models.fields.CharField')(max_length=200, null=True, blank=True),
                      keep_default=False)


        # Changing field 'Section.type'
        db.alter_column(u'survey_section', 'type', self.gf('django.db.models.fields.IntegerField')(max_length=20))
        # Adding field 'Section_template.sms_text'
        db.add_column(u'survey_section_template', 'sms_text',
                      self.gf('django.db.models.fields.CharField')(max_length=200, null=True, blank=True),
                      keep_default=False)


        # Changing field 'Section_template.type'
        db.alter_column(u'survey_section_template', 'type', self.gf('django.db.models.fields.IntegerField')(max_length=20))

    def backwards(self, orm):
        # Deleting field 'Section.sms_text'
        db.delete_column(u'survey_section', 'sms_text')


        # Changing field 'Section.type'
        db.alter_column(u'survey_section', 'type', self.gf('django.db.models.fields.IntegerField')(max_length=20, null=True))
        # Deleting field 'Section_template.sms_text'
        db.delete_column(u'survey_section_template', 'sms_text')


        # Changing field 'Section_template.type'
        db.alter_column(u'survey_section_template', 'type', self.gf('django.db.models.fields.IntegerField')(max_length=20, null=True))

    models = {
        u'audiofield.audiofile': {
            'Meta': {'object_name': 'AudioFile', 'db_table': "u'audio_file'"},
            'audio_file': ('audiofield.fields.AudioField', [], {'ext_whitelist': "['.mp3', '.wav', '.ogg']", 'max_length': '100', 'blank': 'True'}),
            'created_date': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            u'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '150'}),
            'updated_date': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'blank': 'True'}),
            'user': ('django.db.models.fields.related.ForeignKey', [], {'to': u"orm['auth.User']"})
        },
        u'auth.group': {
            'Meta': {'object_name': 'Group'},
            u'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '80'}),
            'permissions': ('django.db.models.fields.related.ManyToManyField', [], {'to': u"orm['auth.Permission']", 'symmetrical': 'False', 'blank': 'True'})
        },
        u'auth.permission': {
            'Meta': {'ordering': "(u'content_type__app_label', u'content_type__model', u'codename')", 'unique_together': "((u'content_type', u'codename'),)", 'object_name': 'Permission'},
            'codename': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'content_type': ('django.db.models.fields.related.ForeignKey', [], {'to': u"orm['contenttypes.ContentType']"}),
            u'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '50'})
        },
        u'auth.user': {
            'Meta': {'object_name': 'User'},
            'date_joined': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
            'email': ('django.db.models.fields.EmailField', [], {'max_length': '75', 'blank': 'True'}),
            'first_name': ('django.db.models.fields.CharField', [], {'max_length': '30', 'blank': 'True'}),
            'groups': ('django.db.models.fields.related.ManyToManyField', [], {'symmetrical': 'False', 'related_name': "u'user_set'", 'blank': 'True', 'to': u"orm['auth.Group']"}),
            u'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'is_active': ('django.db.models.fields.BooleanField', [], {'default': 'True'}),
            'is_staff': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'is_superuser': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'last_login': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
            'last_name': ('django.db.models.fields.CharField', [], {'max_length': '30', 'blank': 'True'}),
            'password': ('django.db.models.fields.CharField', [], {'max_length': '128'}),
            'user_permissions': ('django.db.models.fields.related.ManyToManyField', [], {'symmetrical': 'False', 'related_name': "u'user_set'", 'blank': 'True', 'to': u"orm['auth.Permission']"}),
            'username': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '30'})
        },
        u'contenttypes.contenttype': {
            'Meta': {'ordering': "('name',)", 'unique_together': "(('app_label', 'model'),)", 'object_name': 'ContentType', 'db_table': "'django_content_type'"},
            'app_label': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            u'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'model': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '100'})
        },
        u'dialer_campaign.campaign': {
            'Meta': {'object_name': 'Campaign', 'db_table': "u'dialer_campaign'"},
            'agent_script': ('django.db.models.fields.TextField', [], {'null': 'True', 'blank': 'True'}),
            'aleg_gateway': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'A-Leg Gateway'", 'to': u"orm['dialer_gateway.Gateway']"}),
            'amd_behavior': ('django.db.models.fields.IntegerField', [], {'default': '1', 'null': 'True', 'blank': 'True'}),
            'caller_name': ('django.db.models.fields.CharField', [], {'max_length': '80', 'blank': 'True'}),
            'callerid': ('django.db.models.fields.CharField', [], {'max_length': '80', 'blank': 'True'}),
            'callmaxduration': ('django.db.models.fields.IntegerField', [], {'default': "'1800'", 'null': 'True', 'blank': 'True'}),
            'calltimeout': ('django.db.models.fields.IntegerField', [], {'default': "'45'", 'null': 'True', 'blank': 'True'}),
            'campaign_code': ('django.db.models.fields.CharField', [], {'default': "'GOTBI'", 'unique': 'True', 'max_length': '20', 'blank': 'True'}),
            'completed': ('django.db.models.fields.IntegerField', [], {'default': '0', 'null': 'True', 'blank': 'True'}),
            'completion_intervalretry': ('django.db.models.fields.IntegerField', [], {'default': "'900'", 'null': 'True', 'blank': 'True'}),
            'completion_maxretry': ('django.db.models.fields.IntegerField', [], {'default': "'0'", 'null': 'True', 'blank': 'True'}),
            'content_type': ('django.db.models.fields.related.ForeignKey', [], {'to': u"orm['contenttypes.ContentType']"}),
            'created_date': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'daily_start_time': ('django.db.models.fields.TimeField', [], {'default': "'00:00:00'"}),
            'daily_stop_time': ('django.db.models.fields.TimeField', [], {'default': "'23:59:59'"}),
            'description': ('django.db.models.fields.TextField', [], {'null': 'True', 'blank': 'True'}),
            'dnc': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'DNC'", 'null': 'True', 'to': u"orm['dnc.DNC']"}),
            'expirationdate': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime(2013, 12, 10, 0, 0)'}),
            'external_link': ('jsonfield.fields.JSONField', [], {'null': 'True', 'blank': 'True'}),
            'extra_data': ('django.db.models.fields.CharField', [], {'max_length': '120', 'blank': 'True'}),
            'frequency': ('django.db.models.fields.IntegerField', [], {'default': "'10'", 'null': 'True', 'blank': 'True'}),
            'friday': ('django.db.models.fields.BooleanField', [], {'default': 'True'}),
            'has_been_duplicated': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'has_been_started': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            u'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'imported_phonebook': ('django.db.models.fields.CharField', [], {'default': "''", 'max_length': '500', 'blank': 'True'}),
            'intervalretry': ('django.db.models.fields.IntegerField', [], {'default': "'300'", 'null': 'True', 'blank': 'True'}),
            'lead_disposition': ('django.db.models.fields.TextField', [], {'null': 'True', 'blank': 'True'}),
            'maxretry': ('django.db.models.fields.IntegerField', [], {'default': "'0'", 'null': 'True', 'blank': 'True'}),
            'monday': ('django.db.models.fields.BooleanField', [], {'default': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'object_id': ('django.db.models.fields.PositiveIntegerField', [], {}),
            'phonebook': ('django.db.models.fields.related.ManyToManyField', [], {'symmetrical': 'False', 'to': u"orm['dialer_contact.Phonebook']", 'null': 'True', 'blank': 'True'}),
            'saturday': ('django.db.models.fields.BooleanField', [], {'default': 'True'}),
            'startingdate': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime(2013, 12, 9, 0, 0)'}),
            'status': ('django.db.models.fields.IntegerField', [], {'default': '2', 'null': 'True', 'blank': 'True'}),
            'sunday': ('django.db.models.fields.BooleanField', [], {'default': 'True'}),
            'thursday': ('django.db.models.fields.BooleanField', [], {'default': 'True'}),
            'totalcontact': ('django.db.models.fields.IntegerField', [], {'default': '0', 'null': 'True', 'blank': 'True'}),
            'tuesday': ('django.db.models.fields.BooleanField', [], {'default': 'True'}),
            'updated_date': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'blank': 'True'}),
            'user': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'Campaign owner'", 'to': u"orm['auth.User']"}),
            'voicemail': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'voicemail_audiofile': ('django.db.models.fields.related.ForeignKey', [], {'to': u"orm['audiofield.AudioFile']", 'null': 'True', 'blank': 'True'}),
            'wednesday': ('django.db.models.fields.BooleanField', [], {'default': 'True'})
        },
        u'dialer_campaign.subscriber': {
            'Meta': {'unique_together': "(['contact', 'campaign'],)", 'object_name': 'Subscriber', 'db_table': "u'dialer_subscriber'"},
            'agent': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'agent'", 'null': 'True', 'to': u"orm['auth.User']"}),
            'campaign': ('django.db.models.fields.related.ForeignKey', [], {'to': u"orm['dialer_campaign.Campaign']", 'null': 'True', 'blank': 'True'}),
            'collected_data': ('django.db.models.fields.TextField', [], {'null': 'True', 'blank': 'True'}),
            'completion_count_attempt': ('django.db.models.fields.IntegerField', [], {'default': '0', 'null': 'True', 'blank': 'True'}),
            'contact': ('django.db.models.fields.related.ForeignKey', [], {'to': u"orm['dialer_contact.Contact']", 'null': 'True', 'blank': 'True'}),
            'count_attempt': ('django.db.models.fields.IntegerField', [], {'default': '0', 'null': 'True', 'blank': 'True'}),
            'created_date': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'disposition': ('django.db.models.fields.IntegerField', [], {'null': 'True', 'blank': 'True'}),
            'duplicate_contact': ('django.db.models.fields.CharField', [], {'max_length': '90'}),
            u'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'last_attempt': ('django.db.models.fields.DateTimeField', [], {'null': 'True', 'blank': 'True'}),
            'status': ('django.db.models.fields.IntegerField', [], {'default': '1', 'null': 'True', 'blank': 'True'}),
            'updated_date': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'db_index': 'True', 'blank': 'True'})
        },
        u'dialer_cdr.callrequest': {
            'Meta': {'object_name': 'Callrequest', 'db_table': "u'dialer_callrequest'"},
            'alarm_request_id': ('django.db.models.fields.IntegerField', [], {'default': '0', 'null': 'True', 'blank': 'True'}),
            'aleg_gateway': ('django.db.models.fields.related.ForeignKey', [], {'to': u"orm['dialer_gateway.Gateway']", 'null': 'True', 'blank': 'True'}),
            'aleg_uuid': ('django.db.models.fields.CharField', [], {'max_length': '120', 'null': 'True', 'blank': 'True'}),
            'call_time': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime(2013, 12, 9, 0, 0)'}),
            'call_type': ('django.db.models.fields.IntegerField', [], {'default': '1', 'null': 'True', 'blank': 'True'}),
            'caller_name': ('django.db.models.fields.CharField', [], {'max_length': '80', 'blank': 'True'}),
            'callerid': ('django.db.models.fields.CharField', [], {'max_length': '80', 'blank': 'True'}),
            'campaign': ('django.db.models.fields.related.ForeignKey', [], {'to': u"orm['dialer_campaign.Campaign']", 'null': 'True', 'blank': 'True'}),
            'completed': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'content_type': ('django.db.models.fields.related.ForeignKey', [], {'to': u"orm['contenttypes.ContentType']"}),
            'created_date': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'extra_data': ('django.db.models.fields.CharField', [], {'max_length': '120', 'blank': 'True'}),
            'extra_dial_string': ('django.db.models.fields.CharField', [], {'max_length': '500', 'blank': 'True'}),
            'hangup_cause': ('django.db.models.fields.CharField', [], {'max_length': '80', 'blank': 'True'}),
            u'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'last_attempt_time': ('django.db.models.fields.DateTimeField', [], {'null': 'True', 'blank': 'True'}),
            'num_attempt': ('django.db.models.fields.IntegerField', [], {'default': '0'}),
            'object_id': ('django.db.models.fields.PositiveIntegerField', [], {}),
            'parent_callrequest': ('django.db.models.fields.related.ForeignKey', [], {'to': u"orm['dialer_cdr.Callrequest']", 'null': 'True', 'blank': 'True'}),
            'phone_number': ('django.db.models.fields.CharField', [], {'max_length': '80'}),
            'request_uuid': ('django.db.models.fields.CharField', [], {'default': "'a455aafa-6066-11e3-a48d-00231470a30c'", 'max_length': '120', 'null': 'True', 'db_index': 'True', 'blank': 'True'}),
            'result': ('django.db.models.fields.CharField', [], {'max_length': '180', 'blank': 'True'}),
            'status': ('django.db.models.fields.IntegerField', [], {'default': '1', 'null': 'True', 'db_index': 'True', 'blank': 'True'}),
            'subscriber': ('django.db.models.fields.related.ForeignKey', [], {'to': u"orm['dialer_campaign.Subscriber']", 'null': 'True', 'blank': 'True'}),
            'timelimit': ('django.db.models.fields.IntegerField', [], {'default': '3600', 'blank': 'True'}),
            'timeout': ('django.db.models.fields.IntegerField', [], {'default': '30', 'blank': 'True'}),
            'updated_date': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'blank': 'True'}),
            'user': ('django.db.models.fields.related.ForeignKey', [], {'to': u"orm['auth.User']"})
        },
        u'dialer_contact.contact': {
            'Meta': {'object_name': 'Contact', 'db_table': "u'dialer_contact'"},
            'additional_vars': ('jsonfield.fields.JSONField', [], {'null': 'True', 'blank': 'True'}),
            'address': ('django.db.models.fields.CharField', [], {'max_length': '250', 'null': 'True', 'blank': 'True'}),
            'city': ('django.db.models.fields.CharField', [], {'max_length': '120', 'null': 'True', 'blank': 'True'}),
            'contact': ('django.db.models.fields.CharField', [], {'max_length': '90'}),
            'country': ('django_countries.fields.CountryField', [], {'max_length': '2', 'null': 'True', 'blank': 'True'}),
            'created_date': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'description': ('django.db.models.fields.TextField', [], {'null': 'True', 'blank': 'True'}),
            'email': ('django.db.models.fields.EmailField', [], {'max_length': '75', 'null': 'True', 'blank': 'True'}),
            'first_name': ('django.db.models.fields.CharField', [], {'max_length': '120', 'null': 'True', 'blank': 'True'}),
            u'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'last_name': ('django.db.models.fields.CharField', [], {'max_length': '120', 'null': 'True', 'blank': 'True'}),
            'phonebook': ('django.db.models.fields.related.ForeignKey', [], {'to': u"orm['dialer_contact.Phonebook']"}),
            'state': ('django.db.models.fields.CharField', [], {'max_length': '120', 'null': 'True', 'blank': 'True'}),
            'status': ('django.db.models.fields.IntegerField', [], {'default': '1', 'null': 'True', 'blank': 'True'}),
            'unit_number': ('django.db.models.fields.CharField', [], {'max_length': '50', 'null': 'True', 'blank': 'True'}),
            'updated_date': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'blank': 'True'})
        },
        u'dialer_contact.phonebook': {
            'Meta': {'object_name': 'Phonebook', 'db_table': "u'dialer_phonebook'"},
            'created_date': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'description': ('django.db.models.fields.TextField', [], {'null': 'True', 'blank': 'True'}),
            u'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '90'}),
            'updated_date': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'blank': 'True'}),
            'user': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'Phonebook owner'", 'to': u"orm['auth.User']"})
        },
        u'dialer_gateway.gateway': {
            'Meta': {'object_name': 'Gateway', 'db_table': "u'dialer_gateway'"},
            'addparameter': ('django.db.models.fields.CharField', [], {'max_length': '360', 'blank': 'True'}),
            'addprefix': ('django.db.models.fields.CharField', [], {'max_length': '60', 'blank': 'True'}),
            'count_call': ('django.db.models.fields.IntegerField', [], {'null': 'True', 'blank': 'True'}),
            'count_in_use': ('django.db.models.fields.IntegerField', [], {'null': 'True', 'blank': 'True'}),
            'created_date': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'description': ('django.db.models.fields.TextField', [], {'blank': 'True'}),
            'failover': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'Failover Gateway'", 'null': 'True', 'to': u"orm['dialer_gateway.Gateway']"}),
            'gateway_codecs': ('django.db.models.fields.CharField', [], {'max_length': '500', 'blank': 'True'}),
            'gateway_retries': ('django.db.models.fields.CharField', [], {'max_length': '500', 'blank': 'True'}),
            'gateway_timeouts': ('django.db.models.fields.CharField', [], {'max_length': '500', 'blank': 'True'}),
            'gateways': ('django.db.models.fields.CharField', [], {'max_length': '500'}),
            u'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'maximum_call': ('django.db.models.fields.IntegerField', [], {'null': 'True', 'blank': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '255'}),
            'originate_dial_string': ('django.db.models.fields.CharField', [], {'max_length': '500', 'blank': 'True'}),
            'removeprefix': ('django.db.models.fields.CharField', [], {'max_length': '60', 'blank': 'True'}),
            'secondused': ('django.db.models.fields.IntegerField', [], {'null': 'True', 'blank': 'True'}),
            'status': ('django.db.models.fields.IntegerField', [], {'default': '1', 'null': 'True', 'blank': 'True'}),
            'updated_date': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'blank': 'True'})
        },
        u'dnc.dnc': {
            'Meta': {'object_name': 'DNC', 'db_table': "'dnc_list'"},
            'created_date': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            u'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '50', 'null': 'True'}),
            'updated_date': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'blank': 'True'}),
            'user': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'DNC owner'", 'to': u"orm['auth.User']"})
        },
        u'survey.branching': {
            'Meta': {'unique_together': "(('keys', 'section'),)", 'object_name': 'Branching'},
            'created_date': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'goto': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'Goto Section'", 'null': 'True', 'to': u"orm['survey.Section']"}),
            u'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'keys': ('django.db.models.fields.CharField', [], {'max_length': '150', 'blank': 'True'}),
            'section': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'Branching Section'", 'to': u"orm['survey.Section']"}),
            'updated_date': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'blank': 'True'})
        },
        u'survey.branching_template': {
            'Meta': {'unique_together': "(('keys', 'section'),)", 'object_name': 'Branching_template'},
            'created_date': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'goto': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'Goto Template Section'", 'null': 'True', 'to': u"orm['survey.Section_template']"}),
            u'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'keys': ('django.db.models.fields.CharField', [], {'max_length': '150', 'blank': 'True'}),
            'section': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'Branching Template Section'", 'to': u"orm['survey.Section_template']"}),
            'updated_date': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'blank': 'True'})
        },
        u'survey.result': {
            'Meta': {'unique_together': "(('callrequest', 'section'),)", 'object_name': 'Result'},
            'callrequest': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'survey_callrequest'", 'null': 'True', 'to': u"orm['dialer_cdr.Callrequest']"}),
            'created_date': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            u'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'record_file': ('django.db.models.fields.CharField', [], {'default': "''", 'max_length': '200', 'blank': 'True'}),
            'recording_duration': ('django.db.models.fields.IntegerField', [], {'default': '0', 'max_length': '10', 'null': 'True', 'blank': 'True'}),
            'response': ('django.db.models.fields.CharField', [], {'max_length': '150'}),
            'section': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'Result Section'", 'to': u"orm['survey.Section']"})
        },
        u'survey.resultaggregate': {
            'Meta': {'unique_together': "(('survey', 'section', 'response'),)", 'object_name': 'ResultAggregate'},
            'count': ('django.db.models.fields.IntegerField', [], {'default': '0', 'max_length': '20'}),
            'created_date': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            u'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'response': ('django.db.models.fields.CharField', [], {'max_length': '150', 'db_index': 'True'}),
            'section': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'ResultSum Section'", 'to': u"orm['survey.Section']"}),
            'survey': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'ResultSum Survey'", 'to': u"orm['survey.Survey']"})
        },
        u'survey.section': {
            'Meta': {'ordering': "['order', 'survey']", 'object_name': 'Section'},
            'audiofile': ('django.db.models.fields.related.ForeignKey', [], {'to': u"orm['audiofield.AudioFile']", 'null': 'True', 'blank': 'True'}),
            'completed': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'conference': ('django.db.models.fields.CharField', [], {'max_length': '50', 'null': 'True', 'blank': 'True'}),
            'created_date': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            u'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'invalid_audiofile': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'survey_invalid_audiofile'", 'null': 'True', 'to': u"orm['audiofield.AudioFile']"}),
            'key_0': ('django.db.models.fields.CharField', [], {'max_length': '100', 'null': 'True', 'blank': 'True'}),
            'key_1': ('django.db.models.fields.CharField', [], {'max_length': '100', 'null': 'True', 'blank': 'True'}),
            'key_2': ('django.db.models.fields.CharField', [], {'max_length': '100', 'null': 'True', 'blank': 'True'}),
            'key_3': ('django.db.models.fields.CharField', [], {'max_length': '100', 'null': 'True', 'blank': 'True'}),
            'key_4': ('django.db.models.fields.CharField', [], {'max_length': '100', 'null': 'True', 'blank': 'True'}),
            'key_5': ('django.db.models.fields.CharField', [], {'max_length': '100', 'null': 'True', 'blank': 'True'}),
            'key_6': ('django.db.models.fields.CharField', [], {'max_length': '100', 'null': 'True', 'blank': 'True'}),
            'key_7': ('django.db.models.fields.CharField', [], {'max_length': '100', 'null': 'True', 'blank': 'True'}),
            'key_8': ('django.db.models.fields.CharField', [], {'max_length': '100', 'null': 'True', 'blank': 'True'}),
            'key_9': ('django.db.models.fields.CharField', [], {'max_length': '100', 'null': 'True', 'blank': 'True'}),
            'max_number': ('django.db.models.fields.BigIntegerField', [], {'default': '99', 'max_length': '50', 'null': 'True', 'blank': 'True'}),
            'min_number': ('django.db.models.fields.BigIntegerField', [], {'default': '0', 'max_length': '50', 'null': 'True', 'blank': 'True'}),
            'number_digits': ('django.db.models.fields.IntegerField', [], {'default': "'2'", 'max_length': '2', 'null': 'True', 'blank': 'True'}),
            'order': ('django.db.models.fields.PositiveIntegerField', [], {'default': '1', 'db_index': 'True'}),
            'phonenumber': ('django.db.models.fields.CharField', [], {'max_length': '50', 'null': 'True', 'blank': 'True'}),
            'question': ('django.db.models.fields.CharField', [], {'max_length': '500'}),
            'rating_laps': ('django.db.models.fields.IntegerField', [], {'default': '9', 'max_length': '1', 'null': 'True', 'blank': 'True'}),
            'retries': ('django.db.models.fields.IntegerField', [], {'default': '0', 'max_length': '1', 'null': 'True', 'blank': 'True'}),
            'script': ('django.db.models.fields.CharField', [], {'max_length': '1000', 'null': 'True', 'blank': 'True'}),
            'section_template': ('django.db.models.fields.IntegerField', [], {'default': '0', 'max_length': '10', 'null': 'True', 'blank': 'True'}),
            'sms_text': ('django.db.models.fields.CharField', [], {'max_length': '200', 'null': 'True', 'blank': 'True'}),
            'survey': ('django.db.models.fields.related.ForeignKey', [], {'to': u"orm['survey.Survey']"}),
            'timeout': ('django.db.models.fields.IntegerField', [], {'default': '5', 'max_length': '2', 'null': 'True', 'blank': 'True'}),
            'type': ('django.db.models.fields.IntegerField', [], {'default': '1', 'max_length': '20'}),
            'updated_date': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'blank': 'True'}),
            'validate_number': ('django.db.models.fields.BooleanField', [], {'default': 'True'})
        },
        u'survey.section_template': {
            'Meta': {'ordering': "['order', 'survey']", 'object_name': 'Section_template'},
            'audiofile': ('django.db.models.fields.related.ForeignKey', [], {'to': u"orm['audiofield.AudioFile']", 'null': 'True', 'blank': 'True'}),
            'completed': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'conference': ('django.db.models.fields.CharField', [], {'max_length': '50', 'null': 'True', 'blank': 'True'}),
            'created_date': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            u'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'invalid_audiofile': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'survey_template_invalid_audiofile'", 'null': 'True', 'to': u"orm['audiofield.AudioFile']"}),
            'key_0': ('django.db.models.fields.CharField', [], {'max_length': '100', 'null': 'True', 'blank': 'True'}),
            'key_1': ('django.db.models.fields.CharField', [], {'max_length': '100', 'null': 'True', 'blank': 'True'}),
            'key_2': ('django.db.models.fields.CharField', [], {'max_length': '100', 'null': 'True', 'blank': 'True'}),
            'key_3': ('django.db.models.fields.CharField', [], {'max_length': '100', 'null': 'True', 'blank': 'True'}),
            'key_4': ('django.db.models.fields.CharField', [], {'max_length': '100', 'null': 'True', 'blank': 'True'}),
            'key_5': ('django.db.models.fields.CharField', [], {'max_length': '100', 'null': 'True', 'blank': 'True'}),
            'key_6': ('django.db.models.fields.CharField', [], {'max_length': '100', 'null': 'True', 'blank': 'True'}),
            'key_7': ('django.db.models.fields.CharField', [], {'max_length': '100', 'null': 'True', 'blank': 'True'}),
            'key_8': ('django.db.models.fields.CharField', [], {'max_length': '100', 'null': 'True', 'blank': 'True'}),
            'key_9': ('django.db.models.fields.CharField', [], {'max_length': '100', 'null': 'True', 'blank': 'True'}),
            'max_number': ('django.db.models.fields.BigIntegerField', [], {'default': '99', 'max_length': '50', 'null': 'True', 'blank': 'True'}),
            'min_number': ('django.db.models.fields.BigIntegerField', [], {'default': '0', 'max_length': '50', 'null': 'True', 'blank': 'True'}),
            'number_digits': ('django.db.models.fields.IntegerField', [], {'default': "'2'", 'max_length': '2', 'null': 'True', 'blank': 'True'}),
            'order': ('django.db.models.fields.PositiveIntegerField', [], {'default': '1', 'db_index': 'True'}),
            'phonenumber': ('django.db.models.fields.CharField', [], {'max_length': '50', 'null': 'True', 'blank': 'True'}),
            'question': ('django.db.models.fields.CharField', [], {'max_length': '500'}),
            'rating_laps': ('django.db.models.fields.IntegerField', [], {'default': '9', 'max_length': '1', 'null': 'True', 'blank': 'True'}),
            'retries': ('django.db.models.fields.IntegerField', [], {'default': '0', 'max_length': '1', 'null': 'True', 'blank': 'True'}),
            'script': ('django.db.models.fields.CharField', [], {'max_length': '1000', 'null': 'True', 'blank': 'True'}),
            'sms_text': ('django.db.models.fields.CharField', [], {'max_length': '200', 'null': 'True', 'blank': 'True'}),
            'survey': ('django.db.models.fields.related.ForeignKey', [], {'to': u"orm['survey.Survey_template']"}),
            'timeout': ('django.db.models.fields.IntegerField', [], {'default': '5', 'max_length': '2', 'null': 'True', 'blank': 'True'}),
            'type': ('django.db.models.fields.IntegerField', [], {'default': '1', 'max_length': '20'}),
            'updated_date': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'blank': 'True'}),
            'validate_number': ('django.db.models.fields.BooleanField', [], {'default': 'True'})
        },
        u'survey.survey': {
            'Meta': {'object_name': 'Survey'},
            'campaign': ('django.db.models.fields.related.ForeignKey', [], {'to': u"orm['dialer_campaign.Campaign']", 'null': 'True', 'blank': 'True'}),
            'created_date': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'description': ('django.db.models.fields.TextField', [], {'null': 'True', 'blank': 'True'}),
            u'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '90'}),
            'tts_language': ('django_lets_go.language_field.LanguageField', [], {'default': "'en'", 'max_length': '2', 'null': 'True', 'blank': 'True'}),
            'updated_date': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'blank': 'True'}),
            'user': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'survey_user'", 'to': u"orm['auth.User']"})
        },
        u'survey.survey_template': {
            'Meta': {'object_name': 'Survey_template'},
            'created_date': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'description': ('django.db.models.fields.TextField', [], {'null': 'True', 'blank': 'True'}),
            u'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '90'}),
            'tts_language': ('django_lets_go.language_field.LanguageField', [], {'default': "'en'", 'max_length': '2', 'null': 'True', 'blank': 'True'}),
            'updated_date': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'blank': 'True'}),
            'user': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'survey_template_user'", 'to': u"orm['auth.User']"})
        }
    }

    complete_apps = ['survey']
########NEW FILE########
__FILENAME__ = models
#
# Newfies-Dialer License
# http://www.newfies-dialer.org
#
# This Source Code Form is subject to the terms of the Mozilla Public
# License, v. 2.0. If a copy of the MPL was not distributed with this file,
# You can obtain one at http://mozilla.org/MPL/2.0/.
#
# Copyright (C) 2011-2014 Star2Billing S.L.
#
# The Initial Developer of the Original Code is
# Arezqui Belaid <info@star2billing.com>
#

from django.db import models
from django.db.models.signals import post_save
from django.utils.translation import ugettext_lazy as _
from django.contrib.contenttypes.models import ContentType
from dialer_campaign.models import Campaign
from dialer_cdr.models import Callrequest
from survey.constants import SECTION_TYPE
from audiofield.models import AudioFile, AudioField
from django_lets_go.language_field import LanguageField
from adminsortable.models import Sortable
from south.modelsinspector import add_introspection_rules

add_introspection_rules([], ["^common\.language_field\.LanguageField"])
add_introspection_rules([], ["^audiofield\.fields\.AudioField"])
add_introspection_rules([
    (
        [AudioField],  # Class(es) these apply to
        [],  # Positional arguments (not used)
        {
            "ext_whitelist": ["ext_whitelist", {"default": ""}],
        },  # Keyword argument
    ),
], ["^audiofield\.fields\.AudioField"])


class Survey_abstract(models.Model):
    """This defines the Survey template

    **Attributes**:

        * ``name`` - survey name.
        * ``description`` - description about the survey.

    **Relationships**:

        * ``user`` - Foreign key relationship to the User model.\
        Each survey is assigned to a User

    **Name of DB table**: survey
    """
    name = models.CharField(max_length=90, verbose_name=_('name'))
    tts_language = LanguageField(blank=True, null=True, default='en',
                                 verbose_name=_('Text-to-Speech language'))
    description = models.TextField(null=True, blank=True,
                                   verbose_name=_('description'))
    created_date = models.DateTimeField(auto_now_add=True,
                                        verbose_name=_('date'))
    updated_date = models.DateTimeField(auto_now=True)

    class Meta:
        abstract = True

    def __unicode__(self):
        return u"%s" % self.name


class Survey_template(Survey_abstract):
    """
    This defines the Survey template
    """
    user = models.ForeignKey('auth.User', related_name='survey_template_user')

    class Meta:
        permissions = (
            ("view_survey_template", _('can see survey template')),
        )
        verbose_name = _("survey template")
        verbose_name_plural = _("survey templates")

    def copy_survey_template(self, campaign_id=None):
        """
        copy survey template to survey when starting campaign
        """
        new_survey_obj = Survey.objects.create(
            name=self.name,
            tts_language=self.tts_language,
            description=self.description,
            user=self.user,
            campaign_id=campaign_id)

        if campaign_id:
            # updated campaign content_type & object_id with new survey object
            survey_id = ContentType.objects.get(model='survey').id

            campaign_obj = Campaign.objects.get(id=campaign_id)
            campaign_obj.content_type_id = survey_id
            campaign_obj.object_id = new_survey_obj.id
            campaign_obj.save()

        # Copy Sections
        section_template = Section_template.objects.filter(survey=self)
        for section_temp in section_template:
            section_temp.copy_section_template(new_survey_obj)

        # Copy Sections Branching
        for section_temp in section_template:
            #get the new created section
            section = Section.objects.get(section_template=section_temp.id, survey=new_survey_obj)
            #Now add the branching for this section
            section_temp.copy_section_branching_template(section, new_survey_obj)

        return True


class Survey(Survey_abstract):
    """
    This defines the Survey
    """
    user = models.ForeignKey('auth.User', related_name='survey_user')
    campaign = models.ForeignKey(Campaign, null=True, blank=True,
                                 verbose_name=_("campaign"))

    class Meta:
        permissions = (
            ("view_survey", _('can see survey')),
            ("view_sealed_survey", _('can see sealed survey')),
            ("seal_survey", _('can seal survey')),
            ("export_survey", _('can export survey')),
            ("import_survey", _('can import survey')),
            ("view_survey_report", _('can see survey report'))
        )
        verbose_name = _("survey")
        verbose_name_plural = _("surveys")

    def __unicode__(self):
        if self.campaign:
            return u"%s (campaign: %s)" % (self.name, self.campaign)
        else:
            return u"%s" % self.name

    def create_duplicate_survey(self, campaign_obj, new_campaign):
        """create duplicate survey"""
        original_survey_id = self.id

        # make clone of survey
        self.pk = None
        self.campaign = new_campaign
        self.save()

        old_new_section_dict = {}
        section_objs = Section.objects.filter(survey_id=original_survey_id).order_by('order')
        for section_obj in section_objs:
            old_section_id = section_obj.id

            # make clone of section
            section_obj.pk = None
            section_obj.survey = self
            section_obj.save()

            old_new_section_dict[old_section_id] = section_obj.id

        for old_section_id, new_section_id in old_new_section_dict.iteritems():
            branching_objs = Branching.objects.filter(section_id=old_section_id)

            for branching_obj in branching_objs:
                new_goto_id = None
                if branching_obj.goto_id is not None:
                    new_goto_id = old_new_section_dict[branching_obj.goto_id]

                branching_obj.pk = None
                branching_obj.section_id = new_section_id
                branching_obj.goto_id = new_goto_id
                branching_obj.save()

        return self.id


class Section_abstract(Sortable):
    """This defines the question for survey

    **Attributes**:

        * ``type`` - section type
        * ``question`` - question
        * ``script`` - text that will be used for TTS
        * ``audiofile`` - audio file to be use instead of TTS
        * ``invalid_audiofile`` - audio to play when input is invalid
        * ``retries`` - amount of time to retry to get a valid input
        * ``timeout`` - time to wait for user input
        * ``key_0`` - on multi choice section, text for result on key 0
        * ``key_1`` - on multi choice section, text for result on key 1
        * ``key_2`` - on multi choice section, text for result on key 2
        * ``key_3`` - on multi choice section, text for result on key 3
        * ``key_4`` - on multi choice section, text for result on key 4
        * ``key_5`` - on multi choice section, text for result on key 5
        * ``key_6`` - on multi choice section, text for result on key 6
        * ``key_7`` - on multi choice section, text for result on key 7
        * ``key_8`` - on multi choice section, text for result on key 8
        * ``key_9`` - on multi choice section, text for result on key 9
        * ``rating_laps`` - From 1 to X, value to accept rating input
        * ``validate_number`` - check if we want to valid the input on Enter Number section
        * ``number_digits`` - Number of digits to wait for on Enter Number section
        * ``min_number`` - if validate_number the minimum number accepted
        * ``max_number`` - if validate_number the maximum number accepted
        * ``phonenumber`` - phonenumber to dialout / call transfer
        * ``completed`` - reaching this section will mark the subscriber as completed
        * ``conference`` - Conference Room
        * ``sms_text`` - text to send via SMS

    **Relationships**:

        * ``survey`` - Foreign key relationship to the Survey model.\
        Each survey question is assigned to a Survey
        * ``audio_message`` - Foreign key relationship to the AudioFile model.

    **Name of DB table**: survey_question
    """
    # select section
    type = models.IntegerField(max_length=20, choices=list(SECTION_TYPE), default=SECTION_TYPE.PLAY_MESSAGE,
                               #blank=True, null=True,
                               verbose_name=_('section type'))
    # Question is the section label, this is used in the reporting
    question = models.CharField(max_length=500, blank=False, verbose_name=_("question"),
                                help_text=_('Example: hotel service rating'))
    # Script will be used by TTS
    script = models.CharField(max_length=1000, null=True, blank=True,
        help_text=_('Example: Press a key between 1 to 5, press pound key when done or Hello {first_name} {last_name}, please press a key between 1 to 5'))
    audiofile = models.ForeignKey(AudioFile, null=True, blank=True,
                                  verbose_name=_("audio File"))
    retries = models.IntegerField(max_length=1, null=True, blank=True,
                                  verbose_name=_("retries"), default=0,
                                  help_text=_('retries until valid input'))
    timeout = models.IntegerField(max_length=2, null=True, blank=True,
                                  verbose_name=_("timeout"), default=5,
                                  help_text=_('timeout in seconds'))
    # Multi-choice
    key_0 = models.CharField(max_length=100, null=True, blank=True,
                             verbose_name=_("key") + " 0")
    key_1 = models.CharField(max_length=100, null=True, blank=True,
                             verbose_name=_("key") + " 1")
    key_2 = models.CharField(max_length=100, null=True, blank=True,
                             verbose_name=_("key") + " 2")
    key_3 = models.CharField(max_length=100, null=True, blank=True,
                             verbose_name=_("key") + " 3")
    key_4 = models.CharField(max_length=100, null=True, blank=True,
                             verbose_name=_("key") + " 4")
    key_5 = models.CharField(max_length=100, null=True, blank=True,
                             verbose_name=_("key") + " 5")
    key_6 = models.CharField(max_length=100, null=True, blank=True,
                             verbose_name=_("key") + " 6")
    key_7 = models.CharField(max_length=100, null=True, blank=True,
                             verbose_name=_("key") + " 7")
    key_8 = models.CharField(max_length=100, null=True, blank=True,
                             verbose_name=_("key") + " 8")
    key_9 = models.CharField(max_length=100, null=True, blank=True,
                             verbose_name=_("key") + " 9")
    #Rating question
    rating_laps = models.IntegerField(max_length=1, default=9, null=True, blank=True,
                                      verbose_name=_("from 1 to X"))
    #Capture Digits
    validate_number = models.BooleanField(default=True, verbose_name=_('check validity'))
    number_digits = models.IntegerField(max_length=2, null=True, blank=True,
                                        default="2", verbose_name=_("number of digits"))
    min_number = models.BigIntegerField(max_length=50, null=True, blank=True,
                                        default=0, verbose_name=_("minimum"))
    max_number = models.BigIntegerField(max_length=50, null=True, blank=True,
                                        default=99, verbose_name=_("maximum"))
    #Call Transfer
    phonenumber = models.CharField(max_length=50, null=True, blank=True,
                                   verbose_name=_("Phone Number / SIP URI"))
    #Conference Room
    conference = models.CharField(max_length=50, null=True, blank=True,
                                  verbose_name=_("conference number"))

    sms_text = models.CharField(max_length=200, null=True, blank=True,
                                help_text=_('text that will be send via SMS to the contact'))

    # if the current section means that the survey is completed
    completed = models.BooleanField(default=False, verbose_name=_('survey complete'))
    created_date = models.DateTimeField(auto_now_add=True)
    updated_date = models.DateTimeField(auto_now=True)

    sortable_by = Survey

    class Meta(Sortable.Meta):
        ordering = Sortable.Meta.ordering + ['survey']
        abstract = True

    def __unicode__(self):
        return '[%s] %s' % (self.id, self.question)

    def get_branching_count_per_section(self):
        """Get branching count per section"""
        branching_count = Branching_template.objects\
            .filter(section_id=self.id).count()
        return branching_count

    def build_dtmf_filter(self):
        """Build the dtmf filter to capture digits"""
        dtmffilter = ''
        if self.key_0 and len(self.key_0) > 0:
            dtmffilter = dtmffilter + '0'
        if self.key_1 and len(self.key_1) > 0:
            dtmffilter = dtmffilter + '1'
        if self.key_2 and len(self.key_2) > 0:
            dtmffilter = dtmffilter + '2'
        if self.key_3 and len(self.key_3) > 0:
            dtmffilter = dtmffilter + '3'
        if self.key_4 and len(self.key_4) > 0:
            dtmffilter = dtmffilter + '4'
        if self.key_5 and len(self.key_5) > 0:
            dtmffilter = dtmffilter + '5'
        if self.key_6 and len(self.key_6) > 0:
            dtmffilter = dtmffilter + '6'
        if self.key_7 and len(self.key_7) > 0:
            dtmffilter = dtmffilter + '7'
        if self.key_8 and len(self.key_8) > 0:
            dtmffilter = dtmffilter + '8'
        if self.key_9 and len(self.key_9) > 0:
            dtmffilter = dtmffilter + '9'
        return dtmffilter


class Section_template(Section_abstract):
    """
    This defines the question for survey section template
    """
    survey = models.ForeignKey(Survey_template, verbose_name=_("survey"))
    invalid_audiofile = models.ForeignKey(AudioFile, null=True, blank=True,
                                          verbose_name=_("audio invalid input"),
                                          related_name='survey_template_invalid_audiofile')

    class Meta(Sortable.Meta):
        ordering = Sortable.Meta.ordering + ['survey']
        verbose_name = _("section template")
        verbose_name_plural = _("section templates")

    def copy_section_template(self, new_survey_obj):
        """
        copy section template to section when starting campaign
        """
        Section.objects.create(
            survey_id=new_survey_obj.id,  # Survey
            section_template=self.id,
            type=self.type,
            question=self.question,
            script=self.script,
            audiofile_id=self.audiofile_id,
            retries=self.retries,
            timeout=self.timeout,
            key_0=self.key_0,
            key_1=self.key_1,
            key_2=self.key_2,
            key_3=self.key_3,
            key_4=self.key_4,
            key_5=self.key_5,
            key_6=self.key_6,
            key_7=self.key_7,
            key_8=self.key_8,
            key_9=self.key_9,
            rating_laps=self.rating_laps,
            validate_number=self.validate_number,
            number_digits=self.number_digits,
            min_number=self.min_number,
            max_number=self.max_number,
            phonenumber=self.phonenumber,
            conference=self.conference,
            sms_text=self.sms_text,
            completed=self.completed,
            order=self.order,
            invalid_audiofile_id=self.invalid_audiofile_id,
        )
        return True

    def copy_section_branching_template(self, section, new_survey_obj):
        """
        copy section template to section when starting campaign
        """
        # Get all the Branching for this section
        branching_template = Branching_template.objects\
            .filter(section=self)
        for branching_temp in branching_template:
            #copy the brancing
            branching_temp.copy_branching_template(section, new_survey_obj)
        return True


class Section(Section_abstract):
    """
    This defines the question for survey section
    """
    survey = models.ForeignKey(Survey, verbose_name=_("survey"))
    invalid_audiofile = models.ForeignKey(AudioFile, null=True, blank=True,
                                          verbose_name=_("audio invalid input"),
                                          related_name='survey_invalid_audiofile')
    #section_template_id is used to easy duplication
    section_template = models.IntegerField(max_length=10, blank=True,
                                           default=0, null=True,
                                           verbose_name=_('section template ID'))

    class Meta(Sortable.Meta):
        ordering = Sortable.Meta.ordering + ['survey']


class Branching_abstract(models.Model):
    """This defines the response of the survey section

    **Attributes**:

        * ``keys`` - Key digit (DTMF entered by the calling party)

    **Relationships**:

        * ``section`` - Foreign key relationship to the Section.\
        Each response is assigned to a Section
    """
    keys = models.CharField(max_length=150, blank=True,
                            verbose_name=_("entered value"))
    created_date = models.DateTimeField(auto_now_add=True)
    updated_date = models.DateTimeField(auto_now=True)

    class Meta:
        abstract = True

    def __unicode__(self):
        return '[%s] %s' % (self.id, self.keys)


class Branching_template(Branching_abstract):
    """
    This defines the response of the survey section
    """
    section = models.ForeignKey(Section_template,
                                related_name='Branching Template Section')
    goto = models.ForeignKey(Section_template, null=True,
                             blank=True,
                             related_name='Goto Template Section')

    class Meta():
        unique_together = ("keys", "section")
        verbose_name = _("branching template")
        verbose_name_plural = _("branching templates")

    def copy_branching_template(self, new_section, new_survey_obj):
        """
        copy branching template to branching when starting campaign
        """
        #
        goto_section = None
        if self.goto:
            goto_section = Section.objects.get(section_template=self.goto_id, survey=new_survey_obj)

        Branching.objects.create(
            keys=self.keys,
            section=new_section,
            goto=goto_section
        )
        return True


class Branching(Branching_abstract):
    """
    This defines the response of the survey section
    """
    section = models.ForeignKey(Section, related_name='Branching Section')
    goto = models.ForeignKey(Section, null=True,
                             blank=True, related_name='Goto Section')

    class Meta():
        unique_together = ("keys", "section")
        verbose_name = _("branching")
        verbose_name_plural = _("branching")


class Result(models.Model):
    """This gives survey result

    That will be difficult to scale for reporting
    One big issue is when the user update the survey in time, we need to keep
    an history somehow of the question/response

    Ideally we can try to build 2 other table, survey_track_question
    (id, question_text), survey_track_response (id, response_text)
    Where question_text / response_text is unique

    **Attributes**:

        * ``callrequest`` - Call Request
        * ``section`` - survey question
        * ``response`` - survey question's response

    **Relationships**:

        * ``campaign`` - Foreign key relationship to the Campaign model.\
        Each survey result is belonged to a Campaign
        * ``survey`` - Foreign key relationship to the Survey model.\
        Each survey question is assigned to a Survey
        * ``section`` - Foreign key relationship to the Section model.\
        Each result is assigned to a Section

    **Name of DB table**: result
    """
    callrequest = models.ForeignKey(Callrequest,
                                    blank=True, null=True,
                                    related_name='survey_callrequest')
    section = models.ForeignKey(Section, related_name='Result Section')
    response = models.CharField(max_length=150, blank=False,
                                verbose_name=_("response"))
    record_file = models.CharField(max_length=200, blank=True, default='',
                                   verbose_name=_("record File"))
    recording_duration = models.IntegerField(max_length=10, blank=True,
                                             default=0, null=True,
                                             verbose_name=_('recording duration'))
    created_date = models.DateTimeField(auto_now_add=True)

    class Meta:
        unique_together = ("callrequest", "section")

    def __unicode__(self):
        return '[%s] %s = %s' % (self.id, self.section, self.response)


class ResultAggregate(models.Model):
    """
    This gives survey result aggregate, used to display survey
    result in a more efficient way

    **Name of DB table**: result_aggregate
    """
    survey = models.ForeignKey(Survey, related_name='ResultSum Survey')
    section = models.ForeignKey(Section, related_name='ResultSum Section')
    response = models.CharField(max_length=150, blank=False, db_index=True,
                                verbose_name=_("response"))  # Orange ; Kiwi
    count = models.IntegerField(max_length=20, default=0,
                                verbose_name=_("result count"))

    created_date = models.DateTimeField(auto_now_add=True)

    class Meta:
        unique_together = ("survey", "section", "response")

    def __unicode__(self):
        return '[%s] %s = %s' % (self.id, self.section, self.response)


def post_save_add_script(sender, **kwargs):
    """A ``post_save`` signal is sent by the Contact model instance whenever
    it is going to save.

    **Logic Description**:

        * When new section is added into ``Section`` model, save the
          question & script field.
    """
    if kwargs['created']:
        obj = kwargs['instance']
        obj.script = kwargs['instance'].question
        obj.save()

        # Add default branching
        if (obj.type == SECTION_TYPE.PLAY_MESSAGE
           or obj.type == SECTION_TYPE.RECORD_MSG
           or obj.type == SECTION_TYPE.CALL_TRANSFER
           or obj.type == SECTION_TYPE.CONFERENCE
           or obj.type == SECTION_TYPE.SMS):
            Branching_template.objects.create(keys=0, section_id=obj.id, goto_id='')

        if obj.type == SECTION_TYPE.MULTI_CHOICE or \
            obj.type == SECTION_TYPE.CAPTURE_DIGITS or \
                obj.type == SECTION_TYPE.RATING_SECTION:
            Branching_template.objects.create(keys='timeout', section_id=obj.id, goto_id='')

post_save.connect(post_save_add_script, sender=Section_template)

########NEW FILE########
__FILENAME__ = survey_tags
#
# Newfies-Dialer License
# http://www.newfies-dialer.org
#
# This Source Code Form is subject to the terms of the Mozilla Public
# License, v. 2.0. If a copy of the MPL was not distributed with this file,
# You can obtain one at http://mozilla.org/MPL/2.0/.
#
# Copyright (C) 2011-2014 Star2Billing S.L.
#
# The Initial Developer of the Original Code is
# Arezqui Belaid <info@star2billing.com>
#

from django.template.defaultfilters import register
from django.utils.translation import ugettext_lazy as _
from survey.views import survey_audio_recording
from survey.models import Section_template, Branching_template
from survey.constants import SECTION_TYPE
from mod_utils.function_def import get_status_value


@register.filter(name='section_type_name')
def section_type_name(value):
    """survey section type name

    >>> section_type_name(1)
    'Play message'

    >>> section_type_name(2)
    'Multi-choice'

    >>> section_type_name(0)
    ''
    """
    return get_status_value(value, SECTION_TYPE)


@register.filter(name='que_res_string')
def que_res_string(val):
    """Modify survey result string for display

    >>> val = 'qst_1*|*ans_1'

    >>> que_res_string(val)
    '<table class="table table-striped table-bordered table-condensed"><tr><td>qst_1</td><td class="survey_result_key">ans_1</td></tr></table>'
    """
    if not val:
        return ''

    val_list = val.split("-|-")
    result_string = '<table class="table table-striped table-bordered '\
                    'table-condensed">'

    for i in val_list:
        if "*|**|*" in i:
            que_audio = i.encode('utf-8').split("*|**|*")
            if que_audio:
                new_string = '<tr><td colspan="2">%s%s</td></tr>' %\
                             (str(que_audio[0]),
                              survey_audio_recording(str(que_audio[1])))
                result_string += new_string.encode('utf-8')
        else:
            que_res = i.encode('utf-8').split("*|*")
            result_string += \
                '<tr><td>%s</td><td class="survey_result_key">%s</td></tr>' %\
                (que_res[0], que_res[1])

    result_string += '</table>'
    return result_string


@register.filter(name='running_total')
def running_total(running_list, field_name):
    return sum(d[field_name] for d in running_list)


@register.filter(name='get_branching_goto_field')
def get_branching_goto_field(section_id, selected_value):
    """
    get_branching_goto_field
    """
    section_obj = Section_template.objects.get(id=section_id)
    #We don't need a lazy translation in this case
    option_list = '<option value="">%s</option>' % _('hang up').encode('utf-8')
    section_list = Section_template.objects.filter(survey_id=section_obj.survey_id)\
        .order_by('id')
    for i in section_list:
        if i.question:
            q_string = i.question
        else:
            q_string = i.script

        if selected_value == i.id:
            option_list += '<option value="%s" selected=selected>Goto: %s</option>' % \
                           (str(i.id), (q_string))
        else:
            option_list += '<option value="%s">Goto: %s</option>' % \
                           (str(i.id), (q_string))

    return option_list


@register.filter(name='get_branching_count')
def get_branching_count(section_id, branch_id):
    """
    calculate branching count
    """
    branch_list = Branching_template.objects.values_list('id', flat=True)\
        .filter(section_id=section_id).order_by('id')
    branch_count = branch_list.count()
    # for default branching option to remove delete option
    if branch_list[0] == branch_id:
        branch_count = 0
    return branch_count


@register.simple_tag(name='link_of_survey_view')
def link_of_survey_view(survey_id):
    """
    create survey view link
    """
    link = '<a href="/module/sealed_survey_view/%s/" target="_blank" title="%s"><i class="fa fa-search"></i></a>' % \
        (survey_id, _('view sealed survey').capitalize())
    return link

########NEW FILE########
__FILENAME__ = tests
#
# Newfies-Dialer License
# http://www.newfies-dialer.org
#
# This Source Code Form is subject to the terms of the Mozilla Public
# License, v. 2.0. If a copy of the MPL was not distributed with this file,
# You can obtain one at http://mozilla.org/MPL/2.0/.
#
# Copyright (C) 2011-2014 Star2Billing S.L.
#
# The Initial Developer of the Original Code is
# Arezqui Belaid <info@star2billing.com>
#

from django.contrib.auth.models import User
from django.test import TestCase
from django.http import Http404
from django_lets_go.utils import BaseAuthenticatedClient
from django.db.models.signals import post_save
from survey.models import Survey, Survey_template, Section,\
    Section_template, Branching, Branching_template, Result, \
    ResultAggregate, post_save_add_script
from survey.forms import SurveyForm, PlayMessageSectionForm,\
    MultipleChoiceSectionForm, RatingSectionForm,\
    CaptureDigitsSectionForm, RecordMessageSectionForm,\
    CallTransferSectionForm, ScriptForm, SMSSectionForm,\
    SurveyDetailReportForm
from survey.views import survey_list, survey_add, \
    survey_change, survey_del, section_add, section_change,\
    section_script_change, section_branch_change, \
    section_branch_add, section_delete, section_script_play, \
    sealed_survey_view, survey_campaign_result, import_survey, export_survey,\
    sealed_survey_list, seal_survey
#from survey.ajax import section_sort

post_save.disconnect(post_save_add_script, sender=Section_template)


class SurveyAdminView(BaseAuthenticatedClient):
    """Test Function to check Survey, SurveyQuestion,
       SurveyResponse Admin pages
    """

    def test_admin_survey_view_list(self):
        """Test Function to check admin surveyapp list"""
        response = self.client.get('/admin/survey/survey_template/')
        self.failUnlessEqual(response.status_code, 200)

    def test_admin_survey_view_add(self):
        """Test Function to check admin surveyapp add"""
        response = self.client.get('/admin/survey/survey_template/add/')
        self.failUnlessEqual(response.status_code, 200)

    def test_admin_survey_section_view_list(self):
        """Test Function to check admin surveyquestion list"""
        response = self.client.get('/admin/survey/section_template/')
        self.failUnlessEqual(response.status_code, 200)

    def test_admin_survey_section_view_add(self):
        """Test Function to check admin surveyquestion add"""
        response = self.client.get('/admin/survey/section_template/add/')
        self.failUnlessEqual(response.status_code, 200)

    def test_admin_survey_branching_view_list(self):
        """Test Function to check admin surveyresponse list"""
        response = self.client.get('/admin/survey/branching_template/')
        self.failUnlessEqual(response.status_code, 200)

    def test_admin_survey_branching_view_add(self):
        """Test Function to check admin surveyresponse list"""
        response = self.client.get('/admin/survey/branching_template/add/')
        self.failUnlessEqual(response.status_code, 200)


class SurveyCustomerView(BaseAuthenticatedClient):
    """Test Function to check Survey, Section, Branching, Result,
       ResultAggregate Customer pages
    """

    fixtures = ['auth_user.json', 'gateway.json', 'dialer_setting.json',
                'user_profile.json',  # 'contenttype.json',
                'phonebook.json', 'contact.json',
                'dnc_list.json', 'dnc_contact.json',
                'campaign.json', 'subscriber.json',
                'callrequest.json', 'voipcall.json',
                'survey_template.json', 'survey.json',
                'section_template.json', 'section.json',
                'branching.json',
                ]

    def test_sealed_survey_view_list(self):
        """Test Function survey view list"""
        response = self.client.get('/module/sealed_survey/')
        self.assertEqual(response.status_code, 200)
        self.assertTemplateUsed(response, 'survey/sealed_survey_list.html')

        request = self.factory.get('/module/sealed_survey/')
        request.user = self.user
        request.session = {}
        response = sealed_survey_list(request)
        self.assertEqual(response.status_code, 200)

    def test_survey_view_list(self):
        """Test Function survey view list"""
        response = self.client.get('/module/survey/')
        self.assertEqual(response.status_code, 200)
        self.assertTemplateUsed(response, 'survey/survey_list.html')

        request = self.factory.get('/module/survey/')
        request.user = self.user
        request.session = {}
        response = survey_list(request)
        self.assertEqual(response.status_code, 200)

    def test_survey_view_add(self):
        """Test Function survey view add"""
        response = self.client.get('/module/survey/add/')
        self.assertTrue(response.context['form'], SurveyForm())
        self.assertEqual(response.status_code, 200)
        self.assertTemplateUsed(response, 'survey/survey_change.html')

        request = self.factory.post('/module/survey/add/', {'name': 'test_survey'}, follow=True)
        request.user = self.user
        request.session = {}
        response = survey_add(request)
        self.assertEqual(response.status_code, 302)

    def test_survey_view_update(self):
        """Test Function survey view update"""
        response = self.client.get('/module/survey/1/')
        self.assertEqual(response.status_code, 200)
        self.assertTemplateUsed(response, 'survey/survey_change.html')

        request = self.factory.post('/module/survey/1/', {'name': 'test_survey'}, follow=True)
        request.user = self.user
        request.session = {}
        response = survey_change(request, 1)
        self.assertEqual(response.status_code, 302)
        self.assertEqual(response['Location'], '/module/survey/')

        response = survey_del(request, 1)
        self.assertEqual(response.status_code, 302)

        #request = self.factory.post('/survey/1/')
        #request.user = self.user
        #request.session = {}
        #response = section_sort(request, 1, 1)
        #self.assertTrue(response)

    def test_survey_view_delete(self):
        """Test Function to check delete survey"""
        request = self.factory.get('/module/survey/del/1/')
        request.user = self.user
        request.session = {}
        response = survey_del(request, 1)
        self.assertEqual(response.status_code, 302)

        request = self.factory.post('/module/survey/del/', {'select': '1'})
        request.user = self.user
        request.session = {}
        response = survey_del(request, 0)
        self.assertEqual(response['Location'], '/module/survey/')
        self.assertEqual(response.status_code, 302)

    def test_survey_section_view_add(self):
        """Test Function survey section add"""
        #self.survey = Survey.objects.get(pk=1)
        request = self.factory.get('/section/add/?survey_id=1')
        request.user = self.user
        request.session = {}
        response = section_add(request)
        self.assertEqual(response.status_code, 200)

        request = self.factory.post('/section/add/?survey_id=1',
            {'type': 1, 'question': 'xyz', 'add': 'true'}, follow=True)
        request.user = self.user
        request.session = {}
        response = section_add(request)
        self.assertEqual(response.status_code, 200)

        request = self.factory.post('/section/add/?survey_id=1',
            {'type': 1, 'question': 'xyz'}, follow=True)
        request.user = self.user
        request.session = {}
        response = section_add(request)
        self.assertEqual(response.status_code, 200)

        request = self.factory.post('/section/add/?survey_id=1',
            {'type': 2, 'question': 'xyz', 'add': 'true',
             'key_0': 'apple'}, follow=True)
        request.user = self.user
        request.session = {}
        response = section_add(request)
        self.assertEqual(response.status_code, 200)

        request = self.factory.post('/section/add/?survey_id=1',
            {'type': 2, 'question': 'xyz',
             'key_0': 'apple'}, follow=True)
        request.user = self.user
        request.session = {}
        response = section_add(request)
        self.assertEqual(response.status_code, 200)

        request = self.factory.post('/section/add/?survey_id=1',
            {'type': 3, 'question': 'xyz', 'add': 'true',
             'rating_laps': 5}, follow=True)
        request.user = self.user
        request.session = {}
        response = section_add(request)
        self.assertEqual(response.status_code, 200)

        request = self.factory.post('/section/add/?survey_id=1',
            {'type': 3, 'question': 'xyz',
             'rating_laps': 5}, follow=True)
        request.user = self.user
        request.session = {}
        response = section_add(request)
        self.assertEqual(response.status_code, 200)

        request = self.factory.post('/section/add/?survey_id=1',
            {'type': 4, 'question': 'xyz', 'add': 'true',
             'number_digits': 2,
             'min_number': 1}, follow=True)
        request.user = self.user
        request.session = {}
        response = section_add(request)
        self.assertEqual(response.status_code, 200)

        request = self.factory.post('/section/add/?survey_id=1',
            {'type': 4, 'question': 'xyz',
             'number_digits': 2,
             'min_number': 1}, follow=True)
        request.user = self.user
        request.session = {}
        response = section_add(request)
        self.assertEqual(response.status_code, 200)

        request = self.factory.post('/section/add/?survey_id=1',
            {'type': 5, 'question': 'xyz', 'add': 'true'}, follow=True)
        request.user = self.user
        request.session = {}
        response = section_add(request)
        self.assertEqual(response.status_code, 200)

        request = self.factory.post('/section/add/?survey_id=1',
            {'type': 5, 'question': 'xyz'}, follow=True)
        request.user = self.user
        request.session = {}
        response = section_add(request)
        self.assertEqual(response.status_code, 200)

        request = self.factory.post('/section/add/?survey_id=1',
            {'type': 6, 'question': 'xyz', 'add': 'true'}, follow=True)
        request.user = self.user
        request.session = {}
        response = section_add(request)
        self.assertEqual(response.status_code, 200)

        request = self.factory.post('/section/add/?survey_id=1',
            {'type': 6, 'question': 'xyz'}, follow=True)
        request.user = self.user
        request.session = {}
        response = section_add(request)
        self.assertEqual(response.status_code, 200)

    def test_survey_section_view_update(self):
        """Test Function survey section update"""
        #self.survey = Survey.objects.get(pk=1)
        request = self.factory.get('/section/1/')
        request.user = self.user
        request.session = {}
        response = section_change(request, 1)
        self.assertEqual(response.status_code, 200)

        request = self.factory.post('/section/1/',
            {'type': 1, 'question': 'xyz', 'update': 'true'}, follow=True)
        request.user = self.user
        request.session = {}
        response = section_change(request, 1)
        self.assertEqual(response.status_code, 200)

        request = self.factory.post('/section/1/',
            {'type': 1, 'question': 'xyz'}, follow=True)
        request.user = self.user
        request.session = {}
        response = section_change(request, 1)
        self.assertEqual(response.status_code, 200)

        request = self.factory.post('/section/1/',
            {'type': 2, 'question': 'xyz', 'update': 'true',
             'key_0': 'apple'}, follow=True)
        request.user = self.user
        request.session = {}
        response = section_change(request, 1)
        self.assertEqual(response.status_code, 200)

        request = self.factory.post('/section/1/',
            {'type': 2, 'question': 'xyz',
             'key_0': 'apple'}, follow=True)
        request.user = self.user
        request.session = {}
        response = section_change(request, 1)
        self.assertEqual(response.status_code, 200)

        request = self.factory.post('/section/1/',
            {'type': 3, 'question': 'xyz', 'update': 'true',
             'rating_laps': 5}, follow=True)
        request.user = self.user
        request.session = {}
        response = section_change(request, 1)
        self.assertEqual(response.status_code, 200)

        request = self.factory.post('/section/1/',
            {'type': 3, 'question': 'xyz',
             'rating_laps': 5}, follow=True)
        request.user = self.user
        request.session = {}
        response = section_change(request, 1)
        self.assertEqual(response.status_code, 200)

        request = self.factory.post('/section/1/',
            {'type': 4, 'question': 'xyz', 'update': 'true',
             'number_digits': 2,
             'min_number': 1}, follow=True)
        request.user = self.user
        request.session = {}
        response = section_change(request, 1)
        self.assertEqual(response.status_code, 200)

        request = self.factory.post('/section/1/',
            {'type': 4, 'question': 'xyz',
             'number_digits': 2,
             'min_number': 1}, follow=True)
        request.user = self.user
        request.session = {}
        response = section_change(request, 1)
        self.assertEqual(response.status_code, 200)

        request = self.factory.post('/section/1/',
            {'type': 5, 'question': 'xyz', 'update': 'true'}, follow=True)
        request.user = self.user
        request.session = {}
        response = section_change(request, 1)
        self.assertEqual(response.status_code, 200)

        request = self.factory.post('/section/1/',
            {'type': 5, 'question': 'xyz'}, follow=True)
        request.user = self.user
        request.session = {}
        response = section_change(request, 1)
        self.assertEqual(response.status_code, 200)

        request = self.factory.post('/section/1/',
            {'type': 6, 'question': 'xyz', 'update': 'true'}, follow=True)
        request.user = self.user
        request.session = {}
        response = section_change(request, 1)
        self.assertEqual(response.status_code, 200)

        request = self.factory.post('/section/1/',
            {'type': 6, 'question': 'xyz'}, follow=True)
        request.user = self.user
        request.session = {}
        response = section_change(request, 1)
        self.assertEqual(response.status_code, 200)

        request = self.factory.post('/section/1/',
            {'type': 10, 'question': 'test question',
             'update': 'true', 'sms_text': 'this is test sms'}, follow=True)
        request.user = self.user
        request.session = {}
        response = section_change(request, 1)
        self.assertEqual(response.status_code, 200)

        request = self.factory.post('/section/1/',
            {'type': 10, 'question': 'xyz', 'sms_text': 'this is test sms'},
            follow=True)
        request.user = self.user
        request.session = {}
        response = section_change(request, 1)
        self.assertEqual(response.status_code, 200)

    def test_section_script_play(self):
        """Test Function survey section script play"""
        request = self.factory.get('/section/script_play/1/')
        request.user = self.user
        request.session = {}
        response = section_script_play(request, 1)
        self.assertEqual(response.status_code, 200)

        response = self.client.get('/section/script_play/1/')
        self.assertRaises(Http404)

    def test_survey_section_view_delete(self):
        """Test Function survey section delete"""
        request = self.factory.post('/section/1/?delete=true',
            {}, follow=True)
        request.user = self.user
        request.session = {}
        response = section_change(request, 1)
        self.assertEqual(response.status_code, 200)

    def test_survey_section_delete(self):
        """Test Function survey section delete"""
        request = self.factory.post('/section/1/?delete=true',
            {}, follow=True)
        request.user = self.user
        request.session = {}
        response = section_delete(request, 1)
        self.assertEqual(response.status_code, 302)

    def test_survey_view(self):
        """Test Function survey view"""
        request = self.factory.get('/sealed_survey_view/1/')
        request.user = self.user
        request.session = {}
        response = sealed_survey_view(request, 1)
        self.assertEqual(response.status_code, 200)

    def test_section_script_change(self):
        """Test Function section script update"""
        request = self.factory.get('/section/script/1/')
        request.user = self.user
        request.session = {}
        response = section_script_change(request, 1)
        self.assertEqual(response.status_code, 200)

        request = self.factory.post('/section/script/1/',
            {'script': 'xyz', 'section': 1}, follow=True)
        request.user = self.user
        request.session = {}
        response = section_script_change(request, 1)
        self.assertEqual(response.status_code, 302)

    def test_section_branch_add(self):
        """Test Function section branching add"""
        self.section_template = Section_template.objects.get(pk=1)
        self.goto = Section_template.objects.get(pk=1)

        request = self.factory.get('/section/branch/add/?section_id=1')
        request.user = self.user
        request.session = {}
        response = section_branch_add(request)
        self.assertEqual(response.status_code, 200)

        #request = self.factory.get('/section/branch/add/?section_id=1',
        #    {'keys': 1, 'section': 1,
        #     'goto': 1})
        #request.user = self.user
        #request.session = {}
        #response = section_branch_add(request)
        #self.assertEqual(response.status_code, 200)

    def test_section_branch_change(self):
        """Test Function section branching update"""
        self.section = Section_template.objects.get(pk=1)
        self.goto = Section_template.objects.get(pk=2)

        branching_obj = Branching_template.objects.create(
            keys=34,
            section=self.section,
            goto=self.goto
        )

        request = self.factory.get('/section/branch/' + str(branching_obj.id) + '/')
        request.user = self.user
        request.session = {}
        response = section_branch_change(request, branching_obj.id)
        self.assertEqual(response.status_code, 200)

        request = self.factory.post('/section/branch/'+str(branching_obj.id)+'/',
            {'keys': 1, 'section': self.section,
             'goto': self.goto}, follow=True)
        request.user = self.user
        request.session = {}
        response = section_branch_change(request, branching_obj.id)
        self.assertEqual(response.status_code, 200)

        request = self.factory.post('/section/branch/'+str(branching_obj.id)+'/?delete=true',
            {'keys': 1, 'section': self.section,
             'goto': self.goto}, follow=True)
        request.user = self.user
        request.session = {}
        response = section_branch_change(request, branching_obj.id)
        self.assertEqual(response.status_code, 302)

    def test_survey_campaign_result(self):
        request = self.factory.get('/survey_campaign_result/1/')
        request.user = self.user
        request.session = {}
        response = survey_campaign_result(request, 1)
        self.assertEqual(response.status_code, 200)

    def test_export_survey(self):
        request = self.factory.get('/export_survey/1/')
        request.user = self.user
        request.session = {}
        response = export_survey(request, 1)
        self.assertEqual(response.status_code, 200)

    def test_import_survey(self):
        request = self.factory.get('/import_survey/')
        request.user = self.user
        request.session = {}
        response = import_survey(request)
        self.assertEqual(response.status_code, 200)

        response = self.client.post('/module/import_survey/',
            data={'survey_file': '', 'name': 'new survey'})
        self.assertEqual(response.status_code, 200)

    def test_seal_survey(self):
        request = self.factory.get('/module/seal_survey/1/')
        request.user = self.user
        request.session = {}
        response = seal_survey(request, 1)
        self.assertEqual(response.status_code, 200)


class SurveyModel(TestCase):
    """Test Survey, Section, Branching, Result, ResultAggregate Model"""

    fixtures = ['auth_user.json', 'gateway.json', 'dialer_setting.json',
                'user_profile.json',  # 'contenttype.json',
                'phonebook.json', 'contact.json',
                'dnc_list.json', 'dnc_contact.json',
                'campaign.json', 'subscriber.json',
                'callrequest.json', 'voipcall.json',
                'survey_template.json', 'survey.json',
                'section_template.json', 'section.json',
                'branching.json',
                ]

    def setUp(self):
        self.user = User.objects.get(username='admin')

        # Survey_template model
        self.survey_template = Survey_template(
            name='test_survey',
            user=self.user,
        )
        self.survey_template.save()

        # Survey model
        self.survey = Survey(
            name='test_survey',
            user=self.user,
        )
        self.survey.save()
        self.assertEqual(self.survey.__unicode__(), u'test_survey')

        # Section_template
        self.section_template = Section_template.objects.get(pk=1)
        self.section_template.survey.name = 'New Survey'
        self.section_template.save()

        # Section model
        self.section = Section.objects.get(pk=1)
        self.section.save()
        self.assertTrue(self.section.__unicode__())

        # Branching_template model
        self.branching_template = Branching_template(
            keys=5,
            section=self.section_template,
        )
        self.branching_template.save()

        # Branching model
        self.branching = Branching(
            keys=5,
            section=self.section,
        )
        self.branching.save()
        self.assertTrue(self.branching.__unicode__())

        # Result model
        self.result = Result(
            section=self.section,
            callrequest_id=1,
            response='apple'
        )
        self.result.save()
        self.assertEqual(
            self.result.__unicode__(), '[1] [1] call transfer = apple')

        # ResultAggregate model
        self.result_aggregate = ResultAggregate(
            survey=self.survey,
            section=self.section,
            count=1,
            response='apple'
        )
        self.result_aggregate.save()
        self.assertEqual(
            self.result_aggregate.__unicode__(), '[1] [1] call transfer = apple')

    def test_survey_forms(self):
        self.assertEqual(self.survey_template.name, "test_survey")
        #self.assertEqual(self.section_template.survey, self.survey_template)
        self.assertEqual(self.branching_template.section, self.section_template)
        self.assertEqual(self.result.section, self.section)

        form = PlayMessageSectionForm(self.user, instance=self.section_template)
        obj = form.save(commit=False)
        obj.question = "test question"
        obj.type = 1
        obj.survey = self.survey_template
        obj.save()

        form = MultipleChoiceSectionForm(self.user, instance=self.section_template)
        obj = form.save(commit=False)
        obj.type = 2
        obj.question = "test question"
        obj.key_0 = "apple"
        obj.survey = self.survey_template
        obj.save()

        form = RatingSectionForm(self.user,
                                 instance=self.section_template)
        obj = form.save(commit=False)
        obj.type = 3
        obj.question = "test question"
        obj.rating_laps = 5
        obj.survey_template = self.survey_template
        obj.save()

        form = CaptureDigitsSectionForm(self.user,
                                        instance=self.section_template)
        obj = form.save(commit=False)
        obj.type = 4
        obj.question = "test question"
        obj.number_digits = 2
        obj.min_number = 1
        obj.max_number = 100
        obj.survey = self.survey_template
        obj.save()

        form = RecordMessageSectionForm(self.user)
        obj = form.save(commit=False)
        obj.type = 5
        obj.question = "test question"
        obj.survey = self.survey_template
        obj.save()

        form = CallTransferSectionForm(self.user)
        obj = form.save(commit=False)
        obj.type = 6
        obj.question = "test question"
        obj.phonenumber = 1234567890
        obj.survey = self.survey_template
        obj.save()

        form = SMSSectionForm(self.user)
        obj = form.save(commit=False)
        obj.type = 10
        obj.question = "sms question"
        obj.sms_text = "this is test sms"
        obj.survey = self.survey_template
        obj.save()

        form = ScriptForm()
        obj = form.save(commit=False)
        obj.script = 'xyz'
        obj.survey = self.survey_template
        obj.save()

        form = SurveyDetailReportForm(self.user)

    def teardown(self):
        self.survey_template.delete()
        self.survey.delete()
        self.section_template.delete()
        self.section.delete()
        self.branching_template.delete()
        self.branching.delete()
        self.result.delete()
        self.result_aggregate.delete()

########NEW FILE########
__FILENAME__ = urls
#
# Newfies-Dialer License
# http://www.newfies-dialer.org
#
# This Source Code Form is subject to the terms of the Mozilla Public
# License, v. 2.0. If a copy of the MPL was not distributed with this file,
# You can obtain one at http://mozilla.org/MPL/2.0/.
#
# Copyright (C) 2011-2014 Star2Billing S.L.
#
# The Initial Developer of the Original Code is
# Arezqui Belaid <info@star2billing.com>
#

from django.conf.urls import patterns


urlpatterns = patterns('survey.views',
    # Survey urls
    (r'^module/survey/$', 'survey_list'),
    (r'^module/survey/add/$', 'survey_add'),
    (r'^module/sealed_survey_view/(.+)/$', 'sealed_survey_view'),
    (r'^module/survey/del/(.+)/$', 'survey_del'),
    (r'^module/survey/(.+)/$', 'survey_change'),
    (r'^module/export_survey/(.+)/$', 'export_survey'),
    (r'^module/import_survey/$', 'import_survey'),
    (r'^module/sealed_survey/$', 'sealed_survey_list'),
    (r'^module/seal_survey/(.+)/$', 'seal_survey'),

    # Section urls
    (r'^section/add/$', 'section_add'),
    (r'^section/branch/add/$', 'section_branch_add'),
    (r'^section/delete/(?P<id>\w+)/$', 'section_delete'),
    (r'^section/(?P<id>\w+)/$', 'section_change'),
    (r'^section/script/(?P<id>\w+)/$', 'section_script_change'),
    (r'^section/script_play/(?P<id>\w+)/$', 'section_script_play'),
    (r'^section/branch/(?P<id>\w+)/$', 'section_branch_change'),

    # Survey Report urls
    (r'^survey_report/$', 'survey_report'),
    (r'^export_surveycall_report/$', 'export_surveycall_report'),
    (r'^survey_campaign_result/(?P<id>\w+)/$', 'survey_campaign_result'),
)

########NEW FILE########
__FILENAME__ = views
#
# Newfies-Dialer License
# http://www.newfies-dialer.org
#
# This Source Code Form is subject to the terms of the Mozilla Public
# License, v. 2.0. If a copy of the MPL was not distributed with this file,
# You can obtain one at http://mozilla.org/MPL/2.0/.
#
# Copyright (C) 2011-2014 Star2Billing S.L.
#
# The Initial Developer of the Original Code is
# Arezqui Belaid <info@star2billing.com>
#

from django.conf import settings
from django.contrib.auth.decorators import login_required,\
    permission_required
from django.http import HttpResponseRedirect, HttpResponse, Http404
from django.shortcuts import render_to_response, get_object_or_404
from django.db.models import Sum, Avg, Count
from django.template.context import RequestContext
from django.utils.translation import ugettext as _
from django.db.models.signals import post_save
from django.utils.timezone import utc
from dialer_cdr.models import VoIPCall
from dialer_cdr.constants import VOIPCALL_DISPOSITION
from survey.models import Survey_template, Survey, Section_template, Section,\
    Branching_template, Branching, Result, ResultAggregate
from survey.forms import SurveyForm, PlayMessageSectionForm,\
    MultipleChoiceSectionForm, RatingSectionForm,\
    CaptureDigitsSectionForm, RecordMessageSectionForm,\
    CallTransferSectionForm, BranchingForm, ScriptForm,\
    SMSSectionForm, SurveyDetailReportForm, SurveyFileImport,\
    ConferenceSectionForm, SealSurveyForm
from survey.constants import SECTION_TYPE, SURVEY_COLUMN_NAME, SURVEY_CALL_RESULT_NAME,\
    SEALED_SURVEY_COLUMN_NAME
from survey.models import post_save_add_script
from survey.function_def import getaudio_acapela
from django_lets_go.common_functions import striplist, ceil_strdate, getvar, unset_session_var,\
    get_pagination_vars
from mod_utils.helper import Export_choice
from datetime import datetime
from dateutil.relativedelta import relativedelta
import subprocess
import hashlib
import tablib
import csv
import os

testdebug = False
redirect_url_to_survey_list = '/module/survey/'


@permission_required('survey.view_survey', login_url='/')
@login_required
def survey_list(request):
    """SurveyApp list for the logged in user

    **Attributes**:

        * ``template`` - survey/list.html

    **Logic Description**:

        * List all surveys which belong to the logged in user.
    """
    sort_col_field_list = ['id', 'name', 'updated_date']
    pag_vars = get_pagination_vars(request, sort_col_field_list, default_sort_field='id')
    survey_list = Survey_template.objects.filter(user=request.user).order_by(pag_vars['sort_order'])
    data = {
        'survey_list': survey_list,
        'total_survey': survey_list.count(),
        'SURVEY_COLUMN_NAME': SURVEY_COLUMN_NAME,
        'col_name_with_order': pag_vars['col_name_with_order'],
        'msg': request.session.get('msg'),
    }
    request.session['msg'] = ''
    request.session['error_msg'] = ''
    return render_to_response('survey/survey_list.html', data, context_instance=RequestContext(request))


@permission_required('survey.add_survey', login_url='/')
@login_required
def survey_add(request):
    """Add new Survey for the logged in user

    **Attributes**:

        * ``form`` - SurveyForm
        * ``template`` - survey/change.html

    **Logic Description**:

        * Add a new survey which will belong to the logged in user
          via the SurveyForm & get redirected to the survey list
    """
    form = SurveyForm(request.POST or None)
    if form.is_valid():
        obj = form.save(user=request.user)
        request.session["msg"] = _('"%(name)s" added.') % {'name': request.POST['name']}
        return HttpResponseRedirect(redirect_url_to_survey_list + '%s/' % (obj.id))
    data = {
        'form': form,
        'action': 'add',
    }
    return render_to_response('survey/survey_change.html', data, context_instance=RequestContext(request))


def delete_section_branching(survey):
    """delete sections as well as branching
    which are belong to survey"""
    section_list = Section_template.objects.filter(survey=survey)
    if section_list:
        for section in section_list:
            branching_list = Branching_template.objects.filter(section=section)
            if branching_list:
                branching_list.delete()
    section_list.delete()
    return True


@permission_required('survey.delete_survey', login_url='/')
@login_required
def survey_del(request, object_id):
    """Delete a survey for a logged in user

    **Attributes**:

        * ``object_id`` - Selected survey object
        * ``object_list`` - Selected survey objects

    **Logic Description**:

        * Delete selected the survey from the survey list
    """
    if int(object_id) != 0:
        # When object_id is not 0
        survey = get_object_or_404(Survey_template, pk=object_id, user=request.user)
        # 1) delete survey
        request.session["msg"] = _('"%(name)s" is deleted.') % {'name': survey.name}
        # delete sections as well as branching which are belong to survey
        delete_section_branching(survey)
        survey.delete()
    else:
        # When object_id is 0 (Multiple records delete)
        values = request.POST.getlist('select')
        values = ", ".join(["%s" % el for el in values])
        try:
            # 1) delete survey
            survey_list = Survey_template.objects.filter(user=request.user).extra(where=['id IN (%s)' % values])
            if survey_list:
                for survey in survey_list:
                    delete_section_branching(survey)

            request.session["msg"] = _('%(count)s survey(s) are deleted.') % {'count': survey_list.count()}
            survey_list.delete()
        except:
            raise Http404

    return HttpResponseRedirect(redirect_url_to_survey_list)


def section_add_form(request, Form, survey, section_type):
    """ To add section object via form

    **Attributes**:

        * ``request`` - Request variable
        * ``Form`` - PlayMessageSectionForm, MultipleChoiceSectionForm,
                     CaptureDigitsSectionForm etc...
        * ``section_type`` - value from SECTION_TYPE list
        * ``survey`` - Survey object

    **Logic Description**:

        * Add section object via section form & section_type
    """
    save_tag = False
    new_obj = ''

    form = Form(request.user, initial={'survey': survey, 'type': section_type})
    if request.POST.get('add'):
        form = Form(request.user, request.POST, initial={'survey': survey, 'type': section_type})
        if form.is_valid():
            new_obj = form.save()
            request.session["msg"] = _('section is added successfully.')
            save_tag = True
        else:
            request.session["err_msg"] = True

    if request.POST.get('add') is None:
        request.session["err_msg"] = True

    data = {
        'form': form,
        'save_tag': save_tag,
        'new_obj': new_obj,
    }
    return data


@permission_required('survey.add_section', login_url='/')
@login_required
def section_add(request):
    """Add new Survey for the logged in user

    **Attributes**:

        * ``template`` - survey/section_change.html

    **Logic Description**:

        * Add a new survey which will belong to the logged in user
          via the SurveyForm & get redirected to the survey list
    """
    survey_id = request.GET.get('survey_id')
    survey = Survey_template.objects.get(pk=survey_id)
    form = PlayMessageSectionForm(request.user, initial={'survey': survey})

    request.session['err_msg'] = ''

    if request.method == 'POST':
        # Play message
        if int(request.POST.get('type')) == SECTION_TYPE.PLAY_MESSAGE:
            form_data = section_add_form(request, PlayMessageSectionForm,
                                         survey, SECTION_TYPE.PLAY_MESSAGE)

        # hangup
        if int(request.POST.get('type')) == SECTION_TYPE.HANGUP_SECTION:
            form_data = section_add_form(request, PlayMessageSectionForm,
                                         survey, SECTION_TYPE.HANGUP_SECTION)

        # DNC
        if int(request.POST.get('type')) == SECTION_TYPE.DNC:
            form_data = section_add_form(request, PlayMessageSectionForm,
                                         survey, SECTION_TYPE.DNC)

        # Multiple Choice Section
        if int(request.POST.get('type')) == SECTION_TYPE.MULTI_CHOICE:
            form_data = section_add_form(request, MultipleChoiceSectionForm,
                                         survey, SECTION_TYPE.MULTI_CHOICE)

        # Rating Section
        if int(request.POST.get('type')) == SECTION_TYPE.RATING_SECTION:
            form_data = section_add_form(request, RatingSectionForm,
                                         survey, SECTION_TYPE.RATING_SECTION)

        # Capture Digits Section
        if int(request.POST.get('type')) == SECTION_TYPE.CAPTURE_DIGITS:
            form_data = section_add_form(request, CaptureDigitsSectionForm,
                                         survey, SECTION_TYPE.CAPTURE_DIGITS)

        # Record Message Section
        if int(request.POST.get('type')) == SECTION_TYPE.RECORD_MSG:
            form_data = section_add_form(request, RecordMessageSectionForm,
                                         survey, SECTION_TYPE.RECORD_MSG)

        # Call transfer Section
        if int(request.POST.get('type')) == SECTION_TYPE.CONFERENCE:
            form_data = section_add_form(request, ConferenceSectionForm,
                                         survey, SECTION_TYPE.CONFERENCE)

        # Call transfer Section
        if int(request.POST.get('type')) == SECTION_TYPE.CALL_TRANSFER:
            form_data = section_add_form(request, CallTransferSectionForm,
                                         survey, SECTION_TYPE.CALL_TRANSFER)

        # SMS Section
        if int(request.POST.get('type')) == SECTION_TYPE.SMS:
            form_data = section_add_form(request, SMSSectionForm, survey, SECTION_TYPE.SMS)

        if form_data.get('save_tag'):
            return HttpResponseRedirect(redirect_url_to_survey_list + '%s/#row%s'
                                        % (form_data['new_obj'].survey_id, form_data['new_obj'].id))
        else:
            form = form_data['form']

    data = {
        'form': form,
        'survey_id': survey_id,
        'err_msg': request.session.get('err_msg'),
        'action': 'add',
        'SECTION_TYPE': SECTION_TYPE,
    }
    request.session["msg"] = ''
    request.session['err_msg'] = ''
    return render_to_response('survey/section_change.html', data, context_instance=RequestContext(request))


def section_update_form(request, Form, section_type, section_instance):
    """To update section instance via form

    **Attributes**:

        * ``request`` - Request variable
        * ``Form`` - PlayMessageSectionForm, MultipleChoiceSectionForm,
                     CaptureDigitsSectionForm etc...
        * ``section_type`` - value from SECTION_TYPE list
        * ``section_instance`` - section object

    **Logic Description**:

        * Update section object via section form & section_type

    """
    save_tag = False
    form = Form(request.user, instance=section_instance, initial={'type': section_type})
    if request.POST.get('update'):
        form = Form(request.user, request.POST, instance=section_instance, initial={'type': section_type})
        if form.is_valid():
            form.save()
            request.session["msg"] = _('section updated.')
            save_tag = True
        else:
            request.session["err_msg"] = True

    if request.POST.get('update') is None:
        request.session["err_msg"] = True

    data = {
        'form': form,
        'save_tag': save_tag,
    }
    return data


@permission_required('survey.change_section', login_url='/')
@login_required
def section_change(request, id):
    """Update survey question for the logged in user

    **Attributes**:

        * ``template`` - survey/section_change.html

    **Logic Description**:

        * update section object via section_update_form function
    """
    section = get_object_or_404(Section_template, pk=int(id), survey__user=request.user)

    if (section.type == SECTION_TYPE.PLAY_MESSAGE
       or section.type == SECTION_TYPE.HANGUP_SECTION
       or section.type == SECTION_TYPE.DNC):
        #PLAY_MESSAGE, HANGUP_SECTION & DNC
        form = PlayMessageSectionForm(request.user, request.POST or None, instance=section)
    elif section.type == SECTION_TYPE.MULTI_CHOICE:
        #MULTI_CHOICE
        form = MultipleChoiceSectionForm(request.user, request.POST or None, instance=section)
    elif section.type == SECTION_TYPE.RATING_SECTION:
        #RATING_SECTION
        form = RatingSectionForm(request.user, request.POST or None, instance=section)
    elif section.type == SECTION_TYPE.CAPTURE_DIGITS:
        #CAPTURE_DIGITS
        form = CaptureDigitsSectionForm(request.user, request.POST or None, instance=section)
    elif section.type == SECTION_TYPE.RECORD_MSG:
        #RECORD_MSG
        form = RecordMessageSectionForm(request.user, request.POST or None, instance=section)
    elif section.type == SECTION_TYPE.CONFERENCE:
        #CONFERENCE
        form = ConferenceSectionForm(request.user, request.POST or None, instance=section)
    elif section.type == SECTION_TYPE.CALL_TRANSFER:
        #CALL_TRANSFER
        form = CallTransferSectionForm(request.user, request.POST or None, instance=section)
    elif section.type == SECTION_TYPE.SMS:
        #SMS
        form = SMSSectionForm(request.user, request.POST or None, instance=section)

    request.session['err_msg'] = ''

    if request.method == 'POST' and request.POST.get('type'):
        # Play message or Hangup Section or DNC
        if (int(request.POST.get('type')) == SECTION_TYPE.PLAY_MESSAGE or
           int(request.POST.get('type')) == SECTION_TYPE.HANGUP_SECTION or
           int(request.POST.get('type')) == SECTION_TYPE.DNC):
            form_data = section_update_form(
                request, PlayMessageSectionForm, SECTION_TYPE.PLAY_MESSAGE, section)

        # Multiple Choice Section
        if int(request.POST.get('type')) == SECTION_TYPE.MULTI_CHOICE:
            form_data = section_update_form(
                request, MultipleChoiceSectionForm, SECTION_TYPE.MULTI_CHOICE, section)

        # Rating Section
        if int(request.POST.get('type')) == SECTION_TYPE.RATING_SECTION:
            form_data = section_update_form(
                request, RatingSectionForm, SECTION_TYPE.RATING_SECTION, section)

        # Capture Digits Section
        if int(request.POST.get('type')) == SECTION_TYPE.CAPTURE_DIGITS:
            form_data = section_update_form(
                request, CaptureDigitsSectionForm, SECTION_TYPE.CAPTURE_DIGITS, section)

        # Record Message Section Section
        if int(request.POST.get('type')) == SECTION_TYPE.RECORD_MSG:
            form_data = section_update_form(
                request, RecordMessageSectionForm, SECTION_TYPE.RECORD_MSG, section)

        # Call Transfer Section
        if int(request.POST.get('type')) == SECTION_TYPE.CALL_TRANSFER:
            form_data = section_update_form(
                request, CallTransferSectionForm, SECTION_TYPE.CALL_TRANSFER, section)

        # Conference Section
        if int(request.POST.get('type')) == SECTION_TYPE.CONFERENCE:
            form_data = section_update_form(
                request, ConferenceSectionForm, SECTION_TYPE.CONFERENCE, section)

        # SMS
        if int(request.POST.get('type')) == SECTION_TYPE.SMS:
            form_data = section_update_form(
                request, SMSSectionForm, SECTION_TYPE.SMS, section)

        if form_data.get('save_tag'):
            return HttpResponseRedirect(redirect_url_to_survey_list + '%s/#row%s'
                                        % (section.survey_id, section.id))
        else:
            form = form_data['form']

    data = {
        'form': form,
        'survey_id': section.survey_id,
        'section_id': section.id,
        'err_msg': request.session.get('err_msg'),
        'action': 'update',
        'SECTION_TYPE': SECTION_TYPE,
    }
    request.session["msg"] = ''
    request.session['err_msg'] = ''
    return render_to_response('survey/section_change.html', data, context_instance=RequestContext(request))


@permission_required('survey.delete_section', login_url='/')
@login_required
def section_delete(request, id):
    """Delete section and branching records
    """
    section = get_object_or_404(Section_template, pk=id, survey__user=request.user)
    if request.GET.get('delete'):
        # perform delete
        survey_id = section.survey_id

        # Re-order section while deleting one section
        section_list_reorder = Section_template.objects.filter(survey=section.survey).exclude(pk=id)
        for reordered in section_list_reorder:
            if section.order < reordered.order:
                reordered.order = reordered.order - 1
                reordered.save()

        # 1) delete branch belonging to a section
        branching_list = Branching_template.objects.filter(section=section)
        if branching_list:
            branching_list.delete()

        # 2) delete section
        section.delete()
        request.session["msg"] = _('section is deleted successfully.')
        return HttpResponseRedirect(redirect_url_to_survey_list + '%s/' % (survey_id))

    data = {
        'section_type': section.type,
        'section_id': section.id,
    }
    return render_to_response('survey/section_delete_confirmation.html', data, context_instance=RequestContext(request))


@permission_required('survey.change_section', login_url='/')
@login_required
def section_script_change(request, id):
    """Update survey question for the logged in user

    **Attributes**:

        * ``form`` - ScriptForm
        * ``template`` - survey/section_script_change.html
    """
    section = get_object_or_404(Section_template, pk=id, survey__user=request.user)
    form = ScriptForm(request.POST or None, instance=section)
    if request.method == 'POST':
        if form.is_valid():
            obj = form.save()
            request.session["msg"] = _('script updated.')
            return HttpResponseRedirect(redirect_url_to_survey_list + '%s/#row%s' % (obj.survey_id, obj.id))
        else:
            request.session["err_msg"] = True

    data = {
        'form': form,
        'survey_id': section.survey_id,
        'section_id': section.id,
        'err_msg': request.session.get('err_msg'),
        'action': 'update',
    }
    request.session["msg"] = ''
    request.session['err_msg'] = ''
    return render_to_response('survey/section_script_change.html', data, context_instance=RequestContext(request))


@login_required
def section_script_play(request, id):
    """Play section  script

    **Attributes**:


    **Logic Description**:

        * Create text file from section script
        * Convert text file into wav file
    """
    section = get_object_or_404(Section_template, pk=id, survey__user=request.user)

    if section.script:
        script_text = section.script

        if settings.TTS_ENGINE == 'ACAPELA':
            #Acapela
            audio_file_path = settings.MEDIA_ROOT + '/' + getaudio_acapela(script_text, 'US')
        else:
            #Flite
            script_hexdigest = hashlib.md5(script_text).hexdigest()
            file_path = '%s/tts/flite_%s' % (settings.MEDIA_ROOT, script_hexdigest)
            audio_file_path = file_path + '.wav'
            text_file_path = file_path + '.txt'

            if not os.path.isfile(audio_file_path):
                #Write text to file
                text_file = open(text_file_path, "w")
                text_file.write(script_text)
                text_file.close()

                #Convert file
                conv = 'flite --setf duration_stretch=1.5 -voice awb -f %s -o %s' % (text_file_path, audio_file_path)
                try:
                    response = subprocess.Popen(conv.split(' '), stdout=subprocess.PIPE, stderr=subprocess.PIPE)
                    (filetype, error) = response.communicate()
                except OSError:
                    raise Http404

        if os.path.isfile(audio_file_path):
            response = HttpResponse()
            f = open(audio_file_path, 'rb')
            response['Content-Type'] = 'audio/x-wav'
            response.write(f.read())
            f.close()
            return response

    raise Http404


@permission_required('survey.add_branching', login_url='/')
@login_required
def section_branch_add(request):
    """Add branching on section for the logged in user

    **Attributes**:

        * ``form`` - BranchingForm
        * ``template`` - survey/section_branch_change.html

    **Logic Description**:

        * Add branching record via BranchingForm
    """
    request.session['msg'] = ''
    form = ''
    section_survey_id = ''
    section_type = ''
    section_id = ''
    if request.GET.get('section_id'):
        section_id = request.GET.get('section_id')
        section = Section_template.objects.get(pk=int(section_id))
        section_survey_id = section.survey_id
        section_type = section.type
        form = BranchingForm(section.survey_id, section.id, request.POST or None, initial={'section': section_id})

        if request.method == 'POST':
            if form.is_valid():
                form.save()
                request.session["msg"] = _('branching is added successfully.')
                return HttpResponseRedirect(
                    redirect_url_to_survey_list + '%s/#row%s' % (section.survey_id, section_id))
            else:
                form._errors["keys"] = _("duplicate keys with goto.")
                request.session["err_msg"] = True

    data = {
        'form': form,
        'survey_id': section_survey_id,
        'section_type': section_type,
        'section_id': section_id,
        'err_msg': request.session.get('err_msg'),
        'action': 'add',
        'SECTION_TYPE': SECTION_TYPE,
    }
    request.session["msg"] = ''
    request.session['err_msg'] = ''
    return render_to_response('survey/section_branch_change.html', data, context_instance=RequestContext(request))


@permission_required('survey.change_branching', login_url='/')
@login_required
def section_branch_change(request, id):
    """Add branching on section for the logged in user

    **Attributes**:

        * ``form`` - BranchingForm
        * ``template`` - survey/section_branch_change.html

    **Logic Description**:

        * Update branching record via BranchingForm
        * Delete branching record
    """
    request.session['msg'] = ''
    if request.GET.get('delete'):
        # perform delete
        branching_obj = get_object_or_404(Branching_template, id=int(id),
                                          section__survey__user=request.user)
        survey_id = branching_obj.section.survey_id
        section_id = branching_obj.section_id
        branching_obj.delete()
        request.session["msg"] = _('branching is deleted successfully.')
        return HttpResponseRedirect(redirect_url_to_survey_list + '%s/#row%s' % (survey_id, section_id))

    branching = get_object_or_404(Branching_template, id=int(id),
                                  section__survey__user=request.user)
    form = BranchingForm(branching.section.survey_id,
                         branching.section_id,
                         request.POST or None,
                         instance=branching)
    if request.method == 'POST':
        if form.is_valid():
            form.save()
            request.session["msg"] = _('branching updated.')
            return HttpResponseRedirect(redirect_url_to_survey_list + '%s/#row%s'
                                        % (branching.section.survey_id, branching.section_id))
        else:
            form._errors["keys"] = _("duplicate record keys with goto.")
            request.session["err_msg"] = True

    data = {
        'form': form,
        'survey_id': branching.section.survey_id,
        'section_type': branching.section.type,
        'section_id': branching.section.id,
        'branching_id': branching.id,
        'err_msg': request.session.get('err_msg'),
        'action': 'update',
        'SECTION_TYPE': SECTION_TYPE,
    }
    request.session["msg"] = ''
    request.session['err_msg'] = ''
    return render_to_response('survey/section_branch_change.html', data, context_instance=RequestContext(request))


@permission_required('survey.change_survey', login_url='/')
@login_required
def survey_change(request, object_id):
    """Update/Delete Survey for the logged in user

    **Attributes**:

        * ``object_id`` - Selected survey object
        * ``form`` - SurveyForm
        * ``template`` - survey/change.html

    **Logic Description**:

        * Update/delete selected survey from the survey list
          via SurveyForm & get redirected to survey list
    """
    survey = get_object_or_404(Survey_template, pk=object_id, user=request.user)
    section_list = Section_template.objects.filter(survey=survey).order_by('order')

    form = SurveyForm(request.POST or None, instance=survey)
    branching_list = Branching_template.objects.filter(section__survey=survey).order_by('id')

    branching_section_list = branching_list.values_list('section_id', flat=True).distinct()

    if form.is_valid():
        if request.POST.get('delete'):
            survey_del(request, object_id)
            return HttpResponseRedirect(redirect_url_to_survey_list)
        else:
            form.save()
            request.session["msg"] = _('"%(name)s" is updated.') % {'name': request.POST['name']}
            return HttpResponseRedirect(redirect_url_to_survey_list)

    data = {
        'survey_obj_id': object_id,
        'section_list': section_list,
        'branching_list': branching_list,
        'branching_section_list': branching_section_list,
        'action': 'update',
        'form': form,
        'msg': request.session.get('msg'),
        'SECTION_TYPE': SECTION_TYPE,
    }
    request.session['msg'] = ''
    return render_to_response('survey/survey_change.html', data, context_instance=RequestContext(request))


@login_required
def sealed_survey_view(request, object_id):
    """View sealed survey

    **Attributes**:

        * ``object_id`` - Selected survey object
        * ``template`` - survey/sealed_survey_view.html

    **Logic Description**:

        * Update/delete selected survey from the survey list
          via SurveyForm & get redirected to survey list
    """
    survey = get_object_or_404(Survey, pk=object_id, user=request.user)
    section_list = Section.objects.filter(survey=survey).order_by('order')
    branching_list = Branching.objects.filter(section__survey=survey).order_by('id')
    branching_section_list = branching_list.values_list('section_id', flat=True).distinct()
    data = {
        'survey_obj_id': object_id,
        'survey': survey,
        'section_list': section_list,
        'branching_list': branching_list,
        'branching_section_list': branching_section_list,
        'action': 'view',
        'msg': request.session.get('msg'),
        'SECTION_TYPE': SECTION_TYPE,
    }
    return render_to_response('survey/sealed_survey_view.html', data, context_instance=RequestContext(request))


def survey_cdr_daily_report(all_call_list):
    """Get survey voip call daily report"""
    max_duration = 0
    total_duration = 0
    total_calls = 0
    total_avg_duration = 0

    # Daily Survey VoIP call report
    select_data = {"starting_date": "SUBSTR(CAST(starting_date as CHAR(30)),1,10)"}

    # Get Total from VoIPCall table for Daily Call Report
    total_data = all_call_list.extra(select=select_data)\
        .values('starting_date')\
        .annotate(Count('starting_date'))\
        .annotate(Sum('duration'))\
        .annotate(Avg('duration'))\
        .order_by('-starting_date')

    # Following code will count total voip calls, duration
    if total_data:
        max_duration = max([x['duration__sum'] for x in total_data])
        total_duration = sum([x['duration__sum'] for x in total_data])
        total_calls = sum([x['starting_date__count'] for x in total_data])
        total_avg_duration = (sum([x['duration__avg'] for x in total_data]))

    survey_cdr_daily_data = {
        'total_data': total_data,
        'total_duration': total_duration,
        'total_calls': total_calls,
        'total_avg_duration': total_avg_duration,
        'max_duration': max_duration,
    }

    return survey_cdr_daily_data


def get_survey_result(survey_result_kwargs):
    """Get survey result report from the selected Survey"""
    survey_result = ResultAggregate.objects.values('section__question', 'response', 'count')\
        .filter(**survey_result_kwargs).order_by('section')
    return survey_result


def survey_audio_recording(audio_file):
    """audio player tag for frontend for survey recording

    >>> survey_audio_recording('')
    u'<br/><span class="label label-important">no recording</span>'
    """
    if audio_file:
        file_url = '%srecording/%s' % (settings.MEDIA_URL, str(audio_file))
        player_string = '<ul class="playlist"><li style="width:auto;"> <a href="%s">%s</a></li></ul>' % \
            (file_url, os.path.basename(file_url))
        return player_string
    else:
        return '<br/><span class="label label-important">%s</span>' % _('no recording')


@permission_required('survey.view_survey_report', login_url='/')
@login_required
def survey_report(request):
    """
    Survey detail report for the logged in user

    **Attributes**:

        * ``template`` - survey/survey_report.html
        * ``form`` - SurveyDetailReportForm

    **Logic Description**:

        * List all survey_report which belong to the logged in user.
    """
    tday = datetime.today()
    from_date = tday.strftime("%Y-%m-%d")
    to_date = tday.strftime("%Y-%m-%d")

    form = SurveyDetailReportForm(request.user, request.POST or None,
                                  initial={'from_date': from_date,
                                           'to_date': to_date})
    survey_result = ''

    survey_cdr_daily_data = {
        'total_data': '',
        'total_duration': '',
        'total_calls': '',
        'total_avg_duration': '',
        'max_duration': '',
    }

    sort_col_field_list = ['starting_date', 'phone_number', 'duration', 'disposition', 'id']
    pag_vars = get_pagination_vars(request, sort_col_field_list, default_sort_field='starting_date')

    survey_id = ''
    action = 'tabs-1'
    campaign_obj = ''
    rows = []
    survey_id = ''
    post_var_with_page = 0
    if form.is_valid():
        post_var_with_page = 1
        # set session var value
        request.session['session_surveycalls_kwargs'] = {}
        request.session['session_survey_cdr_daily_data'] = {}
        # set session var value
        field_list = ['from_date', 'to_date', 'survey_id']
        unset_session_var(request, field_list)

        from_date = getvar(request, 'from_date')
        to_date = getvar(request, 'to_date')
        start_date = ceil_strdate(str(from_date), 'start')
        end_date = ceil_strdate(str(to_date), 'end')

        converted_start_date = start_date.strftime('%Y-%m-%d')
        converted_end_date = end_date.strftime('%Y-%m-%d')
        request.session['session_start_date'] = converted_start_date
        request.session['session_end_date'] = converted_end_date

        survey_id = getvar(request, 'survey_id', setsession=True)

    if request.GET.get('page') or request.GET.get('sort_by'):
        post_var_with_page = 1
        start_date = request.session.get('session_start_date')
        end_date = request.session.get('session_end_date')
        start_date = ceil_strdate(start_date, 'start')
        end_date = ceil_strdate(end_date, 'end')
        survey_id = request.session.get('session_survey_id')

        form = SurveyDetailReportForm(request.user, initial={'from_date': start_date.strftime('%Y-%m-%d'),
                                                             'to_date': end_date.strftime('%Y-%m-%d'),
                                                             'survey_id': survey_id})
    if post_var_with_page == 0:
        # default
        # unset session var
        tday = datetime.utcnow().replace(tzinfo=utc)
        from_date = tday.strftime('%Y-%m-01')
        last_day = ((datetime(tday.year, tday.month, 1, 23, 59, 59, 999999).replace(tzinfo=utc) +
                    relativedelta(months=1)) -
                    relativedelta(days=1)).strftime('%d')
        to_date = tday.strftime('%Y-%m-' + last_day)
        start_date = ceil_strdate(from_date, 'start')
        end_date = ceil_strdate(to_date, 'end')

        # unset session var value
        request.session['session_from_date'] = from_date
        request.session['session_to_date'] = to_date
        request.session['session_survey_id'] = ''
        request.session['session_surveycalls_kwargs'] = ''

    kwargs = {}
    if not request.user.is_superuser:
        kwargs['user'] = request.user
    kwargs['disposition__exact'] = VOIPCALL_DISPOSITION.ANSWER

    survey_result_kwargs = {}

    if start_date and end_date:
        kwargs['starting_date__range'] = (start_date, end_date)
        survey_result_kwargs['created_date__range'] = (start_date, end_date)
    if start_date and end_date == '':
        kwargs['starting_date__gte'] = start_date
        survey_result_kwargs['created_date__gte'] = start_date
    if start_date == '' and end_date:
        kwargs['starting_date__lte'] = end_date
        survey_result_kwargs['created_date__lte'] = end_date

    all_call_list = []
    try:
        survey_result_kwargs['survey_id'] = survey_id
        survey_result = get_survey_result(survey_result_kwargs)

        campaign_obj = Survey.objects.get(id=int(survey_id)).campaign
        kwargs['callrequest__campaign'] = campaign_obj

        # List of Survey VoIP call report
        voipcall_list = VoIPCall.objects.filter(**kwargs)
        request.session['session_surveycalls_kwargs'] = kwargs
        all_call_list = voipcall_list.values_list('id', flat=True)

        # Get daily report from session while using pagination & sorting
        if request.GET.get('page') or request.GET.get('sort_by'):
            survey_cdr_daily_data = request.session['session_survey_cdr_daily_data']
            action = 'tabs-2'
        else:
            survey_cdr_daily_data = survey_cdr_daily_report(voipcall_list)
            request.session['session_survey_cdr_daily_data'] = survey_cdr_daily_data

        rows = voipcall_list.order_by(pag_vars['sort_order'])[pag_vars['start_page']:pag_vars['end_page']]
    except:
        rows = []
        if request.method == 'POST':
            request.session["err_msg"] = _('no campaign attached with survey.')

    data = {
        'rows': rows,
        'all_call_list': all_call_list,
        'call_count': all_call_list.count() if all_call_list else 0,
        'SURVEY_CALL_RESULT_NAME': SURVEY_CALL_RESULT_NAME,
        'col_name_with_order': pag_vars['col_name_with_order'],
        'total_data': survey_cdr_daily_data['total_data'],
        'total_duration': survey_cdr_daily_data['total_duration'],
        'total_calls': survey_cdr_daily_data['total_calls'],
        'total_avg_duration': survey_cdr_daily_data['total_avg_duration'],
        'max_duration': survey_cdr_daily_data['max_duration'],
        'msg': request.session.get('msg'),
        'err_msg': request.session.get('err_msg'),
        'form': form,
        'survey_result': survey_result,
        'action': action,
        'start_date': start_date,
        'end_date': end_date,
        'campaign_obj': campaign_obj,
    }
    request.session['msg'] = ''
    request.session['err_msg'] = ''
    return render_to_response('survey/survey_report.html', data, context_instance=RequestContext(request))


@login_required
def export_surveycall_report(request):
    """Export CSV file of Survey VoIP call record

    **Important variable**:

        * ``request.session['surveycall_record_qs']`` - stores survey voipcall
            query set

    **Exported fields**: ['starting_date', 'phone_number', 'duration',
                          'disposition', 'survey results']
    """
    format_type = request.GET['format']
    # get the response object, this can be used as a stream.
    response = HttpResponse(mimetype='text/%s' % format_type)
    # force download.
    response['Content-Disposition'] = 'attachment;filename=export.%s' % format_type
    if request.session.get('session_surveycalls_kwargs'):
        kwargs = request.session.get('session_surveycalls_kwargs')
        campaign_obj = kwargs['callrequest__campaign']
        qs = VoIPCall.objects.filter(**kwargs)
        column_list_base = ['starting_date', 'phone_number', 'duration', 'disposition']
        column_list = list(column_list_base)

        survey_qst = False
        if campaign_obj.content_type.model == 'survey':
            survey_qst = Section.objects.filter(survey_id=int(campaign_obj.object_id))
            for i in survey_qst:
                column = unicode(i.question.replace(',', ' '))
                column_list.append(column.encode('utf-8'))

        result_row = []
        for voipcall in qs:
            result_row_list = []
            #For each voip call retrieve the results of the survey nodes
            results = Result.objects.filter(callrequest=voipcall.callrequest_id).order_by('section')

            result_list = {}
            #We will prepare a dictionary result_list to help exporting the result
            for result in results:
                column = unicode(result.section.question.replace(',', ' '))
                if result.record_file and len(result.record_file) > 0:
                    result_list[column.encode('utf-8')] = result.record_file
                else:
                    result_list[column.encode('utf-8')] = result.response

            #We will build result_row_list which will be a value for each element from column_list
            for ikey in column_list:
                if ikey in column_list_base:
                    #This is not a Section result
                    if ikey == 'starting_date' \
                       and format_type == Export_choice.JSON \
                       or format_type == Export_choice.XLS:
                        starting_date = str(voipcall.__dict__[ikey])
                        result_row_list.append(starting_date)
                    else:
                        result_row_list.append(voipcall.__dict__[ikey])
                else:
                    #This is a Section result
                    if ikey in result_list:
                        result_row_list.append(result_list[ikey].encode('utf-8'))
                    else:
                        #Add empty result
                        result_row_list.append("")

            result_row.append(result_row_list)

        data = tablib.Dataset(*result_row, headers=tuple(column_list))
        if format_type == Export_choice.XLS:
            response.write(data.xls)
        elif format_type == Export_choice.CSV:
            response.write(data.csv)
        elif format_type == Export_choice.JSON:
            response.write(data.json)
    return response


@login_required
def survey_campaign_result(request, id):
    """Survey Campaign Result

    **Attributes**:

        * ``template`` - survey/survey_campaign_result.html

    **Logic Description**:

        * List all survey result which belong to callrequest.
    """
    result = Result.objects.filter(callrequest=VoIPCall.objects.get(pk=id).callrequest_id).order_by('section')
    data = {
        'result': result,
    }
    request.session['msg'] = ''
    request.session['err_msg'] = ''
    return render_to_response('survey/survey_campaign_result.html', data, context_instance=RequestContext(request))


@permission_required('survey.export_survey', login_url='/')
@login_required
def export_survey(request, id):
    """Export sections and branching of survey into text file"""
    # get the response object, this can be used as a stream.
    response = HttpResponse(mimetype='text/txt')
    # force download.
    response['Content-Disposition'] = 'attachment;filename=survey.txt'
    # the txt writer
    writer = csv.writer(response, delimiter='|', lineterminator='\n',)

    survey = get_object_or_404(Survey_template, pk=int(id), user=request.user)

    if survey:
        section_list = Section_template.objects.filter(survey=survey).order_by('order')
        for section in section_list:
            # write section in text file
            writer.writerow([
                section.order,
                section.type,
                section.question.encode('utf-8'),
                section.script.encode('utf-8'),
                section.audiofile_id,
                section.retries,
                section.timeout,
                section.key_0,
                section.key_1,
                section.key_2,
                section.key_3,
                section.key_4,
                section.key_5,
                section.key_6,
                section.key_7,
                section.key_8,
                section.key_9,
                section.rating_laps,
                section.validate_number,
                section.number_digits,
                section.min_number,
                section.max_number,
                section.phonenumber,
                section.conference,
                section.sms_text,
                section.completed,
                section.invalid_audiofile_id,
                section.id
            ])

        for section in section_list:
            branching_list = Branching_template.objects.filter(section=section).order_by('id')
            for branching in branching_list:
                # write branching text file
                writer.writerow([
                    branching.keys,
                    branching.section_id,
                    branching.goto_id,
                ])

    return response


@permission_required('survey.import_survey', login_url='/')
@login_required
def import_survey(request):
    """Importing sections and branching of survey

    **Attributes**:

        * ``template`` - survey/import_survey.html
        * ``form`` - SurveyFileImport
    """
    form = SurveyFileImport(request.POST or None, request.FILES or None)
    section_row = []
    branching_row = []
    type_error_import_list = []
    if request.method == 'POST':
        if form.is_valid():
            new_survey = Survey_template.objects.create(name=request.POST['name'], user=request.user)
            records = csv.reader(request.FILES['survey_file'], delimiter='|', quotechar='"')
            new_old_section = {}

            # disconnect post_save_add_script signal from Section_template
            post_save.disconnect(post_save_add_script, sender=Section_template)
            # Read each row
            for row in records:
                row = striplist(row)
                if not row or str(row[0]) == 0:
                    continue

                #if length of row is 28, it's a section
                if len(row) == 28:
                    try:
                        # for section
                        section_template_obj = Section_template.objects.create(
                            order=int(row[0]),
                            type=int(row[1]) if row[1] else 1,
                            question=row[2],
                            script=row[3],
                            audiofile_id=int(row[4]) if row[4] else None,
                            retries=int(row[5]) if row[5] else 0,
                            timeout=int(row[6]) if row[6] else 0,
                            key_0=row[7] if row[7] else '',
                            key_1=row[8] if row[8] else '',
                            key_2=row[9] if row[9] else '',
                            key_3=row[10] if row[10] else '',
                            key_4=row[11] if row[11] else '',
                            key_5=row[12] if row[12] else '',
                            key_6=row[13] if row[13] else '',
                            key_7=row[14] if row[14] else '',
                            key_8=row[15] if row[15] else '',
                            key_9=row[16] if row[16] else '',
                            rating_laps=int(row[17]) if row[17] else None,
                            validate_number=row[18] if row[18] == 'True' else False,
                            number_digits=int(row[19]) if row[19] else None,
                            min_number=row[20] if row[20] else None,
                            max_number=row[21] if row[21] else None,
                            phonenumber=row[22] if row[22] else None,
                            conference=row[23] if row[23] else None,
                            sms_text=row[24] if row[24] else None,
                            completed=True if row[25] == 'True' else False,
                            invalid_audiofile_id=int(row[26]) if row[26] else None,
                            survey=new_survey,
                        )
                        new_old_section[int(row[27])] = section_template_obj.id
                        section_row.append(row)
                    except:
                        type_error_import_list.append(row)

                #if length of row is 3, it's a branching
                if len(row) == 3:
                    new_section_id = ''
                    new_goto_section_id = ''
                    if row[1]:
                        new_section_id = new_old_section[int(row[1])]
                    if row[2]:
                        new_goto_section_id = new_old_section[int(row[2])]

                    duplicate_count = Branching_template.objects.filter(
                        keys=row[0], section_id=new_section_id).count()
                    if duplicate_count == 0:
                        try:
                            Branching_template.objects.create(
                                keys=row[0],
                                section_id=new_section_id,
                                goto_id=int(new_goto_section_id) if new_goto_section_id else None,
                            )
                        except:
                            type_error_import_list.append(row)

            # connect post_save_add_script signal with Section_template
            post_save.connect(post_save_add_script, sender=Section_template)
            return HttpResponseRedirect(redirect_url_to_survey_list)
        else:
            request.session["err_msg"] = True

    data = {
        'form': form,
        'section_row': section_row,
        'branching_row': branching_row,
        'type_error_import_list': type_error_import_list,
        'err_msg': request.session.get('err_msg'),
    }
    request.session['err_msg'] = ''
    return render_to_response('survey/import_survey.html', data, context_instance=RequestContext(request))


@permission_required('survey.view_sealed_survey', login_url='/')
@login_required
def sealed_survey_list(request):
    """Survey list for the logged in user

    **Attributes**:

        * ``template`` - survey/sealed_survey_list.html

    **Logic Description**:

        * List all sealed surveys which belong to the logged in user.
    """
    sort_col_field_list = ['id', 'name', 'updated_date', 'campaign']
    pag_vars = get_pagination_vars(request, sort_col_field_list, default_sort_field='id')
    survey_list = Survey.objects.values('id', 'name', 'description', 'updated_date', 'campaign__name')\
        .filter(user=request.user).order_by(pag_vars['sort_order'])
    data = {
        'survey_list': survey_list,
        'total_survey': survey_list.count(),
        'SEALED_SURVEY_COLUMN_NAME': SEALED_SURVEY_COLUMN_NAME,
        'col_name_with_order': pag_vars['col_name_with_order'],
        'msg': request.session.get('msg'),
    }
    request.session['msg'] = ''
    request.session['error_msg'] = ''
    return render_to_response('survey/sealed_survey_list.html', data, context_instance=RequestContext(request))


@permission_required('survey.seal_survey', login_url='/')
@login_required
def seal_survey(request, object_id):
    """
        seal survey without campaign
    """
    form = SealSurveyForm(request.POST or None)
    if request.method == 'POST':
        if form.is_valid():
            survey_template = get_object_or_404(Survey_template, pk=object_id, user=request.user)
            survey_template.name = request.POST.get('name', survey_template.name)
            survey_template.copy_survey_template()
            request.session['msg'] = '(%s) survey is sealed successfully' % survey_template.name
            return HttpResponseRedirect(redirect_url_to_survey_list)
        else:
            request.session['err_msg'] = True
    data = {
        'form': form,
        'err_msg': request.session.get('err_msg'),
        'object_id': object_id,
    }
    request.session['err_msg'] = ''
    return render_to_response('survey/seal_survey.html', data, context_instance=RequestContext(request))

########NEW FILE########
__FILENAME__ = config
import os

from django.conf import settings, global_settings


#TODO : https://github.com/pinax/pinax/blob/master/tests/runner.py
# build_app_list
def configure(nose_args):
    if not settings.configured:
        # Helper function to extract absolute path
        location = lambda x: os.path.join(os.path.dirname(os.path.realpath(__file__)), x)

        settings.configure(
            DATABASES={
                'default': {
                    'ENGINE': 'django.db.backends.sqlite3',
                    'NAME': ':memory:',
                }
            },
            INSTALLED_APPS=[
                #admin tool apps
                'admin_tools',
                'admin_tools.theming',
                'admin_tools.menu',
                'admin_tools.dashboard',
                'django.contrib.auth',
                'django.contrib.contenttypes',
                'django.contrib.sessions',
                'django.contrib.sites',
                'django.contrib.messages',
                'django.contrib.staticfiles',
                # Uncomment the next line to enable the admin:
                'django.contrib.admin',
                'django.contrib.markup',
                'django_countries',
                'country_dialcode',
                'dialer_gateway',
                'dialer_campaign',
                'dialer_cdr',
                'dialer_settings',
                'user_profile',
                'common',
                'djcelery',
                'dateutil',
                #'pagination',
                'linaro_django_pagination',
                'memcache_status',
                'notification',
                'survey',
                'dialer_audio',
                'django_lets_go',
                #'raven.contrib.django',
                'admin_tools_stats',
                'chart_tools',
                'south',
                'tastypie',
                'audiofield',
                'tagging',
                'adminsortable',
                'dajaxice',
                'dajax',
                'genericadmin',
            ],
            TEMPLATE_CONTEXT_PROCESSORS=(
                "django.contrib.auth.context_processors.auth",
                "django.core.context_processors.debug",
                "django.core.context_processors.i18n",
                "django.core.context_processors.media",
                "django.core.context_processors.static",
                "django.core.context_processors.csrf",
                "django.contrib.messages.context_processors.messages",
                "context_processors.newfies_version",
                #needed by Sentry
                "django.core.context_processors.request",
            ),
            TEMPLATE_DIRS=(
                location('templates'),
            ),
            MIDDLEWARE_CLASSES=global_settings.MIDDLEWARE_CLASSES + (
                'django.contrib.sessions.middleware.SessionMiddleware',
                'django.middleware.locale.LocaleMiddleware',
                'django.middleware.common.CommonMiddleware',
                'django.contrib.auth.middleware.AuthenticationMiddleware',
                'django.middleware.csrf.CsrfViewMiddleware',
                'django.contrib.messages.middleware.MessageMiddleware',
                #'pagination.middleware.PaginationMiddleware',
                'linaro_django_pagination.middleware.PaginationMiddleware',
                'django_lets_go.filter_persist_middleware.FilterPersistMiddleware',
                'audiofield.middleware.threadlocals.ThreadLocals',
            ),
            ROOT_URLCONF='urls',
            DEBUG=False,
            SITE_ID=1,
            APPEND_SLASH=True,
            NOSE_ARGS=nose_args,
        )

########NEW FILE########
__FILENAME__ = admin
#
# Newfies-Dialer License
# http://www.newfies-dialer.org
#
# This Source Code Form is subject to the terms of the Mozilla Public
# License, v. 2.0. If a copy of the MPL was not distributed with this file,
# You can obtain one at http://mozilla.org/MPL/2.0/.
#
# Copyright (C) 2011-2014 Star2Billing S.L.
#
# The Initial Developer of the Original Code is
# Arezqui Belaid <info@star2billing.com>
#

from django.contrib import admin
from django.contrib.auth.admin import UserAdmin
from django.contrib.auth.models import User
from django.db.models import Q
from user_profile.models import UserProfile, Manager, Staff
from appointment.function_def import get_all_calendar_user_id_list
#from agent.models import AgentProfile


class UserProfileInline(admin.StackedInline):
    model = UserProfile


class StaffAdmin(UserAdmin):
    inlines = [UserProfileInline]

    list_display = ('username', 'email', 'first_name', 'last_name', 'is_staff',
                    'is_active', 'is_superuser', 'last_login')
    list_filter = []

    def queryset(self, request):
        qs = super(UserAdmin, self).queryset(request)
        qs = qs.filter(Q(is_superuser=True))
        return qs


class ManagerAdmin(UserAdmin):
    inlines = [
        UserProfileInline,
    ]
    list_display = ('username', 'email', 'first_name', 'last_name', 'is_staff',
                    'is_active', 'is_superuser', 'last_login')
    list_filter = []

    def queryset(self, request):
        qs = super(UserAdmin, self).queryset(request)
        #agent_id_list = AgentProfile.objects.values_list('user_id', flat=True)\
        #    .filter(is_agent=True, manager__isnull=False)
        calendar_user_list = get_all_calendar_user_id_list()
        return qs.filter(is_superuser=False).exclude(id__in=calendar_user_list)  # .exclude(id__in=agent_id_list)

admin.site.unregister(User)
admin.site.register(Staff, StaffAdmin)
admin.site.register(Manager, ManagerAdmin)

########NEW FILE########
__FILENAME__ = constants
#
# Newfies-Dialer License
# http://www.newfies-dialer.org
#
# This Source Code Form is subject to the terms of the Mozilla Public
# License, v. 2.0. If a copy of the MPL was not distributed with this file,
# You can obtain one at http://mozilla.org/MPL/2.0/.
#
# Copyright (C) 2011-2014 Star2Billing S.L.
#
# The Initial Developer of the Original Code is
# Arezqui Belaid <info@star2billing.com>
#

from django.utils.translation import ugettext_lazy as _
from django_lets_go.utils import Choice


class NOTIFICATION_NAME(Choice):
    campaign_started = 1, _('campaign started')
    campaign_paused = 2, _('campaign paused')
    campaign_aborted = 3, _('campaign aborted')
    campaign_stopped = 4, _('campaign stopped')
    campaign_limit_reached = 5, _('campaign limit reached')
    contact_limit_reached = 6, _('contact limit reached')
    dialer_setting_configuration = 7, _('dialer setting configuration')
    callrequest_not_found = 8, _('callrequest not found')

########NEW FILE########
__FILENAME__ = forms
#
# Newfies-Dialer License
# http://www.newfies-dialer.org
#
# This Source Code Form is subject to the terms of the Mozilla Public
# License, v. 2.0. If a copy of the MPL was not distributed with this file,
# You can obtain one at http://mozilla.org/MPL/2.0/.
#
# Copyright (C) 2011-2014 Star2Billing S.L.
#
# The Initial Developer of the Original Code is
# Arezqui Belaid <info@star2billing.com>
#

from django import forms
from django.forms import ModelForm
from django.contrib.auth.models import User
from django.utils.translation import ugettext_lazy as _
from user_profile.models import UserProfile
from django.contrib.auth.forms import PasswordChangeForm
from crispy_forms.helper import FormHelper
from crispy_forms.layout import Layout, Div, Fieldset


class UserPasswordChangeForm(PasswordChangeForm):
    def __init__(self, *args, **kwargs):
        super(UserPasswordChangeForm, self).__init__(*args, **kwargs)
        self.helper = FormHelper()
        self.helper.form_tag = False
        self.helper.form_class = 'well'
        self.helper.layout = Layout(
            Fieldset('', 'old_password', 'new_password1', 'new_password2', css_class='col-md-4 col-xs-8')
        )


class UserChangeDetailForm(ModelForm):
    """A form used to change the detail of a user in the Customer UI."""
    email = forms.CharField(label=_('Email address'), required=True)

    class Meta:
        model = User
        #fields = ["last_name", "first_name", "email"]

    def __init__(self, user, *args, **kwargs):
        super(UserChangeDetailForm, self).__init__(*args, **kwargs)
        self.helper = FormHelper()
        self.helper.form_tag = False
        self.helper.disable_csrf = False
        css_class = 'col-md-4'
        self.helper.layout = Layout(
            Div(
                Div('last_name', css_class=css_class),
                Div('first_name', css_class=css_class),
                Div('email', css_class=css_class),
            ),
        )

        self.fields['last_name'].widget.attrs['ng-model'] = "user.last_name"
        self.fields['first_name'].widget.attrs['ng-model'] = "user.first_name"
        self.fields['email'].widget.attrs['ng-model'] = "user.email"


class UserChangeDetailExtendForm(ModelForm):
    """A form used to change the detail of a user in the Customer UI."""
    class Meta:
        model = UserProfile
        #fields = ["address", "city", "state", "country", "zip_code", "phone_no",
        #          "fax", "company_name", "company_website", "language", "note"]

    def __init__(self, user, *args, **kwargs):
        super(UserChangeDetailExtendForm, self).__init__(*args, **kwargs)
        self.helper = FormHelper()
        self.helper.form_tag = False
        self.helper.disable_csrf = False
        css_class = 'col-md-4'
        self.helper.layout = Layout(
            Div(
                Div('address', css_class=css_class),
                Div('city', css_class=css_class),
                Div('state', css_class=css_class),
                Div('country', css_class=css_class),
                Div('zip_code', css_class=css_class),
                Div('phone_no', css_class=css_class),
                Div('fax', css_class=css_class),
                Div('company_name', css_class=css_class),
                Div('company_website', css_class=css_class),
                Div('language', css_class=css_class),
                Div('note', css_class=css_class),
            ),
        )


class CheckPhoneNumberForm(forms.Form):
    """A form used to check the phone number in the Customer UI."""
    phone_number = forms.CharField(label=_('verify phone number').capitalize(), required=True,
        help_text=_("verify if a phone number is authorized to call"))

    def __init__(self, *args, **kwargs):
        super(CheckPhoneNumberForm, self).__init__(*args, **kwargs)
        self.helper = FormHelper()
        self.helper.form_tag = False
        self.helper.form_class = 'well'
        self.helper.layout = Layout(
            Fieldset('', 'phone_number', css_class='col-md-4 col-xs-8'),
        )


class UserProfileForm(ModelForm):

    class Meta:
        model = UserProfile

########NEW FILE########
__FILENAME__ = function_def
#
# Newfies-Dialer License
# http://www.newfies-dialer.org
#
# This Source Code Form is subject to the terms of the Mozilla Public
# License, v. 2.0. If a copy of the MPL was not distributed with this file,
# You can obtain one at http://mozilla.org/MPL/2.0/.
#
# Copyright (C) 2011-2014 Star2Billing S.L.
#
# The Initial Developer of the Original Code is
# Arezqui Belaid <info@star2billing.com>
#
########NEW FILE########
__FILENAME__ = 0001_initial_authuser
# -*- coding: utf-8 -*-
import datetime
from south.db import db
from south.v2 import SchemaMigration
from django.db import models


class Migration(SchemaMigration):

    def forwards(self, orm):
        # Adding model 'UserProfile'
        db.create_table('user_profile', (
            (u'id', self.gf('django.db.models.fields.AutoField')(primary_key=True)),
            ('user', self.gf('django.db.models.fields.related.OneToOneField')(to=orm['auth.User'], unique=True)),
            ('address', self.gf('django.db.models.fields.CharField')(max_length=200, null=True, blank=True)),
            ('city', self.gf('django.db.models.fields.CharField')(max_length=120, null=True, blank=True)),
            ('state', self.gf('django.db.models.fields.CharField')(max_length=120, null=True, blank=True)),
            ('country', self.gf('django_countries.fields.CountryField')(max_length=2, null=True, blank=True)),
            ('zip_code', self.gf('django.db.models.fields.CharField')(max_length=120, null=True, blank=True)),
            ('phone_no', self.gf('django.db.models.fields.CharField')(max_length=90, null=True, blank=True)),
            ('fax', self.gf('django.db.models.fields.CharField')(max_length=90, null=True, blank=True)),
            ('company_name', self.gf('django.db.models.fields.CharField')(max_length=90, null=True, blank=True)),
            ('company_website', self.gf('django.db.models.fields.URLField')(max_length=90, null=True, blank=True)),
            ('language', self.gf('django_lets_go.language_field.LanguageField')(max_length=2, null=True, blank=True)),
            ('note', self.gf('django.db.models.fields.CharField')(max_length=250, null=True, blank=True)),
            ('accountcode', self.gf('django.db.models.fields.PositiveIntegerField')(null=True, blank=True)),
            ('dialersetting', self.gf('django.db.models.fields.related.ForeignKey')(to=orm['dialer_settings.DialerSetting'], null=True, blank=True)),
            ('created_date', self.gf('django.db.models.fields.DateTimeField')(auto_now_add=True, blank=True)),
            ('updated_date', self.gf('django.db.models.fields.DateTimeField')(auto_now=True, blank=True)),
        ))
        db.send_create_signal(u'user_profile', ['UserProfile'])

        # Adding M2M table for field userprofile_gateway on 'UserProfile'
        db.create_table('user_profile_userprofile_gateway', (
            ('id', models.AutoField(verbose_name='ID', primary_key=True, auto_created=True)),
            ('userprofile', models.ForeignKey(orm[u'user_profile.userprofile'], null=False)),
            ('gateway', models.ForeignKey(orm[u'dialer_gateway.gateway'], null=False))
        ))
        db.create_unique('user_profile_userprofile_gateway', ['userprofile_id', 'gateway_id'])


    def backwards(self, orm):
        # Deleting model 'UserProfile'
        db.delete_table('user_profile')

        # Removing M2M table for field userprofile_gateway on 'UserProfile'
        db.delete_table('user_profile_userprofile_gateway')


    models = {
        u'auth.group': {
            'Meta': {'object_name': 'Group'},
            u'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '80'}),
            'permissions': ('django.db.models.fields.related.ManyToManyField', [], {'to': u"orm['auth.Permission']", 'symmetrical': 'False', 'blank': 'True'})
        },
        u'auth.permission': {
            'Meta': {'ordering': "(u'content_type__app_label', u'content_type__model', u'codename')", 'unique_together': "((u'content_type', u'codename'),)", 'object_name': 'Permission'},
            'codename': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'content_type': ('django.db.models.fields.related.ForeignKey', [], {'to': u"orm['contenttypes.ContentType']"}),
            u'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '50'})
        },
        u'auth.user': {
            'Meta': {'object_name': 'User'},
            'date_joined': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
            'email': ('django.db.models.fields.EmailField', [], {'max_length': '75', 'blank': 'True'}),
            'first_name': ('django.db.models.fields.CharField', [], {'max_length': '30', 'blank': 'True'}),
            'groups': ('django.db.models.fields.related.ManyToManyField', [], {'to': u"orm['auth.Group']", 'symmetrical': 'False', 'blank': 'True'}),
            u'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'is_active': ('django.db.models.fields.BooleanField', [], {'default': 'True'}),
            'is_staff': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'is_superuser': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'last_login': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
            'last_name': ('django.db.models.fields.CharField', [], {'max_length': '30', 'blank': 'True'}),
            'password': ('django.db.models.fields.CharField', [], {'max_length': '128'}),
            'user_permissions': ('django.db.models.fields.related.ManyToManyField', [], {'to': u"orm['auth.Permission']", 'symmetrical': 'False', 'blank': 'True'}),
            'username': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '30'})
        },
        u'contenttypes.contenttype': {
            'Meta': {'ordering': "('name',)", 'unique_together': "(('app_label', 'model'),)", 'object_name': 'ContentType', 'db_table': "'django_content_type'"},
            'app_label': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            u'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'model': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '100'})
        },
        u'dialer_gateway.gateway': {
            'Meta': {'object_name': 'Gateway', 'db_table': "u'dialer_gateway'"},
            'addparameter': ('django.db.models.fields.CharField', [], {'max_length': '360', 'blank': 'True'}),
            'addprefix': ('django.db.models.fields.CharField', [], {'max_length': '60', 'blank': 'True'}),
            'count_call': ('django.db.models.fields.IntegerField', [], {'null': 'True', 'blank': 'True'}),
            'count_in_use': ('django.db.models.fields.IntegerField', [], {'null': 'True', 'blank': 'True'}),
            'created_date': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'description': ('django.db.models.fields.TextField', [], {'blank': 'True'}),
            'failover': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'Failover Gateway'", 'null': 'True', 'to': u"orm['dialer_gateway.Gateway']"}),
            'gateway_codecs': ('django.db.models.fields.CharField', [], {'max_length': '500', 'blank': 'True'}),
            'gateway_retries': ('django.db.models.fields.CharField', [], {'max_length': '500', 'blank': 'True'}),
            'gateway_timeouts': ('django.db.models.fields.CharField', [], {'max_length': '500', 'blank': 'True'}),
            'gateways': ('django.db.models.fields.CharField', [], {'max_length': '500'}),
            u'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'maximum_call': ('django.db.models.fields.IntegerField', [], {'null': 'True', 'blank': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '255'}),
            'originate_dial_string': ('django.db.models.fields.CharField', [], {'max_length': '500', 'blank': 'True'}),
            'removeprefix': ('django.db.models.fields.CharField', [], {'max_length': '60', 'blank': 'True'}),
            'secondused': ('django.db.models.fields.IntegerField', [], {'null': 'True', 'blank': 'True'}),
            'status': ('django.db.models.fields.IntegerField', [], {'default': '1', 'null': 'True', 'blank': 'True'}),
            'updated_date': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'blank': 'True'})
        },
        u'dialer_settings.dialersetting': {
            'Meta': {'object_name': 'DialerSetting', 'db_table': "'dialer_setting'"},
            'blacklist': ('django.db.models.fields.TextField', [], {'default': "''", 'null': 'True', 'blank': 'True'}),
            'callmaxduration': ('django.db.models.fields.IntegerField', [], {'default': "'1800'", 'null': 'True', 'blank': 'True'}),
            'created_date': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            u'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'max_calltimeout': ('django.db.models.fields.IntegerField', [], {'default': "'45'", 'null': 'True', 'blank': 'True'}),
            'max_frequency': ('django.db.models.fields.IntegerField', [], {'default': "'100'", 'null': 'True', 'blank': 'True'}),
            'max_number_campaign': ('django.db.models.fields.IntegerField', [], {'default': '10'}),
            'max_number_subscriber_campaign': ('django.db.models.fields.IntegerField', [], {'default': '10000'}),
            'maxretry': ('django.db.models.fields.IntegerField', [], {'default': "'3'", 'null': 'True', 'blank': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '50', 'null': 'True'}),
            'updated_date': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'blank': 'True'}),
            'whitelist': ('django.db.models.fields.TextField', [], {'default': "''", 'null': 'True', 'blank': 'True'})
        },
        u'user_profile.userprofile': {
            'Meta': {'object_name': 'UserProfile', 'db_table': "'user_profile'"},
            'accountcode': ('django.db.models.fields.PositiveIntegerField', [], {'null': 'True', 'blank': 'True'}),
            'address': ('django.db.models.fields.CharField', [], {'max_length': '200', 'null': 'True', 'blank': 'True'}),
            'city': ('django.db.models.fields.CharField', [], {'max_length': '120', 'null': 'True', 'blank': 'True'}),
            'company_name': ('django.db.models.fields.CharField', [], {'max_length': '90', 'null': 'True', 'blank': 'True'}),
            'company_website': ('django.db.models.fields.URLField', [], {'max_length': '90', 'null': 'True', 'blank': 'True'}),
            'country': ('django_countries.fields.CountryField', [], {'max_length': '2', 'null': 'True', 'blank': 'True'}),
            'created_date': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'dialersetting': ('django.db.models.fields.related.ForeignKey', [], {'to': u"orm['dialer_settings.DialerSetting']", 'null': 'True', 'blank': 'True'}),
            'fax': ('django.db.models.fields.CharField', [], {'max_length': '90', 'null': 'True', 'blank': 'True'}),
            u'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'language': ('django_lets_go.language_field.LanguageField', [], {'max_length': '2', 'null': 'True', 'blank': 'True'}),
            'note': ('django.db.models.fields.CharField', [], {'max_length': '250', 'null': 'True', 'blank': 'True'}),
            'phone_no': ('django.db.models.fields.CharField', [], {'max_length': '90', 'null': 'True', 'blank': 'True'}),
            'state': ('django.db.models.fields.CharField', [], {'max_length': '120', 'null': 'True', 'blank': 'True'}),
            'updated_date': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'blank': 'True'}),
            'user': ('django.db.models.fields.related.OneToOneField', [], {'to': u"orm['auth.User']", 'unique': 'True'}),
            'userprofile_gateway': ('django.db.models.fields.related.ManyToManyField', [], {'to': u"orm['dialer_gateway.Gateway']", 'symmetrical': 'False'}),
            'zip_code': ('django.db.models.fields.CharField', [], {'max_length': '120', 'null': 'True', 'blank': 'True'})
        }
    }

    complete_apps = ['user_profile']
########NEW FILE########
__FILENAME__ = models
#
# Newfies-Dialer License
# http://www.newfies-dialer.org
#
# This Source Code Form is subject to the terms of the Mozilla Public
# License, v. 2.0. If a copy of the MPL was not distributed with this file,
# You can obtain one at http://mozilla.org/MPL/2.0/.
#
# Copyright (C) 2011-2014 Star2Billing S.L.
#
# The Initial Developer of the Original Code is
# Arezqui Belaid <info@star2billing.com>
#

from django.db import models
from django.contrib.auth.models import User
from django.utils.translation import ugettext_lazy as _
from django_lets_go.language_field import LanguageField
from django_countries.fields import CountryField
from dialer_gateway.models import Gateway
from dialer_settings.models import DialerSetting
import uuid
import hmac
import hashlib


def generate_key():
    # Get a random UUID.
    new_uuid = uuid.uuid4()
    # Hmac that beast.
    return hmac.new(str(new_uuid), digestmod=hashlib.sha1).hexdigest()


class Profile_abstract(models.Model):
    """This defines the Survey template

    **Attributes**:

        * ``accountcode`` - Account name.
        * ``address`` -
        * ``city`` -
        * ``state`` -
        * ``address`` -
        * ``country`` -
        * ``zip_code`` -
        * ``phone_no`` -
        * ``fax`` -
        * ``company_name`` -
        * ``company_website`` -
        * ``language`` -
        * ``note`` -

    **Relationships**:

        * ``user`` - Foreign key relationship to the User model.
    """
    user = models.OneToOneField(User)
    address = models.CharField(blank=True, null=True, max_length=200, verbose_name=_('address'))
    city = models.CharField(max_length=120, blank=True, null=True, verbose_name=_('city'))
    state = models.CharField(max_length=120, blank=True, null=True, verbose_name=_('state'))
    country = CountryField(blank=True, null=True, verbose_name=_('country'))
    zip_code = models.CharField(max_length=120, blank=True, null=True, verbose_name=_('zip code'))
    phone_no = models.CharField(max_length=90, blank=True, null=True, verbose_name=_('phone number'))
    fax = models.CharField(max_length=90, blank=True, null=True, verbose_name=_('fax Number'))
    company_name = models.CharField(max_length=90, blank=True, null=True, verbose_name=_('company name'))
    company_website = models.URLField(max_length=90, blank=True, null=True, verbose_name=_('company website'))
    language = LanguageField(blank=True, null=True, verbose_name=_('language'))
    note = models.CharField(max_length=250, blank=True, null=True, verbose_name=_('note'))
    accountcode = models.PositiveIntegerField(null=True, blank=True)
    created_date = models.DateTimeField(auto_now_add=True)
    updated_date = models.DateTimeField(auto_now=True)

    class Meta:
        abstract = True


class UserProfile(Profile_abstract):
    """This defines extra features for the user

    **Relationships**:

        * ``userprofile_gateway`` - ManyToMany
        * ``dialersetting`` - Foreign key relationship to the DialerSetting \
        model.

    **Name of DB table**: user_profile
    """
    userprofile_gateway = models.ManyToManyField(Gateway, verbose_name=_('gateway'))
    dialersetting = models.ForeignKey(DialerSetting, verbose_name=_('dialer settings'),
                                      null=True, blank=True)
    #Used for tastypie
    #key = models.CharField(max_length=256, blank=True, default='')

    class Meta:
        permissions = (
            ("view_api_explorer", _('can see API-Explorer')),
        )
        db_table = 'user_profile'
        verbose_name = _("user profile")
        verbose_name_plural = _("user profiles")

    def __unicode__(self):
        return u"%s" % str(self.user)

    # def save(self, *args, **kwargs):
    #     if not self.key:
    #         self.key = generate_key()

    #     return super(UserProfile, self).save(*args, **kwargs)


class Manager(User):
    """
    Manager are user that have access to the Customer/Manager interface.
    They don't have access to the admin.
    Manager, create surveys, phonebooks, they also create and run campaign.
    They are the actually user of the system.
    They also can create Agents which will receive the calls.
    """

    class Meta:
        proxy = True
        app_label = 'auth'
        verbose_name = _('manager')
        verbose_name_plural = _('managers')

    def save(self, **kwargs):
        if not self.pk:
            self.is_staff = 0
            self.is_superuser = 0
        super(Manager, self).save(**kwargs)


class Staff(User):
    """Admin - Super User
    Staff are user that have access to the admin interface with restriction.
    They can apply few changes on the admin UI based on their permission.
    It's important to configure well their permission.
    A staff members can for instance access to overall reporting, or review
    call queues status.
    """

    class Meta:
        proxy = True
        app_label = 'auth'
        verbose_name = _('admin')
        verbose_name_plural = _('admins')

    def save(self, **kwargs):
        if not self.pk:
            self.is_staff = 1
            self.is_superuser = 1
        super(Staff, self).save(**kwargs)

########NEW FILE########
__FILENAME__ = tests
#
# Newfies-Dialer License
# http://www.newfies-dialer.org
#
# This Source Code Form is subject to the terms of the Mozilla Public
# License, v. 2.0. If a copy of the MPL was not distributed with this file,
# You can obtain one at http://mozilla.org/MPL/2.0/.
#
# Copyright (C) 2011-2014 Star2Billing S.L.
#
# The Initial Developer of the Original Code is
# Arezqui Belaid <info@star2billing.com>
#

from django.contrib.auth.models import User
from django.test import TestCase
from django.contrib.auth.forms import PasswordChangeForm
from user_profile.models import UserProfile
from user_profile.forms import UserChangeDetailForm,\
    UserChangeDetailExtendForm, CheckPhoneNumberForm
from user_profile.views import customer_detail_change
from dialer_settings.models import DialerSetting
from django_lets_go.utils import BaseAuthenticatedClient


class UserProfileAdminView(BaseAuthenticatedClient):
    """Test Function to check UserProfile Admin pages"""

    def test_admin_manager_view_list(self):
        """Test Function to check admin customer list"""
        response = self.client.get("/admin/auth/manager/")
        self.assertEqual(response.status_code, 200)

    def test_admin_manager_view_add(self):
        """Test Function to check admin customer add"""
        response = self.client.get("/admin/auth/manager/add/")
        self.assertEqual(response.status_code, 200)

    def test_admin_calendaruser_view_list(self):
        """Test Function to check admin customer list"""
        response = self.client.get("/admin/auth/calendaruser/")
        self.assertEqual(response.status_code, 200)

    def test_admin_calendaruser_view_add(self):
        """Test Function to check admin customer add"""
        response = self.client.get("/admin/auth/calendaruser/add/")
        self.assertEqual(response.status_code, 200)


class UserProfileCustomerView(BaseAuthenticatedClient):
    """Test Function to check UserProfile Customer pages"""

    fixtures = ['auth_user.json', 'user_profile.json', 'gateway.json',
                'dialer_setting.json']

    def test_user_settings(self):
        """Test Function to check User settings"""
        response = self.client.post('/user_detail_change/?action=tabs-1',
                                    {'form-type': 'change-detail',
                                     'first_name': 'admin',
                                     'phone_no': '9324552563'})
        self.assertTrue(response.context['user_detail_form'],
                        UserChangeDetailForm(self.user))
        self.assertTrue(response.context['user_detail_extened_form'],
                        UserChangeDetailExtendForm(self.user))

        response = self.client.post('/user_detail_change/?action=tabs-2',
                                    {'form-type': ''})
        self.assertTrue(response.context['user_password_form'],
                        PasswordChangeForm(self.user))

        response = self.client.get(
            '/user_detail_change/?action=tabs-3&notification=mark_read_all', {})
        self.assertEqual(response.status_code, 200)

        response = self.client.post('/user_detail_change/?action=tabs-5',
                                    {'form-type': 'check-number',
                                     'phone_no': '9324552563'})
        self.assertTrue(response.context['check_phone_no_form'],
                        CheckPhoneNumberForm())
        self.assertEqual(response.status_code, 200)
        self.assertTemplateUsed(response, 'user_profile/user_detail_change.html')

        request = self.factory.get('/user_detail_change/')
        request.user = self.user
        request.session = {}
        response = customer_detail_change(request)
        self.assertEqual(response.status_code, 200)


class UserProfileModel(TestCase):
    """Test UserProfile Model"""
    fixtures = ['auth_user.json', 'user_profile.json', 'gateway.json',
                'dialer_setting.json']

    def setUp(self):
        self.user = User.objects.get(username='admin')
        self.dialersetting = DialerSetting.objects.get(pk=1)
        self.user_profile = UserProfile.objects.get(pk=1)

    def test_user_profile_forms(self):
        self.assertEqual(self.user_profile.user, self.user)
        UserChangeDetailForm(self.user)
        UserChangeDetailExtendForm(self.user)

    def teardown(self):
        self.user_profile.delete()

########NEW FILE########
__FILENAME__ = urls
#
# Newfies-Dialer License
# http://www.newfies-dialer.org
#
# This Source Code Form is subject to the terms of the Mozilla Public
# License, v. 2.0. If a copy of the MPL was not distributed with this file,
# You can obtain one at http://mozilla.org/MPL/2.0/.
#
# Copyright (C) 2011-2014 Star2Billing S.L.
#
# The Initial Developer of the Original Code is
# Arezqui Belaid <info@star2billing.com>
#

from django.conf.urls import patterns


urlpatterns = patterns('user_profile.views',
    # User detail change for Customer UI
    (r'^user_detail_change/$', 'customer_detail_change'),
)

########NEW FILE########
__FILENAME__ = views
#
# Newfies-Dialer License
# http://www.newfies-dialer.org
#
# This Source Code Form is subject to the terms of the Mozilla Public
# License, v. 2.0. If a copy of the MPL was not distributed with this file,
# You can obtain one at http://mozilla.org/MPL/2.0/.
#
# Copyright (C) 2011-2014 Star2Billing S.L.
#
# The Initial Developer of the Original Code is
# Arezqui Belaid <info@star2billing.com>
#

from django.contrib.auth.models import User
from django.contrib.auth.decorators import login_required
from django.conf import settings
from django.shortcuts import render_to_response, get_object_or_404
from django.template.context import RequestContext
from django.utils.translation import ugettext_lazy as _
from dialer_campaign.models import common_contact_authorization
from user_profile.models import UserProfile
from user_profile.forms import UserChangeDetailForm, UserChangeDetailExtendForm, UserPasswordChangeForm,\
    CheckPhoneNumberForm


@login_required
def customer_detail_change(request):
    """User Detail change on Customer UI

    **Attributes**:

        * ``form`` - UserChangeDetailForm, UserChangeDetailExtendForm,
                        UserPasswordChangeForm, CheckPhoneNumberForm
        * ``template`` - 'user_profile/user_detail_change.html'

    **Logic Description**:

        * User is able to change his/her detail.
    """
    user_detail = get_object_or_404(User, username=request.user)

    try:
        user_detail_extened = UserProfile.objects.get(user=user_detail)
    except UserProfile.DoesNotExist:
        #create UserProfile
        user_detail_extened = UserProfile(user=user_detail)
        #DEMO / Disable
        if not settings.DEMO_MODE:
            user_detail_extened.save()

    user_detail_form = UserChangeDetailForm(request.user, instance=user_detail)
    user_detail_extened_form = UserChangeDetailExtendForm(request.user, instance=user_detail_extened)

    user_password_form = UserPasswordChangeForm(request.user)
    check_phone_no_form = CheckPhoneNumberForm()

    msg_detail = ''
    msg_pass = ''
    msg_number = ''

    error_detail = ''
    error_pass = ''
    error_number = ''
    action = ''
    if 'action' in request.GET:
        action = request.GET['action']

    if request.method == 'POST':
        if request.POST['form-type'] == "change-detail":
            action = 'tabs-1'
            user_detail_form = UserChangeDetailForm(request.user, request.POST, instance=user_detail)
            user_detail_extened_form = UserChangeDetailExtendForm(request.user, request.POST, instance=user_detail_extened)

            if (user_detail_form.is_valid()
               and user_detail_extened_form.is_valid()):
                #DEMO / Disable
                if not settings.DEMO_MODE:
                    user_detail_form.save()
                    user_detail_extened_form.save()
                msg_detail = _('detail has been changed.')
            else:
                error_detail = _('please correct the errors below.')
        elif request.POST['form-type'] == "check-number":  # check phone no
            action = 'tabs-4'
            check_phone_no_form = CheckPhoneNumberForm(request.POST)
            if check_phone_no_form.is_valid():
                dialersetting = request.user.get_profile().dialersetting
                if not common_contact_authorization(dialersetting, request.POST['phone_number']):
                    error_number = _('this phone number is not authorized.')
                else:
                    msg_number = _('this phone number is authorized.')
            else:
                error_number = _('please correct the errors below.')
        else:  # "change-password"
            action = 'tabs-2'
            user_password_form = UserPasswordChangeForm(request.user, request.POST)
            if user_password_form.is_valid():
                #DEMO / Disable
                if not settings.DEMO_MODE:
                    user_password_form.save()
                msg_pass = _('your password has been changed.')
            else:
                error_pass = _('please correct the errors below.')

    try:
        dialer_set = user_detail_extened.dialersetting
    except:
        dialer_set = ''

    data = {
        'user_detail_form': user_detail_form,
        'user_detail_extened_form': user_detail_extened_form,
        'user_password_form': user_password_form,
        'check_phone_no_form': check_phone_no_form,
        'msg_detail': msg_detail,
        'msg_pass': msg_pass,
        'msg_number': msg_number,
        'error_detail': error_detail,
        'error_pass': error_pass,
        'error_number': error_number,
        'dialer_set': dialer_set,
        'action': action,
    }
    return render_to_response('user_profile/user_detail_change.html', data, context_instance=RequestContext(request))

########NEW FILE########
