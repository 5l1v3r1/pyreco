__FILENAME__ = admin

########NEW FILE########
__FILENAME__ = admin
from django import forms
from django.contrib import admin
from django.contrib.flatpages.models import FlatPage
from django.utils.translation import ugettext_lazy as _


class FlatpageForm(forms.ModelForm):
    url = forms.RegexField(label=_("URL"), max_length=100, regex=r'^[-\w/]+$',
        help_text = _("Example: '/about/contact/'. Make sure to have leading"
                      " and trailing slashes."),
        error_message = _("This value must contain only letters, numbers,"
                          " underscores, dashes or slashes."))

    class Meta:
        model = FlatPage


class FlatPageAdmin(admin.ModelAdmin):
    form = FlatpageForm
    fieldsets = (
        (None, {'fields': ('url', 'title', 'content', 'marketplace')}),
        (_('Advanced options'), {'classes': ('collapse',), 'fields': ('enable_comments', 'registration_required', 'template_name')}),
    )
    list_display = ('url', 'title')
    list_filter = ('marketplace', 'enable_comments', 'registration_required')
    search_fields = ('url', 'title')

#    class Media:
#        js = ('js/tiny_mce/tiny_mce.js', 'js/textareas.js')

admin.site.register(FlatPage, FlatPageAdmin)

########NEW FILE########
__FILENAME__ = middleware
from views import flatpage
from django.http import Http404
from django.conf import settings

class FlatpageFallbackMiddleware(object):
    def process_response(self, request, response):
        if response.status_code != 404:
            return response # No need to check for a flatpage for non-404 responses.
        try:
            return flatpage(request, request.path_info)
        # Return the original response if any errors happened. Because this
        # is a middleware, we can't assume the errors will be caught elsewhere.
        except Http404:
            return response
        except:
            if settings.DEBUG:
                raise
            return response

########NEW FILE########
__FILENAME__ = 0001_initial
# encoding: utf-8
import datetime
from south.db import db
from south.v2 import SchemaMigration
from django.db import models

class Migration(SchemaMigration):

    def forwards(self, orm):
        
        # Adding model 'FlatPage'
        db.create_table('flatpages_flatpage', (
            ('id', self.gf('django.db.models.fields.AutoField')(primary_key=True)),
            ('url', self.gf('django.db.models.fields.CharField')(max_length=100, db_index=True)),
            ('title', self.gf('django.db.models.fields.CharField')(max_length=200)),
            ('content', self.gf('django.db.models.fields.TextField')(blank=True)),
            ('enable_comments', self.gf('django.db.models.fields.BooleanField')(default=False, blank=True)),
            ('template_name', self.gf('django.db.models.fields.CharField')(max_length=70, blank=True)),
            ('registration_required', self.gf('django.db.models.fields.BooleanField')(default=False, blank=True)),
            ('marketplace', self.gf('django.db.models.fields.related.ForeignKey')(to=orm['market.MarketPlace'])),
        ))
        db.send_create_signal('flatpages', ['FlatPage'])

        # Adding M2M table for field sites on 'FlatPage'
        db.create_table('flatpages_flatpage_sites', (
            ('id', models.AutoField(verbose_name='ID', primary_key=True, auto_created=True)),
            ('flatpage', models.ForeignKey(orm['flatpages.flatpage'], null=False)),
            ('site', models.ForeignKey(orm['sites.site'], null=False))
        ))
        db.create_unique('flatpages_flatpage_sites', ['flatpage_id', 'site_id'])


    def backwards(self, orm):
        
        # Deleting model 'FlatPage'
        db.delete_table('flatpages_flatpage')

        # Removing M2M table for field sites on 'FlatPage'
        db.delete_table('flatpages_flatpage_sites')


    models = {
        'flatpages.flatpage': {
            'Meta': {'object_name': 'FlatPage'},
            'content': ('django.db.models.fields.TextField', [], {'blank': 'True'}),
            'enable_comments': ('django.db.models.fields.BooleanField', [], {'default': 'False', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'marketplace': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['market.MarketPlace']"}),
            'registration_required': ('django.db.models.fields.BooleanField', [], {'default': 'False', 'blank': 'True'}),
            'sites': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['sites.Site']", 'symmetrical': 'False'}),
            'template_name': ('django.db.models.fields.CharField', [], {'max_length': '70', 'blank': 'True'}),
            'title': ('django.db.models.fields.CharField', [], {'max_length': '200'}),
            'url': ('django.db.models.fields.CharField', [], {'max_length': '100', 'db_index': 'True'})
        },
        'market.marketplace': {
            'Meta': {'object_name': 'MarketPlace'},
            'base_domain': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '128'}),
            'charge_on_card_as': ('django.db.models.fields.CharField', [], {'default': "''", 'max_length': '255'}),
            'contact_email': ('django.db.models.fields.EmailField', [], {'default': "'contact@yourstore.com'", 'max_length': '75'}),
            'contact_phone': ('django.db.models.fields.CharField', [], {'default': "''", 'max_length': '128'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '92'}),
            'slug': ('django.db.models.fields.SlugField', [], {'unique': 'True', 'max_length': '92', 'db_index': 'True'}),
            'template_prefix': ('django.db.models.fields.SlugField', [], {'unique': 'True', 'max_length': '92', 'db_index': 'True'}),
            'title': ('django.db.models.fields.CharField', [], {'max_length': '92'})
        },
        'sites.site': {
            'Meta': {'object_name': 'Site', 'db_table': "'django_site'"},
            'domain': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '50'})
        }
    }

    complete_apps = ['flatpages']

########NEW FILE########
__FILENAME__ = 0002_auto
# encoding: utf-8
import datetime
from south.db import db
from south.v2 import SchemaMigration
from django.db import models

class Migration(SchemaMigration):

    def forwards(self, orm):
        
        # Removing M2M table for field sites on 'FlatPage'
        db.delete_table('flatpages_flatpage_sites')


    def backwards(self, orm):
        
        # Adding M2M table for field sites on 'FlatPage'
        db.create_table('flatpages_flatpage_sites', (
            ('id', models.AutoField(verbose_name='ID', primary_key=True, auto_created=True)),
            ('flatpage', models.ForeignKey(orm['flatpages.flatpage'], null=False)),
            ('site', models.ForeignKey(orm['sites.site'], null=False))
        ))
        db.create_unique('flatpages_flatpage_sites', ['flatpage_id', 'site_id'])


    models = {
        'flatpages.flatpage': {
            'Meta': {'object_name': 'FlatPage'},
            'content': ('django.db.models.fields.TextField', [], {'blank': 'True'}),
            'enable_comments': ('django.db.models.fields.BooleanField', [], {'default': 'False', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'marketplace': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['market.MarketPlace']"}),
            'registration_required': ('django.db.models.fields.BooleanField', [], {'default': 'False', 'blank': 'True'}),
            'template_name': ('django.db.models.fields.CharField', [], {'max_length': '70', 'blank': 'True'}),
            'title': ('django.db.models.fields.CharField', [], {'max_length': '200'}),
            'url': ('django.db.models.fields.CharField', [], {'max_length': '100', 'db_index': 'True'})
        },
        'market.marketplace': {
            'Meta': {'object_name': 'MarketPlace'},
            'base_domain': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '128'}),
            'charge_on_card_as': ('django.db.models.fields.CharField', [], {'default': "''", 'max_length': '255'}),
            'contact_email': ('django.db.models.fields.EmailField', [], {'default': "'contact@yourstore.com'", 'max_length': '75'}),
            'contact_phone': ('django.db.models.fields.CharField', [], {'default': "''", 'max_length': '128'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '92'}),
            'slug': ('django.db.models.fields.SlugField', [], {'unique': 'True', 'max_length': '92', 'db_index': 'True'}),
            'template_prefix': ('django.db.models.fields.SlugField', [], {'unique': 'True', 'max_length': '92', 'db_index': 'True'}),
            'title': ('django.db.models.fields.CharField', [], {'max_length': '92'})
        }
    }

    complete_apps = ['flatpages']

########NEW FILE########
__FILENAME__ = models
from django.db import models
from django.utils.translation import ugettext_lazy as _

from market.models import MarketPlace


class FlatPage(models.Model):
    url = models.CharField(_('URL'), max_length=100, db_index=True)
    title = models.CharField(_('title'), max_length=200)
    content = models.TextField(_('content'), blank=True)
    enable_comments = models.BooleanField(_('enable comments'))
    template_name = models.CharField(_('template name'), max_length=70, blank=True,
        help_text=_("Example: 'flatpages/contact_page.html'. If this isn't provided, the system will use 'flatpages/default.html'."))
    registration_required = models.BooleanField(_('registration required'), help_text=_("If this is checked, only logged-in users will be able to view the page."))
    marketplace = models.ForeignKey(MarketPlace)

    class Meta:
        verbose_name = _('flat page')
        verbose_name_plural = _('flat pages')
        ordering = ('url',)

    def __unicode__(self):
        return u"%s -- %s" % (self.url, self.title)

    def get_absolute_url(self):
        return self.url

########NEW FILE########
__FILENAME__ = csrf
import os
from django.conf import settings
from django.test import TestCase, Client

class FlatpageCSRFTests(TestCase):
    fixtures = ['sample_flatpages']
    urls = 'django.contrib.flatpages.tests.urls'

    def setUp(self):
        self.client = Client(enforce_csrf_checks=True)
        self.old_MIDDLEWARE_CLASSES = settings.MIDDLEWARE_CLASSES
        flatpage_middleware_class = 'django.contrib.flatpages.middleware.FlatpageFallbackMiddleware'
        csrf_middleware_class = 'django.middleware.csrf.CsrfViewMiddleware'
        if csrf_middleware_class not in settings.MIDDLEWARE_CLASSES:
            settings.MIDDLEWARE_CLASSES += (csrf_middleware_class,)
        if flatpage_middleware_class not in settings.MIDDLEWARE_CLASSES:
            settings.MIDDLEWARE_CLASSES += (flatpage_middleware_class,)
        self.old_TEMPLATE_DIRS = settings.TEMPLATE_DIRS
        settings.TEMPLATE_DIRS = (
            os.path.join(
                os.path.dirname(__file__),
                'templates'
            ),
        )
        self.old_LOGIN_URL = settings.LOGIN_URL
        settings.LOGIN_URL = '/accounts/login/'

    def tearDown(self):
        settings.MIDDLEWARE_CLASSES = self.old_MIDDLEWARE_CLASSES
        settings.TEMPLATE_DIRS = self.old_TEMPLATE_DIRS
        settings.LOGIN_URL = self.old_LOGIN_URL

    def test_view_flatpage(self):
        "A flatpage can be served through a view, even when the middleware is in use"
        response = self.client.get('/flatpage_root/flatpage/')
        self.assertEquals(response.status_code, 200)
        self.assertContains(response, "<p>Isn't it flat!</p>")

    def test_view_non_existent_flatpage(self):
        "A non-existent flatpage raises 404 when served through a view, even when the middleware is in use"
        response = self.client.get('/flatpage_root/no_such_flatpage/')
        self.assertEquals(response.status_code, 404)

    def test_view_authenticated_flatpage(self):
        "A flatpage served through a view can require authentication"
        response = self.client.get('/flatpage_root/sekrit/')
        self.assertRedirects(response, '/accounts/login/?next=/flatpage_root/sekrit/')

    def test_fallback_flatpage(self):
        "A flatpage can be served by the fallback middlware"
        response = self.client.get('/flatpage/')
        self.assertEquals(response.status_code, 200)
        self.assertContains(response, "<p>Isn't it flat!</p>")

    def test_fallback_non_existent_flatpage(self):
        "A non-existent flatpage raises a 404 when served by the fallback middlware"
        response = self.client.get('/no_such_flatpage/')
        self.assertEquals(response.status_code, 404)

    def test_post_view_flatpage(self):
        "POSTing to a flatpage served through a view will raise a CSRF error if no token is provided (Refs #14156)"
        response = self.client.post('/flatpage_root/flatpage/')
        self.assertEquals(response.status_code, 403)

    def test_post_fallback_flatpage(self):
        "POSTing to a flatpage served by the middleware will raise a CSRF error if no token is provided (Refs #14156)"
        response = self.client.post('/flatpage/')
        self.assertEquals(response.status_code, 403)

    def test_post_unknown_page(self):
        "POSTing to an unknown page isn't caught as a 403 CSRF error"
        response = self.client.post('/no_such_page/')
        self.assertEquals(response.status_code, 404)

########NEW FILE########
__FILENAME__ = middleware
import os
from django.conf import settings
from django.test import TestCase

class FlatpageMiddlewareTests(TestCase):
    fixtures = ['sample_flatpages']
    urls = 'django.contrib.flatpages.tests.urls'

    def setUp(self):
        self.old_MIDDLEWARE_CLASSES = settings.MIDDLEWARE_CLASSES
        flatpage_middleware_class = 'django.contrib.flatpages.middleware.FlatpageFallbackMiddleware'
        if flatpage_middleware_class not in settings.MIDDLEWARE_CLASSES:
            settings.MIDDLEWARE_CLASSES += (flatpage_middleware_class,)
        self.old_TEMPLATE_DIRS = settings.TEMPLATE_DIRS
        settings.TEMPLATE_DIRS = (
            os.path.join(
                os.path.dirname(__file__),
                'templates'
            ),
        )
        self.old_LOGIN_URL = settings.LOGIN_URL
        settings.LOGIN_URL = '/accounts/login/'

    def tearDown(self):
        settings.MIDDLEWARE_CLASSES = self.old_MIDDLEWARE_CLASSES
        settings.TEMPLATE_DIRS = self.old_TEMPLATE_DIRS
        settings.LOGIN_URL = self.old_LOGIN_URL

    def test_view_flatpage(self):
        "A flatpage can be served through a view, even when the middleware is in use"
        response = self.client.get('/flatpage_root/flatpage/')
        self.assertEquals(response.status_code, 200)
        self.assertContains(response, "<p>Isn't it flat!</p>")

    def test_view_non_existent_flatpage(self):
        "A non-existent flatpage raises 404 when served through a view, even when the middleware is in use"
        response = self.client.get('/flatpage_root/no_such_flatpage/')
        self.assertEquals(response.status_code, 404)

    def test_view_authenticated_flatpage(self):
        "A flatpage served through a view can require authentication"
        response = self.client.get('/flatpage_root/sekrit/')
        self.assertRedirects(response, '/accounts/login/?next=/flatpage_root/sekrit/')

    def test_fallback_flatpage(self):
        "A flatpage can be served by the fallback middlware"
        response = self.client.get('/flatpage/')
        self.assertEquals(response.status_code, 200)
        self.assertContains(response, "<p>Isn't it flat!</p>")

    def test_fallback_non_existent_flatpage(self):
        "A non-existent flatpage raises a 404 when served by the fallback middlware"
        response = self.client.get('/no_such_flatpage/')
        self.assertEquals(response.status_code, 404)

    def test_fallback_authenticated_flatpage(self):
        "A flatpage served by the middleware can require authentication"
        response = self.client.get('/sekrit/')
        self.assertRedirects(response, '/accounts/login/?next=/sekrit/')

########NEW FILE########
__FILENAME__ = urls
from django.conf.urls.defaults import *

# special urls for flatpage test cases
urlpatterns = patterns('',
    (r'^flatpage_root', include('django.contrib.flatpages.urls')),
    (r'^accounts/', include('django.contrib.auth.urls')),
)


########NEW FILE########
__FILENAME__ = views
import os
from django.conf import settings
from django.test import TestCase

class FlatpageViewTests(TestCase):
    fixtures = ['sample_flatpages']
    urls = 'django.contrib.flatpages.tests.urls'

    def setUp(self):
        self.old_MIDDLEWARE_CLASSES = settings.MIDDLEWARE_CLASSES
        flatpage_middleware_class = 'django.contrib.flatpages.middleware.FlatpageFallbackMiddleware'
        if flatpage_middleware_class in settings.MIDDLEWARE_CLASSES:
            settings.MIDDLEWARE_CLASSES = tuple(m for m in settings.MIDDLEWARE_CLASSES if m != flatpage_middleware_class)
        self.old_TEMPLATE_DIRS = settings.TEMPLATE_DIRS
        settings.TEMPLATE_DIRS = (
            os.path.join(
                os.path.dirname(__file__),
                'templates'
            ),
        )
        self.old_LOGIN_URL = settings.LOGIN_URL
        settings.LOGIN_URL = '/accounts/login/'

    def tearDown(self):
        settings.MIDDLEWARE_CLASSES = self.old_MIDDLEWARE_CLASSES
        settings.TEMPLATE_DIRS = self.old_TEMPLATE_DIRS
        settings.LOGIN_URL = self.old_LOGIN_URL

    def test_view_flatpage(self):
        "A flatpage can be served through a view"
        response = self.client.get('/flatpage_root/flatpage/')
        self.assertEquals(response.status_code, 200)
        self.assertContains(response, "<p>Isn't it flat!</p>")

    def test_view_non_existent_flatpage(self):
        "A non-existent flatpage raises 404 when served through a view"
        response = self.client.get('/flatpage_root/no_such_flatpage/')
        self.assertEquals(response.status_code, 404)

    def test_view_authenticated_flatpage(self):
        "A flatpage served through a view can require authentication"
        response = self.client.get('/flatpage_root/sekrit/')
        self.assertRedirects(response, '/accounts/login/?next=/flatpage_root/sekrit/')

    def test_fallback_flatpage(self):
        "A fallback flatpage won't be served if the middleware is disabled"
        response = self.client.get('/flatpage/')
        self.assertEquals(response.status_code, 404)

    def test_fallback_non_existent_flatpage(self):
        "A non-existent flatpage won't be served if the fallback middlware is disabled"
        response = self.client.get('/no_such_flatpage/')
        self.assertEquals(response.status_code, 404)

########NEW FILE########
__FILENAME__ = urls
from django.conf.urls.defaults import *

urlpatterns = patterns('flatpages.views',
    (r'^(?P<url>.*)$', 'flatpage'),
)

########NEW FILE########
__FILENAME__ = views
from models import FlatPage
from django.template import loader, RequestContext
from django.shortcuts import get_object_or_404
from django.http import HttpResponse, HttpResponseRedirect
from django.conf import settings
from django.core.xheaders import populate_xheaders
from django.utils.safestring import mark_safe
from django.views.decorators.csrf import csrf_protect

DEFAULT_FLATPAGES_TEMPLATE = 'flatpages/default.html'

# This view is called from FlatpageFallbackMiddleware.process_response
# when a 404 is raised, which often means CsrfViewMiddleware.process_view
# has not been called even if CsrfViewMiddleware is installed. So we need
# to use @csrf_protect, in case the template needs {% csrf_token %}.
# However, we can't just wrap this view; if no matching flatpage exists,
# or a redirect is required for authentication, the 404 needs to be returned
# without any CSRF checks. Therefore, we only
# CSRF protect the internal implementation.
def flatpage(request, url):
    """
    Public interface to the flat page view.

    Models: `flatpages.flatpages`
    Templates: Uses the template defined by the ``template_name`` field,
        or `flatpages/default.html` if template_name is not defined.
    Context:
        flatpage
            `flatpages.flatpages` object
    """
    if not url.endswith('/') and settings.APPEND_SLASH:
        return HttpResponseRedirect("%s/" % request.path)
    if not url.startswith('/'):
        url = "/" + url
    f = get_object_or_404(FlatPage, url__exact=url, marketplace__id=request.marketplace.id)
    return render_flatpage(request, f)

@csrf_protect
def render_flatpage(request, f):
    """
    Internal interface to the flat page view.
    """
    # If registration is required for accessing this page, and the user isn't
    # logged in, redirect to the login page.
    DEFAULT_TEMPLATE = "%s/%s" % (request.marketplace.template_prefix, DEFAULT_FLATPAGES_TEMPLATE)
    
    if f.registration_required and not request.user.is_authenticated():
        from django.contrib.auth.views import redirect_to_login
        return redirect_to_login(request.path)
    if f.template_name:
        t = loader.select_template(("%s/%s" % (request.marketplace.template_prefix, f.template_name), 
                                    DEFAULT_TEMPLATE))
    else:
        t = loader.get_template(DEFAULT_TEMPLATE)

    # To avoid having to always use the "|safe" filter in flatpage templates,
    # mark the title and content as already safe (since they are raw HTML
    # content in the first place).
    f.title = mark_safe(f.title)
    f.content = mark_safe(f.content)

    c = RequestContext(request, {
        'flatpage': f,
    })
    response = HttpResponse(t.render(c))
    populate_xheaders(request, response, FlatPage, f.id)
    return response

########NEW FILE########
__FILENAME__ = admin
from django.contrib import admin

from market.models import MarketPlace, MarketPlaceSettings, MarketCategory, MarketSubCategory, MarketMailingListMember,\
    MarketBlogPost, MarketPostCategory, MarketPostComment, MarketPostPick,\
    PrivacyPolicy, TermsAndConditions


class MarketPlaceSettingsInline(admin.StackedInline):
    model = MarketPlaceSettings

class MarketPlaceAdmin(admin.ModelAdmin):
    inlines = [MarketPlaceSettingsInline]


admin.site.register(MarketPlace, MarketPlaceAdmin)
admin.site.register(MarketPostCategory)
admin.site.register(MarketPostComment)
admin.site.register(MarketPostPick)
admin.site.register(MarketCategory)
admin.site.register(MarketSubCategory)
admin.site.register(MarketMailingListMember)


#class PrivacyPolicyAdmin(admin.ModelAdmin):
#    class Media:
#        js = ('js/tiny_mce/tiny_mce.js', 'js/textareas.js')
# 
#class TermsAndConditionsAdmin(admin.ModelAdmin):
#    class Media:
#        js = ('js/tiny_mce/tiny_mce.js', 'js/textareas.js')
#
#class MarketBlogPostAdmin(admin.ModelAdmin):
#    class Media:
#        js = ('js/tiny_mce/tiny_mce.js', 'js/textareas.js')
#
#
#admin.site.register(PrivacyPolicy, PrivacyPolicyAdmin)
#admin.site.register(TermsAndConditions, TermsAndConditionsAdmin)
#admin.site.register(MarketBlogPost, MarketBlogPostAdmin)

admin.site.register(PrivacyPolicy)
admin.site.register(TermsAndConditions)
admin.site.register(MarketBlogPost)

########NEW FILE########
__FILENAME__ = captcha_generators
from models import MarketCategory

def category_captcha():
    return MarketCategory.generate_captcha()

########NEW FILE########
__FILENAME__ = context_processors
from django.conf import settings


def marketplace(request):
    """
        Add current market to the dns
    """
    return {'marketplace': request.marketplace}


########NEW FILE########
__FILENAME__ = forms
from django import forms
from captcha.fields import CaptchaField
from market.models import MarketCategory, MarketSubCategory, MarketMailingListMember, MarketPostComment


class MarketPostCommentForm(forms.ModelForm):
    class Meta:
        model = MarketPostComment 
        exclude = ['user', 'post']


class MarketCategoryForm(forms.ModelForm):
    class Meta:
        model = MarketCategory 
        exclude = ['marketplace']


class MarketSubCategoryForm(forms.ModelForm):
    class Meta:
        model = MarketSubCategory
        fields = ['marketplace', 'slug']
        
#    def __init__(self, request=None, *args, **kwargs):
#        super(MarketSubCategoryForm, self).__init__(*args, **kwargs)
#        # Filter categorys for specific shop 
#        if request:
#            self.marketplace = request.marketplace
#            category = self.fields.get('category')
#            category.queryset = Category.objects.filter(shop=self.shop)

class MarketMailingListMemberForm(forms.ModelForm):
    class Meta:
        model = MarketMailingListMember
        exclude = ['marketplace']

class ContactForm(forms.Form):
    name = forms.CharField()
    phone = forms.CharField()
    email = forms.EmailField()
    message = forms.CharField(widget=forms.Textarea)
    captcha = CaptchaField()

########NEW FILE########
__FILENAME__ = middleware
import logging
from market.models import MarketPlace
import re

MARKETS = {} 
for market in MarketPlace.objects.all():
    MARKETS[market.base_domain] = market

class MarketPlaceMiddleware:

    def process_request(self, request):
        host = request.get_host().split(':')[0]
        request.marketplace = None
        for base_domain, market in MARKETS.iteritems():
            if host.endswith(base_domain):
                request.marketplace = market
                break
            
        if request.marketplace is None:
            request.marketplace = MARKETS.values()[0]

########NEW FILE########
__FILENAME__ = 0001_initial
# encoding: utf-8
import datetime
from south.db import db
from south.v2 import SchemaMigration
from django.db import models

class Migration(SchemaMigration):

    def forwards(self, orm):
        
        # Adding model 'MarketPlace'
        db.create_table('market_marketplace', (
            ('id', self.gf('django.db.models.fields.AutoField')(primary_key=True)),
            ('name', self.gf('django.db.models.fields.CharField')(max_length=92)),
            ('slug', self.gf('django.db.models.fields.SlugField')(unique=True, max_length=92, db_index=True)),
            ('title', self.gf('django.db.models.fields.CharField')(max_length=92)),
            ('base_domain', self.gf('django.db.models.fields.CharField')(unique=True, max_length=128)),
            ('template_prefix', self.gf('django.db.models.fields.SlugField')(unique=True, max_length=92, db_index=True)),
        ))
        db.send_create_signal('market', ['MarketPlace'])

        # Adding model 'MarketCategory'
        db.create_table('market_marketcategory', (
            ('id', self.gf('django.db.models.fields.AutoField')(primary_key=True)),
            ('marketplace', self.gf('django.db.models.fields.related.ForeignKey')(to=orm['market.MarketPlace'])),
            ('name', self.gf('django.db.models.fields.CharField')(max_length=60)),
            ('slug', self.gf('django.db.models.fields.SlugField')(unique=True, max_length=60, db_index=True)),
        ))
        db.send_create_signal('market', ['MarketCategory'])

        # Adding model 'MarketSubCategory'
        db.create_table('market_marketsubcategory', (
            ('id', self.gf('django.db.models.fields.AutoField')(primary_key=True)),
            ('marketplace', self.gf('django.db.models.fields.related.ForeignKey')(to=orm['market.MarketPlace'])),
            ('name', self.gf('django.db.models.fields.CharField')(max_length=60)),
            ('slug', self.gf('django.db.models.fields.SlugField')(max_length=60, db_index=True)),
            ('parent', self.gf('django.db.models.fields.related.ForeignKey')(blank=True, related_name='subcategories', null=True, to=orm['market.MarketCategory'])),
        ))
        db.send_create_signal('market', ['MarketSubCategory'])

        # Adding unique constraint on 'MarketSubCategory', fields ['parent', 'slug']
        db.create_unique('market_marketsubcategory', ['parent_id', 'slug'])


    def backwards(self, orm):
        
        # Deleting model 'MarketPlace'
        db.delete_table('market_marketplace')

        # Deleting model 'MarketCategory'
        db.delete_table('market_marketcategory')

        # Deleting model 'MarketSubCategory'
        db.delete_table('market_marketsubcategory')

        # Removing unique constraint on 'MarketSubCategory', fields ['parent', 'slug']
        db.delete_unique('market_marketsubcategory', ['parent_id', 'slug'])


    models = {
        'market.marketcategory': {
            'Meta': {'object_name': 'MarketCategory'},
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'marketplace': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['market.MarketPlace']"}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '60'}),
            'slug': ('django.db.models.fields.SlugField', [], {'unique': 'True', 'max_length': '60', 'db_index': 'True'})
        },
        'market.marketplace': {
            'Meta': {'object_name': 'MarketPlace'},
            'base_domain': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '128'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '92'}),
            'slug': ('django.db.models.fields.SlugField', [], {'unique': 'True', 'max_length': '92', 'db_index': 'True'}),
            'template_prefix': ('django.db.models.fields.SlugField', [], {'unique': 'True', 'max_length': '92', 'db_index': 'True'}),
            'title': ('django.db.models.fields.CharField', [], {'max_length': '92'})
        },
        'market.marketsubcategory': {
            'Meta': {'unique_together': "(('parent', 'slug'),)", 'object_name': 'MarketSubCategory'},
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'marketplace': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['market.MarketPlace']"}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '60'}),
            'parent': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'subcategories'", 'null': 'True', 'to': "orm['market.MarketCategory']"}),
            'slug': ('django.db.models.fields.SlugField', [], {'max_length': '60', 'db_index': 'True'})
        }
    }

    complete_apps = ['market']

########NEW FILE########
__FILENAME__ = 0002_auto__add_marketmailinglistmember
# encoding: utf-8
import datetime
from south.db import db
from south.v2 import SchemaMigration
from django.db import models

class Migration(SchemaMigration):

    def forwards(self, orm):
        
        # Adding model 'MarketMailingListMember'
        db.create_table('market_marketmailinglistmember', (
            ('id', self.gf('django.db.models.fields.AutoField')(primary_key=True)),
            ('marketplace', self.gf('django.db.models.fields.related.ForeignKey')(to=orm['market.MarketPlace'])),
            ('email', self.gf('django.db.models.fields.EmailField')(max_length=75)),
        ))
        db.send_create_signal('market', ['MarketMailingListMember'])


    def backwards(self, orm):
        
        # Deleting model 'MarketMailingListMember'
        db.delete_table('market_marketmailinglistmember')


    models = {
        'market.marketcategory': {
            'Meta': {'object_name': 'MarketCategory'},
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'marketplace': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['market.MarketPlace']"}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '60'}),
            'slug': ('django.db.models.fields.SlugField', [], {'unique': 'True', 'max_length': '60', 'db_index': 'True'})
        },
        'market.marketmailinglistmember': {
            'Meta': {'object_name': 'MarketMailingListMember'},
            'email': ('django.db.models.fields.EmailField', [], {'max_length': '75'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'marketplace': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['market.MarketPlace']"})
        },
        'market.marketplace': {
            'Meta': {'object_name': 'MarketPlace'},
            'base_domain': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '128'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '92'}),
            'slug': ('django.db.models.fields.SlugField', [], {'unique': 'True', 'max_length': '92', 'db_index': 'True'}),
            'template_prefix': ('django.db.models.fields.SlugField', [], {'unique': 'True', 'max_length': '92', 'db_index': 'True'}),
            'title': ('django.db.models.fields.CharField', [], {'max_length': '92'})
        },
        'market.marketsubcategory': {
            'Meta': {'unique_together': "(('parent', 'slug'),)", 'object_name': 'MarketSubCategory'},
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'marketplace': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['market.MarketPlace']"}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '60'}),
            'parent': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'subcategories'", 'null': 'True', 'to': "orm['market.MarketCategory']"}),
            'slug': ('django.db.models.fields.SlugField', [], {'max_length': '60', 'db_index': 'True'})
        }
    }

    complete_apps = ['market']

########NEW FILE########
__FILENAME__ = 0003_auto__add_field_marketsubcategory_order__add_field_marketcategory_orde
# encoding: utf-8
import datetime
from south.db import db
from south.v2 import SchemaMigration
from django.db import models

class Migration(SchemaMigration):

    def forwards(self, orm):
        
        # Adding field 'MarketSubCategory.order'
        db.add_column('market_marketsubcategory', 'order', self.gf('django.db.models.fields.IntegerField')(default=255), keep_default=False)

        # Adding field 'MarketCategory.order'
        db.add_column('market_marketcategory', 'order', self.gf('django.db.models.fields.IntegerField')(default=255), keep_default=False)


    def backwards(self, orm):
        
        # Deleting field 'MarketSubCategory.order'
        db.delete_column('market_marketsubcategory', 'order')

        # Deleting field 'MarketCategory.order'
        db.delete_column('market_marketcategory', 'order')


    models = {
        'market.marketcategory': {
            'Meta': {'object_name': 'MarketCategory'},
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'marketplace': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['market.MarketPlace']"}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '60'}),
            'order': ('django.db.models.fields.IntegerField', [], {'default': '255'}),
            'slug': ('django.db.models.fields.SlugField', [], {'unique': 'True', 'max_length': '60', 'db_index': 'True'})
        },
        'market.marketmailinglistmember': {
            'Meta': {'object_name': 'MarketMailingListMember'},
            'email': ('django.db.models.fields.EmailField', [], {'max_length': '75'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'marketplace': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['market.MarketPlace']"})
        },
        'market.marketplace': {
            'Meta': {'object_name': 'MarketPlace'},
            'base_domain': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '128'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '92'}),
            'slug': ('django.db.models.fields.SlugField', [], {'unique': 'True', 'max_length': '92', 'db_index': 'True'}),
            'template_prefix': ('django.db.models.fields.SlugField', [], {'unique': 'True', 'max_length': '92', 'db_index': 'True'}),
            'title': ('django.db.models.fields.CharField', [], {'max_length': '92'})
        },
        'market.marketsubcategory': {
            'Meta': {'unique_together': "(('parent', 'slug'),)", 'object_name': 'MarketSubCategory'},
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'marketplace': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['market.MarketPlace']"}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '60'}),
            'order': ('django.db.models.fields.IntegerField', [], {'default': '255'}),
            'parent': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'subcategories'", 'null': 'True', 'to': "orm['market.MarketCategory']"}),
            'slug': ('django.db.models.fields.SlugField', [], {'max_length': '60', 'db_index': 'True'})
        }
    }

    complete_apps = ['market']

########NEW FILE########
__FILENAME__ = 0004_auto__add_marketpostcategory__add_marketblogpost
# encoding: utf-8
import datetime
from south.db import db
from south.v2 import SchemaMigration
from django.db import models

class Migration(SchemaMigration):

    def forwards(self, orm):
        
        # Adding model 'MarketPostCategory'
        db.create_table('market_marketpostcategory', (
            ('id', self.gf('django.db.models.fields.AutoField')(primary_key=True)),
            ('tag', self.gf('django.db.models.fields.CharField')(max_length=80)),
            ('slug', self.gf('django.db.models.fields.SlugField')(unique=True, max_length=80, db_index=True)),
        ))
        db.send_create_signal('market', ['MarketPostCategory'])

        # Adding model 'MarketBlogPost'
        db.create_table('market_marketblogpost', (
            ('id', self.gf('django.db.models.fields.AutoField')(primary_key=True)),
            ('marketplace', self.gf('django.db.models.fields.related.ForeignKey')(to=orm['market.MarketPlace'])),
            ('title', self.gf('django.db.models.fields.CharField')(max_length=60)),
            ('body', self.gf('django.db.models.fields.TextField')()),
            ('posted_on', self.gf('django.db.models.fields.DateTimeField')(auto_now_add=True, blank=True)),
            ('posted_by', self.gf('django.db.models.fields.related.ForeignKey')(to=orm['auth.User'])),
            ('views', self.gf('django.db.models.fields.IntegerField')(default=0)),
            ('allow_comments', self.gf('django.db.models.fields.BooleanField')(default=False, blank=True)),
            ('slug', self.gf('django.db.models.fields.SlugField')(unique=True, max_length=80, db_index=True)),
        ))
        db.send_create_signal('market', ['MarketBlogPost'])


    def backwards(self, orm):
        
        # Deleting model 'MarketPostCategory'
        db.delete_table('market_marketpostcategory')

        # Deleting model 'MarketBlogPost'
        db.delete_table('market_marketblogpost')


    models = {
        'auth.group': {
            'Meta': {'object_name': 'Group'},
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '80'}),
            'permissions': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['auth.Permission']", 'symmetrical': 'False', 'blank': 'True'})
        },
        'auth.permission': {
            'Meta': {'unique_together': "(('content_type', 'codename'),)", 'object_name': 'Permission'},
            'codename': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'content_type': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['contenttypes.ContentType']"}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '50'})
        },
        'auth.user': {
            'Meta': {'object_name': 'User'},
            'date_joined': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
            'email': ('django.db.models.fields.EmailField', [], {'max_length': '75'}),
            'first_name': ('django.db.models.fields.CharField', [], {'max_length': '30', 'blank': 'True'}),
            'groups': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['auth.Group']", 'symmetrical': 'False', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'is_active': ('django.db.models.fields.BooleanField', [], {'default': 'True', 'blank': 'True'}),
            'is_staff': ('django.db.models.fields.BooleanField', [], {'default': 'False', 'blank': 'True'}),
            'is_superuser': ('django.db.models.fields.BooleanField', [], {'default': 'False', 'blank': 'True'}),
            'last_login': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
            'last_name': ('django.db.models.fields.CharField', [], {'max_length': '30', 'blank': 'True'}),
            'password': ('django.db.models.fields.CharField', [], {'max_length': '128'}),
            'user_permissions': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['auth.Permission']", 'symmetrical': 'False', 'blank': 'True'}),
            'username': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '32'})
        },
        'contenttypes.contenttype': {
            'Meta': {'unique_together': "(('app_label', 'model'),)", 'object_name': 'ContentType', 'db_table': "'django_content_type'"},
            'app_label': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'model': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '100'})
        },
        'market.marketblogpost': {
            'Meta': {'object_name': 'MarketBlogPost'},
            'allow_comments': ('django.db.models.fields.BooleanField', [], {'default': 'False', 'blank': 'True'}),
            'body': ('django.db.models.fields.TextField', [], {}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'marketplace': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['market.MarketPlace']"}),
            'posted_by': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['auth.User']"}),
            'posted_on': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'slug': ('django.db.models.fields.SlugField', [], {'unique': 'True', 'max_length': '80', 'db_index': 'True'}),
            'title': ('django.db.models.fields.CharField', [], {'max_length': '60'}),
            'views': ('django.db.models.fields.IntegerField', [], {'default': '0'})
        },
        'market.marketcategory': {
            'Meta': {'object_name': 'MarketCategory'},
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'marketplace': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['market.MarketPlace']"}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '60'}),
            'order': ('django.db.models.fields.IntegerField', [], {'default': '255'}),
            'slug': ('django.db.models.fields.SlugField', [], {'unique': 'True', 'max_length': '60', 'db_index': 'True'})
        },
        'market.marketmailinglistmember': {
            'Meta': {'object_name': 'MarketMailingListMember'},
            'email': ('django.db.models.fields.EmailField', [], {'max_length': '75'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'marketplace': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['market.MarketPlace']"})
        },
        'market.marketplace': {
            'Meta': {'object_name': 'MarketPlace'},
            'base_domain': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '128'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '92'}),
            'slug': ('django.db.models.fields.SlugField', [], {'unique': 'True', 'max_length': '92', 'db_index': 'True'}),
            'template_prefix': ('django.db.models.fields.SlugField', [], {'unique': 'True', 'max_length': '92', 'db_index': 'True'}),
            'title': ('django.db.models.fields.CharField', [], {'max_length': '92'})
        },
        'market.marketpostcategory': {
            'Meta': {'object_name': 'MarketPostCategory'},
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'slug': ('django.db.models.fields.SlugField', [], {'unique': 'True', 'max_length': '80', 'db_index': 'True'}),
            'tag': ('django.db.models.fields.CharField', [], {'max_length': '80'})
        },
        'market.marketsubcategory': {
            'Meta': {'unique_together': "(('parent', 'slug'),)", 'object_name': 'MarketSubCategory'},
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'marketplace': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['market.MarketPlace']"}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '60'}),
            'order': ('django.db.models.fields.IntegerField', [], {'default': '255'}),
            'parent': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'subcategories'", 'null': 'True', 'to': "orm['market.MarketCategory']"}),
            'slug': ('django.db.models.fields.SlugField', [], {'max_length': '60', 'db_index': 'True'})
        }
    }

    complete_apps = ['market']

########NEW FILE########
__FILENAME__ = 0005_auto__add_marketpostcomment
# encoding: utf-8
import datetime
from south.db import db
from south.v2 import SchemaMigration
from django.db import models

class Migration(SchemaMigration):

    def forwards(self, orm):
        
        # Adding model 'MarketPostComment'
        db.create_table('market_marketpostcomment', (
            ('id', self.gf('django.db.models.fields.AutoField')(primary_key=True)),
            ('post', self.gf('django.db.models.fields.related.ForeignKey')(to=orm['market.MarketBlogPost'])),
            ('comment', self.gf('django.db.models.fields.TextField')()),
            ('commented_on', self.gf('django.db.models.fields.DateTimeField')(auto_now_add=True, blank=True)),
            ('user', self.gf('django.db.models.fields.related.ForeignKey')(to=orm['auth.User'])),
        ))
        db.send_create_signal('market', ['MarketPostComment'])


    def backwards(self, orm):
        
        # Deleting model 'MarketPostComment'
        db.delete_table('market_marketpostcomment')


    models = {
        'auth.group': {
            'Meta': {'object_name': 'Group'},
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '80'}),
            'permissions': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['auth.Permission']", 'symmetrical': 'False', 'blank': 'True'})
        },
        'auth.permission': {
            'Meta': {'unique_together': "(('content_type', 'codename'),)", 'object_name': 'Permission'},
            'codename': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'content_type': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['contenttypes.ContentType']"}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '50'})
        },
        'auth.user': {
            'Meta': {'object_name': 'User'},
            'date_joined': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
            'email': ('django.db.models.fields.EmailField', [], {'max_length': '75'}),
            'first_name': ('django.db.models.fields.CharField', [], {'max_length': '30', 'blank': 'True'}),
            'groups': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['auth.Group']", 'symmetrical': 'False', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'is_active': ('django.db.models.fields.BooleanField', [], {'default': 'True', 'blank': 'True'}),
            'is_staff': ('django.db.models.fields.BooleanField', [], {'default': 'False', 'blank': 'True'}),
            'is_superuser': ('django.db.models.fields.BooleanField', [], {'default': 'False', 'blank': 'True'}),
            'last_login': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
            'last_name': ('django.db.models.fields.CharField', [], {'max_length': '30', 'blank': 'True'}),
            'password': ('django.db.models.fields.CharField', [], {'max_length': '128'}),
            'user_permissions': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['auth.Permission']", 'symmetrical': 'False', 'blank': 'True'}),
            'username': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '32'})
        },
        'contenttypes.contenttype': {
            'Meta': {'unique_together': "(('app_label', 'model'),)", 'object_name': 'ContentType', 'db_table': "'django_content_type'"},
            'app_label': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'model': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '100'})
        },
        'market.marketblogpost': {
            'Meta': {'object_name': 'MarketBlogPost'},
            'allow_comments': ('django.db.models.fields.BooleanField', [], {'default': 'False', 'blank': 'True'}),
            'body': ('django.db.models.fields.TextField', [], {}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'marketplace': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['market.MarketPlace']"}),
            'posted_by': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['auth.User']"}),
            'posted_on': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'slug': ('django.db.models.fields.SlugField', [], {'unique': 'True', 'max_length': '80', 'db_index': 'True'}),
            'title': ('django.db.models.fields.CharField', [], {'max_length': '60'}),
            'views': ('django.db.models.fields.IntegerField', [], {'default': '0'})
        },
        'market.marketcategory': {
            'Meta': {'object_name': 'MarketCategory'},
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'marketplace': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['market.MarketPlace']"}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '60'}),
            'order': ('django.db.models.fields.IntegerField', [], {'default': '255'}),
            'slug': ('django.db.models.fields.SlugField', [], {'unique': 'True', 'max_length': '60', 'db_index': 'True'})
        },
        'market.marketmailinglistmember': {
            'Meta': {'object_name': 'MarketMailingListMember'},
            'email': ('django.db.models.fields.EmailField', [], {'max_length': '75'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'marketplace': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['market.MarketPlace']"})
        },
        'market.marketplace': {
            'Meta': {'object_name': 'MarketPlace'},
            'base_domain': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '128'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '92'}),
            'slug': ('django.db.models.fields.SlugField', [], {'unique': 'True', 'max_length': '92', 'db_index': 'True'}),
            'template_prefix': ('django.db.models.fields.SlugField', [], {'unique': 'True', 'max_length': '92', 'db_index': 'True'}),
            'title': ('django.db.models.fields.CharField', [], {'max_length': '92'})
        },
        'market.marketpostcategory': {
            'Meta': {'object_name': 'MarketPostCategory'},
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'slug': ('django.db.models.fields.SlugField', [], {'unique': 'True', 'max_length': '80', 'db_index': 'True'}),
            'tag': ('django.db.models.fields.CharField', [], {'max_length': '80'})
        },
        'market.marketpostcomment': {
            'Meta': {'object_name': 'MarketPostComment'},
            'comment': ('django.db.models.fields.TextField', [], {}),
            'commented_on': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'post': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['market.MarketBlogPost']"}),
            'user': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['auth.User']"})
        },
        'market.marketsubcategory': {
            'Meta': {'unique_together': "(('parent', 'slug'),)", 'object_name': 'MarketSubCategory'},
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'marketplace': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['market.MarketPlace']"}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '60'}),
            'order': ('django.db.models.fields.IntegerField', [], {'default': '255'}),
            'parent': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'subcategories'", 'null': 'True', 'to': "orm['market.MarketCategory']"}),
            'slug': ('django.db.models.fields.SlugField', [], {'max_length': '60', 'db_index': 'True'})
        }
    }

    complete_apps = ['market']

########NEW FILE########
__FILENAME__ = 0006_auto__add_marketpostpick
# encoding: utf-8
import datetime
from south.db import db
from south.v2 import SchemaMigration
from django.db import models

class Migration(SchemaMigration):

    def forwards(self, orm):
        
        # Adding model 'MarketPostPick'
        db.create_table('market_marketpostpick', (
            ('id', self.gf('django.db.models.fields.AutoField')(primary_key=True)),
            ('marketplace', self.gf('django.db.models.fields.related.ForeignKey')(to=orm['market.MarketPlace'])),
            ('post', self.gf('django.db.models.fields.related.ForeignKey')(to=orm['market.MarketBlogPost'])),
            ('order', self.gf('django.db.models.fields.IntegerField')(default=5)),
        ))
        db.send_create_signal('market', ['MarketPostPick'])


    def backwards(self, orm):
        
        # Deleting model 'MarketPostPick'
        db.delete_table('market_marketpostpick')


    models = {
        'auth.group': {
            'Meta': {'object_name': 'Group'},
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '80'}),
            'permissions': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['auth.Permission']", 'symmetrical': 'False', 'blank': 'True'})
        },
        'auth.permission': {
            'Meta': {'unique_together': "(('content_type', 'codename'),)", 'object_name': 'Permission'},
            'codename': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'content_type': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['contenttypes.ContentType']"}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '50'})
        },
        'auth.user': {
            'Meta': {'object_name': 'User'},
            'date_joined': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
            'email': ('django.db.models.fields.EmailField', [], {'max_length': '75'}),
            'first_name': ('django.db.models.fields.CharField', [], {'max_length': '30', 'blank': 'True'}),
            'groups': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['auth.Group']", 'symmetrical': 'False', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'is_active': ('django.db.models.fields.BooleanField', [], {'default': 'True', 'blank': 'True'}),
            'is_staff': ('django.db.models.fields.BooleanField', [], {'default': 'False', 'blank': 'True'}),
            'is_superuser': ('django.db.models.fields.BooleanField', [], {'default': 'False', 'blank': 'True'}),
            'last_login': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
            'last_name': ('django.db.models.fields.CharField', [], {'max_length': '30', 'blank': 'True'}),
            'password': ('django.db.models.fields.CharField', [], {'max_length': '128'}),
            'user_permissions': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['auth.Permission']", 'symmetrical': 'False', 'blank': 'True'}),
            'username': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '32'})
        },
        'contenttypes.contenttype': {
            'Meta': {'unique_together': "(('app_label', 'model'),)", 'object_name': 'ContentType', 'db_table': "'django_content_type'"},
            'app_label': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'model': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '100'})
        },
        'market.marketblogpost': {
            'Meta': {'object_name': 'MarketBlogPost'},
            'allow_comments': ('django.db.models.fields.BooleanField', [], {'default': 'False', 'blank': 'True'}),
            'body': ('django.db.models.fields.TextField', [], {}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'marketplace': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['market.MarketPlace']"}),
            'posted_by': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['auth.User']"}),
            'posted_on': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'slug': ('django.db.models.fields.SlugField', [], {'unique': 'True', 'max_length': '80', 'db_index': 'True'}),
            'title': ('django.db.models.fields.CharField', [], {'max_length': '60'}),
            'views': ('django.db.models.fields.IntegerField', [], {'default': '0'})
        },
        'market.marketcategory': {
            'Meta': {'object_name': 'MarketCategory'},
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'marketplace': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['market.MarketPlace']"}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '60'}),
            'order': ('django.db.models.fields.IntegerField', [], {'default': '255'}),
            'slug': ('django.db.models.fields.SlugField', [], {'unique': 'True', 'max_length': '60', 'db_index': 'True'})
        },
        'market.marketmailinglistmember': {
            'Meta': {'object_name': 'MarketMailingListMember'},
            'email': ('django.db.models.fields.EmailField', [], {'max_length': '75'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'marketplace': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['market.MarketPlace']"})
        },
        'market.marketplace': {
            'Meta': {'object_name': 'MarketPlace'},
            'base_domain': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '128'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '92'}),
            'slug': ('django.db.models.fields.SlugField', [], {'unique': 'True', 'max_length': '92', 'db_index': 'True'}),
            'template_prefix': ('django.db.models.fields.SlugField', [], {'unique': 'True', 'max_length': '92', 'db_index': 'True'}),
            'title': ('django.db.models.fields.CharField', [], {'max_length': '92'})
        },
        'market.marketpostcategory': {
            'Meta': {'object_name': 'MarketPostCategory'},
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'slug': ('django.db.models.fields.SlugField', [], {'unique': 'True', 'max_length': '80', 'db_index': 'True'}),
            'tag': ('django.db.models.fields.CharField', [], {'max_length': '80'})
        },
        'market.marketpostcomment': {
            'Meta': {'object_name': 'MarketPostComment'},
            'comment': ('django.db.models.fields.TextField', [], {}),
            'commented_on': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'post': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['market.MarketBlogPost']"}),
            'user': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['auth.User']"})
        },
        'market.marketpostpick': {
            'Meta': {'object_name': 'MarketPostPick'},
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'marketplace': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['market.MarketPlace']"}),
            'order': ('django.db.models.fields.IntegerField', [], {'default': '5'}),
            'post': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['market.MarketBlogPost']"})
        },
        'market.marketsubcategory': {
            'Meta': {'unique_together': "(('parent', 'slug'),)", 'object_name': 'MarketSubCategory'},
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'marketplace': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['market.MarketPlace']"}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '60'}),
            'order': ('django.db.models.fields.IntegerField', [], {'default': '255'}),
            'parent': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'subcategories'", 'null': 'True', 'to': "orm['market.MarketCategory']"}),
            'slug': ('django.db.models.fields.SlugField', [], {'max_length': '60', 'db_index': 'True'})
        }
    }

    complete_apps = ['market']

########NEW FILE########
__FILENAME__ = 0007_auto__add_field_marketplace_privacy_policy__add_field_marketplace_cont
# encoding: utf-8
import datetime
from south.db import db
from south.v2 import SchemaMigration
from django.db import models

class Migration(SchemaMigration):

    def forwards(self, orm):
        
        # Adding field 'MarketPlace.privacy_policy'
        db.add_column('market_marketplace', 'privacy_policy', self.gf('django.db.models.fields.TextField')(default=''), keep_default=False)

        # Adding field 'MarketPlace.contact_email'
        db.add_column('market_marketplace', 'contact_email', self.gf('django.db.models.fields.EmailField')(default='contact@yourstore.com', max_length=75), keep_default=False)

        # Adding field 'MarketPlace.contact_phone'
        db.add_column('market_marketplace', 'contact_phone', self.gf('django.db.models.fields.CharField')(default='', max_length=128), keep_default=False)

        # Adding field 'MarketPlace.charge_on_card_as'
        db.add_column('market_marketplace', 'charge_on_card_as', self.gf('django.db.models.fields.CharField')(default='', unique=True, max_length=255), keep_default=False)


    def backwards(self, orm):
        
        # Deleting field 'MarketPlace.privacy_policy'
        db.delete_column('market_marketplace', 'privacy_policy')

        # Deleting field 'MarketPlace.contact_email'
        db.delete_column('market_marketplace', 'contact_email')

        # Deleting field 'MarketPlace.contact_phone'
        db.delete_column('market_marketplace', 'contact_phone')

        # Deleting field 'MarketPlace.charge_on_card_as'
        db.delete_column('market_marketplace', 'charge_on_card_as')


    models = {
        'auth.group': {
            'Meta': {'object_name': 'Group'},
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '80'}),
            'permissions': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['auth.Permission']", 'symmetrical': 'False', 'blank': 'True'})
        },
        'auth.permission': {
            'Meta': {'unique_together': "(('content_type', 'codename'),)", 'object_name': 'Permission'},
            'codename': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'content_type': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['contenttypes.ContentType']"}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '50'})
        },
        'auth.user': {
            'Meta': {'object_name': 'User'},
            'date_joined': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
            'email': ('django.db.models.fields.EmailField', [], {'max_length': '75'}),
            'first_name': ('django.db.models.fields.CharField', [], {'max_length': '30', 'blank': 'True'}),
            'groups': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['auth.Group']", 'symmetrical': 'False', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'is_active': ('django.db.models.fields.BooleanField', [], {'default': 'True', 'blank': 'True'}),
            'is_staff': ('django.db.models.fields.BooleanField', [], {'default': 'False', 'blank': 'True'}),
            'is_superuser': ('django.db.models.fields.BooleanField', [], {'default': 'False', 'blank': 'True'}),
            'last_login': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
            'last_name': ('django.db.models.fields.CharField', [], {'max_length': '30', 'blank': 'True'}),
            'password': ('django.db.models.fields.CharField', [], {'max_length': '128'}),
            'user_permissions': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['auth.Permission']", 'symmetrical': 'False', 'blank': 'True'}),
            'username': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '32'})
        },
        'contenttypes.contenttype': {
            'Meta': {'unique_together': "(('app_label', 'model'),)", 'object_name': 'ContentType', 'db_table': "'django_content_type'"},
            'app_label': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'model': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '100'})
        },
        'market.marketblogpost': {
            'Meta': {'object_name': 'MarketBlogPost'},
            'allow_comments': ('django.db.models.fields.BooleanField', [], {'default': 'False', 'blank': 'True'}),
            'body': ('django.db.models.fields.TextField', [], {}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'marketplace': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['market.MarketPlace']"}),
            'posted_by': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['auth.User']"}),
            'posted_on': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'slug': ('django.db.models.fields.SlugField', [], {'unique': 'True', 'max_length': '80', 'db_index': 'True'}),
            'title': ('django.db.models.fields.CharField', [], {'max_length': '60'}),
            'views': ('django.db.models.fields.IntegerField', [], {'default': '0'})
        },
        'market.marketcategory': {
            'Meta': {'object_name': 'MarketCategory'},
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'marketplace': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['market.MarketPlace']"}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '60'}),
            'order': ('django.db.models.fields.IntegerField', [], {'default': '255'}),
            'slug': ('django.db.models.fields.SlugField', [], {'unique': 'True', 'max_length': '60', 'db_index': 'True'})
        },
        'market.marketmailinglistmember': {
            'Meta': {'object_name': 'MarketMailingListMember'},
            'email': ('django.db.models.fields.EmailField', [], {'max_length': '75'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'marketplace': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['market.MarketPlace']"})
        },
        'market.marketplace': {
            'Meta': {'object_name': 'MarketPlace'},
            'base_domain': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '128'}),
            'charge_on_card_as': ('django.db.models.fields.CharField', [], {'default': "''", 'unique': 'True', 'max_length': '255'}),
            'contact_email': ('django.db.models.fields.EmailField', [], {'default': "'contact@yourstore.com'", 'max_length': '75'}),
            'contact_phone': ('django.db.models.fields.CharField', [], {'default': "''", 'max_length': '128'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '92'}),
            'privacy_policy': ('django.db.models.fields.TextField', [], {'default': "''"}),
            'slug': ('django.db.models.fields.SlugField', [], {'unique': 'True', 'max_length': '92', 'db_index': 'True'}),
            'template_prefix': ('django.db.models.fields.SlugField', [], {'unique': 'True', 'max_length': '92', 'db_index': 'True'}),
            'title': ('django.db.models.fields.CharField', [], {'max_length': '92'})
        },
        'market.marketpostcategory': {
            'Meta': {'object_name': 'MarketPostCategory'},
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'slug': ('django.db.models.fields.SlugField', [], {'unique': 'True', 'max_length': '80', 'db_index': 'True'}),
            'tag': ('django.db.models.fields.CharField', [], {'max_length': '80'})
        },
        'market.marketpostcomment': {
            'Meta': {'object_name': 'MarketPostComment'},
            'comment': ('django.db.models.fields.TextField', [], {}),
            'commented_on': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'post': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['market.MarketBlogPost']"}),
            'user': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['auth.User']"})
        },
        'market.marketpostpick': {
            'Meta': {'object_name': 'MarketPostPick'},
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'marketplace': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['market.MarketPlace']"}),
            'order': ('django.db.models.fields.IntegerField', [], {'default': '5'}),
            'post': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['market.MarketBlogPost']"})
        },
        'market.marketsubcategory': {
            'Meta': {'unique_together': "(('parent', 'slug'),)", 'object_name': 'MarketSubCategory'},
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'marketplace': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['market.MarketPlace']"}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '60'}),
            'order': ('django.db.models.fields.IntegerField', [], {'default': '255'}),
            'parent': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'subcategories'", 'null': 'True', 'to': "orm['market.MarketCategory']"}),
            'slug': ('django.db.models.fields.SlugField', [], {'max_length': '60', 'db_index': 'True'})
        }
    }

    complete_apps = ['market']

########NEW FILE########
__FILENAME__ = 0008_auto__add_privacypolice__del_field_marketplace_privacy_policy
# encoding: utf-8
import datetime
from south.db import db
from south.v2 import SchemaMigration
from django.db import models

class Migration(SchemaMigration):

    def forwards(self, orm):
        
        # Adding model 'PrivacyPolice'
        db.create_table('market_privacypolice', (
            ('id', self.gf('django.db.models.fields.AutoField')(primary_key=True)),
            ('marketplace', self.gf('django.db.models.fields.related.ForeignKey')(to=orm['market.MarketPlace'])),
            ('text', self.gf('django.db.models.fields.TextField')(default='')),
        ))
        db.send_create_signal('market', ['PrivacyPolice'])

        # Deleting field 'MarketPlace.privacy_policy'
        db.delete_column('market_marketplace', 'privacy_policy')


    def backwards(self, orm):
        
        # Deleting model 'PrivacyPolice'
        db.delete_table('market_privacypolice')

        # Adding field 'MarketPlace.privacy_policy'
        db.add_column('market_marketplace', 'privacy_policy', self.gf('django.db.models.fields.TextField')(default=''), keep_default=False)


    models = {
        'auth.group': {
            'Meta': {'object_name': 'Group'},
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '80'}),
            'permissions': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['auth.Permission']", 'symmetrical': 'False', 'blank': 'True'})
        },
        'auth.permission': {
            'Meta': {'unique_together': "(('content_type', 'codename'),)", 'object_name': 'Permission'},
            'codename': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'content_type': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['contenttypes.ContentType']"}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '50'})
        },
        'auth.user': {
            'Meta': {'object_name': 'User'},
            'date_joined': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
            'email': ('django.db.models.fields.EmailField', [], {'max_length': '75'}),
            'first_name': ('django.db.models.fields.CharField', [], {'max_length': '30', 'blank': 'True'}),
            'groups': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['auth.Group']", 'symmetrical': 'False', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'is_active': ('django.db.models.fields.BooleanField', [], {'default': 'True', 'blank': 'True'}),
            'is_staff': ('django.db.models.fields.BooleanField', [], {'default': 'False', 'blank': 'True'}),
            'is_superuser': ('django.db.models.fields.BooleanField', [], {'default': 'False', 'blank': 'True'}),
            'last_login': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
            'last_name': ('django.db.models.fields.CharField', [], {'max_length': '30', 'blank': 'True'}),
            'password': ('django.db.models.fields.CharField', [], {'max_length': '128'}),
            'user_permissions': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['auth.Permission']", 'symmetrical': 'False', 'blank': 'True'}),
            'username': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '32'})
        },
        'contenttypes.contenttype': {
            'Meta': {'unique_together': "(('app_label', 'model'),)", 'object_name': 'ContentType', 'db_table': "'django_content_type'"},
            'app_label': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'model': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '100'})
        },
        'market.marketblogpost': {
            'Meta': {'object_name': 'MarketBlogPost'},
            'allow_comments': ('django.db.models.fields.BooleanField', [], {'default': 'False', 'blank': 'True'}),
            'body': ('django.db.models.fields.TextField', [], {}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'marketplace': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['market.MarketPlace']"}),
            'posted_by': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['auth.User']"}),
            'posted_on': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'slug': ('django.db.models.fields.SlugField', [], {'unique': 'True', 'max_length': '80', 'db_index': 'True'}),
            'title': ('django.db.models.fields.CharField', [], {'max_length': '60'}),
            'views': ('django.db.models.fields.IntegerField', [], {'default': '0'})
        },
        'market.marketcategory': {
            'Meta': {'object_name': 'MarketCategory'},
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'marketplace': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['market.MarketPlace']"}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '60'}),
            'order': ('django.db.models.fields.IntegerField', [], {'default': '255'}),
            'slug': ('django.db.models.fields.SlugField', [], {'unique': 'True', 'max_length': '60', 'db_index': 'True'})
        },
        'market.marketmailinglistmember': {
            'Meta': {'object_name': 'MarketMailingListMember'},
            'email': ('django.db.models.fields.EmailField', [], {'max_length': '75'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'marketplace': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['market.MarketPlace']"})
        },
        'market.marketplace': {
            'Meta': {'object_name': 'MarketPlace'},
            'base_domain': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '128'}),
            'charge_on_card_as': ('django.db.models.fields.CharField', [], {'default': "''", 'unique': 'True', 'max_length': '255'}),
            'contact_email': ('django.db.models.fields.EmailField', [], {'default': "'contact@yourstore.com'", 'max_length': '75'}),
            'contact_phone': ('django.db.models.fields.CharField', [], {'default': "''", 'max_length': '128'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '92'}),
            'slug': ('django.db.models.fields.SlugField', [], {'unique': 'True', 'max_length': '92', 'db_index': 'True'}),
            'template_prefix': ('django.db.models.fields.SlugField', [], {'unique': 'True', 'max_length': '92', 'db_index': 'True'}),
            'title': ('django.db.models.fields.CharField', [], {'max_length': '92'})
        },
        'market.marketpostcategory': {
            'Meta': {'object_name': 'MarketPostCategory'},
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'slug': ('django.db.models.fields.SlugField', [], {'unique': 'True', 'max_length': '80', 'db_index': 'True'}),
            'tag': ('django.db.models.fields.CharField', [], {'max_length': '80'})
        },
        'market.marketpostcomment': {
            'Meta': {'object_name': 'MarketPostComment'},
            'comment': ('django.db.models.fields.TextField', [], {}),
            'commented_on': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'post': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['market.MarketBlogPost']"}),
            'user': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['auth.User']"})
        },
        'market.marketpostpick': {
            'Meta': {'object_name': 'MarketPostPick'},
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'marketplace': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['market.MarketPlace']"}),
            'order': ('django.db.models.fields.IntegerField', [], {'default': '5'}),
            'post': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['market.MarketBlogPost']"})
        },
        'market.marketsubcategory': {
            'Meta': {'unique_together': "(('parent', 'slug'),)", 'object_name': 'MarketSubCategory'},
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'marketplace': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['market.MarketPlace']"}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '60'}),
            'order': ('django.db.models.fields.IntegerField', [], {'default': '255'}),
            'parent': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'subcategories'", 'null': 'True', 'to': "orm['market.MarketCategory']"}),
            'slug': ('django.db.models.fields.SlugField', [], {'max_length': '60', 'db_index': 'True'})
        },
        'market.privacypolice': {
            'Meta': {'object_name': 'PrivacyPolice'},
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'marketplace': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['market.MarketPlace']"}),
            'text': ('django.db.models.fields.TextField', [], {'default': "''"})
        }
    }

    complete_apps = ['market']

########NEW FILE########
__FILENAME__ = 0009_auto__del_privacypolice__add_privacypolicy
# encoding: utf-8
import datetime
from south.db import db
from south.v2 import SchemaMigration
from django.db import models

class Migration(SchemaMigration):

    def forwards(self, orm):
        
        # Deleting model 'PrivacyPolice'
        db.delete_table('market_privacypolice')

        # Adding model 'PrivacyPolicy'
        db.create_table('market_privacypolicy', (
            ('id', self.gf('django.db.models.fields.AutoField')(primary_key=True)),
            ('marketplace', self.gf('django.db.models.fields.related.ForeignKey')(to=orm['market.MarketPlace'])),
            ('text', self.gf('django.db.models.fields.TextField')(default='')),
        ))
        db.send_create_signal('market', ['PrivacyPolicy'])


    def backwards(self, orm):
        
        # Adding model 'PrivacyPolice'
        db.create_table('market_privacypolice', (
            ('text', self.gf('django.db.models.fields.TextField')(default='')),
            ('marketplace', self.gf('django.db.models.fields.related.ForeignKey')(to=orm['market.MarketPlace'])),
            ('id', self.gf('django.db.models.fields.AutoField')(primary_key=True)),
        ))
        db.send_create_signal('market', ['PrivacyPolice'])

        # Deleting model 'PrivacyPolicy'
        db.delete_table('market_privacypolicy')


    models = {
        'auth.group': {
            'Meta': {'object_name': 'Group'},
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '80'}),
            'permissions': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['auth.Permission']", 'symmetrical': 'False', 'blank': 'True'})
        },
        'auth.permission': {
            'Meta': {'unique_together': "(('content_type', 'codename'),)", 'object_name': 'Permission'},
            'codename': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'content_type': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['contenttypes.ContentType']"}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '50'})
        },
        'auth.user': {
            'Meta': {'object_name': 'User'},
            'date_joined': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
            'email': ('django.db.models.fields.EmailField', [], {'max_length': '75'}),
            'first_name': ('django.db.models.fields.CharField', [], {'max_length': '30', 'blank': 'True'}),
            'groups': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['auth.Group']", 'symmetrical': 'False', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'is_active': ('django.db.models.fields.BooleanField', [], {'default': 'True', 'blank': 'True'}),
            'is_staff': ('django.db.models.fields.BooleanField', [], {'default': 'False', 'blank': 'True'}),
            'is_superuser': ('django.db.models.fields.BooleanField', [], {'default': 'False', 'blank': 'True'}),
            'last_login': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
            'last_name': ('django.db.models.fields.CharField', [], {'max_length': '30', 'blank': 'True'}),
            'password': ('django.db.models.fields.CharField', [], {'max_length': '128'}),
            'user_permissions': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['auth.Permission']", 'symmetrical': 'False', 'blank': 'True'}),
            'username': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '32'})
        },
        'contenttypes.contenttype': {
            'Meta': {'unique_together': "(('app_label', 'model'),)", 'object_name': 'ContentType', 'db_table': "'django_content_type'"},
            'app_label': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'model': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '100'})
        },
        'market.marketblogpost': {
            'Meta': {'object_name': 'MarketBlogPost'},
            'allow_comments': ('django.db.models.fields.BooleanField', [], {'default': 'False', 'blank': 'True'}),
            'body': ('django.db.models.fields.TextField', [], {}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'marketplace': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['market.MarketPlace']"}),
            'posted_by': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['auth.User']"}),
            'posted_on': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'slug': ('django.db.models.fields.SlugField', [], {'unique': 'True', 'max_length': '80', 'db_index': 'True'}),
            'title': ('django.db.models.fields.CharField', [], {'max_length': '60'}),
            'views': ('django.db.models.fields.IntegerField', [], {'default': '0'})
        },
        'market.marketcategory': {
            'Meta': {'object_name': 'MarketCategory'},
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'marketplace': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['market.MarketPlace']"}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '60'}),
            'order': ('django.db.models.fields.IntegerField', [], {'default': '255'}),
            'slug': ('django.db.models.fields.SlugField', [], {'unique': 'True', 'max_length': '60', 'db_index': 'True'})
        },
        'market.marketmailinglistmember': {
            'Meta': {'object_name': 'MarketMailingListMember'},
            'email': ('django.db.models.fields.EmailField', [], {'max_length': '75'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'marketplace': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['market.MarketPlace']"})
        },
        'market.marketplace': {
            'Meta': {'object_name': 'MarketPlace'},
            'base_domain': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '128'}),
            'charge_on_card_as': ('django.db.models.fields.CharField', [], {'default': "''", 'unique': 'True', 'max_length': '255'}),
            'contact_email': ('django.db.models.fields.EmailField', [], {'default': "'contact@yourstore.com'", 'max_length': '75'}),
            'contact_phone': ('django.db.models.fields.CharField', [], {'default': "''", 'max_length': '128'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '92'}),
            'slug': ('django.db.models.fields.SlugField', [], {'unique': 'True', 'max_length': '92', 'db_index': 'True'}),
            'template_prefix': ('django.db.models.fields.SlugField', [], {'unique': 'True', 'max_length': '92', 'db_index': 'True'}),
            'title': ('django.db.models.fields.CharField', [], {'max_length': '92'})
        },
        'market.marketpostcategory': {
            'Meta': {'object_name': 'MarketPostCategory'},
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'slug': ('django.db.models.fields.SlugField', [], {'unique': 'True', 'max_length': '80', 'db_index': 'True'}),
            'tag': ('django.db.models.fields.CharField', [], {'max_length': '80'})
        },
        'market.marketpostcomment': {
            'Meta': {'object_name': 'MarketPostComment'},
            'comment': ('django.db.models.fields.TextField', [], {}),
            'commented_on': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'post': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['market.MarketBlogPost']"}),
            'user': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['auth.User']"})
        },
        'market.marketpostpick': {
            'Meta': {'object_name': 'MarketPostPick'},
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'marketplace': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['market.MarketPlace']"}),
            'order': ('django.db.models.fields.IntegerField', [], {'default': '5'}),
            'post': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['market.MarketBlogPost']"})
        },
        'market.marketsubcategory': {
            'Meta': {'unique_together': "(('parent', 'slug'),)", 'object_name': 'MarketSubCategory'},
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'marketplace': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['market.MarketPlace']"}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '60'}),
            'order': ('django.db.models.fields.IntegerField', [], {'default': '255'}),
            'parent': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'subcategories'", 'null': 'True', 'to': "orm['market.MarketCategory']"}),
            'slug': ('django.db.models.fields.SlugField', [], {'max_length': '60', 'db_index': 'True'})
        },
        'market.privacypolicy': {
            'Meta': {'object_name': 'PrivacyPolicy'},
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'marketplace': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['market.MarketPlace']"}),
            'text': ('django.db.models.fields.TextField', [], {'default': "''"})
        }
    }

    complete_apps = ['market']

########NEW FILE########
__FILENAME__ = 0010_auto__add_termsandconditions
# encoding: utf-8
import datetime
from south.db import db
from south.v2 import SchemaMigration
from django.db import models

class Migration(SchemaMigration):

    def forwards(self, orm):
        
        # Adding model 'TermsAndConditions'
        db.create_table('market_termsandconditions', (
            ('id', self.gf('django.db.models.fields.AutoField')(primary_key=True)),
            ('marketplace', self.gf('django.db.models.fields.related.ForeignKey')(to=orm['market.MarketPlace'])),
            ('text', self.gf('django.db.models.fields.TextField')(default='')),
        ))
        db.send_create_signal('market', ['TermsAndConditions'])


    def backwards(self, orm):
        
        # Deleting model 'TermsAndConditions'
        db.delete_table('market_termsandconditions')


    models = {
        'auth.group': {
            'Meta': {'object_name': 'Group'},
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '80'}),
            'permissions': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['auth.Permission']", 'symmetrical': 'False', 'blank': 'True'})
        },
        'auth.permission': {
            'Meta': {'unique_together': "(('content_type', 'codename'),)", 'object_name': 'Permission'},
            'codename': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'content_type': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['contenttypes.ContentType']"}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '50'})
        },
        'auth.user': {
            'Meta': {'object_name': 'User'},
            'date_joined': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
            'email': ('django.db.models.fields.EmailField', [], {'max_length': '75'}),
            'first_name': ('django.db.models.fields.CharField', [], {'max_length': '30', 'blank': 'True'}),
            'groups': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['auth.Group']", 'symmetrical': 'False', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'is_active': ('django.db.models.fields.BooleanField', [], {'default': 'True', 'blank': 'True'}),
            'is_staff': ('django.db.models.fields.BooleanField', [], {'default': 'False', 'blank': 'True'}),
            'is_superuser': ('django.db.models.fields.BooleanField', [], {'default': 'False', 'blank': 'True'}),
            'last_login': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
            'last_name': ('django.db.models.fields.CharField', [], {'max_length': '30', 'blank': 'True'}),
            'password': ('django.db.models.fields.CharField', [], {'max_length': '128'}),
            'user_permissions': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['auth.Permission']", 'symmetrical': 'False', 'blank': 'True'}),
            'username': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '32'})
        },
        'contenttypes.contenttype': {
            'Meta': {'unique_together': "(('app_label', 'model'),)", 'object_name': 'ContentType', 'db_table': "'django_content_type'"},
            'app_label': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'model': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '100'})
        },
        'market.marketblogpost': {
            'Meta': {'object_name': 'MarketBlogPost'},
            'allow_comments': ('django.db.models.fields.BooleanField', [], {'default': 'False', 'blank': 'True'}),
            'body': ('django.db.models.fields.TextField', [], {}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'marketplace': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['market.MarketPlace']"}),
            'posted_by': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['auth.User']"}),
            'posted_on': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'slug': ('django.db.models.fields.SlugField', [], {'unique': 'True', 'max_length': '80', 'db_index': 'True'}),
            'title': ('django.db.models.fields.CharField', [], {'max_length': '60'}),
            'views': ('django.db.models.fields.IntegerField', [], {'default': '0'})
        },
        'market.marketcategory': {
            'Meta': {'object_name': 'MarketCategory'},
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'marketplace': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['market.MarketPlace']"}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '60'}),
            'order': ('django.db.models.fields.IntegerField', [], {'default': '255'}),
            'slug': ('django.db.models.fields.SlugField', [], {'unique': 'True', 'max_length': '60', 'db_index': 'True'})
        },
        'market.marketmailinglistmember': {
            'Meta': {'object_name': 'MarketMailingListMember'},
            'email': ('django.db.models.fields.EmailField', [], {'max_length': '75'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'marketplace': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['market.MarketPlace']"})
        },
        'market.marketplace': {
            'Meta': {'object_name': 'MarketPlace'},
            'base_domain': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '128'}),
            'charge_on_card_as': ('django.db.models.fields.CharField', [], {'default': "''", 'unique': 'True', 'max_length': '255'}),
            'contact_email': ('django.db.models.fields.EmailField', [], {'default': "'contact@yourstore.com'", 'max_length': '75'}),
            'contact_phone': ('django.db.models.fields.CharField', [], {'default': "''", 'max_length': '128'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '92'}),
            'slug': ('django.db.models.fields.SlugField', [], {'unique': 'True', 'max_length': '92', 'db_index': 'True'}),
            'template_prefix': ('django.db.models.fields.SlugField', [], {'unique': 'True', 'max_length': '92', 'db_index': 'True'}),
            'title': ('django.db.models.fields.CharField', [], {'max_length': '92'})
        },
        'market.marketpostcategory': {
            'Meta': {'object_name': 'MarketPostCategory'},
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'slug': ('django.db.models.fields.SlugField', [], {'unique': 'True', 'max_length': '80', 'db_index': 'True'}),
            'tag': ('django.db.models.fields.CharField', [], {'max_length': '80'})
        },
        'market.marketpostcomment': {
            'Meta': {'object_name': 'MarketPostComment'},
            'comment': ('django.db.models.fields.TextField', [], {}),
            'commented_on': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'post': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['market.MarketBlogPost']"}),
            'user': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['auth.User']"})
        },
        'market.marketpostpick': {
            'Meta': {'object_name': 'MarketPostPick'},
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'marketplace': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['market.MarketPlace']"}),
            'order': ('django.db.models.fields.IntegerField', [], {'default': '5'}),
            'post': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['market.MarketBlogPost']"})
        },
        'market.marketsubcategory': {
            'Meta': {'unique_together': "(('parent', 'slug'),)", 'object_name': 'MarketSubCategory'},
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'marketplace': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['market.MarketPlace']"}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '60'}),
            'order': ('django.db.models.fields.IntegerField', [], {'default': '255'}),
            'parent': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'subcategories'", 'null': 'True', 'to': "orm['market.MarketCategory']"}),
            'slug': ('django.db.models.fields.SlugField', [], {'max_length': '60', 'db_index': 'True'})
        },
        'market.privacypolicy': {
            'Meta': {'object_name': 'PrivacyPolicy'},
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'marketplace': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['market.MarketPlace']"}),
            'text': ('django.db.models.fields.TextField', [], {'default': "''"})
        },
        'market.termsandconditions': {
            'Meta': {'object_name': 'TermsAndConditions'},
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'marketplace': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['market.MarketPlace']"}),
            'text': ('django.db.models.fields.TextField', [], {'default': "''"})
        }
    }

    complete_apps = ['market']

########NEW FILE########
__FILENAME__ = 0011_auto__del_unique_marketplace_charge_on_card_as
# encoding: utf-8
import datetime
from south.db import db
from south.v2 import SchemaMigration
from django.db import models

class Migration(SchemaMigration):

    def forwards(self, orm):
        
        # Removing unique constraint on 'MarketPlace', fields ['charge_on_card_as']
        db.delete_unique('market_marketplace', ['charge_on_card_as'])


    def backwards(self, orm):
        
        # Adding unique constraint on 'MarketPlace', fields ['charge_on_card_as']
        db.create_unique('market_marketplace', ['charge_on_card_as'])


    models = {
        'auth.group': {
            'Meta': {'object_name': 'Group'},
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '80'}),
            'permissions': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['auth.Permission']", 'symmetrical': 'False', 'blank': 'True'})
        },
        'auth.permission': {
            'Meta': {'unique_together': "(('content_type', 'codename'),)", 'object_name': 'Permission'},
            'codename': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'content_type': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['contenttypes.ContentType']"}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '50'})
        },
        'auth.user': {
            'Meta': {'object_name': 'User'},
            'date_joined': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
            'email': ('django.db.models.fields.EmailField', [], {'max_length': '75'}),
            'first_name': ('django.db.models.fields.CharField', [], {'max_length': '30', 'blank': 'True'}),
            'groups': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['auth.Group']", 'symmetrical': 'False', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'is_active': ('django.db.models.fields.BooleanField', [], {'default': 'True', 'blank': 'True'}),
            'is_staff': ('django.db.models.fields.BooleanField', [], {'default': 'False', 'blank': 'True'}),
            'is_superuser': ('django.db.models.fields.BooleanField', [], {'default': 'False', 'blank': 'True'}),
            'last_login': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
            'last_name': ('django.db.models.fields.CharField', [], {'max_length': '30', 'blank': 'True'}),
            'password': ('django.db.models.fields.CharField', [], {'max_length': '128'}),
            'user_permissions': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['auth.Permission']", 'symmetrical': 'False', 'blank': 'True'}),
            'username': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '32'})
        },
        'contenttypes.contenttype': {
            'Meta': {'unique_together': "(('app_label', 'model'),)", 'object_name': 'ContentType', 'db_table': "'django_content_type'"},
            'app_label': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'model': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '100'})
        },
        'market.marketblogpost': {
            'Meta': {'object_name': 'MarketBlogPost'},
            'allow_comments': ('django.db.models.fields.BooleanField', [], {'default': 'False', 'blank': 'True'}),
            'body': ('django.db.models.fields.TextField', [], {}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'marketplace': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['market.MarketPlace']"}),
            'posted_by': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['auth.User']"}),
            'posted_on': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'slug': ('django.db.models.fields.SlugField', [], {'unique': 'True', 'max_length': '80', 'db_index': 'True'}),
            'title': ('django.db.models.fields.CharField', [], {'max_length': '60'}),
            'views': ('django.db.models.fields.IntegerField', [], {'default': '0'})
        },
        'market.marketcategory': {
            'Meta': {'object_name': 'MarketCategory'},
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'marketplace': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['market.MarketPlace']"}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '60'}),
            'order': ('django.db.models.fields.IntegerField', [], {'default': '255'}),
            'slug': ('django.db.models.fields.SlugField', [], {'unique': 'True', 'max_length': '60', 'db_index': 'True'})
        },
        'market.marketmailinglistmember': {
            'Meta': {'object_name': 'MarketMailingListMember'},
            'email': ('django.db.models.fields.EmailField', [], {'max_length': '75'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'marketplace': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['market.MarketPlace']"})
        },
        'market.marketplace': {
            'Meta': {'object_name': 'MarketPlace'},
            'base_domain': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '128'}),
            'charge_on_card_as': ('django.db.models.fields.CharField', [], {'default': "''", 'max_length': '255'}),
            'contact_email': ('django.db.models.fields.EmailField', [], {'default': "'contact@yourstore.com'", 'max_length': '75'}),
            'contact_phone': ('django.db.models.fields.CharField', [], {'default': "''", 'max_length': '128'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '92'}),
            'slug': ('django.db.models.fields.SlugField', [], {'unique': 'True', 'max_length': '92', 'db_index': 'True'}),
            'template_prefix': ('django.db.models.fields.SlugField', [], {'unique': 'True', 'max_length': '92', 'db_index': 'True'}),
            'title': ('django.db.models.fields.CharField', [], {'max_length': '92'})
        },
        'market.marketpostcategory': {
            'Meta': {'object_name': 'MarketPostCategory'},
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'slug': ('django.db.models.fields.SlugField', [], {'unique': 'True', 'max_length': '80', 'db_index': 'True'}),
            'tag': ('django.db.models.fields.CharField', [], {'max_length': '80'})
        },
        'market.marketpostcomment': {
            'Meta': {'object_name': 'MarketPostComment'},
            'comment': ('django.db.models.fields.TextField', [], {}),
            'commented_on': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'post': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['market.MarketBlogPost']"}),
            'user': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['auth.User']"})
        },
        'market.marketpostpick': {
            'Meta': {'object_name': 'MarketPostPick'},
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'marketplace': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['market.MarketPlace']"}),
            'order': ('django.db.models.fields.IntegerField', [], {'default': '5'}),
            'post': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['market.MarketBlogPost']"})
        },
        'market.marketsubcategory': {
            'Meta': {'unique_together': "(('parent', 'slug'),)", 'object_name': 'MarketSubCategory'},
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'marketplace': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['market.MarketPlace']"}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '60'}),
            'order': ('django.db.models.fields.IntegerField', [], {'default': '255'}),
            'parent': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'subcategories'", 'null': 'True', 'to': "orm['market.MarketCategory']"}),
            'slug': ('django.db.models.fields.SlugField', [], {'max_length': '60', 'db_index': 'True'})
        },
        'market.privacypolicy': {
            'Meta': {'object_name': 'PrivacyPolicy'},
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'marketplace': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['market.MarketPlace']"}),
            'text': ('django.db.models.fields.TextField', [], {'default': "''"})
        },
        'market.termsandconditions': {
            'Meta': {'object_name': 'TermsAndConditions'},
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'marketplace': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['market.MarketPlace']"}),
            'text': ('django.db.models.fields.TextField', [], {'default': "''"})
        }
    }

    complete_apps = ['market']

########NEW FILE########
__FILENAME__ = 0012_auto__add_contactforminfo
# encoding: utf-8
import datetime
from south.db import db
from south.v2 import SchemaMigration
from django.db import models

class Migration(SchemaMigration):

    def forwards(self, orm):
        
        # Adding model 'ContactFormInfo'
        db.create_table('market_contactforminfo', (
            ('id', self.gf('django.db.models.fields.AutoField')(primary_key=True)),
            ('datetime', self.gf('django.db.models.fields.DateTimeField')(auto_now=True, blank=True)),
            ('email', self.gf('django.db.models.fields.EmailField')(max_length=64, null=True)),
            ('ip', self.gf('django.db.models.fields.CharField')(max_length=64)),
        ))
        db.send_create_signal('market', ['ContactFormInfo'])


    def backwards(self, orm):
        
        # Deleting model 'ContactFormInfo'
        db.delete_table('market_contactforminfo')


    models = {
        'auth.group': {
            'Meta': {'object_name': 'Group'},
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '80'}),
            'permissions': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['auth.Permission']", 'symmetrical': 'False', 'blank': 'True'})
        },
        'auth.permission': {
            'Meta': {'unique_together': "(('content_type', 'codename'),)", 'object_name': 'Permission'},
            'codename': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'content_type': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['contenttypes.ContentType']"}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '50'})
        },
        'auth.user': {
            'Meta': {'object_name': 'User'},
            'date_joined': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
            'email': ('django.db.models.fields.EmailField', [], {'max_length': '75'}),
            'first_name': ('django.db.models.fields.CharField', [], {'max_length': '30', 'blank': 'True'}),
            'groups': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['auth.Group']", 'symmetrical': 'False', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'is_active': ('django.db.models.fields.BooleanField', [], {'default': 'True', 'blank': 'True'}),
            'is_staff': ('django.db.models.fields.BooleanField', [], {'default': 'False', 'blank': 'True'}),
            'is_superuser': ('django.db.models.fields.BooleanField', [], {'default': 'False', 'blank': 'True'}),
            'last_login': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
            'last_name': ('django.db.models.fields.CharField', [], {'max_length': '30', 'blank': 'True'}),
            'password': ('django.db.models.fields.CharField', [], {'max_length': '128'}),
            'user_permissions': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['auth.Permission']", 'symmetrical': 'False', 'blank': 'True'}),
            'username': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '32'})
        },
        'contenttypes.contenttype': {
            'Meta': {'unique_together': "(('app_label', 'model'),)", 'object_name': 'ContentType', 'db_table': "'django_content_type'"},
            'app_label': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'model': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '100'})
        },
        'market.contactforminfo': {
            'Meta': {'object_name': 'ContactFormInfo'},
            'datetime': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'blank': 'True'}),
            'email': ('django.db.models.fields.EmailField', [], {'max_length': '64', 'null': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'ip': ('django.db.models.fields.CharField', [], {'max_length': '64'})
        },
        'market.marketblogpost': {
            'Meta': {'object_name': 'MarketBlogPost'},
            'allow_comments': ('django.db.models.fields.BooleanField', [], {'default': 'False', 'blank': 'True'}),
            'body': ('django.db.models.fields.TextField', [], {}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'marketplace': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['market.MarketPlace']"}),
            'posted_by': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['auth.User']"}),
            'posted_on': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'slug': ('django.db.models.fields.SlugField', [], {'unique': 'True', 'max_length': '80', 'db_index': 'True'}),
            'title': ('django.db.models.fields.CharField', [], {'max_length': '60'}),
            'views': ('django.db.models.fields.IntegerField', [], {'default': '0'})
        },
        'market.marketcategory': {
            'Meta': {'object_name': 'MarketCategory'},
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'marketplace': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['market.MarketPlace']"}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '60'}),
            'order': ('django.db.models.fields.IntegerField', [], {'default': '255'}),
            'slug': ('django.db.models.fields.SlugField', [], {'unique': 'True', 'max_length': '60', 'db_index': 'True'})
        },
        'market.marketmailinglistmember': {
            'Meta': {'object_name': 'MarketMailingListMember'},
            'email': ('django.db.models.fields.EmailField', [], {'max_length': '75'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'marketplace': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['market.MarketPlace']"})
        },
        'market.marketplace': {
            'Meta': {'object_name': 'MarketPlace'},
            'base_domain': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '128'}),
            'charge_on_card_as': ('django.db.models.fields.CharField', [], {'default': "''", 'max_length': '255'}),
            'contact_email': ('django.db.models.fields.EmailField', [], {'default': "'contact@yourstore.com'", 'max_length': '75'}),
            'contact_phone': ('django.db.models.fields.CharField', [], {'default': "''", 'max_length': '128'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '92'}),
            'slug': ('django.db.models.fields.SlugField', [], {'unique': 'True', 'max_length': '92', 'db_index': 'True'}),
            'template_prefix': ('django.db.models.fields.SlugField', [], {'unique': 'True', 'max_length': '92', 'db_index': 'True'}),
            'title': ('django.db.models.fields.CharField', [], {'max_length': '92'})
        },
        'market.marketpostcategory': {
            'Meta': {'object_name': 'MarketPostCategory'},
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'slug': ('django.db.models.fields.SlugField', [], {'unique': 'True', 'max_length': '80', 'db_index': 'True'}),
            'tag': ('django.db.models.fields.CharField', [], {'max_length': '80'})
        },
        'market.marketpostcomment': {
            'Meta': {'object_name': 'MarketPostComment'},
            'comment': ('django.db.models.fields.TextField', [], {}),
            'commented_on': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'post': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['market.MarketBlogPost']"}),
            'user': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['auth.User']"})
        },
        'market.marketpostpick': {
            'Meta': {'object_name': 'MarketPostPick'},
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'marketplace': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['market.MarketPlace']"}),
            'order': ('django.db.models.fields.IntegerField', [], {'default': '5'}),
            'post': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['market.MarketBlogPost']"})
        },
        'market.marketsubcategory': {
            'Meta': {'unique_together': "(('parent', 'slug'),)", 'object_name': 'MarketSubCategory'},
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'marketplace': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['market.MarketPlace']"}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '60'}),
            'order': ('django.db.models.fields.IntegerField', [], {'default': '255'}),
            'parent': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'subcategories'", 'null': 'True', 'to': "orm['market.MarketCategory']"}),
            'slug': ('django.db.models.fields.SlugField', [], {'max_length': '60', 'db_index': 'True'})
        },
        'market.privacypolicy': {
            'Meta': {'object_name': 'PrivacyPolicy'},
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'marketplace': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['market.MarketPlace']"}),
            'text': ('django.db.models.fields.TextField', [], {'default': "''"})
        },
        'market.termsandconditions': {
            'Meta': {'object_name': 'TermsAndConditions'},
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'marketplace': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['market.MarketPlace']"}),
            'text': ('django.db.models.fields.TextField', [], {'default': "''"})
        }
    }

    complete_apps = ['market']

########NEW FILE########
__FILENAME__ = 0013_auto__add_field_marketsubcategory_image__add_field_marketcategory_imag
# encoding: utf-8
import datetime
from south.db import db
from south.v2 import SchemaMigration
from django.db import models

class Migration(SchemaMigration):

    def forwards(self, orm):
        
        # Adding field 'MarketSubCategory.image'
        db.add_column('market_marketsubcategory', 'image', self.gf('core.thumbs.ImageWithThumbsField')(max_length=100, null=True, blank=True), keep_default=False)

        # Adding field 'MarketCategory.image'
        db.add_column('market_marketcategory', 'image', self.gf('core.thumbs.ImageWithThumbsField')(max_length=100, null=True, blank=True), keep_default=False)


    def backwards(self, orm):
        
        # Deleting field 'MarketSubCategory.image'
        db.delete_column('market_marketsubcategory', 'image')

        # Deleting field 'MarketCategory.image'
        db.delete_column('market_marketcategory', 'image')


    models = {
        'auth.group': {
            'Meta': {'object_name': 'Group'},
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '80'}),
            'permissions': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['auth.Permission']", 'symmetrical': 'False', 'blank': 'True'})
        },
        'auth.permission': {
            'Meta': {'unique_together': "(('content_type', 'codename'),)", 'object_name': 'Permission'},
            'codename': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'content_type': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['contenttypes.ContentType']"}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '50'})
        },
        'auth.user': {
            'Meta': {'object_name': 'User'},
            'date_joined': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
            'email': ('django.db.models.fields.EmailField', [], {'max_length': '75'}),
            'first_name': ('django.db.models.fields.CharField', [], {'max_length': '30', 'blank': 'True'}),
            'groups': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['auth.Group']", 'symmetrical': 'False', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'is_active': ('django.db.models.fields.BooleanField', [], {'default': 'True', 'blank': 'True'}),
            'is_staff': ('django.db.models.fields.BooleanField', [], {'default': 'False', 'blank': 'True'}),
            'is_superuser': ('django.db.models.fields.BooleanField', [], {'default': 'False', 'blank': 'True'}),
            'last_login': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
            'last_name': ('django.db.models.fields.CharField', [], {'max_length': '30', 'blank': 'True'}),
            'password': ('django.db.models.fields.CharField', [], {'max_length': '128'}),
            'user_permissions': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['auth.Permission']", 'symmetrical': 'False', 'blank': 'True'}),
            'username': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '32'})
        },
        'contenttypes.contenttype': {
            'Meta': {'unique_together': "(('app_label', 'model'),)", 'object_name': 'ContentType', 'db_table': "'django_content_type'"},
            'app_label': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'model': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '100'})
        },
        'market.contactforminfo': {
            'Meta': {'object_name': 'ContactFormInfo'},
            'datetime': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'blank': 'True'}),
            'email': ('django.db.models.fields.EmailField', [], {'max_length': '64', 'null': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'ip': ('django.db.models.fields.CharField', [], {'max_length': '64'})
        },
        'market.marketblogpost': {
            'Meta': {'object_name': 'MarketBlogPost'},
            'allow_comments': ('django.db.models.fields.BooleanField', [], {'default': 'False', 'blank': 'True'}),
            'body': ('django.db.models.fields.TextField', [], {}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'marketplace': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['market.MarketPlace']"}),
            'posted_by': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['auth.User']"}),
            'posted_on': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'slug': ('django.db.models.fields.SlugField', [], {'unique': 'True', 'max_length': '80', 'db_index': 'True'}),
            'title': ('django.db.models.fields.CharField', [], {'max_length': '60'}),
            'views': ('django.db.models.fields.IntegerField', [], {'default': '0'})
        },
        'market.marketcategory': {
            'Meta': {'object_name': 'MarketCategory'},
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'image': ('core.thumbs.ImageWithThumbsField', [], {'max_length': '100', 'null': 'True', 'blank': 'True'}),
            'marketplace': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['market.MarketPlace']"}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '60'}),
            'order': ('django.db.models.fields.IntegerField', [], {'default': '255'}),
            'slug': ('django.db.models.fields.SlugField', [], {'unique': 'True', 'max_length': '60', 'db_index': 'True'})
        },
        'market.marketmailinglistmember': {
            'Meta': {'object_name': 'MarketMailingListMember'},
            'email': ('django.db.models.fields.EmailField', [], {'max_length': '75'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'marketplace': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['market.MarketPlace']"})
        },
        'market.marketplace': {
            'Meta': {'object_name': 'MarketPlace'},
            'base_domain': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '128'}),
            'charge_on_card_as': ('django.db.models.fields.CharField', [], {'default': "''", 'max_length': '255'}),
            'contact_email': ('django.db.models.fields.EmailField', [], {'default': "'contact@yourstore.com'", 'max_length': '75'}),
            'contact_phone': ('django.db.models.fields.CharField', [], {'default': "''", 'max_length': '128'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '92'}),
            'slug': ('django.db.models.fields.SlugField', [], {'unique': 'True', 'max_length': '92', 'db_index': 'True'}),
            'template_prefix': ('django.db.models.fields.SlugField', [], {'unique': 'True', 'max_length': '92', 'db_index': 'True'}),
            'title': ('django.db.models.fields.CharField', [], {'max_length': '92'})
        },
        'market.marketpostcategory': {
            'Meta': {'object_name': 'MarketPostCategory'},
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'slug': ('django.db.models.fields.SlugField', [], {'unique': 'True', 'max_length': '80', 'db_index': 'True'}),
            'tag': ('django.db.models.fields.CharField', [], {'max_length': '80'})
        },
        'market.marketpostcomment': {
            'Meta': {'object_name': 'MarketPostComment'},
            'comment': ('django.db.models.fields.TextField', [], {}),
            'commented_on': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'post': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['market.MarketBlogPost']"}),
            'user': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['auth.User']"})
        },
        'market.marketpostpick': {
            'Meta': {'object_name': 'MarketPostPick'},
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'marketplace': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['market.MarketPlace']"}),
            'order': ('django.db.models.fields.IntegerField', [], {'default': '5'}),
            'post': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['market.MarketBlogPost']"})
        },
        'market.marketsubcategory': {
            'Meta': {'unique_together': "(('parent', 'slug'),)", 'object_name': 'MarketSubCategory'},
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'image': ('core.thumbs.ImageWithThumbsField', [], {'max_length': '100', 'null': 'True', 'blank': 'True'}),
            'marketplace': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['market.MarketPlace']"}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '60'}),
            'order': ('django.db.models.fields.IntegerField', [], {'default': '255'}),
            'parent': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'subcategories'", 'null': 'True', 'to': "orm['market.MarketCategory']"}),
            'slug': ('django.db.models.fields.SlugField', [], {'max_length': '60', 'db_index': 'True'})
        },
        'market.privacypolicy': {
            'Meta': {'object_name': 'PrivacyPolicy'},
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'marketplace': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['market.MarketPlace']"}),
            'text': ('django.db.models.fields.TextField', [], {'default': "''"})
        },
        'market.termsandconditions': {
            'Meta': {'object_name': 'TermsAndConditions'},
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'marketplace': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['market.MarketPlace']"}),
            'text': ('django.db.models.fields.TextField', [], {'default': "''"})
        }
    }

    complete_apps = ['market']

########NEW FILE########
__FILENAME__ = 0014_auto__add_field_contactforminfo_marketplace
# encoding: utf-8
import datetime
from south.db import db
from south.v2 import SchemaMigration
from django.db import models

class Migration(SchemaMigration):

    def forwards(self, orm):
        
        # Adding field 'ContactFormInfo.marketplace'
        db.add_column('market_contactforminfo', 'marketplace', self.gf('django.db.models.fields.related.ForeignKey')(default=1, to=orm['market.MarketPlace']), keep_default=False)


    def backwards(self, orm):
        
        # Deleting field 'ContactFormInfo.marketplace'
        db.delete_column('market_contactforminfo', 'marketplace_id')


    models = {
        'auth.group': {
            'Meta': {'object_name': 'Group'},
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '80'}),
            'permissions': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['auth.Permission']", 'symmetrical': 'False', 'blank': 'True'})
        },
        'auth.permission': {
            'Meta': {'unique_together': "(('content_type', 'codename'),)", 'object_name': 'Permission'},
            'codename': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'content_type': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['contenttypes.ContentType']"}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '50'})
        },
        'auth.user': {
            'Meta': {'object_name': 'User'},
            'date_joined': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
            'email': ('django.db.models.fields.EmailField', [], {'max_length': '75'}),
            'first_name': ('django.db.models.fields.CharField', [], {'max_length': '30', 'blank': 'True'}),
            'groups': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['auth.Group']", 'symmetrical': 'False', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'is_active': ('django.db.models.fields.BooleanField', [], {'default': 'True', 'blank': 'True'}),
            'is_staff': ('django.db.models.fields.BooleanField', [], {'default': 'False', 'blank': 'True'}),
            'is_superuser': ('django.db.models.fields.BooleanField', [], {'default': 'False', 'blank': 'True'}),
            'last_login': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
            'last_name': ('django.db.models.fields.CharField', [], {'max_length': '30', 'blank': 'True'}),
            'password': ('django.db.models.fields.CharField', [], {'max_length': '128'}),
            'user_permissions': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['auth.Permission']", 'symmetrical': 'False', 'blank': 'True'}),
            'username': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '32'})
        },
        'contenttypes.contenttype': {
            'Meta': {'unique_together': "(('app_label', 'model'),)", 'object_name': 'ContentType', 'db_table': "'django_content_type'"},
            'app_label': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'model': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '100'})
        },
        'market.contactforminfo': {
            'Meta': {'object_name': 'ContactFormInfo'},
            'datetime': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'blank': 'True'}),
            'email': ('django.db.models.fields.EmailField', [], {'max_length': '64', 'null': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'ip': ('django.db.models.fields.CharField', [], {'max_length': '64'}),
            'marketplace': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['market.MarketPlace']"})
        },
        'market.marketblogpost': {
            'Meta': {'object_name': 'MarketBlogPost'},
            'allow_comments': ('django.db.models.fields.BooleanField', [], {'default': 'False', 'blank': 'True'}),
            'body': ('django.db.models.fields.TextField', [], {}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'marketplace': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['market.MarketPlace']"}),
            'posted_by': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['auth.User']"}),
            'posted_on': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'slug': ('django.db.models.fields.SlugField', [], {'unique': 'True', 'max_length': '80', 'db_index': 'True'}),
            'title': ('django.db.models.fields.CharField', [], {'max_length': '60'}),
            'views': ('django.db.models.fields.IntegerField', [], {'default': '0'})
        },
        'market.marketcategory': {
            'Meta': {'object_name': 'MarketCategory'},
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'image': ('core.thumbs.ImageWithThumbsField', [], {'max_length': '100', 'null': 'True', 'blank': 'True'}),
            'marketplace': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['market.MarketPlace']"}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '60'}),
            'order': ('django.db.models.fields.IntegerField', [], {'default': '255'}),
            'slug': ('django.db.models.fields.SlugField', [], {'unique': 'True', 'max_length': '60', 'db_index': 'True'})
        },
        'market.marketmailinglistmember': {
            'Meta': {'object_name': 'MarketMailingListMember'},
            'email': ('django.db.models.fields.EmailField', [], {'max_length': '75'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'marketplace': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['market.MarketPlace']"})
        },
        'market.marketplace': {
            'Meta': {'object_name': 'MarketPlace'},
            'base_domain': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '128'}),
            'charge_on_card_as': ('django.db.models.fields.CharField', [], {'default': "''", 'max_length': '255'}),
            'contact_email': ('django.db.models.fields.EmailField', [], {'default': "'contact@yourstore.com'", 'max_length': '75'}),
            'contact_phone': ('django.db.models.fields.CharField', [], {'default': "''", 'max_length': '128'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '92'}),
            'slug': ('django.db.models.fields.SlugField', [], {'unique': 'True', 'max_length': '92', 'db_index': 'True'}),
            'template_prefix': ('django.db.models.fields.SlugField', [], {'unique': 'True', 'max_length': '92', 'db_index': 'True'}),
            'title': ('django.db.models.fields.CharField', [], {'max_length': '92'})
        },
        'market.marketpostcategory': {
            'Meta': {'object_name': 'MarketPostCategory'},
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'slug': ('django.db.models.fields.SlugField', [], {'unique': 'True', 'max_length': '80', 'db_index': 'True'}),
            'tag': ('django.db.models.fields.CharField', [], {'max_length': '80'})
        },
        'market.marketpostcomment': {
            'Meta': {'object_name': 'MarketPostComment'},
            'comment': ('django.db.models.fields.TextField', [], {}),
            'commented_on': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'post': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['market.MarketBlogPost']"}),
            'user': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['auth.User']"})
        },
        'market.marketpostpick': {
            'Meta': {'object_name': 'MarketPostPick'},
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'marketplace': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['market.MarketPlace']"}),
            'order': ('django.db.models.fields.IntegerField', [], {'default': '5'}),
            'post': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['market.MarketBlogPost']"})
        },
        'market.marketsubcategory': {
            'Meta': {'unique_together': "(('parent', 'slug'),)", 'object_name': 'MarketSubCategory'},
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'image': ('core.thumbs.ImageWithThumbsField', [], {'max_length': '100', 'null': 'True', 'blank': 'True'}),
            'marketplace': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['market.MarketPlace']"}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '60'}),
            'order': ('django.db.models.fields.IntegerField', [], {'default': '255'}),
            'parent': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'subcategories'", 'null': 'True', 'to': "orm['market.MarketCategory']"}),
            'slug': ('django.db.models.fields.SlugField', [], {'max_length': '60', 'db_index': 'True'})
        },
        'market.privacypolicy': {
            'Meta': {'object_name': 'PrivacyPolicy'},
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'marketplace': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['market.MarketPlace']"}),
            'text': ('django.db.models.fields.TextField', [], {'default': "''"})
        },
        'market.termsandconditions': {
            'Meta': {'object_name': 'TermsAndConditions'},
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'marketplace': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['market.MarketPlace']"}),
            'text': ('django.db.models.fields.TextField', [], {'default': "''"})
        }
    }

    complete_apps = ['market']

########NEW FILE########
__FILENAME__ = 0015_auto__add_field_marketblogpost_post_to_twitter
# encoding: utf-8
import datetime
from south.db import db
from south.v2 import SchemaMigration
from django.db import models

class Migration(SchemaMigration):

    def forwards(self, orm):
        
        # Adding field 'MarketBlogPost.post_to_twitter'
        db.add_column('market_marketblogpost', 'post_to_twitter', self.gf('django.db.models.fields.BooleanField')(default=True, blank=True), keep_default=False)


    def backwards(self, orm):
        
        # Deleting field 'MarketBlogPost.post_to_twitter'
        db.delete_column('market_marketblogpost', 'post_to_twitter')


    models = {
        'auth.group': {
            'Meta': {'object_name': 'Group'},
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '80'}),
            'permissions': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['auth.Permission']", 'symmetrical': 'False', 'blank': 'True'})
        },
        'auth.permission': {
            'Meta': {'unique_together': "(('content_type', 'codename'),)", 'object_name': 'Permission'},
            'codename': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'content_type': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['contenttypes.ContentType']"}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '50'})
        },
        'auth.user': {
            'Meta': {'object_name': 'User'},
            'date_joined': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
            'email': ('django.db.models.fields.EmailField', [], {'max_length': '75'}),
            'first_name': ('django.db.models.fields.CharField', [], {'max_length': '30', 'blank': 'True'}),
            'groups': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['auth.Group']", 'symmetrical': 'False', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'is_active': ('django.db.models.fields.BooleanField', [], {'default': 'True', 'blank': 'True'}),
            'is_staff': ('django.db.models.fields.BooleanField', [], {'default': 'False', 'blank': 'True'}),
            'is_superuser': ('django.db.models.fields.BooleanField', [], {'default': 'False', 'blank': 'True'}),
            'last_login': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
            'last_name': ('django.db.models.fields.CharField', [], {'max_length': '30', 'blank': 'True'}),
            'password': ('django.db.models.fields.CharField', [], {'max_length': '128'}),
            'user_permissions': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['auth.Permission']", 'symmetrical': 'False', 'blank': 'True'}),
            'username': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '32'})
        },
        'contenttypes.contenttype': {
            'Meta': {'unique_together': "(('app_label', 'model'),)", 'object_name': 'ContentType', 'db_table': "'django_content_type'"},
            'app_label': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'model': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '100'})
        },
        'market.contactforminfo': {
            'Meta': {'object_name': 'ContactFormInfo'},
            'datetime': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'blank': 'True'}),
            'email': ('django.db.models.fields.EmailField', [], {'max_length': '64', 'null': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'ip': ('django.db.models.fields.CharField', [], {'max_length': '64'}),
            'marketplace': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['market.MarketPlace']"})
        },
        'market.marketblogpost': {
            'Meta': {'object_name': 'MarketBlogPost'},
            'allow_comments': ('django.db.models.fields.BooleanField', [], {'default': 'False', 'blank': 'True'}),
            'body': ('django.db.models.fields.TextField', [], {}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'marketplace': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['market.MarketPlace']"}),
            'post_to_twitter': ('django.db.models.fields.BooleanField', [], {'default': 'True', 'blank': 'True'}),
            'posted_by': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['auth.User']"}),
            'posted_on': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'slug': ('django.db.models.fields.SlugField', [], {'unique': 'True', 'max_length': '80', 'db_index': 'True'}),
            'title': ('django.db.models.fields.CharField', [], {'max_length': '60'}),
            'views': ('django.db.models.fields.IntegerField', [], {'default': '0'})
        },
        'market.marketcategory': {
            'Meta': {'object_name': 'MarketCategory'},
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'image': ('core.thumbs.ImageWithThumbsField', [], {'max_length': '100', 'null': 'True', 'blank': 'True'}),
            'marketplace': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['market.MarketPlace']"}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '60'}),
            'order': ('django.db.models.fields.IntegerField', [], {'default': '255'}),
            'slug': ('django.db.models.fields.SlugField', [], {'unique': 'True', 'max_length': '60', 'db_index': 'True'})
        },
        'market.marketmailinglistmember': {
            'Meta': {'object_name': 'MarketMailingListMember'},
            'email': ('django.db.models.fields.EmailField', [], {'max_length': '75'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'marketplace': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['market.MarketPlace']"})
        },
        'market.marketplace': {
            'Meta': {'object_name': 'MarketPlace'},
            'base_domain': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '128'}),
            'charge_on_card_as': ('django.db.models.fields.CharField', [], {'default': "''", 'max_length': '255'}),
            'contact_email': ('django.db.models.fields.EmailField', [], {'default': "'contact@yourstore.com'", 'max_length': '75'}),
            'contact_phone': ('django.db.models.fields.CharField', [], {'default': "''", 'max_length': '128'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '92'}),
            'slug': ('django.db.models.fields.SlugField', [], {'unique': 'True', 'max_length': '92', 'db_index': 'True'}),
            'template_prefix': ('django.db.models.fields.SlugField', [], {'unique': 'True', 'max_length': '92', 'db_index': 'True'}),
            'title': ('django.db.models.fields.CharField', [], {'max_length': '92'})
        },
        'market.marketpostcategory': {
            'Meta': {'object_name': 'MarketPostCategory'},
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'slug': ('django.db.models.fields.SlugField', [], {'unique': 'True', 'max_length': '80', 'db_index': 'True'}),
            'tag': ('django.db.models.fields.CharField', [], {'max_length': '80'})
        },
        'market.marketpostcomment': {
            'Meta': {'object_name': 'MarketPostComment'},
            'comment': ('django.db.models.fields.TextField', [], {}),
            'commented_on': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'post': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['market.MarketBlogPost']"}),
            'user': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['auth.User']"})
        },
        'market.marketpostpick': {
            'Meta': {'object_name': 'MarketPostPick'},
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'marketplace': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['market.MarketPlace']"}),
            'order': ('django.db.models.fields.IntegerField', [], {'default': '5'}),
            'post': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['market.MarketBlogPost']"})
        },
        'market.marketsubcategory': {
            'Meta': {'unique_together': "(('parent', 'slug'),)", 'object_name': 'MarketSubCategory'},
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'image': ('core.thumbs.ImageWithThumbsField', [], {'max_length': '100', 'null': 'True', 'blank': 'True'}),
            'marketplace': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['market.MarketPlace']"}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '60'}),
            'order': ('django.db.models.fields.IntegerField', [], {'default': '255'}),
            'parent': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'subcategories'", 'null': 'True', 'to': "orm['market.MarketCategory']"}),
            'slug': ('django.db.models.fields.SlugField', [], {'max_length': '60', 'db_index': 'True'})
        },
        'market.privacypolicy': {
            'Meta': {'object_name': 'PrivacyPolicy'},
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'marketplace': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['market.MarketPlace']"}),
            'text': ('django.db.models.fields.TextField', [], {'default': "''"})
        },
        'market.termsandconditions': {
            'Meta': {'object_name': 'TermsAndConditions'},
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'marketplace': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['market.MarketPlace']"}),
            'text': ('django.db.models.fields.TextField', [], {'default': "''"})
        }
    }

    complete_apps = ['market']

########NEW FILE########
__FILENAME__ = 0016_auto__add_marketplacesettings
# encoding: utf-8
import datetime
from south.db import db
from south.v2 import SchemaMigration
from django.db import models

class Migration(SchemaMigration):

    def forwards(self, orm):
        
        # Adding model 'MarketPlaceSettings'
        db.create_table('market_marketplacesettings', (
            ('id', self.gf('django.db.models.fields.AutoField')(primary_key=True)),
            ('marketplace', self.gf('django.db.models.fields.related.OneToOneField')(to=orm['market.MarketPlace'], unique=True)),
            ('twitter_maxlength', self.gf('django.db.models.fields.IntegerField')(default=140)),
            ('twitter_consumer_key', self.gf('django.db.models.fields.CharField')(max_length=255, null=True, blank=True)),
            ('twitter_consumer_secret', self.gf('django.db.models.fields.CharField')(max_length=255, null=True, blank=True)),
            ('twitter_access_token', self.gf('django.db.models.fields.CharField')(max_length=255, null=True, blank=True)),
            ('twitter_access_token_secret', self.gf('django.db.models.fields.CharField')(max_length=255, null=True, blank=True)),
        ))
        db.send_create_signal('market', ['MarketPlaceSettings'])


    def backwards(self, orm):
        
        # Deleting model 'MarketPlaceSettings'
        db.delete_table('market_marketplacesettings')


    models = {
        'auth.group': {
            'Meta': {'object_name': 'Group'},
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '80'}),
            'permissions': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['auth.Permission']", 'symmetrical': 'False', 'blank': 'True'})
        },
        'auth.permission': {
            'Meta': {'unique_together': "(('content_type', 'codename'),)", 'object_name': 'Permission'},
            'codename': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'content_type': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['contenttypes.ContentType']"}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '50'})
        },
        'auth.user': {
            'Meta': {'object_name': 'User'},
            'date_joined': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
            'email': ('django.db.models.fields.EmailField', [], {'max_length': '75', 'blank': 'True'}),
            'first_name': ('django.db.models.fields.CharField', [], {'max_length': '30', 'blank': 'True'}),
            'groups': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['auth.Group']", 'symmetrical': 'False', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'is_active': ('django.db.models.fields.BooleanField', [], {'default': 'True', 'blank': 'True'}),
            'is_staff': ('django.db.models.fields.BooleanField', [], {'default': 'False', 'blank': 'True'}),
            'is_superuser': ('django.db.models.fields.BooleanField', [], {'default': 'False', 'blank': 'True'}),
            'last_login': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
            'last_name': ('django.db.models.fields.CharField', [], {'max_length': '30', 'blank': 'True'}),
            'password': ('django.db.models.fields.CharField', [], {'max_length': '128'}),
            'user_permissions': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['auth.Permission']", 'symmetrical': 'False', 'blank': 'True'}),
            'username': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '30'})
        },
        'contenttypes.contenttype': {
            'Meta': {'unique_together': "(('app_label', 'model'),)", 'object_name': 'ContentType', 'db_table': "'django_content_type'"},
            'app_label': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'model': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '100'})
        },
        'market.contactforminfo': {
            'Meta': {'object_name': 'ContactFormInfo'},
            'datetime': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'blank': 'True'}),
            'email': ('django.db.models.fields.EmailField', [], {'max_length': '64', 'null': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'ip': ('django.db.models.fields.CharField', [], {'max_length': '64'}),
            'marketplace': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['market.MarketPlace']"})
        },
        'market.marketblogpost': {
            'Meta': {'object_name': 'MarketBlogPost'},
            'allow_comments': ('django.db.models.fields.BooleanField', [], {'default': 'False', 'blank': 'True'}),
            'body': ('django.db.models.fields.TextField', [], {}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'marketplace': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['market.MarketPlace']"}),
            'post_to_twitter': ('django.db.models.fields.BooleanField', [], {'default': 'True', 'blank': 'True'}),
            'posted_by': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['auth.User']"}),
            'posted_on': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'slug': ('django.db.models.fields.SlugField', [], {'unique': 'True', 'max_length': '80', 'db_index': 'True'}),
            'title': ('django.db.models.fields.CharField', [], {'max_length': '60'}),
            'views': ('django.db.models.fields.IntegerField', [], {'default': '0'})
        },
        'market.marketcategory': {
            'Meta': {'object_name': 'MarketCategory'},
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'image': ('core.thumbs.ImageWithThumbsField', [], {'max_length': '100', 'null': 'True', 'blank': 'True'}),
            'marketplace': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['market.MarketPlace']"}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '60'}),
            'order': ('django.db.models.fields.IntegerField', [], {'default': '255'}),
            'slug': ('django.db.models.fields.SlugField', [], {'unique': 'True', 'max_length': '60', 'db_index': 'True'})
        },
        'market.marketmailinglistmember': {
            'Meta': {'object_name': 'MarketMailingListMember'},
            'email': ('django.db.models.fields.EmailField', [], {'max_length': '75'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'marketplace': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['market.MarketPlace']"})
        },
        'market.marketplace': {
            'Meta': {'object_name': 'MarketPlace'},
            'base_domain': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '128'}),
            'charge_on_card_as': ('django.db.models.fields.CharField', [], {'default': "''", 'max_length': '255'}),
            'contact_email': ('django.db.models.fields.EmailField', [], {'default': "'contact@yourstore.com'", 'max_length': '75'}),
            'contact_phone': ('django.db.models.fields.CharField', [], {'default': "''", 'max_length': '128'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '92'}),
            'slug': ('django.db.models.fields.SlugField', [], {'unique': 'True', 'max_length': '92', 'db_index': 'True'}),
            'template_prefix': ('django.db.models.fields.SlugField', [], {'unique': 'True', 'max_length': '92', 'db_index': 'True'}),
            'title': ('django.db.models.fields.CharField', [], {'max_length': '92'})
        },
        'market.marketplacesettings': {
            'Meta': {'object_name': 'MarketPlaceSettings'},
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'marketplace': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['market.MarketPlace']", 'unique': 'True'}),
            'twitter_access_token': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True', 'blank': 'True'}),
            'twitter_access_token_secret': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True', 'blank': 'True'}),
            'twitter_consumer_key': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True', 'blank': 'True'}),
            'twitter_consumer_secret': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True', 'blank': 'True'}),
            'twitter_maxlength': ('django.db.models.fields.IntegerField', [], {'default': '140'})
        },
        'market.marketpostcategory': {
            'Meta': {'object_name': 'MarketPostCategory'},
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'slug': ('django.db.models.fields.SlugField', [], {'unique': 'True', 'max_length': '80', 'db_index': 'True'}),
            'tag': ('django.db.models.fields.CharField', [], {'max_length': '80'})
        },
        'market.marketpostcomment': {
            'Meta': {'object_name': 'MarketPostComment'},
            'comment': ('django.db.models.fields.TextField', [], {}),
            'commented_on': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'post': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['market.MarketBlogPost']"}),
            'user': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['auth.User']"})
        },
        'market.marketpostpick': {
            'Meta': {'object_name': 'MarketPostPick'},
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'marketplace': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['market.MarketPlace']"}),
            'order': ('django.db.models.fields.IntegerField', [], {'default': '5'}),
            'post': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['market.MarketBlogPost']"})
        },
        'market.marketsubcategory': {
            'Meta': {'unique_together': "(('parent', 'slug'),)", 'object_name': 'MarketSubCategory'},
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'image': ('core.thumbs.ImageWithThumbsField', [], {'max_length': '100', 'null': 'True', 'blank': 'True'}),
            'marketplace': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['market.MarketPlace']"}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '60'}),
            'order': ('django.db.models.fields.IntegerField', [], {'default': '255'}),
            'parent': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'subcategories'", 'null': 'True', 'to': "orm['market.MarketCategory']"}),
            'slug': ('django.db.models.fields.SlugField', [], {'max_length': '60', 'db_index': 'True'})
        },
        'market.privacypolicy': {
            'Meta': {'object_name': 'PrivacyPolicy'},
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'marketplace': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['market.MarketPlace']"}),
            'text': ('django.db.models.fields.TextField', [], {'default': "''"})
        },
        'market.termsandconditions': {
            'Meta': {'object_name': 'TermsAndConditions'},
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'marketplace': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['market.MarketPlace']"}),
            'text': ('django.db.models.fields.TextField', [], {'default': "''"})
        }
    }

    complete_apps = ['market']

########NEW FILE########
__FILENAME__ = 0017_auto__chg_field_marketplacesettings_twitter_maxlength
# encoding: utf-8
import datetime
from south.db import db
from south.v2 import SchemaMigration
from django.db import models

class Migration(SchemaMigration):

    def forwards(self, orm):
        
        # Changing field 'MarketPlaceSettings.twitter_maxlength'
        db.alter_column('market_marketplacesettings', 'twitter_maxlength', self.gf('django.db.models.fields.IntegerField')(null=True, blank=True))


    def backwards(self, orm):
        
        # Changing field 'MarketPlaceSettings.twitter_maxlength'
        db.alter_column('market_marketplacesettings', 'twitter_maxlength', self.gf('django.db.models.fields.IntegerField')())


    models = {
        'auth.group': {
            'Meta': {'object_name': 'Group'},
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '80'}),
            'permissions': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['auth.Permission']", 'symmetrical': 'False', 'blank': 'True'})
        },
        'auth.permission': {
            'Meta': {'unique_together': "(('content_type', 'codename'),)", 'object_name': 'Permission'},
            'codename': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'content_type': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['contenttypes.ContentType']"}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '50'})
        },
        'auth.user': {
            'Meta': {'object_name': 'User'},
            'date_joined': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
            'email': ('django.db.models.fields.EmailField', [], {'max_length': '75', 'blank': 'True'}),
            'first_name': ('django.db.models.fields.CharField', [], {'max_length': '30', 'blank': 'True'}),
            'groups': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['auth.Group']", 'symmetrical': 'False', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'is_active': ('django.db.models.fields.BooleanField', [], {'default': 'True', 'blank': 'True'}),
            'is_staff': ('django.db.models.fields.BooleanField', [], {'default': 'False', 'blank': 'True'}),
            'is_superuser': ('django.db.models.fields.BooleanField', [], {'default': 'False', 'blank': 'True'}),
            'last_login': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
            'last_name': ('django.db.models.fields.CharField', [], {'max_length': '30', 'blank': 'True'}),
            'password': ('django.db.models.fields.CharField', [], {'max_length': '128'}),
            'user_permissions': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['auth.Permission']", 'symmetrical': 'False', 'blank': 'True'}),
            'username': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '30'})
        },
        'contenttypes.contenttype': {
            'Meta': {'unique_together': "(('app_label', 'model'),)", 'object_name': 'ContentType', 'db_table': "'django_content_type'"},
            'app_label': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'model': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '100'})
        },
        'market.contactforminfo': {
            'Meta': {'object_name': 'ContactFormInfo'},
            'datetime': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'blank': 'True'}),
            'email': ('django.db.models.fields.EmailField', [], {'max_length': '64', 'null': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'ip': ('django.db.models.fields.CharField', [], {'max_length': '64'}),
            'marketplace': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['market.MarketPlace']"})
        },
        'market.marketblogpost': {
            'Meta': {'object_name': 'MarketBlogPost'},
            'allow_comments': ('django.db.models.fields.BooleanField', [], {'default': 'False', 'blank': 'True'}),
            'body': ('django.db.models.fields.TextField', [], {}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'marketplace': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['market.MarketPlace']"}),
            'post_to_twitter': ('django.db.models.fields.BooleanField', [], {'default': 'True', 'blank': 'True'}),
            'posted_by': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['auth.User']"}),
            'posted_on': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'slug': ('django.db.models.fields.SlugField', [], {'unique': 'True', 'max_length': '80', 'db_index': 'True'}),
            'title': ('django.db.models.fields.CharField', [], {'max_length': '60'}),
            'views': ('django.db.models.fields.IntegerField', [], {'default': '0'})
        },
        'market.marketcategory': {
            'Meta': {'object_name': 'MarketCategory'},
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'image': ('core.thumbs.ImageWithThumbsField', [], {'max_length': '100', 'null': 'True', 'blank': 'True'}),
            'marketplace': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['market.MarketPlace']"}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '60'}),
            'order': ('django.db.models.fields.IntegerField', [], {'default': '255'}),
            'slug': ('django.db.models.fields.SlugField', [], {'unique': 'True', 'max_length': '60', 'db_index': 'True'})
        },
        'market.marketmailinglistmember': {
            'Meta': {'object_name': 'MarketMailingListMember'},
            'email': ('django.db.models.fields.EmailField', [], {'max_length': '75'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'marketplace': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['market.MarketPlace']"})
        },
        'market.marketplace': {
            'Meta': {'object_name': 'MarketPlace'},
            'base_domain': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '128'}),
            'charge_on_card_as': ('django.db.models.fields.CharField', [], {'default': "''", 'max_length': '255'}),
            'contact_email': ('django.db.models.fields.EmailField', [], {'default': "'contact@yourstore.com'", 'max_length': '75'}),
            'contact_phone': ('django.db.models.fields.CharField', [], {'default': "''", 'max_length': '128'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '92'}),
            'slug': ('django.db.models.fields.SlugField', [], {'unique': 'True', 'max_length': '92', 'db_index': 'True'}),
            'template_prefix': ('django.db.models.fields.SlugField', [], {'unique': 'True', 'max_length': '92', 'db_index': 'True'}),
            'title': ('django.db.models.fields.CharField', [], {'max_length': '92'})
        },
        'market.marketplacesettings': {
            'Meta': {'object_name': 'MarketPlaceSettings'},
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'marketplace': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['market.MarketPlace']", 'unique': 'True'}),
            'twitter_access_token': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True', 'blank': 'True'}),
            'twitter_access_token_secret': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True', 'blank': 'True'}),
            'twitter_consumer_key': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True', 'blank': 'True'}),
            'twitter_consumer_secret': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True', 'blank': 'True'}),
            'twitter_maxlength': ('django.db.models.fields.IntegerField', [], {'default': '140', 'null': 'True', 'blank': 'True'})
        },
        'market.marketpostcategory': {
            'Meta': {'object_name': 'MarketPostCategory'},
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'slug': ('django.db.models.fields.SlugField', [], {'unique': 'True', 'max_length': '80', 'db_index': 'True'}),
            'tag': ('django.db.models.fields.CharField', [], {'max_length': '80'})
        },
        'market.marketpostcomment': {
            'Meta': {'object_name': 'MarketPostComment'},
            'comment': ('django.db.models.fields.TextField', [], {}),
            'commented_on': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'post': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['market.MarketBlogPost']"}),
            'user': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['auth.User']"})
        },
        'market.marketpostpick': {
            'Meta': {'object_name': 'MarketPostPick'},
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'marketplace': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['market.MarketPlace']"}),
            'order': ('django.db.models.fields.IntegerField', [], {'default': '5'}),
            'post': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['market.MarketBlogPost']"})
        },
        'market.marketsubcategory': {
            'Meta': {'unique_together': "(('parent', 'slug'),)", 'object_name': 'MarketSubCategory'},
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'image': ('core.thumbs.ImageWithThumbsField', [], {'max_length': '100', 'null': 'True', 'blank': 'True'}),
            'marketplace': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['market.MarketPlace']"}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '60'}),
            'order': ('django.db.models.fields.IntegerField', [], {'default': '255'}),
            'parent': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'subcategories'", 'null': 'True', 'to': "orm['market.MarketCategory']"}),
            'slug': ('django.db.models.fields.SlugField', [], {'max_length': '60', 'db_index': 'True'})
        },
        'market.privacypolicy': {
            'Meta': {'object_name': 'PrivacyPolicy'},
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'marketplace': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['market.MarketPlace']"}),
            'text': ('django.db.models.fields.TextField', [], {'default': "''"})
        },
        'market.termsandconditions': {
            'Meta': {'object_name': 'TermsAndConditions'},
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'marketplace': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['market.MarketPlace']"}),
            'text': ('django.db.models.fields.TextField', [], {'default': "''"})
        }
    }

    complete_apps = ['market']

########NEW FILE########
__FILENAME__ = models
import random
import logging
import twitter
from auth.models import User
from bitlyapi import bitly

from django.core.urlresolvers import reverse
from django.contrib import admin
from django.db import models
from django.template.defaultfilters import slugify
from core.thumbs import ImageWithThumbsField
from django.conf import settings

class MarketPlace(models.Model):
    #length  
    name = models.CharField(max_length=92)
    slug = models.SlugField(max_length=92, unique=True)
    title = models.CharField(max_length=92)
    base_domain =  models.CharField(max_length=128, help_text="example: greatcoins.com", unique=True)
    contact_email = models.EmailField(help_text="This email will be shown in the contact us page", default="contact@yourstore.com")
    contact_phone = models.CharField(max_length=128, help_text="This phone will be shown in the contact us page", default="")
    charge_on_card_as = models.CharField(max_length=255, help_text="Collector City LLC", default="")
    template_prefix = models.SlugField(max_length=92, help_text="example: greatcoins", unique=True)
    
    def __unicode__(self):
        return self.name
    
    def privacy_policy(self):
        policies = self.privacypolicy_set.all()
        l = policies.count()
        if l > 0: return policies[l-1].text

class MarketPlaceSettings(models.Model):
    marketplace = models.OneToOneField(MarketPlace)
    
    twitter_maxlength = models.IntegerField(null=True, blank=True, default=140, help_text="Max number of characters in a tweet")
    twitter_consumer_key = models.CharField(null=True, blank=True, max_length=255)
    twitter_consumer_secret = models.CharField(null=True, blank=True, max_length=255, help_text="Remember this should not be shared")
    twitter_access_token = models.CharField(null=True, blank=True, max_length=255)
    twitter_access_token_secret = models.CharField(null=True, blank=True, max_length=255, help_text="Remember this should not be shared")
    
    def __unicode__(self):
        return u'%s extra settings' % self.marketplace.name


def build_image_item_filename(instance, filename):
    import uuid
    return "images/%s-%s" % (uuid.uuid4(), filename)

class MarketCategory(models.Model):
    marketplace = models.ForeignKey(MarketPlace)
    name = models.CharField(max_length=60)
    slug = models.SlugField(max_length=60, unique=True)
    order = models.IntegerField(default=255)
    image = ImageWithThumbsField(upload_to=build_image_item_filename, sizes=((100,100),(400,400)), crop=False, null=True, blank=True)
    
    def related_shops(self):
        from django.db.models import Count
        from inventory.models import Product
        from shops.models import Shop

        related_shops = []
        for product in Product.objects.filter(category=self).values('category','shop').annotate(number_products=Count('category')).order_by('-number_products'):
#            related_shops.append((Shop.objects.get(id=product['shop']), product['number_products']))
            related_shops.append(Shop.objects.get(id=product['shop']))

        return related_shops
    
    @classmethod
    def generate_captcha(cls):
        index = random.randint(0, cls.objects.count() - 1)
        captcha = cls.objects.all()[index].name.split()[0]
        return captcha, captcha

    class Meta:
        ordering = ['order']

    def __unicode__(self):
        return "%s > %s" % (self.marketplace, self.name)

    def save(self, *args, **kwargs):
        self.slug = slugify(self.name)
        super(MarketCategory, self).save(*args, **kwargs)

class MarketSubCategory(models.Model):
    marketplace = models.ForeignKey(MarketPlace)
    name = models.CharField(max_length=60)
    slug = models.SlugField(max_length=60)
    parent = models.ForeignKey(MarketCategory, null=True, blank=True, related_name='subcategories')
    order = models.IntegerField(default=255)
    image = ImageWithThumbsField(upload_to=build_image_item_filename, sizes=((100,100),(400,400)), crop=False, null=True, blank=True)
    
    class Meta:
        unique_together = (('parent', 'slug'),)
        ordering = ['order']
    
    def __unicode__(self):
        return "%s > %s" % (self.parent, self.name)
    
    def save(self, *args, **kwargs):
        self.slug = slugify(self.name)
        super(MarketSubCategory, self).save(*args, **kwargs)

class MarketMailingListMember(models.Model):
    marketplace = models.ForeignKey(MarketPlace)
    email = models.EmailField()
    def __str__(self):
        return "%s > %s" % (self.marketplace, self.email)
    
class MarketPostCategory(models.Model):
    tag = models.CharField(max_length=80)
    slug = models.SlugField(max_length=80, unique=True)
    def __unicode__(self):
        return self.tag
        
    def save(self, *args, **kwargs):
        self.slug = slugify(self.tag)
        super(MarketPostCategory, self).save(*args, **kwargs)

class MarketBlogPost(models.Model):
    marketplace = models.ForeignKey(MarketPlace)
    title = models.CharField(max_length=60)
    body = models.TextField()
    posted_on = models.DateTimeField(auto_now_add=True)
    posted_by = models.ForeignKey(User)
    views = models.IntegerField(default=0, editable=False)
    allow_comments = models.BooleanField(default=False)
    slug = models.SlugField(max_length=80, unique=True, editable=False)
    post_to_twitter = models.BooleanField(default=True)
    
    class Admin:
        list_display   = ('title', 'posted_by', 'posted_on')
        list_filter    = ('publisher', 'publication_date')
        ordering       = ('-posted_on',)
        search_fields  = ('title', 'posted_on')

    def comments(self):
        comment_list = MarketPostComment.objects.filter(post=self).order_by("-commented_on")
        return comment_list
        
    def tags(self):
        return []
    
    def get_absolute_url(self):
        return u'http://%s%s' %(self.marketplace.base_domain, reverse('market_blog_view_post', args=[self.slug]))
    
    def tweet_text(self):
        try:
            api = bitly.BitLy(api_user=settings.BITLY_USERNAME, api_key=settings.BITLY_API_KEY)
            res = api.shorten(longUrl=self.get_absolute_url())
            link = res['url']
        except Exception, ex:
            logging.error(str(ex))
            link = self.get_absolute_url()

        mesg = u'%s - %s' % (self.title, link)

        TWITTER_MAXLENGTH = self.marketplace.marketplacesettings.twitter_maxlength
        if len(mesg) > TWITTER_MAXLENGTH:
            size = len(mesg + '...') - TWITTER_MAXLENGTH
            mesg = u'%s... - %s' % (self.title[:-size], link)

        return mesg
    
    def tweet(self):
        try:
            CONSUMER_KEY        = self.marketplace.marketplacesettings.twitter_consumer_key
            CONSUMER_SECRET     = self.marketplace.marketplacesettings.twitter_consumer_secret
            ACCESS_TOKEN        = self.marketplace.marketplacesettings.twitter_access_token
            ACCESS_TOKEN_SECRET = self.marketplace.marketplacesettings.twitter_access_token_secret

            api = twitter.Api(consumer_key=CONSUMER_KEY,
                              consumer_secret=CONSUMER_SECRET,
                              access_token_key=ACCESS_TOKEN,
                              access_token_secret=ACCESS_TOKEN_SECRET)

            api.PostUpdate(self.tweet_text())
        except Exception, e:
            logging.error(str(e))

    def save(self, *args, **kwargs):
        self.slug = slugify(self.title)
        
        if self.post_to_twitter:
            self.tweet()

        super(MarketBlogPost, self).save(*args, **kwargs)
        
    def __unicode__(self):
        return "%s > %s" % (self.marketplace, self.title)
    
    def visited(self):
        self.views = self.views + 1
        self.save()
        
    def date(self):
        return self.posted_on.strftime("%B %d, %Y")

class MarketPostPick(models.Model):
    marketplace = models.ForeignKey(MarketPlace)
    post = models.ForeignKey(MarketBlogPost)
    order = models.IntegerField(default=5)


class MarketPostComment(models.Model):
    post = models.ForeignKey(MarketBlogPost)
    comment = models.TextField()
    commented_on = models.DateTimeField(auto_now_add=True)
    user = models.ForeignKey(User)

    def date(self):
        return self.commented_on.strftime("%B %d, %Y")

class PrivacyPolicy(models.Model):
    marketplace = models.ForeignKey(MarketPlace)
    text = models.TextField(default="")
    
    def __unicode__(self):
        return "%s > Privacy Policy" % self.marketplace
    
class TermsAndConditions(models.Model):
    marketplace = models.ForeignKey(MarketPlace)
    text = models.TextField(default="")
    
    def __unicode__(self):
        return "%s > Terms & Conditions" % self.marketplace

class ContactFormInfo(models.Model):
    marketplace = models.ForeignKey(MarketPlace)
    datetime = models.DateTimeField(auto_now=True)
    email = models.EmailField(max_length=64, null=True)
    ip = models.CharField(max_length=64)

    def __unicode__(self):
        return u'Contact Form at %s %s %s' %(self.datetime, self.email, self.ip)

########NEW FILE########
__FILENAME__ = seo
from rollyourown.seo import Tag, MetaTag, KeywordTag, Metadata 

class SiteMetadata(Metadata):
    title       = Tag(head=True, max_length=68)
    description = MetaTag(max_length=155)
    keywords    = KeywordTag()
########NEW FILE########
__FILENAME__ = tests
"""
This file demonstrates two different styles of tests (one doctest and one
unittest). These will both pass when you run "manage.py test".

Replace these with more appropriate tests for your application.
"""

from django.test import TestCase

class SimpleTest(TestCase):
    def test_basic_addition(self):
        """
        Tests that 1 + 1 always equals 2.
        """
        self.failUnlessEqual(1 + 1, 2)

__test__ = {"doctest": """
Another way to test that 1 + 1 is equal to 2.

>>> 1 + 1 == 2
True
"""}


########NEW FILE########
__FILENAME__ = urls
from django.conf.urls.defaults import *


urlpatterns = patterns('',
    url('^$', 'market.views.home', name='market_home'),
    url('^contact_us/$', 'market.views.contact_us', name='market_contact_us'),
    url('^for_sale/$', 'market.views.for_sale', name='market_for_sale'),
    url('^auctions/$', 'market.views.auctions', name='market_auctions'),
    url('^search/$', 'market.views.search', name='market_search'),
    url('^coins-(?P<category_slug>[a-zA-Z0-9.-]+)/$', 
        'market.views.search', name='market_search_category'),
    url('^coins-(?P<category_slug>[a-zA-Z0-9.-]+)/(?P<shop_id>\d+)/$',
        'market.views.search', name='market_search_category_by_shop'),
    url('^coins-(?P<category_slug>[a-zA-Z0-9.-]+)_(?P<subcategory_slug>[a-zA-Z0-9.-]*)/$', 
        'market.views.search', name='market_search_subcategory'),
    url('^view_item/([\d]+)/$', 'market.views.view_item', name='view_item'),
    url('^blog/$', 'market.views.blog', name='market_blog'),
    url('^blog/add_comment/$', 'market.views.add_post_comment', name='add_post_comment'),
    url('^blog/(?P<post_slug>[a-zA-Z0-9_.-]+)/$', 'market.views.view_post', name='market_blog_view_post'),
    url('^switch_listing/$', 'market.views.set_listing_mode', name='set_listing_mode'),
    url('^switch_order/$', 'market.views.set_order_mode', name='set_order_mode'),
    url('^survey/$', 'market.views.survey', name='market_survey'),
)

########NEW FILE########
__FILENAME__ = views
import datetime
import logging
import random

from django.conf import settings
from django.core.paginator import Paginator, InvalidPage, EmptyPage
from django.core.urlresolvers import reverse
from django.core.mail import send_mail, EmailMessage
from django.core.cache import cache
from django.db import transaction
from django.http import HttpResponseRedirect, Http404, HttpResponse
from django.shortcuts import render_to_response, get_object_or_404
from django.template import RequestContext
from django.utils.translation import ugettext as _
from django.views.decorators.cache import cache_page

from haystack.query import SearchQuerySet
from market.models import MarketSubCategory, MarketCategory, ContactFormInfo
from market.forms import ContactForm
from auth.decorators import login_required

PRODUCTS_PER_PAGE = 16
ITEMS_PER_PAGE = 20
LOTS_PER_PAGE = 20


@cache_page(60 * 5)
def home(request):
    from shops.models import Shop
    from inventory.models import Product
    from market_buy.models import MarketPlacePick, DealerPick
    from market.forms import MarketMailingListMemberForm
    
    marketplace = request.marketplace
    market_place_picks = MarketPlacePick.get_available_picks(marketplace)
    featured_dealers = DealerPick.objects.filter(marketplace=marketplace).order_by("order")[:2]
    recently_products = Product.objects.filter(shop__marketplace=marketplace, has_image=True).order_by("-date_time")[:20]
    
    if request.method == "POST":
        form = MarketMailingListMemberForm(request.POST)
        if form.is_valid():
            member = form.save(commit=False)
            member.marketplace = request.marketplace
            member.save()
            request.flash['message'] = unicode(_("Email successfully registered."))
            request.flash['severity'] = "success"
            return HttpResponseRedirect(reverse("market_home"))
    else:
        form = MarketMailingListMemberForm()
        
    return render_to_response("%s/home.html" % request.marketplace.template_prefix, 
                              {
                               'market_place_picks' : market_place_picks,
                               'featured_dealers' : featured_dealers,
                               'recently_products' : recently_products,
                               'newsletter_form': form
                               }, 
                              RequestContext(request))

def search(request, category_slug=None, subcategory_slug=None, shop_id=None):
    from inventory.models import Product
    
    marketplace = request.marketplace
    
    sqs = SearchQuerySet().models(Product).load_all()
    if shop_id:
        sqs = sqs.filter(marketplace_id=marketplace.id, shop_id=shop_id)
    else:
        sqs = sqs.filter(marketplace_id=marketplace.id)

    current_category = None
    current_subcategory = None

    if category_slug:
        current_category = get_object_or_404(
            MarketCategory, slug=category_slug, marketplace=marketplace)
        # narrow search by category_name
        sqs = sqs.filter(category_id=current_category.id)

        if subcategory_slug:
            current_subcategory = get_object_or_404(
                MarketSubCategory, slug=subcategory_slug, 
                parent__id=current_category.id, marketplace=marketplace)
            # narrow search results by subcategory
            sqs = sqs.filter(subcategory_id=current_subcategory.id)

    else:
        category_name = request.GET.get("category", None)
        
        if category_name and category_name != "All Categories":
            sqs = sqs.filter(category__name=category_name)
            # only search for a category when there's a valid category name       
            current_category = get_object_or_404(
                MarketCategory, name=category_name, marketplace=marketplace)

    if current_category and current_category.slug == 'small-cents':
        small_cents_dealers = current_category.related_shops()
    else:
        small_cents_dealers = None

    getvars = encodevars(request)

    search_text = request.GET.get("q", None)
    if search_text and search_text.strip():        
        sqs = sqs.filter(summary=search_text)
        
    sort_mode = request.session.get("sort_mode", "title")
    
    if sort_mode == "recent":
        sqs = sqs.order_by("-added_at")
    if sort_mode == "oldest":
        sqs = sqs.order_by("added_at")
    if sort_mode == "title":
        sqs = sqs.order_by("title")
    if sort_mode == "-title":
        sqs = sqs.order_by("-title")
    if sort_mode == "price":
        sqs = sqs.order_by("price")
    if sort_mode == "-price":
        sqs = sqs.order_by("-price")
    pager = Paginator(sqs, PRODUCTS_PER_PAGE)

    try:
        page = int(request.GET.get('page','1'))
    except:
        page = 1

    try:
        paginator = pager.page(page)
    except (EmptyPage, InvalidPage):
        raise Http404

    paged = (pager.num_pages > 1)
    
    return render_to_response("%s/search.html" % request.marketplace.template_prefix, 
        {'current_category' : current_category, 'current_subcategory': current_subcategory,
        'products' : paginator, 'pager':pager,
        'paged': paged, 'total': pager.count, 'getvars': getvars,
        'sort_mode' : sort_mode,
        'view_mode' : request.session.get("view_mode", "list"),
        'small_cents_dealers': small_cents_dealers},
        RequestContext(request))

def view_item(request, product_id):
    from inventory.models import Product

    marketplace = request.marketplace
    product = get_object_or_404(Product, shop__marketplace=marketplace, id=product_id)
    shop_categories = product.shop.categories_list()
    related_shops = product.category.related_shops()
#    related_shops.remove(product.shop)
    shop_transactions = product.shop.total_transactions()
    
    images = []
    if hasattr(product, 'item'):
        for image in product.item.imageitem_set.all():
            images.append(image)
        price = product.item.price
    elif hasattr(product, 'lot'):
        for image in product.lot.imagelot_set.all():
            images.append(image)
        price = product.lot.price()

    return render_to_response("%s/view_item.html" % marketplace.template_prefix,
        { 'product': product,
          'images': images,
          'price': price,
          'shop_categories': shop_categories,
          'related_shops': related_shops,
          'shop_transactions': shop_transactions },
        RequestContext(request))

def encodevars(request):
    from django.http import QueryDict
    dic = (request.GET).copy()
    if dic.get("page", None):
        dic.pop("page")
    st = dic.urlencode()
    return st
    
def set_listing_mode(request):
    next = request.GET.get('next', '/')
    mode = request.GET.get('mode', 'gallery')
    request.session['view_mode'] = mode
    return HttpResponseRedirect(next)


def set_order_mode(request):
    next = request.GET.get('next', '/')
    order = request.GET.get('sort', 'title')
    request.session['sort_mode'] = order
    return HttpResponseRedirect(next)


def auctions(request):
    from lots.models import Lot
    marketplace = request.marketplace
    lot_list = Lot.objects.filter(shop__marketplace=marketplace)
    
    pager = Paginator(lot_list, LOTS_PER_PAGE)
    try:
        page = int(request.GET.get('page','1'))
    except:
        page = 1
    try:
        products = pager.page(page)
    except (EmptyPage, InvalidPage):
        products = pager.page(pager.num_pages)
    paged = (pager.num_pages > 1)
    
    return render_to_response("%s/auctions.html" % request.marketplace.template_prefix, 
                              {
                               'lots' : products,
                               'pages': pager.page_range,
                               'paged': paged,
                               'total': pager.count
                              } , 
                              RequestContext(request))
    
def for_sale(request):
    from for_sale.models import Item
    marketplace = request.marketplace
    item_list = Item.objects.filter(shop__marketplace=marketplace, qty__gte=1)
    
    pager = Paginator(item_list, ITEMS_PER_PAGE)
    try:
        page = int(request.GET.get('page','1'))
    except:
        page = 1
    try:
        products = pager.page(page)
    except (EmptyPage, InvalidPage):
        products = pager.page(pager.num_pages)
    paged = (pager.num_pages > 1)
    
    return render_to_response("%s/for_sale.html" % request.marketplace.template_prefix, 
                              {
                               'items' : products,
                               'pages': pager.page_range,
                               'paged': paged,
                               'total': pager.count
                              } , 
                              RequestContext(request))


def sell(request):
    return render_to_response("%s/sell.html" % request.marketplace.template_prefix, 
                              {} , RequestContext(request))

def buy(request):
    
    from inventory.models import Product
    
    marketplace = request.marketplace
    recently_products = Product.objects.filter(shop__marketplace=marketplace, has_image=True).order_by("-date_time")[:20]
    
    return render_to_response("%s/buy.html" % request.marketplace.template_prefix, 
                              {'recently_products' : recently_products} , RequestContext(request))

def community(request):
    return render_to_response("%s/community.html" % request.marketplace.template_prefix, 
                              {} , RequestContext(request))

@login_required
def add_post_comment(request):
    from market.models import MarketBlogPost
    from market.forms import MarketPostCommentForm
    
    if request.method == "POST":
        form = MarketPostCommentForm(request.POST)
        post =  MarketBlogPost.objects.filter(id=request.POST.get("post")).get()
        
        if form.is_valid():
            comment = form.save(commit = False)
            comment.user = request.user
            comment.post = post
            comment.save()
            
    return HttpResponseRedirect(reverse("market_blog"))

def view_post(request, post_slug):
    from market.forms import MarketPostCommentForm
    from market.models import MarketBlogPost
    
    form = MarketPostCommentForm()
    try:
        post = MarketBlogPost.objects.filter(slug=post_slug).get()
    except MarketBlogPost.DoesNotExist:
        return HttpResponse("403")
    
    return render_to_response("%s/post.html" % request.marketplace.template_prefix, 
                              {'post' : post, 'form': form}, RequestContext(request))
                          

def blog(request):
    from market.forms import MarketPostCommentForm
    from market.models import MarketBlogPost, MarketPostComment, MarketPostPick
    
    marketplace = request.marketplace
    
    all_posts = MarketBlogPost.objects.filter(marketplace=marketplace).order_by("-posted_on")
    latest_posts = all_posts[:5]
    latest_comments = MarketPostComment.objects.filter(post__marketplace=marketplace).order_by("-commented_on")[:5]
    picks = MarketPostPick.objects.filter(marketplace=marketplace)
    
    archive = []
    for post in all_posts:
        archive.append({'title': post.title, 'slug': post.slug, 'month' : post.posted_on.strftime("%B")})
    
    form = MarketPostCommentForm()
    
    pager = Paginator(all_posts, 2)
    try:
        page = int(request.GET.get('page','1'))
    except:
        page = 1
    try:
        posts = pager.page(page)
    except (EmptyPage, InvalidPage):
        posts = pager.page(pager.num_pages)
    paged = (pager.num_pages > 1)
    
    return render_to_response("%s/blog.html" % request.marketplace.template_prefix, 
                              {
                               'archive' : archive,
                               'picks' : picks,
                               'posts' : posts,
                               'latest_posts' : latest_posts,
                               'latest_comments' : latest_comments, 
                               'form' : form,
                               'pages': pager.page_range,
                               'paged': paged,
                               'total': pager.count,
                               } , RequestContext(request))

def contact_us(request):
    if request.method == "POST":
        form = ContactForm(request.POST)
        market_admin = request.marketplace.contact_email
        if form.is_valid():
            name = form.cleaned_data['name']
            email = form.cleaned_data['email']
            phone = form.cleaned_data['phone']
            message = form.cleaned_data['message']

            msg = "Message from %s (email %s, phone %s).\n%s" % (name, email, phone, message)
            mail = EmailMessage(subject='Contact Form From %s' % request.marketplace,
                                body=msg,
                                from_email=settings.EMAIL_FROM,
                                to=[mail for (name, mail) in settings.STAFF]+[market_admin],
                                headers={'X-SMTPAPI': '{\"category\": \"Contact Form\"}'})
            mail.send(fail_silently=True)

            return HttpResponseRedirect(reverse("market_home"))
        else:
            if form['captcha'].errors:
                email = form.data.get('email', None)
                ip = request.META['REMOTE_ADDR']
                contact_form_info, created = ContactFormInfo.objects.get_or_create(marketplace=request.marketplace, email=email, ip=ip)
                some_time = datetime.datetime.now() - datetime.timedelta(seconds=120)
                if not created and contact_form_info.datetime < some_time:
                    msg = 'Bad captcha posted from %s\nUser email: %s\n\nForm info\nName: %s\nPhone: %s\nMessage: %s' \
                         %(ip, \
                           form.data['email'] or 'unknown', \
                           form.data['name'] or 'unknown', \
                           form.data['phone'] or 'unknown', \
                           form.data['message'] or 'unknown')

                    mail = EmailMessage(subject='Contact Form, bad captcha',
                                        body=msg,
                                        from_email=settings.EMAIL_FROM,
                                        to=[market_admin],
                                        headers={'X-SMTPAPI': '{\"category\": \"Error\"}'})
                    mail.send(fail_silently=True)
    else:
        form = ContactForm()

    return render_to_response("%s/contact_us.html" % request.marketplace.template_prefix, 
                              {'form': form} , RequestContext(request))

def survey(request):
    return render_to_response("%s/survey.html" % request.marketplace.template_prefix, 
                              {} , RequestContext(request))

def sitemap(request, sitemap_id=None):
    if sitemap_id:
        sitemap_template = "%s/sitemap%s.xml" % (request.marketplace.template_prefix, sitemap_id) 
    else:
        sitemap_template = "%s/sitemap.xml" % request.marketplace.template_prefix
    
    return render_to_response(sitemap_template, { 'base_url': request.build_absolute_uri(reverse("market_home")) },
                              RequestContext(request))

def sitemap_index(request):
    return render_to_response("%s/sitemap_index.xml" % request.marketplace.template_prefix, { 'base_url': request.build_absolute_uri(reverse("market_home")) },
                              RequestContext(request))

def sitemap_products(request):
    from inventory.models import Product

    products = Product.objects.filter(shop__marketplace=request.marketplace)
    return render_to_response("%s/sitemap_products.xml" % request.marketplace.template_prefix,
                              { 'base_url': request.build_absolute_uri(reverse("market_home")).rstrip('/'),
                                'products':  products },
                              RequestContext(request))

def robot(request):
    return render_to_response("%s/robots.txt" % request.marketplace.template_prefix, 
                              {} , RequestContext(request))

########NEW FILE########
__FILENAME__ = admin
from django.contrib import admin

from market_buy.models import EditorPick, Show, WishListItem, MarketPlacePick, DealerPick, BestSeller 

admin.site.register(EditorPick)
admin.site.register(BestSeller)
admin.site.register(DealerPick)
admin.site.register(MarketPlacePick)
admin.site.register(Show)
admin.site.register(WishListItem)
########NEW FILE########
__FILENAME__ = pipeline
from urllib import urlopen
from django.core.files.storage import default_storage
from django.core.files.base import ContentFile
from social_auth.backends.facebook import FacebookBackend
from social_auth.backends.twitter import TwitterBackend
from social_auth.backends import google


def update_user_details(backend, details, response, social_user, uid, user, *args, **kwargs):
#    import logging
#    logging.debug(type(backend))
#    logging.debug(type(response))
#    logging.debug(response)

    url = None
    if backend.__class__ == FacebookBackend:
        url = "http://graph.facebook.com/%s/picture?type=large" % response['id']
        filename_prefix = 'facebook'
    elif backend.__class__ == TwitterBackend:
        url = response.get('profile_image_url', '').replace('_normal', '')
        filename_prefix = 'twitter'
    elif backend.__class__ == google.GoogleBackend:
        filename_prefix = 'google'
#        TODO: get google profile picture
#        try:
#            url = response.get('picture', None)
#        except Exception, ex:
#            logging.debug(str(ex))

    if url and not user.profile.photo:
        avatar = urlopen(url).read()
        user.profile.photo.save('avatars/%s%s.jpg' % (filename_prefix, response['id']), ContentFile(avatar))

########NEW FILE########
__FILENAME__ = distance_helper
import math

def distance_between_points(point1, point2, system="miles"):

    # Convert latitude and longitude to 
    # spherical coordinates in radians.
    lat1, long1 = point1
    lat2, long2 = point2
    degrees_to_radians = math.pi/180.0
        
    # phi = 90 - latitude
    phi1 = (90.0 - lat1)*degrees_to_radians
    phi2 = (90.0 - lat2)*degrees_to_radians
        
    # theta = longitude
    theta1 = long1*degrees_to_radians
    theta2 = long2*degrees_to_radians
        
    # Compute spherical distance from spherical coordinates.
        
    # For two locations in spherical coordinates 
    # (1, theta, phi) and (1, theta, phi)
    # cosine( arc length ) = 
    #    sin phi sin phi' cos(theta-theta') + cos phi cos phi'
    # distance = rho * arc length
    
    cos = (math.sin(phi1)*math.sin(phi2)*math.cos(theta1 - theta2) + 
           math.cos(phi1)*math.cos(phi2))
    try:
        arc = math.acos( cos )
    except ValueError:
        #distance is too close
        return 0

    # Remember to multiply arc by the radius of the earth 
    # in your favorite set of units to get length.
    if system == "miles":    
        earth_radious = 3959 #MILES
    else:
        earth_radious = 6378 #KILOMETERS
    return arc * earth_radious

########NEW FILE########
__FILENAME__ = forms
# -*- coding: UTF-8 -*-
import logging
from django import forms
from auth.models import User
from django.db.models import Model
from django.db.models.query import QuerySet
from django.forms import ModelForm
from django.utils.translation import ugettext as _

from haystack.forms import SearchForm
from haystack.query import EmptySearchQuerySet

from auth.forms import UserCreationForm 
from market.models import MarketSubCategory, MarketCategory
from market_buy.models import WishListItem, Show


class WishListItemForm(ModelForm):
    
    class Meta:
        model = WishListItem
        exclude = ['marketplace', 'posted_by']
        
class ShowForm(ModelForm):
    
    class Meta:
        model = Show
        exclude = ['marketplace', 'country', 'contact_info', 'admission', 'location','time_from', 'time_to', 'owner']
        

class BuyerForm(UserCreationForm):
    email =  forms.EmailField()    


SORT_CHOICES = (
    ("relevance", _("Relevance")),                
    ("price", _("Price")),
    ("-starts_at", _("Age")),
    #("dealer", _("Dealer")),
    #("auction", _("Auction")),
    #("forsale", _("For sale")),
)

INCLUDE_CHOICES = (
    ("title", _("Item Title")),
    ("description", _("Item Description")),
    ("dealer", _("Dealer Name")),
)

VIEW_BY_CHOICES = (
    ("gallery", _("Gallery")),
    ("list", _("List")),
)


class SubCategoriesField(forms.ModelMultipleChoiceField):
    """
    A ModelMultipleChoiceField that renders an empty select input
    and validates the selected item against the MarketSubCategories.
    """


    def __init__(self, *args, **kwargs):
        kwargs.update({"required": False, "widget": forms.Select(attrs={"size": 20}),
            "queryset": MarketSubCategory.objects.none()})
        super(SubCategoriesField, self).__init__(*args, **kwargs)

    def clean(self, value):
        if value:
            try:
                subcategory = MarketSubCategory.objects.get(pk=value)
            except MarketSubCategory.DoesNotExist:
                raise forms.ValidationError(_("Choosen subcategory does not exist."))
            return subcategory

        return None


class AdvancedSearchForm(SearchForm):
    
    q = forms.CharField(max_length=200, label=_("Search for"), required=False)
    sort = forms.ChoiceField(initial="price", choices=SORT_CHOICES)

    categories = forms.ChoiceField(required=False,
        choices=MarketCategory.objects.values_list("id", "name").order_by("name"), 
        widget=forms.Select(attrs={"size": 20}))
    subcategories = SubCategoriesField()

    include = forms.MultipleChoiceField(label=_("Include In Search"), 
        required=False, widget=forms.CheckboxSelectMultiple(), 
        initial=["title", "description", "dealer"], choices=INCLUDE_CHOICES)

    from_price = forms.DecimalField(label=_("Filter By Price"), required=False)
    to_price = forms.DecimalField(label=_("to"), required=False)

    view_by = forms.ChoiceField(choices=VIEW_BY_CHOICES, widget=forms.RadioSelect(), initial="gallery")

    def __init__(self, marketplace, *args, **kwargs):
        super(AdvancedSearchForm, self).__init__(*args, **kwargs)
                
        self.fields.keyOrder = ["q", "categories", "subcategories", 
            "include", "from_price", "to_price", "sort", "view_by"]
        self.marketplace = marketplace
        
    def search(self):
        
        if self.is_valid():
            sqs = sqs = self.searchqueryset.models("inventory.Product")\
                .filter(marketplace_id=self.marketplace.id)

            q = self.cleaned_data.get("q")
            if q:
                sqs = sqs.auto_query(q)
            
            data = self.cleaned_data
            
            params_dict = {} 
            if self.cleaned_data["subcategories"]:
                # only one subcategory may get selected ;)
                params_dict.update({"subcategory_id": self.cleaned_data["subcategories"].id})

            # if we are going to filter by subcategory then filtering by category is
            # superfluous. so we check this first
            if not self.cleaned_data["subcategories"] and self.cleaned_data["categories"]: 
                # only one category may get selected too
                params_dict.update({"category_id": self.cleaned_data["categories"]})

            if self.cleaned_data["from_price"]:
                params_dict.update({"price__gte": self.cleaned_data["from_price"]})

            if self.cleaned_data["to_price"]:
                params_dict.update({"price__lte": self.cleaned_data["to_price"]})

            if params_dict:
                sqs = sqs.filter(**params_dict)

            # decide how to sort results
            sort_field = self.cleaned_data["sort"]
            if sort_field:
                if sort_field != "relevance":
                    sqs = sqs.order_by(sort_field)

            return sqs

        return EmptySearchQuerySet()


    def clean(self):
        super(AdvancedSearchForm, self).clean()
        
        data = self.cleaned_data
        
        if data.get("subcategories") and not data.get("categories"):
            raise forms.ValidationError(_("You must choose a category"))

        return data

    def _as_tuple_list(self):
        param_tuples = []
        
        if not self.cleaned_data:
            return []

        for field, value in self.cleaned_data.iteritems():
            if not value:
                continue
        
            if isinstance(value, (list, QuerySet)):
                for item in value:
                    if isinstance(item, Model):
                        param_tuples.append((field, item.pk))
                    else:
                        param_tuples.append((field, item))
            else:
                if isinstance(value, Model):
                    param_tuples.append((field, value.pk))
                else:
                    param_tuples.append((field, value))

        return param_tuples
                
    def get_qs(self):
        """
        Return the field names and values encoded in a querystring 
        so we may give the user a link to go back from results page
        to the original search form in order to refine his search
        """
        return "&".join(["%s=%s" % tuple for tuple in self._as_tuple_list()])

########NEW FILE########
__FILENAME__ = 0001_initial
# encoding: utf-8
import datetime
from south.db import db
from south.v2 import SchemaMigration
from django.db import models

class Migration(SchemaMigration):

    def forwards(self, orm):
        
        # Adding model 'WishListItem'
        db.create_table('market_buy_wishlistitem', (
            ('id', self.gf('django.db.models.fields.AutoField')(primary_key=True)),
            ('marketplace', self.gf('django.db.models.fields.related.ForeignKey')(to=orm['market.MarketPlace'])),
            ('posted_on', self.gf('django.db.models.fields.DateTimeField')(auto_now_add=True, blank=True)),
            ('posted_by', self.gf('django.db.models.fields.CharField')(max_length=100)),
            ('ideal_price', self.gf('django.db.models.fields.DecimalField')(max_digits=11, decimal_places=2)),
            ('description', self.gf('django.db.models.fields.TextField')()),
            ('category', self.gf('django.db.models.fields.related.ForeignKey')(to=orm['market.MarketCategory'])),
            ('subcategory', self.gf('django.db.models.fields.related.ForeignKey')(to=orm['market.MarketSubCategory'])),
        ))
        db.send_create_signal('market_buy', ['WishListItem'])

        # Adding model 'Show'
        db.create_table('market_buy_show', (
            ('id', self.gf('django.db.models.fields.AutoField')(primary_key=True)),
            ('marketplace', self.gf('django.db.models.fields.related.ForeignKey')(to=orm['market.MarketPlace'])),
            ('name', self.gf('django.db.models.fields.CharField')(max_length=128)),
            ('date_from', self.gf('django.db.models.fields.DateField')()),
            ('date_to', self.gf('django.db.models.fields.DateField')()),
            ('time_from', self.gf('django.db.models.fields.TimeField')()),
            ('time_to', self.gf('django.db.models.fields.TimeField')()),
            ('address', self.gf('django.db.models.fields.CharField')(max_length=128)),
            ('city', self.gf('django.db.models.fields.CharField')(max_length=128)),
            ('state', self.gf('django.db.models.fields.CharField')(max_length=128)),
            ('zip', self.gf('django.db.models.fields.CharField')(max_length=10)),
            ('contact_info', self.gf('django.db.models.fields.CharField')(max_length=128)),
            ('admission', self.gf('django.db.models.fields.DecimalField')(default='0.0', max_digits=11, decimal_places=2)),
        ))
        db.send_create_signal('market_buy', ['Show'])

        # Adding model 'EditorPick'
        db.create_table('market_buy_editorpick', (
            ('id', self.gf('django.db.models.fields.AutoField')(primary_key=True)),
            ('marketplace', self.gf('django.db.models.fields.related.ForeignKey')(to=orm['market.MarketPlace'])),
            ('order', self.gf('django.db.models.fields.IntegerField')(default=5)),
            ('product', self.gf('django.db.models.fields.related.ForeignKey')(to=orm['inventory.Product'])),
        ))
        db.send_create_signal('market_buy', ['EditorPick'])

        # Adding model 'MarketPlacePick'
        db.create_table('market_buy_marketplacepick', (
            ('id', self.gf('django.db.models.fields.AutoField')(primary_key=True)),
            ('marketplace', self.gf('django.db.models.fields.related.ForeignKey')(to=orm['market.MarketPlace'])),
            ('order', self.gf('django.db.models.fields.IntegerField')(default=5)),
            ('product', self.gf('django.db.models.fields.related.ForeignKey')(to=orm['inventory.Product'])),
        ))
        db.send_create_signal('market_buy', ['MarketPlacePick'])

        # Adding model 'DealerPick'
        db.create_table('market_buy_dealerpick', (
            ('id', self.gf('django.db.models.fields.AutoField')(primary_key=True)),
            ('marketplace', self.gf('django.db.models.fields.related.ForeignKey')(to=orm['market.MarketPlace'])),
            ('order', self.gf('django.db.models.fields.IntegerField')(default=5)),
            ('shop', self.gf('django.db.models.fields.related.ForeignKey')(to=orm['shops.Shop'])),
        ))
        db.send_create_signal('market_buy', ['DealerPick'])

        # Adding model 'BestSeller'
        db.create_table('market_buy_bestseller', (
            ('id', self.gf('django.db.models.fields.AutoField')(primary_key=True)),
            ('shop', self.gf('django.db.models.fields.related.ForeignKey')(to=orm['shops.Shop'])),
            ('from_date', self.gf('django.db.models.fields.DateTimeField')()),
            ('to_date', self.gf('django.db.models.fields.DateTimeField')()),
            ('revenue', self.gf('django.db.models.fields.DecimalField')(max_digits=11, decimal_places=2)),
        ))
        db.send_create_signal('market_buy', ['BestSeller'])


    def backwards(self, orm):
        
        # Deleting model 'WishListItem'
        db.delete_table('market_buy_wishlistitem')

        # Deleting model 'Show'
        db.delete_table('market_buy_show')

        # Deleting model 'EditorPick'
        db.delete_table('market_buy_editorpick')

        # Deleting model 'MarketPlacePick'
        db.delete_table('market_buy_marketplacepick')

        # Deleting model 'DealerPick'
        db.delete_table('market_buy_dealerpick')

        # Deleting model 'BestSeller'
        db.delete_table('market_buy_bestseller')


    models = {
        'auth.group': {
            'Meta': {'object_name': 'Group'},
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '80'}),
            'permissions': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['auth.Permission']", 'symmetrical': 'False', 'blank': 'True'})
        },
        'auth.permission': {
            'Meta': {'unique_together': "(('content_type', 'codename'),)", 'object_name': 'Permission'},
            'codename': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'content_type': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['contenttypes.ContentType']"}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '50'})
        },
        'auth.user': {
            'Meta': {'object_name': 'User'},
            'date_joined': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
            'email': ('django.db.models.fields.EmailField', [], {'max_length': '75', 'blank': 'True'}),
            'first_name': ('django.db.models.fields.CharField', [], {'max_length': '30', 'blank': 'True'}),
            'groups': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['auth.Group']", 'symmetrical': 'False', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'is_active': ('django.db.models.fields.BooleanField', [], {'default': 'True', 'blank': 'True'}),
            'is_staff': ('django.db.models.fields.BooleanField', [], {'default': 'False', 'blank': 'True'}),
            'is_superuser': ('django.db.models.fields.BooleanField', [], {'default': 'False', 'blank': 'True'}),
            'last_login': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
            'last_name': ('django.db.models.fields.CharField', [], {'max_length': '30', 'blank': 'True'}),
            'password': ('django.db.models.fields.CharField', [], {'max_length': '128'}),
            'user_permissions': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['auth.Permission']", 'symmetrical': 'False', 'blank': 'True'}),
            'username': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '30'})
        },
        'contenttypes.contenttype': {
            'Meta': {'unique_together': "(('app_label', 'model'),)", 'object_name': 'ContentType', 'db_table': "'django_content_type'"},
            'app_label': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'model': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '100'})
        },
        'inventory.product': {
            'Meta': {'object_name': 'Product'},
            'category': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['market.MarketCategory']"}),
            'date_time': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'description': ('django.db.models.fields.TextField', [], {}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'shop': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['shops.Shop']"}),
            'subcategory': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['market.MarketSubCategory']"}),
            'title': ('django.db.models.fields.CharField', [], {'max_length': '200'}),
            'type': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['inventory.ProductType']", 'null': 'True', 'blank': 'True'}),
            'weight': ('django.db.models.fields.DecimalField', [], {'default': "'0'", 'max_digits': '11', 'decimal_places': '2'})
        },
        'inventory.producttype': {
            'Meta': {'object_name': 'ProductType'},
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'})
        },
        'market.marketcategory': {
            'Meta': {'object_name': 'MarketCategory'},
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'marketplace': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['market.MarketPlace']"}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '60'}),
            'slug': ('django.db.models.fields.SlugField', [], {'unique': 'True', 'max_length': '60', 'db_index': 'True'})
        },
        'market.marketplace': {
            'Meta': {'object_name': 'MarketPlace'},
            'base_domain': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '128'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '92'}),
            'slug': ('django.db.models.fields.SlugField', [], {'unique': 'True', 'max_length': '92', 'db_index': 'True'}),
            'template_prefix': ('django.db.models.fields.SlugField', [], {'unique': 'True', 'max_length': '92', 'db_index': 'True'}),
            'title': ('django.db.models.fields.CharField', [], {'max_length': '92'})
        },
        'market.marketsubcategory': {
            'Meta': {'unique_together': "(('parent', 'slug'),)", 'object_name': 'MarketSubCategory'},
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'marketplace': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['market.MarketPlace']"}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '60'}),
            'parent': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'subcategories'", 'null': 'True', 'to': "orm['market.MarketCategory']"}),
            'slug': ('django.db.models.fields.SlugField', [], {'max_length': '60', 'db_index': 'True'})
        },
        'market_buy.bestseller': {
            'Meta': {'object_name': 'BestSeller'},
            'from_date': ('django.db.models.fields.DateTimeField', [], {}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'revenue': ('django.db.models.fields.DecimalField', [], {'max_digits': '11', 'decimal_places': '2'}),
            'shop': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['shops.Shop']"}),
            'to_date': ('django.db.models.fields.DateTimeField', [], {})
        },
        'market_buy.dealerpick': {
            'Meta': {'object_name': 'DealerPick'},
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'marketplace': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['market.MarketPlace']"}),
            'order': ('django.db.models.fields.IntegerField', [], {'default': '5'}),
            'shop': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['shops.Shop']"})
        },
        'market_buy.editorpick': {
            'Meta': {'object_name': 'EditorPick'},
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'marketplace': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['market.MarketPlace']"}),
            'order': ('django.db.models.fields.IntegerField', [], {'default': '5'}),
            'product': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['inventory.Product']"})
        },
        'market_buy.marketplacepick': {
            'Meta': {'object_name': 'MarketPlacePick'},
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'marketplace': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['market.MarketPlace']"}),
            'order': ('django.db.models.fields.IntegerField', [], {'default': '5'}),
            'product': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['inventory.Product']"})
        },
        'market_buy.show': {
            'Meta': {'object_name': 'Show'},
            'address': ('django.db.models.fields.CharField', [], {'max_length': '128'}),
            'admission': ('django.db.models.fields.DecimalField', [], {'default': "'0.0'", 'max_digits': '11', 'decimal_places': '2'}),
            'city': ('django.db.models.fields.CharField', [], {'max_length': '128'}),
            'contact_info': ('django.db.models.fields.CharField', [], {'max_length': '128'}),
            'date_from': ('django.db.models.fields.DateField', [], {}),
            'date_to': ('django.db.models.fields.DateField', [], {}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'marketplace': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['market.MarketPlace']"}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '128'}),
            'state': ('django.db.models.fields.CharField', [], {'max_length': '128'}),
            'time_from': ('django.db.models.fields.TimeField', [], {}),
            'time_to': ('django.db.models.fields.TimeField', [], {}),
            'zip': ('django.db.models.fields.CharField', [], {'max_length': '10'})
        },
        'market_buy.wishlistitem': {
            'Meta': {'object_name': 'WishListItem'},
            'category': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['market.MarketCategory']"}),
            'description': ('django.db.models.fields.TextField', [], {}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'ideal_price': ('django.db.models.fields.DecimalField', [], {'max_digits': '11', 'decimal_places': '2'}),
            'marketplace': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['market.MarketPlace']"}),
            'posted_by': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'posted_on': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'subcategory': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['market.MarketSubCategory']"})
        },
        'shops.shop': {
            'Meta': {'object_name': 'Shop'},
            'admin': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['auth.User']"}),
            'bids': ('django.db.models.fields.IntegerField', [], {'default': '0'}),
            'date_time': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'location': ('django.db.models.fields.CharField', [], {'default': "'39.29038,-76.61219'", 'max_length': '255'}),
            'marketplace': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['market.MarketPlace']"}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '60'}),
            'views': ('django.db.models.fields.IntegerField', [], {'default': '0'})
        }
    }

    complete_apps = ['market_buy']

########NEW FILE########
__FILENAME__ = 0002_auto__add_field_dealerpick_description
# encoding: utf-8
import datetime
from south.db import db
from south.v2 import SchemaMigration
from django.db import models

class Migration(SchemaMigration):

    def forwards(self, orm):
        
        # Adding field 'DealerPick.description'
        db.add_column('market_buy_dealerpick', 'description', self.gf('django.db.models.fields.TextField')(default='Dealer description here'), keep_default=False)


    def backwards(self, orm):
        
        # Deleting field 'DealerPick.description'
        db.delete_column('market_buy_dealerpick', 'description')


    models = {
        'auth.group': {
            'Meta': {'object_name': 'Group'},
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '80'}),
            'permissions': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['auth.Permission']", 'symmetrical': 'False', 'blank': 'True'})
        },
        'auth.permission': {
            'Meta': {'unique_together': "(('content_type', 'codename'),)", 'object_name': 'Permission'},
            'codename': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'content_type': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['contenttypes.ContentType']"}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '50'})
        },
        'auth.user': {
            'Meta': {'object_name': 'User'},
            'date_joined': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
            'email': ('django.db.models.fields.EmailField', [], {'max_length': '75', 'blank': 'True'}),
            'first_name': ('django.db.models.fields.CharField', [], {'max_length': '30', 'blank': 'True'}),
            'groups': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['auth.Group']", 'symmetrical': 'False', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'is_active': ('django.db.models.fields.BooleanField', [], {'default': 'True', 'blank': 'True'}),
            'is_staff': ('django.db.models.fields.BooleanField', [], {'default': 'False', 'blank': 'True'}),
            'is_superuser': ('django.db.models.fields.BooleanField', [], {'default': 'False', 'blank': 'True'}),
            'last_login': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
            'last_name': ('django.db.models.fields.CharField', [], {'max_length': '30', 'blank': 'True'}),
            'password': ('django.db.models.fields.CharField', [], {'max_length': '128'}),
            'user_permissions': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['auth.Permission']", 'symmetrical': 'False', 'blank': 'True'}),
            'username': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '30'})
        },
        'contenttypes.contenttype': {
            'Meta': {'unique_together': "(('app_label', 'model'),)", 'object_name': 'ContentType', 'db_table': "'django_content_type'"},
            'app_label': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'model': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '100'})
        },
        'inventory.product': {
            'Meta': {'object_name': 'Product'},
            'category': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['market.MarketCategory']"}),
            'date_time': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'description': ('django.db.models.fields.TextField', [], {}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'shop': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['shops.Shop']"}),
            'subcategory': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['market.MarketSubCategory']"}),
            'title': ('django.db.models.fields.CharField', [], {'max_length': '200'}),
            'type': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['inventory.ProductType']", 'null': 'True', 'blank': 'True'}),
            'weight': ('django.db.models.fields.DecimalField', [], {'default': "'0'", 'max_digits': '11', 'decimal_places': '2'})
        },
        'inventory.producttype': {
            'Meta': {'object_name': 'ProductType'},
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'})
        },
        'market.marketcategory': {
            'Meta': {'object_name': 'MarketCategory'},
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'marketplace': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['market.MarketPlace']"}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '60'}),
            'slug': ('django.db.models.fields.SlugField', [], {'unique': 'True', 'max_length': '60', 'db_index': 'True'})
        },
        'market.marketplace': {
            'Meta': {'object_name': 'MarketPlace'},
            'base_domain': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '128'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '92'}),
            'slug': ('django.db.models.fields.SlugField', [], {'unique': 'True', 'max_length': '92', 'db_index': 'True'}),
            'template_prefix': ('django.db.models.fields.SlugField', [], {'unique': 'True', 'max_length': '92', 'db_index': 'True'}),
            'title': ('django.db.models.fields.CharField', [], {'max_length': '92'})
        },
        'market.marketsubcategory': {
            'Meta': {'unique_together': "(('parent', 'slug'),)", 'object_name': 'MarketSubCategory'},
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'marketplace': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['market.MarketPlace']"}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '60'}),
            'parent': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'subcategories'", 'null': 'True', 'to': "orm['market.MarketCategory']"}),
            'slug': ('django.db.models.fields.SlugField', [], {'max_length': '60', 'db_index': 'True'})
        },
        'market_buy.bestseller': {
            'Meta': {'object_name': 'BestSeller'},
            'from_date': ('django.db.models.fields.DateTimeField', [], {}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'revenue': ('django.db.models.fields.DecimalField', [], {'max_digits': '11', 'decimal_places': '2'}),
            'shop': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['shops.Shop']"}),
            'to_date': ('django.db.models.fields.DateTimeField', [], {})
        },
        'market_buy.dealerpick': {
            'Meta': {'object_name': 'DealerPick'},
            'description': ('django.db.models.fields.TextField', [], {'default': "'Dealer description here'"}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'marketplace': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['market.MarketPlace']"}),
            'order': ('django.db.models.fields.IntegerField', [], {'default': '5'}),
            'shop': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['shops.Shop']"})
        },
        'market_buy.editorpick': {
            'Meta': {'object_name': 'EditorPick'},
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'marketplace': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['market.MarketPlace']"}),
            'order': ('django.db.models.fields.IntegerField', [], {'default': '5'}),
            'product': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['inventory.Product']"})
        },
        'market_buy.marketplacepick': {
            'Meta': {'object_name': 'MarketPlacePick'},
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'marketplace': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['market.MarketPlace']"}),
            'order': ('django.db.models.fields.IntegerField', [], {'default': '5'}),
            'product': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['inventory.Product']"})
        },
        'market_buy.show': {
            'Meta': {'object_name': 'Show'},
            'address': ('django.db.models.fields.CharField', [], {'max_length': '128'}),
            'admission': ('django.db.models.fields.DecimalField', [], {'default': "'0.0'", 'max_digits': '11', 'decimal_places': '2'}),
            'city': ('django.db.models.fields.CharField', [], {'max_length': '128'}),
            'contact_info': ('django.db.models.fields.CharField', [], {'max_length': '128'}),
            'date_from': ('django.db.models.fields.DateField', [], {}),
            'date_to': ('django.db.models.fields.DateField', [], {}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'marketplace': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['market.MarketPlace']"}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '128'}),
            'state': ('django.db.models.fields.CharField', [], {'max_length': '128'}),
            'time_from': ('django.db.models.fields.TimeField', [], {}),
            'time_to': ('django.db.models.fields.TimeField', [], {}),
            'zip': ('django.db.models.fields.CharField', [], {'max_length': '10'})
        },
        'market_buy.wishlistitem': {
            'Meta': {'object_name': 'WishListItem'},
            'category': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['market.MarketCategory']"}),
            'description': ('django.db.models.fields.TextField', [], {}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'ideal_price': ('django.db.models.fields.DecimalField', [], {'max_digits': '11', 'decimal_places': '2'}),
            'marketplace': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['market.MarketPlace']"}),
            'posted_by': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'posted_on': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'subcategory': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['market.MarketSubCategory']"})
        },
        'shops.shop': {
            'Meta': {'object_name': 'Shop'},
            'admin': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['auth.User']"}),
            'bids': ('django.db.models.fields.IntegerField', [], {'default': '0'}),
            'date_time': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'location': ('django.db.models.fields.CharField', [], {'default': "'39.29038,-76.61219'", 'max_length': '255'}),
            'marketplace': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['market.MarketPlace']"}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '60'}),
            'views': ('django.db.models.fields.IntegerField', [], {'default': '0'})
        }
    }

    complete_apps = ['market_buy']

########NEW FILE########
__FILENAME__ = 0003_auto__add_field_show_country__add_field_show_location
# encoding: utf-8
import datetime
from south.db import db
from south.v2 import SchemaMigration
from django.db import models

class Migration(SchemaMigration):

    def forwards(self, orm):
        
        # Adding field 'Show.country'
        db.add_column('market_buy_show', 'country', self.gf('django.db.models.fields.CharField')(default='US', max_length=128), keep_default=False)

        # Adding field 'Show.location'
        db.add_column('market_buy_show', 'location', self.gf('django.db.models.fields.CharField')(default='49.00, -96.00', max_length=255), keep_default=False)


    def backwards(self, orm):
        
        # Deleting field 'Show.country'
        db.delete_column('market_buy_show', 'country')

        # Deleting field 'Show.location'
        db.delete_column('market_buy_show', 'location')


    models = {
        'auth.group': {
            'Meta': {'object_name': 'Group'},
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '80'}),
            'permissions': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['auth.Permission']", 'symmetrical': 'False', 'blank': 'True'})
        },
        'auth.permission': {
            'Meta': {'unique_together': "(('content_type', 'codename'),)", 'object_name': 'Permission'},
            'codename': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'content_type': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['contenttypes.ContentType']"}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '50'})
        },
        'auth.user': {
            'Meta': {'object_name': 'User'},
            'date_joined': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
            'email': ('django.db.models.fields.EmailField', [], {'max_length': '75', 'blank': 'True'}),
            'first_name': ('django.db.models.fields.CharField', [], {'max_length': '30', 'blank': 'True'}),
            'groups': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['auth.Group']", 'symmetrical': 'False', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'is_active': ('django.db.models.fields.BooleanField', [], {'default': 'True', 'blank': 'True'}),
            'is_staff': ('django.db.models.fields.BooleanField', [], {'default': 'False', 'blank': 'True'}),
            'is_superuser': ('django.db.models.fields.BooleanField', [], {'default': 'False', 'blank': 'True'}),
            'last_login': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
            'last_name': ('django.db.models.fields.CharField', [], {'max_length': '30', 'blank': 'True'}),
            'password': ('django.db.models.fields.CharField', [], {'max_length': '128'}),
            'user_permissions': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['auth.Permission']", 'symmetrical': 'False', 'blank': 'True'}),
            'username': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '30'})
        },
        'contenttypes.contenttype': {
            'Meta': {'unique_together': "(('app_label', 'model'),)", 'object_name': 'ContentType', 'db_table': "'django_content_type'"},
            'app_label': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'model': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '100'})
        },
        'inventory.product': {
            'Meta': {'object_name': 'Product'},
            'category': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['market.MarketCategory']"}),
            'date_time': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'description': ('django.db.models.fields.TextField', [], {}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'shop': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['shops.Shop']"}),
            'subcategory': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['market.MarketSubCategory']"}),
            'title': ('django.db.models.fields.CharField', [], {'max_length': '200'}),
            'type': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['inventory.ProductType']", 'null': 'True', 'blank': 'True'}),
            'weight': ('django.db.models.fields.DecimalField', [], {'default': "'0'", 'max_digits': '11', 'decimal_places': '2'})
        },
        'inventory.producttype': {
            'Meta': {'object_name': 'ProductType'},
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'})
        },
        'market.marketcategory': {
            'Meta': {'object_name': 'MarketCategory'},
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'marketplace': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['market.MarketPlace']"}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '60'}),
            'slug': ('django.db.models.fields.SlugField', [], {'unique': 'True', 'max_length': '60', 'db_index': 'True'})
        },
        'market.marketplace': {
            'Meta': {'object_name': 'MarketPlace'},
            'base_domain': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '128'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '92'}),
            'slug': ('django.db.models.fields.SlugField', [], {'unique': 'True', 'max_length': '92', 'db_index': 'True'}),
            'template_prefix': ('django.db.models.fields.SlugField', [], {'unique': 'True', 'max_length': '92', 'db_index': 'True'}),
            'title': ('django.db.models.fields.CharField', [], {'max_length': '92'})
        },
        'market.marketsubcategory': {
            'Meta': {'unique_together': "(('parent', 'slug'),)", 'object_name': 'MarketSubCategory'},
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'marketplace': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['market.MarketPlace']"}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '60'}),
            'parent': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'subcategories'", 'null': 'True', 'to': "orm['market.MarketCategory']"}),
            'slug': ('django.db.models.fields.SlugField', [], {'max_length': '60', 'db_index': 'True'})
        },
        'market_buy.bestseller': {
            'Meta': {'object_name': 'BestSeller'},
            'from_date': ('django.db.models.fields.DateTimeField', [], {}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'revenue': ('django.db.models.fields.DecimalField', [], {'max_digits': '11', 'decimal_places': '2'}),
            'shop': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['shops.Shop']"}),
            'to_date': ('django.db.models.fields.DateTimeField', [], {})
        },
        'market_buy.dealerpick': {
            'Meta': {'object_name': 'DealerPick'},
            'description': ('django.db.models.fields.TextField', [], {'default': "'Dealer description here'"}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'marketplace': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['market.MarketPlace']"}),
            'order': ('django.db.models.fields.IntegerField', [], {'default': '5'}),
            'shop': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['shops.Shop']"})
        },
        'market_buy.editorpick': {
            'Meta': {'object_name': 'EditorPick'},
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'marketplace': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['market.MarketPlace']"}),
            'order': ('django.db.models.fields.IntegerField', [], {'default': '5'}),
            'product': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['inventory.Product']"})
        },
        'market_buy.marketplacepick': {
            'Meta': {'object_name': 'MarketPlacePick'},
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'marketplace': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['market.MarketPlace']"}),
            'order': ('django.db.models.fields.IntegerField', [], {'default': '5'}),
            'product': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['inventory.Product']"})
        },
        'market_buy.show': {
            'Meta': {'object_name': 'Show'},
            'address': ('django.db.models.fields.CharField', [], {'max_length': '128'}),
            'admission': ('django.db.models.fields.DecimalField', [], {'default': "'0.0'", 'max_digits': '11', 'decimal_places': '2'}),
            'city': ('django.db.models.fields.CharField', [], {'max_length': '128'}),
            'contact_info': ('django.db.models.fields.CharField', [], {'max_length': '128'}),
            'country': ('django.db.models.fields.CharField', [], {'default': "'US'", 'max_length': '128'}),
            'date_from': ('django.db.models.fields.DateField', [], {}),
            'date_to': ('django.db.models.fields.DateField', [], {}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'location': ('django.db.models.fields.CharField', [], {'default': "'49.00, -96.00'", 'max_length': '255'}),
            'marketplace': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['market.MarketPlace']"}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '128'}),
            'state': ('django.db.models.fields.CharField', [], {'max_length': '128'}),
            'time_from': ('django.db.models.fields.TimeField', [], {}),
            'time_to': ('django.db.models.fields.TimeField', [], {}),
            'zip': ('django.db.models.fields.CharField', [], {'max_length': '10'})
        },
        'market_buy.wishlistitem': {
            'Meta': {'object_name': 'WishListItem'},
            'category': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['market.MarketCategory']"}),
            'description': ('django.db.models.fields.TextField', [], {}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'ideal_price': ('django.db.models.fields.DecimalField', [], {'max_digits': '11', 'decimal_places': '2'}),
            'marketplace': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['market.MarketPlace']"}),
            'posted_by': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'posted_on': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'subcategory': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['market.MarketSubCategory']"})
        },
        'shops.shop': {
            'Meta': {'object_name': 'Shop'},
            'admin': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['auth.User']"}),
            'bids': ('django.db.models.fields.IntegerField', [], {'default': '0'}),
            'date_time': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'location': ('django.db.models.fields.CharField', [], {'default': "'39.29038,-76.61219'", 'max_length': '255'}),
            'marketplace': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['market.MarketPlace']"}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '60'}),
            'views': ('django.db.models.fields.IntegerField', [], {'default': '0'})
        }
    }

    complete_apps = ['market_buy']

########NEW FILE########
__FILENAME__ = 0004_auto__del_wishlistitem
# encoding: utf-8
import datetime
from south.db import db
from south.v2 import SchemaMigration
from django.db import models

class Migration(SchemaMigration):

    def forwards(self, orm):
        
        # Deleting model 'WishListItem'
        db.delete_table('market_buy_wishlistitem')


    def backwards(self, orm):
        
        # Adding model 'WishListItem'
        db.create_table('market_buy_wishlistitem', (
            ('category', self.gf('django.db.models.fields.related.ForeignKey')(to=orm['market.MarketCategory'])),
            ('posted_on', self.gf('django.db.models.fields.DateTimeField')(auto_now_add=True, blank=True)),
            ('marketplace', self.gf('django.db.models.fields.related.ForeignKey')(to=orm['market.MarketPlace'])),
            ('description', self.gf('django.db.models.fields.TextField')()),
            ('posted_by', self.gf('django.db.models.fields.CharField')(max_length=100)),
            ('id', self.gf('django.db.models.fields.AutoField')(primary_key=True)),
            ('ideal_price', self.gf('django.db.models.fields.DecimalField')(max_digits=11, decimal_places=2)),
            ('subcategory', self.gf('django.db.models.fields.related.ForeignKey')(to=orm['market.MarketSubCategory'])),
        ))
        db.send_create_signal('market_buy', ['WishListItem'])


    models = {
        'auth.group': {
            'Meta': {'object_name': 'Group'},
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '80'}),
            'permissions': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['auth.Permission']", 'symmetrical': 'False', 'blank': 'True'})
        },
        'auth.permission': {
            'Meta': {'unique_together': "(('content_type', 'codename'),)", 'object_name': 'Permission'},
            'codename': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'content_type': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['contenttypes.ContentType']"}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '50'})
        },
        'auth.user': {
            'Meta': {'object_name': 'User'},
            'date_joined': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
            'email': ('django.db.models.fields.EmailField', [], {'max_length': '75'}),
            'first_name': ('django.db.models.fields.CharField', [], {'max_length': '30', 'blank': 'True'}),
            'groups': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['auth.Group']", 'symmetrical': 'False', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'is_active': ('django.db.models.fields.BooleanField', [], {'default': 'True', 'blank': 'True'}),
            'is_staff': ('django.db.models.fields.BooleanField', [], {'default': 'False', 'blank': 'True'}),
            'is_superuser': ('django.db.models.fields.BooleanField', [], {'default': 'False', 'blank': 'True'}),
            'last_login': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
            'last_name': ('django.db.models.fields.CharField', [], {'max_length': '30', 'blank': 'True'}),
            'password': ('django.db.models.fields.CharField', [], {'max_length': '128'}),
            'user_permissions': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['auth.Permission']", 'symmetrical': 'False', 'blank': 'True'}),
            'username': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '32'})
        },
        'contenttypes.contenttype': {
            'Meta': {'unique_together': "(('app_label', 'model'),)", 'object_name': 'ContentType', 'db_table': "'django_content_type'"},
            'app_label': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'model': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '100'})
        },
        'inventory.product': {
            'Meta': {'object_name': 'Product'},
            'category': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['market.MarketCategory']"}),
            'date_time': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'description': ('django.db.models.fields.TextField', [], {}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'shop': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['shops.Shop']"}),
            'subcategory': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['market.MarketSubCategory']"}),
            'title': ('django.db.models.fields.CharField', [], {'max_length': '200'}),
            'type': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['inventory.ProductType']", 'null': 'True', 'blank': 'True'}),
            'weight': ('django.db.models.fields.DecimalField', [], {'default': "'0'", 'max_digits': '11', 'decimal_places': '2'})
        },
        'inventory.producttype': {
            'Meta': {'object_name': 'ProductType'},
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'})
        },
        'market.marketcategory': {
            'Meta': {'object_name': 'MarketCategory'},
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'marketplace': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['market.MarketPlace']"}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '60'}),
            'slug': ('django.db.models.fields.SlugField', [], {'unique': 'True', 'max_length': '60', 'db_index': 'True'})
        },
        'market.marketplace': {
            'Meta': {'object_name': 'MarketPlace'},
            'base_domain': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '128'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '92'}),
            'slug': ('django.db.models.fields.SlugField', [], {'unique': 'True', 'max_length': '92', 'db_index': 'True'}),
            'template_prefix': ('django.db.models.fields.SlugField', [], {'unique': 'True', 'max_length': '92', 'db_index': 'True'}),
            'title': ('django.db.models.fields.CharField', [], {'max_length': '92'})
        },
        'market.marketsubcategory': {
            'Meta': {'unique_together': "(('parent', 'slug'),)", 'object_name': 'MarketSubCategory'},
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'marketplace': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['market.MarketPlace']"}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '60'}),
            'parent': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'subcategories'", 'null': 'True', 'to': "orm['market.MarketCategory']"}),
            'slug': ('django.db.models.fields.SlugField', [], {'max_length': '60', 'db_index': 'True'})
        },
        'market_buy.bestseller': {
            'Meta': {'object_name': 'BestSeller'},
            'from_date': ('django.db.models.fields.DateTimeField', [], {}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'revenue': ('django.db.models.fields.DecimalField', [], {'max_digits': '11', 'decimal_places': '2'}),
            'shop': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['shops.Shop']"}),
            'to_date': ('django.db.models.fields.DateTimeField', [], {})
        },
        'market_buy.dealerpick': {
            'Meta': {'object_name': 'DealerPick'},
            'description': ('django.db.models.fields.TextField', [], {'default': "'Dealer description here'"}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'marketplace': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['market.MarketPlace']"}),
            'order': ('django.db.models.fields.IntegerField', [], {'default': '5'}),
            'shop': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['shops.Shop']"})
        },
        'market_buy.editorpick': {
            'Meta': {'object_name': 'EditorPick'},
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'marketplace': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['market.MarketPlace']"}),
            'order': ('django.db.models.fields.IntegerField', [], {'default': '5'}),
            'product': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['inventory.Product']"})
        },
        'market_buy.marketplacepick': {
            'Meta': {'object_name': 'MarketPlacePick'},
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'marketplace': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['market.MarketPlace']"}),
            'order': ('django.db.models.fields.IntegerField', [], {'default': '5'}),
            'product': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['inventory.Product']"})
        },
        'market_buy.show': {
            'Meta': {'object_name': 'Show'},
            'address': ('django.db.models.fields.CharField', [], {'max_length': '128'}),
            'admission': ('django.db.models.fields.DecimalField', [], {'default': "'0.0'", 'max_digits': '11', 'decimal_places': '2'}),
            'city': ('django.db.models.fields.CharField', [], {'max_length': '128'}),
            'contact_info': ('django.db.models.fields.CharField', [], {'max_length': '128'}),
            'country': ('django.db.models.fields.CharField', [], {'default': "'US'", 'max_length': '128'}),
            'date_from': ('django.db.models.fields.DateField', [], {}),
            'date_to': ('django.db.models.fields.DateField', [], {}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'location': ('django.db.models.fields.CharField', [], {'default': "'49.00, -96.00'", 'max_length': '255'}),
            'marketplace': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['market.MarketPlace']"}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '128'}),
            'state': ('django.db.models.fields.CharField', [], {'max_length': '128'}),
            'time_from': ('django.db.models.fields.TimeField', [], {}),
            'time_to': ('django.db.models.fields.TimeField', [], {}),
            'zip': ('django.db.models.fields.CharField', [], {'max_length': '10'})
        },
        'shops.shop': {
            'Meta': {'object_name': 'Shop'},
            'admin': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['auth.User']"}),
            'bids': ('django.db.models.fields.IntegerField', [], {'default': '0'}),
            'date_time': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'location': ('django.db.models.fields.CharField', [], {'default': "'39.29038,-76.61219'", 'max_length': '255'}),
            'marketplace': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['market.MarketPlace']"}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '60'}),
            'views': ('django.db.models.fields.IntegerField', [], {'default': '0'})
        }
    }

    complete_apps = ['market_buy']

########NEW FILE########
__FILENAME__ = 0005_auto__add_wishlistitem
# encoding: utf-8
import datetime
from south.db import db
from south.v2 import SchemaMigration
from django.db import models

class Migration(SchemaMigration):

    def forwards(self, orm):
        
        # Adding model 'WishListItem'
        db.create_table('market_buy_wishlistitem', (
            ('id', self.gf('django.db.models.fields.AutoField')(primary_key=True)),
            ('marketplace', self.gf('django.db.models.fields.related.ForeignKey')(to=orm['market.MarketPlace'])),
            ('posted_on', self.gf('django.db.models.fields.DateTimeField')(auto_now_add=True, blank=True)),
            ('posted_by', self.gf('django.db.models.fields.related.ForeignKey')(to=orm['auth.User'])),
            ('ideal_price', self.gf('django.db.models.fields.DecimalField')(max_digits=11, decimal_places=2)),
            ('description', self.gf('django.db.models.fields.TextField')()),
            ('category', self.gf('django.db.models.fields.related.ForeignKey')(to=orm['market.MarketCategory'])),
            ('subcategory', self.gf('django.db.models.fields.related.ForeignKey')(to=orm['market.MarketSubCategory'])),
        ))
        db.send_create_signal('market_buy', ['WishListItem'])


    def backwards(self, orm):
        
        # Deleting model 'WishListItem'
        db.delete_table('market_buy_wishlistitem')


    models = {
        'auth.group': {
            'Meta': {'object_name': 'Group'},
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '80'}),
            'permissions': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['auth.Permission']", 'symmetrical': 'False', 'blank': 'True'})
        },
        'auth.permission': {
            'Meta': {'unique_together': "(('content_type', 'codename'),)", 'object_name': 'Permission'},
            'codename': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'content_type': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['contenttypes.ContentType']"}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '50'})
        },
        'auth.user': {
            'Meta': {'object_name': 'User'},
            'date_joined': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
            'email': ('django.db.models.fields.EmailField', [], {'max_length': '75'}),
            'first_name': ('django.db.models.fields.CharField', [], {'max_length': '30', 'blank': 'True'}),
            'groups': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['auth.Group']", 'symmetrical': 'False', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'is_active': ('django.db.models.fields.BooleanField', [], {'default': 'True', 'blank': 'True'}),
            'is_staff': ('django.db.models.fields.BooleanField', [], {'default': 'False', 'blank': 'True'}),
            'is_superuser': ('django.db.models.fields.BooleanField', [], {'default': 'False', 'blank': 'True'}),
            'last_login': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
            'last_name': ('django.db.models.fields.CharField', [], {'max_length': '30', 'blank': 'True'}),
            'password': ('django.db.models.fields.CharField', [], {'max_length': '128'}),
            'user_permissions': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['auth.Permission']", 'symmetrical': 'False', 'blank': 'True'}),
            'username': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '32'})
        },
        'contenttypes.contenttype': {
            'Meta': {'unique_together': "(('app_label', 'model'),)", 'object_name': 'ContentType', 'db_table': "'django_content_type'"},
            'app_label': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'model': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '100'})
        },
        'inventory.product': {
            'Meta': {'object_name': 'Product'},
            'category': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['market.MarketCategory']"}),
            'date_time': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'description': ('django.db.models.fields.TextField', [], {}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'shop': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['shops.Shop']"}),
            'subcategory': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['market.MarketSubCategory']"}),
            'title': ('django.db.models.fields.CharField', [], {'max_length': '200'}),
            'type': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['inventory.ProductType']", 'null': 'True', 'blank': 'True'}),
            'weight': ('django.db.models.fields.DecimalField', [], {'default': "'0'", 'max_digits': '11', 'decimal_places': '2'})
        },
        'inventory.producttype': {
            'Meta': {'object_name': 'ProductType'},
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'})
        },
        'market.marketcategory': {
            'Meta': {'object_name': 'MarketCategory'},
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'marketplace': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['market.MarketPlace']"}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '60'}),
            'slug': ('django.db.models.fields.SlugField', [], {'unique': 'True', 'max_length': '60', 'db_index': 'True'})
        },
        'market.marketplace': {
            'Meta': {'object_name': 'MarketPlace'},
            'base_domain': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '128'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '92'}),
            'slug': ('django.db.models.fields.SlugField', [], {'unique': 'True', 'max_length': '92', 'db_index': 'True'}),
            'template_prefix': ('django.db.models.fields.SlugField', [], {'unique': 'True', 'max_length': '92', 'db_index': 'True'}),
            'title': ('django.db.models.fields.CharField', [], {'max_length': '92'})
        },
        'market.marketsubcategory': {
            'Meta': {'unique_together': "(('parent', 'slug'),)", 'object_name': 'MarketSubCategory'},
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'marketplace': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['market.MarketPlace']"}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '60'}),
            'parent': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'subcategories'", 'null': 'True', 'to': "orm['market.MarketCategory']"}),
            'slug': ('django.db.models.fields.SlugField', [], {'max_length': '60', 'db_index': 'True'})
        },
        'market_buy.bestseller': {
            'Meta': {'object_name': 'BestSeller'},
            'from_date': ('django.db.models.fields.DateTimeField', [], {}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'revenue': ('django.db.models.fields.DecimalField', [], {'max_digits': '11', 'decimal_places': '2'}),
            'shop': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['shops.Shop']"}),
            'to_date': ('django.db.models.fields.DateTimeField', [], {})
        },
        'market_buy.dealerpick': {
            'Meta': {'object_name': 'DealerPick'},
            'description': ('django.db.models.fields.TextField', [], {'default': "'Dealer description here'"}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'marketplace': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['market.MarketPlace']"}),
            'order': ('django.db.models.fields.IntegerField', [], {'default': '5'}),
            'shop': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['shops.Shop']"})
        },
        'market_buy.editorpick': {
            'Meta': {'object_name': 'EditorPick'},
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'marketplace': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['market.MarketPlace']"}),
            'order': ('django.db.models.fields.IntegerField', [], {'default': '5'}),
            'product': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['inventory.Product']"})
        },
        'market_buy.marketplacepick': {
            'Meta': {'object_name': 'MarketPlacePick'},
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'marketplace': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['market.MarketPlace']"}),
            'order': ('django.db.models.fields.IntegerField', [], {'default': '5'}),
            'product': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['inventory.Product']"})
        },
        'market_buy.show': {
            'Meta': {'object_name': 'Show'},
            'address': ('django.db.models.fields.CharField', [], {'max_length': '128'}),
            'admission': ('django.db.models.fields.DecimalField', [], {'default': "'0.0'", 'max_digits': '11', 'decimal_places': '2'}),
            'city': ('django.db.models.fields.CharField', [], {'max_length': '128'}),
            'contact_info': ('django.db.models.fields.CharField', [], {'max_length': '128'}),
            'country': ('django.db.models.fields.CharField', [], {'default': "'US'", 'max_length': '128'}),
            'date_from': ('django.db.models.fields.DateField', [], {}),
            'date_to': ('django.db.models.fields.DateField', [], {}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'location': ('django.db.models.fields.CharField', [], {'default': "'49.00, -96.00'", 'max_length': '255'}),
            'marketplace': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['market.MarketPlace']"}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '128'}),
            'state': ('django.db.models.fields.CharField', [], {'max_length': '128'}),
            'time_from': ('django.db.models.fields.TimeField', [], {}),
            'time_to': ('django.db.models.fields.TimeField', [], {}),
            'zip': ('django.db.models.fields.CharField', [], {'max_length': '10'})
        },
        'market_buy.wishlistitem': {
            'Meta': {'object_name': 'WishListItem'},
            'category': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['market.MarketCategory']"}),
            'description': ('django.db.models.fields.TextField', [], {}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'ideal_price': ('django.db.models.fields.DecimalField', [], {'max_digits': '11', 'decimal_places': '2'}),
            'marketplace': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['market.MarketPlace']"}),
            'posted_by': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['auth.User']"}),
            'posted_on': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'subcategory': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['market.MarketSubCategory']"})
        },
        'shops.shop': {
            'Meta': {'object_name': 'Shop'},
            'admin': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['auth.User']"}),
            'bids': ('django.db.models.fields.IntegerField', [], {'default': '0'}),
            'date_time': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'location': ('django.db.models.fields.CharField', [], {'default': "'39.29038,-76.61219'", 'max_length': '255'}),
            'marketplace': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['market.MarketPlace']"}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '60'}),
            'views': ('django.db.models.fields.IntegerField', [], {'default': '0'})
        }
    }

    complete_apps = ['market_buy']

########NEW FILE########
__FILENAME__ = 0006_auto__add_field_wishlistitem_public
# encoding: utf-8
import datetime
from south.db import db
from south.v2 import SchemaMigration
from django.db import models

class Migration(SchemaMigration):

    def forwards(self, orm):
        
        # Adding field 'WishListItem.public'
        db.add_column('market_buy_wishlistitem', 'public', self.gf('django.db.models.fields.BooleanField')(default=False, blank=True), keep_default=False)


    def backwards(self, orm):
        
        # Deleting field 'WishListItem.public'
        db.delete_column('market_buy_wishlistitem', 'public')


    models = {
        'auth.group': {
            'Meta': {'object_name': 'Group'},
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '80'}),
            'permissions': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['auth.Permission']", 'symmetrical': 'False', 'blank': 'True'})
        },
        'auth.permission': {
            'Meta': {'unique_together': "(('content_type', 'codename'),)", 'object_name': 'Permission'},
            'codename': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'content_type': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['contenttypes.ContentType']"}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '50'})
        },
        'auth.user': {
            'Meta': {'object_name': 'User'},
            'date_joined': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
            'email': ('django.db.models.fields.EmailField', [], {'max_length': '75'}),
            'first_name': ('django.db.models.fields.CharField', [], {'max_length': '30', 'blank': 'True'}),
            'groups': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['auth.Group']", 'symmetrical': 'False', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'is_active': ('django.db.models.fields.BooleanField', [], {'default': 'True', 'blank': 'True'}),
            'is_staff': ('django.db.models.fields.BooleanField', [], {'default': 'False', 'blank': 'True'}),
            'is_superuser': ('django.db.models.fields.BooleanField', [], {'default': 'False', 'blank': 'True'}),
            'last_login': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
            'last_name': ('django.db.models.fields.CharField', [], {'max_length': '30', 'blank': 'True'}),
            'password': ('django.db.models.fields.CharField', [], {'max_length': '128'}),
            'user_permissions': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['auth.Permission']", 'symmetrical': 'False', 'blank': 'True'}),
            'username': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '32'})
        },
        'contenttypes.contenttype': {
            'Meta': {'unique_together': "(('app_label', 'model'),)", 'object_name': 'ContentType', 'db_table': "'django_content_type'"},
            'app_label': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'model': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '100'})
        },
        'inventory.product': {
            'Meta': {'object_name': 'Product'},
            'category': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['market.MarketCategory']"}),
            'date_time': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'description': ('django.db.models.fields.TextField', [], {}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'shop': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['shops.Shop']"}),
            'subcategory': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['market.MarketSubCategory']"}),
            'title': ('django.db.models.fields.CharField', [], {'max_length': '200'}),
            'type': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['inventory.ProductType']", 'null': 'True', 'blank': 'True'}),
            'weight': ('django.db.models.fields.DecimalField', [], {'default': "'0'", 'max_digits': '11', 'decimal_places': '2'})
        },
        'inventory.producttype': {
            'Meta': {'object_name': 'ProductType'},
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'})
        },
        'market.marketcategory': {
            'Meta': {'object_name': 'MarketCategory'},
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'marketplace': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['market.MarketPlace']"}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '60'}),
            'slug': ('django.db.models.fields.SlugField', [], {'unique': 'True', 'max_length': '60', 'db_index': 'True'})
        },
        'market.marketplace': {
            'Meta': {'object_name': 'MarketPlace'},
            'base_domain': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '128'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '92'}),
            'slug': ('django.db.models.fields.SlugField', [], {'unique': 'True', 'max_length': '92', 'db_index': 'True'}),
            'template_prefix': ('django.db.models.fields.SlugField', [], {'unique': 'True', 'max_length': '92', 'db_index': 'True'}),
            'title': ('django.db.models.fields.CharField', [], {'max_length': '92'})
        },
        'market.marketsubcategory': {
            'Meta': {'unique_together': "(('parent', 'slug'),)", 'object_name': 'MarketSubCategory'},
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'marketplace': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['market.MarketPlace']"}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '60'}),
            'parent': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'subcategories'", 'null': 'True', 'to': "orm['market.MarketCategory']"}),
            'slug': ('django.db.models.fields.SlugField', [], {'max_length': '60', 'db_index': 'True'})
        },
        'market_buy.bestseller': {
            'Meta': {'object_name': 'BestSeller'},
            'from_date': ('django.db.models.fields.DateTimeField', [], {}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'revenue': ('django.db.models.fields.DecimalField', [], {'max_digits': '11', 'decimal_places': '2'}),
            'shop': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['shops.Shop']"}),
            'to_date': ('django.db.models.fields.DateTimeField', [], {})
        },
        'market_buy.dealerpick': {
            'Meta': {'object_name': 'DealerPick'},
            'description': ('django.db.models.fields.TextField', [], {'default': "'Dealer description here'"}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'marketplace': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['market.MarketPlace']"}),
            'order': ('django.db.models.fields.IntegerField', [], {'default': '5'}),
            'shop': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['shops.Shop']"})
        },
        'market_buy.editorpick': {
            'Meta': {'object_name': 'EditorPick'},
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'marketplace': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['market.MarketPlace']"}),
            'order': ('django.db.models.fields.IntegerField', [], {'default': '5'}),
            'product': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['inventory.Product']"})
        },
        'market_buy.marketplacepick': {
            'Meta': {'object_name': 'MarketPlacePick'},
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'marketplace': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['market.MarketPlace']"}),
            'order': ('django.db.models.fields.IntegerField', [], {'default': '5'}),
            'product': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['inventory.Product']"})
        },
        'market_buy.show': {
            'Meta': {'object_name': 'Show'},
            'address': ('django.db.models.fields.CharField', [], {'max_length': '128'}),
            'admission': ('django.db.models.fields.DecimalField', [], {'default': "'0.0'", 'max_digits': '11', 'decimal_places': '2'}),
            'city': ('django.db.models.fields.CharField', [], {'max_length': '128'}),
            'contact_info': ('django.db.models.fields.CharField', [], {'max_length': '128'}),
            'country': ('django.db.models.fields.CharField', [], {'default': "'US'", 'max_length': '128'}),
            'date_from': ('django.db.models.fields.DateField', [], {}),
            'date_to': ('django.db.models.fields.DateField', [], {}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'location': ('django.db.models.fields.CharField', [], {'default': "'49.00, -96.00'", 'max_length': '255'}),
            'marketplace': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['market.MarketPlace']"}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '128'}),
            'state': ('django.db.models.fields.CharField', [], {'max_length': '128'}),
            'time_from': ('django.db.models.fields.TimeField', [], {}),
            'time_to': ('django.db.models.fields.TimeField', [], {}),
            'zip': ('django.db.models.fields.CharField', [], {'max_length': '10'})
        },
        'market_buy.wishlistitem': {
            'Meta': {'object_name': 'WishListItem'},
            'category': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['market.MarketCategory']"}),
            'description': ('django.db.models.fields.TextField', [], {}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'ideal_price': ('django.db.models.fields.DecimalField', [], {'max_digits': '11', 'decimal_places': '2'}),
            'marketplace': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['market.MarketPlace']"}),
            'posted_by': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['auth.User']"}),
            'posted_on': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'public': ('django.db.models.fields.BooleanField', [], {'default': 'False', 'blank': 'True'}),
            'subcategory': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['market.MarketSubCategory']"})
        },
        'shops.shop': {
            'Meta': {'object_name': 'Shop'},
            'admin': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['auth.User']"}),
            'bids': ('django.db.models.fields.IntegerField', [], {'default': '0'}),
            'date_time': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'location': ('django.db.models.fields.CharField', [], {'default': "'39.29038,-76.61219'", 'max_length': '255'}),
            'marketplace': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['market.MarketPlace']"}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '60'}),
            'views': ('django.db.models.fields.IntegerField', [], {'default': '0'})
        }
    }

    complete_apps = ['market_buy']

########NEW FILE########
__FILENAME__ = 0007_auto__chg_field_wishlistitem_subcategory
# encoding: utf-8
import datetime
from south.db import db
from south.v2 import SchemaMigration
from django.db import models

class Migration(SchemaMigration):

    def forwards(self, orm):
        
        # Changing field 'WishListItem.subcategory'
        db.alter_column('market_buy_wishlistitem', 'subcategory_id', self.gf('django.db.models.fields.related.ForeignKey')(to=orm['market.MarketSubCategory'], null=True, blank=True))


    def backwards(self, orm):
        
        # Changing field 'WishListItem.subcategory'
        db.alter_column('market_buy_wishlistitem', 'subcategory_id', self.gf('django.db.models.fields.related.ForeignKey')(to=orm['market.MarketSubCategory']))


    models = {
        'auth.group': {
            'Meta': {'object_name': 'Group'},
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '80'}),
            'permissions': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['auth.Permission']", 'symmetrical': 'False', 'blank': 'True'})
        },
        'auth.permission': {
            'Meta': {'unique_together': "(('content_type', 'codename'),)", 'object_name': 'Permission'},
            'codename': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'content_type': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['contenttypes.ContentType']"}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '50'})
        },
        'auth.user': {
            'Meta': {'object_name': 'User'},
            'date_joined': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
            'email': ('django.db.models.fields.EmailField', [], {'max_length': '75'}),
            'first_name': ('django.db.models.fields.CharField', [], {'max_length': '30', 'blank': 'True'}),
            'groups': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['auth.Group']", 'symmetrical': 'False', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'is_active': ('django.db.models.fields.BooleanField', [], {'default': 'True', 'blank': 'True'}),
            'is_staff': ('django.db.models.fields.BooleanField', [], {'default': 'False', 'blank': 'True'}),
            'is_superuser': ('django.db.models.fields.BooleanField', [], {'default': 'False', 'blank': 'True'}),
            'last_login': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
            'last_name': ('django.db.models.fields.CharField', [], {'max_length': '30', 'blank': 'True'}),
            'password': ('django.db.models.fields.CharField', [], {'max_length': '128'}),
            'user_permissions': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['auth.Permission']", 'symmetrical': 'False', 'blank': 'True'}),
            'username': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '32'})
        },
        'contenttypes.contenttype': {
            'Meta': {'unique_together': "(('app_label', 'model'),)", 'object_name': 'ContentType', 'db_table': "'django_content_type'"},
            'app_label': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'model': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '100'})
        },
        'inventory.product': {
            'Meta': {'object_name': 'Product'},
            'category': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['market.MarketCategory']"}),
            'date_time': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'description': ('django.db.models.fields.TextField', [], {}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'shop': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['shops.Shop']"}),
            'subcategory': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['market.MarketSubCategory']"}),
            'title': ('django.db.models.fields.CharField', [], {'max_length': '200'}),
            'type': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['inventory.ProductType']", 'null': 'True', 'blank': 'True'}),
            'weight': ('django.db.models.fields.DecimalField', [], {'default': "'0'", 'max_digits': '11', 'decimal_places': '2'})
        },
        'inventory.producttype': {
            'Meta': {'object_name': 'ProductType'},
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'})
        },
        'market.marketcategory': {
            'Meta': {'object_name': 'MarketCategory'},
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'marketplace': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['market.MarketPlace']"}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '60'}),
            'order': ('django.db.models.fields.IntegerField', [], {'default': '255'}),
            'slug': ('django.db.models.fields.SlugField', [], {'unique': 'True', 'max_length': '60', 'db_index': 'True'})
        },
        'market.marketplace': {
            'Meta': {'object_name': 'MarketPlace'},
            'base_domain': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '128'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '92'}),
            'slug': ('django.db.models.fields.SlugField', [], {'unique': 'True', 'max_length': '92', 'db_index': 'True'}),
            'template_prefix': ('django.db.models.fields.SlugField', [], {'unique': 'True', 'max_length': '92', 'db_index': 'True'}),
            'title': ('django.db.models.fields.CharField', [], {'max_length': '92'})
        },
        'market.marketsubcategory': {
            'Meta': {'unique_together': "(('parent', 'slug'),)", 'object_name': 'MarketSubCategory'},
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'marketplace': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['market.MarketPlace']"}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '60'}),
            'order': ('django.db.models.fields.IntegerField', [], {'default': '255'}),
            'parent': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'subcategories'", 'null': 'True', 'to': "orm['market.MarketCategory']"}),
            'slug': ('django.db.models.fields.SlugField', [], {'max_length': '60', 'db_index': 'True'})
        },
        'market_buy.bestseller': {
            'Meta': {'object_name': 'BestSeller'},
            'from_date': ('django.db.models.fields.DateTimeField', [], {}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'revenue': ('django.db.models.fields.DecimalField', [], {'max_digits': '11', 'decimal_places': '2'}),
            'shop': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['shops.Shop']"}),
            'to_date': ('django.db.models.fields.DateTimeField', [], {})
        },
        'market_buy.dealerpick': {
            'Meta': {'object_name': 'DealerPick'},
            'description': ('django.db.models.fields.TextField', [], {'default': "'Dealer description here'"}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'marketplace': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['market.MarketPlace']"}),
            'order': ('django.db.models.fields.IntegerField', [], {'default': '5'}),
            'shop': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['shops.Shop']"})
        },
        'market_buy.editorpick': {
            'Meta': {'object_name': 'EditorPick'},
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'marketplace': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['market.MarketPlace']"}),
            'order': ('django.db.models.fields.IntegerField', [], {'default': '5'}),
            'product': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['inventory.Product']"})
        },
        'market_buy.marketplacepick': {
            'Meta': {'object_name': 'MarketPlacePick'},
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'marketplace': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['market.MarketPlace']"}),
            'order': ('django.db.models.fields.IntegerField', [], {'default': '5'}),
            'product': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['inventory.Product']"})
        },
        'market_buy.show': {
            'Meta': {'object_name': 'Show'},
            'address': ('django.db.models.fields.CharField', [], {'max_length': '128'}),
            'admission': ('django.db.models.fields.DecimalField', [], {'default': "'0.0'", 'max_digits': '11', 'decimal_places': '2'}),
            'city': ('django.db.models.fields.CharField', [], {'max_length': '128'}),
            'contact_info': ('django.db.models.fields.CharField', [], {'max_length': '128'}),
            'country': ('django.db.models.fields.CharField', [], {'default': "'US'", 'max_length': '128'}),
            'date_from': ('django.db.models.fields.DateField', [], {}),
            'date_to': ('django.db.models.fields.DateField', [], {}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'location': ('django.db.models.fields.CharField', [], {'default': "'49.00, -96.00'", 'max_length': '255'}),
            'marketplace': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['market.MarketPlace']"}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '128'}),
            'state': ('django.db.models.fields.CharField', [], {'max_length': '128'}),
            'time_from': ('django.db.models.fields.TimeField', [], {}),
            'time_to': ('django.db.models.fields.TimeField', [], {}),
            'zip': ('django.db.models.fields.CharField', [], {'max_length': '10'})
        },
        'market_buy.wishlistitem': {
            'Meta': {'object_name': 'WishListItem'},
            'category': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['market.MarketCategory']"}),
            'description': ('django.db.models.fields.TextField', [], {}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'ideal_price': ('django.db.models.fields.DecimalField', [], {'max_digits': '11', 'decimal_places': '2'}),
            'marketplace': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['market.MarketPlace']"}),
            'posted_by': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['auth.User']"}),
            'posted_on': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'public': ('django.db.models.fields.BooleanField', [], {'default': 'False', 'blank': 'True'}),
            'subcategory': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['market.MarketSubCategory']", 'null': 'True', 'blank': 'True'})
        },
        'shops.shop': {
            'Meta': {'object_name': 'Shop'},
            'admin': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['auth.User']"}),
            'bids': ('django.db.models.fields.IntegerField', [], {'default': '0'}),
            'date_time': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'location': ('django.db.models.fields.CharField', [], {'default': "'39.29038,-76.61219'", 'max_length': '255'}),
            'marketplace': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['market.MarketPlace']"}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '60'}),
            'views': ('django.db.models.fields.IntegerField', [], {'default': '0'})
        }
    }

    complete_apps = ['market_buy']

########NEW FILE########
__FILENAME__ = 0008_auto__add_field_show_owner
# encoding: utf-8
import datetime
from south.db import db
from south.v2 import SchemaMigration
from django.db import models

class Migration(SchemaMigration):

    def forwards(self, orm):
        
        # Adding field 'Show.owner'
        db.add_column('market_buy_show', 'owner', self.gf('django.db.models.fields.related.ForeignKey')(to=orm['auth.User'], null=True), keep_default=False)


    def backwards(self, orm):
        
        # Deleting field 'Show.owner'
        db.delete_column('market_buy_show', 'owner_id')


    models = {
        'auth.group': {
            'Meta': {'object_name': 'Group'},
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '80'}),
            'permissions': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['auth.Permission']", 'symmetrical': 'False', 'blank': 'True'})
        },
        'auth.permission': {
            'Meta': {'unique_together': "(('content_type', 'codename'),)", 'object_name': 'Permission'},
            'codename': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'content_type': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['contenttypes.ContentType']"}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '50'})
        },
        'auth.user': {
            'Meta': {'object_name': 'User'},
            'date_joined': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
            'email': ('django.db.models.fields.EmailField', [], {'max_length': '75'}),
            'first_name': ('django.db.models.fields.CharField', [], {'max_length': '30', 'blank': 'True'}),
            'groups': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['auth.Group']", 'symmetrical': 'False', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'is_active': ('django.db.models.fields.BooleanField', [], {'default': 'True', 'blank': 'True'}),
            'is_staff': ('django.db.models.fields.BooleanField', [], {'default': 'False', 'blank': 'True'}),
            'is_superuser': ('django.db.models.fields.BooleanField', [], {'default': 'False', 'blank': 'True'}),
            'last_login': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
            'last_name': ('django.db.models.fields.CharField', [], {'max_length': '30', 'blank': 'True'}),
            'password': ('django.db.models.fields.CharField', [], {'max_length': '128'}),
            'user_permissions': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['auth.Permission']", 'symmetrical': 'False', 'blank': 'True'}),
            'username': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '32'})
        },
        'contenttypes.contenttype': {
            'Meta': {'unique_together': "(('app_label', 'model'),)", 'object_name': 'ContentType', 'db_table': "'django_content_type'"},
            'app_label': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'model': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '100'})
        },
        'inventory.product': {
            'Meta': {'object_name': 'Product'},
            'category': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['market.MarketCategory']"}),
            'date_time': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'description': ('django.db.models.fields.TextField', [], {}),
            'has_image': ('django.db.models.fields.BooleanField', [], {'default': 'False', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'latest_item': ('django.db.models.fields.BooleanField', [], {'default': 'False', 'blank': 'True'}),
            'shop': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['shops.Shop']"}),
            'subcategory': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['market.MarketSubCategory']", 'null': 'True', 'blank': 'True'}),
            'title': ('django.db.models.fields.CharField', [], {'max_length': '200'}),
            'type': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['inventory.ProductType']", 'null': 'True', 'blank': 'True'}),
            'weight': ('django.db.models.fields.DecimalField', [], {'default': "'0'", 'max_digits': '11', 'decimal_places': '2'})
        },
        'inventory.producttype': {
            'Meta': {'object_name': 'ProductType'},
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'})
        },
        'market.marketcategory': {
            'Meta': {'object_name': 'MarketCategory'},
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'marketplace': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['market.MarketPlace']"}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '60'}),
            'order': ('django.db.models.fields.IntegerField', [], {'default': '255'}),
            'slug': ('django.db.models.fields.SlugField', [], {'unique': 'True', 'max_length': '60', 'db_index': 'True'})
        },
        'market.marketplace': {
            'Meta': {'object_name': 'MarketPlace'},
            'base_domain': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '128'}),
            'charge_on_card_as': ('django.db.models.fields.CharField', [], {'default': "''", 'max_length': '255'}),
            'contact_email': ('django.db.models.fields.EmailField', [], {'default': "'contact@yourstore.com'", 'max_length': '75'}),
            'contact_phone': ('django.db.models.fields.CharField', [], {'default': "''", 'max_length': '128'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '92'}),
            'slug': ('django.db.models.fields.SlugField', [], {'unique': 'True', 'max_length': '92', 'db_index': 'True'}),
            'template_prefix': ('django.db.models.fields.SlugField', [], {'unique': 'True', 'max_length': '92', 'db_index': 'True'}),
            'title': ('django.db.models.fields.CharField', [], {'max_length': '92'})
        },
        'market.marketsubcategory': {
            'Meta': {'unique_together': "(('parent', 'slug'),)", 'object_name': 'MarketSubCategory'},
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'marketplace': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['market.MarketPlace']"}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '60'}),
            'order': ('django.db.models.fields.IntegerField', [], {'default': '255'}),
            'parent': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'subcategories'", 'null': 'True', 'to': "orm['market.MarketCategory']"}),
            'slug': ('django.db.models.fields.SlugField', [], {'max_length': '60', 'db_index': 'True'})
        },
        'market_buy.bestseller': {
            'Meta': {'object_name': 'BestSeller'},
            'from_date': ('django.db.models.fields.DateTimeField', [], {}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'revenue': ('django.db.models.fields.DecimalField', [], {'max_digits': '11', 'decimal_places': '2'}),
            'shop': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['shops.Shop']"}),
            'to_date': ('django.db.models.fields.DateTimeField', [], {})
        },
        'market_buy.dealerpick': {
            'Meta': {'object_name': 'DealerPick'},
            'description': ('django.db.models.fields.TextField', [], {'default': "'Dealer description here'"}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'marketplace': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['market.MarketPlace']"}),
            'order': ('django.db.models.fields.IntegerField', [], {'default': '5'}),
            'shop': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['shops.Shop']"})
        },
        'market_buy.editorpick': {
            'Meta': {'object_name': 'EditorPick'},
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'marketplace': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['market.MarketPlace']"}),
            'order': ('django.db.models.fields.IntegerField', [], {'default': '5'}),
            'product': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['inventory.Product']"})
        },
        'market_buy.marketplacepick': {
            'Meta': {'object_name': 'MarketPlacePick'},
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'marketplace': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['market.MarketPlace']"}),
            'order': ('django.db.models.fields.IntegerField', [], {'default': '5'}),
            'product': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['inventory.Product']"})
        },
        'market_buy.show': {
            'Meta': {'object_name': 'Show'},
            'address': ('django.db.models.fields.CharField', [], {'max_length': '128'}),
            'admission': ('django.db.models.fields.DecimalField', [], {'default': "'0.0'", 'max_digits': '11', 'decimal_places': '2'}),
            'city': ('django.db.models.fields.CharField', [], {'max_length': '128'}),
            'contact_info': ('django.db.models.fields.CharField', [], {'max_length': '128'}),
            'country': ('django.db.models.fields.CharField', [], {'default': "'US'", 'max_length': '128'}),
            'date_from': ('django.db.models.fields.DateField', [], {}),
            'date_to': ('django.db.models.fields.DateField', [], {}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'location': ('django.db.models.fields.CharField', [], {'default': "'49.00, -96.00'", 'max_length': '255'}),
            'marketplace': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['market.MarketPlace']"}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '128'}),
            'owner': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['auth.User']", 'null': 'True'}),
            'state': ('django.db.models.fields.CharField', [], {'max_length': '128'}),
            'time_from': ('django.db.models.fields.TimeField', [], {'default': 'datetime.time(12, 0)'}),
            'time_to': ('django.db.models.fields.TimeField', [], {'default': 'datetime.time(12, 0)'}),
            'zip': ('django.db.models.fields.CharField', [], {'max_length': '10'})
        },
        'market_buy.wishlistitem': {
            'Meta': {'object_name': 'WishListItem'},
            'category': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['market.MarketCategory']"}),
            'description': ('django.db.models.fields.TextField', [], {}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'ideal_price': ('django.db.models.fields.DecimalField', [], {'max_digits': '11', 'decimal_places': '2'}),
            'marketplace': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['market.MarketPlace']"}),
            'posted_by': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['auth.User']"}),
            'posted_on': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'public': ('django.db.models.fields.BooleanField', [], {'default': 'False', 'blank': 'True'}),
            'subcategory': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['market.MarketSubCategory']", 'null': 'True', 'blank': 'True'})
        },
        'shops.shop': {
            'Meta': {'object_name': 'Shop'},
            'active': ('django.db.models.fields.BooleanField', [], {'default': 'True', 'blank': 'True'}),
            'admin': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['auth.User']"}),
            'bids': ('django.db.models.fields.IntegerField', [], {'default': '0'}),
            'date_time': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'last_date_to_change_layout': ('django.db.models.fields.DateTimeField', [], {'null': 'True', 'blank': 'True'}),
            'last_date_to_post': ('django.db.models.fields.DateTimeField', [], {'null': 'True', 'blank': 'True'}),
            'location': ('django.db.models.fields.CharField', [], {'default': "'39.29038,-76.61219'", 'max_length': '255'}),
            'marketplace': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['market.MarketPlace']"}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '60'}),
            'views': ('django.db.models.fields.IntegerField', [], {'default': '0'})
        }
    }

    complete_apps = ['market_buy']

########NEW FILE########
__FILENAME__ = models
import datetime
from django.db import models
from django.conf import settings
import logging

from market.models import MarketPlace, MarketCategory, MarketSubCategory
from auth.models import User

class WishListItem(models.Model):
    marketplace = models.ForeignKey(MarketPlace)
    posted_on = models.DateTimeField(auto_now_add=True)
    posted_by = models.ForeignKey(User)
    ideal_price = models.DecimalField(max_digits=11, decimal_places=2)
    description = models.TextField()
    category = models.ForeignKey(MarketCategory)
    subcategory = models.ForeignKey(MarketSubCategory, blank=True, null=True)
    public = models.BooleanField(default=False)
    def __str__(self):
        return "%s - %s" % (self.marketplace, self.description)

class Show(models.Model):
    marketplace = models.ForeignKey(MarketPlace)
    name = models.CharField(max_length=128)
    date_from = models.DateField()
    date_to = models.DateField()
    time_from = models.TimeField(default=datetime.time(12,00))
    time_to = models.TimeField(default=datetime.time(12,00))
    address = models.CharField(max_length=128)
    city = models.CharField(max_length=128) 
    country = models.CharField(max_length=128, default="US")
    state = models.CharField(max_length=128)
    zip = models.CharField(max_length=10)
    contact_info = models.CharField(max_length=128)
    admission = models.DecimalField(max_digits=11, decimal_places=2, default="0.0")
    location = models.CharField(max_length=255, default="49.00, -96.00")
    owner = models.ForeignKey(User, null=True, blank=True)
    
    def is_active(self):
        import datetime
        today = datetime.datetime.today()
        return today < self.date_to
    
    def duration(self):
        dif = self.date_to - self.date_from
        return dif.days
        
    def __str__(self):
        return "%s > %s (%s)" % (self.marketplace, self.name, self.city)
    
    def save(self):
        from geopy import geocoders
        super(Show, self).save()
        try:
            g = geocoders.Google(settings.GOOGLE_KEY)
            place = "%s, %s, %s, %s" % (self.address, self.city, self.state, self.country)
            place, point = g.geocode(place)
            self.location = "%s,%s" % point
            super(Show, self).save()
        except:
            pass
        
    def geo_location(self):
        return self.location.split(",")  

    def will_go_show(self, shop):
        from shops.models import DealerToShow
        try:
            DealerToShow.objects.filter(shop=shop, show=self).get()
            return True
        except DealerToShow.DoesNotExist:
            return False 
    
    def my_show(self, shop):
        try:
            return self.owner.id == shop.admin.id
        except:
            return False
    
    def create(self, shop):
        from shops.models import DealerToShow

        self.save()
        if self.owner:
            DealerToShow.objects.get_or_create(shop=shop, show=self)
        
#TODO: change to EditorProductPick
class EditorPick(models.Model):
    marketplace = models.ForeignKey(MarketPlace)
    order = models.IntegerField(default=5)
    product = models.ForeignKey("inventory.Product")
    
    @classmethod
    def get_available_picks(cls, marketplace):
        """
            Return picks that are available to buy or bid
        """
        def is_available(pick):
            return hasattr(pick.product, 'item') == False or pick.product.item.qty > 0

        picks = EditorPick.objects.filter(marketplace=marketplace).order_by("order")
        return filter(is_available, picks)

    def __str__(self):
        return "%s > %s (%s)" % (self.marketplace, self.product, self.order)

class MarketPlacePick(models.Model):
    marketplace = models.ForeignKey(MarketPlace)
    order = models.IntegerField(default=5)
    product = models.ForeignKey("inventory.Product")
    
    @classmethod
    def get_available_picks(cls, marketplace):
        """
            Return picks that are available to buy or bid
        """
        def is_available(pick):
            return hasattr(pick.product, 'item') == False or pick.product.item.qty > 0

        picks = MarketPlacePick.objects.filter(marketplace=marketplace).order_by("order")
        return filter(is_available, picks)

    def __str__(self):
        return "%s > %s (%s)" % (self.marketplace, self.product, self.order)
    
class DealerPick(models.Model):
    marketplace = models.ForeignKey(MarketPlace)
    order = models.IntegerField(default=5)
    shop = models.ForeignKey("shops.Shop")
    description = models.TextField(default="Dealer description here")
    def __str__(self):
        return "%s > %s (%s)" % (self.marketplace, self.shop, self.order)
    
class BestSeller(models.Model):
    shop = models.ForeignKey("shops.Shop")
    from_date = models.DateTimeField()
    to_date = models.DateTimeField()
    revenue = models.DecimalField(max_digits=11, decimal_places=2)
    def __str__(self):
        return "%s > %s" % (self.shop, self.revenue)
########NEW FILE########
__FILENAME__ = tests
"""
This file demonstrates two different styles of tests (one doctest and one
unittest). These will both pass when you run "manage.py test".

Replace these with more appropriate tests for your application.
"""
import logging

from django.test import TestCase
from django.core.urlresolvers import reverse
from django.conf import settings

from auth.models import User

class MarketSellTest(TestCase):
    fixtures = [
        'greatcoins_market.json', 
        'greatcoins_subscriptions.json', 
        'greatcoins_auth.json', 
        'greatcoins_shops.json',
        'greatcoins_preferences.json',
        'greatcoins_themes.json'
    ]
    
    def setUp(self):
        
        try:
            user = User.objects.get(username="test")
            user.delete()
        except User.DoesNotExist:
            pass
        
    def test_sign_up(self):
        """
        """
        if settings.SITE_RUNNING_MODE  != 'marketplaces':
            return
        
        from shops.models import Shop
        shop = Shop.objects.all()[0]
        HTTP_HOST = shop.default_dns
        
        
        response = self.client.get(reverse("market_buy_signup"), HTTP_HOST=HTTP_HOST)
        
        self.failUnless(response.status_code, 200)
        
        users_count = User.objects.count()
        params = {
            'username': 'test',
            'email': 't@t.com',
            'password1': 'test',
            'password2': 'test',
        }
        
        response = self.client.post(reverse("market_buy_signup"), params)
        self.failUnless(response.status_code, 302)
        
        self.assertEquals(User.objects.count(), users_count + 1)
        
        
        


########NEW FILE########
__FILENAME__ = urls
from django.conf.urls.defaults import *


urlpatterns = patterns('',
    url(r'^$', 'market.views.buy', name='market_buy'),
    url(r'^advanced_search/$', 'market_buy.views.advanced_search', name='buy_advanced_search'),
    url(r'^advanced_search_reset/$', 'market_buy.views.advanced_search', {"reset": True}, name='buy_advanced_search_reset'),
    url(r'^categories/$', 'market_buy.views.categories', name='buy_categories'),
    url(r'^confirmemail/(?P<code>[\d\w\-]+)/$', 'market_buy.views.confirmemail', name='buy_confirmemail'),
    url(r'^howtobuy/$', 'market_buy.views.howtobuy', name='buy_howtobuy'),
    url(r'^editor_pick/$', 'market_buy.views.editor_pick', name='buy_editor_pick'),
    url(r'^latest_items/$', 'market_buy.views.latest_items', name='buy_latest_items'),
    url(r'^map_pick/$', 'market_buy.views.map_pick', name='buy_map_pick'),
    url(r'^show_listing/$', 'market_buy.views.show_listing', name='buy_show_listing'),
    url(r'^show_search/$', 'market_buy.views.show_search', name='buy_show_search'),
    url(r'^shop_local/$', 'market_buy.views.shop_local', name='buy_shop_local'),
    url(r'^top_sellers/$', 'market_buy.views.top_sellers', name='buy_top_sellers'),
    url(r'^wish_list/$', 'market_buy.views.wish_list', name='buy_wish_list'),
    url(r'^wish_list/post_item/$', 'market_buy.views.post_wish_list_item', name='post_wish_list_item'),
    url(r'^ajax_get_subcategories/$', 'market_buy.views.ajax_get_subcategories', name='ajax_get_subcategories'),
    
    url(r'^login/$', 'market_buy.views.login', name='market_buy_login'),
    url(r'^signup/$', 'market_buy.views.signup', name='market_buy_signup'),
    url(r'^profile/$', 'market_buy.views.user_profile', name='market_buy_user_profile'),
    url(r'^delete_profile_image/$', 'market_buy.views.delete_profile_image', name='delete_profile_image'),
    
    url(r'^product/p(?P<id>[\d]+)/', 'market_buy.views.product_redirect', name="market_buy_product_redirect"),
    url(r'^product/i(?P<id>[\d]+)/', 'market_buy.views.item_redirect', name="market_buy_item_redirect"),
)

########NEW FILE########
__FILENAME__ = views
import logging
import datetime
import bisect

from django.conf import settings
from django.contrib.localflavor.us.us_states import STATE_CHOICES
from django.core.paginator import Paginator, InvalidPage, EmptyPage, PageNotAnInteger
from django.core.urlresolvers import reverse
from django.db import transaction
from django.http import HttpResponseRedirect, HttpResponse, Http404
from django.shortcuts import render_to_response, get_object_or_404
from django.template import RequestContext
from django.utils.translation import ugettext as _

from auth.decorators import login_required
from django.core.mail.message import EmailMultiAlternatives
from uni_form.helpers import FormHelper, Layout, Fieldset, Row, Submit

from market_buy.forms import AdvancedSearchForm


def advanced_search(request, reset=False):
    marketplace = request.marketplace

    if reset:
        form = AdvancedSearchForm(marketplace=marketplace)
    else:
        form = AdvancedSearchForm(marketplace=marketplace, data=request.GET)


    if request.GET.get("do"):

        result_list = []
        if form.is_valid():
    
            result_list = form.search()
            
            pager = Paginator(result_list, settings.HAYSTACK_SEARCH_RESULTS_PER_PAGE)

            try:
                page = int(request.GET.get("page", "1"))
            except:
                page = 1

            try:
                paginator = pager.page(page)
            except (EmptyPage, InvalidPage):
                raise Http404

            paged = (pager.num_pages > 1)

            return render_to_response(
                "%s/buy/advanced_search_results.html" % marketplace.template_prefix, 
                {"result_list": paginator, "form": form,  
                 "pages": pager.page_range, "paged": paged, "total": pager.count, 
                 "view_mode": form.cleaned_data["view_by"]}, RequestContext(request))

    form_helper = FormHelper()
    layout = Layout(
        Fieldset("", "q"),
        Fieldset("", Row("categories", "subcategories")),
        Fieldset("", "include"),
        Fieldset("", Row("from_price", "to_price")),
        Fieldset("", "sort"),
        Fieldset("", "view_by"),
    )
    form_helper.add_layout(layout)
    submit = Submit("do", _("Search"))
    submit.field_classes = "button_primary"
    form_helper.add_input(submit)

    return render_to_response(
        "%s/buy/advanced_search.html" % marketplace.template_prefix, 
        {"form": form, "helper": form_helper} , RequestContext(request))


def categories(request):
    """ Return the categories for an specifica marketplace """
    return render_to_response("%s/buy/categories.html" % request.marketplace.template_prefix, 
                              {} , RequestContext(request))

def howtobuy(request):
    """ Return the how to buy for an specific marketplace """
    return render_to_response("%s/buy/howtobuy.html" % request.marketplace.template_prefix, 
                              {} , RequestContext(request))
def editor_pick(request):
    """ Return a list of items marked as favorites by admins  """
    from models import EditorPick
    
    marketplace = request.marketplace
    picks = EditorPick.get_available_picks(marketplace)
    return render_to_response("%s/buy/favorites.html" % request.marketplace.template_prefix, 
                              {'picks' : picks} , RequestContext(request))


def latest_items(request):
    """ Return the list of the latest 20(?) posted items in the stores """
    from inventory.models import Product
    marketplace = request.marketplace
    
    latest_items = Product.objects.filter(shop__marketplace=marketplace, latest_item=True, has_image=True)[:10]
    
    return render_to_response("%s/buy/latest_items.html" % request.marketplace.template_prefix, 
                              {'latest_items' : latest_items} , RequestContext(request))

def map_pick(request):
    """ Return """
    from shops.models import Shop
    marketplace = request.marketplace
    shops = Shop.actives.filter(marketplace=marketplace)
    return render_to_response("%s/buy/map_pick.html" % request.marketplace.template_prefix, 
                              {'shops' : shops} , RequestContext(request))

def show_listing(request):
    """ Return the list of shows added by admins """
    
    from market_buy.models import Show
    marketplace = request.marketplace
    shows = Show.objects.filter(marketplace=marketplace).filter(date_to__gte=datetime.datetime.today())
    
    params = {'states': STATE_CHOICES, 'shows': shows }
    
    return render_to_response("%s/buy/show_listing.html" % request.marketplace.template_prefix, 
                              params , RequestContext(request))

def show_search(request):
    """ Shows search """
    from geopy import geocoders
    from distance_helper import distance_between_points
    from market_buy.models import Show
    marketplace = request.marketplace
    
    city = request.POST.get('city', None)
    state = request.POST.get('state')
    zip = request.POST.get('zip')
    country = request.POST.get('country', 'US')
        
    if (city == u'') or (state == u''):
        request.flash['message'] = "Please, fill at least the city and state fields to complete the search!"
        request.flash['severity'] = "error"
        return HttpResponseRedirect(reverse("buy_show_listing"))
    
    try:
        g = geocoders.Google(settings.GOOGLE_KEY)
        place = "%s, %s, %s" % (city, state, country)
        place, point1 = g.geocode(place)
    except Exception, e:
        request.flash['message'] = "Could not determine your location. Try again with other input data!"
        request.flash['severity'] = "error"
        return HttpResponseRedirect(reverse("buy_show_listing"))
        
    all_shows = Show.objects.filter(marketplace=marketplace).filter(date_to__gte=datetime.datetime.today())
    
    max_distance = 1500
    metric = "miles"
    
    shows = []
    
    for show in all_shows:
        point2 = [float(x) for x in show.geo_location()]
        distance = distance_between_points(point1, point2 , metric)
        if distance < max_distance:
            bisect.insort(shows, (int(distance), show))

    params = {'states': STATE_CHOICES, 'shows': shows, 'place': place}
    
    return render_to_response("%s/buy/show_listing.html" % request.marketplace.template_prefix, 
                              params, RequestContext(request))
    
def shop_local(request):
    """ Return the shops near some location """
    
    
    from shops.models import Shop
    from geopy import geocoders
    from distance_helper import distance_between_points
    
    in_range = []
    params = {}
    params['states'] = STATE_CHOICES
    
    if request.method == "POST":
        max_distance = float(request.POST.get("max_distance"))
        metric = request.POST.get("metric", "miles")
        city = request.POST.get("city")
        state = request.POST.get("state")
        country = request.POST.get("country", "US")
        
        try:
            g = geocoders.Google(settings.GOOGLE_KEY)
            place = "%s, %s, %s" % (city, state, country)
            place, point1 = g.geocode(place)
        except Exception, e:
            logging.critical(e)
            request.flash['message'] = "Invalid input!"
            request.flash['severity'] = "error"
            return render_to_response("%s/buy/shop_local.html" % request.marketplace.template_prefix, 
                              {'shops' : in_range} , 
                              RequestContext(request))
        
        marketplace = request.marketplace
        shops = Shop.actives.filter(marketplace=marketplace)
        
        for shop in shops:
            point2 = [float(x) for x in shop.geo_location()]
            distance = distance_between_points(point1, point2 , metric)
            logging.critical("%s - %s - %s" % (shop, point2, distance))
            if distance < max_distance:
                bisect.insort(in_range, (int(distance), shop))
        
        params.update({'shops': in_range, 'metric' : metric, 'selected_city': city, 'selected_state': state, 'do_search': True})
    
    else:
        params.update({'shops': [], 'do_search': False})
    
    return render_to_response("%s/buy/shop_local.html" % request.marketplace.template_prefix, 
                              params , 
                              RequestContext(request))


def top_sellers(request):
    """ Return top seller of the month, and the last 10 top sellers """
    from shops.models import Shop
    from market_buy.models import BestSeller
    
    marketplace = request.marketplace
    sellers = BestSeller.objects.filter(shop__marketplace=marketplace).order_by("-to_date")[:10]
    
    if not sellers:
        delta = 7
        date_to = datetime.datetime.now()
        date_from = date_to - datetime.timedelta(delta)
    
        best_seller = BestSeller()
        best_seller.shop = Shop.objects.all().filter(marketplace=marketplace).order_by('?')[0]
        best_seller.from_date = date_from
        best_seller.to_date = date_to
        best_seller.revenue = 0
        best_seller.save()
        sellers = BestSeller.objects.filter(shop__marketplace=marketplace).order_by("-to_date")
    
    return render_to_response("%s/buy/top_sellers.html" % request.marketplace.template_prefix, 
                              {'best_sellers' : sellers} , RequestContext(request))


def wish_list(request):
    """ Return the wishes list posted by the users """
    from market_buy.models import WishListItem
    from market_buy.forms import WishListItemForm
    
    marketplace = request.marketplace
    wihs_list = WishListItem.objects.filter(marketplace=marketplace).order_by("posted_on")    
    form = WishListItemForm()
    
    return render_to_response("%s/buy/wish_list.html" % request.marketplace.template_prefix, 
                              {
                               'wish_list' : wihs_list,
                               'form' : form,
                               } , 
                              RequestContext(request))


def ajax_get_subcategories(request):
    from market.models import MarketSubCategory, MarketCategory
    categories = request.REQUEST.get('categories', "")
    try:
        categories = categories.split(",")
        logging.info("categories: %s" % categories)
        categories = MarketCategory.objects.filter(id__in=categories)
        logging.info("categories: %s" % categories)
        sub_categories = MarketSubCategory.objects.filter(parent__in=categories).order_by("name")
        html = ""
        for sub in sub_categories:
            html += '<option value="%d">%s</option>' % (sub.id, sub.name)
        logging.info("subscategories: %s" % html)
        return HttpResponse(html)
    except:
        logging.exception("error getting subcategories")
        return HttpResponse("")
    
@login_required
def post_wish_list_item(request):
    from market_buy.forms import WishListItemForm
    
    user = request.user
    marketplace = request.marketplace
    if request.method == "POST":
        form = WishListItemForm(request.POST)
        if form.is_valid():
            item = form.save(commit = False)
            item.posted_by = user
            item.marketplace = marketplace
            item.save()
            request.flash['message'] = _("Item was successfully added...")
            request.flash['severity'] = "success"
           
        else:
            request.flash['message'] = _("Item could not be added...")
            request.flash['severity'] = "error" 
        
    return HttpResponseRedirect(reverse("buy_wish_list"))


def item_redirect(request, id):
    #from inventory.models import Product
    from for_sale.models import Item
    
    product = get_object_or_404(Item, id=id)
    
    host_name = product.shop.default_dns
    #if hasattr(product, 'item'): 
    path = reverse("bidding_view_item", urlconf="stores.urls", args=[product.id])
    return HttpResponseRedirect("http://%s%s" % (host_name, path))
    #else:
    #    return HttpResponseRedirect("/")


    
def product_redirect(request, id):
    from inventory.models import Product
    
    product = get_object_or_404(Product, id=id)
    
    host_name = product.shop.default_dns
    if hasattr(product, 'item'): 
        path = reverse("bidding_view_item", urlconf="stores.urls", args=[product.id])
        return HttpResponseRedirect("http://%s%s" % (host_name, path))
    elif hasattr(product, 'lot'):
        path = reverse("bidding_view_lot", urlconf="stores.urls", args=[product.id])
        return HttpResponseRedirect("http://%s%s" % (host_name, path))
    else:
        return HttpResponseRedirect("/")


@transaction.commit_on_success
def signup(request):
    from auth.models import User
    from auth import load_backend, login
    from users.models import Profile, EmailVerify
    from market_buy.forms import BuyerForm
    
    form = BuyerForm(request.POST or None)
    if form.is_valid():
        """ Generate Auth User """
        user = User.objects.create_user(form.cleaned_data["username"],
                                        form.cleaned_data["email"], 
                                        form.cleaned_data["password1"])
        
        user.first_name = form.cleaned_data["first_name"]
        user.last_name = form.cleaned_data["last_name"]
        user.is_active = False
        user.save()
        
        """ Set profile """
        profile = Profile(user=user)
        profile.save()

        """ Send mail to confirm account """
        email_verify = EmailVerify(user=user, user_activation=True)
        code = email_verify.generate_code()
        email_verify.save()
        
        # TODO: remove this
        send_mail_account_confirmation(user, email_verify.code, request.marketplace)        
        
#        return HttpResponseRedirect(reverse('confirmemail', args=[code]))
#        for backend in settings.AUTHENTICATION_BACKENDS:
#            if user == load_backend(backend).get_user(user.pk):
#                user.backend = backend
#                break
#        if hasattr(user, 'backend'):
#            login(request, user)
        
        if request.session.get('sell_signup',False):
            request.flash['message'] = _("<h5>Please check your email and confirm your account to start selling...</h5>")
            request.flash['severity'] = "success"
            return HttpResponseRedirect(reverse('market_sell_signup'))
        else:
            request.flash['message'] = _("<h5>Please check your email and confirm your account. Once confirmed you can Buy or Sell on GreatCoins.com</h5>")
            request.flash['severity'] = "success"
            return HttpResponseRedirect(reverse('market_home'))
    else:
        #request.method == GET
        if request.GET.has_key('sell_signup'):
            request.session['sell_signup'] = request.GET.get('sell_signup','') == '1'

    return render_to_response('%s/buy/register.html'% request.marketplace.template_prefix, 
                              {'form': form},
                              RequestContext(request))


def login(request):
    from auth import authenticate, login
    
    if request.method == 'POST':
        username = request.POST['username']
        password = request.POST['password']
        user = authenticate(username=username, password=password)
        if user is not None:
            if user.is_active:
                login(request, user)
                next = request.POST.get('next', reverse("market_home"))
                return HttpResponseRedirect(next)
            else:
                request.flash['message'] = _("Your account is inactive... You must confirm your account before login.")
                request.flash['severity'] = "error"
        else:
            request.flash['message'] = _("You entered an invalid username or password. Please try again")
            request.flash['severity'] = "error"
            
        return render_to_response('%s/buy/login.html'% request.marketplace.template_prefix, 
                                  {'next': request.POST.get('next', None)},
                                  RequestContext(request))
    
    return render_to_response('%s/buy/login.html'% request.marketplace.template_prefix, 
                              {'next': request.GET.get('next', None)},
                              RequestContext(request))
    
def send_mail_account_confirmation(user, code, marketplace):
    """
        Send message to the user to confirm your account
    """
    link = "http://www.%s/buy/confirmemail/%s/" % (marketplace.base_domain , code)
    
    subject = "%s Account Confirmation" % marketplace.name    
    
    text_content = _("""
    Hi %(username)s,
    
    You recently registered at %(marketplace_name)s. Please confirm your account by following this link: %(link)s
                       
    Thanks.
                       
    %(marketplace_name)s Team.""") % {'username': user.username, 'link': link, 'marketplace_name': marketplace.name}
    
    msg = EmailMultiAlternatives(subject,
                                 text_content,
                                 settings.EMAIL_FROM,
                                 [user.email, settings.EMAIL_FROM],
                                 headers={'X-SMTPAPI': '{\"category\": \"Account Confirmation\"}'})
    logging.critical(text_content);
    
    try:
        msg.send()
    except:
        logging.exception("failure sending mail")

def confirmemail(request, code):
    from users.models import EmailVerify
    marketplace = request.marketplace
    try:
        verify = EmailVerify.objects.filter(code = code).get()
        if not verify.user_activation:
            request.flash['message'] = _("<h5>Account verification failed</h5>")
            request.flash['severity'] = "error"
            return HttpResponseRedirect(reverse('market_home'))
            
        else:
            user = verify.user
            user.is_active = True
            user.save()
            
            if verify.verified:
                request.flash['message'] = _("<h5>Your account was already verified! You can login now <a href='%s'>here</a></h5>" % reverse("market_buy_login"))
                request.flash['severity'] = "success"
                return HttpResponseRedirect(reverse('market_home'))
            
            else:
                verify.verified = True
                verify.save()
            
            from auth import load_backend, login
            if not hasattr(user, 'backend'):
                for backend in settings.AUTHENTICATION_BACKENDS:
                    if user == load_backend(backend).get_user(user.pk):
                        user.backend = backend
                        break
            if hasattr(user, 'backend'):
                login(request, user)
            
            params = {}
            
            return render_to_response(
                "%s/email_confirmed.html" % marketplace.template_prefix, params, RequestContext(request))
        
    except EmailVerify.DoesNotExist:
        request.flash['message'] = _("<h5>Account verification failed</h5>")
        request.flash['severity'] = "error"
        return HttpResponseRedirect(reverse('market_home'))

@login_required
def user_profile(request):
    from auth.models import User
    from users.forms import UserProfile
    from users.models import check_profile
    marketplace = request.marketplace
    user = request.user
    
    check_profile(User, instance=request.user)
    
    if request.method == 'POST':
        form = UserProfile(data=request.POST, user=user)
        if form.is_valid():
            user.username = form.cleaned_data['username']
            user.first_name = form.cleaned_data['first_name']
            user.last_name = form.cleaned_data['last_name']
            user.profile.street_address = form.cleaned_data['street_address']
            user.profile.city = form.cleaned_data['city']
            user.profile.state = form.cleaned_data['state']
            user.profile.zip = form.cleaned_data['zip']
            user.profile.country = form.cleaned_data['country']
            user.profile.phone = form.cleaned_data['phone']

            try:
                photo = request.FILES['photo']
                user.profile.photo = photo
            except:
                pass 

            user.save()
            user.profile.save()
        
            return HttpResponseRedirect(reverse('market_home'))
    else:
        initial = { 'username': user.username,
                    'first_name': user.first_name,
                    'last_name': user.last_name,
                    'street_address': user.profile.street_address,
                    'city': user.profile.city,
                    'state': user.profile.state,
                    'zip': user.profile.zip,
                    'country': user.profile.country,
                    'phone': user.profile.phone,
                    }
        form = UserProfile(initial=initial, user=user)
    
    params = {'form': form, 'photo': user.profile.photo }
    return render_to_response("%s/buy/profile.html" % marketplace.template_prefix,
                               params,
                               RequestContext(request))

@login_required
def delete_profile_image(request):
    from users.models import Profile
    try:
        profile = Profile.objects.get(user__id=request.user.id)
        profile.photo = ''
        profile.save()
    except Exception, ex:
        logging.debug(str(ex))

    return HttpResponseRedirect(reverse('market_buy_user_profile'))

########NEW FILE########
__FILENAME__ = admin
from django.contrib import admin

from market_community.models import MarketPlaceAnnouncement, FAQCategory, FAQEntry, PostEditorPick

admin.site.register(MarketPlaceAnnouncement)
admin.site.register(FAQCategory)
admin.site.register(FAQEntry)
admin.site.register(PostEditorPick)
########NEW FILE########
__FILENAME__ = forms

########NEW FILE########
__FILENAME__ = 0001_initial
# encoding: utf-8
import datetime
from south.db import db
from south.v2 import SchemaMigration
from django.db import models

class Migration(SchemaMigration):

    def forwards(self, orm):
        
        # Adding model 'MarketPlaceAnnouncement'
        db.create_table('market_community_marketplaceannouncement', (
            ('id', self.gf('django.db.models.fields.AutoField')(primary_key=True)),
            ('marketplace', self.gf('django.db.models.fields.related.ForeignKey')(to=orm['market.MarketPlace'])),
            ('posted_on', self.gf('django.db.models.fields.DateTimeField')(auto_now_add=True, blank=True)),
            ('posted_by', self.gf('django.db.models.fields.CharField')(max_length=100)),
            ('announcement', self.gf('django.db.models.fields.TextField')()),
            ('image', self.gf('django.db.models.fields.files.ImageField')(max_length=100)),
        ))
        db.send_create_signal('market_community', ['MarketPlaceAnnouncement'])

        # Adding model 'FAQCategory'
        db.create_table('market_community_faqcategory', (
            ('id', self.gf('django.db.models.fields.AutoField')(primary_key=True)),
            ('marketplace', self.gf('django.db.models.fields.related.ForeignKey')(to=orm['market.MarketPlace'])),
            ('posted_on', self.gf('django.db.models.fields.DateTimeField')(auto_now_add=True, blank=True)),
            ('name', self.gf('django.db.models.fields.CharField')(max_length=200)),
            ('description', self.gf('django.db.models.fields.TextField')(null=True, blank=True)),
            ('image', self.gf('django.db.models.fields.files.ImageField')(max_length=100)),
        ))
        db.send_create_signal('market_community', ['FAQCategory'])

        # Adding model 'FAQEntry'
        db.create_table('market_community_faqentry', (
            ('id', self.gf('django.db.models.fields.AutoField')(primary_key=True)),
            ('category', self.gf('django.db.models.fields.related.ForeignKey')(to=orm['market_community.FAQCategory'])),
            ('question', self.gf('django.db.models.fields.CharField')(max_length=255)),
            ('answer', self.gf('django.db.models.fields.TextField')()),
            ('anchor', self.gf('django.db.models.fields.CharField')(max_length=255, blank=True)),
        ))
        db.send_create_signal('market_community', ['FAQEntry'])


    def backwards(self, orm):
        
        # Deleting model 'MarketPlaceAnnouncement'
        db.delete_table('market_community_marketplaceannouncement')

        # Deleting model 'FAQCategory'
        db.delete_table('market_community_faqcategory')

        # Deleting model 'FAQEntry'
        db.delete_table('market_community_faqentry')


    models = {
        'market.marketplace': {
            'Meta': {'object_name': 'MarketPlace'},
            'base_domain': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '128'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '92'}),
            'slug': ('django.db.models.fields.SlugField', [], {'unique': 'True', 'max_length': '92', 'db_index': 'True'}),
            'template_prefix': ('django.db.models.fields.SlugField', [], {'unique': 'True', 'max_length': '92', 'db_index': 'True'}),
            'title': ('django.db.models.fields.CharField', [], {'max_length': '92'})
        },
        'market_community.faqcategory': {
            'Meta': {'object_name': 'FAQCategory'},
            'description': ('django.db.models.fields.TextField', [], {'null': 'True', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'image': ('django.db.models.fields.files.ImageField', [], {'max_length': '100'}),
            'marketplace': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['market.MarketPlace']"}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '200'}),
            'posted_on': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'})
        },
        'market_community.faqentry': {
            'Meta': {'object_name': 'FAQEntry'},
            'anchor': ('django.db.models.fields.CharField', [], {'max_length': '255', 'blank': 'True'}),
            'answer': ('django.db.models.fields.TextField', [], {}),
            'category': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['market_community.FAQCategory']"}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'question': ('django.db.models.fields.CharField', [], {'max_length': '255'})
        },
        'market_community.marketplaceannouncement': {
            'Meta': {'object_name': 'MarketPlaceAnnouncement'},
            'announcement': ('django.db.models.fields.TextField', [], {}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'image': ('django.db.models.fields.files.ImageField', [], {'max_length': '100'}),
            'marketplace': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['market.MarketPlace']"}),
            'posted_by': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'posted_on': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'})
        }
    }

    complete_apps = ['market_community']

########NEW FILE########
__FILENAME__ = 0002_auto__add_posteditorpick__add_field_faqcategory_order__add_field_faqen
# encoding: utf-8
import datetime
from south.db import db
from south.v2 import SchemaMigration
from django.db import models

class Migration(SchemaMigration):

    def forwards(self, orm):
        
        # Adding model 'PostEditorPick'
        db.create_table('market_community_posteditorpick', (
            ('id', self.gf('django.db.models.fields.AutoField')(primary_key=True)),
            ('marketplace', self.gf('django.db.models.fields.related.ForeignKey')(to=orm['market.MarketPlace'])),
            ('order', self.gf('django.db.models.fields.IntegerField')(default=5)),
            ('post', self.gf('django.db.models.fields.related.ForeignKey')(to=orm['blog_pages.Post'])),
        ))
        db.send_create_signal('market_community', ['PostEditorPick'])

        # Adding field 'FAQCategory.order'
        db.add_column('market_community_faqcategory', 'order', self.gf('django.db.models.fields.IntegerField')(default=5), keep_default=False)

        # Adding field 'FAQEntry.order'
        db.add_column('market_community_faqentry', 'order', self.gf('django.db.models.fields.IntegerField')(default=5), keep_default=False)


    def backwards(self, orm):
        
        # Deleting model 'PostEditorPick'
        db.delete_table('market_community_posteditorpick')

        # Deleting field 'FAQCategory.order'
        db.delete_column('market_community_faqcategory', 'order')

        # Deleting field 'FAQEntry.order'
        db.delete_column('market_community_faqentry', 'order')


    models = {
        'auth.group': {
            'Meta': {'object_name': 'Group'},
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '80'}),
            'permissions': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['auth.Permission']", 'symmetrical': 'False', 'blank': 'True'})
        },
        'auth.permission': {
            'Meta': {'unique_together': "(('content_type', 'codename'),)", 'object_name': 'Permission'},
            'codename': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'content_type': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['contenttypes.ContentType']"}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '50'})
        },
        'auth.user': {
            'Meta': {'object_name': 'User'},
            'date_joined': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
            'email': ('django.db.models.fields.EmailField', [], {'max_length': '75'}),
            'first_name': ('django.db.models.fields.CharField', [], {'max_length': '30', 'blank': 'True'}),
            'groups': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['auth.Group']", 'symmetrical': 'False', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'is_active': ('django.db.models.fields.BooleanField', [], {'default': 'True', 'blank': 'True'}),
            'is_staff': ('django.db.models.fields.BooleanField', [], {'default': 'False', 'blank': 'True'}),
            'is_superuser': ('django.db.models.fields.BooleanField', [], {'default': 'False', 'blank': 'True'}),
            'last_login': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
            'last_name': ('django.db.models.fields.CharField', [], {'max_length': '30', 'blank': 'True'}),
            'password': ('django.db.models.fields.CharField', [], {'max_length': '128'}),
            'user_permissions': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['auth.Permission']", 'symmetrical': 'False', 'blank': 'True'}),
            'username': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '32'})
        },
        'blog_pages.post': {
            'Meta': {'object_name': 'Post'},
            'body': ('django.db.models.fields.TextField', [], {}),
            'date_time': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'shop': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['shops.Shop']"}),
            'title': ('django.db.models.fields.CharField', [], {'max_length': '60'})
        },
        'contenttypes.contenttype': {
            'Meta': {'unique_together': "(('app_label', 'model'),)", 'object_name': 'ContentType', 'db_table': "'django_content_type'"},
            'app_label': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'model': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '100'})
        },
        'market.marketplace': {
            'Meta': {'object_name': 'MarketPlace'},
            'base_domain': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '128'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '92'}),
            'slug': ('django.db.models.fields.SlugField', [], {'unique': 'True', 'max_length': '92', 'db_index': 'True'}),
            'template_prefix': ('django.db.models.fields.SlugField', [], {'unique': 'True', 'max_length': '92', 'db_index': 'True'}),
            'title': ('django.db.models.fields.CharField', [], {'max_length': '92'})
        },
        'market_community.faqcategory': {
            'Meta': {'object_name': 'FAQCategory'},
            'description': ('django.db.models.fields.TextField', [], {'null': 'True', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'image': ('django.db.models.fields.files.ImageField', [], {'max_length': '100'}),
            'marketplace': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['market.MarketPlace']"}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '200'}),
            'order': ('django.db.models.fields.IntegerField', [], {'default': '5'}),
            'posted_on': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'})
        },
        'market_community.faqentry': {
            'Meta': {'object_name': 'FAQEntry'},
            'anchor': ('django.db.models.fields.CharField', [], {'max_length': '255', 'blank': 'True'}),
            'answer': ('django.db.models.fields.TextField', [], {}),
            'category': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['market_community.FAQCategory']"}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'order': ('django.db.models.fields.IntegerField', [], {'default': '5'}),
            'question': ('django.db.models.fields.CharField', [], {'max_length': '255'})
        },
        'market_community.marketplaceannouncement': {
            'Meta': {'object_name': 'MarketPlaceAnnouncement'},
            'announcement': ('django.db.models.fields.TextField', [], {}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'image': ('django.db.models.fields.files.ImageField', [], {'max_length': '100'}),
            'marketplace': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['market.MarketPlace']"}),
            'posted_by': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'posted_on': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'})
        },
        'market_community.posteditorpick': {
            'Meta': {'object_name': 'PostEditorPick'},
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'marketplace': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['market.MarketPlace']"}),
            'order': ('django.db.models.fields.IntegerField', [], {'default': '5'}),
            'post': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['blog_pages.Post']"})
        },
        'shops.shop': {
            'Meta': {'object_name': 'Shop'},
            'admin': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['auth.User']"}),
            'bids': ('django.db.models.fields.IntegerField', [], {'default': '0'}),
            'date_time': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'location': ('django.db.models.fields.CharField', [], {'default': "'39.29038,-76.61219'", 'max_length': '255'}),
            'marketplace': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['market.MarketPlace']"}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '60'}),
            'views': ('django.db.models.fields.IntegerField', [], {'default': '0'})
        }
    }

    complete_apps = ['market_community']

########NEW FILE########
__FILENAME__ = models
from django.db import models
from django.template.defaultfilters import slugify

from market.models import MarketPlace
from core.thumbs import ImageWithThumbsField
from blog_pages.models import Post

class MarketPlaceAnnouncement(models.Model):
    marketplace = models.ForeignKey(MarketPlace)
    posted_on = models.DateTimeField(auto_now_add=True)
    posted_by = models.CharField(max_length=100)
    announcement = models.TextField()
    #image = models.ImageField(upload_to='img/announcement')
    image = ImageWithThumbsField(upload_to='img/announcement', sizes=((100,100),))
    def __str__(self):
        return "%s > %s - %s" % (self.marketplace, self.posted_on, self.posted_by)
    
    
class FAQCategory(models.Model):
    marketplace = models.ForeignKey(MarketPlace)
    posted_on = models.DateTimeField(auto_now_add=True)
    name = models.CharField(max_length=200)
    description = models.TextField(blank=True, null=True)
    #image = models.ImageField(upload_to='img/faq')
    image = ImageWithThumbsField(upload_to='img/faq', sizes=((100,100),), blank=True)
    order = models.IntegerField(default=5)
    def __str__(self):
        return "%s :: %s" % (self.marketplace, self.name)
    
    
class FAQEntry(models.Model):
    category = models.ForeignKey(FAQCategory)
    question = models.CharField(max_length=255)
    answer = models.TextField()
    anchor = models.CharField(max_length=255, blank=True)
    order = models.IntegerField(default=5)
    def __str__(self):
        return "%s > %s" % (self.category, self.question)
    
    def save(self, *args, **kwargs):
        self.anchor = slugify(self.question)
        super(FAQEntry, self).save(*args, **kwargs)
        
class PostEditorPick(models.Model):
    marketplace = models.ForeignKey(MarketPlace)
    order = models.IntegerField(default=5)
    post = models.ForeignKey(Post)
    def __str__(self):
        return "%s > %s (%s)" % (self.marketplace, self.post, self.order)

########NEW FILE########
__FILENAME__ = tests
"""
This file demonstrates two different styles of tests (one doctest and one
unittest). These will both pass when you run "manage.py test".

Replace these with more appropriate tests for your application.
"""
import logging

from django.test import TestCase
from django.core.urlresolvers import reverse

from auth.models import User
from market.models import MarketPlace


class MarketCommunityTest(TestCase):
    fixtures = [
            'greatcoins_market.json', 
            'greatcoins_subscriptions.json', 
            'greatcoins_auth.json', 
            'greatcoins_shops.json',
            'greatcoins_preferences.json',
            'greatcoins_themes.json'
        ]
    
    def setUp(self):
        from shops.models import Shop
        shop = Shop.objects.all()[0]
        self.HTTP_HOST = shop.default_dns
        
    def test_urls(self):
        """
            Test market community page availability
        """
        response = self.client.get(reverse("market_community") , HTTP_HOST=self.HTTP_HOST)
        self.failUnless(response.status_code, 200)
        
        response = self.client.get(reverse("community_overview"), HTTP_HOST=self.HTTP_HOST)
        self.failUnless(response.status_code, 200)
        
        response = self.client.get(reverse("community_blogs"), HTTP_HOST=self.HTTP_HOST)
        self.failUnless(response.status_code, 200)
        
        response = self.client.get(reverse("community_forums"), HTTP_HOST=self.HTTP_HOST)
        self.failUnless(response.status_code, 200)
        
        response = self.client.get(reverse("community_faq"), HTTP_HOST=self.HTTP_HOST)
        self.failUnless(response.status_code, 200)
        
        response = self.client.get(reverse("community_profiles"), HTTP_HOST=self.HTTP_HOST)
        self.failUnless(response.status_code, 200)
########NEW FILE########
__FILENAME__ = urls
from django.conf.urls.defaults import *


urlpatterns = patterns('',
    url('^$', 'market_community.views.overview', name='market_community'),
    url(r'^overview/$', 'market_community.views.overview', name='community_overview'),
    url(r'^forums/$', 'market_community.views.forums', name='community_forums'),
    url(r'^blogs/$', 'market_community.views.blogs', name='community_blogs'),
    url(r'^faq/$', 'market_community.views.faq', name='community_faq'),
    url(r'^profiles/$', 'market_community.views.profiles', name='community_profiles'),
    url(r'^profiles/(?P<letter>[\w]+)/$', 'market_community.views.profiles_list', name='community_profiles_list'),
)

########NEW FILE########
__FILENAME__ = views
# Create your views here.
import logging

from django.conf import settings
from django.core.urlresolvers import reverse
from django.db import transaction
from django.db.models import Q
from django.http import HttpResponseRedirect
from django.template import RequestContext
from django.shortcuts import render_to_response, get_object_or_404
from django.utils.translation import ugettext as _

from auth.models import User
from shops.models import Shop 
from payments.gateways.braintreegw import BraintreeGateway 
from users.models import Profile 
from shops.forms import MailingListMemberForm


def profiles_list(request, letter):
    from shops.models import Shop
    
    marketplace = request.marketplace
    shops = Shop.actives.filter(marketplace=marketplace).filter(name__startswith=letter)
    return render_to_response("%s/community/profiles_list.html" % request.marketplace.template_prefix, 
                              {'shops':shops, 'letter': letter},
                              RequestContext(request))
                              
def profiles(request):
    from shops.models import Shop
    
    letters = []
    marketplace = request.marketplace
    shops = Shop.actives.filter(marketplace=marketplace)
    
    for shop in shops: letters.append(shop.name[0])  
    letters = sorted(set(letters))
    return render_to_response("%s/community/profiles.html" % request.marketplace.template_prefix, {'letters' : letters, 'shops' : shops,}, RequestContext(request))


def forums(request):
    return render_to_response("%s/community/forums.html" % request.marketplace.template_prefix, 
                              {},
                              RequestContext(request))

def blogs(request):
    import datetime
    from blog_pages.models import Post
    from models import PostEditorPick
    
    today = datetime.date.today()
    wday = today.weekday()
    monday = today - datetime.timedelta(days=wday)
    sunday = monday + datetime.timedelta(days=6)
    
    logging.critical(today)
    logging.critical(wday)
    logging.critical(monday)
    logging.critical(sunday)
    
    marketplace = request.marketplace
    last_posts = Post.objects.filter(shop__marketplace=marketplace).filter(draft=False).order_by("-date_time")[:5]
    posts_picks = PostEditorPick.objects.filter(marketplace=marketplace).order_by("order")
    most_visited = Post.objects.filter(shop__marketplace=marketplace).filter(draft=False).order_by("-views")[:5]
    #most_visited = posts.filter(date_time__range=(monday, sunday)).order_by("-views")[:5]
    
    return render_to_response("%s/community/blogs.html" % request.marketplace.template_prefix, 
                              {
                               'last_posts' : last_posts,
                               'posts_picks' : posts_picks,
                               'most_visited' : most_visited,
                              },
                              RequestContext(request))
    
def faq(request):
    from market_community.models import FAQCategory
    marketplace = request.marketplace
 
    categories = FAQCategory.objects.filter(marketplace=marketplace)
    return render_to_response("%s/community/faq.html" % request.marketplace.template_prefix, 
                              {
                        	'categories' : categories,      
				},
                              RequestContext(request))

def overview(request):
    from blog_pages.models import Post
    from shops.models import Shop
    from market_community.models import MarketPlaceAnnouncement
    from market.forms import MarketMailingListMemberForm
    
    marketplace = request.marketplace
    announcements = MarketPlaceAnnouncement.objects.filter(marketplace=marketplace).order_by("-posted_on")[:5]
    shops = Shop.actives.filter(marketplace=marketplace).order_by("-date_time")[:3]
    last_posts = Post.objects.filter(shop__marketplace=marketplace).filter(draft=False).order_by("-date_time")[:5]

    if request.method == "POST":
        form = MarketMailingListMemberForm(request.POST)
        if form.is_valid():
            member = form.save(commit=False)
            member.marketplace = request.marketplace
            member.save()
            request.flash['message'] = unicode(_("Email successfully registered."))
            request.flash['severity'] = "success"
            return HttpResponseRedirect(reverse("market_community"))
    else:
        form = MarketMailingListMemberForm()   
    
    return render_to_response("%s/community/overview.html" % request.marketplace.template_prefix, 
                              {
                               'announcements' : announcements,
                               'last_posts' : last_posts,
                               'shops' : shops,
                               'mailing_list_form' : form,
                              },
                              RequestContext(request))

########NEW FILE########
__FILENAME__ = import_greatcoins_categories
import datetime
import logging
import decimal

from django.core.management.base import BaseCommand, CommandError

from pyExcelerator import parse_xls


from market.models import MarketPlace, MarketCategory, MarketSubCategory
from django.template.defaultfilters import slugify


def clean_subcategory(subcategory):   
    subcategory = subcategory.replace("Colonials - ", "").strip()
    if '-' in subcategory:
        x, y = subcategory.split('-', 1)
        x = x.strip()
        y = y.strip()
        if x == y:
            return x

    return subcategory

class Command(BaseCommand):
    args = '<poll_id poll_id ...>'
    help = 'Closes the specified poll for voting'

    def handle(self, *args, **options):
        from inventory.models import Coin
        marketplace = MarketPlace.objects.get(slug="greatcoins")
        today = datetime.datetime.today()
        spreadsheet = open(args[0], 'r')

        for sheet_name, values in parse_xls(spreadsheet, 'utf8'): #'cp1251'):
            if sheet_name == "Sheet1" or sheet_name == "Sheet2":
                products = [[]]
                property_keys = []
                print ('Parsing Sheet = "%s"' % sheet_name.encode('cp866', 'backslashreplace'))
                for row_idx, col_idx in sorted(values.keys()):
                    if row_idx == 0: 
                        property_keys.append(values[(row_idx, col_idx)])
                        continue
                    v = values[(row_idx, col_idx)]
                    if isinstance(v, unicode): v = v.encode('utf8') #'cp866', 'backslashreplace')
                    else: v = str(v)
                    
                    last_row, last_col = len(products), len(products[-1])
                    while last_row < row_idx:
                        products.extend([[]])
                        last_row = len(products)
                
                    while last_col < col_idx:
                        products[-1].extend([''])
                        last_col = len(products[-1])
                    products[-1].extend([v])
                print (property_keys)
                
                
                sort_order_idx = 14
                sub_category_idx = 2
                category_idx = 1
                subcategories = set()
                categories = set()
                category_tree = {}
                
                category_objs = {}
                subcategory_objs = {}
                
                counter = 0
                for i, product in enumerate(products[1:]):
                    line = i + 3
#                    counter += 1
#                    if counter == 600: break
                    if len(product) < 6:
                        print "Line %d: invalid row" % (line)
                        continue
                    
                    try:
                        pcgs_number = int(decimal.Decimal(product[5]))
                    except ValueError:
                        print "Line %d : invalid PCGS" % (line)
                        continue
                    except Exception,e:
                        print "Line %d, %s. Could not recognize PCGS Number, line will not be saved.\n >> %s" % ((line), e, product)
                        continue
                    
                    if len(product) < sub_category_idx + 1:
                        print "Line %d: sub category is missing" % (line)
                        continue
                    
                    if len(product) < 15:
                        print "Line %d: sort order value don't exist. line will not be saved.\n >> %s" % (line, product)
                        continue
                        
                    category = product[category_idx]
                    subcategory = clean_subcategory(product[sub_category_idx])
                    if category == '':
                        print "Line %d: category is missing" % (line)
                        print product
                        continue

                    if category == "Hawaii": 
                        print "Line %d: Hawaii category found, break." % (line)
                        break
                    
                    category_obj = category_objs.get(category, None)
                    if category_obj is None:
                        try: 
                            category_obj = MarketCategory.objects.get(slug=slugify(category))
                        except MarketCategory.DoesNotExist:
                            category_obj = MarketCategory.objects.get_or_create(marketplace=marketplace, name=category)[0]
                        category_objs[category] = category_obj
                    
                    if subcategory == '':
                        subcategory_obj = None
                    else:
                        subcategory_obj = subcategory_objs.get(category + '_' + subcategory, None)  
                        if subcategory_obj is None:
                            try:
                                subcategory_obj = MarketSubCategory.objects.get(parent=category_obj, slug=slugify(subcategory))
                            except MarketSubCategory.DoesNotExist:
                                subcategory_obj = MarketSubCategory.objects.get_or_create(marketplace=marketplace,
                                                                                          parent=category_obj, 
                                                                                          name=subcategory)[0]
                            subcategory_objs[category + '_' + subcategory] = subcategory_obj
                            category_tree.setdefault(category, set())
                            category_tree[category].add(subcategory)
                    
                    coin, created = Coin.objects.get_or_create(pcgs_number=pcgs_number)
                    
                    if not created: #and today < coin.last_update:
                        #already updated today
                        #print "Line %d: coin already saved. %s" % (line, coin)
                        continue
                    
                    coin.category = category_obj
                    coin.subcategory = subcategory_obj
                    coin.country_code = 'us'
                    coin.pcgs_number = pcgs_number
                    coin.description = product[6]
                    coin.year_issued = product[7]
                    coin.actual_year = product[8]
                    coin.denomination = product[9]
                    coin.major_variety = product[10]
                    coin.die_variety = product[11]
                    coin.prefix = product[12]
                    coin.suffix = product[13]
                    if len(product) > 14:
                        coin.sort_order = product[14]
                    coin.heading = subcategory
                    if len(product) > 16:
                        coin.holder_variety = product[16]
                    if len(product) > 17:
                        coin.holder_variety_2 = product[17]
                    if len(product) > 18:
                        coin.additional_data = product[18]
                    coin.save()

########NEW FILE########
__FILENAME__ = models
#nothing here


########NEW FILE########
__FILENAME__ = tests
"""
This file demonstrates two different styles of tests (one doctest and one
unittest). These will both pass when you run "manage.py test".

Replace these with more appropriate tests for your application.
"""

from django.test import TestCase

class SimpleTest(TestCase):
    def test_basic_addition(self):
        """
        Tests that 1 + 1 always equals 2.
        """
        self.failUnlessEqual(1 + 1, 2)

__test__ = {"doctest": """
Another way to test that 1 + 1 is equal to 2.

>>> 1 + 1 == 2
True
"""}


########NEW FILE########
__FILENAME__ = views
# Create your views here.

########NEW FILE########
__FILENAME__ = forms
import datetime
import logging

from django import forms
from django.conf import settings
from django.contrib.localflavor.us.forms import USStateSelect, USZipCodeField
from django.core.urlresolvers import reverse
from django.db import transaction
from django.utils.translation import ugettext as _

from auth.models import User
from payments.gateways.braintreegw import BraintreeGateway
from subscriptions.models import SubscriptionPlan
from shops.models import Shop, ShopBillingInfo
from users.models import Profile 


MONTHS = (
    ("01", "January"),
    ("02", "February"),
    ("03", "March"),
    ("04", "April"),
    ("05", "May"),
    ("06", "June"),
    ("07", "July"),
    ("08", "August"),
    ("09", "September"),
    ("10", "October"),
    ("11", "November"),
    ("12", "December"),
)

current_year = datetime.date.today().year
YEARS = ((current_year + i, current_year + i) for i in range(31))

if getattr(settings, 'BRAINTREE_PRODUCTION', True):
    INITIAL_CC = None
else:
    INITIAL_CC = "4111111111111111"


class ShopInfoForm(forms.Form):
    name_store = forms.RegexField(max_length=60, label =_("Your shop's name"), regex=r'^[\s\w+-]+$',
            error_messages = {'invalid': _("This value may contain only letters, numbers and - character.")})
    shop_name = forms.CharField(max_length=60, label =_("Your shop's web address"), help_text=".greatcoins.com")
    first_name = forms.CharField(max_length=50, label =_("Your First Name"))
    last_name = forms.CharField(max_length=50, label =_("Your Last Name"))
    street = forms.CharField(max_length=100)
    city = forms.CharField(max_length=100)
    state = forms.CharField(widget=USStateSelect)
    zip = USZipCodeField()
    promotional_code = forms.CharField(max_length=100, required=False)
    
    def clean_shop_name(self):
        shop_name = self.cleaned_data["shop_name"]
        try:
            Shop.objects.get(name=shop_name)
        except Shop.DoesNotExist:
            return shop_name
        raise forms.ValidationError(_("A shop with that name already exists."))

    def clean(self):
        cleaned_data = self.cleaned_data
        try:
            user = self.initial['user']
            first_name = cleaned_data.get('first_name', None)
            last_name = cleaned_data.get('last_name', None)
            user.first_name = first_name
            user.last_name = last_name  
            user.save()
        except:
            pass
        return  cleaned_data
        

class ShopBillingForm(forms.Form):
    
    #Billing Address
    shop_address = forms.BooleanField(required=False, initial=False, label = _("Use shop address"))
    
    billing_street = forms.CharField(max_length=100, required=False)
    billing_city = forms.CharField(max_length=100, required=False)
    billing_state = forms.CharField(widget=USStateSelect, required=False)
    billing_zip = USZipCodeField(required=False)
    
    #Billing information
    cc_number = forms.CharField(max_length=60, label =_("Credit Card Number"), initial=INITIAL_CC)
    cc_expiration_month = forms.ChoiceField(choices=MONTHS)
    cc_expiration_year = forms.ChoiceField(choices=YEARS)
    card_security_number = forms.CharField(max_length=4, label =_("Card Security Number"), required=True)

    terms = forms.BooleanField(required=False)

    def clean_terms(self):
        terms = self.cleaned_data["terms"]
        if terms:
            return terms
        else:
            raise forms.ValidationError(_("You must agree to the terms and conditions before you can create your account."))
    
    def clean(self):
        init_user = self.initial['user']
        cleaned_data = self.cleaned_data
        
#        try:
#            a = self.initial.get("result")
#            logging.critical(a)
#            return cleaned_data 
#        except Exception:
#            pass
#        
#        logging.critical("Trying to validate credit cards")
        
        if cleaned_data.has_key('cc_expiration_year') and cleaned_data.has_key('cc_expiration_month'):
            date_str =  "%s-%s" % (cleaned_data['cc_expiration_year'], cleaned_data['cc_expiration_month'])
            card_expire = datetime.datetime.strptime(date_str,  "%Y-%m")
        
            if card_expire < datetime.datetime.now():
                msg = u"Card expired."
                self._errors["cc_expiration_year"] = self.error_class([msg])
                self._errors["cc_expiration_month"] = self.error_class([msg])
    
                # These fields are no longer valid. Remove them from the
                # cleaned data.
                del cleaned_data["cc_expiration_year"]
                del cleaned_data["cc_expiration_month"]
        
        bt_gw = BraintreeGateway(settings.MERCHANT_ID, settings.PUBLIC_KEY, settings.PRIVATE_KEY)
        
        first_name = init_user.first_name
        last_name = init_user.first_name
        

        email = init_user.email
        cc_number = cleaned_data.get("cc_number", None)
        if cc_number is None: self._errors["cc_number"] = self.error_class(["This field is required!"])
        
        month = cleaned_data.get("cc_expiration_month", None)
        year = cleaned_data.get("cc_expiration_year", None)
        
        if month is None or year is None:
            raise forms.ValidationError(_("Expiration date invalid format."))
                
        cc_expiration_date = "%s/%s" % (month, year)
        cc_security_number = cleaned_data.get("card_security_number", None)
        if cc_security_number is None: self._errors["card_security_number"] = self.error_class(["This field is required!"])
        
        reuse_address = cleaned_data.get("shop_address", None)
        
        if reuse_address == False:
            #Take data filled by user in the form
            street = cleaned_data.get("billing_street", None)
            if street is None or street == u'': self._errors["billing_street"] = self.error_class(["This field is required!"])
            city = cleaned_data.get("billing_city", None)
            if city is None or city == u'': self._errors["billing_city"] = self.error_class(["This field is required!"])
            state = cleaned_data.get("billing_state", None)
            if state is None or state == u'': self._errors["billing_state"] = self.error_class(["This field is required!"])
            zip = cleaned_data.get("billing_zip", None)
            if zip is None or zip == u'': self._errors["billing_zip"] = self.error_class(["This field is required!"])
        else:
            #Use data filled on first step
            street = self.initial['street']
            zip = self.initial['zip']
            state = self.initial['state']
            city = self.initial['city']
            
        shop_name = "thisisafake.shop.com"
        shop_id = "-1"
        
        result = bt_gw.create_customer(first_name, last_name, email, cc_number, cc_expiration_date, cc_security_number, street, city, state, zip, shop_name, shop_id)
        if result.is_success:
            self.result = result
            self.initial["result"] = result
        else:
            raise forms.ValidationError(_(result.message))
        
        return  cleaned_data

class ShopPlanForm(forms.Form):
    #Plan ID
    plan_id = forms.ModelChoiceField(queryset=SubscriptionPlan.objects.filter(active=True), empty_label=None)
        


from django.contrib.formtools.wizard import FormWizard
from django.http import HttpResponseRedirect
from django.shortcuts import render_to_response

class ShopSignUpWizard(FormWizard):

    def process_step(self, request, form, step):
        if step == 0:
            from subscriptions.models import SubscriptionPlan
            
            promotional_code = request.POST.get("0-promotional_code", None)
            
            if promotional_code != u'' and promotional_code is not None:
                plans = SubscriptionPlan.objects.filter(active=True).filter(secret_code=promotional_code)
            else:
                plans = SubscriptionPlan.objects.filter(active=True).filter(visible=True).order_by('-price')
            self.extra_context = {'plans': plans, 'promotional_code': promotional_code}
    
    
    def parse_params(self, request, *args, **kwargs):
        current_step = self.determine_step(request, *args, **kwargs)
        if request.method == 'POST' and current_step == 0:
            self.initial[0] = {'user' : request.user}
        if request.method == 'POST' and current_step == 2:
            street= request.POST.get("0-street", "Wall Street")
            state = request.POST.get("0-state", "New York")
            city = request.POST.get("0-city", "New York")
            zip = request.POST.get("0-zip", "19000")            
            self.initial[2] = {'user' : request.user, 'city':city, 'street':street, 'zip':zip, 'state':state  }

    def get_template(self, step):
        return 'default/sell/signup_wizard_%s.html' % step
    
    @transaction.commit_on_success
    def done(self, request, form_list):
        user = request.user
        
        cleaned_data = {}
        [cleaned_data.update(form.cleaned_data) for form in form_list]
        
        plan_id = cleaned_data['plan_id'].plan_id
        
        #Update address
        profile = user.get_profile()
        profile.street_address = cleaned_data['street']
        profile.city = cleaned_data['city']
        profile.state = cleaned_data['state']
        profile.zip = cleaned_data['zip']
        profile.country = 'United States'
        profile.save()
        
        if cleaned_data.get('shop_address', False):
            billing_street = cleaned_data['street'].encode('ascii', 'ignore')
            billing_city = cleaned_data['city'].encode('ascii', 'ignore')
            billing_state = cleaned_data['state'].encode('ascii', 'ignore')
            billing_zip = cleaned_data['zip'].encode('ascii', 'ignore')
        else:
            billing_street = cleaned_data['billing_street'].encode('ascii', 'ignore')
            billing_city = cleaned_data['billing_city'].encode('ascii', 'ignore')
            billing_state = cleaned_data['billing_state'].encode('ascii', 'ignore')
            billing_zip = cleaned_data['billing_zip'].encode('ascii', 'ignore')
        
        date_str =  "%s-%s" % (cleaned_data['cc_expiration_year'], cleaned_data['cc_expiration_month'])
        #card_expire = datetime.datetime.strptime(date_str,  "%Y-%m")
        
        
        """ Create shop """
        shop = Shop.objects.create(marketplace=request.marketplace,
                                   name=cleaned_data['shop_name'].lower(), 
                                   admin=user,
                                   name_store=cleaned_data['name_store'])
        
        """ Braintree subscription """
        #Create a new Customer with Financial data in braintree
        bt_gw = BraintreeGateway(settings.MERCHANT_ID, settings.PUBLIC_KEY, settings.PRIVATE_KEY)
        
        result = (form_list[2]).result

        customer_id = 'undefined'
        if result.is_success:
            customer_id = result.customer.id
            update = bt_gw.update_customer_shopname(customer_id, shop.id, shop.default_dns)
            
            if update.is_success:
                token = result.customer.credit_cards[0].token    
            else:
                transaction.rollback()
                request.flash['message'] = unicode(_("%s" % update.message))
                request.flash['severity'] = "error"
                return HttpResponseRedirect(reverse('market_sell_signup'))    
            
        else:
            transaction.rollback()
            logging.error(result.errors.errors.data)
            logging.error(result.message)
            request.flash['message'] = unicode(_("%s" % result.message))
            request.flash['severity'] = "error"
            return HttpResponseRedirect(reverse('market_sell_signup'))
        
        #Create a Subscription in braintree linked to the customer created before
        result = bt_gw.create_subscription(plan_id, token)
        if result.is_success:
            profile = user.get_profile()
            profile.set_subscription_plan(plan_id, result.subscription.id)    
        else:
            transaction.rollback()
            request.flash['message'] = unicode(_("Could not create the subscription. %s.Please contact us.") % result.message)
            request.flash['severity'] = "error"
            return HttpResponseRedirect(reverse('market_sell_signup'))
        
        #Store billing information
        billing = ShopBillingInfo(
            shop = shop,
            #card_ending = cleaned_data['cc_number'][-4:],
            #card_expire = card_expire,
            customer_id = customer_id,
            street = billing_street,
            city = billing_city,
            state = billing_state,
            zip = billing_zip,
        )
        billing.save()
        
        request.flash['message'] = unicode(_("Shop successfully added."))
        request.flash['severity'] = "success"
            
        return HttpResponseRedirect(reverse('market_sell_welcome', args=[shop.id]))

########NEW FILE########
__FILENAME__ = models
from django.db import models

# Create your models here.

########NEW FILE########
__FILENAME__ = tests
"""
This file demonstrates two different styles of tests (one doctest and one
unittest). These will both pass when you run "manage.py test".

Replace these with more appropriate tests for your application.
"""
import logging

from django.test import TestCase
from django.core.urlresolvers import reverse

from auth.models import User
from shops.models import Shop

class MarketSellTest(TestCase):
    fixtures = ['greatcoins_market.json', 'greatcoins_subscriptions.json']
    
    def setUp(self):
        try:
            user = User.objects.get(username="test_shop_signup")
            user.delete()
        except User.DoesNotExist:
            pass

    def test_sign_up(self):
        """
            Test shop signup
        """

        response = self.client.get(reverse("market_buy_signup"))
        
        self.failUnless(response.status_code, 200)
        
        users_count = User.objects.count()
        params = {
            'username': 'test_shop_signup',
            'email': 'test_shop_signup@t.com',
            'password1': 'test',
            'password2': 'test',
        }
        
        response = self.client.post(reverse("market_buy_signup"), params)
        self.failUnless(response.status_code, 302)
        
        self.assertEquals(User.objects.count(), users_count + 1)
        
        shops_count = Shop.objects.count()
        
        response = self.client.get(reverse("market_sell_signup"))
        self.failUnless(response.status_code, 200)
         
        print response.context
        #SignUp step 0       
        params = {
            'csrfmiddlewaretoken': str(response.context['csrf_token']),
            '0-name_store': 'test2',
            '0-shop_name': 'test2',
            '0-street': 'test',
            '0-city': 'test',
            '0-state': 'NY',
            '0-zip': '10001',
            'wizard_step': '0'
        }

        response = self.client.post(reverse("market_sell_signup"), params)
        self.failUnless(response.status_code, 200)
        
        params = {
            'csrfmiddlewaretoken': str(response.context['csrf_token']),
            '0-name_store': 'test2',
            '0-shop_name': 'test2',
            '0-street': 'test',
            '0-city': 'test',
            '0-state': 'NY',
            '0-zip': '10001',
            '1-plan_id': '1',
            'wizard_step': '1',
            'hash_0':'22267e8560569a5bba749a8f54aab54a',
        }

        response = self.client.post(reverse("market_sell_signup"), params)
        self.failUnless(response.status_code, 200)
        

        params = {
            'csrfmiddlewaretoken': str(response.context['csrf_token']),
            '0-name_store': 'test2',
            '0-shop_name': 'test2',
            '0-street': 'test',
            '0-city': 'test',
            '0-state': 'NY',
            '0-zip': '10001',
            '1-plan_id': '1',
            '2-billing_street': 'el billing street',
            '2-billing_city': 'el billing city',
            '2-billing_state': 'NY',
            '2-billing_zip': '10001',
            '2-cc_number': '4111111111111111',
            '2-cc_expiration_month': '03',
            '2-cc_expiration_year': '2012',
            '2-card_security_number': '123',
            '2-terms': 'on',
            'wizard_step': '2',
            'hash_0':'22267e8560569a5bba749a8f54aab54a',
            'hash_1':'e0341a56bf5d7baa6d13e9b72e831098'
        }

        response = self.client.post(reverse("market_sell_signup"), params)
        self.failUnless(response.status_code, 200)
        
        self.assertEquals(Shop.objects.count(), shops_count + 1)


########NEW FILE########
__FILENAME__ = urls
from django.conf.urls.defaults import *


urlpatterns = patterns('',
    url('^$', 'market.views.sell', name='market_sell'),
    url('^signup/$', 'market_sell.views.signup', name='market_sell_signup'),
    url('^privacy/$', 'market_sell.views.privacy_policy', name='market_privacy_policy'),
    url('^welcome/(?P<shop_id>[\d]+)/$', 'market_sell.views.welcome', name='market_sell_welcome'),
    url('^plans/$', 'market_sell.views.plans', name='market_sell_plans'),
    url('^features/$', 'market_sell.views.features', name='market_sell_features'),
)

########NEW FILE########
__FILENAME__ = views
# Create your views here.
import datetime
import logging

from django.core.urlresolvers import reverse
from django.db import transaction
from django.template import RequestContext
from django.shortcuts import render_to_response, get_object_or_404
from django.utils.translation import ugettext as _

from auth.decorators import login_required
from django.http import HttpResponseRedirect
from shops.models import Shop, ShopBillingInfo 
from subscriptions.models import Subscription, SubscriptionPlan

from market_sell.forms import ShopSignUpWizard, ShopInfoForm, ShopPlanForm, ShopBillingForm
   
@transaction.commit_on_success
@login_required
def signup(request, plan="None"):
    init = {0: {}, 1:{}, 2:{}}
    user = request.user
    if user.shop_set.count() > 0:
        request.flash['message'] = unicode(_("You already have a store! Only one shop per user is allowed."))
        request.flash['severity'] = "error"
        return HttpResponseRedirect(reverse("market_home"))
              
    return ShopSignUpWizard([ShopInfoForm, ShopPlanForm, ShopBillingForm], initial=init)(request) 

def welcome(request, shop_id):
    shop = get_object_or_404(Shop, id=shop_id)
    profile = shop.admin.get_profile()
    try:
        shopinfo = ShopBillingInfo.objects.filter(shop=profile).get()

    except ShopBillingInfo.DoesNotExist:
        shopinfo = None

    try:
        subscription = Subscription.objects.filter(owner=profile).get()

    except Subscription.DoesNotExist:
        subscription = None

#    return render_to_response("%s/sell/welcome.html" % request.marketplace.template_prefix, 
#                              {'shop': shop, 'subscription': subscription, 'shopinfo': shopinfo},
#                              RequestContext(request))

    return HttpResponseRedirect("http://%s" % shop.default_dns)

def privacy_policy(request):
    
    return render_to_response("%s/sell/privacy.html" % request.marketplace.template_prefix, 
                              {},
                              RequestContext(request))
def plans(request):
    marketplace= request.marketplace
    try:
        marketplans = SubscriptionPlan.objects.filter(marketplace=marketplace).filter(active="True").filter(visible=True).order_by('-price')

    except SubscriptionPlan.DoesNotExist:
        marketplans = None

    return render_to_response("%s/sell/plans.html" % request.marketplace.template_prefix, 
                              {'marketplans': marketplans},
                              RequestContext(request))

def features(request):
    marketplace= request.marketplace
    try:
        marketplans = SubscriptionPlan.objects.filter(marketplace=marketplace).filter(active="True").filter(visible=True).order_by('-price')
    except SubscriptionPlan.DoesNotExist:
        marketplans = None

    return render_to_response("%s/sell/features.html" % request.marketplace.template_prefix, 
                              {'marketplans': marketplans},
                              RequestContext(request))

########NEW FILE########
__FILENAME__ = admin

########NEW FILE########
__FILENAME__ = models

########NEW FILE########
__FILENAME__ = urls
from django.conf.urls.defaults import *

urlpatterns = patterns('',
    url(r'^$', 'reports.views.admin_reports', name='admin_reports'),
    url(r'^subscriptions/$', 'reports.views.admin_shop_subscriptions_report', name='admin_shop_subscriptions'),
    url(r'^abandonment/$', 'reports.views.admin_shop_abandonment_report', name='admin_shop_abandonment'),
    url(r'^subscription/(?P<id>[\d]+)/$', 'reports.views.admin_shop_subscription_details', name='admin_shop_subscription_details'),
    url(r'^activity/$', 'reports.views.admin_daily_activity_report', name='admin_daily_activity'),
    url(r'^revenue/$', 'reports.views.admin_monthly_revenue_report', name='admin_monthly_revenue'),
    url(r'^revenue_by_type/$', 'reports.views.admin_shop_revenue_report', name='admin_shop_revenue'),
    url(r'^transactions/$', 'reports.views.admin_daily_transactions_report', name='admin_daily_transactions'),
)
########NEW FILE########
__FILENAME__ = views
import logging
import datetime
import decimal

from django.template import RequestContext
from django.shortcuts import render_to_response, get_object_or_404
from django.contrib.admin.views.decorators import staff_member_required

def get_daily_activity_data(day):
    from market.models import MarketPlace
    from shops.models import Shop
    from subscriptions.models import SubscriptionCancelation
            
    month_init = datetime.datetime(day.year, day.month, 1, 0, 0, 0)
    if day.month == 12:
        month_end = datetime.datetime(day.year + 1, 1, 1, 0, 0, 0)
    else:
        month_end = datetime.datetime(day.year, day.month + 1, 1, 0, 0, 0)
    day_init = datetime.datetime(day.year, day.month, day.day, 0, 0, 0)
    day_end = datetime.datetime(day.year, day.month, day.day, 23, 59, 59)
    
    params = {}
    try:
        params['day'] = day
        params['month_init'] = month_init
        params['month_end'] = month_end
        
        total_customers = 0
        total_signups_today = 0
        total_signups_this_month = 0
        total_cancelations_today = 0
        total_cancelations_this_month = 0
        marketplaces = MarketPlace.objects.all()
        
        params['columns'] = ["MarketPlace", "Customers", "Signups Today", "Signup This Month", "Cancelations Today", "Cancelation This Month", "Churn %"]
        params['rows'] = []
        
        for market in marketplaces:
            #"do calculations
            marketplace_customers = Shop.objects.filter(marketplace=market)
            marketplace_signups_today = marketplace_customers.filter(date_time__gte=day_init).filter(date_time__lte=day_end)
            marketplace_signups_this_month = marketplace_customers.filter(date_time__gte=month_init).filter(date_time__lte=month_end)
            marketplace_total_cancelations_today = SubscriptionCancelation.objects.filter(shop__in=market.shop_set.all()).filter(date_time__gte=day_init).filter(date_time__lte=day_end)
            marketplace_total_cancelations_this_month = SubscriptionCancelation.objects.filter(shop__in=market.shop_set.all()).filter(date_time__gte=month_init).filter(date_time__lte=month_end)   
            try:
                marketplace_churn_percent = "%s %%" % (round((float(marketplace_total_cancelations_this_month.count()) / float(marketplace_customers.count())) * 100, 2))
            except ZeroDivisionError:
                marketplace_churn_percent = "0 %"
            
            row = [market, marketplace_customers.count(), marketplace_signups_today.count(), marketplace_signups_this_month.count(), marketplace_total_cancelations_today.count(), marketplace_total_cancelations_this_month.count(), marketplace_churn_percent] 
            params['rows'].append(row)
            
            total_customers += marketplace_customers.count()
            total_signups_today += marketplace_signups_today.count()
            total_signups_this_month += marketplace_signups_this_month.count()
            total_cancelations_today += marketplace_total_cancelations_today.count()
            total_cancelations_this_month += marketplace_total_cancelations_this_month.count()
             
        params['totals'] = ["Totals", total_customers, total_signups_today, total_signups_this_month, total_cancelations_today, total_cancelations_this_month, "%s %%" %  (round((float(total_cancelations_this_month) / float(total_customers)) * 100, 2))]
                
    except Exception, e:
        logging.info(e)
        
    return params

    
def get_monthly_revenue_data():
    from market.models import MarketPlace
            
    day = datetime.datetime.now()
    params = {}
    try:
        params['day'] = day
        params['columns'] = ["MarketPlace", "Plan" , "# of Accounts", "Monthly Charge", "Total"]
        params['rows'] = []
        
        total_amount_of_accounts = 0
        total_revenue = 0
        total_monthly_charge = 0
        
        marketplaces = MarketPlace.objects.all()
        
        for market in marketplaces:
            for plan in market.subscriptionplan_set.all():
                
                subscriptions = plan.subscription_set.all()
                
                accounts = subscriptions.count()
                
                total_amount_of_accounts += accounts
                plan_revenue = round(accounts * decimal.Decimal(plan.price), 2)
                total_revenue += plan_revenue
                total_monthly_charge += decimal.Decimal(plan.price)
                row = [market, plan.name, accounts, "u$s %s" % decimal.Decimal(plan.price), "u$s %s" % plan_revenue]
                params['rows'].append(row)
            
        params['totals'] = ["Totals", "-", total_amount_of_accounts, "u$s %s" % total_monthly_charge, "u$s %s" % total_revenue]
        
                
    except Exception, e:
        logging.info(e)
        
    return params
    

def get_daily_transactions_data(day):
    from payments.gateways.braintreegw import BraintreeGateway
    from django.conf import settings
    
    gw = BraintreeGateway(settings.MERCHANT_ID, settings.PUBLIC_KEY, settings.PRIVATE_KEY)
    
    params = {}
    try:
        transactions = gw.get_transactions(day)    
        
        params['day'] = day
        params['columns'] = ["TransactionID", "Amount", "Website", "Email", "User"]
        
        sections = []
        for status in transactions.iterkeys():
            
            section = {}
            section['type'] = status
            
            t_list = transactions[status]
            
            section['len'] = len(t_list)
            section['txs'] = []
            
            total = 0
            for transaction in t_list:
                user_name = "- Unknown -" if transaction.customer_details.first_name is None or transaction.customer_details.last_name is None else "%s, %s" % (transaction.customer_details.last_name, transaction.customer_details.first_name)
                tx = [transaction.id, "u$s %s" % round(decimal.Decimal(transaction.amount), 2), transaction.customer_details.website, transaction.customer_details.email, user_name] 
                total += decimal.Decimal(transaction.amount)
                section['txs'].append(tx)
            section['total'] = total
            sections.append(section)            
            
        params['sections'] = sections
    
    except Exception, e:
        logging.info(e)
    
    return params

@staff_member_required
def admin_daily_activity_report(request):
    date = request.GET.get("date", None)
    if date:
        day = datetime.datetime.strptime(date, "%Y-%m-%d")
    else:
        day = datetime.datetime.today()
    params = get_daily_activity_data(day)
    return render_to_response("admin/daily_activity_report.html", params, RequestContext(request))

@staff_member_required
def admin_monthly_revenue_report(request):
    params = get_monthly_revenue_data()
    return render_to_response("admin/monthly_revenue_report.html", params, RequestContext(request))

@staff_member_required
def admin_daily_transactions_report(request):
    date = request.GET.get("date", None)
    if date:
        day = datetime.datetime.strptime(date, "%Y-%m-%d")
    else:
        day = datetime.datetime.today()
    params = get_daily_transactions_data(day)    
    return render_to_response("admin/daily_transactions_report.html", params, RequestContext(request))

@staff_member_required
def admin_reports(request):
    return render_to_response("admin/reports.html", {}, RequestContext(request))

@staff_member_required
def admin_shop_subscriptions_report(request):
    from shops.models import Shop
    shops = Shop.objects.all()
    return render_to_response("admin/shop_subscriptions_report.html", {'shops': shops}, RequestContext(request))

@staff_member_required
def admin_shop_revenue_report(request):
    from shops.models import Shop
    shops = Shop.objects.all()
    return render_to_response("admin/shop_revenue_report.html", {'shops': shops}, RequestContext(request))

@staff_member_required
def admin_shop_subscription_details(request, id):
    from shops.models import Shop
    from subscriptions.models import Subscription
    shop = get_object_or_404(Shop, pk=id)
    admin = shop.owner()
    
    try:
        subscription = Subscription.objects.filter(owner__user=admin).get()
    except Subscription.DoesNotExist:
        subscription = None
        
    return render_to_response("admin/shop_subscription.html", {'shop' : shop, 'subscription' : subscription}, RequestContext(request))

@staff_member_required
def admin_shop_abandonment_report(request):
    from shops.models import Shop
    
    filters = [
        ('no_filter', '-- No Filter --'),
        ('post_gt_30', 'Post &gt; 30 days'),
        ('post_gt_60', 'Post &gt; 60 days'),
        ('post_gt_90', 'Post &gt; 90 days'),        
        ('login_gt_30', 'Login &gt; 30 days'),
        ('login_gt_60', 'Login &gt; 60 days'),        
        ('login_gt_90', 'Login &gt; 90 days'),
    ]
    
    filter = request.GET.get("filter", None)
    shops = Shop.objects.all()
    if filter is not None or filter == '-- No Filter --':
        if filter == "login_gt_30":
            d1 = datetime.datetime.now() - datetime.timedelta(days=30)
            shops = shops.filter(admin__last_login__lt=d1)
        elif filter == "login_gt_60":
            d1 = datetime.datetime.now() - datetime.timedelta(days=60)
            shops = shops.filter(admin__last_login__lt=d1)
        elif filter == "login_gt_90":
            d1 = datetime.datetime.now() - datetime.timedelta(days=90)
            shops = shops.filter(admin__last_login__lt=d1)
        elif filter == "post_gt_30":
            d1 = datetime.datetime.now() - datetime.timedelta(days=30)
            shops = shops.filter(last_date_to_post__lt=d1)
        elif filter == "post_gt_60":
            d1 = datetime.datetime.now() - datetime.timedelta(days=60)
            shops = shops.filter(last_date_to_post__lt=d1)
        elif filter == "post_gt_90":
            d1 = datetime.datetime.now() - datetime.timedelta(days=90)
            shops = shops.filter(last_date_to_post__lt=d1)
            
    params = {'shops': shops, 'filters': filters, 'filter': filter}
    
    return render_to_response("admin/shop_abandonment_report.html", params, RequestContext(request))
########NEW FILE########
__FILENAME__ = admin
from django.contrib import admin

from support.models import FeaturesHelpText

admin.site.register(FeaturesHelpText)
########NEW FILE########
__FILENAME__ = forms
from django import forms

from support.models import FeaturesHelpText

class FeaturesHelpTextForm(forms.ModelForm):
    
    class Meta:
        model = FeaturesHelpText   
########NEW FILE########
__FILENAME__ = 0001_initial
# encoding: utf-8
import datetime
from south.db import db
from south.v2 import SchemaMigration
from django.db import models

class Migration(SchemaMigration):

    def forwards(self, orm):
        
        # Adding model 'FeaturesHelpText'
        db.create_table('support_featureshelptext', (
            ('id', self.gf('django.db.models.fields.AutoField')(primary_key=True)),
            ('auctions', self.gf('django.db.models.fields.TextField')()),
            ('wishlist', self.gf('django.db.models.fields.TextField')()),
            ('mailinglist', self.gf('django.db.models.fields.TextField')()),
            ('google_analytics', self.gf('django.db.models.fields.TextField')()),
            ('show_attendance', self.gf('django.db.models.fields.TextField')()),
            ('custom_dns', self.gf('django.db.models.fields.TextField')()),
            ('paypal', self.gf('django.db.models.fields.TextField')()),
            ('google_checkout', self.gf('django.db.models.fields.TextField')()),
            ('credit_card', self.gf('django.db.models.fields.TextField')()),
            ('manual_payment', self.gf('django.db.models.fields.TextField')()),
            ('theme_change', self.gf('django.db.models.fields.TextField')()),
        ))
        db.send_create_signal('support', ['FeaturesHelpText'])


    def backwards(self, orm):
        
        # Deleting model 'FeaturesHelpText'
        db.delete_table('support_featureshelptext')


    models = {
        'support.featureshelptext': {
            'Meta': {'object_name': 'FeaturesHelpText'},
            'auctions': ('django.db.models.fields.TextField', [], {}),
            'credit_card': ('django.db.models.fields.TextField', [], {}),
            'custom_dns': ('django.db.models.fields.TextField', [], {}),
            'google_analytics': ('django.db.models.fields.TextField', [], {}),
            'google_checkout': ('django.db.models.fields.TextField', [], {}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'mailinglist': ('django.db.models.fields.TextField', [], {}),
            'manual_payment': ('django.db.models.fields.TextField', [], {}),
            'paypal': ('django.db.models.fields.TextField', [], {}),
            'show_attendance': ('django.db.models.fields.TextField', [], {}),
            'theme_change': ('django.db.models.fields.TextField', [], {}),
            'wishlist': ('django.db.models.fields.TextField', [], {})
        }
    }

    complete_apps = ['support']

########NEW FILE########
__FILENAME__ = 0002_auto__add_field_featureshelptext_add_new_pages
# encoding: utf-8
import datetime
from south.db import db
from south.v2 import SchemaMigration
from django.db import models

class Migration(SchemaMigration):

    def forwards(self, orm):
        
        # Adding field 'FeaturesHelpText.add_new_pages'
        db.add_column('support_featureshelptext', 'add_new_pages', self.gf('django.db.models.fields.TextField')(default='Help text description here!'), keep_default=False)


    def backwards(self, orm):
        
        # Deleting field 'FeaturesHelpText.add_new_pages'
        db.delete_column('support_featureshelptext', 'add_new_pages')


    models = {
        'support.featureshelptext': {
            'Meta': {'object_name': 'FeaturesHelpText'},
            'add_new_pages': ('django.db.models.fields.TextField', [], {'default': "'Help text description here!'"}),
            'auctions': ('django.db.models.fields.TextField', [], {'default': "'Help text description here!'"}),
            'credit_card': ('django.db.models.fields.TextField', [], {'default': "'Help text description here!'"}),
            'custom_dns': ('django.db.models.fields.TextField', [], {'default': "'Help text description here!'"}),
            'google_analytics': ('django.db.models.fields.TextField', [], {'default': "'Help text description here!'"}),
            'google_checkout': ('django.db.models.fields.TextField', [], {'default': "'Help text description here!'"}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'mailinglist': ('django.db.models.fields.TextField', [], {'default': "'Help text description here!'"}),
            'manual_payment': ('django.db.models.fields.TextField', [], {'default': "'Help text description here!'"}),
            'paypal': ('django.db.models.fields.TextField', [], {'default': "'Help text description here!'"}),
            'show_attendance': ('django.db.models.fields.TextField', [], {'default': "'Help text description here!'"}),
            'theme_change': ('django.db.models.fields.TextField', [], {'default': "'Help text description here!'"}),
            'wishlist': ('django.db.models.fields.TextField', [], {'default': "'Help text description here!'"})
        }
    }

    complete_apps = ['support']

########NEW FILE########
__FILENAME__ = models
from django.db import models

class FeaturesHelpText(models.Model):
    auctions = models.TextField(default="Help text description here!")
    wishlist = models.TextField(default="Help text description here!")
    mailinglist = models.TextField(default="Help text description here!")
    google_analytics = models.TextField(default="Help text description here!")
    show_attendance = models.TextField(default="Help text description here!")
    custom_dns = models.TextField(default="Help text description here!")
    paypal = models.TextField(default="Help text description here!")
    google_checkout = models.TextField(default="Help text description here!")
    credit_card = models.TextField(default="Help text description here!")
    manual_payment = models.TextField(default="Help text description here!")
    theme_change = models.TextField(default="Help text description here!")
    add_new_pages = models.TextField(default="Help text description here!")
########NEW FILE########
__FILENAME__ = urls
from django.conf.urls.defaults import *

urlpatterns = patterns('',
    url(r'^$', 'support.views.admin_support', name='admin_support'),
    url(r'^features/$', 'support.views.admin_support_features', name='admin_support_features')
)
########NEW FILE########
__FILENAME__ = views
from django.template import RequestContext
from django.shortcuts import render_to_response, get_object_or_404
from django.contrib.admin.views.decorators import staff_member_required
from support.forms import FeaturesHelpTextForm
from support.models import FeaturesHelpText
from django.http import HttpResponseRedirect
from django.core.urlresolvers import reverse

@staff_member_required
def admin_support(request):
    return render_to_response("admin/support.html", {}, RequestContext(request))

@staff_member_required
def admin_support_features(request):
    
    inst = None
    try:
        inst = FeaturesHelpText.objects.all()[0]
    except Exception:
        inst = FeaturesHelpText()
        inst.save()
        
    if request.method == "POST":
        form = FeaturesHelpTextForm(request.POST, instance=inst)
        if form.is_valid():
            help = form.save(commit=True)
            return HttpResponseRedirect(reverse("admin_support"))
    else:
        form = FeaturesHelpTextForm(instance=inst)
        
    params = {'form': form}
    return render_to_response("admin/help_text_features.html", params, RequestContext(request))
########NEW FILE########
__FILENAME__ = cron_report_daily_activity
#!/usr/bin/env python
# -*- coding: utf-8 -*-
import os
import logging
import datetime

os.environ['DJANGO_SETTINGS_MODULE'] = 'settings'

from django.core.management import setup_environ
from django.core.mail import send_mail
#from django.db import transaction

import settings
setup_environ(settings)

"""
Daily Activity (Sign Up / Cancel)
Total Customers    
Total Sign Ups This Month    
Total Sign Ups This Today    
Total Cancelations This Month    
Total Cancelations This Today
"""

def report_daily_activity():
    from django.core.mail import EmailMultiAlternatives, EmailMessage
    from django.template import Context, loader
    from reports.views import get_daily_activity_data
    
    day = datetime.datetime.now()
    
    try:
        t_txt = loader.get_template("admin/mail/daily_activity_report.txt")
        t_html = loader.get_template("admin/mail/daily_activity_report.html")        
        
        c = get_daily_activity_data(day)
         
        subject, from_email, to = 'Daily Activity Report', "no-reply@greatcoins.com", "admin@greatcoins.com"
        text_content = t_txt.render(Context(c))
        html_content = t_html.render(Context(c))
        msg = EmailMultiAlternatives(subject, text_content, from_email, [to])
        msg.attach_alternative(html_content, "text/html")
        msg.send()
                
    except Exception, e:
        logging.info(e)
        mail = EmailMessage(subject='Error when trying to generate Daily Activity Report',
                            body=e,
                            from_email=settings.EMAIL_FROM,
                            to=[mail for (name, mail) in settings.STAFF],
                            headers={'X-SMTPAPI': '{\"category\": \"Error\"}'})
        mail.send(fail_silently=True)
#        send_mail('Error when trying to generate Daily Activity Report', e , settings.EMAIL_FROM, [mail for (name, mail) in settings.STAFF], fail_silently=True)
        
        
if __name__ == "__main__":
    report_daily_activity()
########NEW FILE########
__FILENAME__ = manage
#!/usr/bin/env python
from django.core.management import execute_manager
try:
    import settings # Assumed to be in the same directory.
except ImportError:
    import sys
    sys.stderr.write("Error: Can't find the file 'settings.py' in the directory containing %r. It appears you've customized things.\nYou'll have to run django-admin.py, passing it your settings module.\n(If the file settings.py does indeed exist, it's causing an ImportError somehow.)\n" % __file__)
    sys.exit(1)

if __name__ == "__main__":
    execute_manager(settings)

########NEW FILE########
__FILENAME__ = settings
# Django settings for poc project.
import logging
import os.path
import sys

from os.path import abspath, dirname, join

DEBUG = False
TEMPLATE_DEBUG = DEBUG

ROOT_DIR = abspath(join(dirname(__file__), os.path.pardir))
PROJECT_ROOT = os.path.abspath(os.path.dirname(__file__))

##Add apps to sys.path
sys.path.insert(1, os.path.join(ROOT_DIR, "marketplaces", "apps"))
sys.path.insert(2, os.path.join(ROOT_DIR, "stores", "apps"))
sys.path.insert(3, os.path.join(ROOT_DIR, "libs"))
sys.path.insert(4, ROOT_DIR)


ADMINS = (
#    ('name', 'email'),
)

STAFF = (
#	('name', 'email'),
)

MANAGERS = ADMINS

DATABASE_ENGINE = 'sqlite3'           # 'postgresql_psycopg2', 'postgresql', 'mysql', 'sqlite3' or 'oracle'.
DATABASE_NAME = os.path.join(PROJECT_ROOT, 'dev_poc.db')             # Or path to database file if using sqlite3.
DATABASE_USER = ''             # Not used with sqlite3.
DATABASE_PASSWORD = ''         # Not used with sqlite3.
DATABASE_HOST = ''             # Set to empty string for localhost. Not used with sqlite3.
DATABASE_PORT = ''             # Set to empty string for default. Not used with sqlite3.

# Local time zone for this installation. Choices can be found here:
# http://en.wikipedia.org/wiki/List_of_tz_zones_by_name
# although not all choices may be available on all operating systems.
# If running in a Windows environment this must be set to the same as your
# system time zone.

TIME_ZONE = 'US/Eastern'

# Language code for this installation. All choices can be found here:
# http://www.i18nguy.com/unicode/language-identifiers.html
LANGUAGE_CODE = 'en'

SITE_ID = 1

# If you set this to False, Django will make some optimizations so as not
# to load the internationalization machinery.
USE_I18N = True

# Absolute path to the directory that holds media.
# Example: "/home/media/media.lawrence.com/"
MEDIA_ROOT = os.path.join(PROJECT_ROOT, 'media')

# URL that handles the media served from MEDIA_ROOT. Make sure to use a
# trailing slash if there is a path component (optional in other cases).
# Examples: "http://media.lawrence.com", "http://example.com/media/"
MEDIA_URL = '/media/'

MEDIA_URL_OUT_S3 = '/media_out_s3/'
MEDIA_ROOT_OUT_S3 = os.path.join(PROJECT_ROOT, 'media_out_s3')

STATIC_URL = '/public/'

# URL prefix for admin media -- CSS, JavaScript and images. Make sure to use a
# trailing slash.
# Examples: "http://foo.com/media/", "/media/".
ADMIN_MEDIA_PREFIX = '/public/admin/'


STATIC_ROOT = os.path.join(PROJECT_ROOT, 'public')

STATICFILES_DIRS = (
                   os.path.join(PROJECT_ROOT, 'static'),   
)

STATICFILES_FINDERS = (
    'django.contrib.staticfiles.finders.FileSystemFinder',
    'django.contrib.staticfiles.finders.AppDirectoriesFinder',
    'compressor.finders.CompressorFinder',
#    'django.contrib.staticfiles.finders.DefaultStorageFinder',
    'compressor.finders.CompressorFinder',
)

# Make this unique, and don't share it with anybody.
SECRET_KEY = ''

# List of callables that know how to import templates from various sources.
TEMPLATE_LOADERS = (
    'django.template.loaders.filesystem.load_template_source',
    'django.template.loaders.app_directories.load_template_source',
#     'django.template.loaders.eggs.load_template_source',
)

MIDDLEWARE_CLASSES = (
    'django.middleware.cache.UpdateCacheMiddleware', # cache
    'django.middleware.common.CommonMiddleware',
    'django.middleware.cache.FetchFromCacheMiddleware', # cache
    'django.contrib.sessions.middleware.SessionMiddleware',
    'auth.middleware.AuthenticationMiddleware',
    'djangoflash.middleware.FlashMiddleware',
    'market.middleware.MarketPlaceMiddleware',
    'flatpages.middleware.FlatpageFallbackMiddleware',
    'pagination.middleware.PaginationMiddleware',
)

TEMPLATE_CONTEXT_PROCESSORS = (
    'django.core.context_processors.auth',
    'django.core.context_processors.debug',
    'django.core.context_processors.i18n',
    'django.core.context_processors.media',   
    'django.core.context_processors.static',                               
    'django.core.context_processors.request',                               
    'djangoflash.context_processors.flash',
    'market.context_processors.marketplace',
    'core.context_processors.google_key',    
    'core.context_processors.secure_media',
    'core.context_processors.media_url_ous_s3',
    'social_auth.context_processors.social_auth_by_type_backends',
)


ROOT_URLCONF = 'marketplaces.urls'

TEMPLATE_DIRS = (
    # Put strings here, like "/home/html/django_templates" or "C:/www/django/templates".
    # Always use forward slashes, even on Windows.
    # Don't forget to use absolute paths, not relative paths.
    os.path.join(PROJECT_ROOT, "templates/"),
    #os.path.join(ROOT_DIR, "stores", "templates/"),
)

INSTALLED_APPS = (
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.sites',
    'django.contrib.staticfiles',
    'django.contrib.admin',    
    'django.contrib.markup', 
    'django.contrib.humanize',    

    #third
    'south',
    'uni_form',
    'haystack',
    'rollyourown.seo',
    'tinymce',
    'captcha',
    #'pipeline',
    'compressor',
    'pagination',

    #POC
    'auth',
    'auctions',
    'blog_pages',
    'core',
    'lots', 
    'for_sale',
    'market',
    'market_import',
    'market_buy',
    'market_community',
    'market_sell',
    'reports',
    'support',
    'inventory',
    'payments',
    'preferences',
    'reversion',
    'sell',
    'search',
    'subscriptions',
    'shops',
    'themes',
    'users',
    'flatpages',
    
    'social_auth',
)

AUTHENTICATION_BACKENDS = (
    'social_auth.backends.twitter.TwitterBackend',
    'social_auth.backends.facebook.FacebookBackend',
#    'social_auth.backends.google.GoogleOAuthBackend',
    'social_auth.backends.google.GoogleOAuth2Backend',
    'social_auth.backends.google.GoogleBackend',
    #'django.contrib.auth.backends.ModelBackend',
    'core.emailBackend.ModelBackend',
)

AUTH_PROFILE_MODULE = 'users.Profile'

LOGIN_URL = '/buy/login/'
LOGIN_REDIRECT_URL= '/redirect' 

GOOGLE_KEY = ''

DEFAULT_DNS = 'shop.com'


EMAIL_HOST = ''
EMAIL_PORT = 25
EMAIL_HOST_USER = ''
EMAIL_HOST_PASSWORD = ''
EMAIL_USE_TLS = True
EMAIL_FROM = ''

# django-haystack settings
HAYSTACK_SITECONF = "search.indexes"
HAYSTACK_SEARCH_ENGINE = "solr"
# url for solr core that will serve and index our project data
HAYSTACK_SOLR_URL = "http://127.0.0.1:8983/solr/poc"
HAYSTACK_SEARCH_RESULTS_PER_PAGE = 16

CAPTCHA_CHALLENGE_FUNCT = 'market.captcha_generators.category_captcha'

logging.basicConfig(level=logging.INFO, format='[=%(levelname)s : %(asctime)s] %(message)s',)

THEMES_ROOT = join(ROOT_DIR, "stores", 'media', 'themes') + '/'
DEFAULT_THEME = 'default.zip'
SITE_RUNNING_MODE='marketplaces'

#Testing
SOUTH_TESTS_MIGRATE = False

LANGUAGES = (
    ('en', 'English'),
)

TINYMCE_DEFAULT_CONFIG = {
    'spellchecker_languages' : "+English=en,"
}

TINYMCE_SPELLCHECKER = True

# Bitly settings
BITLY_USERNAME = ''
BITLY_API_KEY = ''

# django-social-auth settings
TWITTER_CONSUMER_KEY = ''
TWITTER_CONSUMER_SECRET = ''

FACEBOOK_APP_ID = ''
FACEBOOK_API_SECRET = ''

GOOGLE_CONSUMER_KEY = ''
GOOGLE_CONSUMER_SECRET = ''

GOOGLE_OAUTH2_CLIENT_ID = ''
GOOGLE_OAUTH2_CLIENT_SECRET = ''

#LOGIN_URL = '/buy/login/'
LOGIN_REDIRECT_URL = '/'
LOGIN_ERROR_URL = '/buy/'

SOCIAL_AUTH_BACKEND_ERROR_URL = LOGIN_URL

SOCIAL_AUTH_LOGIN_REDIRECT_URL = '/buy/profile/'

SOCIAL_AUTH_COMPLETE_URL_NAME  = 'socialauth_complete'
SOCIAL_AUTH_ASSOCIATE_URL_NAME = 'socialauth_associate_complete'

# django-social-auth: Not mandatory, but recommended
SOCIAL_AUTH_DEFAULT_USERNAME = 'new_social_auth_user'
SOCIAL_AUTH_UUID_LENGTH = 3

SOCIAL_AUTH_EXTRA_DATA = True

SOCIAL_AUTH_EXPIRATION = 'expires'

SOCIAL_AUTH_USER_MODEL = 'auth.User'

SOCIAL_AUTH_CREATE_USERS = True
SOCIAL_AUTH_ASSOCIATE_BY_MAIL = True
#SOCIAL_AUTH_SANITIZE_REDIRECTS = False

SOCIAL_AUTH_RAISE_EXCEPTIONS = DEBUG

SOCIAL_AUTH_PIPELINE = (
    'social_auth.backends.pipeline.social.social_auth_user',
    'social_auth.backends.pipeline.associate.associate_by_email',
    'social_auth.backends.pipeline.user.get_username',
    'social_auth.backends.pipeline.user.create_user',
    'social_auth.backends.pipeline.social.associate_user',
    'social_auth.backends.pipeline.social.load_extra_data',
    'social_auth.backends.pipeline.user.update_user_details',

    'market_buy.auth_pipelines.pipeline.update_user_details',
)


PAGINATION_DEFAULT_PAGINATION = 10
PAGINATION_DEFAULT_WINDOW = 5

#CACHES = {
#    'default': {
#        'BACKEND': 'django.core.cache.backends.memcached.MemcachedCache',
#        'LOCATION': '127.0.0.1:11211',
#        'TIMEOUT': 300,
#        'KEY_PREFIX': 'dev.numismatichq.com',
#    }
#}

#CACHE_MIDDLEWARE_ALIAS = 'default'
#CACHE_MIDDLEWARE_SECONDS = 300
#CACHE_MIDDLEWARE_KEY_PREFIX = ''
#CACHE_MIDDLEWARE_ANONYMOUS_ONLY = True

try:
    from local_settings import *
except ImportError:
    pass

########NEW FILE########
__FILENAME__ = urls
from django.conf import settings
from django.conf.urls.defaults import *
from django.contrib import admin

from rollyourown.seo.admin import register_seo_admin
from django.contrib import admin
from market.seo import SiteMetadata

register_seo_admin(admin.site, SiteMetadata)

admin.autodiscover()

urlpatterns = patterns('',
    (r'^', include('market.urls')),
    (r'^buy/', include('market_buy.urls')),
    (r'^sell/', include('market_sell.urls')),
    (r'^community/', include('market_community.urls')),
    (r'^admin/reports/', include('reports.urls')),
    (r'^admin/support/', include('support.urls')),
    url(r'^admin/', include(admin.site.urls), name="admin"),
    url(r'^logout/$', 'auth.views.logout', name='logout'),
    url(r'^map/([\d]+)/$', 'bidding.views.bidding_map', name='bidding_map'),
    url(r'^sitemap_index.xml$', 'market.views.sitemap_index', name='market_sitemap'),
    url(r'^sitemap_products.xml$', 'market.views.sitemap_products', name='market_sitemap_products'),
    url(r'^sitemap(?P<sitemap_id>\w*)\.xml$', 'market.views.sitemap', name='market_sitemap'),
    url(r'^robots\.txt$', 'market.views.robot', name='market_robot'),
    url(r'^captcha/', include('captcha.urls')),
    
    # django-social-auth
    url(r'', include('social_auth.urls')),
    
    #Tinymce
    (r'^tinymce/', include('tinymce.urls')),

    (r'^media/(?P<path>.*)$', 'django.views.static.serve', 
        {'document_root': settings.MEDIA_ROOT, 'show_indexes': True}),
    
    (r'^media_out_s3/(?P<path>.*)$', 'django.views.static.serve', 
        {'document_root': settings.MEDIA_ROOT_OUT_S3, 'show_indexes': True}),
                           
    (r'^public/(?P<path>.*)$', 'django.views.static.serve', 
        {'document_root': settings.STATIC_ROOT, 'show_indexes': True}),
    
)

#if settings.DEBUG:
#    urlpatterns += patterns('',
#        (r'^media/(?P<path>.*)$', 'django.views.static.serve', {'document_root': settings.MEDIA_ROOT, 'show_indexes': True}),
#        (r'^media_out_s3/(?P<path>.*)$', 'django.views.static.serve', {'document_root': settings.MEDIA_ROOT_OUT_S3, 'show_indexes': True}),
#    )
    

########NEW FILE########
__FILENAME__ = admin
from models import *
from django.contrib import admin

admin.site.register(AuctionSession)

########NEW FILE########
__FILENAME__ = feeds
from django.contrib.syndication.views import Feed

from auctions.models import AuctionSession

class LatestAuctionsFeed(Feed):
    def get_object(self, request):
        return request.shop

    def title(self, obj):
        return "%s last auctions feed" % obj.name
    
    def description(self, obj):
        return "updates on auctions for %s" % obj.name    

    def link(self, obj):
        return "http://%s/for_sale/" % obj.default_dns

    def items(self, obj):
        return AuctionSession.objects.filter(shop = obj).order_by('-start')[:100]

    def item_title(self, item):
        return item.title

    def item_description(self, item):
        return item.description
    
    def item_link(self, item):
        return "http://%s%s" % (item.shop.default_dns, item.get_bidding_url())


########NEW FILE########
__FILENAME__ = forms
from django import forms
from django.forms import ModelForm
from django.forms.util import ErrorList
from django.utils.translation import ugettext as _

from models import AuctionSession
  
HOUR = [ (str(x).zfill(2), str(x).zfill(2)) for x in range(0,24)]
MINUTE = [ (str(x).zfill(2), str(x).zfill(2)) for x in range(0,60)]

class AuctionSessionForm(ModelForm):
    
    date_from = forms.DateField(label=_("Date from"))
    time_from = forms.TimeField(label=_("Time from"))
#    hour_from = forms.ChoiceField(choices=HOUR, label=_("Hour"))
#    minute_from = forms.ChoiceField(choices=MINUTE, label=_("Minute"))
    date_to = forms.DateField(label=_("Date to"))
    time_to = forms.TimeField(label=_("Time to"))
#    hour_to = forms.ChoiceField(choices=HOUR, label=_("Hour"))
#    minute_to = forms.ChoiceField(choices=MINUTE, label=_("Minute"))
    
    class Meta:
        model = AuctionSession
        fields= ['title', 'description']
        
    def clean_date_to(self):
        cleaned_data = self.cleaned_data
        dfrom = cleaned_data.get("date_from","")
        dto = cleaned_data.get("date_to","")
        if dfrom > dto:
            del cleaned_data["date_from"]
            self._errors["date_from"] =  ErrorList(["Date From must be earlier than Date To!"])
        return dto
########NEW FILE########
__FILENAME__ = models
import datetime

from django.db import models
from shops.models import Shop
from django.utils.translation import ugettext_lazy as _


class AuctionSession(models.Model):
    shop = models.ForeignKey(Shop)
    title = models.CharField(max_length=60)
    description = models.TextField()
    start = models.DateTimeField() 
    end = models.DateTimeField()
    def __unicode__(self):
        return "%s > %s" % (self.shop, self.title)
    
    def finished(self):
        return self.end < datetime.datetime.now()
    
    def actual(self):
        return self.end > datetime.datetime.now() and self.start < datetime.datetime.now()

    def future(self):
        return self.start > datetime.datetime.now()
    
    def status(self):
        if self.end < datetime.datetime.now():
            return _("Finished")
        elif self.end > datetime.datetime.now() and self.start < datetime.datetime.now():
            return _("In Progress")
        elif self.start > datetime.datetime.now():
            return _("Future")

    def count_lots(self):
        return self.lot_set.all().count()

    @models.permalink
    def get_bidding_url(self):
        return ("bidding.views.bidding_auctions", (self.pk, ))
########NEW FILE########
__FILENAME__ = tests
"""
This file demonstrates two different styles of tests (one doctest and one
unittest). These will both pass when you run "manage.py test".

Replace these with more appropriate tests for your application.
"""
import datetime

from django.test import TestCase
from django.core.urlresolvers import reverse

from auctions.models import AuctionSession
from shops.models import Shop
        
class AuctionsTest(TestCase):
    fixtures = [
        'greatcoins_market.json', 
        'greatcoins_subscriptions.json', 
        'greatcoins_auth.json', 
        'greatcoins_shops.json',
        'greatcoins_preferences.json',
        'greatcoins_themes.json'
    ]
    urls = 'stores.urls'
    
    def test_auctions_list(self):
        """
        """
        shop = Shop.objects.all()[0]
        HTTP_HOST = shop.default_dns
        
        success = self.client.login(username='test', password='test')
        self.assertEqual(success, True, "login failed")
        
        response = self.client.get(reverse("inventory_auctions"), HTTP_HOST=HTTP_HOST)
        self.assertEqual(response.status_code, 200, "failed to access inventory auctions (inventory > auctions)")
        
        response = self.client.get(reverse('auction_add'), HTTP_HOST=HTTP_HOST)
        self.assertEqual(response.status_code, 200, "failed to access auctions add (inventory > add auction)")
        
        
    def test_auction_add_and_details(self):
        shop = Shop.objects.all()[0]
        HTTP_HOST = shop.default_dns
        
        success = self.client.login(username='test', password='test')
        self.assertEqual(success, True, "login failed")
        
        date_from = time_from = datetime.datetime.now() 
        date_to = time_to = date_from + datetime.timedelta(days=3)
        
        auction_data = {
                        'date_from': "%s/%s/%s" % (date_from.month, date_from.day, date_from.year), 
                        'time_from': "%s:%s" % (time_from.hour, time_from.minute),
                        'time_to': "%s:%s" % (time_to.hour, time_to.minute),
                        'date_to': "%s/%s/%s" % (date_to.month, date_to.day, date_to.year),
                        'title' : 'Thursday Night Session',
                        'description': 'No description',
        }
        
        auctions = AuctionSession.objects.all()
        self.assertEqual(auctions.count(), 0)
        
        response = self.client.post(reverse('auction_add'), auction_data , HTTP_HOST=HTTP_HOST)
        
        self.assertEqual(response.status_code, 302)
              
        auctions = AuctionSession.objects.all()
        self.assertEqual(auctions.count(), 1)
        
        #should be at least one! the previously added...
        auction = auctions[0]
        response = self.client.get(reverse('auction_details', args=[auction.id]), HTTP_HOST=HTTP_HOST)
        self.assertContains(response, "Thursday Night Session", count=None, status_code=200, msg_prefix='')
        
    
    def test_model_methods(self):
        shop = Shop.objects.all()[0]
        HTTP_HOST = shop.default_dns
        
        auctions = AuctionSession.objects.all()
        self.assertEqual(auctions.count(), 0)
        
        #Save an active session
        starting_date = datetime.datetime.now() 
        end_date = starting_date + datetime.timedelta(days=3)
        
        auction = AuctionSession(shop=shop, title="Friday Night Session", description="No description for now", start=starting_date, end=end_date)
        auction.save()
        
        auctions = AuctionSession.objects.all()
        self.assertEqual(auctions.count(), 1, "There should be at least one auction session in the db")
        
        auction = auctions[0]
        self.assertEqual(auction.title, "Friday Night Session")
        self.assertEqual(auction.description, "No description for now")
        
        self.assertEqual(auction.finished(), False)
        self.assertEqual(auction.actual(), True)
        self.assertEqual(auction.future(), False)
        
        self.assertEqual(auction.status(), "In Progress")
        self.assertEqual(auction.count_lots(), 0)
        
        #Save a session that will be in the future
        now = datetime.datetime.now()
        starting_date = now + datetime.timedelta(3) 
        end_date = starting_date + datetime.timedelta(days=7)
        
        auction = AuctionSession(shop=shop, title="Next week Session", description="No description for now", start=starting_date, end=end_date)
        auction.save()
        
        auctions = AuctionSession.objects.all()
        self.assertEqual(auctions.count(), 2, "There should be 2 sessions")
        
        auction = auctions[1]
        self.assertEqual(auction.title, "Next week Session")
        self.assertEqual(auction.description, "No description for now")
        
        self.assertEqual(auction.finished(), False)
        self.assertEqual(auction.actual(), False)
        self.assertEqual(auction.future(), True)
        
        self.assertEqual(auction.status(), "Future")
        self.assertEqual(auction.count_lots(), 0)
        
        
        #Save a finished session
        now = datetime.datetime.now()
        starting_date = now - datetime.timedelta(7) 
        end_date = now - datetime.timedelta(days=5)
        
        auction = AuctionSession(shop=shop, title="Finished Session", description="No description for now", start=starting_date, end=end_date)
        auction.save()
        
        auctions = AuctionSession.objects.all()
        self.assertEqual(auctions.count(), 3, "There should be 3 sessions")
        
        auction = auctions[2]
        self.assertEqual(auction.title, "Finished Session")
        self.assertEqual(auction.description, "No description for now")
        
        self.assertEqual(auction.finished(), True)
        self.assertEqual(auction.actual(), False)
        self.assertEqual(auction.future(), False)
        
        self.assertEqual(auction.status(), "Finished")
        self.assertEqual(auction.count_lots(), 0)
        
        print "Done.."
            
        
    def test_for_sale_list(self):
        """
        """
        from shops.models import Shop
        shop = Shop.objects.all()[0]
        HTTP_HOST = shop.default_dns
        
        success = self.client.login(username='test', password='test')
        self.assertEqual(success, True, "login failed")
        
        response = self.client.get(reverse("inventory_items"), HTTP_HOST=HTTP_HOST)
        self.assertEqual(response.status_code, 200, "failed to access inventory items (inventory > items for sale > add item)")
        
        response = self.client.get(reverse('item_add'), HTTP_HOST=HTTP_HOST)
        self.assertEqual(response.status_code, 200, "failed to access add new for sale item (inventory > )")
        
        response = self.client.get(reverse('inventory_items_import'), HTTP_HOST=HTTP_HOST)
        self.assertEqual(response.status_code, 200, "failed to access items for sale import (inventory > import items)")

    

        

########NEW FILE########
__FILENAME__ = urls
"""
URLConf for Auctions

Usage in your base urls.py:
    (r'^auctions/', include('auctions.urls')),

"""

from django.conf.urls.defaults import *

urlpatterns = patterns('',
                       
#    url(r'^auctions_list/$', 'auctions.views.auctions_list', name='auctions_list'),
    url(r'^auction_add/$', 'auctions.views.auction_add', name='auction_add'),
    url(r'^auction_details/([\d]+)/$', 'auctions.views.auction_details', name='auction_details'),
#    url(r'^item_sell/$', 'auctions.views.item_sell', name='auctions_item_sell'),
#    url(r'^seller_summary/$', 'auctions.views.seller_summary', name='auctions_seller_summary'),
#    url(r'^buyer_summary/$', 'auctions.views.buyer_summary', name='auctions_buyer_summary'),
#    url(r'^item_view/(?P<item_id>([\d]+))/$', 'auctions.views.item_view', name='auctions_item_view'),
#    url(r'^watch_item/(?P<item_id>([\d]+))/$', 'auctions.views.watch_item', name='auctions_watch_item'),
#    url(r'^buy_item/(?P<item_id>([\d]+))/$', 'auctions.views.buy_item', name='auctions_buy_item'),
#    url(r'^history_bids/(?P<item_id>([\d]+))/$', 'auctions.views.history_bids', name='auctions_history_bids'),
)
########NEW FILE########
__FILENAME__ = views
from django.core.urlresolvers import reverse
from django.contrib.auth.decorators import login_required
from django.template import RequestContext
from django.http import HttpResponseRedirect, HttpResponse, Http404
from django.shortcuts import render_to_response, get_object_or_404
from django.utils.translation import ugettext as _

from django.core.paginator import Paginator, InvalidPage, EmptyPage

from forms import AuctionSessionForm
from models import AuctionSession

from core.decorators import shop_admin_required, auctions_feature_required

import datetime

PAGE_AUCTIONS = 10

#@shop_admin_required    
#def auctions_list(request):
#    shop = request.shop
#    filter_by = request.GET.get('filter_by','')
#    order_by = request.GET.get('order_by','')
#    filter_params = {'order_by':order_by,
#                     'filter_by':filter_by,}
#    q_title=''
#        
#    all_auctions = AuctionSession.objects.all().filter(shop=shop)
#
#    if filter_by == 'title':
#        q_title = request.GET.get('q_title','')
#        all_auctions = all_auctions.filter(title__icontains=q_title)
#        
#    elif filter_by == 'finished':
#        all_auctions = all_auctions.filter(end__lt=datetime.datetime.now())
#    elif filter_by == 'actual':
#        all_auctions = all_auctions.filter(end__gt=datetime.datetime.now(), start__lt=datetime.datetime.now())
#    elif filter_by == 'future':
#        all_auctions = all_auctions.filter(start__gt=datetime.datetime.now())
#
#
#    if order_by == 'id':
#        all_auctions = all_auctions.order_by("id")
#    elif order_by == '-id':
#        all_auctions = all_auctions.order_by("-id")
#    elif order_by == 'title':
#        all_auctions = all_auctions.order_by("title")
#    elif order_by == '-title':
#        all_auctions = all_auctions.order_by("-title")
#    elif order_by == 'start':
#        all_auctions = all_auctions.order_by("start")
#    elif order_by == '-start':
#        all_auctions = all_auctions.order_by("-start")
#    elif order_by == 'end':
#        all_auctions = all_auctions.order_by("end")
#    elif order_by == '-end':
#        all_auctions = all_auctions.order_by("-end")
#    elif order_by == 'total':
#        all_auctions = all_auctions.order_by("lot_set__count")
#    elif order_by == '-total':
#        all_auctions = all_auctions.order_by("-lot_set__count")
#    
#
#    pager = Paginator(all_auctions, PAGE_AUCTIONS)
#    try:
#        page = int(request.GET.get('page','1'))
#    except:
#        page = 1
#    try:
#        auctions = pager.page(page)
#    except (EmptyPage, InvalidPage):
#        auctions = pager.page(pager.num_pages)
#    paged = (pager.num_pages > 1)
#         
#    return render_to_response('auctions/auctions_list.html', 
#                              {'auctions': auctions,
#                               'pages': pager.page_range,
#                               'paged': paged,
#                               'filter_params': filter_params,
#                               'q_title': q_title,
#                              }, 
#                              RequestContext(request))



    

@shop_admin_required
@auctions_feature_required
def auction_add(request):
    
    form = AuctionSessionForm(request.POST or None)
    if form.is_valid():
        auction_session = form.save(commit = False)
        d = datetime.datetime(form.cleaned_data['date_from'].year,
                              form.cleaned_data['date_from'].month,
                              form.cleaned_data['date_from'].day,
                              form.cleaned_data['time_from'].hour,
                              form.cleaned_data['time_from'].minute)
        auction_session.start = d 
        d = datetime.datetime(form.cleaned_data['date_to'].year,
                              form.cleaned_data['date_to'].month,
                              form.cleaned_data['date_to'].day,
                              form.cleaned_data['time_to'].hour,
                              form.cleaned_data['time_to'].minute)
        auction_session.end = d
        auction_session.shop = request.shop
        auction_session.save() 
        request.flash['message'] = unicode(_("Session successfully added."))
        request.flash['severity'] = "success"
        return HttpResponseRedirect(reverse('inventory_auctions'))
    return render_to_response('auctions/auction_add.html', 
                              {'form': form},
                              RequestContext(request))


@auctions_feature_required
def auction_details(request, auction_id):
    
    auction = get_object_or_404(AuctionSession, pk=auction_id)
    shop = request.shop
    if auction.shop != shop:
        raise Http404
    return render_to_response('auctions/auction_details.html', 
                              {'auction': auction}, 
                              RequestContext(request))

########NEW FILE########
__FILENAME__ = admin
from django import template
from django.conf import settings
from django.contrib import admin
#from django.contrib.auth.forms import UserCreationForm, UserChangeForm, AdminPasswordChangeForm
#from django.contrib.auth.models import User, Group
from django.core.exceptions import PermissionDenied
from django.http import HttpResponseRedirect, Http404
from django.shortcuts import render_to_response, get_object_or_404
from django.template import RequestContext
from django.utils.html import escape
from django.utils.translation import ugettext, ugettext_lazy as _

from forms import UserCreationForm, UserChangeForm, AdminPasswordChangeForm
from models import User, Group

class GroupAdmin(admin.ModelAdmin):
    search_fields = ('name',)
    ordering = ('name',)
    filter_horizontal = ('permissions',)

class UserAdmin(admin.ModelAdmin):
    fieldsets = (
        (None, {'fields': ('username', 'password')}),
        (_('Personal info'), {'fields': ('first_name', 'last_name', 'email')}),
        (_('Permissions'), {'fields': ('is_staff', 'is_active', 'is_superuser', 'user_permissions')}),
        (_('Important dates'), {'fields': ('last_login', 'date_joined')}),
        (_('Groups'), {'fields': ('groups',)}),
    )
    form = UserChangeForm
    add_form = UserCreationForm
    change_password_form = AdminPasswordChangeForm
    list_display = ('username', 'email', 'first_name', 'last_name', 'is_staff')
    list_filter = ('is_staff', 'is_superuser', 'is_active')
    search_fields = ('username', 'first_name', 'last_name', 'email')
    ordering = ('username',)
    filter_horizontal = ('user_permissions',)

    def __call__(self, request, url):
        # this should not be here, but must be due to the way __call__ routes
        # in ModelAdmin.
        if url is None:
            return self.changelist_view(request)
        if url.endswith('password'):
            return self.user_change_password(request, url.split('/')[0])
        return super(UserAdmin, self).__call__(request, url)
    
    def get_urls(self):
        from django.conf.urls.defaults import patterns
        return patterns('',
            (r'^(\d+)/password/$', self.admin_site.admin_view(self.user_change_password))
        ) + super(UserAdmin, self).get_urls()

    def add_view(self, request):
        # It's an error for a user to have add permission but NOT change
        # permission for users. If we allowed such users to add users, they
        # could create superusers, which would mean they would essentially have
        # the permission to change users. To avoid the problem entirely, we
        # disallow users from adding users if they don't have change
        # permission.
        if not self.has_change_permission(request):
            if self.has_add_permission(request) and settings.DEBUG:
                # Raise Http404 in debug mode so that the user gets a helpful
                # error message.
                raise Http404('Your user does not have the "Change user" permission. In order to add users, Django requires that your user account have both the "Add user" and "Change user" permissions set.')
            raise PermissionDenied
        if request.method == 'POST':
            form = self.add_form(request.POST)
            if form.is_valid():
                new_user = form.save()
                msg = _('The %(name)s "%(obj)s" was added successfully.') % {'name': 'user', 'obj': new_user}
                self.log_addition(request, new_user)
                if "_addanother" in request.POST:
                    request.user.message_set.create(message=msg)
                    return HttpResponseRedirect(request.path)
                elif '_popup' in request.REQUEST:
                    return self.response_add(request, new_user)
                else:
                    request.user.message_set.create(message=msg + ' ' + ugettext("You may edit it again below."))
                    return HttpResponseRedirect('../%s/' % new_user.id)
        else:
            form = self.add_form()
        return render_to_response('admin/auth/user/add_form.html', {
            'title': _('Add user'),
            'form': form,
            'is_popup': '_popup' in request.REQUEST,
            'add': True,
            'change': False,
            'has_add_permission': True,
            'has_delete_permission': False,
            'has_change_permission': True,
            'has_file_field': False,
            'has_absolute_url': False,
            'auto_populated_fields': (),
            'opts': self.model._meta,
            'save_as': False,
            'username_help_text': self.model._meta.get_field('username').help_text,
            'root_path': self.admin_site.root_path,
            'app_label': self.model._meta.app_label,            
        }, context_instance=template.RequestContext(request))

    def user_change_password(self, request, id):
        if not self.has_change_permission(request):
            raise PermissionDenied
        user = get_object_or_404(self.model, pk=id)
        if request.method == 'POST':
            form = self.change_password_form(user, request.POST)
            if form.is_valid():
                new_user = form.save()
                msg = ugettext('Password changed successfully.')
                request.user.message_set.create(message=msg)
                return HttpResponseRedirect('..')
        else:
            form = self.change_password_form(user)
        return render_to_response('admin/auth/user/change_password.html', {
            'title': _('Change password: %s') % escape(user.username),
            'form': form,
            'is_popup': '_popup' in request.REQUEST,
            'add': True,
            'change': False,
            'has_delete_permission': False,
            'has_change_permission': True,
            'has_absolute_url': False,
            'opts': self.model._meta,
            'original': user,
            'save_as': False,
            'show_save': True,
            'root_path': self.admin_site.root_path,
        }, context_instance=RequestContext(request))


admin.site.register(Group, GroupAdmin)
admin.site.register(User, UserAdmin)


########NEW FILE########
__FILENAME__ = backends
try:
    set
except NameError:
    from sets import Set as set # Python 2.3 fallback

from django.db import connection
#from django.contrib.auth.models import User
from models import User


class ModelBackend(object):
    """
    Authenticates against django.contrib.auth.models.User.
    """
    # TODO: Model, login attribute name and password attribute name should be
    # configurable.
    def authenticate(self, username=None, password=None):
        try:
            user = User.objects.get(username=username)
            if user.check_password(password):
                return user
        except User.DoesNotExist:
            return None

    def get_group_permissions(self, user_obj):
        """
        Returns a set of permission strings that this user has through his/her
        groups.
        """
        if not hasattr(user_obj, '_group_perm_cache'):
            cursor = connection.cursor()
            # The SQL below works out to the following, after DB quoting:
            # cursor.execute("""
            #     SELECT ct."app_label", p."codename"
            #     FROM "auth_permission" p, "auth_group_permissions" gp, "auth_user_groups" ug, "django_content_type" ct
            #     WHERE p."id" = gp."permission_id"
            #         AND gp."group_id" = ug."group_id"
            #         AND ct."id" = p."content_type_id"
            #         AND ug."user_id" = %s, [self.id])
            qn = connection.ops.quote_name
            sql = """
                SELECT ct.%s, p.%s
                FROM %s p, %s gp, %s ug, %s ct
                WHERE p.%s = gp.%s
                    AND gp.%s = ug.%s
                    AND ct.%s = p.%s
                    AND ug.%s = %%s""" % (
                qn('app_label'), qn('codename'),
                qn('auth_permission'), qn('auth_group_permissions'),
                qn('auth_user_groups'), qn('django_content_type'),
                qn('id'), qn('permission_id'),
                qn('group_id'), qn('group_id'),
                qn('id'), qn('content_type_id'),
                qn('user_id'),)
            cursor.execute(sql, [user_obj.id])
            user_obj._group_perm_cache = set(["%s.%s" % (row[0], row[1]) for row in cursor.fetchall()])
        return user_obj._group_perm_cache

    def get_all_permissions(self, user_obj):
        if not hasattr(user_obj, '_perm_cache'):
            user_obj._perm_cache = set([u"%s.%s" % (p.content_type.app_label, p.codename) for p in user_obj.user_permissions.select_related()])
            user_obj._perm_cache.update(self.get_group_permissions(user_obj))
        return user_obj._perm_cache

    def has_perm(self, user_obj, perm):
        return perm in self.get_all_permissions(user_obj)

    def has_module_perms(self, user_obj, app_label):
        """
        Returns True if user_obj has any permissions in the given app_label.
        """
        for perm in self.get_all_permissions(user_obj):
            if perm[:perm.index('.')] == app_label:
                return True
        return False

    def get_user(self, user_id):
        try:
            return User.objects.get(pk=user_id)
        except User.DoesNotExist:
            return None


class RemoteUserBackend(ModelBackend):
    """
    This backend is to be used in conjunction with the ``RemoteUserMiddleware``
    found in the middleware module of this package, and is used when the server
    is handling authentication outside of Django.

    By default, the ``authenticate`` method creates ``User`` objects for
    usernames that don't already exist in the database.  Subclasses can disable
    this behavior by setting the ``create_unknown_user`` attribute to
    ``False``.
    """

    # Create a User object if not already in the database?
    create_unknown_user = True

    def authenticate(self, remote_user):
        """
        The username passed as ``remote_user`` is considered trusted.  This
        method simply returns the ``User`` object with the given username,
        creating a new ``User`` object if ``create_unknown_user`` is ``True``.

        Returns None if ``create_unknown_user`` is ``False`` and a ``User``
        object with the given username is not found in the database.
        """
        if not remote_user:
            return
        user = None
        username = self.clean_username(remote_user)

        # Note that this could be accomplished in one try-except clause, but
        # instead we use get_or_create when creating unknown users since it has
        # built-in safeguards for multiple threads.
        if self.create_unknown_user:
            user, created = User.objects.get_or_create(username=username)
            if created:
                user = self.configure_user(user)
        else:
            try:
                user = User.objects.get(username=username)
            except User.DoesNotExist:
                pass
        return user

    def clean_username(self, username):
        """
        Performs any cleaning on the "username" prior to using it to get or
        create the user object.  Returns the cleaned username.

        By default, returns the username unchanged.
        """
        return username

    def configure_user(self, user):
        """
        Configures a user after creation and returns the updated user.

        By default, returns the user unmodified.
        """
        return user

########NEW FILE########
__FILENAME__ = create_superuser
"""
Create a superuser from the command line. Deprecated; use manage.py
createsuperuser instead.
"""

if __name__ == "__main__":
    from django.core.management import call_command
    call_command("createsuperuser")

########NEW FILE########
__FILENAME__ = decorators
try:
    from functools import update_wrapper
except ImportError:
    from django.utils.functional import update_wrapper  # Python 2.3, 2.4 fallback.

#from django.contrib.auth import REDIRECT_FIELD_NAME
from auth import REDIRECT_FIELD_NAME
from django.http import HttpResponseRedirect
from django.utils.http import urlquote

def user_passes_test(test_func, login_url=None, redirect_field_name=REDIRECT_FIELD_NAME):
    """
    Decorator for views that checks that the user passes the given test,
    redirecting to the log-in page if necessary. The test should be a callable
    that takes the user object and returns True if the user passes.
    """
    def decorate(view_func):
        return _CheckLogin(view_func, test_func, login_url, redirect_field_name)
    return decorate

def login_required(function=None, redirect_field_name=REDIRECT_FIELD_NAME):
    """
    Decorator for views that checks that the user is logged in, redirecting
    to the log-in page if necessary.
    """
    actual_decorator = user_passes_test(
        lambda u: u.is_authenticated(),
        redirect_field_name=redirect_field_name
    )
    if function:
        return actual_decorator(function)
    return actual_decorator

def permission_required(perm, login_url=None):
    """
    Decorator for views that checks whether a user has a particular permission
    enabled, redirecting to the log-in page if necessary.
    """
    return user_passes_test(lambda u: u.has_perm(perm), login_url=login_url)

class _CheckLogin(object):
    """
    Class that checks that the user passes the given test, redirecting to
    the log-in page if necessary. If the test is passed, the view function
    is invoked. The test should be a callable that takes the user object
    and returns True if the user passes.

    We use a class here so that we can define __get__. This way, when a
    _CheckLogin object is used as a method decorator, the view function
    is properly bound to its instance.
    """
    def __init__(self, view_func, test_func, login_url=None, redirect_field_name=REDIRECT_FIELD_NAME):
        if not login_url:
            from django.conf import settings
            login_url = settings.LOGIN_URL
        self.view_func = view_func
        self.test_func = test_func
        self.login_url = login_url
        self.redirect_field_name = redirect_field_name
        
        # We can't blindly apply update_wrapper because it udpates __dict__ and 
        # if the view function is already a _CheckLogin object then 
        # self.test_func and friends will get stomped. However, we also can't 
        # *not* update the wrapper's dict because then view function attributes
        # don't get updated into the wrapper. So we need to split the
        # difference: don't let update_wrapper update __dict__, but then update
        # the (parts of) __dict__ that we care about ourselves.
        update_wrapper(self, view_func, updated=())
        for k in view_func.__dict__:
            if k not in self.__dict__:
                self.__dict__[k] = view_func.__dict__[k]

    def __get__(self, obj, cls=None):
        view_func = self.view_func.__get__(obj, cls)
        return _CheckLogin(view_func, self.test_func, self.login_url, self.redirect_field_name)
    
    def __call__(self, request, *args, **kwargs):
        if self.test_func(request.user):
            return self.view_func(request, *args, **kwargs)
        path = urlquote(request.get_full_path())
        tup = self.login_url, self.redirect_field_name, path
        return HttpResponseRedirect('%s?%s=%s' % tup)

########NEW FILE########
__FILENAME__ = forms
#from django.contrib.auth.models import User
#from django.contrib.auth import authenticate
#from django.contrib.auth.tokens import default_token_generator
from models import User
from auth import authenticate
from tokens import default_token_generator
from django.contrib.sites.models import Site
from django.conf import settings
from django.template import Context, loader
from django import forms
from django.utils.translation import ugettext_lazy as _
from django.utils.http import int_to_base36

class UserCreationForm(forms.ModelForm):
    """
    A form that creates a user, with no privileges, from the given username and password.
    """
    username = forms.RegexField(label=_("Username"), max_length=30, regex=r'^\w+$', required=False,
        help_text = _("Required. 30 characters or fewer. Alphanumeric characters only (letters, digits and underscores)."),
        error_message = _("This value must contain only letters, numbers and underscores."))
    password1 = forms.CharField(label=_("Password"), widget=forms.PasswordInput)
    password2 = forms.CharField(label=_("Password confirmation"), widget=forms.PasswordInput)

    class Meta:
        model = User
        fields = ("username", "first_name", "last_name",)

    def clean_email(self):
        #TODO: check
        email = self.cleaned_data["email"]
        try:
            user = User.objects.get(email=email)
        except User.DoesNotExist:
            return email
        raise forms.ValidationError(_("A user with that email already exists."))
    
    def clean_username(self):
        username = self.cleaned_data["username"]
        username = username.strip()
        if username == "":
            raise forms.ValidationError(_("Username field can't be blank."))
        
        try:
            User.objects.get(username=username)
        except User.DoesNotExist:
            return username
        raise forms.ValidationError(_("A user with that username already exists."))

    def clean_password2(self):
        import re
        password1 = self.cleaned_data.get("password1", "")
        password2 = self.cleaned_data["password2"]
        
        if password1 != password2:
            raise forms.ValidationError(_("The two password fields didn't match."))
        
        if len(password1) < 6:
            raise forms.ValidationError(_("Your password must have at least 6 characters!"))
        
        if not (re.match("[0-9a-zA-Z]{6,20}?$", password1)):
            raise forms.ValidationError(_("Your password must be an alphanumeric value!"))
        return password2

    def save(self, commit=True):
        user = super(UserCreationForm, self).save(commit=False)
        user.set_password(self.cleaned_data["password1"])
        if commit:
            user.save()
        return user

class UserChangeForm(forms.ModelForm):
    username = forms.RegexField(label=_("Username"), max_length=30, regex=r'^\w+$',
        help_text = _("Required. 30 characters or fewer. Alphanumeric characters only (letters, digits and underscores)."),
        error_message = _("This value must contain only letters, numbers and underscores."))
    
    class Meta:
        model = User

class AuthenticationForm(forms.Form):
    """
    Base class for authenticating users. Extend this to get a form that accepts
    username/password logins.
    """
    username = forms.CharField(label=_("Username"), max_length=30)
    password = forms.CharField(label=_("Password"), widget=forms.PasswordInput)

    def __init__(self, request=None, *args, **kwargs):
        """
        If request is passed in, the form will validate that cookies are
        enabled. Note that the request (a HttpRequest object) must have set a
        cookie with the key TEST_COOKIE_NAME and value TEST_COOKIE_VALUE before
        running this validation.
        """
        self.request = request
        self.user_cache = None
        super(AuthenticationForm, self).__init__(*args, **kwargs)

    def clean(self):
        username = self.cleaned_data.get('username')
        password = self.cleaned_data.get('password')

        if username and password:
            self.user_cache = authenticate(username=username, password=password, request=self.request)
            if self.user_cache is None:
                raise forms.ValidationError(_("Please enter a correct username and password. Note that both fields are case-sensitive."))
            elif not self.user_cache.is_active:
                raise forms.ValidationError(_("This account is inactive."))

        # TODO: determine whether this should move to its own method.
        if self.request:
            if not self.request.session.test_cookie_worked():
                raise forms.ValidationError(_("Your Web browser doesn't appear to have cookies enabled. Cookies are required for logging in."))

        return self.cleaned_data

    def get_user_id(self):
        if self.user_cache:
            return self.user_cache.id
        return None

    def get_user(self):
        return self.user_cache

class PasswordResetForm(forms.Form):
    email = forms.EmailField(label=_("E-mail"), max_length=75)

    def clean_email(self):
        """
        Validates that a user exists with the given e-mail address.
        """
        email = self.cleaned_data["email"]
        self.users_cache = User.objects.filter(email__iexact=email)
        if len(self.users_cache) == 0:
            raise forms.ValidationError(_("That e-mail address doesn't have an associated user account. Are you sure you've registered?"))
        return email

    def save(self, domain_override=None, email_template_name='registration/password_reset_email.html',
             use_https=False, token_generator=default_token_generator):
        """
        Generates a one-use only link for resetting password and sends to the user
        """
        from django.core.mail import send_mail, EmailMessage
        for user in self.users_cache:
            if not domain_override:
                current_site = Site.objects.get_current()
                site_name = current_site.name
                domain = current_site.domain
            else:
                site_name = domain = domain_override
            t = loader.get_template(email_template_name)
            c = {
                'email': user.email,
                'domain': domain,
                'site_name': site_name,
                'uid': int_to_base36(user.id),
                'user': user,
                'token': token_generator.make_token(user),
                'protocol': use_https and 'https' or 'http',
            }
            mail = EmailMessage(subject=_("Password reset on %s") % site_name,
                                body=t.render(Context(c)),
                                from_email=settings.EMAIL_FROM,
                                to=[user.email],
                                headers={'X-SMTPAPI': '{\"category\": \"Password Reset\"}'})
            mail.send(fail_silently=True)
#            send_mail(_("Password reset on %s") % site_name, t.render(Context(c)), settings.EMAIL_FROM, [user.email])

class SetPasswordForm(forms.Form):
    """
    A form that lets a user change set his/her password without
    entering the old password
    """
    new_password1 = forms.CharField(label=_("New password"), widget=forms.PasswordInput)
    new_password2 = forms.CharField(label=_("New password confirmation"), widget=forms.PasswordInput)

    def __init__(self, user, *args, **kwargs):
        self.user = user
        super(SetPasswordForm, self).__init__(*args, **kwargs)

    def clean_new_password2(self):
        password1 = self.cleaned_data.get('new_password1')
        password2 = self.cleaned_data.get('new_password2')
        if password1 and password2:
            if password1 != password2:
                raise forms.ValidationError(_("The two password fields didn't match."))
        return password2

    def save(self, commit=True):
        self.user.set_password(self.cleaned_data['new_password1'])
        if commit:
            self.user.save()
        return self.user

class PasswordChangeForm(SetPasswordForm):
    """
    A form that lets a user change his/her password by entering
    their old password.
    """
    old_password = forms.CharField(label=_("Old password"), widget=forms.PasswordInput)

    def clean_old_password(self):
        """
        Validates that the old_password field is correct.
        """
        old_password = self.cleaned_data["old_password"]
        if not self.user.check_password(old_password):
            raise forms.ValidationError(_("Your old password was entered incorrectly. Please enter it again."))
        return old_password
PasswordChangeForm.base_fields.keyOrder = ['old_password', 'new_password1', 'new_password2']

class AdminPasswordChangeForm(forms.Form):
    """
    A form used to change the password of a user in the admin interface.
    """
    password1 = forms.CharField(label=_("Password"), widget=forms.PasswordInput)
    password2 = forms.CharField(label=_("Password (again)"), widget=forms.PasswordInput)

    def __init__(self, user, *args, **kwargs):
        self.user = user
        super(AdminPasswordChangeForm, self).__init__(*args, **kwargs)

    def clean_password2(self):
        password1 = self.cleaned_data.get('password1')
        password2 = self.cleaned_data.get('password2')
        if password1 and password2:
            if password1 != password2:
                raise forms.ValidationError(_("The two password fields didn't match."))
        return password2

    def save(self, commit=True):
        """
        Saves the new password.
        """
        self.user.set_password(self.cleaned_data["password1"])
        if commit:
            self.user.save()
        return self.user

########NEW FILE########
__FILENAME__ = modpython
from mod_python import apache
import os

def authenhandler(req, **kwargs):
    """
    Authentication handler that checks against Django's auth database.
    """

    # mod_python fakes the environ, and thus doesn't process SetEnv.  This fixes
    # that so that the following import works
    os.environ.update(req.subprocess_env)

    # apache 2.2 requires a call to req.get_basic_auth_pw() before 
    # req.user and friends are available.
    req.get_basic_auth_pw()

    # check for PythonOptions
    _str_to_bool = lambda s: s.lower() in ('1', 'true', 'on', 'yes')

    options = req.get_options()
    permission_name = options.get('DjangoPermissionName', None)
    staff_only = _str_to_bool(options.get('DjangoRequireStaffStatus', "on"))
    superuser_only = _str_to_bool(options.get('DjangoRequireSuperuserStatus', "off"))
    settings_module = options.get('DJANGO_SETTINGS_MODULE', None)
    if settings_module:
        os.environ['DJANGO_SETTINGS_MODULE'] = settings_module

#    from django.contrib.auth.models import User
    from auth.models import User
    from django import db
    db.reset_queries()

    # check that the username is valid
    kwargs = {'username': req.user, 'is_active': True}
    if staff_only:
        kwargs['is_staff'] = True
    if superuser_only:
        kwargs['is_superuser'] = True
    try:
        try:
            user = User.objects.get(**kwargs)
        except User.DoesNotExist:
            return apache.HTTP_UNAUTHORIZED
    
        # check the password and any permission given
        if user.check_password(req.get_basic_auth_pw()):
            if permission_name:
                if user.has_perm(permission_name):
                    return apache.OK
                else:
                    return apache.HTTP_UNAUTHORIZED
            else:
                return apache.OK
        else:
            return apache.HTTP_UNAUTHORIZED
    finally:
        db.connection.close()

########NEW FILE########
__FILENAME__ = createsuperuser
"""
Management utility to create superusers.
"""

import getpass
import os
import re
import sys
from optparse import make_option
#from django.contrib.auth.models import User
from auth.models import User
from django.core import exceptions
from django.core.management.base import BaseCommand, CommandError
from django.utils.translation import ugettext as _

RE_VALID_USERNAME = re.compile('\w+$')
EMAIL_RE = re.compile(
    r"(^[-!#$%&'*+/=?^_`{}|~0-9A-Z]+(\.[-!#$%&'*+/=?^_`{}|~0-9A-Z]+)*"  # dot-atom
    r'|^"([\001-\010\013\014\016-\037!#-\[\]-\177]|\\[\001-\011\013\014\016-\177])*"' # quoted-string
    r')@(?:[A-Z0-9-]+\.)+[A-Z]{2,6}$', re.IGNORECASE)  # domain

def is_valid_email(value):
    if not EMAIL_RE.search(value):
        raise exceptions.ValidationError(_('Enter a valid e-mail address.'))

class Command(BaseCommand):
    option_list = BaseCommand.option_list + (
        make_option('--username', dest='username', default=None,
            help='Specifies the username for the superuser.'),
        make_option('--email', dest='email', default=None,
            help='Specifies the email address for the superuser.'),
        make_option('--noinput', action='store_false', dest='interactive', default=True,
            help='Tells Django to NOT prompt the user for input of any kind. '    \
                 'You must use --username and --email with --noinput, and '      \
                 'superusers created with --noinput will not be able to log in '  \
                 'until they\'re given a valid password.'),
    )
    help = 'Used to create a superuser.'

    def handle(self, *args, **options):
        username = options.get('username', None)
        email = options.get('email', None)
        interactive = options.get('interactive')
        
        # Do quick and dirty validation if --noinput
        if not interactive:
            if not username or not email:
                raise CommandError("You must use --username and --email with --noinput.")
            if not RE_VALID_USERNAME.match(username):
                raise CommandError("Invalid username. Use only letters, digits, and underscores")
            try:
                is_valid_email(email)
            except exceptions.ValidationError:
                raise CommandError("Invalid email address.")

        password = ''

        # Try to determine the current system user's username to use as a default.
        try:
            import pwd
            default_username = pwd.getpwuid(os.getuid())[0].replace(' ', '').lower()
        except (ImportError, KeyError):
            # KeyError will be raised by getpwuid() if there is no
            # corresponding entry in the /etc/passwd file (a very restricted
            # chroot environment, for example).
            default_username = ''

        # Determine whether the default username is taken, so we don't display
        # it as an option.
        if default_username:
            try:
                User.objects.get(username=default_username)
            except User.DoesNotExist:
                pass
            else:
                default_username = ''

        # Prompt for username/email/password. Enclose this whole thing in a
        # try/except to trap for a keyboard interrupt and exit gracefully.
        if interactive:
            try:
            
                # Get a username
                while 1:
                    if not username:
                        input_msg = 'Username'
                        if default_username:
                            input_msg += ' (Leave blank to use %r)' % default_username
                        username = raw_input(input_msg + ': ')
                    if default_username and username == '':
                        username = default_username
                    if not RE_VALID_USERNAME.match(username):
                        sys.stderr.write("Error: That username is invalid. Use only letters, digits and underscores.\n")
                        username = None
                        continue
                    try:
                        User.objects.get(username=username)
                    except User.DoesNotExist:
                        break
                    else:
                        sys.stderr.write("Error: That username is already taken.\n")
                        username = None
            
                # Get an email
                while 1:
                    if not email:
                        email = raw_input('E-mail address: ')
                    try:
                        is_valid_email(email)
                    except exceptions.ValidationError:
                        sys.stderr.write("Error: That e-mail address is invalid.\n")
                        email = None
                    else:
                        break
            
                # Get a password
                while 1:
                    if not password:
                        password = getpass.getpass()
                        password2 = getpass.getpass('Password (again): ')
                        if password != password2:
                            sys.stderr.write("Error: Your passwords didn't match.\n")
                            password = None
                            continue
                    if password.strip() == '':
                        sys.stderr.write("Error: Blank passwords aren't allowed.\n")
                        password = None
                        continue
                    break
            except KeyboardInterrupt:
                sys.stderr.write("\nOperation cancelled.\n")
                sys.exit(1)
        
        User.objects.create_superuser(username, email, password)
        print "Superuser created successfully."

########NEW FILE########
__FILENAME__ = middleware
#from django.contrib import auth
import auth
from django.core.exceptions import ImproperlyConfigured


class LazyUser(object):
    def __get__(self, request, obj_type=None):
        if not hasattr(request, '_cached_user'):
            #from django.contrib.auth import get_user
            from auth import get_user
            request._cached_user = get_user(request)
        return request._cached_user


class AuthenticationMiddleware(object):
    def process_request(self, request):
        assert hasattr(request, 'session'), "The Django authentication middleware requires session middleware to be installed. Edit your MIDDLEWARE_CLASSES setting to insert 'django.contrib.sessions.middleware.SessionMiddleware'."
        request.__class__.user = LazyUser()
        return None


class RemoteUserMiddleware(object):
    """
    Middleware for utilizing web-server-provided authentication.

    If request.user is not authenticated, then this middleware attempts to
    authenticate the username passed in the ``REMOTE_USER`` request header.
    If authentication is successful, the user is automatically logged in to
    persist the user in the session.

    The header used is configurable and defaults to ``REMOTE_USER``.  Subclass
    this class and change the ``header`` attribute if you need to use a
    different header.
    """

    # Name of request header to grab username from.  This will be the key as
    # used in the request.META dictionary, i.e. the normalization of headers to
    # all uppercase and the addition of "HTTP_" prefix apply.
    header = "REMOTE_USER"

    def process_request(self, request):
        # AuthenticationMiddleware is required so that request.user exists.
        if not hasattr(request, 'user'):
            raise ImproperlyConfigured(
                "The Django remote user auth middleware requires the"
                " authentication middleware to be installed.  Edit your"
                " MIDDLEWARE_CLASSES setting to insert"
                " 'django.contrib.auth.middleware.AuthenticationMiddleware'"
                " before the RemoteUserMiddleware class.")
        try:
            username = request.META[self.header]
        except KeyError:
            # If specified header doesn't exist then return (leaving
            # request.user set to AnonymousUser by the
            # AuthenticationMiddleware).
            return
        # If the user is already authenticated and that user is the user we are
        # getting passed in the headers, then the correct user is already
        # persisted in the session and we don't need to continue.
        if request.user.is_authenticated():
            if request.user.username == self.clean_username(username, request):
                return
        # We are seeing this user for the first time in this session, attempt
        # to authenticate the user.
        user = auth.authenticate(remote_user=username)
        if user:
            # User is valid.  Set request.user and persist user in the session
            # by logging the user in.
            request.user = user
            auth.login(request, user)

    def clean_username(self, username, request):
        """
        Allows the backend to clean the username, if the backend defines a
        clean_username method.
        """
        backend_str = request.session[auth.BACKEND_SESSION_KEY]
        backend = auth.load_backend(backend_str)
        try:
            username = backend.clean_username(username)
        except AttributeError: # Backend has no clean_username method.
            pass
        return username

########NEW FILE########
__FILENAME__ = models
import datetime
import urllib

#from django.contrib import auth
import auth
from django.core.exceptions import ImproperlyConfigured
from django.db import models
from django.db.models.manager import EmptyManager
from django.contrib.contenttypes.models import ContentType
from django.utils.encoding import smart_str
from django.utils.hashcompat import md5_constructor, sha_constructor
from django.utils.translation import ugettext_lazy as _

UNUSABLE_PASSWORD = '!' # This will never be a valid hash

try:
    set
except NameError:
    from sets import Set as set   # Python 2.3 fallback

def get_hexdigest(algorithm, salt, raw_password):
    """
    Returns a string of the hexdigest of the given plaintext password and salt
    using the given algorithm ('md5', 'sha1' or 'crypt').
    """
    raw_password, salt = smart_str(raw_password), smart_str(salt)
    if algorithm == 'crypt':
        try:
            import crypt
        except ImportError:
            raise ValueError('"crypt" password algorithm not supported in this environment')
        return crypt.crypt(raw_password, salt)

    if algorithm == 'md5':
        return md5_constructor(salt + raw_password).hexdigest()
    elif algorithm == 'sha1':
        return sha_constructor(salt + raw_password).hexdigest()
    raise ValueError("Got unknown password algorithm type in password.")

def check_password(raw_password, enc_password):
    """
    Returns a boolean of whether the raw_password was correct. Handles
    encryption formats behind the scenes.
    """
    algo, salt, hsh = enc_password.split('$')
    return hsh == get_hexdigest(algo, salt, raw_password)

class SiteProfileNotAvailable(Exception):
    pass

class Permission(models.Model):
    """The permissions system provides a way to assign permissions to specific users and groups of users.

    The permission system is used by the Django admin site, but may also be useful in your own code. The Django admin site uses permissions as follows:

        - The "add" permission limits the user's ability to view the "add" form and add an object.
        - The "change" permission limits a user's ability to view the change list, view the "change" form and change an object.
        - The "delete" permission limits the ability to delete an object.

    Permissions are set globally per type of object, not per specific object instance. It is possible to say "Mary may change news stories," but it's not currently possible to say "Mary may change news stories, but only the ones she created herself" or "Mary may only change news stories that have a certain status or publication date."

    Three basic permissions -- add, change and delete -- are automatically created for each Django model.
    """
    name = models.CharField(_('name'), max_length=50)
    content_type = models.ForeignKey(ContentType)
    codename = models.CharField(_('codename'), max_length=100)

    class Meta:
        verbose_name = _('permission')
        verbose_name_plural = _('permissions')
        unique_together = (('content_type', 'codename'),)
        ordering = ('content_type__app_label', 'codename')

    def __unicode__(self):
        return u"%s | %s | %s" % (
            unicode(self.content_type.app_label),
            unicode(self.content_type),
            unicode(self.name))

class Group(models.Model):
    """Groups are a generic way of categorizing users to apply permissions, or some other label, to those users. A user can belong to any number of groups.

    A user in a group automatically has all the permissions granted to that group. For example, if the group Site editors has the permission can_edit_home_page, any user in that group will have that permission.

    Beyond permissions, groups are a convenient way to categorize users to apply some label, or extended functionality, to them. For example, you could create a group 'Special users', and you could write code that would do special things to those users -- such as giving them access to a members-only portion of your site, or sending them members-only e-mail messages.
    """
    name = models.CharField(_('name'), max_length=80, unique=True)
    permissions = models.ManyToManyField(Permission, verbose_name=_('permissions'), blank=True)

    class Meta:
        verbose_name = _('group')
        verbose_name_plural = _('groups')

    def __unicode__(self):
        return self.name

class UserManager(models.Manager):
    def create_user(self, username, email, password=None):
        "Creates and saves a User with the given username, e-mail and password."
        now = datetime.datetime.now()
        user = self.model(None, username, '', '', email.strip().lower(), 'placeholder', False, True, False, now, now)
        if password:
            user.set_password(password)
        else:
            user.set_unusable_password()
        user.save()
        return user

    def create_superuser(self, username, email, password):
        u = self.create_user(username, email, password)
        u.is_staff = True
        u.is_active = True
        u.is_superuser = True
        u.save()
        return u

    def make_random_password(self, length=10, allowed_chars='abcdefghjkmnpqrstuvwxyzABCDEFGHJKLMNPQRSTUVWXYZ23456789'):
        "Generates a random password with the given length and given allowed_chars"
        # Note that default value of allowed_chars does not have "I" or letters
        # that look like it -- just to avoid confusion.
        from random import choice
        return ''.join([choice(allowed_chars) for i in range(length)])

class User(models.Model):
    """Users within the Django authentication system are represented by this model.

    Username and password are required. Other fields are optional.
    """
    username = models.CharField(_('username'), unique=True, max_length=32, help_text=_("Required. 30 characters or fewer. Alphanumeric characters only (letters, digits and underscores)."))
    first_name = models.CharField(_('first name'), max_length=30, blank=True)
    last_name = models.CharField(_('last name'), max_length=30, blank=True)
    email = models.EmailField(_('e-mail address'))
    password = models.CharField(_('password'), max_length=128, help_text=_("Use '[algo]$[salt]$[hexdigest]' or use the <a href=\"password/\">change password form</a>."))
    is_staff = models.BooleanField(_('staff status'), default=False, help_text=_("Designates whether the user can log into this admin site."))
    is_active = models.BooleanField(_('active'), default=True, help_text=_("Designates whether this user should be treated as active. Unselect this instead of deleting accounts."))
    is_superuser = models.BooleanField(_('superuser status'), default=False, help_text=_("Designates that this user has all permissions without explicitly assigning them."))
    last_login = models.DateTimeField(_('last login'), default=datetime.datetime.now)
    date_joined = models.DateTimeField(_('date joined'), default=datetime.datetime.now)
    groups = models.ManyToManyField(Group, verbose_name=_('groups'), blank=True,
        help_text=_("In addition to the permissions manually assigned, this user will also get all permissions granted to each group he/she is in."))
    user_permissions = models.ManyToManyField(Permission, verbose_name=_('user permissions'), blank=True)
    objects = UserManager()

    class Meta:
        verbose_name = _('user')
        verbose_name_plural = _('users')

    def __unicode__(self):
        return self.username

    def get_absolute_url(self):
        return "/users/%s/" % urllib.quote(smart_str(self.username))

    def is_anonymous(self):
        "Always returns False. This is a way of comparing User objects to anonymous users."
        return False

    def is_authenticated(self):
        """Always return True. This is a way to tell if the user has been authenticated in templates.
        """
        return True

    def get_full_name(self):
        "Returns the first_name plus the last_name, with a space in between."
        full_name = u'%s %s' % (self.first_name, self.last_name)
        return full_name.strip()

    def set_password(self, raw_password):
        import random
        algo = 'sha1'
        salt = get_hexdigest(algo, str(random.random()), str(random.random()))[:5]
        hsh = get_hexdigest(algo, salt, raw_password)
        self.password = '%s$%s$%s' % (algo, salt, hsh)

    def check_password(self, raw_password):
        """
        Returns a boolean of whether the raw_password was correct. Handles
        encryption formats behind the scenes.
        """
        # Backwards-compatibility check. Older passwords won't include the
        # algorithm or salt.
        if '$' not in self.password:
            is_correct = (self.password == get_hexdigest('md5', '', raw_password))
            if is_correct:
                # Convert the password to the new, more secure format.
                self.set_password(raw_password)
                self.save()
            return is_correct
        return check_password(raw_password, self.password)

    def set_unusable_password(self):
        # Sets a value that will never be a valid hash
        self.password = UNUSABLE_PASSWORD

    def has_usable_password(self):
        return self.password != UNUSABLE_PASSWORD

    def get_group_permissions(self):
        """
        Returns a list of permission strings that this user has through
        his/her groups. This method queries all available auth backends.
        """
        permissions = set()
        for backend in auth.get_backends():
            if hasattr(backend, "get_group_permissions"):
                permissions.update(backend.get_group_permissions(self))
        return permissions

    def get_all_permissions(self):
        permissions = set()
        for backend in auth.get_backends():
            if hasattr(backend, "get_all_permissions"):
                permissions.update(backend.get_all_permissions(self))
        return permissions

    def has_perm(self, perm):
        """
        Returns True if the user has the specified permission. This method
        queries all available auth backends, but returns immediately if any
        backend returns True. Thus, a user who has permission from a single
        auth backend is assumed to have permission in general.
        """
        # Inactive users have no permissions.
        if not self.is_active:
            return False

        # Superusers have all permissions.
        if self.is_superuser:
            return True

        # Otherwise we need to check the backends.
        for backend in auth.get_backends():
            if hasattr(backend, "has_perm"):
                if backend.has_perm(self, perm):
                    return True
        return False

    def has_perms(self, perm_list):
        """Returns True if the user has each of the specified permissions."""
        for perm in perm_list:
            if not self.has_perm(perm):
                return False
        return True

    def has_module_perms(self, app_label):
        """
        Returns True if the user has any permissions in the given app
        label. Uses pretty much the same logic as has_perm, above.
        """
        if not self.is_active:
            return False

        if self.is_superuser:
            return True

        for backend in auth.get_backends():
            if hasattr(backend, "has_module_perms"):
                if backend.has_module_perms(self, app_label):
                    return True
        return False

    def get_and_delete_messages(self):
        messages = []
        for m in self.message_set.all():
            messages.append(m.message)
            m.delete()
        return messages

    def email_user(self, subject, message, from_email=None):
        "Sends an e-mail to this User."
        from django.core.mail import send_mail
        from django.conf import settings
        if from_email is None:
            from_email = settings.EMAIL_FROM
        send_mail(subject, message, from_email, [self.email])

    def get_profile(self):
        """
        Returns site-specific profile for this user. Raises
        SiteProfileNotAvailable if this site does not allow profiles.
        """
        if not hasattr(self, '_profile_cache'):
            from django.conf import settings
            if not getattr(settings, 'AUTH_PROFILE_MODULE', False):
                raise SiteProfileNotAvailable
            try:
                app_label, model_name = settings.AUTH_PROFILE_MODULE.split('.')
                model = models.get_model(app_label, model_name)
                self._profile_cache = model._default_manager.get(user__id__exact=self.id)
                self._profile_cache.user = self
            except (ImportError, ImproperlyConfigured):
                raise SiteProfileNotAvailable
        return self._profile_cache

class Message(models.Model):
    """
    The message system is a lightweight way to queue messages for given
    users. A message is associated with a User instance (so it is only
    applicable for registered users). There's no concept of expiration or
    timestamps. Messages are created by the Django admin after successful
    actions. For example, "The poll Foo was created successfully." is a
    message.
    """
    user = models.ForeignKey(User)
    message = models.TextField(_('message'))

    def __unicode__(self):
        return self.message

class AnonymousUser(object):
    id = None
    username = ''
    is_staff = False
    is_active = False
    is_superuser = False
    _groups = EmptyManager()
    _user_permissions = EmptyManager()

    def __init__(self):
        pass

    def __unicode__(self):
        return 'AnonymousUser'

    def __str__(self):
        return unicode(self).encode('utf-8')

    def __eq__(self, other):
        return isinstance(other, self.__class__)

    def __ne__(self, other):
        return not self.__eq__(other)

    def __hash__(self):
        return 1 # instances always return the same hash value

    def save(self):
        raise NotImplementedError

    def delete(self):
        raise NotImplementedError

    def set_password(self, raw_password):
        raise NotImplementedError

    def check_password(self, raw_password):
        raise NotImplementedError

    def _get_groups(self):
        return self._groups
    groups = property(_get_groups)

    def _get_user_permissions(self):
        return self._user_permissions
    user_permissions = property(_get_user_permissions)

    def has_perm(self, perm):
        return False

    def has_perms(self, perm_list):
        return False

    def has_module_perms(self, module):
        return False

    def get_and_delete_messages(self):
        return []

    def is_anonymous(self):
        return True

    def is_authenticated(self):
        return False


########NEW FILE########
__FILENAME__ = basic

BASIC_TESTS = """
>>> from auth.models import User, AnonymousUser
>>> u = User.objects.create_user('testuser', 'test@example.com', 'testpw')
>>> u.has_usable_password()
True
>>> u.check_password('bad')
False
>>> u.check_password('testpw')
True
>>> u.set_unusable_password()
>>> u.save()
>>> u.check_password('testpw')
False
>>> u.has_usable_password()
False
>>> u2 = User.objects.create_user('testuser2', 'test2@example.com')
>>> u2.has_usable_password()
False

>>> u.is_authenticated()
True
>>> u.is_staff
False
>>> u.is_active
True
>>> u.is_superuser
False

>>> a = AnonymousUser()
>>> a.is_authenticated()
False
>>> a.is_staff
False
>>> a.is_active
False
>>> a.is_superuser
False
>>> a.groups.all()
[]
>>> a.user_permissions.all()
[]

# superuser tests.
>>> super = User.objects.create_superuser('super', 'super@example.com', 'super')
>>> super.is_superuser
True
>>> super.is_active
True
>>> super.is_staff
True

#
# Tests for createsuperuser management command.
# It's nearly impossible to test the interactive mode -- a command test helper
# would be needed (and *awesome*) -- so just test the non-interactive mode.
# This covers most of the important validation, but not all.
#
>>> from django.core.management import call_command

>>> call_command("createsuperuser", interactive=False, username="joe", email="joe@somewhere.org")
Superuser created successfully.

>>> u = User.objects.get(username="joe")
>>> u.email
u'joe@somewhere.org'
>>> u.password
u'!'
"""

########NEW FILE########
__FILENAME__ = forms

FORM_TESTS = """
>>> from auth.models import User
>>> from auth.forms import UserCreationForm, AuthenticationForm
>>> from auth.forms import PasswordChangeForm, SetPasswordForm

# The user already exists.

>>> user = User.objects.create_user("jsmith", "jsmith@example.com", "test123")
>>> data = {
...     'username': 'jsmith',
...     'password1': 'test123',
...     'password2': 'test123',
... }
>>> form = UserCreationForm(data)
>>> form.is_valid()
False
>>> form["username"].errors
[u'A user with that username already exists.']

# The username contains invalid data.

>>> data = {
...     'username': 'jsmith@example.com',
...     'password1': 'test123',
...     'password2': 'test123',
... }
>>> form = UserCreationForm(data)
>>> form.is_valid()
False
>>> form["username"].errors
[u'This value must contain only letters, numbers and underscores.']

# The verification password is incorrect.

>>> data = {
...     'username': 'jsmith2',
...     'password1': 'test123',
...     'password2': 'test',
... }
>>> form = UserCreationForm(data)
>>> form.is_valid()
False
>>> form["password2"].errors
[u"The two password fields didn't match."]

# One (or both) passwords weren't given

>>> data = {'username': 'jsmith2'}
>>> form = UserCreationForm(data)
>>> form.is_valid()
False
>>> form['password1'].errors
[u'This field is required.']
>>> form['password2'].errors
[u'This field is required.']

>>> data['password2'] = 'test123'
>>> form = UserCreationForm(data)
>>> form.is_valid()
False
>>> form['password1'].errors
[u'This field is required.']

# The success case.

>>> data = {
...     'username': 'jsmith2',
...     'password1': 'test123',
...     'password2': 'test123',
... }
>>> form = UserCreationForm(data)
>>> form.is_valid()
True
>>> form.save()
<User: jsmith2>

# The user submits an invalid username.

>>> data = {
...     'username': 'jsmith_does_not_exist',
...     'password': 'test123',
... }

>>> form = AuthenticationForm(None, data)
>>> form.is_valid()
False
>>> form.non_field_errors()
[u'Please enter a correct username and password. Note that both fields are case-sensitive.']

# The user is inactive.

>>> data = {
...     'username': 'jsmith',
...     'password': 'test123',
... }
>>> user.is_active = False
>>> user.save()
>>> form = AuthenticationForm(None, data)
>>> form.is_valid()
False
>>> form.non_field_errors()
[u'This account is inactive.']

>>> user.is_active = True
>>> user.save()

# The success case

>>> form = AuthenticationForm(None, data)
>>> form.is_valid()
True
>>> form.non_field_errors()
[]

### SetPasswordForm:

# The two new passwords do not match.

>>> data = {
...     'new_password1': 'abc123',
...     'new_password2': 'abc',
... }
>>> form = SetPasswordForm(user, data)
>>> form.is_valid()
False
>>> form["new_password2"].errors
[u"The two password fields didn't match."]

# The success case.

>>> data = {
...     'new_password1': 'abc123',
...     'new_password2': 'abc123',
... }
>>> form = SetPasswordForm(user, data)
>>> form.is_valid()
True

### PasswordChangeForm:

The old password is incorrect.

>>> data = {
...     'old_password': 'test',
...     'new_password1': 'abc123',
...     'new_password2': 'abc123',
... }
>>> form = PasswordChangeForm(user, data)
>>> form.is_valid()
False
>>> form["old_password"].errors
[u'Your old password was entered incorrectly. Please enter it again.']

# The two new passwords do not match.

>>> data = {
...     'old_password': 'test123',
...     'new_password1': 'abc123',
...     'new_password2': 'abc',
... }
>>> form = PasswordChangeForm(user, data)
>>> form.is_valid()
False
>>> form["new_password2"].errors
[u"The two password fields didn't match."]

# The success case.

>>> data = {
...     'old_password': 'test123',
...     'new_password1': 'abc123',
...     'new_password2': 'abc123',
... }
>>> form = PasswordChangeForm(user, data)
>>> form.is_valid()
True

# Regression test - check the order of fields:

>>> PasswordChangeForm(user, {}).fields.keys()
['old_password', 'new_password1', 'new_password2']

### UserChangeForm

>>> from auth.forms import UserChangeForm
>>> data = {'username': 'not valid'}
>>> form = UserChangeForm(data, instance=user)
>>> form.is_valid()
False
>>> form['username'].errors
[u'This value must contain only letters, numbers and underscores.']


### PasswordResetForm

>>> from auth.forms import PasswordResetForm
>>> data = {'email':'not valid'}
>>> form = PasswordResetForm(data)
>>> form.is_valid()
False
>>> form['email'].errors
[u'Enter a valid e-mail address.']

# Test nonexistant email address
>>> data = {'email':'foo@bar.com'}
>>> form = PasswordResetForm(data)
>>> form.is_valid()
False
>>> form.errors
{'email': [u"That e-mail address doesn't have an associated user account. Are you sure you've registered?"]}

# Test cleaned_data bug fix
>>> user = User.objects.create_user("jsmith3", "jsmith3@example.com", "test123")
>>> data = {'email':'jsmith3@example.com'}
>>> form = PasswordResetForm(data)
>>> form.is_valid()
True
>>> form.cleaned_data['email']
u'jsmith3@example.com'

"""

########NEW FILE########
__FILENAME__ = tokens
TOKEN_GENERATOR_TESTS = """
>>> from auth.models import User, AnonymousUser
>>> from auth.tokens import PasswordResetTokenGenerator
>>> from django.conf import settings
>>> u = User.objects.create_user('tokentestuser', 'test2@example.com', 'testpw')
>>> p0 = PasswordResetTokenGenerator()
>>> tk1 = p0.make_token(u)
>>> p0.check_token(u, tk1)
True

>>> u = User.objects.create_user('comebackkid', 'test3@example.com', 'testpw')
>>> p0 = PasswordResetTokenGenerator()
>>> tk1 = p0.make_token(u)
>>> reload = User.objects.get(username='comebackkid')
>>> tk2 = p0.make_token(reload)
>>> tk1 == tk2
True

Tests to ensure we can use the token after n days, but no greater.
Use a mocked version of PasswordResetTokenGenerator so we can change
the value of 'today'

>>> class Mocked(PasswordResetTokenGenerator):
...     def __init__(self, today):
...         self._today_val = today
...     def _today(self):
...         return self._today_val

>>> from datetime import date, timedelta
>>> p1 = Mocked(date.today() + timedelta(settings.PASSWORD_RESET_TIMEOUT_DAYS))
>>> p1.check_token(u, tk1)
True
>>> p2 = Mocked(date.today() + timedelta(settings.PASSWORD_RESET_TIMEOUT_DAYS + 1))
>>> p2.check_token(u, tk1)
False

"""

########NEW FILE########
__FILENAME__ = urls
from django.conf.urls.defaults import patterns
from auth.urls import urlpatterns
from django.http import HttpResponse
from django.template import Template, RequestContext

def remote_user_auth_view(request):
    "Dummy view for remote user tests"
    t = Template("Username is {{ user }}.")
    c = RequestContext(request, {})
    return HttpResponse(t.render(c))

# special urls for auth test cases
urlpatterns += patterns('',
    (r'^logout/custom_query/$', 'auth.views.logout', dict(redirect_field_name='follow')),
    (r'^logout/next_page/$', 'auth.views.logout', dict(next_page='/somewhere/')),
    (r'^remote_user/$', remote_user_auth_view),
)


########NEW FILE########
__FILENAME__ = views
import os
import re

from django.conf import settings
from auth import SESSION_KEY
from auth.forms import AuthenticationForm
from django.contrib.sites.models import Site, RequestSite
from auth.models import User
from django.test import TestCase
from django.core import mail
from django.core.urlresolvers import reverse

class AuthViewsTestCase(TestCase):
    """
    Helper base class for all the follow test cases.
    """
    fixtures = ['authtestdata.json']
    #urls = 'auth.urls'

    def setUp(self):
        self.old_LANGUAGES = settings.LANGUAGES
        self.old_LANGUAGE_CODE = settings.LANGUAGE_CODE
        settings.LANGUAGES = (('en', 'English'),)
        settings.LANGUAGE_CODE = 'en'
        self.old_TEMPLATE_DIRS = settings.TEMPLATE_DIRS
        settings.TEMPLATE_DIRS = (
            os.path.join(
                os.path.dirname(__file__),
                'templates'
            )
        ,)

    def tearDown(self):
        settings.LANGUAGES = self.old_LANGUAGES
        settings.LANGUAGE_CODE = self.old_LANGUAGE_CODE
        settings.TEMPLATE_DIRS = self.old_TEMPLATE_DIRS

#class PasswordResetTest(AuthViewsTestCase):
#
#    def setUp(self):
#        self.old_LANGUAGES = settings.LANGUAGES
#        self.old_LANGUAGE_CODE = settings.LANGUAGE_CODE
#        settings.LANGUAGES = (('en', 'English'),)
#        settings.LANGUAGE_CODE = 'en'
#
#    def tearDown(self):
#        settings.LANGUAGES = self.old_LANGUAGES
#        settings.LANGUAGE_CODE = self.old_LANGUAGE_CODE
#
#    def test_email_not_found(self):
#        "Error is raised if the provided email address isn't currently registered"
#        response = self.client.get('/password_reset/')
#        self.assertEquals(response.status_code, 200)
#        response = self.client.post('/password_reset/', {'email': 'not_a_real_email@email.com'})
#        self.assertContains(response, "That e-mail address doesn&#39;t have an associated user account")
#        self.assertEquals(len(mail.outbox), 0)
#
#    def test_email_found(self):
#        "Email is sent if a valid email address is provided for password reset"
#        response = self.client.post('/password_reset/', {'email': 'staffmember@example.com'})
#        self.assertEquals(response.status_code, 302)
#        self.assertEquals(len(mail.outbox), 1)
#        self.assert_("http://" in mail.outbox[0].body)
#
#    def _test_confirm_start(self):
#        # Start by creating the email
#        response = self.client.post('/password_reset/', {'email': 'staffmember@example.com'})
#        self.assertEquals(response.status_code, 302)
#        self.assertEquals(len(mail.outbox), 1)
#        return self._read_signup_email(mail.outbox[0])
#
#    def _read_signup_email(self, email):
#        urlmatch = re.search(r"https?://[^/]*(/.*reset/\S*)", email.body)
#        self.assert_(urlmatch is not None, "No URL found in sent email")
#        return urlmatch.group(), urlmatch.groups()[0]
#
#    def test_confirm_valid(self):
#        url, path = self._test_confirm_start()
#        response = self.client.get(path)
#        # redirect to a 'complete' page:
#        self.assertEquals(response.status_code, 200)
#        self.assert_("Please enter your new password" in response.content)
#
#    def test_confirm_invalid(self):
#        url, path = self._test_confirm_start()
#        # Let's munge the token in the path, but keep the same length,
#        # in case the URLconf will reject a different length.
#        path = path[:-5] + ("0"*4) + path[-1]
#
#        response = self.client.get(path)
#        self.assertEquals(response.status_code, 200)
#        self.assert_("The password reset link was invalid" in response.content)
#
#    def test_confirm_invalid_post(self):
#        # Same as test_confirm_invalid, but trying
#        # to do a POST instead.
#        url, path = self._test_confirm_start()
#        path = path[:-5] + ("0"*4) + path[-1]
#
#        response = self.client.post(path, {'new_password1': 'anewpassword',
#                                           'new_password2':' anewpassword'})
#        # Check the password has not been changed
#        u = User.objects.get(email='staffmember@example.com')
#        self.assert_(not u.check_password("anewpassword"))
#
#    def test_confirm_complete(self):
#        url, path = self._test_confirm_start()
#        response = self.client.post(path, {'new_password1': 'anewpassword',
#                                           'new_password2': 'anewpassword'})
#        # It redirects us to a 'complete' page:
#        self.assertEquals(response.status_code, 302)
#        # Check the password has been changed
#        u = User.objects.get(email='staffmember@example.com')
#        self.assert_(u.check_password("anewpassword"))
#
#        # Check we can't use the link again
#        response = self.client.get(path)
#        self.assertEquals(response.status_code, 200)
#        self.assert_("The password reset link was invalid" in response.content)
#
#    def test_confirm_different_passwords(self):
#        url, path = self._test_confirm_start()
#        response = self.client.post(path, {'new_password1': 'anewpassword',
#                                           'new_password2':' x'})
#        self.assertEquals(response.status_code, 200)
#        self.assert_("The two password fields didn&#39;t match" in response.content)
#
#class ChangePasswordTest(AuthViewsTestCase):
#    fixtures = [
#        'greatcoins_market.json',
#        'greatcoins_subscriptions.json',
#        'greatcoins_auth.json',
#        'greatcoins_shops.json',
#        'greatcoins_preferences.json',
#        'greatcoins_themes.json'
#    ]
#    def login(self, password='password'):
#        response = self.client.post('/login/', {
#            'username': 'testclient',
#            'password': password
#            }
#        )
#        self.assertEquals(response.status_code, 302)
#        self.assert_(response['Location'].endswith(settings.LOGIN_REDIRECT_URL))
#
#    def fail_login(self, password='password'):
#        response = self.client.post('/login/', {
#            'username': 'testclient',
#            'password': password
#            }
#        )
#        self.assertEquals(response.status_code, 200)
#        self.assert_("Please enter a correct username and password. Note that both fields are case-sensitive." in response.content)
#
#    def logout(self):
#        response = self.client.get('/logout/')
#
#    def test_password_change_fails_with_invalid_old_password(self):
#        self.login()
#        response = self.client.post('/password_change/', {
#            'old_password': 'donuts',
#            'new_password1': 'password1',
#            'new_password2': 'password1',
#            }
#        )
#        self.assertEquals(response.status_code, 200)
#        self.assert_("Your old password was entered incorrectly. Please enter it again." in response.content)
#
#    def test_password_change_fails_with_mismatched_passwords(self):
#        self.login()
#        response = self.client.post('/password_change/', {
#            'old_password': 'password',
#            'new_password1': 'password1',
#            'new_password2': 'donuts',
#            }
#        )
#        self.assertEquals(response.status_code, 200)
#        self.assert_("The two password fields didn&#39;t match." in response.content)
#
#    def test_password_change_succeeds(self):
#        self.login()
#        response = self.client.post('/password_change/', {
#            'old_password': 'password',
#            'new_password1': 'password1',
#            'new_password2': 'password1',
#            }
#        )
#        self.assertEquals(response.status_code, 302)
#        self.assert_(response['Location'].endswith('/password_change/done/'))
#        self.fail_login()
#        self.login(password='password1')
#
#class LoginTest(AuthViewsTestCase):
#
#    def test_current_site_in_context_after_login(self):
#        response = self.client.get(reverse('auth.views.login'))
#        self.assertEquals(response.status_code, 200)
#        site = Site.objects.get_current()
#        self.assertEquals(response.context['site'], site)
#        self.assertEquals(response.context['site_name'], site.name)
#        self.assert_(isinstance(response.context['form'], AuthenticationForm), 
#                     'Login form is not an AuthenticationForm')
#        
#class LogoutTest(AuthViewsTestCase):
#    urls = 'auth.tests.urls'
#
#    def login(self, password='password'):
#        response = self.client.post('/login/', {
#            'username': 'testclient',
#            'password': password
#            }
#        )
#        self.assertEquals(response.status_code, 302)
#        self.assert_(response['Location'].endswith(settings.LOGIN_REDIRECT_URL))
#        self.assert_(SESSION_KEY in self.client.session)
#
#    def confirm_logged_out(self):
#        self.assert_(SESSION_KEY not in self.client.session)
#
#    def test_logout_default(self):
#        "Logout without next_page option renders the default template"
#        self.login()
#        response = self.client.get('/logout/')
#        self.assertEquals(200, response.status_code)
#        self.assert_('Logged out' in response.content)
#        self.confirm_logged_out()
#
#    def test_logout_with_next_page_specified(self): 
#        "Logout with next_page option given redirects to specified resource"
#        self.login()
#        response = self.client.get('/logout/next_page/')
#        self.assertEqual(response.status_code, 302)
#        self.assert_(response['Location'].endswith('/somewhere/'))
#        self.confirm_logged_out()
#
#    def test_logout_with_redirect_argument(self):
#        "Logout with query string redirects to specified resource"
#        self.login()
#        response = self.client.get('/logout/?next=/login/')
#        self.assertEqual(response.status_code, 302)
#        self.assert_(response['Location'].endswith('/login/'))
#        self.confirm_logged_out()
#
#    def test_logout_with_custom_redirect_argument(self):
#        "Logout with custom query string redirects to specified resource"
#        self.login()
#        response = self.client.get('/logout/custom_query/?follow=/somewhere/')
#        self.assertEqual(response.status_code, 302)
#        self.assert_(response['Location'].endswith('/somewhere/'))
#        self.confirm_logged_out()

########NEW FILE########
__FILENAME__ = tokens
from datetime import date
from django.conf import settings
from django.utils.http import int_to_base36, base36_to_int

class PasswordResetTokenGenerator(object):
    """
    Strategy object used to generate and check tokens for the password
    reset mechanism.
    """
    def make_token(self, user):
        """
        Returns a token that can be used once to do a password reset
        for the given user.
        """
        return self._make_token_with_timestamp(user, self._num_days(self._today()))

    def check_token(self, user, token):
        """
        Check that a password reset token is correct for a given user.
        """
        # Parse the token
        try:
            ts_b36, hash = token.split("-")
        except ValueError:
            return False

        try:
            ts = base36_to_int(ts_b36)
        except ValueError:
            return False

        # Check that the timestamp/uid has not been tampered with
        if self._make_token_with_timestamp(user, ts) != token:
            return False

        # Check the timestamp is within limit
        if (self._num_days(self._today()) - ts) > settings.PASSWORD_RESET_TIMEOUT_DAYS:
            return False

        return True

    def _make_token_with_timestamp(self, user, timestamp):
        # timestamp is number of days since 2001-1-1.  Converted to
        # base 36, this gives us a 3 digit string until about 2121
        ts_b36 = int_to_base36(timestamp)

        # By hashing on the internal state of the user and using state
        # that is sure to change (the password salt will change as soon as
        # the password is set, at least for current Django auth, and
        # last_login will also change), we produce a hash that will be
        # invalid as soon as it is used.
        # We limit the hash to 20 chars to keep URL short
        from django.utils.hashcompat import sha_constructor
        hash = sha_constructor(settings.SECRET_KEY + unicode(user.id) +
                               user.password + user.last_login.strftime('%Y-%m-%d %H:%M:%S') +
                               unicode(timestamp)).hexdigest()[::2]
        return "%s-%s" % (ts_b36, hash)

    def _num_days(self, dt):
        return (dt - date(2001,1,1)).days

    def _today(self):
        # Used for mocking in tests
        return date.today()

default_token_generator = PasswordResetTokenGenerator()

########NEW FILE########
__FILENAME__ = urls
# These URLs are normally mapped to /admin/urls.py. This URLs file is 
# provided as a convenience to those who want to deploy these URLs elsewhere.
# This file is also used to provide a reliable view deployment for test purposes.

from django.conf.urls.defaults import *

urlpatterns = patterns('',
#    (r'^login/$', 'django.contrib.auth.views.login'),
#    (r'^logout/$', 'django.contrib.auth.views.logout'),
#    (r'^password_change/$', 'django.contrib.auth.views.password_change'),
#    (r'^password_change/done/$', 'django.contrib.auth.views.password_change_done'),
#    (r'^password_reset/$', 'django.contrib.auth.views.password_reset'),
#    (r'^password_reset/done/$', 'django.contrib.auth.views.password_reset_done'),
#    (r'^reset/(?P<uidb36>[0-9A-Za-z]+)-(?P<token>.+)/$', 'django.contrib.auth.views.password_reset_confirm'),
#    (r'^reset/done/$', 'django.contrib.auth.views.password_reset_complete'),
    (r'^login/$', 'auth.views.login'),
    (r'^logout/$', 'auth.views.logout'),
    (r'^password_change/$', 'auth.views.password_change'),
    (r'^password_change/done/$', 'auth.views.password_change_done'),
    (r'^password_reset/$', 'auth.views.password_reset'),
    (r'^password_reset/done/$', 'auth.views.password_reset_done'),
    (r'^reset/(?P<uidb36>[0-9A-Za-z]+)-(?P<token>.+)/$', 'auth.views.password_reset_confirm'),
    (r'^reset/done/$', 'auth.views.password_reset_complete'),
)


########NEW FILE########
__FILENAME__ = views
from django.conf import settings
from auth import REDIRECT_FIELD_NAME
from decorators import login_required
from forms import AuthenticationForm
from forms import PasswordResetForm, SetPasswordForm, PasswordChangeForm
from tokens import default_token_generator

from django.core.urlresolvers import reverse
from django.shortcuts import render_to_response, get_object_or_404
from django.contrib.sites.models import Site, RequestSite
from django.http import HttpResponseRedirect, Http404, HttpResponse
from django.template import RequestContext
from django.utils.http import urlquote, base36_to_int
from django.utils.translation import ugettext as _
#from django.contrib.auth.models import User
from models import User
from django.views.decorators.cache import never_cache

def login(request, template_name='registration/login.html', redirect_field_name=REDIRECT_FIELD_NAME):
    "Displays the login form and handles the login action."
    redirect_to = request.REQUEST.get(redirect_field_name, '')
    if request.method == "POST":
        form = AuthenticationForm(request=request, data=request.POST)
        if form.is_valid():
            # Light security check -- make sure redirect_to isn't garbage.
            if not redirect_to or '//' in redirect_to or ' ' in redirect_to:
                redirect_to = settings.LOGIN_REDIRECT_URL
            #from django.contrib.auth import login
            from auth import login
            login(request, form.get_user())
            if request.session.test_cookie_worked():
                request.session.delete_test_cookie()
            return HttpResponseRedirect(redirect_to)
    else:
        form = AuthenticationForm(request)
    request.session.set_test_cookie()
    if Site._meta.installed:
        current_site = Site.objects.get_current()
    else:
        current_site = RequestSite(request)
    
    from django.template import loader    
    from bidding.views import my_render
     
    t = loader.get_template(template_name)
    c = RequestContext(request, {
                                'form': form, redirect_field_name: redirect_to,
                                'site': current_site,
                                'site_name': current_site.name,
                                 })
    block_login = (t.render(c))
    return HttpResponse(my_render(request, {'form_login': block_login,
                                            'page_title': 'Login',
                                            'page_description': 'Login' 
                                           }, 'login'))        
        
#    return render_to_response(template_name, {
#        'form': form,
#        redirect_field_name: redirect_to,
#        'site': current_site,
#        'site_name': current_site.name,
#    }, context_instance=RequestContext(request))
login = never_cache(login)

def logout(request, next_page=None, template_name='registration/logged_out.html', redirect_field_name=REDIRECT_FIELD_NAME):
    "Logs out the user and displays 'You are logged out' message."
    #from django.contrib.auth import logout
    from auth import logout
    logout(request)
    return HttpResponseRedirect("/")
    if next_page is None:
        redirect_to = request.REQUEST.get(redirect_field_name, '')
        if redirect_to:
            return HttpResponseRedirect(redirect_to)
        else:
            return render_to_response(template_name, {
                'title': _('Logged out')
            }, context_instance=RequestContext(request))
    else:
        # Redirect to this page until the session has been cleared.
        return HttpResponseRedirect(next_page or request.path)

def logout_then_login(request, login_url=None):
    "Logs out the user if he is logged in. Then redirects to the log-in page."
    if not login_url:
        login_url = settings.LOGIN_URL
    return logout(request, login_url)

def redirect_to_login(next, login_url=None, redirect_field_name=REDIRECT_FIELD_NAME):
    "Redirects the user to the login page, passing the given 'next' page"
    if not login_url:
        login_url = settings.LOGIN_URL
    return HttpResponseRedirect('%s?%s=%s' % (login_url, urlquote(redirect_field_name), urlquote(next)))

# 4 views for password reset:
# - password_reset sends the mail
# - password_reset_done shows a success message for the above
# - password_reset_confirm checks the link the user clicked and 
#   prompts for a new password
# - password_reset_complete shows a success message for the above

def password_reset(request, is_admin_site=False, template_name='registration/password_reset_form.html',
        email_template_name='registration/password_reset_email.html',
        password_reset_form=PasswordResetForm, token_generator=default_token_generator,
        post_reset_redirect=None):
    if post_reset_redirect is None:
        #post_reset_redirect = reverse('django.contrib.auth.views.password_reset_done')
        post_reset_redirect = reverse('auth.views.password_reset_done')
    if request.method == "POST":
        form = password_reset_form(request.POST)
        if form.is_valid():
            opts = {}
            opts['use_https'] = request.is_secure()
            opts['token_generator'] = token_generator
            if is_admin_site:
                opts['domain_override'] = request.META['HTTP_HOST']
            else:
                opts['email_template_name'] = email_template_name
                if not Site._meta.installed:
                    opts['domain_override'] = RequestSite(request).domain
            form.save(**opts)
            return HttpResponseRedirect(post_reset_redirect)
    else:
        form = password_reset_form()
    return render_to_response(template_name, {
        'form': form,
    }, context_instance=RequestContext(request))

def password_reset_done(request, template_name='registration/password_reset_done.html'):
    return render_to_response(template_name, context_instance=RequestContext(request))

def password_reset_confirm(request, uidb36=None, token=None, template_name='registration/password_reset_confirm.html',
                           token_generator=default_token_generator, set_password_form=SetPasswordForm,
                           post_reset_redirect=None):
    """
    View that checks the hash in a password reset link and presents a
    form for entering a new password.
    """
    assert uidb36 is not None and token is not None # checked by URLconf
    if post_reset_redirect is None:
        #post_reset_redirect = reverse('django.contrib.auth.views.password_reset_complete')
        post_reset_redirect = reverse('auth.views.password_reset_complete')
    try:
        uid_int = base36_to_int(uidb36)
    except ValueError:
        raise Http404

    user = get_object_or_404(User, id=uid_int)
    context_instance = RequestContext(request)

    if token_generator.check_token(user, token):
        context_instance['validlink'] = True
        if request.method == 'POST':
            form = set_password_form(user, request.POST)
            if form.is_valid():
                form.save()
                return HttpResponseRedirect(post_reset_redirect)
        else:
            form = set_password_form(None)
    else:
        context_instance['validlink'] = False
        form = None
    context_instance['form'] = form    
    return render_to_response(template_name, context_instance=context_instance)

def password_reset_complete(request, template_name='registration/password_reset_complete.html'):
    return render_to_response(template_name, context_instance=RequestContext(request,
                                                                             {'login_url': settings.LOGIN_URL}))

def password_change(request, template_name='registration/password_change_form.html',
                    post_change_redirect=None):
    if post_change_redirect is None:
        #post_change_redirect = reverse('django.contrib.auth.views.password_change_done')
        post_change_redirect = reverse('auth.views.password_change_done')
    if request.method == "POST":
        form = PasswordChangeForm(request.user, request.POST)
        if form.is_valid():
            form.save()
            return HttpResponseRedirect(post_change_redirect)
    else:
        form = PasswordChangeForm(request.user)
    return render_to_response(template_name, {
        'form': form,
    }, context_instance=RequestContext(request))
password_change = login_required(password_change)

def password_change_done(request, template_name='registration/password_change_done.html'):
    return render_to_response(template_name, context_instance=RequestContext(request))



########NEW FILE########
__FILENAME__ = context_processors
# -*- coding: utf-8 -*-
from bidding.forms import BiddingSearchForm


def search(request):
    """
    This context processor provides a search form
    available in every shop page
    """
    
    if request.GET.get('q'):
        form = BiddingSearchForm(request.GET)
    else:
        form = BiddingSearchForm()

    return {"search_form": form}

########NEW FILE########
__FILENAME__ = forms
# -*- coding: utf-8 -*-
import logging
from django import forms
from django.utils.text import capfirst
from django.utils.translation import ugettext_lazy as _

from haystack.forms import SearchForm
from haystack.query import SearchQuerySet

from for_sale.models import Item
from lots.models import Lot

class BidForm(forms.Form):
    amount = forms.DecimalField(required=True)

    def __init__(self, lot=None, *args, **kwargs):
        self.lot = lot
        super(BidForm, self).__init__(*args, **kwargs)

    def clean_amount(self):
        amount = self.cleaned_data['amount']
        if amount < self.lot.next_bid_from():
            raise forms.ValidationError(_("Enter US $%s or more" % str(self.lot.next_bid_from())))
        return amount


class BiddingSearchForm(SearchForm):
    """
    Bidding search form made easy for using at views
    """
    
    # redefine q field so label is empty and it has an initial value :P
    q = forms.CharField(required=False, label="", initial=_("search..."))

    MODEL_LIST = [("%s.%s" % (model._meta.app_label, model._meta.module_name)) 
        for model in (Lot, Item)] 

    def __init__(self, shop=None, *args, **kwargs):
        super(BiddingSearchForm, self).__init__(*args, **kwargs)
        self.shop = shop

    def get_query(self):
        return self.cleaned_data["q"]

    def search(self):
        from inventory.models import Product

        sqs = SearchQuerySet().models(Product).load_all()
        sqs = sqs.filter(shop_id=self.shop.id)
        
        if self.get_query():
            sqs = sqs.filter(summary=self.get_query())
        
        return sqs
        
    def all_results(self):
        from inventory.models import Product
        
        sqs = SearchQuerySet().load_all().models(Product)
        sqs = sqs.filter(shop_id=self.shop.id)
        
        return sqs
        
        
        
########NEW FILE########
__FILENAME__ = models

########NEW FILE########
__FILENAME__ = tests
"""
This file demonstrates two different styles of tests (one doctest and one
unittest). These will both pass when you run "manage.py test".

Replace these with more appropriate tests for your application.
"""
import datetime
import decimal
import cron
import logging
import time

from django.test import TestCase
from django.core.urlresolvers import reverse
from django.contrib.auth.models import User

from auctions.models import AuctionSession
from blog_pages.models import Home, About, Post, Page
from for_sale.models import Item
from lots.models import Lot, BidderIncrementCalculator
from market.models import MarketCategory, MarketSubCategory
from shops.models import Shop
from sell.models import Cart




class BiddingTest(TestCase):
    fixtures = [
        'greatcoins_market.json', 
        'greatcoins_subscriptions.json', 
        'greatcoins_auth.json', 
        'greatcoins_shops.json',
        'greatcoins_preferences.json',
        'greatcoins_themes.json'
    ]
    
    
    def setUp(self):
        
        shop = Shop.objects.all()[0]
        about = About(shop=shop)
        about.save()
        
        home = Home(shop=shop)
        home.save()
        
        self.shop = shop
        self.HTTP_HOST = self.shop.default_dns     
        
    def test_bidding_place_bid(self):
        """
        """
        context = decimal.Context(prec=20, rounding=decimal.ROUND_HALF_DOWN)
        decimal.setcontext(context)
    
        
        category = MarketCategory.objects.all()[0]
        
        now = datetime.datetime.now()
        tomorrow = now + datetime.timedelta(days=1)
        
        # Creates an auction
        auction = AuctionSession(shop=self.shop, title="Auction Session Nr 0", description="-- no desc --", start=now, end=tomorrow)
        auction.save()
        
        # Creates a lot 
        lot = Lot(shop = self.shop,
                  title = "Coin From Egypt 1905 (PCGS 60)",
                  description = "rare coin",
                  category = category,
                  date_time = now,
                  weight = "5",
                  session=auction, 
                  starting_bid=decimal.Decimal("10.00"), 
                  reserve=decimal.Decimal("0.00"))
        lot.save()
        
        # Ttry to login
        success = self.client.login(username='test', password='test')
        self.assertEqual(success, True, "login failed")
        
        response = self.client.get(reverse("bidding_view_lot", args=[lot.id]), HTTP_HOST=self.HTTP_HOST)
        self.assertEqual(response.status_code, 200, "Failed when trying to view lot")
        
        # Check than when is created there is no any bid
        lot = Lot.objects.get(id=lot.id)
        self.assertEqual(lot.bid_actual, None)
        
        # Testing bid increment table
        increment_calculator = BidderIncrementCalculator()
        #from    0.01    to    0.99   --> 0.05
        #from    1.00    to    4.99   --> 0.25
        #from    5.00    to    24.99   --> 0.50
        #from    25.00   to    99.99   --> 1.00
        #from    100.00  to    249.99  --> 2.50
        #from    250.00  to    499.99  --> 5.00
        #from    500.00  to    999.99  --> 10.00
        #from    1000.00 to    2499.99 --> 25.00
        #from    2500.00 to    4999.99 --> 50.00
        #from    5000.00 to    99999.99--> 100.00
        
        for i in range(30):
            lot = Lot.objects.get(id=lot.id)
            if lot.bid_actual:
                logging.info("Current Bid: %s" % (lot.bid_actual.bid_amount))
                
            else:
                logging.info("Starting Bid: %s" % (lot.starting_bid))
                
            min_bid = lot.next_bid_from()
            (from_price, to_price, inc) = increment_calculator.match_for(min_bid)
            logging.info("From: %s To: %s Bid must be grater than %s (increment to be applied %s)" % (from_price, to_price, min_bid, inc))
            
            logging.info("Minimum Bid allowed: %s" % min_bid)
            
            # Should not be allowed to bid
            wrong_bid = min_bid - (min_bid * decimal.Decimal(("0.1")))
            logging.info("Testing Invalid Bidding Price: %s" % wrong_bid)
            response = self.client.get(reverse("bidding_view_lot", args=[lot.id]), {'amount': wrong_bid}, HTTP_HOST=self.HTTP_HOST)
            self.assertEqual(response.status_code, 200, "Failed: This bid shouldn't be valid!!")
            
            # Should be allowed to bid
            string_format = '%.2f' % (min_bid + (min_bid * decimal.Decimal(("0.5"))))
            valid_bid = decimal.Decimal((string_format))
            logging.info("Testing Valid Bidding Price: %s" % valid_bid)       
            response = self.client.get(reverse("bidding_view_lot", args=[lot.id]), {'amount': valid_bid}, HTTP_HOST=self.HTTP_HOST)
            self.assertEqual(response.status_code, 302, "Failed when trying to bid a valid amount %s. This value should be allowed..." % valid_bid)
            
            # Check that last bid is the the currently lot.bid_actual
            logging.info("Testing Correct Lot.bid_actual: %s" % valid_bid) 
            lot = Lot.objects.get(id=lot.id)
            self.assertEqual(lot.bid_actual.bid_amount, valid_bid, "Failed: The bid actual is wrong, is %s but should be %s" % (lot.bid_actual.bid_amount, valid_bid))
            
    def test_lot_sold(self):
        """
        """       
        
        context = decimal.Context(prec=20, rounding=decimal.ROUND_HALF_DOWN)
        decimal.setcontext(context)
    
        category = MarketCategory.objects.all()[0]
        
        now = datetime.datetime.now()
        now_plus_10 = now + datetime.timedelta(seconds=5)
        
        auction = AuctionSession(shop=self.shop, title="Auction Session Nr 1", description="-- no desc --", start=now, end=now_plus_10)
        auction.save()
        
        lot = Lot(shop = self.shop,
                  title = "Coin From Rusia 1901 (PCGS 60)",
                  description = "rare coin",
                  category = category,
                  date_time = now,
                  weight = "5",
                  session=auction, 
                  starting_bid=decimal.Decimal("10.00"), 
                  reserve=decimal.Decimal("0.00"))
        lot.save()
        
        success = self.client.login(username='test', password='test')
        self.assertEqual(success, True, "login failed")
        
        bidder = User.objects.filter(username="test").get()
        cart = Cart(shop=self.shop, bidder=bidder)
        cart.save()
        
        #Check that lot is still active...
        self.assertEqual(lot.is_active(), True , "Failed: The lot should be active!")
        self.assertEqual(lot.bidhistory_set.all().count(), 0 , "Failed: The lot should not have any bid yet!")
        
        my_bid = decimal.Decimal("19.00")
        response = self.client.get(reverse("bidding_view_lot", args=[lot.id]), {'amount': my_bid}, HTTP_HOST=self.HTTP_HOST)
        self.assertEqual(response.status_code, 302, "Failed when trying to bid a valid amount $19.00. This value should be allowed...")    
        
        lot = Lot.objects.get(id=lot.id)
        
        self.assertNotEqual(lot.bidhistory_set.all().count(), 0 , "Failed: The lot should have at least one bid!")
        logging.info("waiting to auction session finish...")
        
        while not lot.session.finished():
            time.sleep(1)
            
        logging.info("Running cron...")
        cron.minute_update()
        
        lot = Lot.objects.get(id=lot.id)

        self.assertEqual(lot.reserve_has_been_met(), True , "Failed, reserved has not been met!")
        self.assertEqual(lot.bid_actual.bid_amount, my_bid , "Failed: The bid actual is wrong, is %s but should be %s" % (lot.bid_actual.bid_amount, my_bid))
        self.assertEqual(lot.bid_actual.bidder.username, "test" , "Failed, wrong bidder won!")
        self.assertEqual(lot.is_active(), False, "Failed: The lot state is wrong, should be SOLD but it is %s" % lot.state)
        self.assertEqual(lot.is_didnt_sell(), False, "Failed: The lot state is wrong, should be SOLD but it is %s" % lot.state)
        self.assertEqual(lot.is_sold(), True, "Failed: The lot state is wrong, should be SOLD but it is %s" % lot.state)

    def test_lot_didnt_sell(self):
        """
        Check that a lot get state DIDN'T SELL when there no bidding...
        """       
        
        context = decimal.Context(prec=20, rounding=decimal.ROUND_HALF_DOWN)
        decimal.setcontext(context)
    
        category = MarketCategory.objects.all()[0]
        
        now = datetime.datetime.now()
        now_plus_10 = now + datetime.timedelta(seconds=5)
        
        auction = AuctionSession(shop=self.shop, title="Auction Session Nr 2", description="-- no desc --", start=now, end=now_plus_10)
        auction.save()
        
        lot = Lot(shop = self.shop,
                  title = "Coin From Argentina 1890 (PCGS 60)",
                  description = "rare coin",
                  category = category,
                  date_time = now,
                  weight = "5",
                  session=auction, 
                  starting_bid=decimal.Decimal("100.00"), 
                  reserve=decimal.Decimal("0.00"))
        lot.save()
        
        success = self.client.login(username='test', password='test')
        self.assertEqual(success, True, "login failed")
        
        #Check that lot is still active...
        self.assertEqual(lot.is_active(), True , "Failed: The lot should be active!")
        self.assertEqual(lot.bidhistory_set.all().count(), 0 , "Failed: The lot should not have any bid yet!")
        
        my_bid = decimal.Decimal("90.00")
        response = self.client.get(reverse("bidding_view_lot", args=[lot.id]), {'amount': my_bid}, HTTP_HOST=self.HTTP_HOST)
        self.assertEqual(response.status_code, 200, "Failed: this bid is not valid...")    
        
        self.assertEqual(lot.bidhistory_set.all().count(), 0 , "Failed: The lot should not have any bid yet!")
        
        logging.info("waiting to auction session finish...")
        
        while not lot.session.finished():
            time.sleep(1)
        
        logging.info("Running cron...")
        cron.minute_update()
        
        lot = Lot.objects.get(id=lot.id)

        self.assertEqual(lot.reserve_has_been_met(), False , "Failed, the reserved price should not be reached!")
        self.assertEqual(lot.bid_actual, None , "Failed: There were no bids! ")
        self.assertEqual(lot.is_active(), False, "Failed: The lot could not be active, the lot finished and there were no bids!")
        self.assertEqual(lot.is_sold(), False, "Failed: The lot could not be sold, there were no bids!")
        self.assertEqual(lot.is_didnt_sell(), True, "Failed: The lot wasn't sell!")
    
    def test_lot_didnt_sell2(self):
        """
        Check that a lot get state DIDN'T SELL when there are no biddings that reach the reserve price
        """       
        context = decimal.Context(prec=20, rounding=decimal.ROUND_HALF_DOWN)
        decimal.setcontext(context)
        
        category = MarketCategory.objects.all()[0]
        
        now = datetime.datetime.now()
        now_plus_10 = now + datetime.timedelta(seconds=5)
        
        auction = AuctionSession(shop=self.shop, title="Auction Session Nr 3", description="-- no desc --", start=now, end=now_plus_10)
        auction.save()
        
        lot = Lot(shop=self.shop,
                  title = "Coin From Brasil 1900 (PCGS 60)",
                  description = "rare coin",
                  category = category,
                  date_time = now,
                  weight="5",
                  session=auction, 
                  starting_bid=decimal.Decimal("100.00"), 
                  reserve=decimal.Decimal("300.00"))
        lot.save()
        
        success = self.client.login(username='test', password='test')
        self.assertEqual(success, True, "login failed")
        
        #Check that lot is still active...
        self.assertEqual(lot.is_active(), True , "Failed: The lot should be active!")
        self.assertEqual(lot.bidhistory_set.all().count(), 0 , "Failed: The lot should not have any bid yet!")
        
        #1) Trying To BID wrong
        my_bid = decimal.Decimal("90.00")
        response = self.client.get(reverse("bidding_view_lot", args=[lot.id]), {'amount': my_bid}, HTTP_HOST=self.HTTP_HOST)
        self.assertEqual(response.status_code, 200, "Failed: this bid is not valid...")    
        self.assertEqual(lot.bidhistory_set.all().count(), 0 , "Failed: The lot should not have any bid yet!")
        
        #2) First valid bid, but don't reach the reserve price
        my_bid = decimal.Decimal("120.00")
        response = self.client.get(reverse("bidding_view_lot", args=[lot.id]), {'amount': my_bid}, HTTP_HOST=self.HTTP_HOST)
        self.assertEqual(response.status_code, 302, "Failed when trying to bid a valid amount %s. This value should be allowed..." % my_bid)    
        
        lot = Lot.objects.get(id=lot.id)
        self.assertEqual(lot.bidhistory_set.all().count(), 1 , "Failed: The lot should have 1 bid!")
        
        #3) Second valid bid, but neither reach the reserve price
        my_bid = decimal.Decimal("290.00")
        response = self.client.get(reverse("bidding_view_lot", args=[lot.id]), {'amount': my_bid}, HTTP_HOST=self.HTTP_HOST)
        self.assertEqual(response.status_code, 302, "Failed when trying to bid a valid amount %s. This value should be allowed..." % my_bid)    
        
        lot = Lot.objects.get(id=lot.id)
        self.assertEqual(lot.bidhistory_set.all().count(), 2 , "Failed: The lot should have 2 bids!")
        
        logging.info("waiting to auction session finish...")
        while not lot.session.finished():
            time.sleep(1)
            
        logging.info("Running cron...")
        cron.minute_update()
        
        lot = Lot.objects.get(id=lot.id)

        self.assertEqual(lot.reserve_has_been_met(), False , "Failed, the reserved price should not be reached!")
        self.assertEqual(lot.bid_actual.bid_amount, my_bid, "Failed: The bid actual is wrong, is %s but should be %s" % (lot.bid_actual.bid_amount, my_bid))
        self.assertEqual(lot.bid_actual.bidder.username, "test" , "Failed, wrong bidder won!")
        self.assertEqual(lot.is_sold(), False, "Failed: The lot state is wrong, should be DIDN'T SELL but it is %s" % lot.state)
        self.assertEqual(lot.is_didnt_sell(), True, "Failed: The lot state is wrong, should be DIDN'T SELL but it is %s" % lot.state)
        
    def test_lot_still_active(self):
        """
        Check that nothing happend to those lots that aren't finished yet when cron is executed
        """ 
        context = decimal.Context(prec=20, rounding=decimal.ROUND_HALF_DOWN)
        decimal.setcontext(context)
    
        category = MarketCategory.objects.all()[0]
        
        now = datetime.datetime.now()
        now_plus_10 = now + datetime.timedelta(seconds=5)
        
        auction = AuctionSession(shop=self.shop, title="Auction Session Nr 4", description="-- no desc --", start=now, end=now_plus_10)
        auction.save()
        
        lot = Lot(shop=self.shop,
                  title="Coin From USA 1905 (PCGS 50)",
                  description="rare coin",
                  category=category,
                  date_time=now,
                  weight="5",
                  session=auction, 
                  starting_bid=decimal.Decimal("100.00"), 
                  reserve=decimal.Decimal("300.00"))
        lot.save()
        
        success = self.client.login(username='test', password='test')
        self.assertEqual(success, True, "login failed")
        
        my_bid = decimal.Decimal("120.00")
        response = self.client.get(reverse("bidding_view_lot", args=[lot.id]), {'amount': my_bid}, HTTP_HOST=self.HTTP_HOST)
        self.assertEqual(response.status_code, 302, "Failed when trying to bid a valid amount %s. This value should be allowed..." % my_bid)    
        
        lot = Lot.objects.get(id=lot.id)
        self.assertEqual(lot.bidhistory_set.all().count(), 1 , "Failed: The lot should not have any bid yet!")
        
        logging.info("don't wait for auction session to finish...")

        #Check that lot is still active...
        lot = Lot.objects.get(id=lot.id)
        self.assertEqual(lot.is_active(), True , "Failed: The lot should be active!")

        logging.info("Running cron...")
        
        cron.minute_update()
        
        lot = Lot.objects.get(id=lot.id)

        self.assertEqual(lot.is_active(), True , "Failed: The lot should be active!")
        self.assertEqual(lot.bid_actual.bid_amount, my_bid, "Failed: The bid actual is wrong, is %s but should be %s" % (lot.bid_actual.bid_amount, my_bid))
        self.assertEqual(lot.bid_actual.bidder.username, "test" , "Failed, wrong bidder won!")
        self.assertEqual(lot.is_sold(), False, "Failed: The lot state is wrong, should be ACTIVE but it is %s" % lot.state)
    
    def test_bidding_home(self):
        
        category = MarketCategory.objects.all()[0]
        subcategory = MarketSubCategory.objects.all()[0]

        now = datetime.datetime.now()
        now_plus_10 = now + datetime.timedelta(seconds=5)
        
        auction = AuctionSession(shop=self.shop, title="Auction Session Nr 4", 
                                 description="-- no desc --", 
                                 start=now, 
                                 end=now_plus_10)
        auction.save()
        
        lot = Lot(shop=self.shop,
                  title="Coin From USA 1905 (PCGS 50)",
                  description="rare coin",
                  category=category,
                  date_time=now,
                  weight="5",
                  session=auction, 
                  starting_bid=decimal.Decimal("100.00"), 
                  reserve=decimal.Decimal("300.00"))
        lot.save()
        
        item = Item(shop=self.shop, title="Item", description="an item", 
                    price="10.0", 
                    category=category, 
                    subcategory=subcategory, 
                    qty=2, weight="2.0")
        item.save() 
        
        response = self.client.post(reverse("bidding_home"), {'email': "some@email.com"}, HTTP_HOST=self.HTTP_HOST)
        self.assertEqual(response.status_code, 302)
            
#            param = {
#             'about': about,
#             'home': 
#                {
#                 'title': home.title, 
#                 'body': home.body, 
#                 'image': home.image
#                 },
#             'last_post': last_post,
#             'mailing_list': block_mailing_list,
#             'new_items': new_items,
#             'page_title': 'Home',
#             'page_description': striptags(home.body),
#             'sessions': new_sessions,
#            }
            
        response = self.client.get(reverse("bidding_home"), HTTP_HOST=self.HTTP_HOST)
        self.assertEqual(response.status_code, 200)
        
        
        #i don't know why context don't have this values, check it later
#        self.assertEqual(len(response.context['new_items']), 1)
#        self.assertEqual(len(response.context['sessions']), 1)
#        self.assertEqual(len(response.context['last_post']), 1)
#        self.assertEqual(response.context['page_title'], "Home")
#        self.assertEqual(response.context['home']['title'], "Welcome to My Store")
#        self.assertEqual(response.context['home']['body'], "Praesent a enim ac nunc egestas egestas. Integer auctor justo et lorem pulvinar eleifend. Curabitur accumsan massa lectus. Pellentesque ac ipsum sed odio mattis aliquam at egestas odio. Vestibulum gravida augue sapien, sit amet posuere quam. Duis dui mauris, pretium sed cursus quis, semper vitae metus. Sed et ante quam. Morbi nunc diam, tristique at vulputate a, ornare sed odio. Donec semper dolor nisl. Maecenas ac felis mauris, eget ornare metus. Pellentesque ac vehicula ligula. Nam semper nibh quis tortor eleifend et ultricies sapien tempus.")

        
    def test_bidding_views(self):
        
        now = datetime.datetime.now()
        tomarrow = now + datetime.timedelta(days=1)
        category = MarketCategory.objects.all()[0]
        subcategory = MarketSubCategory.objects.all()[0]
        
        item = Item(shop=self.shop, title="My Unique Item", description="the description of my unique item", 
                    price="10.0", 
                    category=category, 
                    subcategory=subcategory, 
                    qty=2, weight="2.0")
        item.save() 
        
        auction = AuctionSession(shop=self.shop, title="Test Session", 
                                 description="-- no desc --", 
                                 start=now, 
                                 end=tomarrow)
        auction.save()
        
        lot = Lot(shop=self.shop,
                  title="Coin From USA 1905 (PCGS 50)",
                  description="rare coin",
                  category=category,
                  date_time=now,
                  weight="5",
                  session=auction, 
                  starting_bid=decimal.Decimal("100.00"), 
                  reserve=decimal.Decimal("300.00"))
        lot.save()
        
        
        response = self.client.get(reverse("bidding_about_us"), HTTP_HOST=self.HTTP_HOST)
        self.assertContains(response, "Nam est mauris, pretium eu imperdiet ut, iaculis sit amet sapien", count=None, status_code=200, msg_prefix='')     
        
        response = self.client.get(reverse("bidding_auctions_id", args=[auction.id]), HTTP_HOST=self.HTTP_HOST)
        self.assertEqual(response.status_code, 200)
        self.assertEqual(len(response.context['sessions']), 1)
        
        response = self.client.get(reverse("bidding_blog"), HTTP_HOST=self.HTTP_HOST)
        self.assertEqual(response.status_code, 200)
        
        response = self.client.get(reverse("bidding_buy_now", args=[item.id]), HTTP_HOST=self.HTTP_HOST)
        self.assertEqual(response.status_code, 302)
        
        #bidding_search
    
        page = Page(shop=self.shop, name_link="somewhere", title="Page Title", body="This is the page content")
        page.save()
        response = self.client.get(reverse("bidding_page", args=[page.name_link]), HTTP_HOST=self.HTTP_HOST)
        self.assertContains(response, "Page Title", count=None, status_code=200, msg_prefix='')
        self.assertContains(response, "This is the page content", count=None, status_code=200, msg_prefix='')
        
        response = self.client.get(reverse("bidding_sitemap"), HTTP_HOST=self.HTTP_HOST)
        self.assertEqual(response.status_code, 200)
        
        #self.assertContains(response, "Page Title", count=None, status_code=200, msg_prefix='')
        
        response = self.client.get(reverse("bidding_for_sale"), HTTP_HOST=self.HTTP_HOST)
        self.assertEqual(response.status_code, 200)
        
        response = self.client.get(reverse("bidding_map", args=[self.shop.about.id]), HTTP_HOST=self.HTTP_HOST)
        self.assertEqual(response.status_code, 200)
            
        response = self.client.get(reverse("bidding_view_history_lot", args=[lot.id]), HTTP_HOST=self.HTTP_HOST)
        self.assertEqual(response.status_code, 200)
        
        response = self.client.post(reverse("bidding_view_history_lot", args=[lot.id]), {'amount': '10.00' },HTTP_HOST=self.HTTP_HOST)
        self.assertEqual(response.status_code, 200)
        
        response = self.client.get(reverse("bidding_view_item", args=[item.id]), HTTP_HOST=self.HTTP_HOST)
        self.assertContains(response, "My Unique Item", count=None, status_code=200, msg_prefix='')
        
        post = Post(shop=self.shop, title="This is my first blog post", body="some content here")
        post.save()
        
        self.assertEqual(post.views, 0)
        response = self.client.get(reverse("bidding_view_post", args=[post.id]), HTTP_HOST=self.HTTP_HOST)
        self.assertContains(response, "This is my first blog post" , count=None, status_code=200, msg_prefix='')
    
        post = Post.objects.filter(id=post.id)[0]
        self.assertEqual(post.views, 1)
    
        
        
        
        
    
########NEW FILE########
__FILENAME__ = views
# -*- coding: utf-8 -*-
import logging
from datetime import datetime

from django.conf import settings
from django.core.paginator import Paginator, InvalidPage, EmptyPage
from django.core.urlresolvers import reverse
from django.http import HttpResponseRedirect, Http404, HttpResponse
from django.shortcuts import render_to_response, get_object_or_404
from django.template import RequestContext, loader
from django.template.defaultfilters import striptags, date
from django.utils.translation import ugettext as _

from auctions.models import AuctionSession
from bidding.forms import BiddingSearchForm, BidForm
from blog_pages.models import Post, About, Home, Page, DynamicPageContent
from core.decorators import shop_required, auctions_feature_required
from for_sale.models import Item
from lots.models import Lot
from shops.models import MailingListMember
from sell.templatetags.sell_tags import money_format
from sell.models import Cart
from themes.models import Asset
from preferences.models import ShopPolicies

from jinja2 import Environment
from jinja2.loaders import BaseLoader


PAGE_SEARCH = 15
PAGE_BLOG = 8
PAGE_LOTS = 15


class ThemeLoader(BaseLoader):

    def __init__(self, shop, is_secure=False):
        self.shop = shop
        self.is_secure = is_secure 

    def get_source(self, environment, template):
        source = self.shop.theme.get_template(template)
        path = "%s/%s" % (self.shop.name, template)
        return source, path, lambda: False
    
    def asset_url(self, name_file):
        try:
            asset = Asset.objects.filter(theme__shop=self.shop, name=name_file)[0]
            if asset.is_editable():
                if self.is_secure:
                    return settings.SECURE_ASSET_URL + asset.assetrenderingsecure.file.name
                else:
                    return asset.assetrendering.file.url
            else:
                if self.is_secure:
                    return settings.SECURE_ASSET_URL + asset.file.name
                else:
                    return asset.file.url
        except:
            logging.error("Asset(%s) object not found" % name_file)
            return ''


@shop_required
def my_render(request, param, name_page=None):
    """ news_items """
    items = Item.objects.filter(shop=request.shop).order_by('-id')[:10] 
    new_items = []
    for i in items:
        image = i.image()
        plain_item = {
            'title': i.title,
            'description': i.description,
            'price': money_format(i.price, request.shop), 
            'url': reverse('bidding_view_item', args=[i.id]),
            'image': {'original': image.image.url if image else "",
                      'small': image.image.url_100x100 if image else "",
                      'medium': image.image.url_400x400 if image else "",
                      } 
        }
        new_items.append(plain_item)

    """ Sessions """
    sessions = AuctionSession.objects.filter(shop=request.shop, end__gte=datetime.now())        
    sessions_list = []
    sessions_list.append({'title': 'Highlights', 'url': reverse('bidding_auctions')})
    for session in sessions:
        sessions_list.append({
                             'title': session.title,
                             'url': reverse('bidding_auctions_id', args=[session.id]),
                             })
   
    """ Menu """
    t = loader.get_template('bidding/blocks/menu_menu.html')
    c = RequestContext(request, {'shop':request.shop})
    menu = (t.render(c))

    """ Policies """
    policies = ShopPolicies.objects.filter(shop=request.shop)
    t = loader.get_template('bidding/blocks/policy.html')
    c = RequestContext(request, {'shop':request.shop})
    policies = (t.render(c))

    """ Header """
    t = loader.get_template('bidding/blocks/header.html')
    c = RequestContext(request, {'shop':request.shop})
    header = (t.render(c))

    """ Footer """
    t = loader.get_template('bidding/blocks/footer.html')
    c = RequestContext(request, {'shop':request.shop})
    footer = (t.render(c))
    
    about = request.shop.about.body
    links = []
    
    menus = request.shop.menu_set.all()
    if menus.count() > 0:
        for link in menus[0].links():
            if link.to == "/auctions/" and not request.shop.auctions_feature_enabled():
                continue
            links.append({
                  'to': link.to,
                  'name': link.name,
            })
        
    """ Flash """
    t = loader.get_template('bidding/blocks/flash.html')
    c = RequestContext(request, {})
    flash = (t.render(c))

    """ Posts """
    last = request.shop.last_post()
    if last:
        last_post = {'url': reverse('bidding_view_post', args=[last.id]),
                     'title': last.title,
                     'body': last.body,
                     'date_time': date(last.date_time,'F j, Y'),
                    }
    else:
        last_post = {}

    env = Environment(loader=ThemeLoader(request.shop, request.is_secure()))
    env.filters['asset_url'] = env.loader.asset_url
    

    if name_page:
        try:
            template = env.get_template(name_page)
            content = template.render(param)
        except Exception, e:
            return HttpResponse("Error in template %s. %s" % (name_page, e))
    else:
        content = param.get('block')
    
    if request.user.is_authenticated():
        try:
            cart = Cart.objects.filter(shop=request.shop, bidder=request.user).get()
            total_cart_items = cart.total_items()
        except Cart.DoesNotExist:
            total_cart_items = 0
    else:
        total_cart_items = 0
    
    param_default = {
                     'about': about,
                     'flash': flash,
                     'header': header,
                     'content': content,
                     'header': header,
                     'footer': footer,  
                     'last_post': last_post,
                     'new_items': new_items,
                     'menu': menu,
                     'links': links,
                     'page_title': param.get('page_title', ''),
                     'page_description': param.get('page_description', ''),
                     'total_cart_items': total_cart_items,
                     'url_my_shopping': reverse('my_shopping'),
                     'url_my_orders': reverse('my_orders'),
                     'url_search': reverse('bidding_search'),
                     'url_refund': reverse('bidding_refund'),
                     'url_privacy_policy': reverse('bidding_privacy_policy'),
                     'url_terms_of_service': reverse('bidding_terms_of_service'),                     
                     'user_is_logged': request.user.is_authenticated() and not request.shop.is_admin(request.user),
                     'shop_name': request.shop.name_shop(),
                     'sessions': sessions_list,
                     }

    try:
        template = env.get_template('layout')
        html = template.render(param_default)
    except Exception, e:
        return HttpResponse("Error in template layout. %s" %  e)
    
    return html


@shop_required
def bidding_home(request):
    from shops.forms import MailingListMemberForm
	
    logging.critical(request.GET.get("u", None))
    shop = request.shop
    if request.method == "POST":
        
        form = MailingListMemberForm(request.POST)
        if form.is_valid():
            member = form.save(commit=False)
            member.shop = shop
            member.save()
            request.flash['message'] = unicode(_("Email successfully registered."))
            request.flash['severity'] = "success"
            return HttpResponseRedirect(reverse("home"))
    else:
        form = MailingListMemberForm()

    t = loader.get_template('bidding/blocks/mailing_list_form.html')
    c = RequestContext(request, {'form' : form})
    block_mailing_list = (t.render(c))
    
    home = Home.objects.filter(shop=request.shop).get()


    
    #TODO: replace collections
    """ news_items """
    items = Item.objects.filter(shop=request.shop).order_by('-id')[:10] 
    new_items = []
    for i in items:
        image = i.image()
        new_items.append({
            'title': i.title,
            'description': i.description,
            'price': money_format(i.price, request.shop), 
            'url': reverse('bidding_view_item', args=[i.id]),
            'image': {'original': image.image.url if image else "",
                      'small': image.image.url_100x100 if image else "",
                      'medium': image.image.url_400x400 if image else "",
                      } 
            })

    last = request.shop.last_post()
    if last:
        last_post = {'url': reverse('bidding_view_post', args=[last.id]),
                     'title': last.title,
                     'body': last.body,
                     'date_time': date(last.date_time,'F j, Y'),
                    }
    else:
        last_post = {}        
        
    """ Sessions """
    sessions = AuctionSession.objects.filter(shop=request.shop, end__gte=datetime.now())        
    new_sessions = []
    new_sessions.append({'title': 'Highligths', 'url': reverse('bidding_auctions')})
    for session in sessions:
        new_sessions.append({
                             'title': session.title,
                             'url': reverse('bidding_auctions_id', args=[session.id]),
                             })        

    about = request.shop.about.body

    param = {
             'about': about,
             'home': 
                {
                 'title': home.title, 
                 'body': home.body, 
                 'image': home.image
                 },
             'new_items': new_items,
             'mailing_list': block_mailing_list,
             'page_title': 'Home',
             'page_title': 'Home',
             'page_description': striptags(home.meta_content),
             'sessions': new_sessions,
             'url_refund': reverse('bidding_refund'),
             'url_privacy_policy': reverse('bidding_privacy_policy'),
             'url_terms_of_service': reverse('bidding_terms_of_service'),
            }
        
    return HttpResponse(my_render(request, param, 'home'))
    
    
    
@shop_required
def bidding_for_sale(request):
    items_list = Item.objects.filter(shop=request.shop, qty__gte=0, show=True)
    shop_categories = request.shop.categories_list()
    shop_subcategories = request.shop.sub_categories_list()
    
    pager = Paginator(items_list, PAGE_LOTS)
    try:
        page = int(request.GET.get('page','1'))
    except:
        page = 1        
    try:
        items = pager.page(page)
    except (EmptyPage, InvalidPage):
        items = pager.page(pager.num_pages)
    paged = (pager.num_pages > 1)
    
    items_list = []
    for item in items.object_list:
        image = item.image()
        items_list.append({'url': reverse('bidding_view_item', args=[item.id]),
                          'title': item.title,
                          'price': money_format(item.price, request.shop),
                          'image': {'original': image.image.url if image else None,
                                    'small': image.image.url_100x100 if image else None,
                                    'medium': image.image.url_400x400 if image else None,
                                    } 
                          })

    t = loader.get_template('paginator.html')
    c = RequestContext(request, {'objects': items,
                                 'pages': pager.page_range,
                                 'paged': paged,})
    paginator = (t.render(c))
    
    try:
        page = DynamicPageContent.objects.filter(shop=request.shop, page="for_sale").get()
        description = striptags(page.meta_content)
    except DynamicPageContent.DoesNotExist:
        description = "No meta description found"
    
    param = {
             'items': items_list,
             'shop_categories': shop_categories,
             'shop_subcategories': shop_subcategories,
             'paginator': paginator,
             'page_title': 'For Sale',
             'page_description': description,
             } 
    return HttpResponse(my_render(request, param, 'for_sale'))
    
    

@shop_required
@auctions_feature_required
def bidding_auctions(request, session_id=None):
    if session_id:
        session = get_object_or_404(AuctionSession, pk=session_id)
        lots = Lot.objects.filter(shop=request.shop, session=session, state='A')
        session_title = session.title
    else:
        session_title = 'Highlights'
        lots = Lot.objects.filter(shop=request.shop, state='A')
        
    pager = Paginator(lots, PAGE_LOTS)  
    try:
        page = int(request.GET.get('page','1'))
    except:
        page = 1        
    try:
        lots = pager.page(page)
    except (EmptyPage, InvalidPage):
        lots = pager.page(pager.num_pages)
    paged = (pager.num_pages > 1)

    lots_list = []
    for lot in lots.object_list:
        image = lot.image()
        lots_list.append({'url': reverse('bidding_view_lot', args=[lot.id]),
                          'title': lot.title,
                          'price': money_format(lot.price(), request.shop),
                          'image': {'original': image.image.url if image else None,
                                    'small': image.image.url_100x100 if image else None,
                                    'medium': image.image.url_400x400 if image else None,
                                   } 
                         })

    sessions = AuctionSession.objects.filter(shop=request.shop, end__gte=datetime.now())
    shop_categories = request.shop.categories_list()
    shop_subcategories = request.shop.sub_categories_list()
    
    t = loader.get_template('bidding/blocks/sessions.html')
    c = RequestContext(request, {'sessions': sessions})
    block_sessions = (t.render(c))

    t = loader.get_template('paginator.html')
    c = RequestContext(request, {'objects': lots,
                                 'pages': pager.page_range,
                                 'paged': paged,})
    paginator = (t.render(c))
    
    try:
        page = DynamicPageContent.objects.filter(shop=request.shop, page="auctions").get()
        description = striptags(page.meta_content)
    except DynamicPageContent.DoesNotExist:
        description = "No meta description found"
        
    param = {
             'lots': lots_list,
             'sessions': block_sessions,
             'session_title': session_title,    
             'paginator': paginator,
             'page_title': 'Auctions',
             'page_description': description,
             'shop_categories': shop_categories,
             'shop_subcategories': shop_subcategories,
             } 

    return HttpResponse(my_render(request, param, 'auctions'))
    


@shop_required
def bidding_blog(request):
    list_posts = Post.objects.filter(shop=request.shop).filter(draft=False).order_by("-date_time") 
    last_posts = list_posts[:5]

    pager = Paginator(list_posts, PAGE_BLOG)
    try:
        page = int(request.GET.get('page','1'))
    except:
        page = 1        
    try:
        posts = pager.page(page)
    except (EmptyPage, InvalidPage):
        posts = pager.page(pager.num_pages)
    paged = (pager.num_pages > 1)
    
    last_post_list = []
    for p in last_posts:
        last_post_list.append({'title': p.title,
                               'url': reverse('bidding_view_post', args=[p.id]),
                               'date_time': date(p.date_time, 'F j, Y'),
                               'body': p.body,
                               })  

    posts_list = []
    for p in posts.object_list:
        posts_list.append({'title': p.title,
                          'url': reverse('bidding_view_post', args=[p.id]),
                          'date_time': date(p.date_time, 'F j, Y'),
                          'body': p.body, 
                         })

    t = loader.get_template('paginator.html')
    c = RequestContext(request, {'objects': posts,
                                 'pages': pager.page_range,
                                 'paged': paged,})
    paginator = (t.render(c))
    
    try:
        page = DynamicPageContent.objects.filter(shop=request.shop, page="blog").get()
        description = striptags(page.meta_content)
    except DynamicPageContent.DoesNotExist:
        description = "No meta description found"
        
    param = {
             'posts': posts_list, 
             'last_posts': last_post_list, 
             'paginator': paginator,
             'page_title': 'Blog',
             'page_description': description
             }
    
    return HttpResponse(my_render(request, param, 'blog'))

    
    
@shop_required
def bidding_about_us(request):
    about = About.objects.filter(shop=request.shop).get()
    
    t = loader.get_template('bidding/blocks/map.html')
    c = RequestContext(request, {'about': about})
    block_map = (t.render(c))
    
    param = {
             'about': 
                {'title': about.title, 'body': about.body, 'location': request.shop.location},
             'map': block_map,
             'page_title': 'About Us',
             'page_description': '%s' % striptags(about.meta_content),
             'url_refund': reverse('bidding_refund'),
             'url_privacy_policy': reverse('bidding_privacy_policy'),
             'url_terms_of_service': reverse('bidding_terms_of_service'), 
            }
    
    return HttpResponse(my_render(request, param, 'about_us'))

@shop_required
def bidding_refund(request):
    shop_policies = ShopPolicies.objects.get(shop=request.shop)
    refund = shop_policies.refund_policy
    param = {'refund': { 'body': refund }, 'page_title': 'Refund'}
    
    return HttpResponse(my_render(request, param, 'refund'))

@shop_required
def privacy_policy(request):
    shop_policies = ShopPolicies.objects.get(shop=request.shop)
    privacy_policies = shop_policies.privacy_policy
    param = { 'privacy_policies': { 'body': privacy_policies }, 'page_title': 'Privacy Policies'}

    return HttpResponse(my_render(request, param, 'privacy_policies'))

@shop_required
def terms_of_service(request):
    shop_policies = ShopPolicies.objects.get(shop=request.shop)
    terms_of_service = shop_policies.terms_of_service
    param = { 'terms_of_service': { 'body': terms_of_service }, 'page_title': 'Terms of Service'}
    return HttpResponse(my_render(request, param, 'terms_of_service'))


@shop_required
def bidding_view_post(request, id):
    post = get_object_or_404(Post, pk=id)
    post.visited()
    
    if post.meta_content: description = striptags(post.meta_content)
    else: description = post.title
        
    param = {
             'post': 
                {'title': post.title, 'body': post.body, 'date_time': post.date_time},
             'url': reverse('bidding_blog'),
             'page_title': post.title,
             'page_description': '%s' % description
            }

    return HttpResponse(my_render(request, param, 'view_post'))
    

@shop_required
def bidding_view_lot(request, id):
    #TODO: filter by state lot
    #TODO: add csrf_token to form
    lot = get_object_or_404(Lot, pk=id)
    
    request.shop.add_view()

    form = BidForm(lot, request.GET or None)
    if form.is_valid():
        
        if (not request.user.is_authenticated()) or request.user.is_staff or request.user.is_superuser:
            return HttpResponseRedirect(settings.LOGIN_URL+"?next="+request.get_full_path())
        if not (lot.is_active() and lot.shop == request.shop):
            raise Http404
        
        
        lot.bid(request.user, form.cleaned_data['amount'], request.META['REMOTE_ADDR'])
        
        request.flash['message'] = unicode(_("Bid successfully registered."))
        request.flash['severity'] = "success"
        return HttpResponseRedirect(reverse('bidding_view_lot', args=[id]))
            
    t = loader.get_template('bidding/blocks/view_lot_form.html')
    c = RequestContext(request, {'form': form, 'lot': lot})
    block_view_lot_form = (t.render(c))

    images = []
    for img in lot.imagelot_set.all():
        images.append({
                       'original': img.image.url if img else None,
                       'small': img.image.url_100x100 if img else None,
                       'medium': img.image.url_400x400 if img else None,
                      })
    
    param = {
             'lot': 
                {'title': lot.title,
                 'category': lot.category.name,
                 'subcategory': lot.subcategory.name if lot.subcategory else "",
                 'time_left': lot.time_left(), 
                 'session_end': lot.session.end, 
                 'description': lot.description, 
                 },
              'user_is_logged': request.user.is_authenticated() and not request.shop.is_admin(request.user),
              'form': block_view_lot_form, 
              'images': images,
              'page_title': lot.title,
              'page_description': '%s, %s' % (lot.title, striptags(lot.description))
            }
    
    return HttpResponse(my_render(request, param, 'view_lot'))
    
    
@shop_required
def bidding_view_history_lot(request, id):
    #TODO: filter by state lot
    #TODO: add csrf_token to form    
    lot = get_object_or_404(Lot, pk=id)
    form = BidForm(lot, request.GET or None)
    if form.is_valid():
        if (not request.user.is_authenticated()) or request.user.is_staff or request.user.is_superuser:
            return HttpResponseRedirect(settings.LOGIN_URL+"?next="+request.get_full_path())
        if not (lot.is_active() and lot.shop == request.shop):
            raise Http404
        
        lot.bid(request.user, form.cleaned_data['amount'], request.META['REMOTE_ADDR'])

        request.flash['message'] = unicode(_("Bid successfully registered."))
        request.flash['severity'] = "success"
        return HttpResponseRedirect(reverse('bidding_view_history_lot', args=[id]))

    history = []
    for bid in lot.history():
        history.append({'bidder_username': bid.bidder.username,
                        'bid_amount': money_format(bid.bid_amount, request.shop),
                        'bid_time': date(bid.bid_time, 'r'),
                        }) 

    t = loader.get_template('bidding/blocks/view_history_lot_description.html')
    c = RequestContext(request, {'lot': lot, 'form': form})
    block_description = (t.render(c))
    image = lot.image()
    lot_dic = {'count_bidders': lot.count_bidders(),
               'count_bids': lot.count_bids(),
               'time_left_long': lot.time_left_long(),
               'title': lot.title,
               'dir_back': reverse('bidding_view_lot', args=[lot.id]),
               'image': {'original': image.image.url if image else None,
                         'small': image.image.url_100x100 if image else None,
                         'medium': image.image.url_400x400 if image else None,
                        }
             } 

    return HttpResponse(my_render(request, {
                                         'history': history,
                                         'description': block_description,
                                         'page_title': lot.title,
                                         'page_description': '%s, %s' % (lot.title, striptags(lot.description)),
                                         'lot': lot_dic, 
                                        }, 'view_history_lot'))


@shop_required
def bidding_view_item(request, id):
    #TODO: filter by state lot
    #TODO: add csrf_token to form
    item = get_object_or_404(Item, pk=id)

    request.shop.add_view()

    t = loader.get_template('bidding/blocks/view_item_form.html')
    c = RequestContext(request, {'item': item})
    block_view_item_form = (t.render(c))

    images = []
    for img in item.imageitem_set.all():
        images.append({'original': img.image.url if img else None,
                       'small': img.image.url_100x100 if img else None,
                       'medium': img.image.url_400x400 if img else None,
                       })
    
    param = {
        'item': 
                {'title': item.title,
                 'category': item.category.name,
                 'subcategory': item.subcategory.name if item.subcategory else "",
                 'title': item.title, 
                 'description': item.description, 
                 },
        'user_is_logged': request.user.is_authenticated() and not request.shop.is_admin(request.user),
        'form': block_view_item_form, 
        'images': images, 
        'page_title': item.title,
        'page_description': '%s, %s' % (item.title, striptags(item.description)) 
    }
    
    return HttpResponse(my_render(request, param, 'view_item'))


@shop_required
def bidding_buy_now(request, id):
    #TODO: filter by state lot
    #TODO: add csrf_token to form
    
    item = get_object_or_404(Item, pk=id)
    
    if not (item.shop == request.shop):
        raise Http404
        
    if (not request.user.is_authenticated()) or request.user.is_staff or request.user.is_superuser:
        return HttpResponseRedirect(settings.LOGIN_URL+"?next="+request.get_full_path())

    cart = request.cart
    cart.add(item, item.price, 1)
        
    request.flash['message'] = unicode(_("Product added to your cart"))
    request.flash['severity'] = "success"
    return HttpResponseRedirect(reverse('my_shopping'))
    

def bidding_map(request, id):
    about = get_object_or_404(About, pk=id)
    return render_to_response('bidding/map.html', 
                              {'about': about},
                              RequestContext(request))
    
@shop_required
def bidding_search(request):
    """
    """
    query = ''
    form = BiddingSearchForm(shop=request.shop, data=request.GET)
    
    if form.is_valid():
        query = form.get_query()
        results = form.search()
    else:
        results = form.all_results()
    
    pager = Paginator(results, PAGE_SEARCH)
    try:
        page = int(request.GET.get('page','1'))
    except:
        page = 1        
    try:
        products = pager.page(page)
    except (EmptyPage, InvalidPage):
        products = pager.page(pager.num_pages)
    paged = (pager.num_pages > 1)
    
    t = loader.get_template('bidding/blocks/search.html')
    c = RequestContext(request, {'form': form, 
                                 'products' : products,
                                 'pages': pager.page_range,
                                 'paged': paged })
    block_search = (t.render(c))
    getvars = "&q=%s" % form.cleaned_data.get("q")
    
    t = loader.get_template('paginator.html')
    filter_params = {'q': form.cleaned_data.get("q", '')}
    c = RequestContext(request, {'objects': products, 
                                 'getvars': getvars,
                                 'filter_params': filter_params,
                                 'pages': pager.page_range,
                                 'paged': paged})
    
    paginator = (t.render(c))
    
    try:
        page = DynamicPageContent.objects.filter(shop=request.shop, page="search").get()
        description = striptags(page.meta_content)
    except DynamicPageContent.DoesNotExist:
        description = "No meta description found"
        
    return HttpResponse(my_render(request, {'results': block_search,
                                            'paginator': paginator,
                                            'page_title': 'Search',
                                            'page_description': description 
                                            }, 'search'))

@shop_required    
def pages(request, name_page):
    page = get_object_or_404(Page, shop = request.shop, name_link = name_page)
    param = {
        'page': {'title': page.title, 'body': page.body},
        'page_title': page.title,
        'page_description': '%s' % striptags(page.meta_content)
    }
    return HttpResponse(my_render(request, param, 'page'))
    

@shop_required    
def pages_sitemap(request):
    lots = Lot.objects.filter(shop=request.shop, state='A')
    items = Item.objects.filter(shop=request.shop)
    posts = Post.objects.filter(shop=request.shop, draft="False")
    urls = ""
 
    for post in posts:
        urls += """<url><loc>%(url)s</loc><lastmod>%(last_mod)s</lastmod><changefreq>weekly</changefreq><priority>0.8</priority></url>""" % {
            'url': request.build_absolute_uri(reverse('bidding_view_post', args=[post.id])),
            'last_mod': post.date_time.strftime("%Y-%m-%d")
       }

    for item in items:
        urls += """<url><loc>%(url)s</loc><lastmod>%(last_mod)s</lastmod><changefreq>weekly</changefreq><priority>0.8</priority></url>""" % {
            'url': request.build_absolute_uri(reverse('bidding_view_item', args=[item.id])),
            'last_mod': item.date_time.strftime("%Y-%m-%d")
       }


    for lot in lots:
        urls += """<url><loc>%(url)s</loc><lastmod>%(last_mod)s</lastmod><changefreq>weekly</changefreq><priority>0.8</priority></url>""" % {
            'url': request.build_absolute_uri(reverse('bidding_view_lot', args=[lot.id])),
            'last_mod': lot.date_time.strftime("%Y-%m-%d")
        }

 
    for page in Page.objects.filter(shop=request.shop):
        urls += """<url><loc>%(url)s</loc><lastmod>%(last_mod)s</lastmod><changefreq>weekly</changefreq><priority>0.8</priority></url>""" % {
            'url': request.build_absolute_uri(page.get_bidding_url()),
            'last_mod': page.last_updated.strftime("%Y-%m-%d")
        }

    try:
        about = About.objects.get(shop=request.shop)
        urls += """<url><loc>%(url)s</loc><lastmod>%(last_mod)s</lastmod><changefreq>weekly</changefreq><priority>0.8</priority></url>""" % {
            'url': request.build_absolute_uri(reverse("bidding_about_us")),
            'last_mod': about.last_updated.strftime("%Y-%m-%d")
        }
    except About.DoesNotExist:
        pass
    
    try:
        home = Home.objects.get(shop = request.shop)
        urls += """<url><loc>%(url)s</loc><lastmod>%(last_mod)s</lastmod><changefreq>weekly</changefreq><priority>0.8</priority></url>""" % {
            'url': request.build_absolute_uri(reverse("bidding_home")),
            'last_mod': home.last_updated.strftime("%Y-%m-%d")
        }
    except Home.DoesNotExist:
        pass
       
    sitemap = """
    <?xml version="1.0" encoding="UTF-8"?>
    <urlset xmlns="http://www.sitemaps.org/schemas/sitemap/0.9">%(urls)s</urlset>""" % {'urls': urls}
    return HttpResponse(sitemap)

@shop_required    
def pages_robots(request):
    robots = """
    User-agent: *
    Disallow:
    """ 
    return HttpResponse(robots)

########NEW FILE########
__FILENAME__ = admin
from django import forms
from django.contrib import admin
from models import *


admin.site.register(About)
admin.site.register(Post)
admin.site.register(Page)
admin.site.register(PageVersion)
admin.site.register(DynamicPageContent)
admin.site.register(Menu)
admin.site.register(Link)
admin.site.register(Home)

########NEW FILE########
__FILENAME__ = feeds
from django.contrib.syndication.views import Feed

from blog_pages.models import Post

class LatestPostFeed(Feed):
    def get_object(self, request):
        return request.shop

    def title(self, obj):
        return "%s latest post feed" % obj.name
    
    def description(self, obj):
        return "updates on %s blog posts" % obj.name    

    def link(self, obj):
        return "http://%s/blog/" % obj.default_dns

    def items(self, obj):
        return Post.objects.filter(shop = obj).filter(draft=False).order_by('-date_time')[:100]

    def item_title(self, item):
        return item.title

    def item_description(self, item):
        return "%s ..." % item.body[:50]
    
    def item_link(self, item):
        return "http://%s%s" % (item.shop.default_dns, item.get_bidding_url())


########NEW FILE########
__FILENAME__ = forms
import copy

from django import forms
from django.forms import ModelForm

from models import Post, Home, About, Page, Link, DynamicPageContent

PAGES_DEFAULT = [
                 ('/home/','Home'),
                 ('/auctions/','Auctions'), 
                 ('/for_sale/','For sale'), 
                 ('/blog/','Blog'), 
                 ('/about_us/','About Us'), 
                ]

PAGES = 'pages'
  
class PostForm(ModelForm):
    class Meta:
        model = Post
        fields= ['title', 'body', 'meta_content']
      
        
class HomeForm(ModelForm):
    class Meta:
        model = Home
        fields = ['title', 'body', 'meta_content', 'image'] 
        
        
class AboutForm(ModelForm):
    class Meta:
        model = About
        fields = ['title', 'body', 'meta_content'] 
        
class PageForm(ModelForm):
    
    class Meta:
        model = Page
        fields = ['name', 'name_link', 'title', 'body', 'meta_content', 'visible']
    
    def __init__(self, shop, *args, **kwargs):
        super(PageForm, self).__init__(*args, **kwargs)
        self.shop = shop
        
    def clean_name(self):
        old = self.instance.name
        name = self.cleaned_data["name"]
        try:
            page = Page.objects.filter(name=name, shop=self.shop).get()
            if page.name != old:
                raise forms.ValidationError("A page with that name already exists in your shop.")
            return name
        except Page.DoesNotExist:
            return name
        

    def clean_name_link(self):
        old = self.instance.name_link
        name_link = self.cleaned_data["name_link"]
        try:
            page = Page.objects.filter(name_link=name_link, shop=self.shop).get()
            if page.name_link != old:
                raise forms.ValidationError("A page with that name link already exists in your shop.")
            return name_link
        except Page.DoesNotExist:
            return name_link
        

    
class DynamicPageForm(ModelForm):
    
    class Meta:
        model = DynamicPageContent
        fields = ['meta_content']
    
    def __init__(self, shop, *args, **kwargs):
        super(DynamicPageForm, self).__init__(*args, **kwargs)
        self.shop = shop
        

class LinkForm(ModelForm):
    to = forms.ChoiceField()  
    
    class Meta:
        model = Link
        fields = ['name', 'to', 'title']
    
    def __init__(self, shop, *args, **kwargs):
        super(LinkForm, self).__init__(*args, **kwargs)
        
        l = copy.copy(PAGES_DEFAULT)
        pages = Page.objects.filter(shop=shop)
        for page in pages:
            l.append(( "/%s/%s/" % (PAGES, page.name_link), page.name))
        to = self.fields.get('to')
        to.choices = l
        
########NEW FILE########
__FILENAME__ = 0001_initial
# encoding: utf-8
import datetime
from south.db import db
from south.v2 import SchemaMigration
from django.db import models

class Migration(SchemaMigration):

    def forwards(self, orm):
        
        # Adding model 'Post'
        db.create_table('blog_pages_post', (
            ('id', self.gf('django.db.models.fields.AutoField')(primary_key=True)),
            ('shop', self.gf('django.db.models.fields.related.ForeignKey')(to=orm['shops.Shop'])),
            ('title', self.gf('django.db.models.fields.CharField')(max_length=60)),
            ('body', self.gf('django.db.models.fields.TextField')()),
            ('date_time', self.gf('django.db.models.fields.DateTimeField')(auto_now_add=True, blank=True)),
        ))
        db.send_create_signal('blog_pages', ['Post'])

        # Adding model 'Home'
        db.create_table('blog_pages_home', (
            ('id', self.gf('django.db.models.fields.AutoField')(primary_key=True)),
            ('shop', self.gf('django.db.models.fields.related.OneToOneField')(to=orm['shops.Shop'], unique=True)),
            ('title', self.gf('django.db.models.fields.CharField')(default='Welcome to My Store', max_length=60)),
            ('body', self.gf('django.db.models.fields.TextField')(default='Praesent a enim ac nunc egestas egestas. Integer auctor justo et lorem pulvinar eleifend. Curabitur accumsan massa lectus. Pellentesque ac ipsum sed odio mattis aliquam at egestas odio. Vestibulum gravida augue sapien, sit amet posuere quam. Duis dui mauris, pretium sed cursus quis, semper vitae metus. Sed et ante quam. Morbi nunc diam, tristique at vulputate a, ornare sed odio. Donec semper dolor nisl. Maecenas ac felis mauris, eget ornare metus. Pellentesque ac vehicula ligula. Nam semper nibh quis tortor eleifend et ultricies sapien tempus.')),
            ('image', self.gf('django.db.models.fields.files.ImageField')(max_length=100)),
            ('last_updated', self.gf('django.db.models.fields.DateTimeField')(auto_now=True, blank=True)),
        ))
        db.send_create_signal('blog_pages', ['Home'])

        # Adding model 'About'
        db.create_table('blog_pages_about', (
            ('id', self.gf('django.db.models.fields.AutoField')(primary_key=True)),
            ('shop', self.gf('django.db.models.fields.related.OneToOneField')(to=orm['shops.Shop'], unique=True)),
            ('title', self.gf('django.db.models.fields.CharField')(default='About Us', max_length=60)),
            ('body', self.gf('django.db.models.fields.TextField')(default='Nam est mauris, pretium eu imperdiet ut, iaculis sit amet sapien. Ut aliquet laoreet odio, ut hendrerit lectus suscipit quis. Sed condimentum elementum sollicitudin. Praesent accumsan, nisi nec sagittis dignissim, ante massa lobortis diam, id tincidunt arcu ipsum non purus. Duis et leo non diam feugiat congue ut in nulla. Suspendisse et faucibus mi. Fusce imperdiet volutpat sollicitudin. Suspendisse potenti.')),
            ('location', self.gf('django.db.models.fields.CharField')(default='39.29038,-76.61219', max_length=255)),
            ('last_updated', self.gf('django.db.models.fields.DateTimeField')(auto_now=True, blank=True)),
        ))
        db.send_create_signal('blog_pages', ['About'])

        # Adding model 'Page'
        db.create_table('blog_pages_page', (
            ('id', self.gf('django.db.models.fields.AutoField')(primary_key=True)),
            ('shop', self.gf('django.db.models.fields.related.ForeignKey')(to=orm['shops.Shop'])),
            ('name', self.gf('django.db.models.fields.CharField')(max_length=60)),
            ('name_link', self.gf('django.db.models.fields.CharField')(max_length=60)),
            ('title', self.gf('django.db.models.fields.CharField')(max_length=60)),
            ('body', self.gf('django.db.models.fields.TextField')()),
            ('last_updated', self.gf('django.db.models.fields.DateTimeField')(auto_now=True, blank=True)),
            ('visible', self.gf('django.db.models.fields.BooleanField')(default=True, blank=True)),
        ))
        db.send_create_signal('blog_pages', ['Page'])

        # Adding model 'Menu'
        db.create_table('blog_pages_menu', (
            ('id', self.gf('django.db.models.fields.AutoField')(primary_key=True)),
            ('shop', self.gf('django.db.models.fields.related.ForeignKey')(to=orm['shops.Shop'])),
            ('name', self.gf('django.db.models.fields.CharField')(max_length=60)),
        ))
        db.send_create_signal('blog_pages', ['Menu'])

        # Adding model 'Link'
        db.create_table('blog_pages_link', (
            ('id', self.gf('django.db.models.fields.AutoField')(primary_key=True)),
            ('name', self.gf('django.db.models.fields.CharField')(max_length=60)),
            ('to', self.gf('django.db.models.fields.CharField')(max_length=120)),
            ('title', self.gf('django.db.models.fields.CharField')(max_length=60)),
            ('menu', self.gf('django.db.models.fields.related.ForeignKey')(to=orm['blog_pages.Menu'])),
            ('order', self.gf('django.db.models.fields.PositiveIntegerField')()),
        ))
        db.send_create_signal('blog_pages', ['Link'])


    def backwards(self, orm):
        
        # Deleting model 'Post'
        db.delete_table('blog_pages_post')

        # Deleting model 'Home'
        db.delete_table('blog_pages_home')

        # Deleting model 'About'
        db.delete_table('blog_pages_about')

        # Deleting model 'Page'
        db.delete_table('blog_pages_page')

        # Deleting model 'Menu'
        db.delete_table('blog_pages_menu')

        # Deleting model 'Link'
        db.delete_table('blog_pages_link')


    models = {
        'auth.group': {
            'Meta': {'object_name': 'Group'},
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '80'}),
            'permissions': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['auth.Permission']", 'symmetrical': 'False', 'blank': 'True'})
        },
        'auth.permission': {
            'Meta': {'unique_together': "(('content_type', 'codename'),)", 'object_name': 'Permission'},
            'codename': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'content_type': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['contenttypes.ContentType']"}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '50'})
        },
        'auth.user': {
            'Meta': {'object_name': 'User'},
            'date_joined': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
            'email': ('django.db.models.fields.EmailField', [], {'max_length': '75'}),
            'first_name': ('django.db.models.fields.CharField', [], {'max_length': '30', 'blank': 'True'}),
            'groups': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['auth.Group']", 'symmetrical': 'False', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'is_active': ('django.db.models.fields.BooleanField', [], {'default': 'True', 'blank': 'True'}),
            'is_staff': ('django.db.models.fields.BooleanField', [], {'default': 'False', 'blank': 'True'}),
            'is_superuser': ('django.db.models.fields.BooleanField', [], {'default': 'False', 'blank': 'True'}),
            'last_login': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
            'last_name': ('django.db.models.fields.CharField', [], {'max_length': '30', 'blank': 'True'}),
            'password': ('django.db.models.fields.CharField', [], {'max_length': '128'}),
            'user_permissions': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['auth.Permission']", 'symmetrical': 'False', 'blank': 'True'}),
            'username': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '32'})
        },
        'blog_pages.about': {
            'Meta': {'object_name': 'About'},
            'body': ('django.db.models.fields.TextField', [], {'default': "'Nam est mauris, pretium eu imperdiet ut, iaculis sit amet sapien. Ut aliquet laoreet odio, ut hendrerit lectus suscipit quis. Sed condimentum elementum sollicitudin. Praesent accumsan, nisi nec sagittis dignissim, ante massa lobortis diam, id tincidunt arcu ipsum non purus. Duis et leo non diam feugiat congue ut in nulla. Suspendisse et faucibus mi. Fusce imperdiet volutpat sollicitudin. Suspendisse potenti.'"}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'last_updated': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'blank': 'True'}),
            'location': ('django.db.models.fields.CharField', [], {'default': "'39.29038,-76.61219'", 'max_length': '255'}),
            'shop': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['shops.Shop']", 'unique': 'True'}),
            'title': ('django.db.models.fields.CharField', [], {'default': "'About Us'", 'max_length': '60'})
        },
        'blog_pages.home': {
            'Meta': {'object_name': 'Home'},
            'body': ('django.db.models.fields.TextField', [], {'default': "'Praesent a enim ac nunc egestas egestas. Integer auctor justo et lorem pulvinar eleifend. Curabitur accumsan massa lectus. Pellentesque ac ipsum sed odio mattis aliquam at egestas odio. Vestibulum gravida augue sapien, sit amet posuere quam. Duis dui mauris, pretium sed cursus quis, semper vitae metus. Sed et ante quam. Morbi nunc diam, tristique at vulputate a, ornare sed odio. Donec semper dolor nisl. Maecenas ac felis mauris, eget ornare metus. Pellentesque ac vehicula ligula. Nam semper nibh quis tortor eleifend et ultricies sapien tempus.'"}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'image': ('django.db.models.fields.files.ImageField', [], {'max_length': '100'}),
            'last_updated': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'blank': 'True'}),
            'shop': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['shops.Shop']", 'unique': 'True'}),
            'title': ('django.db.models.fields.CharField', [], {'default': "'Welcome to My Store'", 'max_length': '60'})
        },
        'blog_pages.link': {
            'Meta': {'object_name': 'Link'},
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'menu': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['blog_pages.Menu']"}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '60'}),
            'order': ('django.db.models.fields.PositiveIntegerField', [], {}),
            'title': ('django.db.models.fields.CharField', [], {'max_length': '60'}),
            'to': ('django.db.models.fields.CharField', [], {'max_length': '120'})
        },
        'blog_pages.menu': {
            'Meta': {'object_name': 'Menu'},
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '60'}),
            'shop': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['shops.Shop']"})
        },
        'blog_pages.page': {
            'Meta': {'object_name': 'Page'},
            'body': ('django.db.models.fields.TextField', [], {}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'last_updated': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'blank': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '60'}),
            'name_link': ('django.db.models.fields.CharField', [], {'max_length': '60'}),
            'shop': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['shops.Shop']"}),
            'title': ('django.db.models.fields.CharField', [], {'max_length': '60'}),
            'visible': ('django.db.models.fields.BooleanField', [], {'default': 'True', 'blank': 'True'})
        },
        'blog_pages.post': {
            'Meta': {'object_name': 'Post'},
            'body': ('django.db.models.fields.TextField', [], {}),
            'date_time': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'shop': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['shops.Shop']"}),
            'title': ('django.db.models.fields.CharField', [], {'max_length': '60'})
        },
        'contenttypes.contenttype': {
            'Meta': {'unique_together': "(('app_label', 'model'),)", 'object_name': 'ContentType', 'db_table': "'django_content_type'"},
            'app_label': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'model': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '100'})
        },
        'market.marketplace': {
            'Meta': {'object_name': 'MarketPlace'},
            'base_domain': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '128'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '92'}),
            'slug': ('django.db.models.fields.SlugField', [], {'unique': 'True', 'max_length': '92', 'db_index': 'True'}),
            'template_prefix': ('django.db.models.fields.SlugField', [], {'unique': 'True', 'max_length': '92', 'db_index': 'True'}),
            'title': ('django.db.models.fields.CharField', [], {'max_length': '92'})
        },
        'shops.shop': {
            'Meta': {'object_name': 'Shop'},
            'admin': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['auth.User']"}),
            'bids': ('django.db.models.fields.IntegerField', [], {'default': '0'}),
            'date_time': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'marketplace': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['market.MarketPlace']"}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '60'}),
            'views': ('django.db.models.fields.IntegerField', [], {'default': '0'})
        }
    }

    complete_apps = ['blog_pages']

########NEW FILE########
__FILENAME__ = 0002_auto__del_field_about_location
# encoding: utf-8
import datetime
from south.db import db
from south.v2 import SchemaMigration
from django.db import models

class Migration(SchemaMigration):

    def forwards(self, orm):
        
        # Deleting field 'About.location'
        db.delete_column('blog_pages_about', 'location')


    def backwards(self, orm):
        
        # Adding field 'About.location'
        db.add_column('blog_pages_about', 'location', self.gf('django.db.models.fields.CharField')(default='39.29038,-76.61219', max_length=255), keep_default=False)


    models = {
        'auth.group': {
            'Meta': {'object_name': 'Group'},
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '80'}),
            'permissions': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['auth.Permission']", 'symmetrical': 'False', 'blank': 'True'})
        },
        'auth.permission': {
            'Meta': {'unique_together': "(('content_type', 'codename'),)", 'object_name': 'Permission'},
            'codename': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'content_type': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['contenttypes.ContentType']"}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '50'})
        },
        'auth.user': {
            'Meta': {'object_name': 'User'},
            'date_joined': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
            'email': ('django.db.models.fields.EmailField', [], {'max_length': '75'}),
            'first_name': ('django.db.models.fields.CharField', [], {'max_length': '30', 'blank': 'True'}),
            'groups': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['auth.Group']", 'symmetrical': 'False', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'is_active': ('django.db.models.fields.BooleanField', [], {'default': 'True', 'blank': 'True'}),
            'is_staff': ('django.db.models.fields.BooleanField', [], {'default': 'False', 'blank': 'True'}),
            'is_superuser': ('django.db.models.fields.BooleanField', [], {'default': 'False', 'blank': 'True'}),
            'last_login': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
            'last_name': ('django.db.models.fields.CharField', [], {'max_length': '30', 'blank': 'True'}),
            'password': ('django.db.models.fields.CharField', [], {'max_length': '128'}),
            'user_permissions': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['auth.Permission']", 'symmetrical': 'False', 'blank': 'True'}),
            'username': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '32'})
        },
        'blog_pages.about': {
            'Meta': {'object_name': 'About'},
            'body': ('django.db.models.fields.TextField', [], {'default': "'Nam est mauris, pretium eu imperdiet ut, iaculis sit amet sapien. Ut aliquet laoreet odio, ut hendrerit lectus suscipit quis. Sed condimentum elementum sollicitudin. Praesent accumsan, nisi nec sagittis dignissim, ante massa lobortis diam, id tincidunt arcu ipsum non purus. Duis et leo non diam feugiat congue ut in nulla. Suspendisse et faucibus mi. Fusce imperdiet volutpat sollicitudin. Suspendisse potenti.'"}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'last_updated': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'blank': 'True'}),
            'shop': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['shops.Shop']", 'unique': 'True'}),
            'title': ('django.db.models.fields.CharField', [], {'default': "'About Us'", 'max_length': '60'})
        },
        'blog_pages.home': {
            'Meta': {'object_name': 'Home'},
            'body': ('django.db.models.fields.TextField', [], {'default': "'Praesent a enim ac nunc egestas egestas. Integer auctor justo et lorem pulvinar eleifend. Curabitur accumsan massa lectus. Pellentesque ac ipsum sed odio mattis aliquam at egestas odio. Vestibulum gravida augue sapien, sit amet posuere quam. Duis dui mauris, pretium sed cursus quis, semper vitae metus. Sed et ante quam. Morbi nunc diam, tristique at vulputate a, ornare sed odio. Donec semper dolor nisl. Maecenas ac felis mauris, eget ornare metus. Pellentesque ac vehicula ligula. Nam semper nibh quis tortor eleifend et ultricies sapien tempus.'"}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'image': ('django.db.models.fields.files.ImageField', [], {'max_length': '100'}),
            'last_updated': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'blank': 'True'}),
            'shop': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['shops.Shop']", 'unique': 'True'}),
            'title': ('django.db.models.fields.CharField', [], {'default': "'Welcome to My Store'", 'max_length': '60'})
        },
        'blog_pages.link': {
            'Meta': {'object_name': 'Link'},
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'menu': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['blog_pages.Menu']"}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '60'}),
            'order': ('django.db.models.fields.PositiveIntegerField', [], {}),
            'title': ('django.db.models.fields.CharField', [], {'max_length': '60'}),
            'to': ('django.db.models.fields.CharField', [], {'max_length': '120'})
        },
        'blog_pages.menu': {
            'Meta': {'object_name': 'Menu'},
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '60'}),
            'shop': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['shops.Shop']"})
        },
        'blog_pages.page': {
            'Meta': {'object_name': 'Page'},
            'body': ('django.db.models.fields.TextField', [], {}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'last_updated': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'blank': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '60'}),
            'name_link': ('django.db.models.fields.CharField', [], {'max_length': '60'}),
            'shop': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['shops.Shop']"}),
            'title': ('django.db.models.fields.CharField', [], {'max_length': '60'}),
            'visible': ('django.db.models.fields.BooleanField', [], {'default': 'True', 'blank': 'True'})
        },
        'blog_pages.post': {
            'Meta': {'object_name': 'Post'},
            'body': ('django.db.models.fields.TextField', [], {}),
            'date_time': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'shop': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['shops.Shop']"}),
            'title': ('django.db.models.fields.CharField', [], {'max_length': '60'})
        },
        'contenttypes.contenttype': {
            'Meta': {'unique_together': "(('app_label', 'model'),)", 'object_name': 'ContentType', 'db_table': "'django_content_type'"},
            'app_label': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'model': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '100'})
        },
        'market.marketplace': {
            'Meta': {'object_name': 'MarketPlace'},
            'base_domain': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '128'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '92'}),
            'slug': ('django.db.models.fields.SlugField', [], {'unique': 'True', 'max_length': '92', 'db_index': 'True'}),
            'template_prefix': ('django.db.models.fields.SlugField', [], {'unique': 'True', 'max_length': '92', 'db_index': 'True'}),
            'title': ('django.db.models.fields.CharField', [], {'max_length': '92'})
        },
        'shops.shop': {
            'Meta': {'object_name': 'Shop'},
            'admin': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['auth.User']"}),
            'bids': ('django.db.models.fields.IntegerField', [], {'default': '0'}),
            'date_time': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'marketplace': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['market.MarketPlace']"}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '60'}),
            'views': ('django.db.models.fields.IntegerField', [], {'default': '0'})
        }
    }

    complete_apps = ['blog_pages']

########NEW FILE########
__FILENAME__ = 0004_auto__add_field_post_views
# encoding: utf-8
import datetime
from south.db import db
from south.v2 import SchemaMigration
from django.db import models

class Migration(SchemaMigration):

    def forwards(self, orm):
        
        # Adding field 'Post.views'
        db.add_column('blog_pages_post', 'views', self.gf('django.db.models.fields.IntegerField')(default=0), keep_default=False)


    def backwards(self, orm):
        
        # Deleting field 'Post.views'
        db.delete_column('blog_pages_post', 'views')


    models = {
        'auth.group': {
            'Meta': {'object_name': 'Group'},
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '80'}),
            'permissions': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['auth.Permission']", 'symmetrical': 'False', 'blank': 'True'})
        },
        'auth.permission': {
            'Meta': {'unique_together': "(('content_type', 'codename'),)", 'object_name': 'Permission'},
            'codename': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'content_type': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['contenttypes.ContentType']"}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '50'})
        },
        'auth.user': {
            'Meta': {'object_name': 'User'},
            'date_joined': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
            'email': ('django.db.models.fields.EmailField', [], {'max_length': '75'}),
            'first_name': ('django.db.models.fields.CharField', [], {'max_length': '30', 'blank': 'True'}),
            'groups': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['auth.Group']", 'symmetrical': 'False', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'is_active': ('django.db.models.fields.BooleanField', [], {'default': 'True', 'blank': 'True'}),
            'is_staff': ('django.db.models.fields.BooleanField', [], {'default': 'False', 'blank': 'True'}),
            'is_superuser': ('django.db.models.fields.BooleanField', [], {'default': 'False', 'blank': 'True'}),
            'last_login': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
            'last_name': ('django.db.models.fields.CharField', [], {'max_length': '30', 'blank': 'True'}),
            'password': ('django.db.models.fields.CharField', [], {'max_length': '128'}),
            'user_permissions': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['auth.Permission']", 'symmetrical': 'False', 'blank': 'True'}),
            'username': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '32'})
        },
        'blog_pages.about': {
            'Meta': {'object_name': 'About'},
            'body': ('django.db.models.fields.TextField', [], {'default': "'Nam est mauris, pretium eu imperdiet ut, iaculis sit amet sapien. Ut aliquet laoreet odio, ut hendrerit lectus suscipit quis. Sed condimentum elementum sollicitudin. Praesent accumsan, nisi nec sagittis dignissim, ante massa lobortis diam, id tincidunt arcu ipsum non purus. Duis et leo non diam feugiat congue ut in nulla. Suspendisse et faucibus mi. Fusce imperdiet volutpat sollicitudin. Suspendisse potenti.'"}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'last_updated': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'blank': 'True'}),
            'shop': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['shops.Shop']", 'unique': 'True'}),
            'title': ('django.db.models.fields.CharField', [], {'default': "'About Us'", 'max_length': '60'})
        },
        'blog_pages.home': {
            'Meta': {'object_name': 'Home'},
            'body': ('django.db.models.fields.TextField', [], {'default': "'Praesent a enim ac nunc egestas egestas. Integer auctor justo et lorem pulvinar eleifend. Curabitur accumsan massa lectus. Pellentesque ac ipsum sed odio mattis aliquam at egestas odio. Vestibulum gravida augue sapien, sit amet posuere quam. Duis dui mauris, pretium sed cursus quis, semper vitae metus. Sed et ante quam. Morbi nunc diam, tristique at vulputate a, ornare sed odio. Donec semper dolor nisl. Maecenas ac felis mauris, eget ornare metus. Pellentesque ac vehicula ligula. Nam semper nibh quis tortor eleifend et ultricies sapien tempus.'"}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'image': ('django.db.models.fields.files.ImageField', [], {'max_length': '100'}),
            'last_updated': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'blank': 'True'}),
            'shop': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['shops.Shop']", 'unique': 'True'}),
            'title': ('django.db.models.fields.CharField', [], {'default': "'Welcome to My Store'", 'max_length': '60'})
        },
        'blog_pages.link': {
            'Meta': {'object_name': 'Link'},
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'menu': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['blog_pages.Menu']"}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '60'}),
            'order': ('django.db.models.fields.PositiveIntegerField', [], {}),
            'title': ('django.db.models.fields.CharField', [], {'max_length': '60'}),
            'to': ('django.db.models.fields.CharField', [], {'max_length': '120'})
        },
        'blog_pages.menu': {
            'Meta': {'object_name': 'Menu'},
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '60'}),
            'shop': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['shops.Shop']"})
        },
        'blog_pages.page': {
            'Meta': {'object_name': 'Page'},
            'body': ('django.db.models.fields.TextField', [], {}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'last_updated': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'blank': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '60'}),
            'name_link': ('django.db.models.fields.CharField', [], {'max_length': '60'}),
            'shop': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['shops.Shop']"}),
            'title': ('django.db.models.fields.CharField', [], {'max_length': '60'}),
            'visible': ('django.db.models.fields.BooleanField', [], {'default': 'True', 'blank': 'True'})
        },
        'blog_pages.post': {
            'Meta': {'object_name': 'Post'},
            'body': ('django.db.models.fields.TextField', [], {}),
            'date_time': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'shop': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['shops.Shop']"}),
            'title': ('django.db.models.fields.CharField', [], {'max_length': '60'}),
            'views': ('django.db.models.fields.IntegerField', [], {'default': '0'})
        },
        'contenttypes.contenttype': {
            'Meta': {'unique_together': "(('app_label', 'model'),)", 'object_name': 'ContentType', 'db_table': "'django_content_type'"},
            'app_label': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'model': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '100'})
        },
        'market.marketplace': {
            'Meta': {'object_name': 'MarketPlace'},
            'base_domain': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '128'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '92'}),
            'slug': ('django.db.models.fields.SlugField', [], {'unique': 'True', 'max_length': '92', 'db_index': 'True'}),
            'template_prefix': ('django.db.models.fields.SlugField', [], {'unique': 'True', 'max_length': '92', 'db_index': 'True'}),
            'title': ('django.db.models.fields.CharField', [], {'max_length': '92'})
        },
        'shops.shop': {
            'Meta': {'object_name': 'Shop'},
            'admin': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['auth.User']"}),
            'bids': ('django.db.models.fields.IntegerField', [], {'default': '0'}),
            'date_time': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'location': ('django.db.models.fields.CharField', [], {'default': "'39.29038,-76.61219'", 'max_length': '255'}),
            'marketplace': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['market.MarketPlace']"}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '60'}),
            'views': ('django.db.models.fields.IntegerField', [], {'default': '0'})
        }
    }

    complete_apps = ['blog_pages']

########NEW FILE########
__FILENAME__ = 0005_auto__chg_field_home_image__add_field_page_meta_content
# encoding: utf-8
import datetime
from south.db import db
from south.v2 import SchemaMigration
from django.db import models

class Migration(SchemaMigration):

    def forwards(self, orm):
        
        # Changing field 'Home.image'
        db.alter_column('blog_pages_home', 'image', self.gf('django.db.models.fields.files.ImageField')(max_length=100, blank=True))

        # Adding field 'Page.meta_content'
        db.add_column('blog_pages_page', 'meta_content', self.gf('django.db.models.fields.TextField')(null=True, blank=True), keep_default=False)


    def backwards(self, orm):
        
        # Changing field 'Home.image'
        db.alter_column('blog_pages_home', 'image', self.gf('django.db.models.fields.files.ImageField')(max_length=100))

        # Deleting field 'Page.meta_content'
        db.delete_column('blog_pages_page', 'meta_content')


    models = {
        'auth.group': {
            'Meta': {'object_name': 'Group'},
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '80'}),
            'permissions': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['auth.Permission']", 'symmetrical': 'False', 'blank': 'True'})
        },
        'auth.permission': {
            'Meta': {'unique_together': "(('content_type', 'codename'),)", 'object_name': 'Permission'},
            'codename': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'content_type': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['contenttypes.ContentType']"}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '50'})
        },
        'auth.user': {
            'Meta': {'object_name': 'User'},
            'date_joined': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
            'email': ('django.db.models.fields.EmailField', [], {'max_length': '75'}),
            'first_name': ('django.db.models.fields.CharField', [], {'max_length': '30', 'blank': 'True'}),
            'groups': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['auth.Group']", 'symmetrical': 'False', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'is_active': ('django.db.models.fields.BooleanField', [], {'default': 'True', 'blank': 'True'}),
            'is_staff': ('django.db.models.fields.BooleanField', [], {'default': 'False', 'blank': 'True'}),
            'is_superuser': ('django.db.models.fields.BooleanField', [], {'default': 'False', 'blank': 'True'}),
            'last_login': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
            'last_name': ('django.db.models.fields.CharField', [], {'max_length': '30', 'blank': 'True'}),
            'password': ('django.db.models.fields.CharField', [], {'max_length': '128'}),
            'user_permissions': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['auth.Permission']", 'symmetrical': 'False', 'blank': 'True'}),
            'username': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '32'})
        },
        'blog_pages.about': {
            'Meta': {'object_name': 'About'},
            'body': ('django.db.models.fields.TextField', [], {'default': "'This is where you may put a little description about you and your activity.'"}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'last_updated': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'blank': 'True'}),
            'shop': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['shops.Shop']", 'unique': 'True'}),
            'title': ('django.db.models.fields.CharField', [], {'default': "'About Us'", 'max_length': '60'})
        },
        'blog_pages.home': {
            'Meta': {'object_name': 'Home'},
            'body': ('django.db.models.fields.TextField', [], {'default': '"This text will be shown in the home page as a \'Welcome Text\'. Also you can add a picture to accompany the text."'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'image': ('django.db.models.fields.files.ImageField', [], {'max_length': '100', 'blank': 'True'}),
            'last_updated': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'blank': 'True'}),
            'shop': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['shops.Shop']", 'unique': 'True'}),
            'title': ('django.db.models.fields.CharField', [], {'default': "'Welcome to My Store'", 'max_length': '60'})
        },
        'blog_pages.link': {
            'Meta': {'object_name': 'Link'},
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'menu': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['blog_pages.Menu']"}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '60'}),
            'order': ('django.db.models.fields.PositiveIntegerField', [], {}),
            'title': ('django.db.models.fields.CharField', [], {'max_length': '60'}),
            'to': ('django.db.models.fields.CharField', [], {'max_length': '120'})
        },
        'blog_pages.menu': {
            'Meta': {'object_name': 'Menu'},
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '60'}),
            'shop': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['shops.Shop']"})
        },
        'blog_pages.page': {
            'Meta': {'object_name': 'Page'},
            'body': ('django.db.models.fields.TextField', [], {}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'last_updated': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'blank': 'True'}),
            'meta_content': ('django.db.models.fields.TextField', [], {'null': 'True', 'blank': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '60'}),
            'name_link': ('django.db.models.fields.CharField', [], {'max_length': '60'}),
            'shop': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['shops.Shop']"}),
            'title': ('django.db.models.fields.CharField', [], {'max_length': '60'}),
            'visible': ('django.db.models.fields.BooleanField', [], {'default': 'True', 'blank': 'True'})
        },
        'blog_pages.post': {
            'Meta': {'object_name': 'Post'},
            'body': ('django.db.models.fields.TextField', [], {}),
            'date_time': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'shop': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['shops.Shop']"}),
            'title': ('django.db.models.fields.CharField', [], {'max_length': '60'}),
            'views': ('django.db.models.fields.IntegerField', [], {'default': '0'})
        },
        'contenttypes.contenttype': {
            'Meta': {'unique_together': "(('app_label', 'model'),)", 'object_name': 'ContentType', 'db_table': "'django_content_type'"},
            'app_label': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'model': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '100'})
        },
        'market.marketplace': {
            'Meta': {'object_name': 'MarketPlace'},
            'base_domain': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '128'}),
            'charge_on_card_as': ('django.db.models.fields.CharField', [], {'default': "''", 'unique': 'True', 'max_length': '255'}),
            'contact_email': ('django.db.models.fields.EmailField', [], {'default': "'contact@yourstore.com'", 'max_length': '75'}),
            'contact_phone': ('django.db.models.fields.CharField', [], {'default': "''", 'max_length': '128'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '92'}),
            'slug': ('django.db.models.fields.SlugField', [], {'unique': 'True', 'max_length': '92', 'db_index': 'True'}),
            'template_prefix': ('django.db.models.fields.SlugField', [], {'unique': 'True', 'max_length': '92', 'db_index': 'True'}),
            'title': ('django.db.models.fields.CharField', [], {'max_length': '92'})
        },
        'shops.shop': {
            'Meta': {'object_name': 'Shop'},
            'admin': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['auth.User']"}),
            'bids': ('django.db.models.fields.IntegerField', [], {'default': '0'}),
            'date_time': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'location': ('django.db.models.fields.CharField', [], {'default': "'39.29038,-76.61219'", 'max_length': '255'}),
            'marketplace': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['market.MarketPlace']"}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '60'}),
            'views': ('django.db.models.fields.IntegerField', [], {'default': '0'})
        }
    }

    complete_apps = ['blog_pages']

########NEW FILE########
__FILENAME__ = 0006_auto__add_field_home_meta_content__add_field_about_meta_content
# encoding: utf-8
import datetime
from south.db import db
from south.v2 import SchemaMigration
from django.db import models

class Migration(SchemaMigration):

    def forwards(self, orm):
        
        # Adding field 'Home.meta_content'
        db.add_column('blog_pages_home', 'meta_content', self.gf('django.db.models.fields.TextField')(null=True, blank=True), keep_default=False)

        # Adding field 'About.meta_content'
        db.add_column('blog_pages_about', 'meta_content', self.gf('django.db.models.fields.TextField')(null=True, blank=True), keep_default=False)


    def backwards(self, orm):
        
        # Deleting field 'Home.meta_content'
        db.delete_column('blog_pages_home', 'meta_content')

        # Deleting field 'About.meta_content'
        db.delete_column('blog_pages_about', 'meta_content')


    models = {
        'auth.group': {
            'Meta': {'object_name': 'Group'},
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '80'}),
            'permissions': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['auth.Permission']", 'symmetrical': 'False', 'blank': 'True'})
        },
        'auth.permission': {
            'Meta': {'unique_together': "(('content_type', 'codename'),)", 'object_name': 'Permission'},
            'codename': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'content_type': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['contenttypes.ContentType']"}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '50'})
        },
        'auth.user': {
            'Meta': {'object_name': 'User'},
            'date_joined': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
            'email': ('django.db.models.fields.EmailField', [], {'max_length': '75'}),
            'first_name': ('django.db.models.fields.CharField', [], {'max_length': '30', 'blank': 'True'}),
            'groups': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['auth.Group']", 'symmetrical': 'False', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'is_active': ('django.db.models.fields.BooleanField', [], {'default': 'True', 'blank': 'True'}),
            'is_staff': ('django.db.models.fields.BooleanField', [], {'default': 'False', 'blank': 'True'}),
            'is_superuser': ('django.db.models.fields.BooleanField', [], {'default': 'False', 'blank': 'True'}),
            'last_login': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
            'last_name': ('django.db.models.fields.CharField', [], {'max_length': '30', 'blank': 'True'}),
            'password': ('django.db.models.fields.CharField', [], {'max_length': '128'}),
            'user_permissions': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['auth.Permission']", 'symmetrical': 'False', 'blank': 'True'}),
            'username': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '32'})
        },
        'blog_pages.about': {
            'Meta': {'object_name': 'About'},
            'body': ('django.db.models.fields.TextField', [], {'default': "'This is where you may put a little description about you and your activity.'"}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'last_updated': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'blank': 'True'}),
            'meta_content': ('django.db.models.fields.TextField', [], {'null': 'True', 'blank': 'True'}),
            'shop': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['shops.Shop']", 'unique': 'True'}),
            'title': ('django.db.models.fields.CharField', [], {'default': "'About Us'", 'max_length': '60'})
        },
        'blog_pages.home': {
            'Meta': {'object_name': 'Home'},
            'body': ('django.db.models.fields.TextField', [], {'default': '"This text will be shown in the home page as a \'Welcome Text\'. Also you can add a picture to accompany the text."'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'image': ('django.db.models.fields.files.ImageField', [], {'max_length': '100', 'blank': 'True'}),
            'last_updated': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'blank': 'True'}),
            'meta_content': ('django.db.models.fields.TextField', [], {'null': 'True', 'blank': 'True'}),
            'shop': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['shops.Shop']", 'unique': 'True'}),
            'title': ('django.db.models.fields.CharField', [], {'default': "'Welcome to My Store'", 'max_length': '60'})
        },
        'blog_pages.link': {
            'Meta': {'object_name': 'Link'},
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'menu': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['blog_pages.Menu']"}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '60'}),
            'order': ('django.db.models.fields.PositiveIntegerField', [], {}),
            'title': ('django.db.models.fields.CharField', [], {'max_length': '60'}),
            'to': ('django.db.models.fields.CharField', [], {'max_length': '120'})
        },
        'blog_pages.menu': {
            'Meta': {'object_name': 'Menu'},
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '60'}),
            'shop': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['shops.Shop']"})
        },
        'blog_pages.page': {
            'Meta': {'object_name': 'Page'},
            'body': ('django.db.models.fields.TextField', [], {}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'last_updated': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'blank': 'True'}),
            'meta_content': ('django.db.models.fields.TextField', [], {'null': 'True', 'blank': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '60'}),
            'name_link': ('django.db.models.fields.CharField', [], {'max_length': '60'}),
            'shop': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['shops.Shop']"}),
            'title': ('django.db.models.fields.CharField', [], {'max_length': '60'}),
            'visible': ('django.db.models.fields.BooleanField', [], {'default': 'True', 'blank': 'True'})
        },
        'blog_pages.post': {
            'Meta': {'object_name': 'Post'},
            'body': ('django.db.models.fields.TextField', [], {}),
            'date_time': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'shop': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['shops.Shop']"}),
            'title': ('django.db.models.fields.CharField', [], {'max_length': '60'}),
            'views': ('django.db.models.fields.IntegerField', [], {'default': '0'})
        },
        'contenttypes.contenttype': {
            'Meta': {'unique_together': "(('app_label', 'model'),)", 'object_name': 'ContentType', 'db_table': "'django_content_type'"},
            'app_label': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'model': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '100'})
        },
        'market.marketplace': {
            'Meta': {'object_name': 'MarketPlace'},
            'base_domain': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '128'}),
            'charge_on_card_as': ('django.db.models.fields.CharField', [], {'default': "''", 'unique': 'True', 'max_length': '255'}),
            'contact_email': ('django.db.models.fields.EmailField', [], {'default': "'contact@yourstore.com'", 'max_length': '75'}),
            'contact_phone': ('django.db.models.fields.CharField', [], {'default': "''", 'max_length': '128'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '92'}),
            'slug': ('django.db.models.fields.SlugField', [], {'unique': 'True', 'max_length': '92', 'db_index': 'True'}),
            'template_prefix': ('django.db.models.fields.SlugField', [], {'unique': 'True', 'max_length': '92', 'db_index': 'True'}),
            'title': ('django.db.models.fields.CharField', [], {'max_length': '92'})
        },
        'shops.shop': {
            'Meta': {'object_name': 'Shop'},
            'admin': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['auth.User']"}),
            'bids': ('django.db.models.fields.IntegerField', [], {'default': '0'}),
            'date_time': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'location': ('django.db.models.fields.CharField', [], {'default': "'39.29038,-76.61219'", 'max_length': '255'}),
            'marketplace': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['market.MarketPlace']"}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '60'}),
            'views': ('django.db.models.fields.IntegerField', [], {'default': '0'})
        }
    }

    complete_apps = ['blog_pages']

########NEW FILE########
__FILENAME__ = 0007_auto__add_dynamicpagecontent
# encoding: utf-8
import datetime
from south.db import db
from south.v2 import SchemaMigration
from django.db import models

class Migration(SchemaMigration):

    def forwards(self, orm):
        
        # Adding model 'DynamicPageContent'
        db.create_table('blog_pages_dynamicpagecontent', (
            ('id', self.gf('django.db.models.fields.AutoField')(primary_key=True)),
            ('shop', self.gf('django.db.models.fields.related.ForeignKey')(to=orm['shops.Shop'])),
            ('page', self.gf('django.db.models.fields.CharField')(max_length=100)),
            ('meta_content', self.gf('django.db.models.fields.TextField')(null=True, blank=True)),
        ))
        db.send_create_signal('blog_pages', ['DynamicPageContent'])


    def backwards(self, orm):
        
        # Deleting model 'DynamicPageContent'
        db.delete_table('blog_pages_dynamicpagecontent')


    models = {
        'auth.group': {
            'Meta': {'object_name': 'Group'},
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '80'}),
            'permissions': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['auth.Permission']", 'symmetrical': 'False', 'blank': 'True'})
        },
        'auth.permission': {
            'Meta': {'unique_together': "(('content_type', 'codename'),)", 'object_name': 'Permission'},
            'codename': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'content_type': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['contenttypes.ContentType']"}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '50'})
        },
        'auth.user': {
            'Meta': {'object_name': 'User'},
            'date_joined': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
            'email': ('django.db.models.fields.EmailField', [], {'max_length': '75'}),
            'first_name': ('django.db.models.fields.CharField', [], {'max_length': '30', 'blank': 'True'}),
            'groups': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['auth.Group']", 'symmetrical': 'False', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'is_active': ('django.db.models.fields.BooleanField', [], {'default': 'True', 'blank': 'True'}),
            'is_staff': ('django.db.models.fields.BooleanField', [], {'default': 'False', 'blank': 'True'}),
            'is_superuser': ('django.db.models.fields.BooleanField', [], {'default': 'False', 'blank': 'True'}),
            'last_login': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
            'last_name': ('django.db.models.fields.CharField', [], {'max_length': '30', 'blank': 'True'}),
            'password': ('django.db.models.fields.CharField', [], {'max_length': '128'}),
            'user_permissions': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['auth.Permission']", 'symmetrical': 'False', 'blank': 'True'}),
            'username': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '32'})
        },
        'blog_pages.about': {
            'Meta': {'object_name': 'About'},
            'body': ('django.db.models.fields.TextField', [], {'default': "'This is where you may put a little description about you and your activity.'"}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'last_updated': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'blank': 'True'}),
            'meta_content': ('django.db.models.fields.TextField', [], {'null': 'True', 'blank': 'True'}),
            'shop': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['shops.Shop']", 'unique': 'True'}),
            'title': ('django.db.models.fields.CharField', [], {'default': "'About Us'", 'max_length': '60'})
        },
        'blog_pages.dynamicpagecontent': {
            'Meta': {'object_name': 'DynamicPageContent'},
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'meta_content': ('django.db.models.fields.TextField', [], {'null': 'True', 'blank': 'True'}),
            'page': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'shop': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['shops.Shop']"})
        },
        'blog_pages.home': {
            'Meta': {'object_name': 'Home'},
            'body': ('django.db.models.fields.TextField', [], {'default': '"This text will be shown in the home page as a \'Welcome Text\'. Also you can add a picture to accompany the text."'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'image': ('django.db.models.fields.files.ImageField', [], {'max_length': '100', 'blank': 'True'}),
            'last_updated': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'blank': 'True'}),
            'meta_content': ('django.db.models.fields.TextField', [], {'null': 'True', 'blank': 'True'}),
            'shop': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['shops.Shop']", 'unique': 'True'}),
            'title': ('django.db.models.fields.CharField', [], {'default': "'Welcome to My Store'", 'max_length': '60'})
        },
        'blog_pages.link': {
            'Meta': {'object_name': 'Link'},
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'menu': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['blog_pages.Menu']"}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '60'}),
            'order': ('django.db.models.fields.PositiveIntegerField', [], {}),
            'title': ('django.db.models.fields.CharField', [], {'max_length': '60'}),
            'to': ('django.db.models.fields.CharField', [], {'max_length': '120'})
        },
        'blog_pages.menu': {
            'Meta': {'object_name': 'Menu'},
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '60'}),
            'shop': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['shops.Shop']"})
        },
        'blog_pages.page': {
            'Meta': {'object_name': 'Page'},
            'body': ('django.db.models.fields.TextField', [], {}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'last_updated': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'blank': 'True'}),
            'meta_content': ('django.db.models.fields.TextField', [], {'null': 'True', 'blank': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '60'}),
            'name_link': ('django.db.models.fields.CharField', [], {'max_length': '60'}),
            'shop': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['shops.Shop']"}),
            'title': ('django.db.models.fields.CharField', [], {'max_length': '60'}),
            'visible': ('django.db.models.fields.BooleanField', [], {'default': 'True', 'blank': 'True'})
        },
        'blog_pages.post': {
            'Meta': {'object_name': 'Post'},
            'body': ('django.db.models.fields.TextField', [], {}),
            'date_time': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'shop': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['shops.Shop']"}),
            'title': ('django.db.models.fields.CharField', [], {'max_length': '60'}),
            'views': ('django.db.models.fields.IntegerField', [], {'default': '0'})
        },
        'contenttypes.contenttype': {
            'Meta': {'unique_together': "(('app_label', 'model'),)", 'object_name': 'ContentType', 'db_table': "'django_content_type'"},
            'app_label': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'model': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '100'})
        },
        'market.marketplace': {
            'Meta': {'object_name': 'MarketPlace'},
            'base_domain': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '128'}),
            'charge_on_card_as': ('django.db.models.fields.CharField', [], {'default': "''", 'unique': 'True', 'max_length': '255'}),
            'contact_email': ('django.db.models.fields.EmailField', [], {'default': "'contact@yourstore.com'", 'max_length': '75'}),
            'contact_phone': ('django.db.models.fields.CharField', [], {'default': "''", 'max_length': '128'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '92'}),
            'slug': ('django.db.models.fields.SlugField', [], {'unique': 'True', 'max_length': '92', 'db_index': 'True'}),
            'template_prefix': ('django.db.models.fields.SlugField', [], {'unique': 'True', 'max_length': '92', 'db_index': 'True'}),
            'title': ('django.db.models.fields.CharField', [], {'max_length': '92'})
        },
        'shops.shop': {
            'Meta': {'object_name': 'Shop'},
            'admin': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['auth.User']"}),
            'bids': ('django.db.models.fields.IntegerField', [], {'default': '0'}),
            'date_time': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'location': ('django.db.models.fields.CharField', [], {'default': "'39.29038,-76.61219'", 'max_length': '255'}),
            'marketplace': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['market.MarketPlace']"}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '60'}),
            'views': ('django.db.models.fields.IntegerField', [], {'default': '0'})
        }
    }

    complete_apps = ['blog_pages']

########NEW FILE########
__FILENAME__ = 0008_auto__add_field_post_meta_content
# encoding: utf-8
import datetime
from south.db import db
from south.v2 import SchemaMigration
from django.db import models

class Migration(SchemaMigration):

    def forwards(self, orm):
        
        # Adding field 'Post.meta_content'
        db.add_column('blog_pages_post', 'meta_content', self.gf('django.db.models.fields.TextField')(null=True, blank=True), keep_default=False)


    def backwards(self, orm):
        
        # Deleting field 'Post.meta_content'
        db.delete_column('blog_pages_post', 'meta_content')


    models = {
        'auth.group': {
            'Meta': {'object_name': 'Group'},
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '80'}),
            'permissions': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['auth.Permission']", 'symmetrical': 'False', 'blank': 'True'})
        },
        'auth.permission': {
            'Meta': {'unique_together': "(('content_type', 'codename'),)", 'object_name': 'Permission'},
            'codename': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'content_type': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['contenttypes.ContentType']"}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '50'})
        },
        'auth.user': {
            'Meta': {'object_name': 'User'},
            'date_joined': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
            'email': ('django.db.models.fields.EmailField', [], {'max_length': '75'}),
            'first_name': ('django.db.models.fields.CharField', [], {'max_length': '30', 'blank': 'True'}),
            'groups': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['auth.Group']", 'symmetrical': 'False', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'is_active': ('django.db.models.fields.BooleanField', [], {'default': 'True', 'blank': 'True'}),
            'is_staff': ('django.db.models.fields.BooleanField', [], {'default': 'False', 'blank': 'True'}),
            'is_superuser': ('django.db.models.fields.BooleanField', [], {'default': 'False', 'blank': 'True'}),
            'last_login': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
            'last_name': ('django.db.models.fields.CharField', [], {'max_length': '30', 'blank': 'True'}),
            'password': ('django.db.models.fields.CharField', [], {'max_length': '128'}),
            'user_permissions': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['auth.Permission']", 'symmetrical': 'False', 'blank': 'True'}),
            'username': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '32'})
        },
        'blog_pages.about': {
            'Meta': {'object_name': 'About'},
            'body': ('django.db.models.fields.TextField', [], {'default': "'This is where you may put a little description about you and your activity.'"}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'last_updated': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'blank': 'True'}),
            'meta_content': ('django.db.models.fields.TextField', [], {'null': 'True', 'blank': 'True'}),
            'shop': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['shops.Shop']", 'unique': 'True'}),
            'title': ('django.db.models.fields.CharField', [], {'default': "'About Us'", 'max_length': '60'})
        },
        'blog_pages.dynamicpagecontent': {
            'Meta': {'object_name': 'DynamicPageContent'},
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'meta_content': ('django.db.models.fields.TextField', [], {'null': 'True', 'blank': 'True'}),
            'page': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'shop': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['shops.Shop']"})
        },
        'blog_pages.home': {
            'Meta': {'object_name': 'Home'},
            'body': ('django.db.models.fields.TextField', [], {'default': '"This text will be shown in the home page as a \'Welcome Text\'. Also you can add a picture to accompany the text."'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'image': ('django.db.models.fields.files.ImageField', [], {'max_length': '100', 'blank': 'True'}),
            'last_updated': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'blank': 'True'}),
            'meta_content': ('django.db.models.fields.TextField', [], {'null': 'True', 'blank': 'True'}),
            'shop': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['shops.Shop']", 'unique': 'True'}),
            'title': ('django.db.models.fields.CharField', [], {'default': "'Welcome to My Store'", 'max_length': '60'})
        },
        'blog_pages.link': {
            'Meta': {'object_name': 'Link'},
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'menu': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['blog_pages.Menu']"}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '60'}),
            'order': ('django.db.models.fields.PositiveIntegerField', [], {}),
            'title': ('django.db.models.fields.CharField', [], {'max_length': '60'}),
            'to': ('django.db.models.fields.CharField', [], {'max_length': '120'})
        },
        'blog_pages.menu': {
            'Meta': {'object_name': 'Menu'},
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '60'}),
            'shop': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['shops.Shop']"})
        },
        'blog_pages.page': {
            'Meta': {'object_name': 'Page'},
            'body': ('django.db.models.fields.TextField', [], {}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'last_updated': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'blank': 'True'}),
            'meta_content': ('django.db.models.fields.TextField', [], {'null': 'True', 'blank': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '60'}),
            'name_link': ('django.db.models.fields.CharField', [], {'max_length': '60'}),
            'shop': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['shops.Shop']"}),
            'title': ('django.db.models.fields.CharField', [], {'max_length': '60'}),
            'visible': ('django.db.models.fields.BooleanField', [], {'default': 'True', 'blank': 'True'})
        },
        'blog_pages.post': {
            'Meta': {'object_name': 'Post'},
            'body': ('django.db.models.fields.TextField', [], {}),
            'date_time': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'meta_content': ('django.db.models.fields.TextField', [], {'null': 'True', 'blank': 'True'}),
            'shop': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['shops.Shop']"}),
            'title': ('django.db.models.fields.CharField', [], {'max_length': '60'}),
            'views': ('django.db.models.fields.IntegerField', [], {'default': '0'})
        },
        'contenttypes.contenttype': {
            'Meta': {'unique_together': "(('app_label', 'model'),)", 'object_name': 'ContentType', 'db_table': "'django_content_type'"},
            'app_label': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'model': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '100'})
        },
        'market.marketplace': {
            'Meta': {'object_name': 'MarketPlace'},
            'base_domain': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '128'}),
            'charge_on_card_as': ('django.db.models.fields.CharField', [], {'default': "''", 'unique': 'True', 'max_length': '255'}),
            'contact_email': ('django.db.models.fields.EmailField', [], {'default': "'contact@yourstore.com'", 'max_length': '75'}),
            'contact_phone': ('django.db.models.fields.CharField', [], {'default': "''", 'max_length': '128'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '92'}),
            'slug': ('django.db.models.fields.SlugField', [], {'unique': 'True', 'max_length': '92', 'db_index': 'True'}),
            'template_prefix': ('django.db.models.fields.SlugField', [], {'unique': 'True', 'max_length': '92', 'db_index': 'True'}),
            'title': ('django.db.models.fields.CharField', [], {'max_length': '92'})
        },
        'shops.shop': {
            'Meta': {'object_name': 'Shop'},
            'admin': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['auth.User']"}),
            'bids': ('django.db.models.fields.IntegerField', [], {'default': '0'}),
            'date_time': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'location': ('django.db.models.fields.CharField', [], {'default': "'39.29038,-76.61219'", 'max_length': '255'}),
            'marketplace': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['market.MarketPlace']"}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '60'}),
            'views': ('django.db.models.fields.IntegerField', [], {'default': '0'})
        }
    }

    complete_apps = ['blog_pages']

########NEW FILE########
__FILENAME__ = 0009_auto__add_field_post_draft
# encoding: utf-8
import datetime
from south.db import db
from south.v2 import SchemaMigration
from django.db import models

class Migration(SchemaMigration):

    def forwards(self, orm):
        
        # Adding field 'Post.draft'
        db.add_column('blog_pages_post', 'draft', self.gf('django.db.models.fields.BooleanField')(default=True, blank=True), keep_default=False)


    def backwards(self, orm):
        
        # Deleting field 'Post.draft'
        db.delete_column('blog_pages_post', 'draft')


    models = {
        'auth.group': {
            'Meta': {'object_name': 'Group'},
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '80'}),
            'permissions': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['auth.Permission']", 'symmetrical': 'False', 'blank': 'True'})
        },
        'auth.permission': {
            'Meta': {'unique_together': "(('content_type', 'codename'),)", 'object_name': 'Permission'},
            'codename': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'content_type': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['contenttypes.ContentType']"}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '50'})
        },
        'auth.user': {
            'Meta': {'object_name': 'User'},
            'date_joined': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
            'email': ('django.db.models.fields.EmailField', [], {'max_length': '75'}),
            'first_name': ('django.db.models.fields.CharField', [], {'max_length': '30', 'blank': 'True'}),
            'groups': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['auth.Group']", 'symmetrical': 'False', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'is_active': ('django.db.models.fields.BooleanField', [], {'default': 'True', 'blank': 'True'}),
            'is_staff': ('django.db.models.fields.BooleanField', [], {'default': 'False', 'blank': 'True'}),
            'is_superuser': ('django.db.models.fields.BooleanField', [], {'default': 'False', 'blank': 'True'}),
            'last_login': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
            'last_name': ('django.db.models.fields.CharField', [], {'max_length': '30', 'blank': 'True'}),
            'password': ('django.db.models.fields.CharField', [], {'max_length': '128'}),
            'user_permissions': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['auth.Permission']", 'symmetrical': 'False', 'blank': 'True'}),
            'username': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '32'})
        },
        'blog_pages.about': {
            'Meta': {'object_name': 'About'},
            'body': ('django.db.models.fields.TextField', [], {'default': "'This is where you may put a little description about you and your activity.'"}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'last_updated': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'blank': 'True'}),
            'meta_content': ('django.db.models.fields.TextField', [], {'null': 'True', 'blank': 'True'}),
            'shop': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['shops.Shop']", 'unique': 'True'}),
            'title': ('django.db.models.fields.CharField', [], {'default': "'About Us'", 'max_length': '60'})
        },
        'blog_pages.dynamicpagecontent': {
            'Meta': {'object_name': 'DynamicPageContent'},
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'meta_content': ('django.db.models.fields.TextField', [], {'null': 'True', 'blank': 'True'}),
            'page': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'shop': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['shops.Shop']"})
        },
        'blog_pages.home': {
            'Meta': {'object_name': 'Home'},
            'body': ('django.db.models.fields.TextField', [], {'default': '"This text will be shown in the home page as a \'Welcome Text\'. Also you can add a picture to accompany the text."'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'image': ('django.db.models.fields.files.ImageField', [], {'max_length': '100', 'blank': 'True'}),
            'last_updated': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'blank': 'True'}),
            'meta_content': ('django.db.models.fields.TextField', [], {'null': 'True', 'blank': 'True'}),
            'shop': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['shops.Shop']", 'unique': 'True'}),
            'title': ('django.db.models.fields.CharField', [], {'default': "'Welcome to My Store'", 'max_length': '60'})
        },
        'blog_pages.link': {
            'Meta': {'object_name': 'Link'},
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'menu': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['blog_pages.Menu']"}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '60'}),
            'order': ('django.db.models.fields.PositiveIntegerField', [], {}),
            'title': ('django.db.models.fields.CharField', [], {'max_length': '60'}),
            'to': ('django.db.models.fields.CharField', [], {'max_length': '120'})
        },
        'blog_pages.menu': {
            'Meta': {'object_name': 'Menu'},
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '60'}),
            'shop': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['shops.Shop']"})
        },
        'blog_pages.page': {
            'Meta': {'object_name': 'Page'},
            'body': ('django.db.models.fields.TextField', [], {}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'last_updated': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'blank': 'True'}),
            'meta_content': ('django.db.models.fields.TextField', [], {'null': 'True', 'blank': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '60'}),
            'name_link': ('django.db.models.fields.CharField', [], {'max_length': '60'}),
            'shop': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['shops.Shop']"}),
            'title': ('django.db.models.fields.CharField', [], {'max_length': '60'}),
            'visible': ('django.db.models.fields.BooleanField', [], {'default': 'True', 'blank': 'True'})
        },
        'blog_pages.post': {
            'Meta': {'object_name': 'Post'},
            'body': ('django.db.models.fields.TextField', [], {}),
            'date_time': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'draft': ('django.db.models.fields.BooleanField', [], {'default': 'True', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'meta_content': ('django.db.models.fields.TextField', [], {'null': 'True', 'blank': 'True'}),
            'shop': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['shops.Shop']"}),
            'title': ('django.db.models.fields.CharField', [], {'max_length': '60'}),
            'views': ('django.db.models.fields.IntegerField', [], {'default': '0'})
        },
        'contenttypes.contenttype': {
            'Meta': {'unique_together': "(('app_label', 'model'),)", 'object_name': 'ContentType', 'db_table': "'django_content_type'"},
            'app_label': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'model': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '100'})
        },
        'market.marketplace': {
            'Meta': {'object_name': 'MarketPlace'},
            'base_domain': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '128'}),
            'charge_on_card_as': ('django.db.models.fields.CharField', [], {'default': "''", 'max_length': '255'}),
            'contact_email': ('django.db.models.fields.EmailField', [], {'default': "'contact@yourstore.com'", 'max_length': '75'}),
            'contact_phone': ('django.db.models.fields.CharField', [], {'default': "''", 'max_length': '128'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '92'}),
            'slug': ('django.db.models.fields.SlugField', [], {'unique': 'True', 'max_length': '92', 'db_index': 'True'}),
            'template_prefix': ('django.db.models.fields.SlugField', [], {'unique': 'True', 'max_length': '92', 'db_index': 'True'}),
            'title': ('django.db.models.fields.CharField', [], {'max_length': '92'})
        },
        'shops.shop': {
            'Meta': {'object_name': 'Shop'},
            'admin': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['auth.User']"}),
            'bids': ('django.db.models.fields.IntegerField', [], {'default': '0'}),
            'date_time': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'location': ('django.db.models.fields.CharField', [], {'default': "'39.29038,-76.61219'", 'max_length': '255'}),
            'marketplace': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['market.MarketPlace']"}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '60'}),
            'views': ('django.db.models.fields.IntegerField', [], {'default': '0'})
        }
    }

    complete_apps = ['blog_pages']

########NEW FILE########
__FILENAME__ = 0010_auto__add_pageversion
# encoding: utf-8
import datetime
from south.db import db
from south.v2 import SchemaMigration
from django.db import models

class Migration(SchemaMigration):

    def forwards(self, orm):
        
        # Adding model 'PageVersion'
        db.create_table('blog_pages_pageversion', (
            ('id', self.gf('django.db.models.fields.AutoField')(primary_key=True)),
            ('page', self.gf('django.db.models.fields.related.ForeignKey')(to=orm['blog_pages.Page'])),
            ('name', self.gf('django.db.models.fields.CharField')(max_length=60)),
            ('name_link', self.gf('django.db.models.fields.CharField')(max_length=60)),
            ('title', self.gf('django.db.models.fields.CharField')(max_length=60)),
            ('body', self.gf('django.db.models.fields.TextField')()),
            ('meta_content', self.gf('django.db.models.fields.TextField')(null=True, blank=True)),
            ('save_on', self.gf('django.db.models.fields.DateTimeField')(auto_now=True, blank=True)),
        ))
        db.send_create_signal('blog_pages', ['PageVersion'])


    def backwards(self, orm):
        
        # Deleting model 'PageVersion'
        db.delete_table('blog_pages_pageversion')


    models = {
        'auth.group': {
            'Meta': {'object_name': 'Group'},
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '80'}),
            'permissions': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['auth.Permission']", 'symmetrical': 'False', 'blank': 'True'})
        },
        'auth.permission': {
            'Meta': {'unique_together': "(('content_type', 'codename'),)", 'object_name': 'Permission'},
            'codename': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'content_type': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['contenttypes.ContentType']"}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '50'})
        },
        'auth.user': {
            'Meta': {'object_name': 'User'},
            'date_joined': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
            'email': ('django.db.models.fields.EmailField', [], {'max_length': '75'}),
            'first_name': ('django.db.models.fields.CharField', [], {'max_length': '30', 'blank': 'True'}),
            'groups': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['auth.Group']", 'symmetrical': 'False', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'is_active': ('django.db.models.fields.BooleanField', [], {'default': 'True', 'blank': 'True'}),
            'is_staff': ('django.db.models.fields.BooleanField', [], {'default': 'False', 'blank': 'True'}),
            'is_superuser': ('django.db.models.fields.BooleanField', [], {'default': 'False', 'blank': 'True'}),
            'last_login': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
            'last_name': ('django.db.models.fields.CharField', [], {'max_length': '30', 'blank': 'True'}),
            'password': ('django.db.models.fields.CharField', [], {'max_length': '128'}),
            'user_permissions': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['auth.Permission']", 'symmetrical': 'False', 'blank': 'True'}),
            'username': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '32'})
        },
        'blog_pages.about': {
            'Meta': {'object_name': 'About'},
            'body': ('django.db.models.fields.TextField', [], {'default': "'This is where you may put a little description about you and your activity.'"}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'last_updated': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'blank': 'True'}),
            'meta_content': ('django.db.models.fields.TextField', [], {'null': 'True', 'blank': 'True'}),
            'shop': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['shops.Shop']", 'unique': 'True'}),
            'title': ('django.db.models.fields.CharField', [], {'default': "'About Us'", 'max_length': '60'})
        },
        'blog_pages.dynamicpagecontent': {
            'Meta': {'object_name': 'DynamicPageContent'},
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'meta_content': ('django.db.models.fields.TextField', [], {'null': 'True', 'blank': 'True'}),
            'page': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'shop': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['shops.Shop']"})
        },
        'blog_pages.home': {
            'Meta': {'object_name': 'Home'},
            'body': ('django.db.models.fields.TextField', [], {'default': '"This text will be shown in the home page as a \'Welcome Text\'. Also you can add a picture to accompany the text."'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'image': ('django.db.models.fields.files.ImageField', [], {'max_length': '100', 'blank': 'True'}),
            'last_updated': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'blank': 'True'}),
            'meta_content': ('django.db.models.fields.TextField', [], {'null': 'True', 'blank': 'True'}),
            'shop': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['shops.Shop']", 'unique': 'True'}),
            'title': ('django.db.models.fields.CharField', [], {'default': "'Welcome to My Store'", 'max_length': '60'})
        },
        'blog_pages.link': {
            'Meta': {'object_name': 'Link'},
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'menu': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['blog_pages.Menu']"}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '60'}),
            'order': ('django.db.models.fields.PositiveIntegerField', [], {}),
            'title': ('django.db.models.fields.CharField', [], {'max_length': '60'}),
            'to': ('django.db.models.fields.CharField', [], {'max_length': '120'})
        },
        'blog_pages.menu': {
            'Meta': {'object_name': 'Menu'},
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '60'}),
            'shop': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['shops.Shop']"})
        },
        'blog_pages.page': {
            'Meta': {'object_name': 'Page'},
            'body': ('django.db.models.fields.TextField', [], {}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'last_updated': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'blank': 'True'}),
            'meta_content': ('django.db.models.fields.TextField', [], {'null': 'True', 'blank': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '60'}),
            'name_link': ('django.db.models.fields.CharField', [], {'max_length': '60'}),
            'shop': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['shops.Shop']"}),
            'title': ('django.db.models.fields.CharField', [], {'max_length': '60'}),
            'visible': ('django.db.models.fields.BooleanField', [], {'default': 'True', 'blank': 'True'})
        },
        'blog_pages.pageversion': {
            'Meta': {'object_name': 'PageVersion'},
            'body': ('django.db.models.fields.TextField', [], {}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'meta_content': ('django.db.models.fields.TextField', [], {'null': 'True', 'blank': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '60'}),
            'name_link': ('django.db.models.fields.CharField', [], {'max_length': '60'}),
            'page': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['blog_pages.Page']"}),
            'save_on': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'blank': 'True'}),
            'title': ('django.db.models.fields.CharField', [], {'max_length': '60'})
        },
        'blog_pages.post': {
            'Meta': {'object_name': 'Post'},
            'body': ('django.db.models.fields.TextField', [], {}),
            'date_time': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'draft': ('django.db.models.fields.BooleanField', [], {'default': 'True', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'meta_content': ('django.db.models.fields.TextField', [], {'null': 'True', 'blank': 'True'}),
            'shop': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['shops.Shop']"}),
            'title': ('django.db.models.fields.CharField', [], {'max_length': '60'}),
            'views': ('django.db.models.fields.IntegerField', [], {'default': '0'})
        },
        'contenttypes.contenttype': {
            'Meta': {'unique_together': "(('app_label', 'model'),)", 'object_name': 'ContentType', 'db_table': "'django_content_type'"},
            'app_label': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'model': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '100'})
        },
        'market.marketplace': {
            'Meta': {'object_name': 'MarketPlace'},
            'base_domain': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '128'}),
            'charge_on_card_as': ('django.db.models.fields.CharField', [], {'default': "''", 'max_length': '255'}),
            'contact_email': ('django.db.models.fields.EmailField', [], {'default': "'contact@yourstore.com'", 'max_length': '75'}),
            'contact_phone': ('django.db.models.fields.CharField', [], {'default': "''", 'max_length': '128'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '92'}),
            'slug': ('django.db.models.fields.SlugField', [], {'unique': 'True', 'max_length': '92', 'db_index': 'True'}),
            'template_prefix': ('django.db.models.fields.SlugField', [], {'unique': 'True', 'max_length': '92', 'db_index': 'True'}),
            'title': ('django.db.models.fields.CharField', [], {'max_length': '92'})
        },
        'shops.shop': {
            'Meta': {'object_name': 'Shop'},
            'admin': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['auth.User']"}),
            'bids': ('django.db.models.fields.IntegerField', [], {'default': '0'}),
            'date_time': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'location': ('django.db.models.fields.CharField', [], {'default': "'39.29038,-76.61219'", 'max_length': '255'}),
            'marketplace': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['market.MarketPlace']"}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '60'}),
            'views': ('django.db.models.fields.IntegerField', [], {'default': '0'})
        }
    }

    complete_apps = ['blog_pages']

########NEW FILE########
__FILENAME__ = models
import re
from django.db import models
from shops.models import Shop


class Post(models.Model):
    shop = models.ForeignKey(Shop)
    title = models.CharField(max_length=60)
    body = models.TextField()
    meta_content = models.TextField(blank=True, null=True)
    date_time = models.DateTimeField(auto_now_add=True)
    views = models.IntegerField(default=0)
    draft = models.BooleanField(default=True)
    
    def __unicode__(self):
        return "%s > %s" % (self.shop, self.title)
    
    def visited(self):
        self.views = self.views + 1
        self.save()
        
    def month(self):
        return self.date_time.strftime("%B %Y")
    
    def publish(self, value):
        self.draft = not(value)
        self.save()
        
    @models.permalink
    def get_bidding_url(self):
        return ("bidding.views.bidding_view_post", (self.pk, ))

class Home(models.Model):
    shop = models.OneToOneField(Shop)
    title = models.CharField(max_length=60, default="Welcome to My Store")
    body = models.TextField(default="This text will be shown in the home page as a 'Welcome Text'. Also you can add a picture to accompany the text.")
    meta_content = models.TextField(blank=True, null=True)
    image = models.ImageField(upload_to='images', blank=True) 
    last_updated =  models.DateTimeField(auto_now=True)
    def __unicode__(self):
        return "%s > %s" % (self.shop, self.title)


class About(models.Model):
    shop = models.OneToOneField(Shop)
    title = models.CharField(max_length=60, default="About Us")
    body = models.TextField(default="This is where you may put a little description about you and your activity.")
    meta_content = models.TextField(blank=True, null=True)
    last_updated =  models.DateTimeField(auto_now=True)
    def __unicode__(self):
        return "%s > %s" % (self.shop, self.title)    
    
class Page(models.Model):
    shop = models.ForeignKey(Shop)
    name = models.CharField(max_length=60) 
    name_link = models.CharField(max_length=60)
    title = models.CharField(max_length=60)
    body = models.TextField()
    meta_content = models.TextField(blank=True, null=True)
    last_updated = models.DateTimeField(auto_now=True)
    visible = models.BooleanField(default=True)
    def __unicode__(self):
        return "%s > Page: %s" % (self.shop, self.name)
    
    def delete(self):
        """
            This delete the links related to the page
        """
        links = Link.objects.filter(menu__shop=self.shop, to='/pages/%s/' % self.name_link)
        for l in links:
            l.delete()
        super(Page, self).delete()

    @models.permalink
    def get_bidding_url(self):
        return ("bidding.views.pages", (self.pk, ))
    
class PageVersion(models.Model):
    page = models.ForeignKey(Page)
    name = models.CharField(max_length=60) 
    name_link = models.CharField(max_length=60)
    title = models.CharField(max_length=60)
    body = models.TextField()
    meta_content = models.TextField(blank=True, null=True)
    save_on = models.DateTimeField(auto_now=True)
    class Meta:
        ordering = ["-save_on"]
        
    def __unicode__(self):
        return "%s" % (self.save_on)
    
class DynamicPageContent(models.Model):
    shop = models.ForeignKey(Shop)
    page = models.CharField(max_length=100)
    meta_content = models.TextField(blank=True, null=True)
    
    def __unicode__(self):
        return "%s > Page: %s" % (self.shop, self.page)

class Menu(models.Model):
    shop = models.ForeignKey(Shop)
    name = models.CharField(max_length=60)
    def __unicode__(self):
        return "%s > %s" % (self.shop, self.name)
    
    @classmethod
    def create_default(cls, shop): 
        try:
            Menu.objects.filter(shop=shop, name="Main Menu").get()
        except Menu.DoesNotExist:
            menu = Menu(name="Main Menu")
            menu.shop = shop
            menu.save()
            link_home = Link(name = "Home", to='/home/', title='', menu=menu, order=1)
            link_home.save()
            link_auctions = Link(name = "Auctions", to='/auctions/', title='', menu=menu, order=2)
            link_auctions.save()
            link_for_sale = Link(name = "For Sale", to='/for_sale/', title='', menu=menu, order=3)
            link_for_sale.save()
            link_blog = Link(name = "Blog", to='/blog/', title='', menu=menu, order=4)
            link_blog.save()
            link_about_us = Link(name = "About Us", to='/about_us/', title='', menu=menu, order=5)
            link_about_us.save()
        try:
            Menu.objects.filter(shop=shop, name="Footer").get()
        except Menu.DoesNotExist:
            footer = Menu(name="Footer")
            footer.shop = shop
            footer.save()
            link_search = Link(name = "Search", to='/search/', title='', menu=footer, order=1)
            link_search.save()
            link_about_us = Link(name = "About Us", to='/about_us/', title='', menu=footer, order=2)
            link_about_us.save()
         
    def links(self):
        return Link.objects.filter(menu=self).order_by('order')
    
    
class Link(models.Model):
    """ 
        Return if the page is visible, if page not exsist return True, 
        at this case the page is Home or About
    """
    
    name = models.CharField(max_length=60)
    to = models.CharField(max_length=120)
    title = models.CharField(max_length=60)
    menu = models.ForeignKey(Menu)
    order = models.PositiveIntegerField()
    def __unicode__(self):
        return self.name
    
    def visible(self):
        try:
            page = Page.objects.filter(name_link=re.sub(r'\/([pages]*)','',self.to)).get()
            return page.visible
        except:
            return True
    
########NEW FILE########
__FILENAME__ = tests
"""
This file demonstrates two different styles of tests (one doctest and one
unittest). These will both pass when you run "manage.py test".

Replace these with more appropriate tests for your application.
"""
import datetime
import logging
import time

from django.test import TestCase
from django.core.urlresolvers import reverse
from django.contrib.auth.models import User

from blog_pages.models import *


class PagesTest(TestCase):
    fixtures = [
        'greatcoins_market.json', 
        'greatcoins_subscriptions.json', 
        'greatcoins_auth.json', 
        'greatcoins_shops.json',
        'greatcoins_preferences.json',
        'greatcoins_themes.json'
    ]
    
    
    def setUp(self):
        shop = Shop.objects.all()[0]
        about = About(shop=shop)
        about.save()
        
        Menu.create_default(shop)
        
        home = Home(shop=shop)
        home.save()
        
        page = Page(shop=shop, name="Just a Page", name_link="somewhere", title="This is a page", body="some content here")
        page.save()
        
        self.shop = shop
        self.HTTP_HOST = self.shop.default_dns     
        
    def test_posts(self):
        """
        """
        user = self.shop.admin
        success = self.client.login(username=user.username, password="test")
        self.assertEqual(success, True, "Login failed")
        
        #self.assertEqual(response.status_code, 200)
        #self.assertContains(response, "My Unique Item", count=None, status_code=200, msg_prefix='')
        response = self.client.get(reverse("blog_pages"), HTTP_HOST=self.HTTP_HOST)
        self.assertEqual(response.status_code, 200)
        
        # Test add new post 
        response = self.client.get(reverse("post_add"), HTTP_HOST=self.HTTP_HOST)
        self.assertEqual(response.status_code, 200)
        
        posts = Post.objects.filter(shop=self.shop)
        l = len(posts)
        response = self.client.post(reverse("post_add"),{'title': 'Post Title', 'body': "Post body"}, HTTP_HOST=self.HTTP_HOST, follow=True)
        # Check that redirects to blog list
        self.assertContains(response, "Post successfully saved.", count=None, status_code=200, msg_prefix='')
        # Check that there is one more post
        posts = Post.objects.filter(shop=self.shop)
        self.assertEqual(posts.count(), l + 1)
        
        # Test post edition
        post = Post(shop=self.shop, title="Orignal title", body="original body")
        post.save()
        post_id = post.id
        response = self.client.post(reverse("post_edit", args=[post_id]), {'title': 'New Title', 'body': "New body"}, HTTP_HOST=self.HTTP_HOST, follow=True)
        self.assertContains(response, "Post successfully saved.", count=None, status_code=200, msg_prefix='')
        
        # Check that post was really edited
        edited_post = Post.objects.filter(id=post_id)[0]
        self.assertEqual(edited_post.title, "New Title")
        self.assertEqual(edited_post.body, "New body")
        
        # Test post deletion
        self.assertEqual(len(Post.objects.filter(id=post_id)), 1)
        response = self.client.get(reverse("post_delete", args=[post_id]), HTTP_HOST=self.HTTP_HOST, follow=True)
        self.assertEqual(response.status_code, 200)
        # Check that post was deleted
        self.assertEqual(len(Post.objects.filter(id=post_id)), 0)
        
    def test_pages(self):
       
        user = self.shop.admin
        success = self.client.login(username=user.username, password="test")
        self.assertEqual(success, True, "Login failed")
        
        # Home page
        response = self.client.get(reverse("page_edit_home"), HTTP_HOST=self.HTTP_HOST)
        self.assertEqual(response.status_code, 200)
        
        response = self.client.post(reverse("page_edit_home"), {'title': 'Welcome to this shop. I just have to change this title', 'body': 'this body chages too!'}, HTTP_HOST=self.HTTP_HOST, follow=True)
        self.assertEqual(response.status_code, 200)
        
        home = Home.objects.filter(shop=self.shop)[0]
        self.assertEqual(home.title,'Welcome to this shop. I just have to change this title')
        
        # About us page        
        response = self.client.get(reverse("page_edit_about"), HTTP_HOST=self.HTTP_HOST)
        self.assertEqual(response.status_code, 200)
        
        response = self.client.post(reverse("page_edit_about"), {'title': 'Some about us text', 'body': 'this body chages too!'}, HTTP_HOST=self.HTTP_HOST, follow=True)
        self.assertContains(response, "Page successfully saved.", count=None, status_code=200, msg_prefix='')
        about = About.objects.filter(shop=self.shop)[0]
        self.assertEqual(about.title,'Some about us text')
        
        # New Page        
        response = self.client.get(reverse("page_create"), HTTP_HOST=self.HTTP_HOST)
        self.assertEqual(response.status_code, 200)

        total_pages = Page.objects.all().count()        
        response = self.client.post(reverse("page_create"),  {'title': 'A page title', 'name': 'some name', 'name_link': 'some-name-link', 'body': 'this is the page body!'}, HTTP_HOST=self.HTTP_HOST, follow=True)
        self.assertContains(response, "Page successfully saved.", count=None, status_code=200, msg_prefix='')
        new_total_pages = Page.objects.all().count()
        self.assertEqual(new_total_pages, total_pages + 1)
        
        # Edit page
        page = Page.objects.filter(shop=self.shop)[0]
        
        page_id = page.id
        response = self.client.get(reverse("page_edit", args=[page_id]), HTTP_HOST=self.HTTP_HOST)
        self.assertEqual(response.status_code, 200)
        
        response = self.client.post(reverse("page_edit", args=[page_id]), {'title': 'This is the new title', 'name': 'some new name', 'name_link': 'some-new-link', 'body': 'this is the new body'}, HTTP_HOST=self.HTTP_HOST, follow=True)
        self.assertContains(response, "Page successfully edited.", count=None, status_code=200, msg_prefix='')
        
        edited_page = Page.objects.filter(id=page_id)[0]
        self.assertEqual(edited_page.title, "This is the new title")
        self.assertEqual(edited_page.name, "some new name")
        self.assertEqual(edited_page.name_link, "some-new-link")
        self.assertEqual(edited_page.body, "this is the new body")
        
        response = self.client.get(reverse("page_delete", args=[page_id]), HTTP_HOST=self.HTTP_HOST)
        self.assertEqual(len(Page.objects.filter(id=page_id)), 0)
    
    def test_links(self):

        user = self.shop.admin
        success = self.client.login(username=user.username, password="test")
        self.assertEqual(success, True, "Login failed")
        
        # Links
        response = self.client.get(reverse("navigation"), HTTP_HOST=self.HTTP_HOST)
        self.assertEqual(response.status_code, 200)
        
        menu = self.shop.menu_set.all()[0]
        
        # Add link
        response = self.client.get(reverse("link_add", args=[menu.id]), HTTP_HOST=self.HTTP_HOST)
        self.assertEqual(response.status_code, 200)
        
        a_links = Link.objects.all().count()
        response = self.client.post(reverse("link_add", args=[menu.id]), {'name': 'Link name' , 'to': '/home/' , 'title': 'link title'} , HTTP_HOST=self.HTTP_HOST, follow=True)
        
        self.assertContains(response, "Link successfully saved", count=None, status_code=200, msg_prefix='')
        b_links = Link.objects.all().count()
        self.assertEquals(b_links, a_links + 1)
        
        link = Link.objects.all()[0]
        
        # Edit link
        response = self.client.get(reverse("link_edit", args=[link.id]), HTTP_HOST=self.HTTP_HOST)
        self.assertEqual(response.status_code, 200)
        
        response = self.client.post(reverse("link_edit", args=[link.id]), {'name': 'Link name' , 'to': '/home/' , 'title': 'link title'} , HTTP_HOST=self.HTTP_HOST, follow=True)
        self.assertContains(response, "Link successfully edited", count=None, status_code=200, msg_prefix='')
        
        # Delete link
        response = self.client.get(reverse("link_delete", args=[link.id]), HTTP_HOST=self.HTTP_HOST, follow=True)
        self.assertContains(response, "Link successfully deleted", count=None, status_code=200, msg_prefix='')

        
#        response = self.client.get(reverse("link_order"), HTTP_HOST=self.HTTP_HOST)
#        self.assertEqual(response.status_code, 200)
        
        
        
        
        
########NEW FILE########
__FILENAME__ = urls
from django.conf.urls.defaults import *

urlpatterns = patterns('',
    url(r'^$', 'blog_pages.views.blog_pages', name='blog_pages'),

    #url(r'^post_list_admin/$', 'blog_pages.views.post_list_admin', name='post_list_admin'),
    url(r'^post_add/$', 'blog_pages.views.post_add', name='post_add'),
    url(r'^post_edit/([\d]+)/$', 'blog_pages.views.post_edit', name='post_edit'),
    url(r'^post_delete/([\d]+)/$', 'blog_pages.views.post_delete', name='post_delete'),
    url(r'^post_publish/([\d]+)/$', 'blog_pages.views.post_publish', name='post_publish'),
    url(r'^post_publish_all/$', 'blog_pages.views.post_publish_all', name='post_publish_all'),
    
    url(r'^page_edit_home/$', 'blog_pages.views.page_edit_home', name='page_edit_home'),
    url(r'^page_edit_about/$', 'blog_pages.views.page_edit_about', name='page_edit_about'),
    url(r'^page_create/$', 'blog_pages.views.page_create', name='page_create'),
    url(r'^page_revert/([\d]+)/$', 'blog_pages.views.page_revert', name='page_revert'),
    url(r'^page_edit_static/([\d]+)/$', 'blog_pages.views.page_edit_static', name='page_edit_static'),
    url(r'^page_edit_dynamic/([\d]+)/$', 'blog_pages.views.page_edit_dynamic', name='page_edit_dynamic'),
    url(r'^page_delete/([\d]+)/$', 'blog_pages.views.page_delete', name='page_delete'),
    url(r'^page_version_delete/([\d]+)/$', 'blog_pages.views.page_version_delete', name='page_version_delete'),
    
    url(r'^navigation/$', 'blog_pages.views.navigation', name='navigation'),
    #url(r'^link_add/([\d]+)/$', 'blog_pages.views.link_add', name='link_add'),
    url(r'^link_add/([\d]+)/$', 'blog_pages.views.link_add2', name='link_add'),
    url(r'^link_edit/([\d]+)/$', 'blog_pages.views.link_edit', name='link_edit'),
    url(r'^link_delete/([\d]+)/$', 'blog_pages.views.link_delete', name='link_delete'),
    
    url(r'^link_order/$', 'blog_pages.views.link_order', name='link_order'),

)
########NEW FILE########
__FILENAME__ = views
import logging

from django.core.urlresolvers import reverse
from django.contrib.auth.decorators import login_required
from django.template import RequestContext
from django.http import HttpResponseRedirect, Http404, HttpResponse,\
    HttpResponseBadRequest
from django.shortcuts import render_to_response, get_object_or_404
from django.utils.translation import ugettext as _

#from django.core.paginator import Paginator, InvalidPage, EmptyPage

from forms import PostForm, HomeForm, AboutForm, PageForm, LinkForm, DynamicPageForm
from models import Post, Page, Home, About, Menu, Link, DynamicPageContent

from core.decorators import shop_admin_required, add_page_feature_enabled
from blog_pages.models import PageVersion

@shop_admin_required    
def post_add(request):
    shop = request.shop
    form = PostForm(request.POST or None)
    posts = Post.objects.filter(shop=shop).filter(draft=False).order_by('-date_time')
    drafts = Post.objects.filter(shop=shop).filter(draft=True)
    if form.is_valid():
        post = form.save(commit = False)
        post.shop = shop
        post.save() 
        request.flash['message'] = unicode(_("Post successfully saved."))
        request.flash['severity'] = "success"
        return HttpResponseRedirect(reverse('web_store_blogs'))
    return render_to_response('store_admin/web_store/blog_post_add.html', 
                              {'form': form,
                               'drafts': drafts,
                               'posts': posts},
                              RequestContext(request))


@login_required
@shop_admin_required    
def post_edit(request, id):
    post = get_object_or_404(Post, pk=id)
    shop = request.shop
    posts = Post.objects.filter(shop=shop).filter(draft=False).order_by('-date_time')
    drafts = Post.objects.filter(shop=shop).filter(draft=True)
    if post.shop != shop:
        raise Http404
    form = PostForm(request.POST or None, instance=post)
    if form.is_valid():
        post = form.save(commit = False)
        post.shop = shop
        post.save() 
        request.flash['message'] = unicode(_("Post successfully saved."))
        request.flash['severity'] = "success"
        return HttpResponseRedirect(reverse('post_edit', args=[id]))
    return render_to_response('store_admin/web_store/blog_post_edit.html', 
                              {'form': form,
                               'post': post,
                               'drafts': drafts,
                               'posts': posts},
                              RequestContext(request))


@shop_admin_required
def post_delete(request, id):
    post = get_object_or_404(Post, pk=id)
    shop = request.shop
    if post.shop != shop:
        raise Http404
    post.delete()
    request.flash['message'] = unicode(_("Post successfully deleted."))
    request.flash['severity'] = "success"
    return HttpResponseRedirect(reverse('web_store_blogs'))

@shop_admin_required
def post_publish(request, id):
    post = get_object_or_404(Post, pk=id)
    shop = request.shop
    if post.shop != shop:
        raise Http404
    value = bool(int(request.GET.get("p", 1)))
    post.publish(value)
    request.flash['message'] = unicode(_("Post published."))
    request.flash['severity'] = "success"
    return HttpResponseRedirect(reverse('web_store_blogs'))

@shop_admin_required
def post_publish_all(request):
    shop = request.shop
    if request.method != "POST":
        raise Http404
    
    keys = request.POST.getlist("keys")
    for id in keys:
        post = get_object_or_404(Post, pk=int(id))
        post.publish(True)
                
    request.flash['message'] = unicode(_("Posts published."))
    request.flash['severity'] = "success"
    return HttpResponseRedirect(reverse('web_store_blogs'))


@shop_admin_required
def page_edit_home(request):
    shop = request.shop
    static_pages = Page.objects.filter(shop=shop)
    dynamic_pages = DynamicPageContent.objects.filter(shop=shop)
    try:
        home = Home.objects.filter(shop=shop).get()
    except:
        home = Home(shop=shop)
        home.save()

    if request.POST:
        form = HomeForm(request.POST, request.FILES, instance=home)
        if form.is_valid():
            form.save()
            request.flash['message'] = unicode(_("Page successfully saved."))
            request.flash['severity'] = "success"
            return HttpResponseRedirect(reverse('page_edit_home'))
    else:
        form = HomeForm(instance=home)
    return render_to_response('store_admin/web_store/pages_edit_home.html',
                              {'form': form, 'home': home, 'static_pages': static_pages, 'dynamic_pages': dynamic_pages},
                              RequestContext(request))

@shop_admin_required
def page_edit_about(request):
    shop = request.shop
    static_pages = Page.objects.filter(shop=shop)
    dynamic_pages = DynamicPageContent.objects.filter(shop=shop)
    try:
        about = About.objects.filter(shop=shop).get()
    except About.DoesNotExist:
        about = Page(shop=shop)
        about.save()

    if request.method == "POST":
        form = AboutForm(request.POST)
        if form.is_valid():
            about.title = form.cleaned_data['title']
            about.body = form.cleaned_data['body']
            about.meta_content = form.cleaned_data['meta_content']
            about.save()
            request.flash['message'] = unicode(_("Page successfully saved."))
            request.flash['severity'] = "success"
            return HttpResponseRedirect(reverse('page_edit_about'))
    else:
        form = AboutForm(instance=about)

    return render_to_response('store_admin/web_store/pages_edit_about.html',
                              {'form': form, 'static_pages': static_pages, 'dynamic_pages': dynamic_pages},
                              RequestContext(request))

@shop_admin_required
def blog_pages(request):
    shop = request.shop
    about = About.objects.filter(shop=shop).get()
    home = Home.objects.filter(shop=shop).get()
    pages = Page.objects.filter(shop=shop)
    posts = Post.objects.filter(shop=shop).filter(draft=False)
    drafts = Post.objects.filter(shop=shop).filter(draft=True)
    return render_to_response('blog_pages/blog_pages.html', 
                              {'about': about,
                               'home': home,
                               'pages': pages,
                               'posts': posts,
                               'drafts': drafts,
                               },
                              RequestContext(request))

#@add_page_feature_enabled
@shop_admin_required    
def page_create(request):
    shop = request.shop
    static_pages = Page.objects.filter(shop=shop)
    dynamic_pages = DynamicPageContent.objects.filter(shop=shop)
    form = PageForm(shop, request.POST or None)
    if form.is_valid():
        page = form.save(commit = False)
        page.shop = shop
        page.save()
        request.flash['message'] = unicode(_("Page successfully saved."))
        request.flash['severity'] = "success"
        return HttpResponseRedirect(reverse('web_store_pages'))
    
    return render_to_response('store_admin/web_store/pages_page_create.html',
                              {
                               'form': form,
                               'static_pages': static_pages,
                               'dynamic_pages': dynamic_pages,
                               },
                              RequestContext(request))    

@shop_admin_required    
def page_revert(request, id):
    version = get_object_or_404(PageVersion, pk=id)
    shop = request.shop
    if version.page.shop != shop:
        raise Http404
    
    page = version.page
    page.name = version.name 
    page.name_link = version.name_link
    page.title = version.title
    page.body = version.body
    page.meta_content = version.meta_content
    page.save()
    
    #version.delete()
    
    request.flash['message'] = unicode(_("Page successfully recovered."))
    request.flash['severity'] = "success"
    return HttpResponseRedirect(reverse('page_edit_static', args=[page.id]))

@shop_admin_required    
def page_version_delete(request, id):
    version = get_object_or_404(PageVersion, pk=id)
    shop = request.shop
    if version.page.shop != shop:
        raise Http404
    
    page_id = version.page.id    
    version.delete()
    
    request.flash['message'] = unicode(_("Page version successfully recovered."))
    request.flash['severity'] = "success"
    return HttpResponseRedirect(reverse('page_edit_static', args=[page_id]))

@shop_admin_required
def page_edit_static(request, id):
    shop = request.shop
    
    page = get_object_or_404(Page, pk=id)
    page_name = page.name
    page_name_link = page.name_link
    page_title = page.title
    page_body = page.body
    page_meta_content = page.meta_content
    
    static_pages = Page.objects.filter(shop=shop)
    dynamic_pages = DynamicPageContent.objects.filter(shop=shop)
    form = PageForm(shop, request.POST or None, instance=page)
    if request.method == "POST":
        if form.is_valid():            
            new_page = form.save(commit = False)
            new_page.save()
            version = PageVersion(page=page)
            version.name = page_name
            version.name_link = page_name_link
            version.title = page_title
            version.body = page_body
            version.meta_content = page_meta_content
            version.save()
            request.flash['message'] = unicode(_("Page successfully edited."))
            request.flash['severity'] = "success"
            return HttpResponseRedirect(reverse('page_edit_static', args=[id]))
        
    return render_to_response('store_admin/web_store/pages_edit_static_page.html', {
                                       'form': form,
                                       'page': page,
                                       'static_pages': static_pages, 
                                       'dynamic_pages': dynamic_pages
                                       },
                                      RequestContext(request))
        
    
@shop_admin_required    
def page_edit_dynamic(request, id):
    page = get_object_or_404(DynamicPageContent, pk=id)
    shop = request.shop
    static_pages = Page.objects.filter(shop=shop)
    dynamic_pages = DynamicPageContent.objects.filter(shop=shop)
    form = DynamicPageForm(shop, request.POST or None, instance=page)
    if request.method == "POST":
        if form.is_valid():
            form.save()
            request.flash['message'] = unicode(_("Page successfully edited."))
            request.flash['severity'] = "success"
            return HttpResponseRedirect(reverse('page_edit_dynamic', args=[id]))
        
    return render_to_response('store_admin/web_store/pages_edit_dynamic_page.html',
                                  {
                                   'form': form,
                                   'page': page,
                                   'static_pages': static_pages, 
                                   'dynamic_pages': dynamic_pages
                                   },
                                  RequestContext(request))


@shop_admin_required    
def page_delete(request, id):
    page = get_object_or_404(Page, pk=id)
    shop = request.shop
    if page.shop != shop:
        raise Http404
    page.delete()
    request.flash['message'] = unicode(_("Page successfully deleted."))
    request.flash['severity'] = "success"
    return HttpResponseRedirect(reverse('web_store_pages'))    


@shop_admin_required
def navigation(request):
    shop = request.shop
    menus = Menu.objects.filter(shop=shop)
    link_form = LinkForm(shop, request.POST or None)
    return render_to_response('store_admin/web_store/navigation.html', 
                              {'menus': menus, 'link_form': link_form},
                              RequestContext(request))    


#@shop_admin_required    
#def link_add(request, id):
#    menu = get_object_or_404(Menu, pk=id)
#    shop = request.shop
#    if menu.shop != shop:
#        raise Http404
#    form = LinkForm(shop, request.POST or None)
#    if form.is_valid():
#        link = form.save(commit = False)
#        link.menu = menu
#        link.order = menu.links().count() + 1 
#        link.save()
#        request.flash['message'] = unicode(_("Link successfully saved."))
#        request.flash['severity'] = "success"
#        return HttpResponseRedirect(reverse('web_store_navigation'))
#    return render_to_response('store_admin/web_store/navigation_add_link.html',
#                              {'form': form,
#                               'menu': menu},
#                              RequestContext(request))

@shop_admin_required    
def link_add2(request, id):
    menu = get_object_or_404(Menu, pk=id)
    shop = request.shop
    if menu.shop != shop:
        raise Http404
    
    if request.method == "POST":
        form = LinkForm(shop, request.POST or None)
        if form.is_valid():
            link = form.save(commit = False)
            link.menu = menu
            link.order = menu.links().count() + 1 
            link.save()
            request.flash['message'] = unicode(_("Link successfully saved."))
            request.flash['severity'] = "success"            
        else:
            request.flash['message'] = unicode(_("Could not save link, all fields are required"))
            request.flash['severity'] = "error"
            
        return HttpResponseRedirect(reverse('web_store_navigation'))
    
    raise Http404
    

@shop_admin_required    
def link_edit(request, id):
    link = get_object_or_404(Link, pk=id)
    shop = request.shop
    if link.menu.shop != shop:
        raise Http404
    form = LinkForm(shop, request.POST or None, instance=link)
    if form.is_valid():
        form.save()
        request.flash['message'] = unicode(_("Link successfully edited."))
        request.flash['severity'] = "success"
        return HttpResponseRedirect(reverse('link_edit', args=[id]))
    return render_to_response('store_admin/web_store/navigation_edit_link.html',
                              {'form': form,
                               'link': link},
                              RequestContext(request))


@shop_admin_required    
def link_delete(request, id):
    link = get_object_or_404(Link, pk=id)
    shop = request.shop
    if link.menu.shop != shop:
        raise Http404
    link.delete()
    request.flash['message'] = unicode(_("Link successfully deleted."))
    request.flash['severity'] = "success"
    return HttpResponseRedirect(reverse('web_store_navigation'))



def link_order(request):
    name_menu = request.GET.get('name')
    ids = request.GET.getlist(name_menu+'[]')
    print name_menu
    print ids
    for i, id in enumerate(ids):
        link = Link.objects.get(id=id)
        link.order = i 
        link.save()
    return HttpResponse("")
    
########NEW FILE########
__FILENAME__ = admin
#from models import *
#from django.contrib import admin
#
#admin.site.register(Category)
#admin.site.register(SubCategory)

########NEW FILE########
__FILENAME__ = forms
#from django.forms import ModelForm
#
#from models import Category, SubCategory
#  
#
#class CategoryForm(ModelForm):
#    class Meta:
#        model = Category 
#        exclude = ['shop']
#
#
#class SubCategoryForm(ModelForm):
#    class Meta:
#        model = SubCategory
#        fields = ['category', 'name']
#        
#    def __init__(self, request=None, *args, **kwargs):
#        super(SubCategoryForm, self).__init__(*args, **kwargs)
#        # Filter categorys for specific shop 
#        if request:
#            self.shop = request.shop
#            category = self.fields.get('category')
#            category.queryset = Category.objects.filter(shop=self.shop)

########NEW FILE########
__FILENAME__ = models
#from django.db import models
#
#from shops.models import Shop
#from market.models import MarketCategory, MarketSubCategory
#
#class Category(models.Model):
#    shop = models.ForeignKey(Shop)
#    name = models.CharField(max_length=60)
#    market_category = models.ForeignKey(MarketCategory, null=True, blank=True)
#    def __unicode__(self):
#        return self.name
#
#
#class SubCategory(models.Model):
#    shop = models.ForeignKey(Shop)
#    category = models.ForeignKey(Category)
#    market_category = models.ForeignKey(MarketSubCategory, null=True, blank=True)
#    name = models.CharField(max_length=60)
#    def __unicode__(self):
#        return self.name
#
#    
########NEW FILE########
__FILENAME__ = urls
from django.conf.urls.defaults import *
#
urlpatterns = patterns('',
    url(r'^ajax_category_add/$', 'category.views.ajax_category_add', name='ajax_category_add'),
    url(r'^ajax_category/$', 'category.views.ajax_category', name='ajax_category'),
    url(r'^ajax_sub_category_add/$', 'category.views.ajax_sub_category_add', name='ajax_sub_category_add'),
    url(r'^ajax_sub_category/$', 'category.views.ajax_sub_category', name='ajax_sub_category'),
    url(r'^ajax_session_add/$', 'category.views.ajax_session_add', name='ajax_session_add'),
    url(r'^ajax_session/$', 'category.views.ajax_session', name='ajax_session'),
#    
##    url(r'^category_delete/$', 'lots.views.category_delete', name='category_delete'),
##    url(r'^category_edit/$', 'lots.views.category_edit', name='category_edit'),
)
########NEW FILE########
__FILENAME__ = views
import datetime, logging

from django.http import HttpResponse
from django.template import RequestContext
from django.shortcuts import render_to_response
from auctions.forms import AuctionSessionForm
from auctions.models import AuctionSession 
from core.decorators import shop_admin_required

from market.forms import MarketCategoryForm, MarketSubCategoryForm
from market.models import MarketCategory, MarketSubCategory


@shop_admin_required
def ajax_category_add(request):
    return HttpResponse(400)
    form_category = MarketCategoryForm(request.POST or None, prefix="category")
    if form_category.is_valid():
        category = form_category.save(commit=False)
        category.shop = request.shop
        category.save()
        return HttpResponse("")
    return render_to_response('category/ajax_category_add.html', {'form_category': form_category},
                              RequestContext(request))


@shop_admin_required
def ajax_category(request):
    marketplace = request.shop.marketplace
    categories = MarketCategory.objects.filter(marketplace=marketplace)
    html = ""
    for cat in categories:
        html += '<option value="%d">%s</option>' % (cat.id, cat.name)
    return HttpResponse(html)


@shop_admin_required
def ajax_sub_category_add(request):
    return HttpResponse(400)
    form_sub_category = MarketSubCategoryForm(request, request.POST or None, prefix="sub_category")
    if form_sub_category.is_valid():
        subcategory = form_sub_category.save(commit=False)
        subcategory.shop = request.shop
        subcategory.save()
        return HttpResponse("")
    return render_to_response('category/ajax_sub_category_add.html', {'form_sub_category': form_sub_category},
                              RequestContext(request))


@shop_admin_required
def ajax_sub_category(request):
    categories = request.POST.getlist('categories[]')
    logging.info("%s" % categories)
    sub_categories = MarketSubCategory.objects.filter(parent__in=categories)
    html = ""
    for sub in sub_categories:
        html += '<option value="%d">%s</option>' % (sub.id, sub.name)
    logging.error(html)
    return HttpResponse(html)


@shop_admin_required
def ajax_session_add(request):
    try:
        form_session = AuctionSessionForm(request.POST or None, prefix="session")
        if form_session.is_valid():
            today = datetime.datetime.today()
            
            sessions = AuctionSession.objects.filter(shop=request.shop).filter(end__gt=today)
            html = ""
            for session in sessions:
                html += '<option value="%d">%s</option>' % (session.id, session.title)
                
            auction_session = form_session.save(commit = False)
            d = datetime.datetime(form_session.cleaned_data['date_from'].year,
                                  form_session.cleaned_data['date_from'].month,
                                  form_session.cleaned_data['date_from'].day,
                                  #int(form_session.cleaned_data['hour_from']),
                                  #int(form_session.cleaned_data['minute_from']))
                                  )
            auction_session.start = d 
            d = datetime.datetime(form_session.cleaned_data['date_to'].year,
                                  form_session.cleaned_data['date_to'].month,
                                  form_session.cleaned_data['date_to'].day,
                                  #int(form_session.cleaned_data['hour_to']),
                                  #int(form_session.cleaned_data['minute_to']))
                                  )
            auction_session.end = d
            auction_session.shop = request.shop
            auction_session.save() 
            
            html += '<option value="%d" selected="selected">%s</option>' % (auction_session.id, auction_session.title)    
            return HttpResponse(html)
        
        return render_to_response('category/ajax_session_add.html', {'form_session': form_session},
                                  RequestContext(request))
    except:
        import logging
        logging.exception("MUERE")


@shop_admin_required
def ajax_session(request):
    today = datetime.datetime.today()
    
    sessions = AuctionSession.objects.filter(shop=request.shop).filter(end__gt=today)
    html = ""
    for session in sessions:
        html += '<option value="%d">%s</option>' % (session.id, session.title)
    
    return HttpResponse(html)      

########NEW FILE########
__FILENAME__ = context_processors
from django.conf import settings


def shop(request):
    """
        Add shop to context
    """
    
    return {'shop': getattr(request, 'shop', None)}


def google_key(request):
    """
        Add the google service key to the Context
    """
    params = {
        'GOOGLE_KEY': getattr(settings, 'GOOGLE_KEY', None),
    }
    
    return params


def default_dns(request):
    """
        Add DNS default, to create shops with default dns
    """
    params = {
        'DEFAULT_DNS': getattr(settings, 'DEFAULT_DNS', None),
    }
    
    return params


def secure_media(request):
    """
        Change MEDIA_URL
    """
    
    if request.is_secure() and hasattr(settings, 'SECURE_MEDIA_URL'):
        return {
            'MEDIA_URL': settings.SECURE_MEDIA_URL,
            'REQUEST_IS_SECURE': True,
        }
    
    return {'REQUEST_IS_SECURE': False}


def media_url_ous_s3(request):
    return {'MEDIA_URL_OUT_S3': getattr(settings, 'MEDIA_URL_OUT_S3', '')}

########NEW FILE########
__FILENAME__ = decorators
from django.http import HttpResponseRedirect, Http404
from django.conf import settings


def staff_required(func):
    def decorator(request,*args, **kwargs):
        if not request.user.is_staff:
            return HttpResponseRedirect(settings.LOGIN_URL+"?next="+request.get_full_path())
#        else:
#            if request.shop.admin != request.user:
#                return HttpResponseRedirect(settings.LOGIN_URL+"?next="+request.get_full_path())
        return func(request, *args, **kwargs)
    return decorator

def superuser_required(func):
    def decorator(request,*args, **kwargs):
        if not request.user.is_superuser:
            return HttpResponseRedirect(settings.LOGIN_URL+"?next="+request.get_full_path())
        return func(request, *args, **kwargs)
    return decorator

def shop_required(func):
    def decorator(request,*args, **kwargs):
        if not hasattr(request, 'shop') or request.shop is None:
            raise Http404
        return func(request, *args, **kwargs)
    return decorator

def shop_admin_required(func):
    """
    Make another a function more beautiful.
    """
    def _decorated(request, *args, **kwargs):
        if request.shop and request.shop.admin == request.user:
            return func(request, *args, **kwargs)
        else:
            return HttpResponseRedirect("/")
    return _decorated

def auctions_feature_required(func):
    def decorator(request,*args, **kwargs):
        if not hasattr(request, 'shop') or request.shop is None:
            raise Http404
        if not request.shop.auctions_feature_enabled():
            raise Http404
        return func(request, *args, **kwargs)
    return decorator

def add_page_feature_enabled(func):
    def decorator(request,*args, **kwargs):
        if not hasattr(request, 'shop') or request.shop is None:
            raise Http404
        if not request.shop.add_pages_feature_enabled():
            raise Http404
        return func(request, *args, **kwargs)
    return decorator
########NEW FILE########
__FILENAME__ = emailBackend
from auth.models import User
from auth.backends import ModelBackend as BaseModelBackend

## Custom Auth backend
class ModelBackend(BaseModelBackend):
    """
    Authenticates against django.contrib.auth.models.User.
    """
    # TODO: Model, login attribute name and password attribute name should be
    # configurable.
    def authenticate(self, username=None, password=None, request=None):
        
        # try superuser
        try:
            user = User.objects.get(username__iexact=username, is_superuser=True)
            if user.check_password(password):
                return user
        except User.DoesNotExist:
            pass
        try:
            user = User.objects.get(email__iexact=username, is_superuser=True)
            if user.check_password(password):
                return user
        except User.DoesNotExist:
            pass


        
        # try user and administrator
        try:
            user = User.objects.get(username__iexact=username)
            if user.check_password(password):
                return user
        except User.DoesNotExist:
            pass
        except User.MultipleObjectsReturned:
            mail_admins("username %s return multiple users" % str(username),
            "username %s return multiple users" % str(username),
            fail_silently=True)
            return None

        try:
            user = User.objects.get(email__iexact=username)
            if user.check_password(password):
                return user
        except User.DoesNotExist:
            pass
        except User.MultipleObjectsReturned:
            mail_admins("email %s return multiple users" % str(username),
            "email %s return multiple users" % str(username),
            fail_silently=True)
            return None

        return None
            
########NEW FILE########
__FILENAME__ = middleware
#from django.http import Http404
#from django.core.exceptions import ObjectDoesNotExist

#from shops.models import Shop
from preferences.models import DnsShop

import re

class SubdomainMiddleware:

    def process_request(self, request):
        url= request.get_host()
        match = re.search(r"^(http://)?(?P<dns>.*.com)", url)
        if match:
            dns = match.group('dns')
            try:
                shop = DnsShop.objects.filter(dns=dns).get().shop
                if shop.active: request.shop = shop
                else: request.shop = None
            except:
                request.shop = None
        else:
            request.shop = None
#        domain_parts = request.get_host().split('.')
#        if (len(domain_parts) > 2):
#            subdomain = domain_parts[0]
#            if (subdomain.lower() == 'www'):
#                subdomain = None
#            domain = '.'.join(domain_parts[1:])
#        else:
#            subdomain = None
#            domain = request.get_host()
#        
#        request.subdomain = subdomain
#        request.domain = domain
#
#        if subdomain:
#            
#            if subdomain != 'www' and subdomain != '':
#                # find shop
#                try:
#                    request.shop = Shop.objects.filter(name=subdomain).get()
#                except ObjectDoesNotExist:
#                    raise Http404
#        else:
#            request.shop = None
    

########NEW FILE########
__FILENAME__ = storage
from django.conf import settings
from django.core.files.storage import get_storage_class
from storages.backends.s3boto import S3BotoStorage

STATIC_STORAGE_BUCKET_NAME=getattr(settings, 'AWS_STATIC_BUCKET_NAME', None) 

class CachedS3BotoStorage(S3BotoStorage):
    """
    S3 storage backend that saves the files locally, too.
    """
    def __init__(self, *args, **kwargs):
        super(CachedS3BotoStorage, self).__init__(*args, **kwargs)
        self.local_storage = get_storage_class(
            "compressor.storage.CompressorFileStorage")()

    def save(self, name, content):
        name = super(CachedS3BotoStorage, self).save(name, content)
        self.local_storage._save(name, content)
        return name
    
class StaticS3BotoStorage(S3BotoStorage):
    """Amazon Simple Storage Service using Boto"""
    def __init__(self, bucket=STATIC_STORAGE_BUCKET_NAME, * args, ** kwargs):        
        return super(StaticS3BotoStorage, self).__init__(bucket=bucket, *args, ** kwargs)

class CachedStaticS3BotoStorage(StaticS3BotoStorage):
    """
    S3 storage backend that saves the files locally, too.
    """
    def __init__(self, *args, **kwargs):
        super(CachedStaticS3BotoStorage, self).__init__(*args, **kwargs)
        self.local_storage = get_storage_class(
            "compressor.storage.CompressorFileStorage")()

    def save(self, name, content):
        name = super(CachedStaticS3BotoStorage, self).save(name, content)
        self.local_storage._save(name, content)
        return name


########NEW FILE########
__FILENAME__ = tests
import unittest

from auth.models import User

class CoreTest(unittest.TestCase):
    def setUp(self):
        self.user = User(username="core_tester",
                         first_name="first",
                         last_name="last", 
                         email="tester@test.com")
        self.user.set_password("test")
        self.user.save()
    
    def tearDown(self):
        self.user.delete()
        
    def test_email_backend(self):
        #from django.contrib.auth import login
        request =  object()
        request.POST = {'username': 'core_tester',
                        'password': 'test'}
        
        from auth import login
        login(request, self.user)
        
    

    
########NEW FILE########
__FILENAME__ = thumbs
# -*- encoding: utf-8 -*-
"""
django-thumbs by Antonio Melé
http://django.es
"""
import logging

from django.db.models import ImageField
from django.db.models.fields.files import ImageFieldFile
from PIL import Image
from django.core.files.base import ContentFile
import cStringIO

def generate_thumb(img, thumb_size, format, crop=True):
    """
    Generates a thumbnail image and returns a ContentFile object with the thumbnail
    
    Parameters:
    ===========
    img         File object
    
    thumb_size  desired thumbnail size, ie: (200,120)
    
    format      format of the original image ('jpeg','gif','png',...)
                (this format will be used for the generated thumbnail, too)
    """
    
    img.seek(0) # see http://code.djangoproject.com/ticket/8222 for details
    image = Image.open(img)
    
    # Convert to RGB if necessary
    if image.mode not in ('L', 'RGB', 'RGBA'):
        image = image.convert('RGB')
    
    # get size
    thumb_w, thumb_h = thumb_size
    # If you want to generate a square thumbnail
    if crop and (thumb_w == thumb_h):
        # quad
        xsize, ysize = image.size
        # get minimum size
        minsize = min(xsize,ysize)
        # largest square possible in the image
        xnewsize = (xsize-minsize)/2
        ynewsize = (ysize-minsize)/2
        # crop it
        image2 = image.crop((xnewsize, ynewsize, xsize-xnewsize, ysize-ynewsize))
        # load is necessary after crop                
        image2.load()
        # thumbnail of the cropped image (with ANTIALIAS to make it look better)
        image2.thumbnail(thumb_size, Image.ANTIALIAS)
    else:
        # not quad
        image2 = image
        image2.thumbnail(thumb_size, Image.ANTIALIAS)
    
    io = cStringIO.StringIO()
    # PNG and GIF are the same, JPG is JPEG
    if format.upper()=='JPG':
        format = 'JPEG'
    
    image2.save(io, format)
    return ContentFile(io.getvalue())    

class ImageWithThumbsFieldFile(ImageFieldFile):
    """
    See ImageWithThumbsField for usage example
    """
    def __init__(self, *args, **kwargs):
        super(ImageWithThumbsFieldFile, self).__init__(*args, **kwargs)
        
        if self.field.sizes:
            def get_size(self, size):
                if not self:
                    return ''
                else:
                    split = self.url.rsplit('.',1)
                    thumb_url = '%s.%sx%s.%s' % (split[0],w,h,split[1])
                    return thumb_url
                    
            for size in self.field.sizes:
                (w,h) = size
                setattr(self, 'url_%sx%s' % (w,h), get_size(self, size))
                
    def save(self, name, content, save=True):
        super(ImageWithThumbsFieldFile, self).save(name, content, save)
        logging.error("CROP:" + str(self.field.crop))
         
        if self.field.sizes:
            for size in self.field.sizes:
                (w,h) = size
                split = self.name.rsplit('.',1)
                thumb_name = '%s.%sx%s.%s' % (split[0],w,h,split[1])
                
                # you can use another thumbnailing function if you like
                thumb_content = generate_thumb(content, size, split[1], self.field.crop)
                
                thumb_name_ = self.storage.save(thumb_name, thumb_content)
                
                if not thumb_name == thumb_name_:
                    raise ValueError('There is already a file named %s' % thumb_name)
        
    def delete(self, save=True):
        name=self.name
        super(ImageWithThumbsFieldFile, self).delete(save)
        if self.field.sizes:
            for size in self.field.sizes:
                (w,h) = size
                split = name.rsplit('.',1)
                thumb_name = '%s.%sx%s.%s' % (split[0],w,h,split[1])
                try:
                    self.storage.delete(thumb_name)
                except:
                    pass
                        
class ImageWithThumbsField(ImageField):
    attr_class = ImageWithThumbsFieldFile
    """
    Usage example:
    ==============
    photo = ImageWithThumbsField(upload_to='images', sizes=((125,125),(300,200),)
    
    To retrieve image URL, exactly the same way as with ImageField:
        my_object.photo.url
    To retrieve thumbnails URL's just add the size to it:
        my_object.photo.url_125x125
        my_object.photo.url_300x200
    
    Note: The 'sizes' attribute is not required. If you don't provide it, 
    ImageWithThumbsField will act as a normal ImageField
        
    How it works:
    =============
    For each size in the 'sizes' atribute of the field it generates a 
    thumbnail with that size and stores it following this format:
    
    available_filename.[width]x[height].extension

    Where 'available_filename' is the available filename returned by the storage
    backend for saving the original file.
    
    Following the usage example above: For storing a file called "photo.jpg" it saves:
    photo.jpg          (original file)
    photo.125x125.jpg  (first thumbnail)
    photo.300x200.jpg  (second thumbnail)
    
    With the default storage backend if photo.jpg already exists it will use these filenames:
    photo_.jpg
    photo_.125x125.jpg
    photo_.300x200.jpg
    
    Note: django-thumbs assumes that if filename "any_filename.jpg" is available 
    filenames with this format "any_filename.[widht]x[height].jpg" will be available, too.
    
    To do:
    ======
    Add method to regenerate thubmnails
    
    """
    def __init__(self, verbose_name=None, name=None, width_field=None, height_field=None, sizes=None, crop=True, **kwargs):
        self.verbose_name=verbose_name
        self.name=name
        self.width_field=width_field
        self.height_field=height_field
        self.sizes = sizes
        self.crop = crop
        super(ImageField, self).__init__(**kwargs)
        
try:
    from south.modelsinspector import add_introspection_rules
    add_introspection_rules([], ["^core\.thumbs\.ImageWithThumbsField"])
except ImportError:
    pass

########NEW FILE########
__FILENAME__ = urls
from django.conf.urls.defaults import *


########NEW FILE########
__FILENAME__ = views
from django.conf import settings
from django.core.urlresolvers import reverse
from django.shortcuts import render_to_response
from django.template import RequestContext
from django.http import HttpResponseRedirect, HttpResponse
#from django.core.paginator import Paginator, InvalidPage, EmptyPage

from auth.models import User


def home(request):
    from bidding.views import bidding_home
    if request.shop:
        return bidding_home(request)
    elif hasattr(request, 'marketplace') and request.marketplace:
        return HttpResponseRedirect("http://%s" % request.marketplace.base_domain)
    
    return render_to_response('core/home.html', {}, 
                              RequestContext(request)) 


def redirect(request):
    if request.user.is_superuser:
        return HttpResponseRedirect(reverse('shop_list'))
    elif request.shop and request.user == request.shop.admin:    
        return HttpResponseRedirect(reverse('home_admin'))
    else:
        return HttpResponseRedirect(reverse('home'))


#delete this
def admin_login(request, user_id):
    user = User.objects.get(id=user_id)
    from auth import load_backend, login
    if not hasattr(user, 'backend'):
        for backend in settings.AUTHENTICATION_BACKENDS:
            if user == load_backend(backend).get_user(user.pk):
                user.backend = backend
                break
    if hasattr(user, 'backend'):
        login(request, user)
    return HttpResponseRedirect('/')


def remove_qa_user(request):
    try:
        user = User.objects.filter(username="qatester").get()
        user.delete()
    except User.DoesNotExist:
        return HttpResponse(404)
    except Exception, e:
        return HttpResponse(500)
    return HttpResponse(status=200)
########NEW FILE########
__FILENAME__ = admin
from models import *
from django.contrib import admin

admin.site.register(Item, ItemAdmin)
admin.site.register(ImageItem)
admin.site.register(ImageItemURLQueue)



########NEW FILE########
__FILENAME__ = cron
from django_cron import CronJobBase, Schedule
from for_sale.models import Item


class ShowItemsCronJob(CronJobBase):
    """ Set the show attr in the for sale items.
        If the product was sold more than two weeks ago and the quantity is cero, it can't be showing """
    
    RUN_EVERY_MINS = 1

    schedule = Schedule(run_every_mins=RUN_EVERY_MINS)
    code = 'for_sale.show_items_cron_job'

    def do(self):
        for item in Item.objects.filter(qty=0, show=True):
            item.update_show(save=True)

########NEW FILE########
__FILENAME__ = feeds
from django.contrib.syndication.views import Feed

from for_sale.models import Item

class LatestItemFeed(Feed):
    def get_object(self, request):
        return request.shop

    def title(self, obj):
        return "%s last items for sale feed" % obj.name
    
    def description(self, obj):
        return "%s updates on for sale items" % obj.name    

    def link(self, obj):
        return "http://%s/for_sale/" % obj.default_dns    

    def items(self, obj):
        return Item.objects.filter(shop = obj).order_by('-date_time')[:100]

    def item_title(self, item):
        return item.title

    def item_description(self, item):
        return item.description
    
    def item_link(self, item):
        return "http://%s%s" % (item.shop.default_dns, item.get_bidding_url())


########NEW FILE########
__FILENAME__ = forms
from django.forms import ModelForm, ModelChoiceField

from models import Item, ImageItem
from market.models import MarketCategory

class CategoryChoiceField(ModelChoiceField):
    def label_from_instance(self, obj):
        return "%s" % obj.name

class ItemForm(ModelForm):
    category = CategoryChoiceField(queryset = MarketCategory.objects.all())
    
    class Meta:
        model = Item
        fields = ['title', 'description', 'price', 'subcategory', 'category', 'weight', 'qty']
    
    def __init__(self, request=None, *args, **kwargs):
        super(ItemForm, self).__init__(*args, **kwargs)
        # Filter sessions and categorys for specific shop 
        if request:
            self.shop = request.shop
            category = self.fields.get('category')
            category.queryset = MarketCategory.objects.filter(marketplace=self.shop.marketplace)

# forms.ModelSelect

class ImageItemForm(ModelForm):
    class Meta:
        model = ImageItem
        fields = ['image']

########NEW FILE########
__FILENAME__ = cron_fetch_import_images
import logging

from django.core.management.base import BaseCommand, CommandError

import httplib2

from for_sale.models import ImageItemURLQueue



class Command(BaseCommand):
    args = '<poll_id poll_id ...>'
    help = 'Closes the specified poll for voting'

    def handle(self, *args, **options):
        
        for queued_image in ImageItemURLQueue.objects.all():
            
            try:
                queued_image.get_image()
            except httplib2.HttpLib2Error:
                logging.exception("Error fetching import image %d" % queued_image.id)
            except:
                logging.exception("Error fetching import images")
                raise

########NEW FILE########
__FILENAME__ = 0001_initial
# encoding: utf-8
import datetime
from south.db import db
from south.v2 import SchemaMigration
from django.db import models

class Migration(SchemaMigration):

    def forwards(self, orm):
        
        # Adding model 'Item'
        db.create_table('for_sale_item', (
            ('product_ptr', self.gf('django.db.models.fields.related.OneToOneField')(to=orm['inventory.Product'], unique=True, primary_key=True)),
            ('qty', self.gf('django.db.models.fields.IntegerField')(default=0)),
            ('price', self.gf('django.db.models.fields.DecimalField')(max_digits=11, decimal_places=2)),
        ))
        db.send_create_signal('for_sale', ['Item'])

        # Adding model 'ImageItem'
        db.create_table('for_sale_imageitem', (
            ('id', self.gf('django.db.models.fields.AutoField')(primary_key=True)),
            ('image', self.gf('core.thumbs.ImageWithThumbsField')(max_length=100)),
            ('item', self.gf('django.db.models.fields.related.ForeignKey')(to=orm['for_sale.Item'])),
            ('primary_picture', self.gf('django.db.models.fields.BooleanField')(default=False, blank=True)),
        ))
        db.send_create_signal('for_sale', ['ImageItem'])


    def backwards(self, orm):
        
        # Deleting model 'Item'
        db.delete_table('for_sale_item')

        # Deleting model 'ImageItem'
        db.delete_table('for_sale_imageitem')


    models = {
        'auth.group': {
            'Meta': {'object_name': 'Group'},
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '80'}),
            'permissions': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['auth.Permission']", 'symmetrical': 'False', 'blank': 'True'})
        },
        'auth.permission': {
            'Meta': {'unique_together': "(('content_type', 'codename'),)", 'object_name': 'Permission'},
            'codename': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'content_type': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['contenttypes.ContentType']"}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '50'})
        },
        'auth.user': {
            'Meta': {'object_name': 'User'},
            'date_joined': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
            'email': ('django.db.models.fields.EmailField', [], {'max_length': '75'}),
            'first_name': ('django.db.models.fields.CharField', [], {'max_length': '30', 'blank': 'True'}),
            'groups': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['auth.Group']", 'symmetrical': 'False', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'is_active': ('django.db.models.fields.BooleanField', [], {'default': 'True', 'blank': 'True'}),
            'is_staff': ('django.db.models.fields.BooleanField', [], {'default': 'False', 'blank': 'True'}),
            'is_superuser': ('django.db.models.fields.BooleanField', [], {'default': 'False', 'blank': 'True'}),
            'last_login': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
            'last_name': ('django.db.models.fields.CharField', [], {'max_length': '30', 'blank': 'True'}),
            'password': ('django.db.models.fields.CharField', [], {'max_length': '128'}),
            'user_permissions': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['auth.Permission']", 'symmetrical': 'False', 'blank': 'True'}),
            'username': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '32'})
        },
        'contenttypes.contenttype': {
            'Meta': {'unique_together': "(('app_label', 'model'),)", 'object_name': 'ContentType', 'db_table': "'django_content_type'"},
            'app_label': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'model': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '100'})
        },
        'for_sale.imageitem': {
            'Meta': {'object_name': 'ImageItem'},
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'image': ('core.thumbs.ImageWithThumbsField', [], {'max_length': '100'}),
            'item': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['for_sale.Item']"}),
            'primary_picture': ('django.db.models.fields.BooleanField', [], {'default': 'False', 'blank': 'True'})
        },
        'for_sale.item': {
            'Meta': {'object_name': 'Item', '_ormbases': ['inventory.Product']},
            'price': ('django.db.models.fields.DecimalField', [], {'max_digits': '11', 'decimal_places': '2'}),
            'product_ptr': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['inventory.Product']", 'unique': 'True', 'primary_key': 'True'}),
            'qty': ('django.db.models.fields.IntegerField', [], {'default': '0'})
        },
        'inventory.product': {
            'Meta': {'object_name': 'Product'},
            'category': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['market.MarketCategory']"}),
            'date_time': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'description': ('django.db.models.fields.TextField', [], {}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'shop': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['shops.Shop']"}),
            'subcategory': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['market.MarketSubCategory']"}),
            'title': ('django.db.models.fields.CharField', [], {'max_length': '200'}),
            'type': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['inventory.ProductType']", 'null': 'True', 'blank': 'True'}),
            'weight': ('django.db.models.fields.DecimalField', [], {'default': "'0'", 'max_digits': '11', 'decimal_places': '2'})
        },
        'inventory.producttype': {
            'Meta': {'object_name': 'ProductType'},
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'})
        },
        'market.marketcategory': {
            'Meta': {'object_name': 'MarketCategory'},
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'marketplace': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['market.MarketPlace']"}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '60'}),
            'slug': ('django.db.models.fields.SlugField', [], {'unique': 'True', 'max_length': '60', 'db_index': 'True'})
        },
        'market.marketplace': {
            'Meta': {'object_name': 'MarketPlace'},
            'base_domain': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '128'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '92'}),
            'slug': ('django.db.models.fields.SlugField', [], {'unique': 'True', 'max_length': '92', 'db_index': 'True'}),
            'template_prefix': ('django.db.models.fields.SlugField', [], {'unique': 'True', 'max_length': '92', 'db_index': 'True'}),
            'title': ('django.db.models.fields.CharField', [], {'max_length': '92'})
        },
        'market.marketsubcategory': {
            'Meta': {'unique_together': "(('parent', 'slug'),)", 'object_name': 'MarketSubCategory'},
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'marketplace': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['market.MarketPlace']"}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '60'}),
            'parent': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'subcategories'", 'null': 'True', 'to': "orm['market.MarketCategory']"}),
            'slug': ('django.db.models.fields.SlugField', [], {'max_length': '60', 'db_index': 'True'})
        },
        'shops.shop': {
            'Meta': {'object_name': 'Shop'},
            'admin': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['auth.User']"}),
            'bids': ('django.db.models.fields.IntegerField', [], {'default': '0'}),
            'date_time': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'location': ('django.db.models.fields.CharField', [], {'default': "'39.29038,-76.61219'", 'max_length': '255'}),
            'marketplace': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['market.MarketPlace']"}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '60'}),
            'views': ('django.db.models.fields.IntegerField', [], {'default': '0'})
        }
    }

    complete_apps = ['for_sale']

########NEW FILE########
__FILENAME__ = 0002_auto__add_imageitemurlqueue
# encoding: utf-8
import datetime
from south.db import db
from south.v2 import SchemaMigration
from django.db import models

class Migration(SchemaMigration):

    def forwards(self, orm):
        
        # Adding model 'ImageItemURLQueue'
        db.create_table('for_sale_imageitemurlqueue', (
            ('id', self.gf('django.db.models.fields.AutoField')(primary_key=True)),
            ('item', self.gf('django.db.models.fields.related.ForeignKey')(to=orm['for_sale.Item'])),
            ('url', self.gf('django.db.models.fields.URLField')(max_length=200)),
            ('timestamp', self.gf('django.db.models.fields.DateTimeField')(auto_now_add=True, blank=True)),
        ))
        db.send_create_signal('for_sale', ['ImageItemURLQueue'])


    def backwards(self, orm):
        
        # Deleting model 'ImageItemURLQueue'
        db.delete_table('for_sale_imageitemurlqueue')


    models = {
        'auth.group': {
            'Meta': {'object_name': 'Group'},
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '80'}),
            'permissions': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['auth.Permission']", 'symmetrical': 'False', 'blank': 'True'})
        },
        'auth.permission': {
            'Meta': {'unique_together': "(('content_type', 'codename'),)", 'object_name': 'Permission'},
            'codename': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'content_type': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['contenttypes.ContentType']"}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '50'})
        },
        'auth.user': {
            'Meta': {'object_name': 'User'},
            'date_joined': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
            'email': ('django.db.models.fields.EmailField', [], {'max_length': '75'}),
            'first_name': ('django.db.models.fields.CharField', [], {'max_length': '30', 'blank': 'True'}),
            'groups': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['auth.Group']", 'symmetrical': 'False', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'is_active': ('django.db.models.fields.BooleanField', [], {'default': 'True', 'blank': 'True'}),
            'is_staff': ('django.db.models.fields.BooleanField', [], {'default': 'False', 'blank': 'True'}),
            'is_superuser': ('django.db.models.fields.BooleanField', [], {'default': 'False', 'blank': 'True'}),
            'last_login': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
            'last_name': ('django.db.models.fields.CharField', [], {'max_length': '30', 'blank': 'True'}),
            'password': ('django.db.models.fields.CharField', [], {'max_length': '128'}),
            'user_permissions': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['auth.Permission']", 'symmetrical': 'False', 'blank': 'True'}),
            'username': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '32'})
        },
        'contenttypes.contenttype': {
            'Meta': {'unique_together': "(('app_label', 'model'),)", 'object_name': 'ContentType', 'db_table': "'django_content_type'"},
            'app_label': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'model': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '100'})
        },
        'for_sale.imageitem': {
            'Meta': {'object_name': 'ImageItem'},
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'image': ('core.thumbs.ImageWithThumbsField', [], {'max_length': '100'}),
            'item': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['for_sale.Item']"}),
            'primary_picture': ('django.db.models.fields.BooleanField', [], {'default': 'False', 'blank': 'True'})
        },
        'for_sale.imageitemurlqueue': {
            'Meta': {'object_name': 'ImageItemURLQueue'},
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'item': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['for_sale.Item']"}),
            'timestamp': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'url': ('django.db.models.fields.URLField', [], {'max_length': '200'})
        },
        'for_sale.item': {
            'Meta': {'object_name': 'Item', '_ormbases': ['inventory.Product']},
            'price': ('django.db.models.fields.DecimalField', [], {'max_digits': '11', 'decimal_places': '2'}),
            'product_ptr': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['inventory.Product']", 'unique': 'True', 'primary_key': 'True'}),
            'qty': ('django.db.models.fields.IntegerField', [], {'default': '0'})
        },
        'inventory.product': {
            'Meta': {'object_name': 'Product'},
            'category': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['market.MarketCategory']"}),
            'date_time': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'description': ('django.db.models.fields.TextField', [], {}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'shop': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['shops.Shop']"}),
            'subcategory': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['market.MarketSubCategory']"}),
            'title': ('django.db.models.fields.CharField', [], {'max_length': '200'}),
            'type': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['inventory.ProductType']", 'null': 'True', 'blank': 'True'}),
            'weight': ('django.db.models.fields.DecimalField', [], {'default': "'0'", 'max_digits': '11', 'decimal_places': '2'})
        },
        'inventory.producttype': {
            'Meta': {'object_name': 'ProductType'},
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'})
        },
        'market.marketcategory': {
            'Meta': {'object_name': 'MarketCategory'},
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'marketplace': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['market.MarketPlace']"}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '60'}),
            'slug': ('django.db.models.fields.SlugField', [], {'unique': 'True', 'max_length': '60', 'db_index': 'True'})
        },
        'market.marketplace': {
            'Meta': {'object_name': 'MarketPlace'},
            'base_domain': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '128'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '92'}),
            'slug': ('django.db.models.fields.SlugField', [], {'unique': 'True', 'max_length': '92', 'db_index': 'True'}),
            'template_prefix': ('django.db.models.fields.SlugField', [], {'unique': 'True', 'max_length': '92', 'db_index': 'True'}),
            'title': ('django.db.models.fields.CharField', [], {'max_length': '92'})
        },
        'market.marketsubcategory': {
            'Meta': {'unique_together': "(('parent', 'slug'),)", 'object_name': 'MarketSubCategory'},
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'marketplace': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['market.MarketPlace']"}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '60'}),
            'parent': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'subcategories'", 'null': 'True', 'to': "orm['market.MarketCategory']"}),
            'slug': ('django.db.models.fields.SlugField', [], {'max_length': '60', 'db_index': 'True'})
        },
        'shops.shop': {
            'Meta': {'object_name': 'Shop'},
            'admin': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['auth.User']"}),
            'bids': ('django.db.models.fields.IntegerField', [], {'default': '0'}),
            'date_time': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'location': ('django.db.models.fields.CharField', [], {'default': "'39.29038,-76.61219'", 'max_length': '255'}),
            'marketplace': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['market.MarketPlace']"}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '60'}),
            'views': ('django.db.models.fields.IntegerField', [], {'default': '0'})
        }
    }

    complete_apps = ['for_sale']

########NEW FILE########
__FILENAME__ = 0003_auto__add_field_item_show
# encoding: utf-8
import datetime
from south.db import db
from south.v2 import SchemaMigration
from django.db import models

class Migration(SchemaMigration):

    def forwards(self, orm):
        
        # Adding field 'Item.show'
        db.add_column('for_sale_item', 'show', self.gf('django.db.models.fields.BooleanField')(default=True, blank=True), keep_default=False)


    def backwards(self, orm):
        
        # Deleting field 'Item.show'
        db.delete_column('for_sale_item', 'show')


    models = {
        'auth.group': {
            'Meta': {'object_name': 'Group'},
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '80'}),
            'permissions': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['auth.Permission']", 'symmetrical': 'False', 'blank': 'True'})
        },
        'auth.permission': {
            'Meta': {'unique_together': "(('content_type', 'codename'),)", 'object_name': 'Permission'},
            'codename': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'content_type': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['contenttypes.ContentType']"}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '50'})
        },
        'auth.user': {
            'Meta': {'object_name': 'User'},
            'date_joined': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
            'email': ('django.db.models.fields.EmailField', [], {'max_length': '75'}),
            'first_name': ('django.db.models.fields.CharField', [], {'max_length': '30', 'blank': 'True'}),
            'groups': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['auth.Group']", 'symmetrical': 'False', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'is_active': ('django.db.models.fields.BooleanField', [], {'default': 'True', 'blank': 'True'}),
            'is_staff': ('django.db.models.fields.BooleanField', [], {'default': 'False', 'blank': 'True'}),
            'is_superuser': ('django.db.models.fields.BooleanField', [], {'default': 'False', 'blank': 'True'}),
            'last_login': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
            'last_name': ('django.db.models.fields.CharField', [], {'max_length': '30', 'blank': 'True'}),
            'password': ('django.db.models.fields.CharField', [], {'max_length': '128'}),
            'user_permissions': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['auth.Permission']", 'symmetrical': 'False', 'blank': 'True'}),
            'username': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '32'})
        },
        'contenttypes.contenttype': {
            'Meta': {'unique_together': "(('app_label', 'model'),)", 'object_name': 'ContentType', 'db_table': "'django_content_type'"},
            'app_label': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'model': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '100'})
        },
        'for_sale.imageitem': {
            'Meta': {'object_name': 'ImageItem'},
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'image': ('core.thumbs.ImageWithThumbsField', [], {'max_length': '100'}),
            'item': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['for_sale.Item']"}),
            'primary_picture': ('django.db.models.fields.BooleanField', [], {'default': 'False', 'blank': 'True'})
        },
        'for_sale.imageitemurlqueue': {
            'Meta': {'object_name': 'ImageItemURLQueue'},
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'item': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['for_sale.Item']"}),
            'timestamp': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'url': ('django.db.models.fields.URLField', [], {'max_length': '200'})
        },
        'for_sale.item': {
            'Meta': {'object_name': 'Item', '_ormbases': ['inventory.Product']},
            'price': ('django.db.models.fields.DecimalField', [], {'max_digits': '11', 'decimal_places': '2'}),
            'product_ptr': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['inventory.Product']", 'unique': 'True', 'primary_key': 'True'}),
            'qty': ('django.db.models.fields.IntegerField', [], {'default': '0'}),
            'show': ('django.db.models.fields.BooleanField', [], {'default': 'True', 'blank': 'True'})
        },
        'inventory.product': {
            'Meta': {'object_name': 'Product'},
            'category': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['market.MarketCategory']"}),
            'date_time': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'description': ('django.db.models.fields.TextField', [], {}),
            'has_image': ('django.db.models.fields.BooleanField', [], {'default': 'False', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'latest_item': ('django.db.models.fields.BooleanField', [], {'default': 'False', 'blank': 'True'}),
            'shop': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['shops.Shop']"}),
            'subcategory': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['market.MarketSubCategory']", 'null': 'True', 'blank': 'True'}),
            'title': ('django.db.models.fields.CharField', [], {'max_length': '200'}),
            'type': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['inventory.ProductType']", 'null': 'True', 'blank': 'True'}),
            'weight': ('django.db.models.fields.DecimalField', [], {'default': "'0'", 'max_digits': '11', 'decimal_places': '2'})
        },
        'inventory.producttype': {
            'Meta': {'object_name': 'ProductType'},
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'})
        },
        'market.marketcategory': {
            'Meta': {'object_name': 'MarketCategory'},
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'marketplace': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['market.MarketPlace']"}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '60'}),
            'order': ('django.db.models.fields.IntegerField', [], {'default': '255'}),
            'slug': ('django.db.models.fields.SlugField', [], {'unique': 'True', 'max_length': '60', 'db_index': 'True'})
        },
        'market.marketplace': {
            'Meta': {'object_name': 'MarketPlace'},
            'base_domain': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '128'}),
            'charge_on_card_as': ('django.db.models.fields.CharField', [], {'default': "''", 'max_length': '255'}),
            'contact_email': ('django.db.models.fields.EmailField', [], {'default': "'contact@yourstore.com'", 'max_length': '75'}),
            'contact_phone': ('django.db.models.fields.CharField', [], {'default': "''", 'max_length': '128'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '92'}),
            'slug': ('django.db.models.fields.SlugField', [], {'unique': 'True', 'max_length': '92', 'db_index': 'True'}),
            'template_prefix': ('django.db.models.fields.SlugField', [], {'unique': 'True', 'max_length': '92', 'db_index': 'True'}),
            'title': ('django.db.models.fields.CharField', [], {'max_length': '92'})
        },
        'market.marketsubcategory': {
            'Meta': {'unique_together': "(('parent', 'slug'),)", 'object_name': 'MarketSubCategory'},
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'marketplace': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['market.MarketPlace']"}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '60'}),
            'order': ('django.db.models.fields.IntegerField', [], {'default': '255'}),
            'parent': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'subcategories'", 'null': 'True', 'to': "orm['market.MarketCategory']"}),
            'slug': ('django.db.models.fields.SlugField', [], {'max_length': '60', 'db_index': 'True'})
        },
        'shops.shop': {
            'Meta': {'object_name': 'Shop'},
            'active': ('django.db.models.fields.BooleanField', [], {'default': 'True', 'blank': 'True'}),
            'admin': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['auth.User']"}),
            'bids': ('django.db.models.fields.IntegerField', [], {'default': '0'}),
            'date_time': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'last_date_to_change_layout': ('django.db.models.fields.DateTimeField', [], {'null': 'True', 'blank': 'True'}),
            'last_date_to_post': ('django.db.models.fields.DateTimeField', [], {'null': 'True', 'blank': 'True'}),
            'location': ('django.db.models.fields.CharField', [], {'default': "'39.29038,-76.61219'", 'max_length': '255'}),
            'marketplace': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['market.MarketPlace']"}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '60'}),
            'views': ('django.db.models.fields.IntegerField', [], {'default': '0'})
        }
    }

    complete_apps = ['for_sale']

########NEW FILE########
__FILENAME__ = 0004_auto__add_field_item_sold_out_date
# encoding: utf-8
import datetime
from south.db import db
from south.v2 import SchemaMigration
from django.db import models

class Migration(SchemaMigration):

    def forwards(self, orm):
        
        # Adding field 'Item.sold_out_date'
        db.add_column('for_sale_item', 'sold_out_date', self.gf('django.db.models.fields.DateTimeField')(null=True, blank=True), keep_default=False)


    def backwards(self, orm):
        
        # Deleting field 'Item.sold_out_date'
        db.delete_column('for_sale_item', 'sold_out_date')


    models = {
        'auth.group': {
            'Meta': {'object_name': 'Group'},
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '80'}),
            'permissions': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['auth.Permission']", 'symmetrical': 'False', 'blank': 'True'})
        },
        'auth.permission': {
            'Meta': {'unique_together': "(('content_type', 'codename'),)", 'object_name': 'Permission'},
            'codename': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'content_type': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['contenttypes.ContentType']"}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '50'})
        },
        'auth.user': {
            'Meta': {'object_name': 'User'},
            'date_joined': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
            'email': ('django.db.models.fields.EmailField', [], {'max_length': '75', 'blank': 'True'}),
            'first_name': ('django.db.models.fields.CharField', [], {'max_length': '30', 'blank': 'True'}),
            'groups': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['auth.Group']", 'symmetrical': 'False', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'is_active': ('django.db.models.fields.BooleanField', [], {'default': 'True', 'blank': 'True'}),
            'is_staff': ('django.db.models.fields.BooleanField', [], {'default': 'False', 'blank': 'True'}),
            'is_superuser': ('django.db.models.fields.BooleanField', [], {'default': 'False', 'blank': 'True'}),
            'last_login': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
            'last_name': ('django.db.models.fields.CharField', [], {'max_length': '30', 'blank': 'True'}),
            'password': ('django.db.models.fields.CharField', [], {'max_length': '128'}),
            'user_permissions': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['auth.Permission']", 'symmetrical': 'False', 'blank': 'True'}),
            'username': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '30'})
        },
        'contenttypes.contenttype': {
            'Meta': {'unique_together': "(('app_label', 'model'),)", 'object_name': 'ContentType', 'db_table': "'django_content_type'"},
            'app_label': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'model': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '100'})
        },
        'for_sale.imageitem': {
            'Meta': {'object_name': 'ImageItem'},
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'image': ('core.thumbs.ImageWithThumbsField', [], {'max_length': '100'}),
            'item': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['for_sale.Item']"}),
            'primary_picture': ('django.db.models.fields.BooleanField', [], {'default': 'False', 'blank': 'True'})
        },
        'for_sale.imageitemurlqueue': {
            'Meta': {'object_name': 'ImageItemURLQueue'},
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'item': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['for_sale.Item']"}),
            'timestamp': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'url': ('django.db.models.fields.URLField', [], {'max_length': '200'})
        },
        'for_sale.item': {
            'Meta': {'object_name': 'Item', '_ormbases': ['inventory.Product']},
            'price': ('django.db.models.fields.DecimalField', [], {'max_digits': '11', 'decimal_places': '2'}),
            'product_ptr': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['inventory.Product']", 'unique': 'True', 'primary_key': 'True'}),
            'qty': ('django.db.models.fields.IntegerField', [], {'default': '0'}),
            'show': ('django.db.models.fields.BooleanField', [], {'default': 'True', 'blank': 'True'}),
            'sold_out_date': ('django.db.models.fields.DateTimeField', [], {'null': 'True', 'blank': 'True'})
        },
        'inventory.product': {
            'Meta': {'object_name': 'Product'},
            'category': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['market.MarketCategory']"}),
            'date_time': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'description': ('django.db.models.fields.TextField', [], {}),
            'has_image': ('django.db.models.fields.BooleanField', [], {'default': 'False', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'latest_item': ('django.db.models.fields.BooleanField', [], {'default': 'False', 'blank': 'True'}),
            'shop': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['shops.Shop']"}),
            'subcategory': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['market.MarketSubCategory']", 'null': 'True', 'blank': 'True'}),
            'title': ('django.db.models.fields.CharField', [], {'max_length': '200'}),
            'type': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['inventory.ProductType']", 'null': 'True', 'blank': 'True'}),
            'weight': ('django.db.models.fields.DecimalField', [], {'default': "'0'", 'max_digits': '11', 'decimal_places': '2'})
        },
        'inventory.producttype': {
            'Meta': {'object_name': 'ProductType'},
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'})
        },
        'market.marketcategory': {
            'Meta': {'object_name': 'MarketCategory'},
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'marketplace': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['market.MarketPlace']"}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '60'}),
            'order': ('django.db.models.fields.IntegerField', [], {'default': '255'}),
            'slug': ('django.db.models.fields.SlugField', [], {'unique': 'True', 'max_length': '60', 'db_index': 'True'})
        },
        'market.marketplace': {
            'Meta': {'object_name': 'MarketPlace'},
            'base_domain': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '128'}),
            'charge_on_card_as': ('django.db.models.fields.CharField', [], {'default': "''", 'max_length': '255'}),
            'contact_email': ('django.db.models.fields.EmailField', [], {'default': "'contact@yourstore.com'", 'max_length': '75'}),
            'contact_phone': ('django.db.models.fields.CharField', [], {'default': "''", 'max_length': '128'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '92'}),
            'slug': ('django.db.models.fields.SlugField', [], {'unique': 'True', 'max_length': '92', 'db_index': 'True'}),
            'template_prefix': ('django.db.models.fields.SlugField', [], {'unique': 'True', 'max_length': '92', 'db_index': 'True'}),
            'title': ('django.db.models.fields.CharField', [], {'max_length': '92'})
        },
        'market.marketsubcategory': {
            'Meta': {'unique_together': "(('parent', 'slug'),)", 'object_name': 'MarketSubCategory'},
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'marketplace': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['market.MarketPlace']"}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '60'}),
            'order': ('django.db.models.fields.IntegerField', [], {'default': '255'}),
            'parent': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'subcategories'", 'null': 'True', 'to': "orm['market.MarketCategory']"}),
            'slug': ('django.db.models.fields.SlugField', [], {'max_length': '60', 'db_index': 'True'})
        },
        'shops.shop': {
            'Meta': {'object_name': 'Shop'},
            'active': ('django.db.models.fields.BooleanField', [], {'default': 'True', 'blank': 'True'}),
            'admin': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['auth.User']"}),
            'bids': ('django.db.models.fields.IntegerField', [], {'default': '0'}),
            'date_time': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'last_date_to_change_layout': ('django.db.models.fields.DateTimeField', [], {'null': 'True', 'blank': 'True'}),
            'last_date_to_post': ('django.db.models.fields.DateTimeField', [], {'null': 'True', 'blank': 'True'}),
            'location': ('django.db.models.fields.CharField', [], {'default': "'39.29038,-76.61219'", 'max_length': '255'}),
            'marketplace': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['market.MarketPlace']"}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '60'}),
            'views': ('django.db.models.fields.IntegerField', [], {'default': '0'})
        }
    }

    complete_apps = ['for_sale']

########NEW FILE########
__FILENAME__ = models
import datetime
import decimal
import logging

from django.db import models
from django.conf import settings
from django.contrib import admin
from django.contrib.contenttypes.models import ContentType
from django.core.mail import send_mail, EmailMessage
from django.core.files.base import ContentFile
from core.thumbs import ImageWithThumbsField
from inventory.models import Product
#from boto.sdb.db.manager import debug

#TODO: PCGSNumberException, and the Coin references in create_from_inventory must be removed from this module

PCGS_COIN_GRADING = {
    1: ('PO-1', 'Identifiable date and type'),
    2: ('FR-2', 'Mostly worn, though some detail is visible'),
    3: ('AG-3', 'Worn rims but most lettering is readable though worn'),
    4: ('G-4', 'Slightly worn rims, flat detail, peripheral lettering nearly full'),
    6: ('G-6', 'Rims complete with flat detail, peripheral lettering full'),
    8: ('VG-8', 'Design worn with slight detail'),
    10: ('VG-10', 'Design worn with slight detail, slightly clearer'),
    12: ('F-12', 'Some deeply recessed areas with detail, all lettering sharp'),
    15: ('F-15', 'Slightly more detail in the recessed areas, all lettering sharp'),
    20: ('VF-20', 'Some definition of detail, all lettering full and sharp'),
    25: ('VF-25', 'Slightly more definition in the detail and lettering'),
    30: ('VF-30', 'Almost complete detail with flat areas'),
    35: ('VF-35', 'Detail is complete but worn with high points flat'),
    40: ('EF-40', 'Detail is complete with most high points slightly flat'),
    45: ('EF-45', 'Detail is complete with some high points flat'),
    50: ('AU-50', 'Full detail with friction over most of the surface, slight flatness on high points'),
    53: ('AU-53', 'Full detail with friction over 1/2 or more of surface, very slight flatness on high points'),
    55: ('AU-55', 'Full detail with friction on less than 1/2 surface, mainly on high points'),
    58: ('AU-58', 'Full detail with only slight friction on the high points')                     
}

class PCGSNumberException(Exception):
    
    def __init__(self, value):
        self.parameter = value
    
    def __str__(self):
        return repr(self.parameter)

class Item(Product):
    qty = models.IntegerField(default=0)
    price = models.DecimalField(max_digits=11, decimal_places=2)
    show = models.BooleanField(default=True)
    sold_out_date = models.DateTimeField(null=True, blank=True)
    
    def type(self):
        return "Item"
    
    def decrease_qty(self, qty):
        logging.error("decrease item: %s" % qty)
        self.qty = self.qty - qty
        self.save()
        if self.qty <= 0:
            #TODO: Send email to shop owner, is to expensive, should be done in a task queue...
            from sell.models import SellItem
            from django.core.urlresolvers import reverse
            
            path = "http://%s%s" % (self.shop.default_dns, reverse("bidding_view_item", urlconf="stores.urls", args=[self.id]))
            
            item_type = ContentType.objects.get_for_model(self)
            sell_items = SellItem.objects.filter(object_id=self.id, content_type__pk=item_type.id)
            total = sell_items.count()
            revenue = 0
            for sell in sell_items:
                revenue += (sell.price * sell.qty)
            msg = "There are no more Items for %s.\n\nlink: %s\n\nTotal Items Sold: %s\n\nTotal Revenue: %s\n\n\nTake notice that this last item wasn't sold yet, is currently in a cart and could be removed from it anytime. If customer decides to remove the item from the cart it will be inmediatly restored to the inventory" % (self.title, path, total, revenue)
            
            mail = EmailMessage(subject='Product Out Of Stock',
                                body=msg,
                                from_email=settings.EMAIL_FROM,
                                to=[self.shop.admin.email],
                                headers={'X-SMTPAPI': '{\"category\": \"Product Out Of Stock\"}'})
            mail.send(fail_silently=True)
#            send_mail('Product Out Of Stock', msg, settings.EMAIL_FROM, [self.shop.admin.email], fail_silently=True)
    
    def increase_qty(self, qty):
        self.qty = self.qty + qty
        self.save()
    
    def image(self):
        from models import ImageItem
        try:
            return ImageItem.objects.filter(item=self).filter(primary_picture=True).get()
        except ImageItem.DoesNotExist:
            pass
        
        try:
            img = ImageItem.objects.filter(item=self)[0]
            img.primary_picture = True
            img.save()
            return img
        except IndexError:
            return None
    
    @models.permalink
    def get_bidding_url(self):
        return ("bidding.views.bidding_view_item", (self.pk, ))

            
    @classmethod
    def create_from_inventory(cls, shop, properties, values):
        """ 
        Creates an Item from the file inventory 
        
        @param properties = [DealerProductNumber, PCGSNumber, GradingService, Grade, Quantity, RetailPrice, WholesalePrice, ProductDescription, ImageURL1, ImageURL2 ]
        @param values = ['F22-014', '2067', 'PCGS', '64', '1', '600', '', '1863 Snow-1. Repunched date 18/18. MS-64 PCGS (PS). Eagle Eye Photo Seal. The coin is well struck with even coloration. There are a few light marks but nothing out of the ordinary for the grade.', 'http://www.indiancent.com/img/p/751-1297-thickbox.jpg', 'http://www.indiancent.com/img/p/751-1298-thickbox.jpg'] 
        """
        from inventory.models import Coin
        
        vals = {}
        for property in properties:
            vals[property] = values[properties.index(property)]
        
        grading_service = vals['GradingService']
        grade = int(decimal.Decimal(vals['Grade']))
        grading_coin_number = int(decimal.Decimal(vals['PCGSNumber']))
        dealer_coin_number = vals['DealerProductNumber']
        
        images = []
        images.append(vals['ImageURL1'])
        images.append(vals['ImageURL2'])
        
        item = Item(shop=shop)
        
        
        try:
            coin = Coin.objects.filter(pcgs_number=grading_coin_number).get()
            item.category = coin.category
            item.subcategory = coin.subcategory
            #Date Type Grade Grading Companie
            #1857 Cent Flying Eagle MS63 PCGS"
            # Date, Mintmark (as 1935-D) grade (as MS-65RD NGC
            #item.title = "%s, Grade: %s (%s), Price: %s" % (coin.description, grade, grading_service, vals['RetailPrice'])
            prefix = coin.prefix.upper()
            suffix = coin.suffix.upper()
            
            if prefix == 'MS' and grade <= 58:
                try:
                    pcgs_grade = PCGS_COIN_GRADING[grade][0]
                except KeyError:
                    pcgs_grade = 'MS %s' % grade
                    
                item.title = "%s %s%s %s" % (coin.year_issued, 
                                                pcgs_grade,
                                                suffix,
                                                grading_service.upper().strip())
                
            else: 
                item.title = "%s %s-%s%s %s" % (coin.year_issued, 
                                                prefix,
                                                grade, 
                                                suffix,
                                                grading_service.upper().strip())
        except Coin.DoesNotExist:
            raise PCGSNumberException("Invalid pcgs number: %s" % grading_coin_number)
        except Exception, e:
            logging.debug(e)

        item.description = vals['ProductDescription']
        item.price = vals['RetailPrice']
        item.qty = int(decimal.Decimal(vals['Quantity']))
        item.weight = decimal.Decimal('0.0')
        item.save()
        #TODO: Sacar esto afuera para que se haga una sola vez
        Item.update_latest_item(shop)
        
        #Queue images to get
        for url in images:
            ImageItemURLQueue(item=item, url=url).save()
            
        return item

    def has_stock(self):
        return self.qty > 0

    def activate(self):
        pass

    def update_show(self, save=True):
        two_weeks_ago = datetime.datetime.now() - datetime.timedelta(days=14)

        if self.qty == 0 and self.sold_out_date is None:
            self.show = False
        elif self.qty > 0:
            self.show = True
            self.sold_out_date = None
        elif self.sold_out_date is None:
            self.sold_out_date = datetime.datetime.now()
            self.show = True
        elif self.sold_out_date < two_weeks_ago:
            self.show = False

        if save:
            self.save()
            
    def save(self, *args, **kwargs):
        """
            Save item model
        """
        self.update_show(save=False)
        return super(Item, self).save(*args, ** kwargs)
    

class ItemAdmin(admin.ModelAdmin):
    list_filter = ('price', 'qty')
    

def build_image_item_filename(instance, filename):
    import uuid
    return "images/%s-%s" % (uuid.uuid4(), filename)

class ImageItem(models.Model):
    #image = models.ImageField(upload_to='images') 
    image = ImageWithThumbsField(upload_to=build_image_item_filename, sizes=((100,100),(400,400)), crop=False)
    item = models.ForeignKey(Item)
    primary_picture = models.BooleanField(default=False)
    
    def __unicode__(self):
        return "%s > %s" % (self.item, self.id)

    def save(self, *args, **kwargs):
        super(ImageItem, self).save(*args, **kwargs)
        self.item.has_image = True
        self.item.save()
        

class ImageItemURLQueue(models.Model):
    item = models.ForeignKey(Item) 
    url = models.URLField()
    timestamp = models.DateTimeField(auto_now_add=True)

    def get_image(self):
        import httplib2
        from urlparse import urlparse
        
        try:
            name = urlparse(self.url).path.split('/')[-1]
            http = httplib2.Http()
            status, content = http.request(self.url)
            response = status["status"]
            if response == "200":
                imageItem = ImageItem(item=self.item)                
                imageItem.image.save(name, ContentFile(content), save=True)
            else:
                logging.error("Could not charge image %s. status=%s" % (name, response))
        except Exception,e:
            logging.error("Could not charge image %s. %s" % (name, e))
            
        self.delete()




########NEW FILE########
__FILENAME__ = for_sale_tags
from django import template


register = template.Library()


@register.simple_tag
def upload_js():
    return """
    <!-- The template to display files available for upload -->
<script id="template-upload" type="text/x-tmpl">
{% for (var i=0, files=o.files, l=files.length, file=files[0]; i<l; file=files[++i]) { %}
    <tr class="template-upload fade">
        <td></td>
        <td class="preview"><span class="fade"></span></td>
        <td class="name">{%=file.name%}</td>
        <td class="size">{%=o.formatFileSize(file.size)%}</td>
        {% if (file.error) { %}
            <td class="error" colspan="2"><span class="label label-important">{%=locale.fileupload.error%}</span> {%=locale.fileupload.errors[file.error] || file.error%}</td>
        {% } else if (o.files.valid && !i) { %}
            <td>
                <div class="progress progress-success progress-striped active"><div class="bar" style="width:0%;"></div></div>
            </td>
            <td></td>

            <td class="start">{% if (!o.options.autoUpload) { %}
                <button class="btn btn-info">
                    <i class="icon-upload icon-white"></i> {%=locale.fileupload.start%}
                </button>
            {% } %}</td>
        {% } else { %}
            <td colspan="2"></td>
        {% } %}
        <td class="cancel">{% if (!i) { %}
            <button class="btn btn-warning">
                <i class="icon-ban-circle icon-white"></i> {%=locale.fileupload.cancel%}
            </button>
        {% } %}</td>
    </tr>
{% } %}
</script>
<!-- The template to display files available for download -->
<script id="template-download" type="text/x-tmpl">
{% for (var i=0, files=o.files, l=files.length, file=files[0]; i<l; file=files[++i]) { %}
    <tr class="template-download fade">
        {% if (file.error) { %}
            <td></td>
            <td></td>
            <td class="name">{%=file.name%}</td>
            <td class="size">{%=o.formatFileSize(file.size)%}</td>
            <td class="error" colspan="2"><span class="label label-important">{%=locale.fileupload.error%}</span> {%=locale.fileupload.errors[file.error] || file.error%}</td>
        {% } else { %}
            <td class="primary">{% if (file.is_primary) { %}
                <i class="icon-star"></i>
            {% } %}</td>
        
            <td class="preview">{% if (file.thumbnail_url) { %}
                <a href="{%=file.url%}" title="{%=file.name%}" rel="gallery" download="{%=file.name%}"><img src="{%=file.thumbnail_url%}"></a>
            {% } %}</td>
            <td class="name">
                <a href="{%=file.url%}" title="{%=file.name%}" rel="{%=file.thumbnail_url&&'gallery'%}" download="{%=file.name%}">{%=file.name%}</a>
            </td>
            <td class="size">{%=o.formatFileSize(file.size)%}</td>
            <td colspan="2"></td>
        {% } %}
        <td class="primary_set">
            <a href="{%=file.url_set_primary%}" class="btn btn-info"><i class="icon-star icon-white"></i> Primary</a>
        </td>
        <td class="delete">
            <button class="btn btn-danger" data-type="{%=file.delete_type%}" data-url="{%=file.delete_url%}">
                <i class="icon-trash icon-white"></i> {%=locale.fileupload.destroy%}
            </button>
            <input type="checkbox" name="delete" value="1" style="float: right;"/>
        </td>
    </tr>
{% } %}
</script>
    """
########NEW FILE########
__FILENAME__ = tests
import datetime
import unittest

from auth.models import User
from market.models import MarketPlace, MarketCategory, MarketSubCategory 
from for_sale.models import Item
from sell.models import Cart, ShippingData
from shops.models import Shop

from preferences.models import TaxState, ShippingWeight, ShippingItem, ShippingPrice, Preference
from users.models import Profile
from subscriptions.models import Subscription, SubscriptionPlan


class ItemTestCase(unittest.TestCase):
    
    def setUp(self):
        # create store owner user and profile
        self.owner = User.objects.create_user("test-owner", "test-owner@mail.com", "test-owner")
        owner_profile = Profile(user=self.owner)
        owner_profile.save()

        # create a marketplace
        self.marketplace = MarketPlace(name="greatcoins", title="greatcoins", slug="greatcoins", 
                                       template_prefix="greatcoins", base_domain="greatcoins.com")
        self.marketplace.save()

        # create a shop
        self.shop = Shop(marketplace=self.marketplace, admin=self.owner, name="test_shop")
        self.shop.save()

        # create a Preference and SubscriptionPlan to shop
        Preference(shop=self.shop).save()
        self.shop.update()
        plan = SubscriptionPlan(plan_id=1,
                         marketplace=self.marketplace,
                         trial_period=True,
                         total_store_revenue=1000,
                         concurrent_store_items=1000)
        plan.save()
        Subscription(owner=owner_profile, plan=plan).save()

        # create marketplace categories and sub-categories
        self.category = MarketCategory(marketplace=self.marketplace, name="Category")
        self.category.save()
        self.subcategory = MarketSubCategory(marketplace=self.marketplace, parent=self.category, name="SubCategory")
        self.subcategory.save()

        # create a user, profile and shipping data
        self.user = User.objects.create_user("test-user", "test-user@mail.com", "test-user")
        Profile(user=self.user).save()
        shippingdata = ShippingData(first_name='User',
                                    last_name='Buyer',
                                    street_address="Calle 54",
                                    city="La Plata",
                                    state="Buenos Aires",
                                    zip="1900",
                                    country="AR")
        shippingdata.save()

        # create a shopping cart
        self.cart = Cart(shop=self.shop, bidder=self.user)
        self.cart.shippingdata = shippingdata
        self.cart.save()

    def tearDown(self):
        self.owner.delete()
        self.marketplace.delete()
        self.category.delete()
        self.subcategory.delete()
    
    def testItemCreate(self):
        import logging
        from inventory.models import Product
        products_count = Product.objects.count()
        item = Item(shop=self.shop, title="item", description="an item", 
                    price="10.0", category=self.category, subcategory=self.subcategory, 
                    qty=1, weight="2.0")
        item.save()
        
        #check Product was created
        self.assertEqual(products_count + 1, Product.objects.count())
        #check Product was deleted
        item.delete()
        self.assertEqual(products_count, Product.objects.count())

    def testSoldOut(self):
        # create a item
        item = Item(shop=self.shop,
                title="item",
                description="an item",
                price="10.0",
                category=self.category,
                subcategory=self.subcategory,
                qty=1,
                weight="2.0")
        item.save()
        
        # verify if the item is showing
        self.assertTrue(item.show)

        # add the item to cart
        self.cart.add(item, item.price, qty=1)
        self.cart.close('manual')

        # reload the item from db
        item = Item.objects.get(id=item.id)

        # verify if the item is showing and stock=0
        self.assertTrue(item.show)
        self.assertEqual(item.qty, 0)

        # change item sold_out_date and verify if the item is still showing
        past_date = datetime.datetime.now() - datetime.timedelta(days=13)
        item.sold_out_date = past_date
        item.update_show(True)
        self.assertTrue(item.show)

        # again, this time the item will not showing
        past_date = datetime.datetime.now() - datetime.timedelta(days=25)
        item.sold_out_date = past_date
        item.update_show(True)
        self.assertFalse(item.show)

        item.qty = 1
        item.save()
        self.assertTrue(item.show)

        item.qty = 0
        item.save()
        self.assertTrue(item.show)

        #
        past_date = datetime.datetime.now() - datetime.timedelta(days=25)
        item.sold_out_date = past_date
        item.update_show(True)
        self.assertFalse(item.show)

########NEW FILE########
__FILENAME__ = urls
from django.conf.urls.defaults import *

urlpatterns = patterns('',
    url(r'^items_all/$', 'for_sale.views.items_all', name='items_all'),
#    url(r'^lots_active/$', 'lots.views.lots_active', name='lots_active'),
#    url(r'^lots_sold/$', 'lots.views.lots_sold', name='lots_sold'),
#    url(r'^lots_didnt_sell/$', 'lots.views.lots_didnt_sell', name='lots_didnt_sell'),
#
#    url(r'^lots_payment_all/$', 'lots.views.lots_payment_all', name='lots_payment_all'),
#
#    url(r'^lots_shipping_all/$', 'lots.views.lots_shipping_all', name='lots_shipping_all'),
#    url(r'^lots_dispatched/([\d]+)/$', 'lots.views.lots_dispatched', name='lots_dispatched'),
#    url(r'^lots_fulfilled/([\d]+)/$', 'lots.views.lots_fulfilled', name='lots_fulfilled'),
#
#
#    url(r'^lots_open/$', 'lots.views.lots_open', name='lots_open'),
#    url(r'^lots_closed/$', 'lots.views.lots_closed', name='lots_closed'),

    url(r'^item_details/([\d]+)/$', 'for_sale.views.item_details', name='item_details'),
    url(r'^item_add/$', 'for_sale.views.item_add', name='item_add'),
    url(r'^item_edit/([\d]+)/$', 'for_sale.views.item_edit', name='item_edit'),
    url(r'^item_delete/([\d]+)/$', 'for_sale.views.item_delete', name='item_delete'),
    url(r'^items_bulk_delete/$', 'for_sale.views.items_bulk_delete', name='items_bulk_delete'),
#
#    url(r'^add_image/([\d]+)/$', 'for_sale.views.add_item_image', name='add_item_image'),
    url(r'^add_image/([\d]+)/$', 'for_sale.views.add_img', name='add_item_image'),
    url(r'^remove_image/([\d]+)/$', 'for_sale.views.remove_img', name='del_item_image'),
    url(r'^del_image/([\d]+)/([\d]+)/$', 'for_sale.views.del_item_image', name='del_item_image'),
    url(r'^set_primary_picture/([\d]+)/([\d]+)/$', 'for_sale.views.set_primary_picture', name='set_forsale_primary_picture'),
    
    url(r'^import_inventory/$', 'for_sale.views.import_inventory', name='import_inventory'),
    
#    url(r'^category_delete/$', 'lots.views.category_delete', name='category_delete'),
#    url(r'^category_edit/$', 'lots.views.category_edit', name='category_edit'),
)
########NEW FILE########
__FILENAME__ = views
import datetime
import logging

from django.db.models import Sum
from django.core.urlresolvers import reverse
#from django.contrib.auth.decorators import login_required
from django.http import HttpResponseRedirect, HttpResponse, Http404
from django.template import RequestContext
from django.shortcuts import render_to_response, get_object_or_404
from django.utils.translation import ugettext as _
from django.utils import simplejson

from django.core.paginator import Paginator, InvalidPage, EmptyPage

from auctions.forms import AuctionSessionForm
from auctions.models import AuctionSession 
#from auth.models import User
from market.forms import MarketCategoryForm, MarketSubCategoryForm
from core.decorators import shop_admin_required

#from forms import LotForm, ImageLotForm, CategoryForm, SubCategoryForm
#from models import ImageLot, Lot, Category, SubCategory, Payment, Shipping

from datetime import timedelta

from models import Item, ImageItem
from forms import ItemForm, ImageItemForm

PAGE_ITEMS = 15

@shop_admin_required
def items_all(request):
    shop = request.shop
    items_list = Item.objects.all().filter(shop=shop).order_by("-date_time")

    pager = Paginator(items_list, PAGE_ITEMS)
    try:
        page = int(request.GET.get('page','1'))
    except:
        page = 1
    try:
        items = pager.page(page)
    except (EmptyPage, InvalidPage):
        items = pager.page(pager.num_pages)
    paged = (pager.num_pages > 1)
    
    return render_to_response('for_sale/items_all.html', 
                              {'items': items,
                               'pages': pager.page_range,
                               'paged': paged,
                               }, 
                              RequestContext(request)) 

@shop_admin_required
def items_bulk_delete(request):
    
    ids = request.POST
    for (item_id, status) in ids.items():
        if status == "on": 
            item = get_object_or_404(Item, pk=item_id)
            item.delete()
    Item.update_latest_item(request.shop)
    
    request.flash['message'] = unicode(_("Items removed"))
    request.flash['severity'] = "success"
    return HttpResponseRedirect(reverse("inventory_items"))
    
@shop_admin_required
def item_add(request):
    shop = request.shop
    
    items_plan_limit = shop.plan().concurrent_store_items
    if shop.total_items() >= items_plan_limit:
        request.flash['message'] = "You have reached the limit of items that can hold simultaneously."
        request.flash['severity'] = "error"
        return HttpResponseRedirect(reverse('inventory_items'))
        
    if request.method == 'POST':
        form = ItemForm(request, request.POST, request.FILES, prefix="item")
        if form.is_valid():
            item = form.save(commit=False)
            item.shop = request.shop
            item.save()
            Item.update_latest_item(shop)
            for img in request.FILES.getlist('file'):
                image = ImageItem()
                image.item = item
                image.image.save(img.name,img)
            request.flash['message'] = unicode(_("Item successfully added."))
            request.flash['severity'] = "success"
            return HttpResponseRedirect(reverse('inventory_items'))
    else:
        form = ItemForm(request, prefix="item")
    form_category = MarketCategoryForm(prefix="category")
    form_sub_category = MarketSubCategoryForm(request, prefix="sub_category")
    form_session = AuctionSessionForm(prefix="session")
    sessions = AuctionSession.objects.filter(shop = request.shop)
    return render_to_response('for_sale/item_add.html', 
                              {'form': form,
                               'form_category': form_category,
                               'form_sub_category': form_sub_category,
                               'form_session': form_session,
                               'sessions': sessions,
                               },
                              RequestContext(request))

@shop_admin_required
def import_inventory(request):
    from models import PCGSNumberException
    shop = request.shop
    failures = []
    if request.method == 'POST':
        remove_inventory = bool(request.POST['r'] == "True")
        if remove_inventory:
            items = Item.objects.filter(shop=shop)
            for item in items:
                item.delete()
        
        for file in request.FILES.getlist('file'):
            try:
                from xls_parser import CoinInventoryParser
                parser = CoinInventoryParser()
                (keys, products) = parser.parse_xls(file)
                
                for product in products:
                    if product == []: continue
                    try:
                        Item.create_from_inventory(shop, keys, product)
                    except PCGSNumberException as e:
                        logging.critical("PCGSNumber not exists for product %s" % product)
                        failures.append(u"Product Number: %s, Error: %s<br>" % (product[0], e.parameter))
            except Exception, e:
                logging.error(e)

    if len(failures) > 0:
        request.flash['message'] = u"Fail when trying to load the Inventory. These items could not be loaded:<br>"
        for message in failures:
            request.flash['message'] += message
        request.flash['severity'] = "error"    
    else:
        request.flash['message'] = "Inventory successfully added."
        request.flash['severity'] = "success"    
    
    return HttpResponseRedirect(reverse('inventory_items'))

#@shop_admin_required
#def item_details(request, item_id):
#    logging.critical("llego")
#    try:
#        item = get_object_or_404(Item, pk=item_id)
#        if item.shop != request.shop:
#            raise Http404
#        image_form = ImageItemForm()
#        params = {'item': item, 'image_form': image_form }
#        return render_to_response('for_sale/item_details.html', params, RequestContext(request))
#    except Exception, e:
#        logging.critical(e)


#@shop_admin_required
#def item_details(request, item_id):
#    logging.critical('%s%s%s' %('\n'*3, '*'*120, '\n'*3))
#    try:
#        item = get_object_or_404(Item, pk=item_id)
#        if item.shop != request.shop:
#            raise Http404
#        image_form = ImageItemForm()
#        params = {'item': item, 'image_form': image_form }
#        return render_to_response('for_sale/item_details.html', params, RequestContext(request))
#    except Exception, e:
#        logging.critical(e)

def response_mimetype(request):
    if "application/json" in request.META['HTTP_ACCEPT']:
        return "application/json"
    else:
        return "text/plain"

class JSONResponse(HttpResponse):
    """JSON response class."""
    def __init__(self,obj='',json_opts={},mimetype="application/json",*args,**kwargs):
        content = simplejson.dumps(obj,**json_opts)
        super(JSONResponse,self).__init__(content,mimetype,*args,**kwargs)

@shop_admin_required
def item_details(request, item_id):
    try:
        item = get_object_or_404(Item, pk=item_id)
        if item.shop != request.shop:
            raise Http404
        image_form = ImageItemForm()
        params = {'item': item, 'image_form': image_form }
        return render_to_response('for_sale/item_details.html', params, RequestContext(request))
    except Exception, e:
        logging.critical(e)


@shop_admin_required
def add_img(request, item_id):
    try:
        item = get_object_or_404(Item, pk=item_id, shop=request.shop)
        data = []
        if request.method == 'POST':
            limit = request.shop.get_limit('pictures_per_item')
            total = ImageItem.objects.filter(item=item).count()
            
            f = request.FILES.get('files')
            if f and not (total >= limit):
                image = ImageItem(item=item)
                image.image.save(f.name, f)
                item.save()
                
                data = [{
                        'name': f.name, 
                        'url': image.image.url,
                        'size': image.image.size, 
                        'thumbnail_url': image.image.url_100x100,
                        'delete_url': reverse('del_item_image', args=[image.id]), 
                        'delete_type': "DELETE",
                        'url_set_primary': reverse('set_forsale_primary_picture', args=[item_id, image.id])
                }]
            else:
                data = [{'error': 'You have reach the limit of pictures per item allowed by your plan!'}]
        else:
            for image in item.imageitem_set.all():
                data.append({
                             'name': image.image.name,
                             'url': image.image.url,
                             'size': image.image.size,
                             'thumbnail_url': image.image.url_100x100,
                             'delete_url': reverse('del_item_image', args=[image.id]), 
                             'delete_type': "DELETE",
                             'is_primary': image.primary_picture,
                             'url_set_primary': reverse('set_forsale_primary_picture', args=[item_id, image.id]) 
                })

        response = JSONResponse(data, {}, response_mimetype(request))
        response['Content-Disposition'] = 'inline; filename=files.json'
        return response
    except Exception, ex:
        logging.exception(str(ex))
#        return HttpResponseRedirect(reverse('item_details', args=[item_id]))


@shop_admin_required
def remove_img(request, id):
    image = get_object_or_404(ImageItem, pk=int(id))
    image.delete()
    
    response = JSONResponse(True, {}, response_mimetype(request))
    response['Content-Disposition'] = 'inline; filename=files.json'
    return response


#@shop_admin_required
def item_delete(request, item_id):
    item = get_object_or_404(Item, pk=item_id)
    if item.shop != request.shop:
        raise Http404
    item.delete()
    Item.update_latest_item(request.shop)
    
    request.flash['message'] = unicode(_("Item successfully deleted."))
    request.flash['severity'] = "success"
    return HttpResponseRedirect(reverse("inventory_items"))

@shop_admin_required
def item_edit(request, item_id):
    item = get_object_or_404(Item, pk=item_id)
    if item.shop != request.shop:
        raise Http404

    if request.method == 'POST':
        form = ItemForm(request, request.POST, request.FILES, prefix="item", instance=item)
        if form.is_valid():
            item = form.save()
#            for img in request.FILES.getlist('file'):
#                image = ImageItem()
#                image.item = item
#                image.image.save(img.name,img)
            request.flash['message'] = unicode(_("Item successfully edited. It might take a half hour to reflect the proper search results."))
            request.flash['severity'] = "success"
        else:
            request.flash['message'] = unicode(_("Item couldn't be edited."))
            request.flash['severity'] = "error"
        
        return HttpResponseRedirect(reverse('inventory_items'))
    else:
        form = ItemForm(request, prefix="item", instance=item)
    
    form_category = MarketCategoryForm(prefix="category")
    form_sub_category = MarketSubCategoryForm(request, prefix="sub_category")
    
    return render_to_response('for_sale/item_edit.html', 
                              {'form': form,
                               'item': item,
                               'form_category': form_category,
                               'form_sub_category': form_sub_category,
                               },
                              RequestContext(request))

#@shop_admin_required
#def add_item_image(request, item_id):
#        
#    if request.method == 'POST':
#        
#        shop = request.shop
#        item = get_object_or_404(Item, pk=item_id)
#        
#        limit = shop.get_limit('pictures_per_item')
#        total = ImageItem.objects.filter(item=item).count()
#        
#        if total >= limit:
#            logging.info("User reach the pictures per item plan limit")
#            request.flash['message'] = "You have reach the limit of pictures per item allowed by your plan!"
#            request.flash['severity'] = "error"
#        else:
#            form = ImageItemForm(request.POST, request.FILES)
#            if form.is_valid():
#                img = form.save(commit=False)
#                img.item = item
#                img.save()
#                request.flash['message'] = "Image successfully saved!"
#                request.flash['severity'] = "success"
#            
#            else:
#                logging.error(form.errors)
#                request.flash['message'] = form.errors
#                request.flash['severity'] = "error"
#        
#        return HttpResponseRedirect(reverse('item_details', args=[item_id]))
#    
#    else:
#        raise Http404

# orig:
@shop_admin_required
def add_item_image(request, item_id):
        
    if request.method == 'POST':
        shop = request.shop
        item = get_object_or_404(Item, pk=item_id)
        
        limit = shop.get_limit('pictures_per_item')
        total = ImageItem.objects.filter(item=item).count()
        
        if total >= limit:
            logging.info("User reach the pictures per item plan limit")
            request.flash['message'] = "You have reach the limit of pictures per item allowed by your plan!"
            request.flash['severity'] = "error"
        else:
            form = ImageItemForm(request.POST, request.FILES)
            if form.is_valid():
                img = form.save(commit=False)
                img.item = item
                img.save()
                request.flash['message'] = "Image successfully saved!"
                request.flash['severity'] = "success"
            
            else:
                logging.error(form.errors)
                request.flash['message'] = form.errors
                request.flash['severity'] = "error"
        
        return HttpResponseRedirect(reverse('item_details', args=[item_id]))
    
    else:
        raise Http404

#@shop_admin_required
#def add_item_image(request, item_id):
## wip jquery upload
#    if request.method == 'POST':
#        shop = request.shop
#        item = get_object_or_404(Item, pk=item_id)
#        
#        limit = shop.get_limit('pictures_per_item')
#        total = ImageItem.objects.filter(item=item).count()
#        
#        if total >= limit:
#            logging.info("User reach the pictures per item plan limit")
#            request.flash['message'] = "You have reach the limit of pictures per item allowed by your plan!"
#            request.flash['severity'] = "error"
#        else:
#            f = request.FILES.get('files')
#
#        return HttpResponseRedirect(reverse('item_details', args=[item_id]))
#    
#    else:
#        raise Http404


@shop_admin_required
def del_item_image(request, item_id, image_id):
    image = get_object_or_404(ImageItem, pk=image_id)
    image.delete()
    
    item = image.item
    if ImageItem.objects.filter(item=item).count() == 0:
        item.has_image = False
        item.save()
        
    return HttpResponseRedirect(reverse('item_details', args=[item_id]))

#@shop_admin_required
#def product_remove_image(request, id):
#    imagen_product = get_object_or_404(ImageProduct, pk=int(id), shop=request.shop)
#    imagen_product.delete()
#    
#    response = JSONResponse(True, {}, response_mimetype(request))
#    response['Content-Disposition'] = 'inline; filename=files.json'
#    return response

@shop_admin_required
def set_primary_picture(request, item_id, image_id):
    item = get_object_or_404(Item, pk=item_id)
    images = ImageItem.objects.filter(item=item)
    for image in images:
        image.primary_picture= False
        image.save()
        
    image = get_object_or_404(ImageItem, pk=image_id)
    image.primary_picture = True
    image.save()
    
    return HttpResponseRedirect(reverse('item_details', args=[item_id]))


########NEW FILE########
__FILENAME__ = xls_parser
# -*- coding: utf-8 -*-
import logging

from pyExcelerator import parse_xls

from for_sale.models import Item

class CoinInventoryParser():
    
    def __init__(self):
        pass
    
    def parse_xls(self, xls_file):
        for sheet_name, values in parse_xls(xls_file, 'utf8'): #'cp1251'):
            if sheet_name == "Products":
                products = [[]]
                property_keys = []
                logging.debug('Parsing Sheet = "%s"' % sheet_name.encode('cp866', 'backslashreplace'))
                for row_idx, col_idx in sorted(values.keys()):
                    if row_idx == 0: 
                        property_keys.append(values[(row_idx, col_idx)])
                        continue
                    v = values[(row_idx, col_idx)]
                    if isinstance(v, unicode): v = v.encode('utf8') #'cp866', 'backslashreplace')
                    else: v = str(v)
                    
                    last_row, last_col = len(products), len(products[-1])
                    while last_row < row_idx:
                        products.extend([[]])
                        last_row = len(products)
                
                    while last_col < col_idx:
                        products[-1].extend([''])
                        last_col = len(products[-1])
                
                    products[-1].extend([v])
                
                return (property_keys, products)

                    
########NEW FILE########
__FILENAME__ = admin
from models import *
from django.contrib import admin

admin.site.register(Coin)
admin.site.register(Product, ProductAdmin)
admin.site.register(ProductType)
########NEW FILE########
__FILENAME__ = 0001_initial
# encoding: utf-8
import datetime
from south.db import db
from south.v2 import SchemaMigration
from django.db import models

class Migration(SchemaMigration):

    def forwards(self, orm):
        
        # Adding model 'ProductType'
        db.create_table('inventory_producttype', (
            ('id', self.gf('django.db.models.fields.AutoField')(primary_key=True)),
        ))
        db.send_create_signal('inventory', ['ProductType'])

        # Adding model 'Product'
        db.create_table('inventory_product', (
            ('id', self.gf('django.db.models.fields.AutoField')(primary_key=True)),
            ('shop', self.gf('django.db.models.fields.related.ForeignKey')(to=orm['shops.Shop'])),
            ('title', self.gf('django.db.models.fields.CharField')(max_length=200)),
            ('description', self.gf('django.db.models.fields.TextField')()),
            ('category', self.gf('django.db.models.fields.related.ForeignKey')(to=orm['market.MarketCategory'])),
            ('subcategory', self.gf('django.db.models.fields.related.ForeignKey')(to=orm['market.MarketSubCategory'])),
            ('date_time', self.gf('django.db.models.fields.DateTimeField')(auto_now_add=True, blank=True)),
            ('weight', self.gf('django.db.models.fields.DecimalField')(default='0', max_digits=11, decimal_places=2)),
            ('type', self.gf('django.db.models.fields.related.ForeignKey')(to=orm['inventory.ProductType'], null=True, blank=True)),
        ))
        db.send_create_signal('inventory', ['Product'])

        # Adding model 'Coin'
        db.create_table('inventory_coin', (
            ('producttype_ptr', self.gf('django.db.models.fields.related.OneToOneField')(to=orm['inventory.ProductType'], unique=True, primary_key=True)),
            ('category', self.gf('django.db.models.fields.related.ForeignKey')(to=orm['market.MarketCategory'], null=True, blank=True)),
            ('subcategory', self.gf('django.db.models.fields.related.ForeignKey')(to=orm['market.MarketSubCategory'], null=True, blank=True)),
            ('country_code', self.gf('django.db.models.fields.CharField')(default='us', max_length=2)),
            ('pcgs_number', self.gf('django.db.models.fields.IntegerField')(null=True, blank=True)),
            ('description', self.gf('django.db.models.fields.TextField')(default='', blank='')),
            ('year_issued', self.gf('django.db.models.fields.CharField')(default='', max_length=24, blank='')),
            ('actual_year', self.gf('django.db.models.fields.CharField')(default='', max_length=24, blank='')),
            ('denomination', self.gf('django.db.models.fields.CharField')(default='', max_length=60, blank='')),
            ('major_variety', self.gf('django.db.models.fields.CharField')(default='', max_length=60, blank='')),
            ('die_variety', self.gf('django.db.models.fields.CharField')(default='', max_length=60, blank='')),
            ('prefix', self.gf('django.db.models.fields.CharField')(default='', max_length=60, blank='')),
            ('suffix', self.gf('django.db.models.fields.CharField')(default='', max_length=60, blank='')),
            ('sort_order', self.gf('django.db.models.fields.CharField')(default='', max_length=60, blank='')),
            ('heading', self.gf('django.db.models.fields.CharField')(default='', max_length=60, blank='')),
            ('holder_variety', self.gf('django.db.models.fields.CharField')(default='', max_length=60, blank='')),
            ('holder_variety_2', self.gf('django.db.models.fields.CharField')(default='', max_length=60, blank='')),
            ('additional_data', self.gf('django.db.models.fields.TextField')(default='', blank='')),
            ('last_update', self.gf('django.db.models.fields.DateTimeField')(auto_now=True, blank=True)),
        ))
        db.send_create_signal('inventory', ['Coin'])


    def backwards(self, orm):
        
        # Deleting model 'ProductType'
        db.delete_table('inventory_producttype')

        # Deleting model 'Product'
        db.delete_table('inventory_product')

        # Deleting model 'Coin'
        db.delete_table('inventory_coin')


    models = {
        'auth.group': {
            'Meta': {'object_name': 'Group'},
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '80'}),
            'permissions': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['auth.Permission']", 'symmetrical': 'False', 'blank': 'True'})
        },
        'auth.permission': {
            'Meta': {'unique_together': "(('content_type', 'codename'),)", 'object_name': 'Permission'},
            'codename': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'content_type': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['contenttypes.ContentType']"}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '50'})
        },
        'auth.user': {
            'Meta': {'object_name': 'User'},
            'date_joined': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
            'email': ('django.db.models.fields.EmailField', [], {'max_length': '75'}),
            'first_name': ('django.db.models.fields.CharField', [], {'max_length': '30', 'blank': 'True'}),
            'groups': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['auth.Group']", 'symmetrical': 'False', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'is_active': ('django.db.models.fields.BooleanField', [], {'default': 'True', 'blank': 'True'}),
            'is_staff': ('django.db.models.fields.BooleanField', [], {'default': 'False', 'blank': 'True'}),
            'is_superuser': ('django.db.models.fields.BooleanField', [], {'default': 'False', 'blank': 'True'}),
            'last_login': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
            'last_name': ('django.db.models.fields.CharField', [], {'max_length': '30', 'blank': 'True'}),
            'password': ('django.db.models.fields.CharField', [], {'max_length': '128'}),
            'user_permissions': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['auth.Permission']", 'symmetrical': 'False', 'blank': 'True'}),
            'username': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '32'})
        },
        'contenttypes.contenttype': {
            'Meta': {'unique_together': "(('app_label', 'model'),)", 'object_name': 'ContentType', 'db_table': "'django_content_type'"},
            'app_label': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'model': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '100'})
        },
        'inventory.coin': {
            'Meta': {'object_name': 'Coin', '_ormbases': ['inventory.ProductType']},
            'actual_year': ('django.db.models.fields.CharField', [], {'default': "''", 'max_length': '24', 'blank': "''"}),
            'additional_data': ('django.db.models.fields.TextField', [], {'default': "''", 'blank': "''"}),
            'category': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['market.MarketCategory']", 'null': 'True', 'blank': 'True'}),
            'country_code': ('django.db.models.fields.CharField', [], {'default': "'us'", 'max_length': '2'}),
            'denomination': ('django.db.models.fields.CharField', [], {'default': "''", 'max_length': '60', 'blank': "''"}),
            'description': ('django.db.models.fields.TextField', [], {'default': "''", 'blank': "''"}),
            'die_variety': ('django.db.models.fields.CharField', [], {'default': "''", 'max_length': '60', 'blank': "''"}),
            'heading': ('django.db.models.fields.CharField', [], {'default': "''", 'max_length': '60', 'blank': "''"}),
            'holder_variety': ('django.db.models.fields.CharField', [], {'default': "''", 'max_length': '60', 'blank': "''"}),
            'holder_variety_2': ('django.db.models.fields.CharField', [], {'default': "''", 'max_length': '60', 'blank': "''"}),
            'last_update': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'blank': 'True'}),
            'major_variety': ('django.db.models.fields.CharField', [], {'default': "''", 'max_length': '60', 'blank': "''"}),
            'pcgs_number': ('django.db.models.fields.IntegerField', [], {'null': 'True', 'blank': 'True'}),
            'prefix': ('django.db.models.fields.CharField', [], {'default': "''", 'max_length': '60', 'blank': "''"}),
            'producttype_ptr': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['inventory.ProductType']", 'unique': 'True', 'primary_key': 'True'}),
            'sort_order': ('django.db.models.fields.CharField', [], {'default': "''", 'max_length': '60', 'blank': "''"}),
            'subcategory': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['market.MarketSubCategory']", 'null': 'True', 'blank': 'True'}),
            'suffix': ('django.db.models.fields.CharField', [], {'default': "''", 'max_length': '60', 'blank': "''"}),
            'year_issued': ('django.db.models.fields.CharField', [], {'default': "''", 'max_length': '24', 'blank': "''"})
        },
        'inventory.product': {
            'Meta': {'object_name': 'Product'},
            'category': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['market.MarketCategory']"}),
            'date_time': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'description': ('django.db.models.fields.TextField', [], {}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'shop': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['shops.Shop']"}),
            'subcategory': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['market.MarketSubCategory']"}),
            'title': ('django.db.models.fields.CharField', [], {'max_length': '200'}),
            'type': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['inventory.ProductType']", 'null': 'True', 'blank': 'True'}),
            'weight': ('django.db.models.fields.DecimalField', [], {'default': "'0'", 'max_digits': '11', 'decimal_places': '2'})
        },
        'inventory.producttype': {
            'Meta': {'object_name': 'ProductType'},
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'})
        },
        'market.marketcategory': {
            'Meta': {'object_name': 'MarketCategory'},
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'marketplace': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['market.MarketPlace']"}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '60'}),
            'order': ('django.db.models.fields.IntegerField', [], {'default': '255'}),
            'slug': ('django.db.models.fields.SlugField', [], {'unique': 'True', 'max_length': '60', 'db_index': 'True'})
        },
        'market.marketplace': {
            'Meta': {'object_name': 'MarketPlace'},
            'base_domain': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '128'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '92'}),
            'slug': ('django.db.models.fields.SlugField', [], {'unique': 'True', 'max_length': '92', 'db_index': 'True'}),
            'template_prefix': ('django.db.models.fields.SlugField', [], {'unique': 'True', 'max_length': '92', 'db_index': 'True'}),
            'title': ('django.db.models.fields.CharField', [], {'max_length': '92'})
        },
        'market.marketsubcategory': {
            'Meta': {'unique_together': "(('parent', 'slug'),)", 'object_name': 'MarketSubCategory'},
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'marketplace': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['market.MarketPlace']"}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '60'}),
            'order': ('django.db.models.fields.IntegerField', [], {'default': '255'}),
            'parent': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'subcategories'", 'null': 'True', 'to': "orm['market.MarketCategory']"}),
            'slug': ('django.db.models.fields.SlugField', [], {'max_length': '60', 'db_index': 'True'})
        },
        'shops.shop': {
            'Meta': {'object_name': 'Shop'},
            'admin': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['auth.User']"}),
            'bids': ('django.db.models.fields.IntegerField', [], {'default': '0'}),
            'date_time': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'location': ('django.db.models.fields.CharField', [], {'default': "'39.29038,-76.61219'", 'max_length': '255'}),
            'marketplace': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['market.MarketPlace']"}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '60'}),
            'views': ('django.db.models.fields.IntegerField', [], {'default': '0'})
        }
    }

    complete_apps = ['inventory']

########NEW FILE########
__FILENAME__ = 0002_auto__add_field_product_latest_item
# encoding: utf-8
import datetime
from south.db import db
from south.v2 import SchemaMigration
from django.db import models

class Migration(SchemaMigration):

    def forwards(self, orm):
        
        # Adding field 'Product.latest_item'
        db.add_column('inventory_product', 'latest_item', self.gf('django.db.models.fields.BooleanField')(default=False, blank=True), keep_default=False)


    def backwards(self, orm):
        
        # Deleting field 'Product.latest_item'
        db.delete_column('inventory_product', 'latest_item')


    models = {
        'auth.group': {
            'Meta': {'object_name': 'Group'},
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '80'}),
            'permissions': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['auth.Permission']", 'symmetrical': 'False', 'blank': 'True'})
        },
        'auth.permission': {
            'Meta': {'unique_together': "(('content_type', 'codename'),)", 'object_name': 'Permission'},
            'codename': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'content_type': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['contenttypes.ContentType']"}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '50'})
        },
        'auth.user': {
            'Meta': {'object_name': 'User'},
            'date_joined': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
            'email': ('django.db.models.fields.EmailField', [], {'max_length': '75'}),
            'first_name': ('django.db.models.fields.CharField', [], {'max_length': '30', 'blank': 'True'}),
            'groups': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['auth.Group']", 'symmetrical': 'False', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'is_active': ('django.db.models.fields.BooleanField', [], {'default': 'True', 'blank': 'True'}),
            'is_staff': ('django.db.models.fields.BooleanField', [], {'default': 'False', 'blank': 'True'}),
            'is_superuser': ('django.db.models.fields.BooleanField', [], {'default': 'False', 'blank': 'True'}),
            'last_login': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
            'last_name': ('django.db.models.fields.CharField', [], {'max_length': '30', 'blank': 'True'}),
            'password': ('django.db.models.fields.CharField', [], {'max_length': '128'}),
            'user_permissions': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['auth.Permission']", 'symmetrical': 'False', 'blank': 'True'}),
            'username': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '32'})
        },
        'contenttypes.contenttype': {
            'Meta': {'unique_together': "(('app_label', 'model'),)", 'object_name': 'ContentType', 'db_table': "'django_content_type'"},
            'app_label': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'model': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '100'})
        },
        'inventory.coin': {
            'Meta': {'object_name': 'Coin', '_ormbases': ['inventory.ProductType']},
            'actual_year': ('django.db.models.fields.CharField', [], {'default': "''", 'max_length': '24', 'blank': "''"}),
            'additional_data': ('django.db.models.fields.TextField', [], {'default': "''", 'blank': "''"}),
            'category': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['market.MarketCategory']", 'null': 'True', 'blank': 'True'}),
            'country_code': ('django.db.models.fields.CharField', [], {'default': "'us'", 'max_length': '2'}),
            'denomination': ('django.db.models.fields.CharField', [], {'default': "''", 'max_length': '60', 'blank': "''"}),
            'description': ('django.db.models.fields.TextField', [], {'default': "''", 'blank': "''"}),
            'die_variety': ('django.db.models.fields.CharField', [], {'default': "''", 'max_length': '60', 'blank': "''"}),
            'heading': ('django.db.models.fields.CharField', [], {'default': "''", 'max_length': '60', 'blank': "''"}),
            'holder_variety': ('django.db.models.fields.CharField', [], {'default': "''", 'max_length': '60', 'blank': "''"}),
            'holder_variety_2': ('django.db.models.fields.CharField', [], {'default': "''", 'max_length': '60', 'blank': "''"}),
            'last_update': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'blank': 'True'}),
            'major_variety': ('django.db.models.fields.CharField', [], {'default': "''", 'max_length': '60', 'blank': "''"}),
            'pcgs_number': ('django.db.models.fields.IntegerField', [], {'null': 'True', 'blank': 'True'}),
            'prefix': ('django.db.models.fields.CharField', [], {'default': "''", 'max_length': '60', 'blank': "''"}),
            'producttype_ptr': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['inventory.ProductType']", 'unique': 'True', 'primary_key': 'True'}),
            'sort_order': ('django.db.models.fields.CharField', [], {'default': "''", 'max_length': '60', 'blank': "''"}),
            'subcategory': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['market.MarketSubCategory']", 'null': 'True', 'blank': 'True'}),
            'suffix': ('django.db.models.fields.CharField', [], {'default': "''", 'max_length': '60', 'blank': "''"}),
            'year_issued': ('django.db.models.fields.CharField', [], {'default': "''", 'max_length': '24', 'blank': "''"})
        },
        'inventory.product': {
            'Meta': {'object_name': 'Product'},
            'category': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['market.MarketCategory']"}),
            'date_time': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'description': ('django.db.models.fields.TextField', [], {}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'latest_item': ('django.db.models.fields.BooleanField', [], {'default': 'False', 'blank': 'True'}),
            'shop': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['shops.Shop']"}),
            'subcategory': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['market.MarketSubCategory']"}),
            'title': ('django.db.models.fields.CharField', [], {'max_length': '200'}),
            'type': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['inventory.ProductType']", 'null': 'True', 'blank': 'True'}),
            'weight': ('django.db.models.fields.DecimalField', [], {'default': "'0'", 'max_digits': '11', 'decimal_places': '2'})
        },
        'inventory.producttype': {
            'Meta': {'object_name': 'ProductType'},
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'})
        },
        'market.marketcategory': {
            'Meta': {'object_name': 'MarketCategory'},
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'marketplace': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['market.MarketPlace']"}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '60'}),
            'order': ('django.db.models.fields.IntegerField', [], {'default': '255'}),
            'slug': ('django.db.models.fields.SlugField', [], {'unique': 'True', 'max_length': '60', 'db_index': 'True'})
        },
        'market.marketplace': {
            'Meta': {'object_name': 'MarketPlace'},
            'base_domain': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '128'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '92'}),
            'slug': ('django.db.models.fields.SlugField', [], {'unique': 'True', 'max_length': '92', 'db_index': 'True'}),
            'template_prefix': ('django.db.models.fields.SlugField', [], {'unique': 'True', 'max_length': '92', 'db_index': 'True'}),
            'title': ('django.db.models.fields.CharField', [], {'max_length': '92'})
        },
        'market.marketsubcategory': {
            'Meta': {'unique_together': "(('parent', 'slug'),)", 'object_name': 'MarketSubCategory'},
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'marketplace': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['market.MarketPlace']"}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '60'}),
            'order': ('django.db.models.fields.IntegerField', [], {'default': '255'}),
            'parent': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'subcategories'", 'null': 'True', 'to': "orm['market.MarketCategory']"}),
            'slug': ('django.db.models.fields.SlugField', [], {'max_length': '60', 'db_index': 'True'})
        },
        'shops.shop': {
            'Meta': {'object_name': 'Shop'},
            'admin': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['auth.User']"}),
            'bids': ('django.db.models.fields.IntegerField', [], {'default': '0'}),
            'date_time': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'location': ('django.db.models.fields.CharField', [], {'default': "'39.29038,-76.61219'", 'max_length': '255'}),
            'marketplace': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['market.MarketPlace']"}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '60'}),
            'views': ('django.db.models.fields.IntegerField', [], {'default': '0'})
        }
    }

    complete_apps = ['inventory']

########NEW FILE########
__FILENAME__ = 0003_auto__chg_field_product_subcategory
# encoding: utf-8
import datetime
from south.db import db
from south.v2 import SchemaMigration
from django.db import models

class Migration(SchemaMigration):

    def forwards(self, orm):
        
        # Changing field 'Product.subcategory'
        db.alter_column('inventory_product', 'subcategory_id', self.gf('django.db.models.fields.related.ForeignKey')(to=orm['market.MarketSubCategory'], null=True, blank=True))


    def backwards(self, orm):
        
        # Changing field 'Product.subcategory'
        db.alter_column('inventory_product', 'subcategory_id', self.gf('django.db.models.fields.related.ForeignKey')(to=orm['market.MarketSubCategory']))


    models = {
        'auth.group': {
            'Meta': {'object_name': 'Group'},
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '80'}),
            'permissions': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['auth.Permission']", 'symmetrical': 'False', 'blank': 'True'})
        },
        'auth.permission': {
            'Meta': {'unique_together': "(('content_type', 'codename'),)", 'object_name': 'Permission'},
            'codename': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'content_type': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['contenttypes.ContentType']"}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '50'})
        },
        'auth.user': {
            'Meta': {'object_name': 'User'},
            'date_joined': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
            'email': ('django.db.models.fields.EmailField', [], {'max_length': '75'}),
            'first_name': ('django.db.models.fields.CharField', [], {'max_length': '30', 'blank': 'True'}),
            'groups': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['auth.Group']", 'symmetrical': 'False', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'is_active': ('django.db.models.fields.BooleanField', [], {'default': 'True', 'blank': 'True'}),
            'is_staff': ('django.db.models.fields.BooleanField', [], {'default': 'False', 'blank': 'True'}),
            'is_superuser': ('django.db.models.fields.BooleanField', [], {'default': 'False', 'blank': 'True'}),
            'last_login': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
            'last_name': ('django.db.models.fields.CharField', [], {'max_length': '30', 'blank': 'True'}),
            'password': ('django.db.models.fields.CharField', [], {'max_length': '128'}),
            'user_permissions': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['auth.Permission']", 'symmetrical': 'False', 'blank': 'True'}),
            'username': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '32'})
        },
        'contenttypes.contenttype': {
            'Meta': {'unique_together': "(('app_label', 'model'),)", 'object_name': 'ContentType', 'db_table': "'django_content_type'"},
            'app_label': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'model': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '100'})
        },
        'inventory.coin': {
            'Meta': {'object_name': 'Coin', '_ormbases': ['inventory.ProductType']},
            'actual_year': ('django.db.models.fields.CharField', [], {'default': "''", 'max_length': '24', 'blank': "''"}),
            'additional_data': ('django.db.models.fields.TextField', [], {'default': "''", 'blank': "''"}),
            'category': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['market.MarketCategory']", 'null': 'True', 'blank': 'True'}),
            'country_code': ('django.db.models.fields.CharField', [], {'default': "'us'", 'max_length': '2'}),
            'denomination': ('django.db.models.fields.CharField', [], {'default': "''", 'max_length': '60', 'blank': "''"}),
            'description': ('django.db.models.fields.TextField', [], {'default': "''", 'blank': "''"}),
            'die_variety': ('django.db.models.fields.CharField', [], {'default': "''", 'max_length': '60', 'blank': "''"}),
            'heading': ('django.db.models.fields.CharField', [], {'default': "''", 'max_length': '60', 'blank': "''"}),
            'holder_variety': ('django.db.models.fields.CharField', [], {'default': "''", 'max_length': '60', 'blank': "''"}),
            'holder_variety_2': ('django.db.models.fields.CharField', [], {'default': "''", 'max_length': '60', 'blank': "''"}),
            'last_update': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'blank': 'True'}),
            'major_variety': ('django.db.models.fields.CharField', [], {'default': "''", 'max_length': '60', 'blank': "''"}),
            'pcgs_number': ('django.db.models.fields.IntegerField', [], {'null': 'True', 'blank': 'True'}),
            'prefix': ('django.db.models.fields.CharField', [], {'default': "''", 'max_length': '60', 'blank': "''"}),
            'producttype_ptr': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['inventory.ProductType']", 'unique': 'True', 'primary_key': 'True'}),
            'sort_order': ('django.db.models.fields.CharField', [], {'default': "''", 'max_length': '60', 'blank': "''"}),
            'subcategory': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['market.MarketSubCategory']", 'null': 'True', 'blank': 'True'}),
            'suffix': ('django.db.models.fields.CharField', [], {'default': "''", 'max_length': '60', 'blank': "''"}),
            'year_issued': ('django.db.models.fields.CharField', [], {'default': "''", 'max_length': '24', 'blank': "''"})
        },
        'inventory.product': {
            'Meta': {'object_name': 'Product'},
            'category': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['market.MarketCategory']"}),
            'date_time': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'description': ('django.db.models.fields.TextField', [], {}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'latest_item': ('django.db.models.fields.BooleanField', [], {'default': 'False', 'blank': 'True'}),
            'shop': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['shops.Shop']"}),
            'subcategory': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['market.MarketSubCategory']", 'null': 'True', 'blank': 'True'}),
            'title': ('django.db.models.fields.CharField', [], {'max_length': '200'}),
            'type': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['inventory.ProductType']", 'null': 'True', 'blank': 'True'}),
            'weight': ('django.db.models.fields.DecimalField', [], {'default': "'0'", 'max_digits': '11', 'decimal_places': '2'})
        },
        'inventory.producttype': {
            'Meta': {'object_name': 'ProductType'},
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'})
        },
        'market.marketcategory': {
            'Meta': {'object_name': 'MarketCategory'},
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'marketplace': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['market.MarketPlace']"}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '60'}),
            'order': ('django.db.models.fields.IntegerField', [], {'default': '255'}),
            'slug': ('django.db.models.fields.SlugField', [], {'unique': 'True', 'max_length': '60', 'db_index': 'True'})
        },
        'market.marketplace': {
            'Meta': {'object_name': 'MarketPlace'},
            'base_domain': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '128'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '92'}),
            'slug': ('django.db.models.fields.SlugField', [], {'unique': 'True', 'max_length': '92', 'db_index': 'True'}),
            'template_prefix': ('django.db.models.fields.SlugField', [], {'unique': 'True', 'max_length': '92', 'db_index': 'True'}),
            'title': ('django.db.models.fields.CharField', [], {'max_length': '92'})
        },
        'market.marketsubcategory': {
            'Meta': {'unique_together': "(('parent', 'slug'),)", 'object_name': 'MarketSubCategory'},
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'marketplace': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['market.MarketPlace']"}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '60'}),
            'order': ('django.db.models.fields.IntegerField', [], {'default': '255'}),
            'parent': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'subcategories'", 'null': 'True', 'to': "orm['market.MarketCategory']"}),
            'slug': ('django.db.models.fields.SlugField', [], {'max_length': '60', 'db_index': 'True'})
        },
        'shops.shop': {
            'Meta': {'object_name': 'Shop'},
            'admin': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['auth.User']"}),
            'bids': ('django.db.models.fields.IntegerField', [], {'default': '0'}),
            'date_time': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'location': ('django.db.models.fields.CharField', [], {'default': "'39.29038,-76.61219'", 'max_length': '255'}),
            'marketplace': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['market.MarketPlace']"}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '60'}),
            'views': ('django.db.models.fields.IntegerField', [], {'default': '0'})
        }
    }

    complete_apps = ['inventory']

########NEW FILE########
__FILENAME__ = 0004_auto__add_field_product_has_image
# encoding: utf-8
import datetime
from south.db import db
from south.v2 import SchemaMigration
from django.db import models

class Migration(SchemaMigration):

    def forwards(self, orm):
        
        # Adding field 'Product.has_image'
        db.add_column('inventory_product', 'has_image', self.gf('django.db.models.fields.BooleanField')(default=False, blank=True), keep_default=False)


    def backwards(self, orm):
        
        # Deleting field 'Product.has_image'
        db.delete_column('inventory_product', 'has_image')


    models = {
        'auth.group': {
            'Meta': {'object_name': 'Group'},
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '80'}),
            'permissions': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['auth.Permission']", 'symmetrical': 'False', 'blank': 'True'})
        },
        'auth.permission': {
            'Meta': {'unique_together': "(('content_type', 'codename'),)", 'object_name': 'Permission'},
            'codename': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'content_type': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['contenttypes.ContentType']"}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '50'})
        },
        'auth.user': {
            'Meta': {'object_name': 'User'},
            'date_joined': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
            'email': ('django.db.models.fields.EmailField', [], {'max_length': '75'}),
            'first_name': ('django.db.models.fields.CharField', [], {'max_length': '30', 'blank': 'True'}),
            'groups': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['auth.Group']", 'symmetrical': 'False', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'is_active': ('django.db.models.fields.BooleanField', [], {'default': 'True', 'blank': 'True'}),
            'is_staff': ('django.db.models.fields.BooleanField', [], {'default': 'False', 'blank': 'True'}),
            'is_superuser': ('django.db.models.fields.BooleanField', [], {'default': 'False', 'blank': 'True'}),
            'last_login': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
            'last_name': ('django.db.models.fields.CharField', [], {'max_length': '30', 'blank': 'True'}),
            'password': ('django.db.models.fields.CharField', [], {'max_length': '128'}),
            'user_permissions': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['auth.Permission']", 'symmetrical': 'False', 'blank': 'True'}),
            'username': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '32'})
        },
        'contenttypes.contenttype': {
            'Meta': {'unique_together': "(('app_label', 'model'),)", 'object_name': 'ContentType', 'db_table': "'django_content_type'"},
            'app_label': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'model': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '100'})
        },
        'inventory.coin': {
            'Meta': {'object_name': 'Coin', '_ormbases': ['inventory.ProductType']},
            'actual_year': ('django.db.models.fields.CharField', [], {'default': "''", 'max_length': '24', 'blank': "''"}),
            'additional_data': ('django.db.models.fields.TextField', [], {'default': "''", 'blank': "''"}),
            'category': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['market.MarketCategory']", 'null': 'True', 'blank': 'True'}),
            'country_code': ('django.db.models.fields.CharField', [], {'default': "'us'", 'max_length': '2'}),
            'denomination': ('django.db.models.fields.CharField', [], {'default': "''", 'max_length': '60', 'blank': "''"}),
            'description': ('django.db.models.fields.TextField', [], {'default': "''", 'blank': "''"}),
            'die_variety': ('django.db.models.fields.CharField', [], {'default': "''", 'max_length': '60', 'blank': "''"}),
            'heading': ('django.db.models.fields.CharField', [], {'default': "''", 'max_length': '60', 'blank': "''"}),
            'holder_variety': ('django.db.models.fields.CharField', [], {'default': "''", 'max_length': '60', 'blank': "''"}),
            'holder_variety_2': ('django.db.models.fields.CharField', [], {'default': "''", 'max_length': '60', 'blank': "''"}),
            'last_update': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'blank': 'True'}),
            'major_variety': ('django.db.models.fields.CharField', [], {'default': "''", 'max_length': '60', 'blank': "''"}),
            'pcgs_number': ('django.db.models.fields.IntegerField', [], {'null': 'True', 'blank': 'True'}),
            'prefix': ('django.db.models.fields.CharField', [], {'default': "''", 'max_length': '60', 'blank': "''"}),
            'producttype_ptr': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['inventory.ProductType']", 'unique': 'True', 'primary_key': 'True'}),
            'sort_order': ('django.db.models.fields.CharField', [], {'default': "''", 'max_length': '60', 'blank': "''"}),
            'subcategory': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['market.MarketSubCategory']", 'null': 'True', 'blank': 'True'}),
            'suffix': ('django.db.models.fields.CharField', [], {'default': "''", 'max_length': '60', 'blank': "''"}),
            'year_issued': ('django.db.models.fields.CharField', [], {'default': "''", 'max_length': '24', 'blank': "''"})
        },
        'inventory.product': {
            'Meta': {'object_name': 'Product'},
            'category': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['market.MarketCategory']"}),
            'date_time': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'description': ('django.db.models.fields.TextField', [], {}),
            'has_image': ('django.db.models.fields.BooleanField', [], {'default': 'False', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'latest_item': ('django.db.models.fields.BooleanField', [], {'default': 'False', 'blank': 'True'}),
            'shop': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['shops.Shop']"}),
            'subcategory': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['market.MarketSubCategory']", 'null': 'True', 'blank': 'True'}),
            'title': ('django.db.models.fields.CharField', [], {'max_length': '200'}),
            'type': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['inventory.ProductType']", 'null': 'True', 'blank': 'True'}),
            'weight': ('django.db.models.fields.DecimalField', [], {'default': "'0'", 'max_digits': '11', 'decimal_places': '2'})
        },
        'inventory.producttype': {
            'Meta': {'object_name': 'ProductType'},
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'})
        },
        'market.marketcategory': {
            'Meta': {'object_name': 'MarketCategory'},
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'marketplace': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['market.MarketPlace']"}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '60'}),
            'order': ('django.db.models.fields.IntegerField', [], {'default': '255'}),
            'slug': ('django.db.models.fields.SlugField', [], {'unique': 'True', 'max_length': '60', 'db_index': 'True'})
        },
        'market.marketplace': {
            'Meta': {'object_name': 'MarketPlace'},
            'base_domain': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '128'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '92'}),
            'slug': ('django.db.models.fields.SlugField', [], {'unique': 'True', 'max_length': '92', 'db_index': 'True'}),
            'template_prefix': ('django.db.models.fields.SlugField', [], {'unique': 'True', 'max_length': '92', 'db_index': 'True'}),
            'title': ('django.db.models.fields.CharField', [], {'max_length': '92'})
        },
        'market.marketsubcategory': {
            'Meta': {'unique_together': "(('parent', 'slug'),)", 'object_name': 'MarketSubCategory'},
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'marketplace': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['market.MarketPlace']"}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '60'}),
            'order': ('django.db.models.fields.IntegerField', [], {'default': '255'}),
            'parent': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'subcategories'", 'null': 'True', 'to': "orm['market.MarketCategory']"}),
            'slug': ('django.db.models.fields.SlugField', [], {'max_length': '60', 'db_index': 'True'})
        },
        'shops.shop': {
            'Meta': {'object_name': 'Shop'},
            'admin': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['auth.User']"}),
            'bids': ('django.db.models.fields.IntegerField', [], {'default': '0'}),
            'date_time': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'location': ('django.db.models.fields.CharField', [], {'default': "'39.29038,-76.61219'", 'max_length': '255'}),
            'marketplace': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['market.MarketPlace']"}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '60'}),
            'views': ('django.db.models.fields.IntegerField', [], {'default': '0'})
        }
    }

    complete_apps = ['inventory']

########NEW FILE########
__FILENAME__ = models
import datetime
import decimal

from django.db import models
from django.contrib import admin

from market.models import MarketCategory, MarketSubCategory
from shops.models import Shop

class ProductType(models.Model):
    """ 
    """
    pass


class ActiveProductsManager(models.Manager):
    def get_query_set(self):
        return super(ActiveProductsManager, self).get_query_set().filter(shop__in=Shop.actives.all())

class Product(models.Model):
    """
        Superclass for common product attrs between lots  and forsale items         
    """
    shop = models.ForeignKey(Shop)
    title = models.CharField(max_length=200)
    description = models.TextField()
    category = models.ForeignKey(MarketCategory)
    subcategory = models.ForeignKey(MarketSubCategory, null=True, blank=True)
    date_time = models.DateTimeField(auto_now_add=True)
    weight = models.DecimalField(max_digits=11, decimal_places=2, default=decimal.Decimal(0))
    type = models.ForeignKey(ProductType, null=True, blank=True)
    latest_item = models.BooleanField(default=False)
    has_image = models.BooleanField(default=False)
    
    objects = ActiveProductsManager() # The active products manager.
    
    def save(self, *args, **kwargs):
        super(Product, self).save(*args, **kwargs)
        shop = self.shop
        shop.last_date_to_post = datetime.datetime.now()
        shop.save()        
    
    @classmethod
    def update_latest_item(cls, shop):
        try:
            older = Product.objects.filter(shop=shop, latest_item=True).get()
            older.latest_item = False
            older.save()
        except Product.DoesNotExist:
            pass
        
        try:
            new_latest = Product.objects.filter(shop=shop).order_by("-id")[0]
            new_latest.latest_item = True
            new_latest.save()
        except (Product.DoesNotExist, IndexError):
            pass
            
    def update_has_image(self):
        self.has_image = self.child().image() != None
        self.save()
    
    def child(self):
        #TODO: arreglar esto que es un asco,..
        if hasattr(self, 'lot'):
            return self.lot
        elif hasattr(self, 'item'):
            return self.item
        
        
    def __unicode__(self):
        return "%s > %s" %(self.shop, self.title)

class ProductAdmin(admin.ModelAdmin):
    list_filter = ('shop', 'date_time', 'category')

class Coin(ProductType):
    category = models.ForeignKey(MarketCategory, null=True, blank=True)
    subcategory = models.ForeignKey(MarketSubCategory, null=True, blank=True)
    country_code = models.CharField(max_length=2, default='us')
    pcgs_number = models.IntegerField(null=True, blank=True)
    description = models.TextField(default="", blank="")
    year_issued = models.CharField(max_length=24, default="", blank="")
    actual_year = models.CharField(max_length=24, default="", blank="")
    denomination = models.CharField(max_length=60, default="", blank="")
    major_variety = models.CharField(max_length=60, default="", blank="")
    die_variety = models.CharField(max_length=60, default="", blank="")
    prefix = models.CharField(max_length=60, default="", blank="")
    suffix = models.CharField(max_length=60, default="", blank="")
    sort_order = models.CharField(max_length=60, default="", blank="")
    heading = models.CharField(max_length=60, default="", blank="")
    holder_variety = models.CharField(max_length=60, default="", blank="")
    holder_variety_2 = models.CharField(max_length=60, default="", blank="")
    additional_data = models.TextField(default="", blank="")
    last_update = models.DateTimeField(auto_now=True)

    def __unicode__(self):
        return "Coin<%s>" % self.pcgs_number
########NEW FILE########
__FILENAME__ = tests
"""
This file demonstrates two different styles of tests (one doctest and one
unittest). These will both pass when you run "manage.py test".

Replace these with more appropriate tests for your application.
"""

from django.test import TestCase

class SimpleTest(TestCase):
    def test_basic_addition(self):
        """
        Tests that 1 + 1 always equals 2.
        """
        self.failUnlessEqual(1 + 1, 2)

__test__ = {"doctest": """
Another way to test that 1 + 1 is equal to 2.

>>> 1 + 1 == 2
True
"""}


########NEW FILE########
__FILENAME__ = views
# Create your views here.

########NEW FILE########
__FILENAME__ = admin
from models import *
from django.contrib import admin

admin.site.register(Invoice)
########NEW FILE########
__FILENAME__ = models
import datetime

from django.db import models

from django.utils.translation import ugettext_lazy as _

from shops.models import Shop

TRANSACTION_TYPE = (("sale", "SALE"), ("credit", "CREDIT"), ("refund", "REFUND"))

class Invoice(models.Model):
    market_place = models.CharField(max_length=100)
    shop = models.ForeignKey(Shop, null=True)
    shop_dns = models.CharField(max_length=200)
    
    cc_mask = models.CharField(max_length=20)
    cc_type = models.CharField(max_length=40) 
    charge =  models.DecimalField(max_digits=11, decimal_places=2)
    currency = models.CharField(max_length=5)
    
    transaction_status_response = models.CharField(max_length=200)  
    transaction_type = models.CharField(choices=TRANSACTION_TYPE, max_length=40)
    transaction_id = models.CharField(max_length=100)
    
    customer_name = models.CharField(max_length=200)
    customer_email = models.CharField(max_length=100)
    customer_id = models.CharField(max_length=200)
    
    subscription_id = models.CharField(max_length=200)
    
    plan_id = models.CharField(max_length=40)
    valid_from = models.DateTimeField()
    valid_up_to = models.DateTimeField()
    next_billing_date = models.DateTimeField()
    
    creation_date = models.DateTimeField(auto_now_add=True)
    last_send = models.DateTimeField(null=True)
    
    def to_text(self):
        text = """
        ------------------------INVOICE %s Transaction ID: %s -----------------------
                
        This is an INVOICE for your shop %s. 1 month %s Plan %s %s From %s to %s.
        
        Transaction Type   : %s
        Transaction Status : %s
        Bill to            : %s
        Credit Card Type   : %s
        Credit Card Billed : %s 
        Charge             : %s %s        
        
        This charge covers your account until %s. You will be billed again at %s        
    
        ---------------------------------------------------------------------------------------------------------        
        Thank you for using %s.
        
        """ % (datetime.datetime.today(), self.transaction_id, self.shop_dns, self.plan_id, self.currency, self.charge, 
               self.valid_from, self.valid_up_to, self.transaction_type, self.transaction_status_response, 
               self.customer_name, self.cc_type, self.cc_mask, self.currency,
               self.charge, self.valid_up_to, self.next_billing_date, self.market_place)  
        
        return text
                
    
    
########NEW FILE########
__FILENAME__ = urls
from django.conf.urls.defaults import *

urlpatterns = patterns('',
    #url(r'^auctions_list/$', 'auctions.views.auctions_list', name='auctions_list'),
)
########NEW FILE########
__FILENAME__ = views
from django.core.urlresolvers import reverse
from django.contrib.auth.decorators import login_required
from django.template import RequestContext
from django.http import HttpResponseRedirect, HttpResponse, Http404
from django.shortcuts import render_to_response, get_object_or_404
from django.utils.translation import ugettext as _

from django.core.paginator import Paginator, InvalidPage, EmptyPage

from core.decorators import staff_required

import datetime
########NEW FILE########
__FILENAME__ = admin
from models import *
from django.contrib import admin

admin.site.register(Lot)
admin.site.register(ImageLot)
admin.site.register(BidHistory)



########NEW FILE########
__FILENAME__ = forms
from django.forms import ModelForm, ModelChoiceField

from auctions.models import AuctionSession
from models import Lot, ImageLot
from market.models import MarketCategory, MarketSubCategory

class CategoryChoiceField(ModelChoiceField):
    def label_from_instance(self, obj):
        return "%s" % obj.name


class LotForm(ModelForm):
    category = CategoryChoiceField(queryset = MarketCategory.objects.all())
        
    class Meta:
        model = Lot
        fields = ['title', 'description', 'starting_bid', 'reserve', 'weight', 'subcategory', 'category', 'session']
        
    
    def __init__(self, request=None, *args, **kwargs):
        super(LotForm, self).__init__(*args, **kwargs)
        # Filter sessions and categorys for specific shop 
        if request:
            import datetime
            today = datetime.datetime.today()
            self.shop = request.shop
            session = self.fields.get('session')
            session.queryset = AuctionSession.objects.filter(shop=self.shop).filter(end__gt=today)
            category = self.fields.get('category')
            category.queryset = MarketCategory.objects.filter(marketplace=self.shop.marketplace)

     

class ImageLotForm(ModelForm):
    class Meta:
        model = ImageLot
        fields = ['image']
########NEW FILE########
__FILENAME__ = 0001_initial
# encoding: utf-8
import datetime
from south.db import db
from south.v2 import SchemaMigration
from django.db import models

class Migration(SchemaMigration):

    def forwards(self, orm):
        
        # Adding model 'Lot'
        db.create_table('lots_lot', (
            ('product_ptr', self.gf('django.db.models.fields.related.OneToOneField')(to=orm['inventory.Product'], unique=True, primary_key=True)),
            ('starting_bid', self.gf('django.db.models.fields.DecimalField')(max_digits=11, decimal_places=2)),
            ('reserve', self.gf('django.db.models.fields.DecimalField')(max_digits=11, decimal_places=2)),
            ('session', self.gf('django.db.models.fields.related.ForeignKey')(to=orm['auctions.AuctionSession'])),
            ('state', self.gf('django.db.models.fields.CharField')(default='A', max_length=1)),
            ('bid_actual', self.gf('django.db.models.fields.related.OneToOneField')(related_name='lot_history', unique=True, null=True, to=orm['lots.BidHistory'])),
        ))
        db.send_create_signal('lots', ['Lot'])

        # Adding model 'ImageLot'
        db.create_table('lots_imagelot', (
            ('id', self.gf('django.db.models.fields.AutoField')(primary_key=True)),
            ('image', self.gf('core.thumbs.ImageWithThumbsField')(max_length=100)),
            ('lot', self.gf('django.db.models.fields.related.ForeignKey')(to=orm['lots.Lot'])),
            ('primary_picture', self.gf('django.db.models.fields.BooleanField')(default=False, blank=True)),
        ))
        db.send_create_signal('lots', ['ImageLot'])

        # Adding model 'BidHistory'
        db.create_table('lots_bidhistory', (
            ('id', self.gf('django.db.models.fields.AutoField')(primary_key=True)),
            ('lot', self.gf('django.db.models.fields.related.ForeignKey')(to=orm['lots.Lot'])),
            ('bidder', self.gf('django.db.models.fields.related.ForeignKey')(to=orm['auth.User'])),
            ('bid_amount', self.gf('django.db.models.fields.DecimalField')(max_digits=11, decimal_places=2)),
            ('bid_time', self.gf('django.db.models.fields.DateTimeField')(auto_now_add=True, blank=True)),
        ))
        db.send_create_signal('lots', ['BidHistory'])


    def backwards(self, orm):
        
        # Deleting model 'Lot'
        db.delete_table('lots_lot')

        # Deleting model 'ImageLot'
        db.delete_table('lots_imagelot')

        # Deleting model 'BidHistory'
        db.delete_table('lots_bidhistory')


    models = {
        'auctions.auctionsession': {
            'Meta': {'object_name': 'AuctionSession'},
            'description': ('django.db.models.fields.TextField', [], {}),
            'end': ('django.db.models.fields.DateTimeField', [], {}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'shop': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['shops.Shop']"}),
            'start': ('django.db.models.fields.DateTimeField', [], {}),
            'title': ('django.db.models.fields.CharField', [], {'max_length': '60'})
        },
        'auth.group': {
            'Meta': {'object_name': 'Group'},
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '80'}),
            'permissions': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['auth.Permission']", 'symmetrical': 'False', 'blank': 'True'})
        },
        'auth.permission': {
            'Meta': {'unique_together': "(('content_type', 'codename'),)", 'object_name': 'Permission'},
            'codename': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'content_type': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['contenttypes.ContentType']"}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '50'})
        },
        'auth.user': {
            'Meta': {'object_name': 'User'},
            'date_joined': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
            'email': ('django.db.models.fields.EmailField', [], {'max_length': '75'}),
            'first_name': ('django.db.models.fields.CharField', [], {'max_length': '30', 'blank': 'True'}),
            'groups': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['auth.Group']", 'symmetrical': 'False', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'is_active': ('django.db.models.fields.BooleanField', [], {'default': 'True', 'blank': 'True'}),
            'is_staff': ('django.db.models.fields.BooleanField', [], {'default': 'False', 'blank': 'True'}),
            'is_superuser': ('django.db.models.fields.BooleanField', [], {'default': 'False', 'blank': 'True'}),
            'last_login': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
            'last_name': ('django.db.models.fields.CharField', [], {'max_length': '30', 'blank': 'True'}),
            'password': ('django.db.models.fields.CharField', [], {'max_length': '128'}),
            'user_permissions': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['auth.Permission']", 'symmetrical': 'False', 'blank': 'True'}),
            'username': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '32'})
        },
        'contenttypes.contenttype': {
            'Meta': {'unique_together': "(('app_label', 'model'),)", 'object_name': 'ContentType', 'db_table': "'django_content_type'"},
            'app_label': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'model': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '100'})
        },
        'inventory.product': {
            'Meta': {'object_name': 'Product'},
            'category': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['market.MarketCategory']"}),
            'date_time': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'description': ('django.db.models.fields.TextField', [], {}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'latest_item': ('django.db.models.fields.BooleanField', [], {'default': 'False', 'blank': 'True'}),
            'shop': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['shops.Shop']"}),
            'subcategory': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['market.MarketSubCategory']", 'null': 'True', 'blank': 'True'}),
            'title': ('django.db.models.fields.CharField', [], {'max_length': '200'}),
            'type': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['inventory.ProductType']", 'null': 'True', 'blank': 'True'}),
            'weight': ('django.db.models.fields.DecimalField', [], {'default': "'0'", 'max_digits': '11', 'decimal_places': '2'})
        },
        'inventory.producttype': {
            'Meta': {'object_name': 'ProductType'},
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'})
        },
        'lots.bidhistory': {
            'Meta': {'object_name': 'BidHistory'},
            'bid_amount': ('django.db.models.fields.DecimalField', [], {'max_digits': '11', 'decimal_places': '2'}),
            'bid_time': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'bidder': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['auth.User']"}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'lot': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['lots.Lot']"})
        },
        'lots.imagelot': {
            'Meta': {'object_name': 'ImageLot'},
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'image': ('core.thumbs.ImageWithThumbsField', [], {'max_length': '100'}),
            'lot': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['lots.Lot']"}),
            'primary_picture': ('django.db.models.fields.BooleanField', [], {'default': 'False', 'blank': 'True'})
        },
        'lots.lot': {
            'Meta': {'object_name': 'Lot', '_ormbases': ['inventory.Product']},
            'bid_actual': ('django.db.models.fields.related.OneToOneField', [], {'related_name': "'lot_history'", 'unique': 'True', 'null': 'True', 'to': "orm['lots.BidHistory']"}),
            'product_ptr': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['inventory.Product']", 'unique': 'True', 'primary_key': 'True'}),
            'reserve': ('django.db.models.fields.DecimalField', [], {'max_digits': '11', 'decimal_places': '2'}),
            'session': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['auctions.AuctionSession']"}),
            'starting_bid': ('django.db.models.fields.DecimalField', [], {'max_digits': '11', 'decimal_places': '2'}),
            'state': ('django.db.models.fields.CharField', [], {'default': "'A'", 'max_length': '1'})
        },
        'market.marketcategory': {
            'Meta': {'object_name': 'MarketCategory'},
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'marketplace': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['market.MarketPlace']"}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '60'}),
            'order': ('django.db.models.fields.IntegerField', [], {'default': '255'}),
            'slug': ('django.db.models.fields.SlugField', [], {'unique': 'True', 'max_length': '60', 'db_index': 'True'})
        },
        'market.marketplace': {
            'Meta': {'object_name': 'MarketPlace'},
            'base_domain': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '128'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '92'}),
            'slug': ('django.db.models.fields.SlugField', [], {'unique': 'True', 'max_length': '92', 'db_index': 'True'}),
            'template_prefix': ('django.db.models.fields.SlugField', [], {'unique': 'True', 'max_length': '92', 'db_index': 'True'}),
            'title': ('django.db.models.fields.CharField', [], {'max_length': '92'})
        },
        'market.marketsubcategory': {
            'Meta': {'unique_together': "(('parent', 'slug'),)", 'object_name': 'MarketSubCategory'},
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'marketplace': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['market.MarketPlace']"}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '60'}),
            'order': ('django.db.models.fields.IntegerField', [], {'default': '255'}),
            'parent': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'subcategories'", 'null': 'True', 'to': "orm['market.MarketCategory']"}),
            'slug': ('django.db.models.fields.SlugField', [], {'max_length': '60', 'db_index': 'True'})
        },
        'shops.shop': {
            'Meta': {'object_name': 'Shop'},
            'admin': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['auth.User']"}),
            'bids': ('django.db.models.fields.IntegerField', [], {'default': '0'}),
            'date_time': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'location': ('django.db.models.fields.CharField', [], {'default': "'39.29038,-76.61219'", 'max_length': '255'}),
            'marketplace': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['market.MarketPlace']"}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '60'}),
            'views': ('django.db.models.fields.IntegerField', [], {'default': '0'})
        }
    }

    complete_apps = ['lots']

########NEW FILE########
__FILENAME__ = 0002_auto__add_field_bidhistory_request_ip
# encoding: utf-8
import datetime
from south.db import db
from south.v2 import SchemaMigration
from django.db import models

class Migration(SchemaMigration):

    def forwards(self, orm):
        
        # Adding field 'BidHistory.request_ip'
        db.add_column('lots_bidhistory', 'request_ip', self.gf('django.db.models.fields.CharField')(default='0.0.0.0', max_length=15), keep_default=False)


    def backwards(self, orm):
        
        # Deleting field 'BidHistory.request_ip'
        db.delete_column('lots_bidhistory', 'request_ip')


    models = {
        'auctions.auctionsession': {
            'Meta': {'object_name': 'AuctionSession'},
            'description': ('django.db.models.fields.TextField', [], {}),
            'end': ('django.db.models.fields.DateTimeField', [], {}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'shop': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['shops.Shop']"}),
            'start': ('django.db.models.fields.DateTimeField', [], {}),
            'title': ('django.db.models.fields.CharField', [], {'max_length': '60'})
        },
        'auth.group': {
            'Meta': {'object_name': 'Group'},
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '80'}),
            'permissions': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['auth.Permission']", 'symmetrical': 'False', 'blank': 'True'})
        },
        'auth.permission': {
            'Meta': {'unique_together': "(('content_type', 'codename'),)", 'object_name': 'Permission'},
            'codename': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'content_type': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['contenttypes.ContentType']"}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '50'})
        },
        'auth.user': {
            'Meta': {'object_name': 'User'},
            'date_joined': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
            'email': ('django.db.models.fields.EmailField', [], {'max_length': '75'}),
            'first_name': ('django.db.models.fields.CharField', [], {'max_length': '30', 'blank': 'True'}),
            'groups': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['auth.Group']", 'symmetrical': 'False', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'is_active': ('django.db.models.fields.BooleanField', [], {'default': 'True', 'blank': 'True'}),
            'is_staff': ('django.db.models.fields.BooleanField', [], {'default': 'False', 'blank': 'True'}),
            'is_superuser': ('django.db.models.fields.BooleanField', [], {'default': 'False', 'blank': 'True'}),
            'last_login': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
            'last_name': ('django.db.models.fields.CharField', [], {'max_length': '30', 'blank': 'True'}),
            'password': ('django.db.models.fields.CharField', [], {'max_length': '128'}),
            'user_permissions': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['auth.Permission']", 'symmetrical': 'False', 'blank': 'True'}),
            'username': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '32'})
        },
        'contenttypes.contenttype': {
            'Meta': {'unique_together': "(('app_label', 'model'),)", 'object_name': 'ContentType', 'db_table': "'django_content_type'"},
            'app_label': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'model': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '100'})
        },
        'inventory.product': {
            'Meta': {'object_name': 'Product'},
            'category': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['market.MarketCategory']"}),
            'date_time': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'description': ('django.db.models.fields.TextField', [], {}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'latest_item': ('django.db.models.fields.BooleanField', [], {'default': 'False', 'blank': 'True'}),
            'shop': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['shops.Shop']"}),
            'subcategory': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['market.MarketSubCategory']", 'null': 'True', 'blank': 'True'}),
            'title': ('django.db.models.fields.CharField', [], {'max_length': '200'}),
            'type': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['inventory.ProductType']", 'null': 'True', 'blank': 'True'}),
            'weight': ('django.db.models.fields.DecimalField', [], {'default': "'0'", 'max_digits': '11', 'decimal_places': '2'})
        },
        'inventory.producttype': {
            'Meta': {'object_name': 'ProductType'},
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'})
        },
        'lots.bidhistory': {
            'Meta': {'object_name': 'BidHistory'},
            'bid_amount': ('django.db.models.fields.DecimalField', [], {'max_digits': '11', 'decimal_places': '2'}),
            'bid_time': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'bidder': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['auth.User']"}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'lot': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['lots.Lot']"}),
            'request_ip': ('django.db.models.fields.CharField', [], {'default': "'0.0.0.0'", 'max_length': '15'})
        },
        'lots.imagelot': {
            'Meta': {'object_name': 'ImageLot'},
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'image': ('core.thumbs.ImageWithThumbsField', [], {'max_length': '100'}),
            'lot': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['lots.Lot']"}),
            'primary_picture': ('django.db.models.fields.BooleanField', [], {'default': 'False', 'blank': 'True'})
        },
        'lots.lot': {
            'Meta': {'object_name': 'Lot', '_ormbases': ['inventory.Product']},
            'bid_actual': ('django.db.models.fields.related.OneToOneField', [], {'related_name': "'lot_history'", 'unique': 'True', 'null': 'True', 'to': "orm['lots.BidHistory']"}),
            'product_ptr': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['inventory.Product']", 'unique': 'True', 'primary_key': 'True'}),
            'reserve': ('django.db.models.fields.DecimalField', [], {'max_digits': '11', 'decimal_places': '2'}),
            'session': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['auctions.AuctionSession']"}),
            'starting_bid': ('django.db.models.fields.DecimalField', [], {'max_digits': '11', 'decimal_places': '2'}),
            'state': ('django.db.models.fields.CharField', [], {'default': "'A'", 'max_length': '1'})
        },
        'market.marketcategory': {
            'Meta': {'object_name': 'MarketCategory'},
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'marketplace': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['market.MarketPlace']"}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '60'}),
            'order': ('django.db.models.fields.IntegerField', [], {'default': '255'}),
            'slug': ('django.db.models.fields.SlugField', [], {'unique': 'True', 'max_length': '60', 'db_index': 'True'})
        },
        'market.marketplace': {
            'Meta': {'object_name': 'MarketPlace'},
            'base_domain': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '128'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '92'}),
            'slug': ('django.db.models.fields.SlugField', [], {'unique': 'True', 'max_length': '92', 'db_index': 'True'}),
            'template_prefix': ('django.db.models.fields.SlugField', [], {'unique': 'True', 'max_length': '92', 'db_index': 'True'}),
            'title': ('django.db.models.fields.CharField', [], {'max_length': '92'})
        },
        'market.marketsubcategory': {
            'Meta': {'unique_together': "(('parent', 'slug'),)", 'object_name': 'MarketSubCategory'},
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'marketplace': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['market.MarketPlace']"}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '60'}),
            'order': ('django.db.models.fields.IntegerField', [], {'default': '255'}),
            'parent': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'subcategories'", 'null': 'True', 'to': "orm['market.MarketCategory']"}),
            'slug': ('django.db.models.fields.SlugField', [], {'max_length': '60', 'db_index': 'True'})
        },
        'shops.shop': {
            'Meta': {'object_name': 'Shop'},
            'admin': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['auth.User']"}),
            'bids': ('django.db.models.fields.IntegerField', [], {'default': '0'}),
            'date_time': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'location': ('django.db.models.fields.CharField', [], {'default': "'39.29038,-76.61219'", 'max_length': '255'}),
            'marketplace': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['market.MarketPlace']"}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '60'}),
            'views': ('django.db.models.fields.IntegerField', [], {'default': '0'})
        }
    }

    complete_apps = ['lots']

########NEW FILE########
__FILENAME__ = models
import datetime
import decimal

from django.db import models
from django.contrib.contenttypes.models import ContentType
from django.utils.translation import ugettext_lazy as _

from auth.models import User
#from shops.models import Shop
from auctions.models import AuctionSession
from core.thumbs import ImageWithThumbsField
from inventory.models import Product
from market.models import MarketCategory, MarketSubCategory
from django.template.defaultfilters import striptags

LOT_TYPE = [('S',_('Standard')),('B', _('Buy Now'))]

STATE_ITEM = [
    ('A', _('Active sale')),
    ('S', _('Sold')),
    ('N', _('Did not sell')),
]


class Lot(Product):
    starting_bid = models.DecimalField(max_digits=11, decimal_places=2)
    reserve = models.DecimalField(max_digits=11, decimal_places=2)
    session = models.ForeignKey(AuctionSession)
    state = models.CharField(max_length=1, choices=STATE_ITEM, default='A')
    bid_actual = models.OneToOneField('BidHistory', null=True, related_name="lot_history")
    
    def __unicode__(self):
        return "%s > %s" % (self.session, self.title)

    @models.permalink
    def get_bidding_url(self):
        return ("bidding.views.bidding_view_lot", (self.pk, ))
        

    def image(self):
        from models import ImageLot
        try:
            return ImageLot.objects.filter(lot=self).filter(primary_picture=True).get()
        except ImageLot.DoesNotExist:
            pass
        
        try:
            img = ImageLot.objects.filter(lot=self)[0]
            img.primary_picture = True
            img.save()
            return img
        except IndexError:
            return None
 

    def count_bids(self):
        return self.bidhistory_set.all().count()    

    def count_bidders(self):
        return BidHistory.objects.filter(lot = self).values("bidder").distinct().count()

    def bids(self):
        return self.bidhistory_set.all()    
    
    def time_left(self):
        if self.session.end < datetime.datetime.now():
            return _("Finish")
        time = self.session.end - datetime.datetime.now()
        days = time.days
        s = time.seconds
        hours = s // 3600 
        s = s - (hours * 3600)
        minutes = s // 60
        #seconds = s - (minutes * 60)
        if days > 0:
            result = '%sd %sh' % (days, hours)
        elif hours > 0:
            result = '%sh %sm' % (hours, minutes)
        else:
            result = '%sm' % minutes
        return result
    
    def time_left_long(self):
        if self.session.end < datetime.datetime.now():
            return _("Finish")
        time = self.session.end - datetime.datetime.now()
        days = time.days
        s = time.seconds
        hours = s // 3600 
        s = s - (hours * 3600)
        minutes = s // 60
        #seconds = s - (minutes * 60)
        if days > 0:
            result = '%s days %s hours %s mins' % (days, hours, minutes)
        elif hours > 0:
            result = '%s hours %s mins' % (hours, minutes)
        else:
            result = '%s mins' % minutes
        return result
    
    
    def current_bid(self):
        if self.bid_actual:
            return self.bid_actual.bid_amount
        else:
            return self.starting_bid

    def price(self):
        return self.current_bid()
        
    def next_bid_from(self):
        if self.bid_actual:
            actual_bid = self.bid_actual.bid_amount
            amount = BidderIncrementCalculator().get_next_bid_for(actual_bid)
            return amount
        else:
            return self.starting_bid

    def is_active(self):
        return self.state == 'A'
    
    def is_sold(self):
        return self.state == 'S'
    
    def is_didnt_sell(self):
        return self.state == 'N'
    
    def decrease_qty(self, qty):
        pass
    
    def increase_qty(self, qty):
        pass

    def activate(self):
        self.state = 'A'
        self.save()
    
#    def is_standard(self):
#        return self.lot_type == 'S'

#    def is_buy_now(self):
#        return self.lot_type == 'B'

    def history(self):
        return BidHistory.objects.filter(lot=self).order_by('-bid_time')
    
#    def buy_now(self, bidder, amount):
#        bid_history = BidHistory(lot=self, bidder=bidder, bid_amount=amount)
#        bid_history.save()
#        
#        self.state = 'S'
#        self.bid_actual = bid_history
#        self.save() 
#        
#        Payment.new_pending_payment(self.shop, bidder, self)

    def bid(self, bidder, amount, ip):
        bid_history = BidHistory(lot=self, bidder=bidder, bid_amount=amount, request_ip=ip)
        bid_history.save()
        self.bid_actual = bid_history
        self.save()
        
        self.shop.bids += 1
        self.shop.save() 
        
    def sold(self):
        from sell.models import Cart
        from preferences.models import EmailNotification, EmailNotificationHistory, TYPE_NOTIFICATION
        from django.core.mail import send_mail, EmailMessage
        from django.conf import settings
        from django.template import Context, Template
        
        self.state = 'S'
        self.save()
        cart = Cart.objects.filter(shop=self.shop, bidder=self.bid_actual.bidder).get()
        cart.add(self, self.current_bid(), 1)
        
        # ------------------------------------------------------------------------
        # Send an email to bidder to notify he/she has won the auction
        c = Context({'bidder_name': self.bid_actual.bidder.get_full_name(),
                     'bid_amount': self.bid_actual.bid_amount,
                     'bid_time': self.bid_actual.bid_time,
                     'shop': self.shop.name,
                     'session_title': self.session.title,
                     'session_description': striptags(self.session.description),
                     'session_start': str(self.session.start),
                     'session_end': str(self.session.end),
                     'lot_title': self.title,
                     'lot_description': striptags(self.description) })
        
        admin_email = self.shop.marketplace.contact_email
        try:
            notification = EmailNotification.objects.filter(type_notification='AWC', shop=self.shop).get()
            type_notification_name = dict(TYPE_NOTIFICATION)[notification.type_notification].title()
            subj_template = Template(notification.subject)
            body_template = Template(notification.body)
            
            subj_text = subj_template.render(c)
            body_text = body_template.render(c)
            
            mail = EmailMessage(subject=subj_text,
                                body=body_text,
                                from_email=settings.EMAIL_FROM,
                                to=[self.bid_actual.bidder.email],
                                headers={'X-SMTPAPI': '{\"category\": \"%s\"}' % type_notification_name})
            mail.send(fail_silently=True)
#            send_mail(subj_text, body_text, settings.EMAIL_FROM, [self.bid_actual.bidder.email], fail_silently=True)

            notification_history = EmailNotificationHistory(shop=self.shop,
                                                        type_notification=notification.type_notification,
                                                        datetime= datetime.datetime.now(),
                                                        to=self.bid_actual.bidder.email,
                                                        subject=subj_text,
                                                        body=body_text)
            notification_history.save()
        except EmailNotification.DoesNotExist:
            msg = "You made a bid u$s %s for %s and have won the auction!. Please contact %s to get more details about this purchase. Thanks" % (self.bid_actual.bid_amount, self.title, self.shop.admin.email)
            mail = EmailMessage(subject="Congratulations!!",
                                body=msg,
                                from_email=settings.EMAIL_FROM,
                                to=[self.bid_actual.bidder.email],
                                headers={'X-SMTPAPI': '{\"category\": \"%s\"}' % dict(TYPE_NOTIFICATION)['AWC'].title()})
            mail.send(fail_silently=True)
#            send_mail("Congratulations!!", msg, settings.EMAIL_FROM,  [self.bid_actual.bidder.email], fail_silently=True)
        except Exception, e:
            mail = EmailMessage(subject="Could not send email to lot winner!",
                                body="Message could not be delivered to %s" % self.bid_actual.bidder.email,
                                from_email=settings.EMAIL_FROM,
                                to=[mail for (name, mail) in settings.STAFF]+[admin_email],
                                headers={'X-SMTPAPI': '{\"category\": \"Error\"}'})
            mail.send(fail_silently=True)
#            send_mail("Could not send email to lot winner!", "Message could not be delivered to %s" % self.bid_actual.bidder.email, settings.EMAIL_FROM, [mail for (name, mail) in settings.STAFF]+[admin_email], fail_silently=True)         


    def didnt_sell(self):
        self.state = 'N'
        self.save()

    def sell_actual(self):
        from sell.models import SellItem
        sell_type = ContentType.objects.get_for_model(self)
        try:
            sell_item = SellItem.objects.filter(object_id=self.id,
                                                    content_type__pk=sell_type.id).get()
            return sell_item.sell
        except:
            return None    

    def reserve_has_been_met(self):
        if self.bid_actual is None: return False
        return self.current_bid() >= self.reserve 

#        
#        Payment.new_pending_payment(self.shop, self.bid_actual.bidder, self)
        
#    def payment(self):
#        #TODO Check relation one to one?
#        try:
#            return self.payment_set.get()
#        except:
#            return None
#        
#
#    def shipping(self):
#        #TODO Check relation one to one?
#        try:
#            return self.shipping_set.get()
#        except:
#            return None

    
class ImageLot(models.Model):
    image = ImageWithThumbsField(upload_to='images', sizes=((100,100),(400,400)), crop=False)
    lot = models.ForeignKey(Lot)
    primary_picture = models.BooleanField(default=False)
    
    def save(self, *args, **kwargs):
        super(ImageLot, self).save(*args, **kwargs)
        self.lot.has_image = True
        self.lot.save()


class BidHistory(models.Model):
    lot = models.ForeignKey(Lot)
    bidder = models.ForeignKey(User)
    bid_amount = models.DecimalField(max_digits=11, decimal_places=2)
    bid_time = models.DateTimeField(auto_now_add=True)
    request_ip = models.CharField(max_length=15, default="0.0.0.0")
    
    def __unicode__(self):
        return "%s > %s (%s)" % (self.lot, self.bidder, self.bid_amount)


class BidderIncrementCalculator:
    
    def __init__(self):
        self.table = [
            (decimal.Decimal("0.01"), decimal.Decimal("0.99"), decimal.Decimal("0.05")),
            (decimal.Decimal("1.00"), decimal.Decimal("4.99"), decimal.Decimal("0.25")),
            (decimal.Decimal("5.00"), decimal.Decimal("24.99"), decimal.Decimal("0.50")),
            (decimal.Decimal("25.00"), decimal.Decimal("99.99"), decimal.Decimal("1.00")),
            (decimal.Decimal("100.00"), decimal.Decimal("249.99"), decimal.Decimal("2.50")),
            (decimal.Decimal("250.00"), decimal.Decimal("499.99"), decimal.Decimal("5.00")),
            (decimal.Decimal("500.00"), decimal.Decimal("999.99"), decimal.Decimal("10.00")),
            (decimal.Decimal("1000.00"), decimal.Decimal("2499.99"), decimal.Decimal("25.00")),
            (decimal.Decimal("2500.00"), decimal.Decimal("4999.99"), decimal.Decimal("50.00")),
            (decimal.Decimal("5000.00"), decimal.Decimal("99999.99"), decimal.Decimal("100.00")),
        ]
    
    def get_next_bid_for(self, actual):
        for limit in self.table:
            (from_price, to_price, inc) = limit
            if actual >= from_price and actual <= to_price: return actual + inc
        
        return actual + inc
    
    def match_for(self, amount):
        last_limit = None
        for limit in self.table:
            (from_price, to_price, inc) = limit
            if amount >= from_price and amount <= to_price: return limit
            last_limit = limit
            
        return last_limit
        
#class BidIncrementAmount(models.Model):
#    from_price = models.DecimalField(max_digits=11, decimal_places=2)
#    to_price = models.DecimalField(max_digits=11, decimal_places=2, blank=True, null=True)
#    bid_increment = models.DecimalField(max_digits=11, decimal_places=2)
########NEW FILE########
__FILENAME__ = urls
from django.conf.urls.defaults import *



urlpatterns = patterns('',   
    url(r'^lots_all/$', 'lots.views.lots_all', name='lots_all'),
    url(r'^lots_active/$', 'lots.views.lots_active', name='lots_active'),
    url(r'^lots_sold/$', 'lots.views.lots_sold', name='lots_sold'),
    url(r'^lots_didnt_sell/$', 'lots.views.lots_didnt_sell', name='lots_didnt_sell'),

    url(r'^lots_payment_all/$', 'lots.views.lots_payment_all', name='lots_payment_all'),

    url(r'^lots_shipping_all/$', 'lots.views.lots_shipping_all', name='lots_shipping_all'),
    url(r'^lots_dispatched/([\d]+)/$', 'lots.views.lots_dispatched', name='lots_dispatched'),
    url(r'^lots_fulfilled/([\d]+)/$', 'lots.views.lots_fulfilled', name='lots_fulfilled'),

    url(r'^lots_open/$', 'lots.views.lots_open', name='lots_open'),
    url(r'^lots_closed/$', 'lots.views.lots_closed', name='lots_closed'),
    url(r'^lot_details/([\d]+)/$', 'lots.views.lot_details', name='lot_details'),
    url(r'^lot_add/$', 'lots.views.lot_add', name='lot_add'),
    url(r'^lot_edit/([\d]+)/$', 'lots.views.lot_edit', name='lot_edit'),
    url(r'^set_primary_picture/([\d]+)/([\d]+)/$', 'lots.views.set_primary_picture', name='set_lot_primary_picture'),
#    url(r'^ajax_category_add/$', 'lots.views.ajax_category_add', name='ajax_category_add'),
#    url(r'^ajax_category/$', 'lots.views.ajax_category', name='ajax_category'),
#    url(r'^ajax_sub_category_add/$', 'lots.views.ajax_sub_category_add', name='ajax_sub_category_add'),
#    url(r'^ajax_sub_category/$', 'lots.views.ajax_sub_category', name='ajax_sub_category'),
#    url(r'^ajax_session_add/$', 'lots.views.ajax_session_add', name='ajax_session_add'),
#    url(r'^ajax_session/$', 'lots.views.ajax_session', name='ajax_session'),

#    url(r'^add_image/([\d]+)/$', 'lots.views.add_image', name='add_image'),
    url(r'^add_image/([\d]+)/$', 'lots.views.add_img', name='add_image'),
    url(r'^del_image/([\d]+)/([\d]+)/$', 'lots.views.del_image', name='del_image'),
    
    
#    url(r'^category_delete/$', 'lots.views.category_delete', name='category_delete'),
#    url(r'^category_edit/$', 'lots.views.category_edit', name='category_edit'),
)
########NEW FILE########
__FILENAME__ = views
import logging

from django.core.urlresolvers import reverse
from django.http import HttpResponseRedirect, HttpResponse, Http404
from django.template import RequestContext
from django.shortcuts import render_to_response, get_object_or_404
from django.utils.translation import ugettext as _
from django.utils import simplejson

from django.core.paginator import Paginator, InvalidPage, EmptyPage

from auctions.forms import AuctionSessionForm
from auctions.models import AuctionSession 
from core.decorators import shop_admin_required

from lots.forms import LotForm, ImageLotForm 
from market.forms import MarketCategoryForm, MarketSubCategoryForm
from models import ImageLot, Lot

PAGE_LOTS = 10
   

@shop_admin_required
def lots_all(request):
    shop = request.shop
    lot_list = Lot.objects.all().filter(shop=shop).order_by("-date_time")

    pager = Paginator(lot_list, PAGE_LOTS)
    try:
        page = int(request.GET.get('page','1'))
    except:
        page = 1
    try:
        lots = pager.page(page)
    except (EmptyPage, InvalidPage):
        lots = pager.page(pager.num_pages)
    paged = (pager.num_pages > 1)
    
    return render_to_response('lots/lots_all.html', 
                              {'lots': lots,
                               'pages': pager.page_range,
                               'paged': paged,
                               }, 
                              RequestContext(request))    


@shop_admin_required
def lots_active(request):
    shop = request.shop
    lot_list = Lot.objects.all().filter(shop=shop, state='A').order_by("-date_time")

    pager = Paginator(lot_list, PAGE_LOTS)
    try:
        page = int(request.GET.get('page','1'))
    except:
        page = 1
    try:
        lots = pager.page(page)
    except (EmptyPage, InvalidPage):
        lots = pager.page(pager.num_pages)
    paged = (pager.num_pages > 1)

    return render_to_response('lots/lots_active.html', 
                              {'lots': lots,
                               'pages': pager.page_range,
                               'paged': paged,
                               }, 
                              RequestContext(request))    

@shop_admin_required
def lots_sold(request):
    shop = request.shop
    lot_list = Lot.objects.all().filter(shop=shop, state='S').order_by("-date_time")
    pager = Paginator(lot_list, PAGE_LOTS)
    try:
        page = int(request.GET.get('page','1'))
    except:
        page = 1
    try:
        lots = pager.page(page)
    except (EmptyPage, InvalidPage):
        lots = pager.page(pager.num_pages)
    paged = (pager.num_pages > 1)

    return render_to_response('lots/lots_sold.html', 
                              {'lots': lots,
                               'pages': pager.page_range,
                               'paged': paged,
                               }, 
                              RequestContext(request))    


@shop_admin_required
def lots_didnt_sell(request):
    shop = request.shop
    lot_list = Lot.objects.all().filter(shop=shop, state='N').order_by("-date_time")
    pager = Paginator(lot_list, PAGE_LOTS)
    try:
        page = int(request.GET.get('page','1'))
    except:
        page = 1
    try:
        lots = pager.page(page)
    except (EmptyPage, InvalidPage):
        lots = pager.page(pager.num_pages)
    paged = (pager.num_pages > 1)
    return render_to_response('lots/lots_didnt_sell.html', 
                              {'lots': lots,
                               'pages': pager.page_range,
                               'paged': paged,
                               }, 
                              RequestContext(request))    


@shop_admin_required
def lots_payment_all(request):
    shop = request.shop
    lot_list = Lot.objects.filter(shop=shop, state='S').order_by("-id")
    pager = Paginator(lot_list, PAGE_LOTS)
    try:
        page = int(request.GET.get('page','1'))
    except:
        page = 1
    try:
        lots = pager.page(page)
    except (EmptyPage, InvalidPage):
        lots = pager.page(pager.num_pages)
    paged = (pager.num_pages > 1)
    return render_to_response('lots/lots_payment_all.html', 
                              {'lots': lots,
                               'pages': pager.page_range,
                               'paged': paged,
                               }, 
                              RequestContext(request)) 

@shop_admin_required
def lots_shipping_all(request):
    shop = request.shop
    lot_list = Lot.objects.filter(shop=shop, state='S').order_by("-id")
    pager = Paginator(lot_list, PAGE_LOTS)
    try:
        page = int(request.GET.get('page','1'))
    except:
        page = 1
    try:
        lots = pager.page(page)
    except (EmptyPage, InvalidPage):
        lots = pager.page(pager.num_pages)
    paged = (pager.num_pages > 1)
    return render_to_response('lots/lots_shipping_all.html', 
                              {'lots': lots,
                               'pages': pager.page_range,
                               'paged': paged,
                               }, 
                              RequestContext(request)) 


@shop_admin_required
def lots_dispatched(request, id):
    lot = get_object_or_404(Lot, pk=id)
    shop = request.shop
    if lot.shop != shop:
        raise Http404
    lot.shipping().dispatched()
    request.flash['message'] = unicode(_("Operation successfully saved."))
    request.flash['severity'] = "success"
    return HttpResponseRedirect(reverse('lots_shipping_all'))


@shop_admin_required
def lots_fulfilled(request, id):
    lot = get_object_or_404(Lot, pk=id)
    shop = request.shop
    if lot.shop != shop:
        raise Http404
    lot.shipping().fulfilled()
    request.flash['message'] = unicode(_("Operation successfully saved."))
    request.flash['severity'] = "success"
    return HttpResponseRedirect(reverse('lots_shipping_all'))    
    
    
@shop_admin_required
def lots_open(request):
    return render_to_response('lots/lots_open.html', {}, 
                              RequestContext(request))    


@shop_admin_required
def lots_closed(request):
    return render_to_response('lots/lots_closed.html', {}, 
                              RequestContext(request))    


@shop_admin_required
def lot_details(request, lot_id):
    lot = get_object_or_404(Lot, pk=lot_id)
    shop = request.shop
    if lot.shop != shop:
        raise Http404
    image_form = ImageLotForm()
    return render_to_response('lots/lot_details.html', 
                              {'lot': lot,
                               'image_form': image_form,
                               },
                              RequestContext(request))
    

@shop_admin_required
def lot_edit(request, lot_id):
    lot = get_object_or_404(Lot, pk=lot_id)
    shop = request.shop
    if lot.shop != shop:
        raise Http404
    
    if request.method == 'POST':
        form = LotForm(request, request.POST, prefix="lot", instance=lot)
        if form.is_valid():
            lot = form.save()
#            for img in request.FILES.getlist('file'):
#                image = ImageLot(image = img, lot=lot)
#                image.save()
#                image.lot = lot
#                image.image.save(img.name,img)
            request.flash['message'] = unicode(_("Lot successfully updated. It might take a half hour to reflect the proper search results."))
            request.flash['severity'] = "success"
        else:
            request.flash['message'] = unicode(_("Lot couldn't be updated."))
            request.flash['severity'] = "error"
        return HttpResponseRedirect(reverse('inventory_lots'))
    else:
        form = LotForm(request, prefix="lot", instance=lot)
    
    form_category = MarketCategoryForm(prefix="category")
    form_sub_category = MarketSubCategoryForm(request, prefix="sub_category")
    form_session = AuctionSessionForm(prefix="session")
    sessions = AuctionSession.objects.filter(shop = request.shop)
    return render_to_response('lots/lot_edit.html', 
                              {'form': form,
                               'form_category': form_category,
                               'form_sub_category': form_sub_category,
                               'form_session': form_session,
                               'lot': lot,
                               'sessions': sessions,
                               },
                              RequestContext(request))

    
@shop_admin_required
def lot_add(request):
    
    if request.method == 'POST':
        form = LotForm(request, request.POST, prefix="lot")
        if form.is_valid():
            lot = form.save(commit=False)
            lot.shop = request.shop
            lot.state = 'A'
            lot.save()
            for img in request.FILES.getlist('file'):
                image = ImageLot(image = img, lot=lot)
                image.save()
#                image.lot = lot
#                image.image.save(img.name,img)
            request.flash['message'] = unicode(_("Lot successfully added."))
            request.flash['severity'] = "success"
            return HttpResponseRedirect(reverse('inventory_lots'))
    else:
        form = LotForm(request, prefix="lot")
    form_category = MarketCategoryForm(prefix="category")
    form_sub_category = MarketSubCategoryForm(request, prefix="sub_category")
    form_session = AuctionSessionForm(prefix="session")
    
    return render_to_response('lots/lot_add.html', 
                              {'form': form,
                               'form_category': form_category,
                               'form_sub_category': form_sub_category,
                               'form_session': form_session,
                               },
                              RequestContext(request))


@shop_admin_required
def set_primary_picture(request, lot_id, image_id):
    lot = get_object_or_404(Lot, pk=lot_id)
    images = ImageLot.objects.filter(lot=lot)
    for image in images:
        image.primary_picture= False
        image.save()
        
    image = get_object_or_404(ImageLot, pk=image_id)
    image.primary_picture = True
    image.save()
    
    return HttpResponseRedirect(reverse('lot_details', args=[lot_id]))


#@shop_admin_required
#def add_image(request, lot_id):
#    
#    if request.method == 'POST':
#        shop = request.shop
#        lot = get_object_or_404(Lot, pk=lot_id)
#    
#        limit = shop.get_limit('pictures_per_lot')
#        total = ImageLot.objects.filter(lot=lot).count()
#            
#        if total >= limit:
#            request.flash['message'] = "You have reach the limit of pictures per lot allowed by your plan!"
#            request.flash['severity'] = "error"
#        
#        else:
#            form = ImageLotForm(request.POST, request.FILES)
#            if form.is_valid():
#                img = form.save(commit=False)
#                img.lot = lot
#                img.save()
#                request.flash['message'] = "Image successfully saved!"
#                request.flash['severity'] = "success"
#            else:
#                request.flash['message'] = "You have reach the limit of pictures per lot allowed by your plan!"
#                request.flash['severity'] = "error"
#        
#        return HttpResponseRedirect(reverse('lot_details', args=[lot_id]))
#    else:
#        raise Http404

def response_mimetype(request):
    if "application/json" in request.META['HTTP_ACCEPT']:
        return "application/json"
    else:
        return "text/plain"

class JSONResponse(HttpResponse):
    """JSON response class."""
    def __init__(self,obj='',json_opts={},mimetype="application/json",*args,**kwargs):
        content = simplejson.dumps(obj,**json_opts)
        super(JSONResponse,self).__init__(content,mimetype,*args,**kwargs)
        
@shop_admin_required
def add_img(request, lot_id):
    try:
        lot = get_object_or_404(Lot, pk=lot_id, shop=request.shop)
        data = []
        if request.method == 'POST':
            limit = request.shop.get_limit('pictures_per_lot')
            total = ImageLot.objects.filter(lot=lot).count()

            f = request.FILES.get('files')
            if f and not (total >= limit):
                image = ImageLot(lot=lot)
                image.image.save(f.name, f)
                lot.save()

                data = [{
                        'name': f.name, 
                        'url': image.image.url,
                        'size': image.image.size, 
                        'thumbnail_url': image.image.url_100x100,
                        'delete_url': reverse('del_image', args=[lot_id, image.id]), 
                        'delete_type': "DELETE",
                        'url_set_primary': reverse('set_lot_primary_picture', args=[lot_id, image.id])
                }]
            else:
                data = [{'error': 'You have reach the limit of pictures per lot allowed by your plan!' }]
        else:
            for image in lot.imagelot_set.all():
                data.append({
                             'name': image.image.name,
                             'url': image.image.url,
                             'size': image.image.size,
                             'thumbnail_url': image.image.url_100x100,
                             'delete_url': reverse('del_image', args=[lot_id, image.id]), 
                             'delete_type': "DELETE",
                             'is_primary': image.primary_picture,
                             'url_set_primary': reverse('set_lot_primary_picture', args=[lot_id, image.id]) 
                })

        response = JSONResponse(data, {}, response_mimetype(request))
        response['Content-Disposition'] = 'inline; filename=files.json'
        
        return response
    except Exception, ex:
        logging.exception(str(ex))


@shop_admin_required
def del_image(request, lot_id, image_id):
    image = get_object_or_404(ImageLot, pk=image_id)
    image.delete()
    lot = image.lot
    if ImageLot.objects.filter(lot=lot).count() == 0:
        lot.has_image = False
        lot.save()
    
    return HttpResponseRedirect(reverse('lot_details', args=[lot_id]))

########NEW FILE########
__FILENAME__ = urls
from django.conf.urls.defaults import *

urlpatterns = patterns('',
    url(r'^$', 'my_shopping.views.my_shopping', name='my_shopping'),
    url(r'^my_orders$', 'my_shopping.views.my_orders', name='my_orders'),
    #url(r'^pay/$', 'my_shopping.views.pay_now', name='pay_now'),
    url(r'^checkout/shipping/$', 'my_shopping.views.checkout_shipping', name='myshopping_checkout_shipping'),
    url(r'^checkout/confirm/$', 'my_shopping.views.checkout_confirm', name='myshopping_checkout_confirm'),
    url(r'^checkout/manual_payment/$', 'my_shopping.views.checkout_manual_payment', name='myshopping_checkout_manual_payment'),
    url(r'^remove_from_cart/([\d]+)/$', 'my_shopping.views.remove_from_cart', name='remove_from_cart'),
    url(r'^clean/$', 'my_shopping.views.clean_cart', name='clean_cart'),
    
    
#    url(r'^category_delete/$', 'lots.views.category_delete', name='category_delete'),
#    url(r'^category_edit/$', 'lots.views.category_edit', name='category_edit'),
)
########NEW FILE########
__FILENAME__ = views
#import datetime
import logging

from django.conf import settings
from django.core.urlresolvers import reverse
from django.contrib.auth.decorators import login_required
from django.http import HttpResponseRedirect, HttpResponse, Http404
from django.shortcuts import render_to_response, get_object_or_404
from django.template import RequestContext, loader
from django.template.defaultfilters import date
from django.utils.translation import ugettext as _
from django.db import transaction

from bidding.views import my_render
from core.decorators import shop_required
from lots.models import Lot, BidHistory
from preferences.forms import ShippingItemForm
from sell.models import Payment, Sell, CartItem, ShippingData

from sell.templatetags.sell_tags import money_format

@shop_required
@login_required
def my_orders(request):
    my_orders = Sell.objects.filter(shop=request.shop, bidder=request.user)

    inner_q = BidHistory.objects.filter(bidder=request.user, lot__state='A').values_list('lot').distinct().query
    lots_in_auctions = Lot.objects.filter(pk__in=inner_q)
    
    bids_list = []
    for lot in lots_in_auctions:
        history = []    
        for bid in lot.history():
            history.append({'bidder_username': bid.bidder.username,
                            'bid_amount': money_format(bid.bid_amount, request.shop),
                            'bid_time': date(bid.bid_time, 'r'),
                            })      
        image = lot.image()   
        bids_list.append({'url': reverse('bidding_view_lot', args=[lot.id]),
                          #'image': lot.image().image.url_100x100 if lot.image() else None,
                          'title': lot.title,
                          'is_active': lot.is_active(),
                          'count_bids': lot.count_bids(),
                          'current_bid': lot.current_bid(),
                          'time_left': lot.time_left(),
                          'history': history,
                          'image': {
                                    'original': image.image.url if image else None,
                                    'small': image.image.url_100x100 if image else None,
                                    'medium': image.image.url_400x400 if image else None,
                                   }
                          })

    my_orders_list = []
    for sell in my_orders:
        items = []
        for item in sell.sellitem_set.all():
            image = item.product.image()
            items.append({
                          #'image': item.product.image().image.url_100x100 if item.product.image() else None,
                          'url': item.product.get_bidding_url(),
                          'title': item.product.title,
                          'price': money_format(item.price, request.shop),
                          'image': {
                                    'original': image.image.url if image else None,
                                    'small': image.image.url_100x100 if image else None,
                                    'medium': image.image.url_400x400 if image else None,
                                   }
                          })
        payment_history = []    
        for payment in sell.payment.paymenthistory_set.all():
            payment_history.append({
                                    'date_time': date(payment.date_time, 'r'),
                                    'state': payment.get_state_display(),
                                    })

        shipping_history = []    
        for shipping in sell.shipping.shippinghistory_set.all():
            shipping_history.append({
                                    'date_time': date(shipping.date_time, 'r'),
                                    'state': shipping.get_state_display(),
                                    })
            
        my_orders_list.append({'id': sell.id,
                               'date_time': date(sell.date_time, 'r'),
                               'total': money_format(sell.total, request.shop),
                               'payment_history': payment_history,
                               'shipping_history': shipping_history,
                               'item_set': items,
                              })
        
    param = {
             'bids': bids_list,
             'my_orders': my_orders_list,
             'page_title': 'My Orders',
             'page_description': 'My Orders',
             }
    
    return HttpResponse(my_render(request, param, 'my_orders'))        


@shop_required
def my_shopping(request):
    my_cart = request.cart
    
    my_orders = Sell.objects.filter(shop=request.shop, bidder=request.user)
     
    cart_list = []
    for item in my_cart.cartitem_set.all():
        # the product could be removed by the admin
        if item.product == None:
            my_cart.remove(item)
            continue
        
        if item.product.type() == "Item":
            #url = reverse('bidding_view_item', args=[item.product.id])
            url_remove = reverse('remove_from_cart', args=[item.id])
        else: 
            #url = reverse('bidding_view_lot', args=[item.product.id])
            url_remove = ''
        image = item.product.image()
        cart_list.append({'url': item.product.get_bidding_url(),
                          'title': item.product.title,
                          #'image': item.product.image().image.url_100x100 if item.product.image() else None,
                          'price': money_format(item.price, request.shop),
                          'qty': item.qty,
                          'sub_total': money_format(item.sub_total(), request.shop),
                          'can_remove': (item.product.type() == "Item"),
                          'url_remove': url_remove, 
                          'image': {'original': image.image.url if image else None,
                                    'small': image.image.url_100x100 if image else None,
                                    'medium': image.image.url_400x400 if image else None,
                                   } 
                         })

    param = {
             'cart_items': cart_list,
             'total_cart': money_format(my_cart.total(), request.shop),
             'total': money_format(my_cart.total(), request.shop),
             'page_title': 'My Shopping',
             'page_description': 'My Shopping',
             'url_checkout': reverse('myshopping_checkout_shipping'),
             'clean_cart_url': reverse('clean_cart'),
             }
    
    return HttpResponse(my_render(request, param, 'my_shopping'))


@shop_required
def checkout_shipping(request):
    from sell.forms import ShippingDataForm
    
    cart = request.cart    
    if request.method == 'POST':
        shipping_form = ShippingDataForm(data=request.POST)
        if shipping_form.is_valid():
            profile = request.user.profile
            
            try:
                oldshipping = cart.shippingdata
                cart.shippingdata = None
                cart.save()

                if shipping_form.save_shipping():
                    profile.update_shipping_info(shipping_form)

                oldshipping.delete()
            except:
                pass
            
            profile.update_user_info(shipping_form)
            
            shipping = shipping_form.save(commit=False)
            shipping.save()
            
            cart.shippingdata = shipping
            cart.save()
            
            return HttpResponseRedirect(reverse("myshopping_checkout_confirm"))
    else:
        initial = {'first_name': cart.bidder.first_name,
                   'last_name': cart.bidder.last_name,
                   'street_address': cart.bidder.profile.street_address,
                   'city': cart.bidder.profile.city,
                   'state' : cart.bidder.profile.state,
                   'zip': cart.bidder.profile.zip,
                   'country' : cart.bidder.profile.country }
        shipping_form = ShippingDataForm(initial=initial)
        
    return HttpResponse(my_render(request, {'form_shipping': shipping_form.as_p(),
                                            'page_title': 'Shipping',
                                            'page_description': 'Shipping',
                                            'url_home' : reverse("home"),
                                            }, 'shipping'))

@transaction.commit_on_success
def checkout_manual_payment(request):
    from payments.models import ManualPaymentShopSettings
    
    
    id = request.POST.get("manual_payment_id", None)
    payment = get_object_or_404(ManualPaymentShopSettings, pk=id)
    
    if request.method == "POST":
        cart = request.cart

        #### Verify Products Availability
        if not cart.is_available():
            request.flash['message'] = 'Items not longer available: '
            for item in cart.items_not_availables():
                request.flash['message'] += item.product.title
            cart.remove_not_available_items()
            
            return HttpResponseRedirect(reverse('my_shopping'))
        
        sell = cart.close(payment_method="%s - %s" % ('Manual Payment', payment.name))
    
    return HttpResponse(my_render(request, {'instructions': payment.instructions,
                                         'page_title': 'Manual payment',
                                         'page_description': 'Manual payment' 
                                         }, 'manual_payment'))


@shop_required
def checkout_confirm(request):
    from payments.gateways.googlecheckout import GoogleCheckoutGateway
    from payments.gateways.paypal import PayPalGateway
    from payments.gateways.braintreegw import BraintreeGateway
    from payments.models import GoogleCheckoutShopSettings, PayPalShopSettings, ManualPaymentShopSettings, BraintreeShopSettings
    #A list of payment method, each payment method know how to render as a link
    #payment_methods = request.shop.get_payment_methods()
    payment_buttons = []
    #profile = request.user.get_profile()
    cart = request.cart
    shop = request.shop

    if not cart.is_available():
        request.flash['message'] = 'Items not longer available: '
        for item in cart.items_not_availables():
            request.flash['message'] += item.product.title
        cart.remove_not_available_items()
        
        return HttpResponseRedirect(reverse('my_shopping'))
    
    try:   
        google_settings = GoogleCheckoutShopSettings.objects.filter(shop = shop).get()
        googlecheckout_gw = GoogleCheckoutGateway(google_settings.merchant_id, 
                                                  google_settings.merchant_key, 
                                                  debug=True)
        button = googlecheckout_gw.render_button(cart)
        payment_buttons.append(button)
    except GoogleCheckoutShopSettings.DoesNotExist:
        pass

    try:   
        braintree_settings = BraintreeShopSettings.objects.filter(shop = shop).get()
        braintree_gw = BraintreeGateway(braintree_settings.merchant_id, 
                                        braintree_settings.public_key,
                                        braintree_settings.private_key,
                                        )
        button = braintree_gw.render_button(cart, request)
        payment_buttons.append(button)
    except BraintreeShopSettings.DoesNotExist:
        pass
    
    try:
        paypal_settings = PayPalShopSettings.objects.filter(shop = shop).get()
        paypal_gw = PayPalGateway(username=settings.PAYPAL_USERNAME,
                             password=settings.PAYPAL_PASSWORD,
                             sign=settings.PAYPAL_SIGNATURE,
                             debug=settings.PAYPAL_DEBUG)
        button = paypal_gw.render_button()
        payment_buttons.append(button)
        
        
    except PayPalShopSettings.DoesNotExist:
        pass
    
    
    try:
        manual_payment_settings = ManualPaymentShopSettings.objects.filter(shop = shop)
        url = reverse("myshopping_checkout_manual_payment")
        
        if manual_payment_settings.count():
            button = """
            <div>
                <h3>Manual Payments</h3>\n
                <form name='manual_payment' action='%s' method='POST'>\n
            """ % url
            for idx, payment in enumerate(manual_payment_settings):
                input = '\t<input type="radio" name="manual_payment_id" checked="%d" value="%s"> %s </input><br/>\n' % (1 if idx == 0 else 0, payment.id, payment.name)
                button += input
            button += "<br/>"
            button += "<button class='primaryAction small awesome' type='submit'>Submit</button>\n"
            button += "</form>\n"
            button += "</div>"
            
            logging.debug(button)
            payment_buttons.append(button)
    except Exception, e:
        logging.error(e)
    
#    t = loader.get_template('my_shopping/blocks/confirm.html')
#    c = RequestContext(request, {'cart' : cart,
#                                 'payment_buttons': payment_buttons,})
#    block_confirm = (t.render(c))
    items = []
    for item in cart.cartitem_set.all():
        image = item.product.image()
        items.append({
                      #'image': item.product.image().image.url_100x100 if item.product.image() else None,
                      'title': item.product.title,
                      'price': money_format(item.price, shop),
                      'qty': item.qty,
                      'sub_total': money_format(item.sub_total(), shop),
                      'image': {'original': image.image.url if image else None,
                                'small': image.image.url_100x100 if image else None,
                                'medium': image.image.url_400x400 if image else None,
                               },
                      'id': item.id,
                      })
    
    shippingdata =({ 'first_name': cart.shippingdata.first_name.title(),
                     'last_name': cart.shippingdata.last_name.title(),
                     'street_address': cart.shippingdata.street_address.title(),
                     'city': cart.shippingdata.city.title(),
                     'state': cart.shippingdata.state.upper(),
                     'zip': cart.shippingdata.zip,
                     'country': cart.shippingdata.country.upper(),
                     })
    
    cart_dic = {'cart_items': items,
                'shippingdata': shippingdata,
                'total': money_format(cart.total(), shop),
                'taxes': money_format(cart.taxes(), shop),
                'shipping_charge': money_format(cart.shipping_charge(), shop),
                'total_with_taxes': money_format(cart.total_with_taxes(), shop),
                }
    
    return HttpResponse(my_render(request, {'cart': cart_dic,
                                            'payment_buttons': payment_buttons,
                                            'page_title': 'Confirm',
                                            'page_description': 'Confirm',
                                            'admin_email': shop.admin.email,
                                           },
                                  'confirm'))


@shop_required    
def remove_from_cart(request, id):
    
    cartitem = get_object_or_404(CartItem, pk=id)
            
    cart = request.cart
    #cart.remove(cartitem)
    cart.remove_one(cartitem)
    
    request.flash['message'] = unicode(_("Product removed from your cart"))
    request.flash['severity'] = "success"
    return HttpResponseRedirect(reverse('my_shopping'))

@shop_required    
def clean_cart(request):
    
    cart = request.cart
    cart.clean()
    
    request.flash['message'] = unicode(_("Your cart is empty now!"))
    request.flash['severity'] = "success"
    return HttpResponseRedirect(reverse('my_shopping'))

########NEW FILE########
__FILENAME__ = admin

from django.contrib import admin

from models import PayPalShopSettings, GoogleCheckoutShopSettings, GoogleCheckoutOrder, ManualPaymentShopSettings, BraintreeShopSettings, BrainTreeTransaction, PayPalToken

admin.site.register(PayPalShopSettings)
admin.site.register(PayPalToken)
admin.site.register(ManualPaymentShopSettings)
admin.site.register(GoogleCheckoutShopSettings)
admin.site.register(GoogleCheckoutOrder)
admin.site.register(BraintreeShopSettings)
admin.site.register(BrainTreeTransaction)
########NEW FILE########
__FILENAME__ = forms
import re
from django import forms
from django.forms import ModelForm
from django.utils.translation import ugettext as _

from models import PayPalShopSettings, GoogleCheckoutShopSettings, ManualPaymentShopSettings, BraintreeShopSettings


class PayPalShopSettingsForm(ModelForm):
    
    class Meta:
        model = PayPalShopSettings
        exclude = ['shop']
    
    def clean_merchant_key(self):
        merchant_key = (self.cleaned_data.get("merchant_key", "")).strip()
        
        if merchant_key == "": raise forms.ValidationError(_("Required Field"))
        if not re.match("[\w]{22}", merchant_key): raise forms.ValidationError(_("Invalid Merchant Key number"))
        return merchant_key
        
class GoogleCheckoutShopSettingsForm(ModelForm):
    
    class Meta:
        model = GoogleCheckoutShopSettings
        exclude = ['shop']

    def clean_merchant_id(self):
        merchant_id = (self.cleaned_data.get("merchant_id", "")).strip()
        
        if merchant_id == "": raise forms.ValidationError(_("Required Field"))
        if not re.match("[0-9]{15}", merchant_id): raise forms.ValidationError(_("Invalid Merchant ID number"))
        return merchant_id 
    
    def clean_merchant_key(self):
        merchant_key = (self.cleaned_data.get("merchant_key", "")).strip()
        
        if merchant_key == "": raise forms.ValidationError(_("Required Field"))
        if not re.match("[\w]{22}", merchant_key): raise forms.ValidationError(_("Invalid Merchant Key number"))
        return merchant_key
        
class BraintreeShopSettingsForm(ModelForm):
    
    class Meta:
        model = BraintreeShopSettings
        exclude = ['shop']
        
    def clean_merchant_id(self):
        merchant_id = (self.cleaned_data.get("merchant_id", "")).strip()
        
        if merchant_id == "": raise forms.ValidationError(_("Required Field"))
        if not re.match("[\w]{16}", merchant_id): raise forms.ValidationError(_("Invalid Merchant Key number"))
        return merchant_id
    
    def clean_public_key(self):
        public_key = (self.cleaned_data.get("public_key", "")).strip()
        
        if public_key == "": raise forms.ValidationError(_("Required Field"))
        if not re.match("[\w]{16}", public_key): raise forms.ValidationError(_("Invalid Merchant Key number"))
        return public_key
    
    def clean_private_key(self):
        private_key = (self.cleaned_data.get("private_key", "")).strip()
        
        if private_key == "": raise forms.ValidationError(_("Required Field"))
        if not re.match("[\w]{16}", private_key): raise forms.ValidationError(_("Invalid Merchant Key number"))
        return private_key
    
class ManualPaymentShopSettingsForm(ModelForm):
    description = forms.CharField(label=_("Payment Description"), required=False)
    name = forms.CharField(label=_("Name"))
    
    class Meta:
        model = ManualPaymentShopSettings
        exclude = ['shop']
    
    def __init__(self, shop, *args, **kwargs):
        self.shop = shop
        super(ManualPaymentShopSettingsForm, self).__init__(*args, **kwargs)
        
    def clean_name(self):
        name = self.cleaned_data['name']
        name = name.strip()
        if len(name) == 0:
            raise forms.ValidationError(_("Name not valid"))
        
        if self.instance and self.instance.name == name:
            return name
        
        if ManualPaymentShopSettings.objects.filter(name__iexact=name).filter(shop=self.shop).count() > 0:
            raise forms.ValidationError(_("Name not available"))
        
        return name

        
########NEW FILE########
__FILENAME__ = braintreegw
import datetime
import logging
import random

from urlparse import urlparse

from django.db import transaction
from django.conf import settings
from django.http import HttpResponse, HttpResponseRedirect
from django.core.urlresolvers import reverse

import braintree

import subscriptions
from django.shortcuts import render_to_response

if getattr(settings, 'BRAINTREE_PRODUCTION', False):
    BRAINTREE_ENVIROMENT = braintree.Environment.Production
else:
    BRAINTREE_ENVIROMENT = braintree.Environment.Sandbox

class BraintreeGateway():
    
    def __init__(self, merchant_id, public_key, private_key):
        #TODO: Remove this!!
        #merchant_id = settings.MERCHANT_ID
        #public_key = settings.PUBLIC_KEY
        #private_key = settings.PRIVATE_KEY
        #up to here
        braintree.Configuration.configure(
            BRAINTREE_ENVIROMENT,
            merchant_id,
            public_key,
            private_key
        )
    
    def __unicode__(self):
        return "BrainTree"
    
    def sandbox_get_valid_cc(self, card="Visa"):
        cc_numbers = {
              "Visa" : ["4111111111111111", "4005519200000004", "4009348888881881", "4012000033330026", "4012000077777777", "4012888888881881", "4217651111111119", "4500600000000061" ],
              "MasterCard" : ["5555555555554444"],
              "American Express" : ["378282246310005", "371449635398431"],
              "Discover" : ["6011111111111117"]
              }
        
        card_aux = cc_numbers[card]
        idx = random.randint(0, len(card_aux)-1)
        return card_aux[idx]
    
    def sandbox_get_invalid_cc(self, card="Visa"):
        
        cc_numbers = {
                     "Visa" : "4222222222222",
                     "MasterCard" : "5105105105105100",
                     "American Express" : "378734493671000",
                     "Discover" : "6011000990139424",
                     }        
        return cc_numbers[card]
    
    def sandbox_get_amount(self, type="SUCCESS"):
        """
        You can pass specific amounts to simulate different responses from the gateway.

        * Amounts between $0.01 - $1999.99 will simulate a successful authorization
        * Amounts between $2000.00 - $2046.00 and $3000.00 will decline with the coordinating Processor Response
        * Amounts between $2047.00 - $2099.00 will simulate the generic decline message Processor Declined.
        """
        
        if type == "SUCCESS":
            return float(random.randrange(0, 1999))
        elif type == "DECLINE":
            return float(random.randrange(2000, 2046))
        elif type == "PROCESSO_DECLINE":
            return float(random.randrange(2047, 2099))
        else:
            return float(15)
    
    def update_customer_shopname(self, customer_id, shop_id=None, shop_name=None):
        data = {}
        if shop_id is not None: data["website"] = shop_name
        if shop_name is not None: data["custom_fields"] = {"shop_id" : str(shop_id)}
        result = braintree.Customer.update(customer_id, data)
        return result
    
    
    def create_credit_card(self, customer_id, cc_number, cc_security_number, cc_expiration_date, street, city, state, zip):
        country = "US"
        result = braintree.CreditCard.create({
                "customer_id": customer_id,
                "number": cc_number,
                "cvv": cc_security_number,
                "expiration_date": cc_expiration_date,
                "billing_address": {
                    "street_address": street,
                    "extended_address": "-",
                    "locality": city,
                    "region": state,
                    "postal_code": zip,
                    "country_code_alpha2": country,
                    "country_code_alpha2": "US"
                }
        })
        return result

    def new_customer_credit_card(self, customer_id, cardholder_name, cc_number, cc_expiration_date, cc_security_number):
        result = braintree.CreditCard.create({
            "customer_id": customer_id,
            "number": cc_number,
            "cvv": cc_security_number,
            "expiration_date": cc_expiration_date,
            "cardholder_name": cardholder_name,
            "options": {
              "make_default": True,
              "verify_card": True,
            }
        })
        return result
    
    def create_customer(self, first_name, last_name, email, cc_number, cc_expiration_date, cc_security_number, street, city, state, zip, shop_name, shop_id):
        country="US"
        extra="-"
        result = braintree.Customer.create({
            "first_name": first_name,
            "last_name": last_name,            
            "email": email,
            "website": shop_name,
            #"company": "--",
            #"phone": "--",
            #"fax": "--",
            "credit_card": {
                "number": cc_number,
                "cvv": cc_security_number,
                "expiration_date": cc_expiration_date,
                "billing_address": {
                    "street_address": street,
                    "extended_address": extra,
                    "locality": city,
                    "region": state,
                    "postal_code": zip,
                    "country_code_alpha2": country,
                },
                "options": {
                    "verify_card": True,
                }
            },
            "custom_fields": {
                "shop_id" : str(shop_id),
            }
        })
        return result
        
    
    def delete_customer(self, customer_id):
        """ Delete the customer with customer_id in braintree """
        result = braintree.Customer.delete(customer_id)
        return result.is_success

    def create_subscription(self, plan_id, token):
        """ 
        Create a new subscription with the token associated to an specific customer (previously registered) 
        error = ErrorResult()
        error.is_success == False
        error.message == "Gateway Rejected: duplicate"
        
        @return: braintree.error_result.ErrorResult object | braintree.error_result.SuccessResult object
        """
        result = braintree.Subscription.create({
            "payment_method_token": token,
            "plan_id": plan_id,
        })
        return result
        
    def cancel_subscription(self, subscription_id):
        result = braintree.Subscription.cancel(subscription_id)
        return result

    def change_subscription(self, subscription_id, new_plan_id ):
        """ Change the customer subscription plan """
        new_price = "145.00"
        result = braintree.Subscription.update(subscription_id, {"plan_id" : new_plan_id , "price": new_price })
        return result
   
    def log_response(self, result):
        """ Process an API response """
        if result.is_success:
            logging.info( "success! tx_id : %s" % result.transaction.id)
        elif result.transaction:
            logging.info( "Error processing transaction:")
            logging.info( "  code: " + result.transaction.processor_response_code)
            logging.info( "  text: " + result.transaction.processor_response_text)
        else:
            for error in result.errors.deep_errors:
                logging.info("attribute: " + error.attribute)
                logging.info("code: " + error.code)
                logging.info("message: " + error.message)
        
        
        
    def charge_purchase(self, token, amount):
        """ Full example
        result = braintree.Transaction.sale({
          "amount": "10.00", #REQUIRED
          "order_id": "order id",
          "merchant_account_id": "a_merchant_account_id",
          "credit_card": {
            "number": "5105105105105100", #REQUIRED
            "expiration_date": "05/2012", #REQUIRED
            "cardholder_name": "The Cardholder",
            "cvv": "cvv"
          },
          "customer": {
            "first_name": "Drew",
            "last_name": "Smith",
            "company": "Braintree",
            "phone": "312-555-1234",
            "fax": "312-555-1235",
            "website": "http://www.example.com",
            "email": "drew@example.com"
          },
          "billing": {
            "first_name": "Paul",
            "last_name": "Smith",
            "company": "Braintree",
            "street_address": "1 E Main St",
            "extended_address": "Suite 403",
            "locality": "Chicago",
            "region": "Illinois",
            "postal_code": "60622",
            "country_code_alpha2": "US"
          },
          "shipping": {
            "first_name": "Jen",
            "last_name": "Smith",
            "company": "Braintree",
            "street_address": "1 E 1st St",
            "extended_address": "Suite 403",
            "locality": "Bartlett",
            "region": "Illinois",
            "postal_code": "60103",
            "country_code_alpha2": "US"
          },
          "options": {
            "submit_for_settlement": True, #REQUIRED
          }
        })
        """
        result = braintree.Transaction.sale({
            "payment_method_token": token,
            "amount": amount,
            #"credit_card": {"cvv": "100"} optional
        })
        
        return result

    def get_customer_details(self, customer_id):
        """ Return a customer Object with ID equals to customer_id """
        customer = braintree.Customer.find(customer_id)
        return customer
    
    def get_all_customers(self):
        """ Return all registered customers """
        collection = braintree.Customer.all()
        customers = []
        for customer in collection.items:
            customers.append(customer)
        
        return customers

    def get_subscription_details(self, subscription_id):
        """ Get a Subscription Object """
        subscription = braintree.Subscription.find(subscription_id)
        return subscription
    
    def get_all_subscriptions(self):
        """ Get All Subscriptions """
        search_results = braintree.Subscription.search(
                                braintree.SubscriptionSearch.status.in_list(
                                                braintree.Subscription.Status.Active,
                                                braintree.Subscription.Status.Canceled,
                                                braintree.Subscription.Status.Expired,
                                                braintree.Subscription.Status.PastDue,
                                                braintree.Subscription.Status.Pending))
        subscriptions = []
        for subscription in search_results.items:
            subscriptions.append(subscription)
        return subscriptions
        
    def get_active_subscriptions(self):
        """ Get All ACTIVE Subscriptions """
        search_results = braintree.Subscription.search([
                                braintree.SubscriptionSearch.status == braintree.Subscription.Status.Active
                                ])
        subscriptions = []
        for subscription in search_results.items:
            subscriptions.append(subscription)
        return subscriptions
    
    def get_past_due_subscriptions(self, days=2):
        """ Get back all subscriptions that were in past due status 'situacion de mora' """
        if days is None:
            search_results = braintree.Subscription.search([
                                braintree.SubscriptionSearch.days_past_due == days
                                ])
        else:
            search_results = braintree.Subscription.search([
                                braintree.SubscriptionSearch.days_past_due == days
                                ])
        subscriptions = []
        for subscription in search_results.items:
            subscriptions.append(subscription)
        return subscriptions
    
    def get_transaction_details(self, tx_id):
        transaction = braintree.Transaction.find(tx_id)
        return transaction
    
    def is_submitted_for_settlement(self, tx_id):
        transaction = self.get_transaction_details(tx_id)
        return transaction.status == braintree.Transaction.Status.SubmittedForSettlement
    
    def is_settled(self, tx_id):
        transaction = self.get_transaction_details(tx_id)
        return transaction.status == braintree.Transaction.Status.Settled

    def is_authorized(self, tx_id):
        transaction = self.get_transaction_details(tx_id)
        return transaction.status == braintree.Transaction.Status.Authorized
    
    def get_daily_transactions(self, day):
        day_init = datetime.datetime(day.year, day.month, day.day, 0, 0, 0)
        day_end = datetime.datetime(day.year, day.month, day.day, 23, 59, 59)
        search_results = braintree.Transaction.search([
                                    braintree.TransactionSearch.created_at.between(day_init, day_end)
        ])
        result = [transaction for transaction in search_results.items]
        return result
    
    def get_transactions(self, day):
        day_init = datetime.datetime(day.year, day.month, day.day, 0, 0, 0)
        day_end = datetime.datetime(day.year, day.month, day.day, 23, 59, 59)
        
        #FOR DEV
        #day_init = datetime.datetime(2010, 4, 1 , 0, 0, 0)
        #day_end = datetime.datetime(2011, 5, 10, 23, 59, 59)
        
        result = {}
        #----------- Declined Transactions
        declined_results = braintree.Transaction.search([
                braintree.TransactionSearch.processor_declined_at.between(day_init, day_end),                
        ])
        result['declined'] = [transaction for transaction in declined_results.items]
        
        #----------- Failed Transactions
        failed_results = braintree.Transaction.search([
                braintree.TransactionSearch.failed_at.between(day_init, day_end),                
        ])
        result['failed'] = [transaction for transaction in failed_results.items]
        
        #----------- Rejected Transactions
        gateway_rejected_results = braintree.Transaction.search([
                braintree.TransactionSearch.gateway_rejected_at.between(day_init, day_end),                
        ])
        result['rejected'] = [transaction for transaction in gateway_rejected_results.items]
        
        #----------- Settled Transactions
        gateway_settled_results = braintree.Transaction.search([
                braintree.TransactionSearch.settled_at.between(day_init, day_end),                
        ])
        result['settled'] = [transaction for transaction in gateway_settled_results.items]
        
        return result
    
    def get_expired_credit_cards(self):
        collection = braintree.CreditCard.expired()
        return collection
            
    def refund_transaction(self, tx_id):
        transaction = self.get_transaction_details(tx_id)
        result = braintree.Transaction.refund(transaction.id)
        result.transaction.type
        # "credit"
        result.transaction.id
        # e.g. "mtpw3x"
        return result
        
        
    def render_button(self, cart, request):
        import decimal
        context = decimal.Context(prec=20, rounding=decimal.ROUND_HALF_DOWN)
        decimal.setcontext(context)
        
        url = braintree.TransparentRedirect.url()
        #TODO: Replace this in production
        
        entry_point = request.build_absolute_uri(reverse("braintree_confirm"))
        amount = cart.total_with_taxes()
        logging.warn(amount)
        amount = amount.quantize(decimal.Decimal('.01'))
        tr_data = braintree.Transaction.tr_data_for_sale({
            "transaction": {
                "type": "sale",
                "amount": str(amount),
#                "options": {
#                        "submit_for_settlement": True
#                }
            }
            
        }, entry_point)
        
        html = """
        <form action="%s" method="POST">
            <input type="hidden" name="tr_data" value="%s" />
            <label>Credit Card Number</label><input type="text" name="transaction[credit_card][number]" /><br/>
            <label>Expiration Date</label><input type="text" name="transaction[credit_card][expiration_date]" /><br/>
            <label>CVV</label><input type="text" name="transaction[credit_card][cvv]" /><br/>
            <button class="primaryAction small awesome" type="submit">Pay</button>
        </form>
        """ % (url, tr_data)
        logging.debug("---- BRAINTREE FORM ----- \n%s" % html)
        return html
    
    def confirm_purchase(self, query):
        return braintree.TransparentRedirect.confirm(query)

    def submit_for_settlement(self, txn_id):
        result = braintree.Transaction.submit_for_settlement(txn_id)
        return result

@transaction.commit_on_success
def confirm(request):
    """
    Braintree will resend our form, and we should confirm resending the query (removing the leading ?)
    http://example.com/path?http_status=200&id=vgqssrhqhxfhgrwz&hash=0c3c641f1de3ed1c732c54cab367355350603b28
    """
    from payments.models import BraintreeShopSettings, BrainTreeTransaction
    
    shop = request.shop
    cart = request.cart

    #### Verify Products Availability
    if not cart.is_available():
        request.flash['message'] = 'Items not longer available: '
        for item in cart.items_not_availables():
            request.flash['message'] += item.product.title
        cart.remove_not_available_items()
        
        return HttpResponseRedirect(reverse('my_shopping'))
        
        
    query_string =  "http_status=%s&id=%s&kind=%s&hash=%s" % (request.GET['http_status'], request.GET['id'], request.GET['kind'], request.GET['hash'])
    
    braintree_settings = BraintreeShopSettings.objects.filter(shop = shop).get()
    gw = BraintreeGateway(braintree_settings.merchant_id, 
                          braintree_settings.public_key,
                          braintree_settings.private_key)
    
    result = gw.confirm_purchase(query_string)
    #Check if txn is authorized!
    if result.is_success:
        #TODO: At this point the transaction is authorized but NOT submitted for settlement, 
        #if we want, here we could do that. If this action must be done by shop owner, 
        #the transaction id must be saved in a model
        settled_result = gw.submit_for_settlement(result.transaction.id)
        logging.critical(settled_result)
        if settled_result.is_success:
            # submitted successfully
            #Close and clean the cart
            sell = cart.close("BrainTree")
            bt_txn = BrainTreeTransaction(sell=sell, transaction_id=result.transaction.id)
            bt_txn.save()
            #Set the sell payments as paid
            #sell.payment.pay()
            request.flash['message'] = "Braintree will process your payment. Once we received the confirmation we will ship your package."
            request.flash['severity'] = "success"
            return HttpResponseRedirect(reverse('payments_success'))
        else:
            if settled_result.message: logging.critical(settled_result.message)
            request.flash['message'] = "Payment Failed! " + settled_result.errors.deep_errors
            request.flash['severity'] = "error"
            return HttpResponseRedirect(reverse('my_shopping'))
        
    else:
        message = ""
        if result.transaction:
            code = result.transaction.processor_response_code
            text = result.transaction.processor_response_text
            message = "Payment Failed! %s.\[%s] %s" % (result.message, code, text)
            
        else:
            for error in result.errors.deep_errors:
                txt = "attribute: %s, code: %s. %s" %(error.attribute, error.code, error.message)    
                message += txt + "\n"
                
        request.flash['message'] = message
        request.flash['severity'] = "error" 
        return HttpResponseRedirect(reverse('my_shopping'))

########NEW FILE########
__FILENAME__ = braintreegw_urls
from django.conf.urls.defaults import *

urlpatterns = patterns('',
    url(r'^confirm/$', 'payments.gateways.braintreegw.confirm', name='braintree_confirm'),
)
########NEW FILE########
__FILENAME__ = googlecheckout
# -*- coding: utf-8 -*-
import logging

from django.conf import settings
from django.core.urlresolvers import reverse
from django.http import HttpResponseRedirect, HttpResponse, Http404
from django.utils.translation import ugettext as _
from django.shortcuts import render_to_response, get_object_or_404

from gchecky import model as gmodel
from gchecky.controller import Controller

from core.decorators import shop_required
from sell.models import Cart
from shops.models import Shop
from payments.models import GoogleCheckoutOrder

SANDBOX =  getattr(settings, "GOOGLE_CHECKOUT_SANDBOX", False) 

class GoogleCheckoutGateway(object):
    
    name = "google_checkout"
    
    def __init__(self, merchant_id, merchant_key, debug = True):
        #TODO: Read this from settings
        self.merchant_id = merchant_id.encode('ascii')
        self.merchant_key = merchant_key.encode('ascii')
        self.api_version = 'v2'
        self.work_on_sandbox = SANDBOX     # True for testing, False for production
        self.checkout_currency = 'USD'  # Checkouts only supports (USD , GBP)
        self._controller = None
    
    def controller(self):
        if self._controller is None: 
            controller = Controller(vendor_id=self.merchant_id,
                                    merchant_key=self.merchant_key,
                                    is_sandbox=self.work_on_sandbox,
                                    currency=self.checkout_currency)
            self._controller = controller
        return self._controller
    
        
    def createCart(self, cart):
        """
        Create a shopping cart compatible with gchecky from our local cart.
        @return : a gmodel.checkout_shopping_cart_t
        """
        items = []
        for cartitem in cart.cartitem_set.all():
            item = gmodel.item_t(name=cartitem.product.title,
                                 description=cartitem.product.description,
                                 unit_price=gmodel.price_t(
                                                             value=cartitem.price,
                                                             currency = self.checkout_currency
                                                             ),
                                 quantity=cartitem.qty
                                 )
            items.append(item)
        
        
        
        url_success = "http://%s/payments/success" % (cart.shop.default_dns)
        
        merchant_private_data = "cart_id:%s#shop_id:%s" % (cart.id, cart.shop.id)
        
        shopping_cart = gmodel.shopping_cart_t(items=items, merchant_private_data=merchant_private_data)
        
        support = gmodel.checkout_flow_support_t(
                            edit_cart_url = None,
                            continue_shopping_url = url_success,
                            tax_tables = gmodel.tax_tables_t(
                                merchant_calculated = False,
                                default = gmodel.default_tax_table_t(
                                    tax_rules = [
                                        gmodel.default_tax_rule_t(
                                            shipping_taxed = False,
                                            rate = cart.rate_taxes(),
                                            tax_area = gmodel.tax_area_t(world_area = True)
                                        )
                                    ]
                                )
                            ),
                            shipping_methods = gmodel.shipping_methods_t(
                                flat_rate_shippings = [
                                    gmodel.flat_rate_shipping_t(
                                        name = 'Standard Shipping',
                                        price = gmodel.price_t(
                                                currency = self.checkout_currency,
                                                value = float(str(cart.shipping_charge())),
                                        ),
#                                        allowed_areas = gmodel.allowed_areas_t(
#                                            postal_areas = [gmodel.postal_area_t(
#                                                country_code = 'US',
#                                                )],
#                                        ),
#                                        excluded_areas = gmodel.excluded_areas_t(
#                                            postal_areas = [gmodel.postal_area_t(
#                                                country_code = 'US',
#                                                )],
#                                        ),
                                    )]
                            )
                        )  
        cart = gmodel.checkout_shopping_cart_t(shopping_cart = shopping_cart, checkout_flow_support = support)
        logging.debug(cart)
        return cart

    def processOrder(self, cart):
        """
        @return: An instance of html_order and has the follow fields:
        - cart - signed and base64 encoded XML representing the shopping cart
        - signature - base64 encoded signature (composed from your ID and KEY)
        - url - address where the cart should be sent
        - button - url of the Google Checkout button image
        - xml - the full XML represnting the cart
        - html - the complete html snippet for the GButton - a form with
                 the correct URL, hidden data - GButton is the only visible
                 input.
        """
        processed_cart = self.createCart(cart)
        return self.controller().prepare_order(order=processed_cart)
    
    
    def render_button(self, cart):
        form = self.processOrder(cart).html()
        html = """
        <h3>Google Checkout</h3>
        %s
        """ % form
        return html
    
    
    def process_message(self, data):
        
        notification_type = data["_type"]
        if notification_type == "new-order-notification":
            self.process_new_order_notification(data)
        
        elif notification_type == "authorization-amount-notification":
            self.process_authorization_amount_notification(data)
        
        elif notification_type == "order-state-change-notification":
            self.process_order_state_change_notification(data)
        
        elif notification_type == "risk-information-notification":
            self.process_risk_notification(data)
        
        elif notification_type == "charge-amount-notification":
            self.process_charge_fee_notification(data)
    
        elif notification_type == "refund-amount-notification":
            self.process_refund_notification(data)
            
        else:
            logging.info("Unknown notification message. POST: %s" % data)
        
    def process_charge_fee_notification(self, data):
        order_number = data['google-order-number']
        fee = data['latest-charge-fee.total']        
        logging.info("Charge fee Notification (USD %s) arrived (ignored) for Order <%s>" % (fee, order_number))
        
    def process_refund_notification(self, data):
        order_number = data['google-order-number']
        refund = data["total-refund-amount"]
        logging.info("Refund Notification (USD %s) arrived (ignored) for Order <%s>" % (refund, order_number))
        
    def process_authorization_amount_notification(self, data):
        """
        An <authorization-amount-notification> contains information on the credit card authorized amount and the 
        result of the AVS and CVV checks. The <authorization-amount-notification> is sent after Google Checkout 
        attempts to authorize a buyer's credit card for a new order.
        """
        order_number = data['google-order-number']
        logging.debug("Authorization Amount Notification arrived (ignored)... Order <%s>" % order_number)    
        
        
    def process_risk_notification(self, data):
        """
        link : http://code.google.com/intl/es-AR/apis/checkout/developer/Google_Checkout_XML_API_Notification_API.html#risk_information_notification
        
        Google Checkout sends a risk information notification after completing its risk analysis on a new order. 
        A risk-information-notification includes financial information such as the customer's billing address, 
        a partial credit card number and other values that help you verify that an order is not fraudulent.
        Note: Before shipping the items in the order, you should wait until you have also received the new order
        notification for the order and the authorization
        """
        order_number = data['google-order-number']
        logging.debug("Risk Notification arrived (ignored)... Order <%s>" % order_number)
        
        
    def process_order_state_change_notification(self, data):
        """
        link : http://code.google.com/intl/es-AR/apis/checkout/developer/Google_Checkout_XML_API_Notification_API.html#order_state_change_notification
        
        Google sends an order state change notification to notify you that an order's financial status or
        its fulfillment status has changed. The notification identifies the new financial and fulfillment
        statuses for the order as well as the previous statuses for that order.
        These status changes can be triggered by Order Processing API commands that you send to Google Checkout.
        For example, if you send Google Checkout a <cancel-order> request, Google will respond both 
        synchronously and through the Notification API to inform you that Google Checkout changed the 
        order's status to CANCELLED.
        Note: Before you ship the items in an order, you should ensure that you have already received 
        the new order notification for the order, the risk information notification for the order and an 
        authorization amount notification identifying the chargeable amount.
        """
        order_number = data['google-order-number']
        logging.debug("Order State Change Notification arrived...Order <%s>" % order_number)
        try:
            order = GoogleCheckoutOrder.objects.filter(order_number=order_number).get()
            order.financial_state = data["new-financial-order-state"]
            order.save()
            
            if order.financial_state == "CHARGED":
                order.sell_charged()
                logging.debug("Order confirmed, sell set as paid!")
            elif order.financial_state == "CANCELLED":
                order.sell_cancelled()
                logging.debug("Order was cancelled!")
            else:
                logging.debug("Order not charged yet, sell will not be set as paid...")
                
        except Exception, e:
            raise e
        
    def process_new_order_notification(self, data):
        """
        Before shipping the items in an order, you should wait until you have also received the risk information
        notification for that order as well as the order state change notification informing you that the order's 
        financial state has been updated to CHARGEABLE.
        
        Process a new order notification 
        
        data = {
            ...
            u'buyer-id': [u'851317705418569']
            u'serial-number': [u'500070226120390-00001-7']
            u'google-order-number': [u'500070226120390']
            ...
        }
        """
        buyer_id = data['buyer-id']
        order_number = data['google-order-number']
        type = data["_type"]
        buyer = data["buyer-billing-address.structured-name.first-name"]                       
        order_total = data["order-summary.order-total"]
        
        logging.debug("New google order Notification arrived... Order <%s>" % order_number)
        
        already_processed = True
        try:
            order = GoogleCheckoutOrder.objects.filter(order_number=order_number).get()
        except GoogleCheckoutOrder.DoesNotExist:
            already_processed = False
        
        if already_processed: 
            logging.debug("Notification already processed...")
            return        
               
        try:
            cart_id = parse_merchant_private_data(data)['cart_id']
            shop_id = parse_merchant_private_data(data)['shop_id']
        except Exception, e:
            raise Exception("Could not read merchant private data from google notification")
        
        logging.debug("\nGoogle Message Type = %s\nOrder Number = %s\nBuyer = %s\nOrder Amount = %s" % (type, order_number, buyer,order_total))
        
        try:
            cart = get_object_or_404(Cart, pk=cart_id)
            
            if not cart.is_available():
                self.cancel_order(order_number, reason="out of stock")
                cart.remove_not_available_items()
                logging.error("Order id: %s, cancel. Out of stock, Cart id: %s" %(order_number, cart.id))
                return
            
            sell = cart.close("GoogleCheckout")
            
            order = GoogleCheckoutOrder(sell=sell)
            order.buyer_id = buyer_id
            order.order_number = order_number
            order.save()
            
        except Exception, e:
            raise Exception("Processing new order exception: %s" % e)
        
    def cancel_order(self, order_id, reason="Without reason"):
        """
        Cancel an order, given the order_id provided by google checkout
        """
        msg = "Your order <%s> has been cancelled. Reason: %s" % (order_id, reason)
        self.controller().cancel_order(order_id, msg, "")
        logging.info("Order <%s> cancelled..." % order_id)
        
    def charge_order(self, order_id, amount):
        self.controller().charge_order(order_id, amount)
        logging.info("Order <%s> charged..." % order_id)
        
    def refund_order(self, order_id, amount, reason="No reason"):
        self.controller().refund_order(order_id, amount, reason)
        logging.info("Order <%s> was refunded with %s because %s..." % (order_id, amount, reason))
        
    def authorize_order(self, order_id):
        self.controller().authorize_order(order_id)
        logging.info("Order <%s> was authorized" % order_id)
        
    def process_order(self, order_id):
        self.controller().process_order(order_id)
        logging.info("Order <%s> was processed" % order_id)
        
    def deliver_order(self, order_id):
        """
        Set that the order has been shipped
        """
        self.controller().deliver_order(order_id, send_email=True)
        logging.info("Order <%s> was mark as shipped" % order_id)
        
    def unarchive_order(self, order_id):
        self.controller().unarchive_order(order_id)
        
    def archive_order(self, order_id):
        self.controller().archive_order(order_id)
        
    def add_tracking_data(self, order_id, company, tracking_number):
        self.controller.add_tracking_data(order_id, company, tracking_number)
        
        
@shop_required
def cancel(request):
    return HttpResponse()

@shop_required    
def success(request):    
    return HttpResponse()

def process_google_message(request):
    from payments.models import GoogleCheckoutShopSettings
    
    if not request.POST:
        raise Http404('Has to be a POST request')
    
    data = request.POST
    logging.info("IPN Message from google: %s" % data)
    
    #TODO: Remove this on production!
    old_orders = ["808615120118108", "321915336139579", "500070226120390", "302881105972300", "105051742211290", "576829210613310", "900431298819542", "363385014219421", "110875583474629", "219294873728709", "863418324673725", "754725166854855", "440614064042214", "363224040566596", "423067801498241", "412755410069270", "113080123162102", "948298670658337", "924912876161814", "569064450435781", "940848691218939", "210458200450508", "553564979816637", "569481707803816", "459990434049449", "244184444070541", "233130725515979", "865960480529054", "360415071672616", "338491509385444", "412304365353555", "552610308576885", "208010922301070" ]    
    if data['google-order-number'] in old_orders: 
        logging.error("old order, not will be processed...")
        return HttpResponse(notification_response(data['serial-number']))
    
    try:
        merchant_private_data = parse_merchant_private_data(data)
        shop_id = merchant_private_data['shop_id']
        shop = get_object_or_404(Shop, pk=shop_id)
    except Exception, e:
        logging.error("Error when trying to get shop instance object. Exception? %s" % e)
        return HttpResponse(status=500)
    
    try:   
        settings = GoogleCheckoutShopSettings.objects.filter(shop = shop).get()
    except GoogleCheckoutShopSettings.DoesNotExist:
        logging.error("GoogleCheckout Settings for shop %s do not exist" % shop)
        return HttpResponse(status=500)
    
    try:
        googlecheckout_gw = GoogleCheckoutGateway(settings.merchant_id, settings.merchant_key, debug=True)
        googlecheckout_gw.process_message(data)
    except Exception, e:
        logging.error("Error when trying to process google notification. Exception? %s" % e)
        return HttpResponse(status=500)
    
    response = notification_response(data['serial-number'])
    logging.debug(response)
    return HttpResponse(response)
    
def notification_response(serial_number):
    return """<notification-acknowledgment xmlns="http://checkout.google.com/schema/2" serial-number="%s"/>""" % serial_number.strip()

def parse_merchant_private_data(post):
    """
    ej : parse_merchant_private_data(request.POST)
    """
    merchant_private_data = {}
    if post.has_key('order-summary.shopping-cart.merchant-private-data'):
        elem = post['order-summary.shopping-cart.merchant-private-data']
        for pair in elem.split("#"):
            (key, value) = pair.split(":")
            merchant_private_data[key] = value
    return merchant_private_data
########NEW FILE########
__FILENAME__ = googlecheckout_urls
from django.conf.urls.defaults import *

urlpatterns = patterns('',
    #url(r'^ipn/$', 'payments.gateways.paypal.ipn', name='paypal_ipn'),
    #url(r'^cancel/$', 'payments.gateways.paypal.cancel', name='paypal_cancel'),
    #url(r'^success/$', 'payments.gateways.paypal.success', name='paypal_success'),
    #url(r'^ipn/$', 'payments.gateways.googlecheckout.process_google_message', name='payments_googlecheckout_ipn'),
    #url(r'^ipn/test/$', 'payments.gateways.googlecheckout.ipn_test', name='ipn_test'),
)
########NEW FILE########
__FILENAME__ = paypal
# -*- coding: utf-8 -*-
import urllib, md5, datetime
import logging
import decimal

from cgi import parse_qs
from django.conf import settings
from django.core.urlresolvers import reverse
from django.http import HttpResponseRedirect, HttpResponse, Http404
from django.utils.translation import ugettext as _

from core.decorators import shop_required
from shops.models import Shop
from django.shortcuts import render_to_response
from django.template import loader
from django.template.context import RequestContext
from django.db import transaction

from bidding.views import my_render

   
# Exception messages

TOKEN_NOT_FOUND_ERROR = "PayPal error occured. There is no TOKEN info to finish performing PayPal payment process. We haven't charged your money yet."
NO_PAYERID_ERROR = "PayPal error occured. There is no PAYERID info to finish performing PayPal payment process. We haven't charged your money yet."
GENERIC_PAYPAL_ERROR = "There occured an error while performing PayPal checkout process. We apologize for the inconvenience. We haven't charged your money yet."
GENERIC_PAYMENT_ERROR = "Transaction failed. Check out your order details again."
GENERIC_REFUND_ERROR = "An error occured, we can not perform your refund request"

class PayPalGateway(object):
    """
    Pluggable Python PayPal Driver that implements NVP (Name Value Pair) API methods.
    There are simply 3 main methods to be executed in order to finish the PayPal payment process.
    You explicitly need to define PayPal username, password and signature in your project's settings file.
    
    Those are:
    1) SetExpressCheckout
    2) GetExpressCheckoutDetails (optional)
    3) DoExpressCheckoutPayment
    """
    name = "paypal"
    
    def __init__(self, username, password, sign, debug = True):
        
        self.username  = username
        self.password  = password
        self.sign      = sign

        self.credientials = {
            "USER" : self.username,
            "PWD" : self.password,
            "SIGNATURE" : self.sign,
            "VERSION" : "63.0",
        }
        # Second step is to set the API end point and redirect urls correctly.
        if debug or getattr(settings, "PAYPAL_DEBUG", False):
            self.NVP_API_ENDPOINT    = "https://api-3t.sandbox.paypal.com/nvp"
            self.PAYPAL_REDIRECT_URL = "https://www.sandbox.paypal.com/cgi-bin/webscr?cmd=_express-checkout&token="
            self.PAYPAL_WEBSCR_URL = "https://www.sandbox.paypal.com/cgi-bin/webscr"
        else:
            self.NVP_API_ENDPOINT    = "https://api-3t.paypal.com/nvp"
            self.PAYPAL_REDIRECT_URL = "https://www.paypal.com/cgi-bin/webscr?cmd=_express-checkout&token="
            self.PAYPAL_WEBSCR_URL = "https://www.paypal.com/cgi-bin/webscr"

        # initialization
        self.signature = urllib.urlencode(self.credientials) + '&'
        self.setexpresscheckouterror = None
        self.getexpresscheckoutdetailserror = None
        self.doexpresscheckoutpaymenterror = None
        self.refundtransactionerror = None
        self.setaccesspermissionsdetailserror = None
        self.apierror = None
        self.api_response = None
        self.token = None
        self.response = None
        self.refund_response = None

    def _get_value_from_qs(self, qs, value):
        """
        Gets a value from a querystring dict
        This is a private helper function, so DO NOT call this explicitly.
        """
        raw = qs.get(value)
        if type(raw) == list:
            try:
                return raw[0]
            except KeyError:
                return None
        else:
            return raw


    def paypal_url(self, token = None):
        """
        Returns a 'redirect url' for PayPal payments.
        If token was null, this function MUST NOT return any URL.
        """
        token = token if token is not None else self.token
        if not token:
            return None
        return self.PAYPAL_REDIRECT_URL + token
    
    def redirect_url(self, cmd, token = None):
        
        token = token or self.token
        if token is None:
            return None
        
        urlparams = urllib.urlencode({
            'token': token,
            'cmd': cmd
        })
        return self.PAYPAL_WEBSCR_URL + '?' + urlparams 

    def SetExpressCheckout(self, payment_requests, return_url, cancel_url, **kwargs):
        """
        To set up an Express Checkout transaction, you must invoke the SetExpressCheckout API
        to provide sufficient information to initiate the payment flow and redirect to PayPal if the
        operation was successful.

        @payment_requests: dictionary with the paymentrequest see https://cms.paypal.com/us/cgi-bin/?cmd=_render-content&content_ID=developer/e_howto_api_nvp_r_SetExpressCheckout
        @return_url : should be in the format scheme://hostname[:uri (optional)]
        @cancel_url : should be in the format scheme://hostname[:uri (optional)]

        @returns bool

        If you want to add extra parameters, you can define them in **kwargs dict. For instance:
         - SetExpressCheckout(10.00, US, http://www.test.com/cancel/, http://www.test.com/return/, **{'SHIPTOSTREET': 'T Street', 'SHIPTOSTATE': 'T State'})
        """
        parameters = {
            'METHOD' : 'SetExpressCheckout',
            'NOSHIPPING' : 1,
            'RETURNURL' : return_url,
            'CANCELURL' : cancel_url,
        }
        
        
        parameters.update(payment_requests)
        parameters.update(kwargs)
        
        logging.info(parameters)
        
        query_string = self.signature + urllib.urlencode(parameters)
        response = urllib.urlopen(self.NVP_API_ENDPOINT, query_string).read()
        response_dict = parse_qs(response)
        self.api_response = response_dict
        state = self._get_value_from_qs(response_dict, "ACK")
        if state in ["Success", "SuccessWithWarning"]:
            self.token = self._get_value_from_qs(response_dict, "TOKEN")
            return True
        
        self.setexpresscheckouterror = GENERIC_PAYPAL_ERROR
        self.apierror = self._get_value_from_qs(response_dict, "L_LONGMESSAGE0")
        return False


    """
    If SetExpressCheckout is successfull use TOKEN to redirect to the browser to the address BELOW:
    
     - https://www.sandbox.paypal.com/cgi-bin/webscr?cmd=_express-checkout&token=TOKEN (for development only URL)

    """

    def GetExpressCheckoutDetails(self, token = None, subject = None):
        """
        This method performs the NVP API method that is responsible from getting the payment details.
        This returns True if successfully fetch the checkout details, otherwise returns False.
        All of the parameters are REQUIRED.

        @returns bool
        """
        token = self.token if token is None else token
        if token is None:
            self.getexpresscheckoutdetails = TOKEN_NOT_FOUND_ERROR
            return False

        parameters = {
            'METHOD' : "GetExpressCheckoutDetails",
            'TOKEN' : token
        }
        
        if subject:
            parameters['SUBJECT'] = subject
        
        query_string = self.signature + urllib.urlencode(parameters)
        response = urllib.urlopen(self.NVP_API_ENDPOINT, query_string).read()
        response_dict = parse_qs(response)
        self.api_response = response_dict
        state = self._get_value_from_qs(response_dict, "ACK")
        if not state in ["Success", "SuccessWithWarning"]:
            self.getexpresscheckoutdetailserror = self._get_value_from_qs(response_dict, "L_SHORTMESSAGE0")
            self.apierror = self.getexpresscheckoutdetailserror
            return False

        return True


    def DoExpressCheckoutPayment(self, payment_requests, token = None, payerid = None, ** kwargs):
        """
        This method performs the NVP API method that is responsible from doing the actual payment.
        All of the parameters are REQUIRED.
        @currency: Look at 'https://cms.paypal.com/us/cgi-bin/?cmd=_render-content&content_ID=developer/e_howto_api_nvp_currency_codes'
        @amount : should be string with the following format '10.00'
        @token : token that will come from the result of SetExpressCheckout process.
        @payerid : payerid that will come from the url when PayPal redirects you after SetExpressCheckout process.


        @returns bool
        """
        if token is None:
            self.doexpresscheckoutpaymenterror = TOKEN_NOT_FOUND_ERROR
            return False

        if payerid is None:
            self.doexpresscheckoutpaymenterror = NO_PAYERID_ERROR
            return False

        parameters = {
            'METHOD' : "DoExpressCheckoutPayment",
            'PAYMENTREQUEST_0_PAYMENTACTION' : 'Sale',
            'TOKEN': token,
            'PAYERID' : payerid,
        }
        parameters.update(payment_requests)
        parameters.update(kwargs)
        
        query_string = self.signature + urllib.urlencode(parameters)
        response = urllib.urlopen(self.NVP_API_ENDPOINT, query_string).read()
        response_tokens = {}
        for token in response.split('&'):
            response_tokens[token.split("=")[0]] = token.split("=")[1]
        for key in response_tokens.keys():
            response_tokens[key] = urllib.unquote(response_tokens[key])
        
        state = self._get_value_from_qs(response_tokens, "ACK")
        self.response = response_tokens
        self.api_response = response_tokens
        if not state in ["Success", "SuccessWithWarning"]:
            self.doexpresscheckoutpaymenterror = GENERIC_PAYMENT_ERROR
            self.apierror = self._get_value_from_qs(response_tokens, "L_LONGMESSAGE0")
            
            logging.error(response_tokens)
            return False
        return True


    def RefundTransaction(self, transid, refundtype, currency = None, amount = None, note = "Dummy note for refund"):
        """
        Performs PayPal API method for refund.
        
        @refundtype: 'Full' or 'Partial'

        Possible Responses:
         {'ACK': 'Failure', 'TIMESTAMP': '2009-12-13T09:51:19Z', 'L_SEVERITYCODE0': 'Error', 'L_SHORTMESSAGE0':
         'Permission denied', 'L_LONGMESSAGE0': 'You do not have permission to refund this transaction', 'VERSION': '53.0',
         'BUILD': '1077585', 'L_ERRORCODE0': '10007', 'CORRELATIONID': '3d8fa24c46c65'}

         or
    
         {'REFUNDTRANSACTIONID': '9E679139T5135712L', 'FEEREFUNDAMT': '0.70', 'ACK': 'Success', 'TIMESTAMP': '2009-12-13T09:53:06Z',
         'CURRENCYCODE': 'AUD', 'GROSSREFUNDAMT': '13.89', 'VERSION': '53.0', 'BUILD': '1077585', 'NETREFUNDAMT': '13.19',
         'CORRELATIONID': '6c95d7f979fc1'}
        """

        if not refundtype in ["Full", "Partial"]:
            self.refundtransactionerror = "Wrong parameters given, We can not perform your refund request"
            return False
        
        parameters = {
            'METHOD' : "RefundTransaction",
            'TRANSACTIONID' : transid,
            'REFUNDTYPE' : refundtype,
        }
        
        if refundtype == "Partial":
            extra_values = {
                'AMT' : amount,
                'CURRENCYCODE' : currency,
                'NOTE' : note
            }
            parameters.update(extra_values)

        query_string = self.signature + urllib.urlencode(parameters)
        response = urllib.urlopen(self.NVP_API_ENDPOINT, query_string).read()
        response_tokens = {}
        for token in response.split('&'):
            response_tokens[token.split("=")[0]] = token.split("=")[1]
            
        for key in response_tokens.keys():
            response_tokens[key] = urllib.unquote(response_tokens[key])

        state = self._get_value_from_qs(response_tokens, "ACK")
        self.refund_response = response_tokens
        self.api_response = response_tokens
        if not state in ["Success", "SuccessWithWarning"]:
            self.refundtransactionerror = GENERIC_REFUND_ERROR
            return False
        return True


    def GetPaymentResponse(self):
        return self.response

    def GetRefundResponse(self):
        return self.refund_response
    
    def GetAccessPermissionDetails(self, token=None):
        """
            Retrieves status of the permissions being requested from a user

        @return: (success, response)
        @type: tuple
        """
        token = self.token if token is None else token
        if token is None:
            self.getexpresscheckoutdetails = TOKEN_NOT_FOUND_ERROR
            return (False, None)

        parameters = {
            'METHOD' : "GetAccessPermissionDetails",
            'TOKEN' : token,
        }
        query_string = self.signature + urllib.urlencode(parameters)
        response = urllib.urlopen(self.NVP_API_ENDPOINT, query_string).read()
        response_dict = parse_qs(response)
        self.api_response = response_dict
        state = self._get_value_from_qs(response_dict, "ACK")
        if not state in ["Success", "SuccessWithWarning"]:
            self.getexpresscheckoutdetailserror = self._get_value_from_qs(response_dict, "L_SHORTMESSAGE0")
            self.apierror = self.getexpresscheckoutdetailserror
            return (False, response_dict)

        return (True, response_dict)
        
    def SetAccessPermissions(self, return_url, cancel_url, logout_url, 
                             required_permissions=None, optional_permissions=None):
        """
            Sets up a request to authorize permissions
            
            @rtype: tuple
            @return: (success, response)
        """
        
        parameters = {
            'METHOD' : "SetAccessPermissions",
            'RETURNURL' : return_url,
            'CANCELURL' : cancel_url,
            'LOGOUTURL' : logout_url
        }
        
        for i, perm in enumerate(required_permissions or []):
            parameters["L_requiredaccesspermissions%d" % i] = perm
        
        for i, perm in enumerate(optional_permissions or []):
            parameters["L_optionalaccesspermissions%d" % i] = perm
        
        logging.info(parameters)
        
        query_string = self.signature + urllib.urlencode(parameters)
        logging.info(query_string)
        response = urllib.urlopen(self.NVP_API_ENDPOINT, query_string).read()
        response_dict = parse_qs(response)
        self.api_response = response_dict
        state = self._get_value_from_qs(response_dict, "ACK")
        if not state in ["Success", "SuccessWithWarning"]:
            logging.info(response_dict)
            self.setaccesspermissionsdetailserror = self._get_value_from_qs(response_dict, "L_SHORTMESSAGE0")
            self.apierror = self.getexpresscheckoutdetailserror
            return (False, self.api_response)
        
        self.token = self._get_value_from_qs(response_dict, "TOKEN")
        return (True, self.api_response)
    
    def UpdateAccessPermissions(self):
        """
            Removes permissions for a user
        """
        pass 

    
    def render_button(self):
        return """
        <h3>PayPal</h3>
        <a href="%s"><img src="%simg/paypal-button.gif"/></a>
        """ % (reverse('payments_paypal_paynow'), settings.MEDIA_URL)

@shop_required    
def cancel(request):
    return HttpResponseRedirect(reverse('payments_cancel'))

@transaction.commit_on_success
@shop_required
def success(request):    
    from payments.gateways.paypal import PayPalGateway
    from payments.models import PayPalShopSettings, PayPalToken, PayPalTransaction
    from preferences.models import Preference
    from sell.templatetags.sell_tags import money_format

    cart = request.cart
    
    #### Verify Products Availability
    if not cart.is_available():
        request.flash['message'] = 'Items not longer available: '
        for item in cart.items_not_availables():
            request.flash['message'] += item.product.title
        cart.remove_not_available_items()
        
        return HttpResponseRedirect(reverse('my_shopping'))
    
    if request.method == 'GET':
        payerid = request.GET.get('PayerID', None)
        token = request.GET.get('token', None)
    else:
        payerid = request.POST.get('PayerID', None)
        token = request.POST.get('token', None)
    
    if None in (token, payerid):
        request.flash['message'] = unicode(_("Payment failed, try other method."))
        request.flash['severity'] = "error"
        return HttpResponseRedirect(reverse('my_shopping'))
    
    shop = request.shop   
    paypal_settings = PayPalShopSettings.objects.filter(shop = shop).get()
    
    try:
        paypaltoken = PayPalToken.objects.filter(token=token).get()
    except PayPalToken.DoesNotExist:
        request.flash['message'] = unicode(_("Payment failed, try other method."))
        request.flash['severity'] = "error"
        return HttpResponseRedirect(reverse('my_shopping'))

    if paypaltoken.confirmed == True:
        request.flash['message'] = unicode(_("Payment is already confirmed!"))
        request.flash['severity'] = "notice"
        return HttpResponseRedirect(reverse('my_shopping'))

    cart = paypaltoken.cart
    #currency = Preference.get_preference(shop).checkout_currency
    total_amount = "%0.2f" % cart.total_with_taxes()
    
    
    if request.method != 'POST':
        
        t = loader.get_template('payments/payment_paypal_confirm.html')
        c = RequestContext(request, {
                                     'payerid': payerid,
                                     'token': token,
                                     #'api_signature': settings.PAYPAL_SIGNATURE,                                                                   
                                     #'api_user': settings.PAYPAL_USERNAME,
                                     #'api_password': settings.PAYPAL_PASSWORD
                                    })
        block = (t.render(c))
        
        param = {'total_amount': money_format(total_amount, shop),
                 'paypaltoken': paypaltoken,
                 'cart': cart,
                 'cancel_url': reverse('payments_cancel'),
                 'form_paypal_confirm': block,
                }
        
        return HttpResponse(my_render(request, param, 'payment_paypal_confirm'))        
    
    
    action = request.POST.get('action', 'cancel').lower()
    
    if action == 'confirm':
        
        paypal_gw = PayPalGateway(username=settings.PAYPAL_USERNAME,
                                  password=settings.PAYPAL_PASSWORD,
                                  sign=settings.PAYPAL_SIGNATURE,
                                  debug=settings.PAYPAL_DEBUG)
       
        #return_url = request.build_absolute_uri(reverse("paypal_success"))
        #cancel_url = request.build_absolute_uri(reverse("paypal_cancel"))
        is_token_data = paypal_gw.GetExpressCheckoutDetails(paypaltoken.token, subject=paypal_settings.email)
        
        if not is_token_data:
            logging.critical("Error found when trying to do a GetExpressCheckoutDetails api call on Paypal. RESPONSE: %s" % paypal_gw.api_response)
            request.flash['message'] = unicode(_("Could not get transaction data from PayPal. Please contact admin to complete your purchase!"))
            request.flash['severity'] = "error"
            return HttpResponseRedirect(reverse('my_shopping'))
        
        
        ack = paypal_gw.api_response['ACK'][0]            
        
        if ack != "Success":
            logging.critical("Paypal Api Response Failure. RESPONSE: %s" % paypal_gw.api_response)
            request.flash['message'] = unicode(_("There was an error when trying to get data from PayPal. Please contact admin to complete your purchase!"))
            request.flash['severity'] = "error"
            return HttpResponseRedirect(reverse('my_shopping'))
        
        try:
            amount = decimal.Decimal(paypal_gw.api_response['PAYMENTREQUEST_0_AMT'][0])
        except KeyError:
            logging.critical("Fail when trying to read the payment amount. The API response don't have an AMT key. RESPONSE: %s" % paypal_gw.api_response)    
            request.flash['message'] = unicode(_("We have found an error when trying to validate your purchase!"))
            request.flash['severity'] = "error"
            return HttpResponseRedirect(reverse('my_shopping'))
        
        if amount != cart.total_with_taxes():
            request.flash['message'] = unicode(_("You have authorized us to charge you just $%s, but you want buy $%s! Please contact admin if you think this is a mistake!" % (amount, cart.total_with_taxes())))
            request.flash['severity'] = "error"
            return HttpResponseRedirect(reverse('my_shopping'))
        
    
        payment_request = {
            'PAYMENTREQUEST_0_PAYMENTACTION': 'Sale',
            'PAYMENTREQUEST_0_AMT': "%0.2f" % cart.total_with_taxes(), 
            #'PAYMENTREQUEST_0_TAXAMT': "%0.2f" % cart.taxes(),
            #'PAYMENTREQUEST_n_SHIPPINGAMT': "%0.2f" % cart.shipping_charge(),
            #'PAYMENTREQUEST_0_ITEMAMT': "%0.2f" % cart.total(),
            'PAYMENTREQUEST_0_CURRENCYCODE': Preference.get_preference(shop).checkout_currency,
            'PAYMENTREQUEST_0_NOTIFYURL': request.build_absolute_uri(reverse("payments_paypal_ipn")),
            'SUBJECT': paypal_settings.email
        }
        success = paypal_gw.DoExpressCheckoutPayment(payment_request, paypaltoken.token, payerid)
        
        
        if success:
            #Close and clean the cart
            sell = cart.close("PayPal")
            #Set the sell payments as paid
            sell.payment.pay()
            paypaltoken.confirmed = True
            paypaltoken.save()
            
            # {'PAYMENTINFO_0_TRANSACTIONTYPE': 'expresscheckout', 'ACK': 'Success', 'PAYMENTINFO_0_PAYMENTTYPE': 'instant', 'PAYMENTINFO_0_REASONCODE': 'None', 'SHIPPINGOPTIONISDEFAULT': 'false', 'INSURANCEOPTIONSELECTED': 'false', 'CORRELATIONID': '8d20dfd3e3575', 'PAYMENTINFO_0_TAXAMT': '0.00', 'PAYMENTINFO_0_TRANSACTIONID': '6MH53467HE876651A', 'PAYMENTINFO_0_PENDINGREASON': 'None', 'PAYMENTINFO_0_AMT': '57.00', 'PAYMENTINFO_0_PROTECTIONELIGIBILITY': 'Ineligible', 'PAYMENTINFO_0_ERRORCODE': '0', 'TOKEN': 'EC-7MR99474WD5992801', 'VERSION': '63.0', 'SUCCESSPAGEREDIRECTREQUESTED': 'false', 'BUILD': '1482946', 'PAYMENTINFO_0_CURRENCYCODE': 'USD', 'PAYMENTINFO_0_FEEAMT': '1.95', 'TIMESTAMP': '2010-09-08T18:03:24Z', 'PAYMENTINFO_0_ACK': 'Success', 'PAYMENTINFO_0_ORDERTIME': '2010-09-08T18:03:23Z', 'PAYMENTINFO_0_PAYMENTSTATUS': 'Completed'}
            txn_id = paypal_gw.api_response['PAYMENTINFO_0_TRANSACTIONID']
            
            transaction = PayPalTransaction()
            transaction.transaction_id = txn_id
            transaction.sell = sell
            transaction.save()
            
            return HttpResponseRedirect(reverse('payments_success'))
        else:
            request.flash['message'] = unicode(_("Payment Failed!"))
            request.flash['severity'] = "error"
            return HttpResponseRedirect(reverse('my_shopping'))
    else:
        paypaltoken.delete()
        request.flash['message'] = unicode(_("Payment cancel!"))
        request.flash['severity'] = "notice"
        return HttpResponseRedirect(reverse('my_shopping'))


@shop_required
def paynow(request):
    from payments.models import  PayPalShopSettings, PayPalToken
    from preferences.models import Preference
        
    shop = request.shop
    cart = request.cart

    #### Verify Products Availability
    if not cart.is_available():
        request.flash['message'] = 'Items not longer available: '
        for item in cart.items_not_availables():
            request.flash['message'] += item.product.title
        cart.remove_not_available_items()
        
        return HttpResponseRedirect(reverse('my_shopping'))

    
    try:   
        paypal_settings = PayPalShopSettings.objects.filter(shop = shop).get()
    except PayPalShopSettings.DoesNotExist:
        request.flash['message'] = unicode(_("This shop haven't Paypal as a payment provider, please try other method."))
        request.flash['severity'] = "error"
        return HttpResponseRedirect(reverse('my_shopping'))
    
    total_amount = "%0.2f" % cart.total_with_taxes()
    
    return_url = request.build_absolute_uri(reverse("paypal_success"))
    cancel_url = request.build_absolute_uri(reverse("paypal_cancel"))
    
    ppgw = PayPalGateway(username=settings.PAYPAL_USERNAME,
                         password=settings.PAYPAL_PASSWORD,
                         sign=settings.PAYPAL_SIGNATURE,
                         debug=settings.PAYPAL_DEBUG)
    

    payment_request = {
        'PAYMENTREQUEST_0_PAYMENTACTION': 'Sale',
        'PAYMENTREQUEST_0_AMT': total_amount,
        #'PAYMENTREQUEST_0_TAXAMT': "%0.2f" % cart.taxes(),
        #'PAYMENTREQUEST_n_SHIPPINGAMT': "%0.2f" % cart.shipping_charge(),
        #'PAYMENTREQUEST_0_ITEMAMT': "%0.2f" % cart.total(),
        'PAYMENTREQUEST_0_CURRENCYCODE': Preference.get_preference(shop).checkout_currency,
        'PAYMENTREQUEST_0_NOTIFYURL': request.build_absolute_uri(reverse("payments_paypal_ipn")),
        'SUBJECT': paypal_settings.email
    }
    
    #for i, cart_item in enumerate(cart.cartitem_set.all()):
    #    payment_request['L_PAYMENTREQUEST_0_NAME%d' % i] = cart_item.product.title.title() 
    #    payment_request['L_PAYMENTREQUEST_0_AMT%d' % i] = "%0.2f" % cart_item.product.price
    #    payment_request['L_PAYMENTREQUEST_0_QTY%d' % i] = cart_item.qty

    success = ppgw.SetExpressCheckout(payment_request, return_url, cancel_url)
    if success:
        """
        token = A timestamped token by which you identify to PayPal that you are processing
        this payment with Express Checkout. The token expires after three hours. 
        If you set the token in the SetExpressCheckout request, the value of the token in the 
        response is identical to the value in the request.
        Character length and limitations: 20 single-byte characters 
        """
        token = ppgw.token
        PayPalToken(cart=cart, token=token).save()
        return HttpResponseRedirect(ppgw.paypal_url())
    
    else:
        logging.critical("SetExpressCheckout failed. RESPONSE = %s" % ppgw.api_response)
        request.flash['message'] = unicode(_("Payment failed, try other method."))
        request.flash['severity'] = "error"
        return HttpResponseRedirect(reverse('my_shopping'))

def ipn(request):
    
    logging.info(request.GET)
    logging.info(request.POST)
    return HttpResponse("")
########NEW FILE########
__FILENAME__ = paypal_urls
from django.conf.urls.defaults import *

urlpatterns = patterns('',
    #url(r'^ipn/$', 'payments.gateways.paypal.ipn', name='paypal_ipn'),
    url(r'^cancel/$', 'payments.gateways.paypal.cancel', name='paypal_cancel'),
    url(r'^success/$', 'payments.gateways.paypal.success', name='paypal_success'),
    url(r'^paynow/$', 'payments.gateways.paypal.paynow', name='payments_paypal_paynow'),
    url(r'^ipn/$', 'payments.gateways.paypal.ipn', name='payments_paypal_ipn'),
)
########NEW FILE########
__FILENAME__ = 0001_initial
# encoding: utf-8
import datetime
from south.db import db
from south.v2 import SchemaMigration
from django.db import models

class Migration(SchemaMigration):

    def forwards(self, orm):
        
        # Adding model 'PayPalShopSettings'
        db.create_table('payments_paypalshopsettings', (
            ('id', self.gf('django.db.models.fields.AutoField')(primary_key=True)),
            ('shop', self.gf('django.db.models.fields.related.ForeignKey')(to=orm['shops.Shop'])),
            ('payer_id', self.gf('django.db.models.fields.CharField')(max_length=92)),
            ('email', self.gf('django.db.models.fields.EmailField')(max_length=75)),
            ('first_name', self.gf('django.db.models.fields.EmailField')(max_length=75)),
            ('last_name', self.gf('django.db.models.fields.EmailField')(max_length=75)),
            ('perms', self.gf('picklefield.fields.PickledObjectField')(default=[])),
        ))
        db.send_create_signal('payments', ['PayPalShopSettings'])

        # Adding model 'PayPalToken'
        db.create_table('payments_paypaltoken', (
            ('id', self.gf('django.db.models.fields.AutoField')(primary_key=True)),
            ('cart', self.gf('django.db.models.fields.related.ForeignKey')(to=orm['sell.Cart'])),
            ('token', self.gf('django.db.models.fields.CharField')(unique=True, max_length=255)),
            ('timestamp', self.gf('django.db.models.fields.DateTimeField')(auto_now_add=True, blank=True)),
            ('confirmed', self.gf('django.db.models.fields.BooleanField')(default=False, blank=True)),
        ))
        db.send_create_signal('payments', ['PayPalToken'])

        # Adding model 'GoogleCheckoutShopSettings'
        db.create_table('payments_googlecheckoutshopsettings', (
            ('id', self.gf('django.db.models.fields.AutoField')(primary_key=True)),
            ('shop', self.gf('django.db.models.fields.related.ForeignKey')(to=orm['shops.Shop'])),
            ('merchant_id', self.gf('django.db.models.fields.CharField')(max_length=20)),
            ('merchant_key', self.gf('django.db.models.fields.CharField')(max_length=40)),
        ))
        db.send_create_signal('payments', ['GoogleCheckoutShopSettings'])

        # Adding model 'GoogleCheckoutOrder'
        db.create_table('payments_googlecheckoutorder', (
            ('id', self.gf('django.db.models.fields.AutoField')(primary_key=True)),
            ('sell', self.gf('django.db.models.fields.related.ForeignKey')(to=orm['sell.Sell'])),
            ('order_number', self.gf('django.db.models.fields.CharField')(max_length=20)),
            ('buyer_id', self.gf('django.db.models.fields.CharField')(max_length=20)),
            ('financial_state', self.gf('django.db.models.fields.CharField')(max_length=20)),
            ('fulfillment_state', self.gf('django.db.models.fields.CharField')(max_length=20)),
            ('ready_to_ship', self.gf('django.db.models.fields.BooleanField')(default=False, blank=True)),
        ))
        db.send_create_signal('payments', ['GoogleCheckoutOrder'])

        # Adding model 'ManualPaymentShopSettings'
        db.create_table('payments_manualpaymentshopsettings', (
            ('id', self.gf('django.db.models.fields.AutoField')(primary_key=True)),
            ('shop', self.gf('django.db.models.fields.related.ForeignKey')(to=orm['shops.Shop'])),
            ('name', self.gf('django.db.models.fields.CharField')(max_length=50)),
            ('description', self.gf('django.db.models.fields.TextField')(default='')),
            ('instructions', self.gf('django.db.models.fields.TextField')()),
        ))
        db.send_create_signal('payments', ['ManualPaymentShopSettings'])

        # Adding model 'BraintreeShopSettings'
        db.create_table('payments_braintreeshopsettings', (
            ('id', self.gf('django.db.models.fields.AutoField')(primary_key=True)),
            ('shop', self.gf('django.db.models.fields.related.ForeignKey')(to=orm['shops.Shop'])),
            ('merchant_id', self.gf('django.db.models.fields.CharField')(max_length=40)),
            ('public_key', self.gf('django.db.models.fields.CharField')(max_length=40)),
            ('private_key', self.gf('django.db.models.fields.CharField')(max_length=40)),
        ))
        db.send_create_signal('payments', ['BraintreeShopSettings'])


    def backwards(self, orm):
        
        # Deleting model 'PayPalShopSettings'
        db.delete_table('payments_paypalshopsettings')

        # Deleting model 'PayPalToken'
        db.delete_table('payments_paypaltoken')

        # Deleting model 'GoogleCheckoutShopSettings'
        db.delete_table('payments_googlecheckoutshopsettings')

        # Deleting model 'GoogleCheckoutOrder'
        db.delete_table('payments_googlecheckoutorder')

        # Deleting model 'ManualPaymentShopSettings'
        db.delete_table('payments_manualpaymentshopsettings')

        # Deleting model 'BraintreeShopSettings'
        db.delete_table('payments_braintreeshopsettings')


    models = {
        'auth.group': {
            'Meta': {'object_name': 'Group'},
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '80'}),
            'permissions': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['auth.Permission']", 'symmetrical': 'False', 'blank': 'True'})
        },
        'auth.permission': {
            'Meta': {'unique_together': "(('content_type', 'codename'),)", 'object_name': 'Permission'},
            'codename': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'content_type': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['contenttypes.ContentType']"}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '50'})
        },
        'auth.user': {
            'Meta': {'object_name': 'User'},
            'date_joined': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
            'email': ('django.db.models.fields.EmailField', [], {'max_length': '75'}),
            'first_name': ('django.db.models.fields.CharField', [], {'max_length': '30', 'blank': 'True'}),
            'groups': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['auth.Group']", 'symmetrical': 'False', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'is_active': ('django.db.models.fields.BooleanField', [], {'default': 'True', 'blank': 'True'}),
            'is_staff': ('django.db.models.fields.BooleanField', [], {'default': 'False', 'blank': 'True'}),
            'is_superuser': ('django.db.models.fields.BooleanField', [], {'default': 'False', 'blank': 'True'}),
            'last_login': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
            'last_name': ('django.db.models.fields.CharField', [], {'max_length': '30', 'blank': 'True'}),
            'password': ('django.db.models.fields.CharField', [], {'max_length': '128'}),
            'user_permissions': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['auth.Permission']", 'symmetrical': 'False', 'blank': 'True'}),
            'username': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '32'})
        },
        'contenttypes.contenttype': {
            'Meta': {'unique_together': "(('app_label', 'model'),)", 'object_name': 'ContentType', 'db_table': "'django_content_type'"},
            'app_label': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'model': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '100'})
        },
        'market.marketplace': {
            'Meta': {'object_name': 'MarketPlace'},
            'base_domain': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '128'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '92'}),
            'slug': ('django.db.models.fields.SlugField', [], {'unique': 'True', 'max_length': '92', 'db_index': 'True'}),
            'template_prefix': ('django.db.models.fields.SlugField', [], {'unique': 'True', 'max_length': '92', 'db_index': 'True'}),
            'title': ('django.db.models.fields.CharField', [], {'max_length': '92'})
        },
        'payments.braintreeshopsettings': {
            'Meta': {'object_name': 'BraintreeShopSettings'},
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'merchant_id': ('django.db.models.fields.CharField', [], {'max_length': '40'}),
            'private_key': ('django.db.models.fields.CharField', [], {'max_length': '40'}),
            'public_key': ('django.db.models.fields.CharField', [], {'max_length': '40'}),
            'shop': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['shops.Shop']"})
        },
        'payments.googlecheckoutorder': {
            'Meta': {'object_name': 'GoogleCheckoutOrder'},
            'buyer_id': ('django.db.models.fields.CharField', [], {'max_length': '20'}),
            'financial_state': ('django.db.models.fields.CharField', [], {'max_length': '20'}),
            'fulfillment_state': ('django.db.models.fields.CharField', [], {'max_length': '20'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'order_number': ('django.db.models.fields.CharField', [], {'max_length': '20'}),
            'ready_to_ship': ('django.db.models.fields.BooleanField', [], {'default': 'False', 'blank': 'True'}),
            'sell': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['sell.Sell']"})
        },
        'payments.googlecheckoutshopsettings': {
            'Meta': {'object_name': 'GoogleCheckoutShopSettings'},
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'merchant_id': ('django.db.models.fields.CharField', [], {'max_length': '20'}),
            'merchant_key': ('django.db.models.fields.CharField', [], {'max_length': '40'}),
            'shop': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['shops.Shop']"})
        },
        'payments.manualpaymentshopsettings': {
            'Meta': {'object_name': 'ManualPaymentShopSettings'},
            'description': ('django.db.models.fields.TextField', [], {'default': "''"}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'instructions': ('django.db.models.fields.TextField', [], {}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '50'}),
            'shop': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['shops.Shop']"})
        },
        'payments.paypalshopsettings': {
            'Meta': {'object_name': 'PayPalShopSettings'},
            'email': ('django.db.models.fields.EmailField', [], {'max_length': '75'}),
            'first_name': ('django.db.models.fields.EmailField', [], {'max_length': '75'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'last_name': ('django.db.models.fields.EmailField', [], {'max_length': '75'}),
            'payer_id': ('django.db.models.fields.CharField', [], {'max_length': '92'}),
            'perms': ('picklefield.fields.PickledObjectField', [], {'default': '[]'}),
            'shop': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['shops.Shop']"})
        },
        'payments.paypaltoken': {
            'Meta': {'object_name': 'PayPalToken'},
            'cart': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['sell.Cart']"}),
            'confirmed': ('django.db.models.fields.BooleanField', [], {'default': 'False', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'timestamp': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'token': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '255'})
        },
        'sell.cart': {
            'Meta': {'object_name': 'Cart'},
            'bidder': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['auth.User']"}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'shippingdata': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['sell.ShippingData']", 'unique': 'True', 'null': 'True', 'blank': 'True'}),
            'shop': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['shops.Shop']"})
        },
        'sell.sell': {
            'Meta': {'object_name': 'Sell'},
            'bidder': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['auth.User']", 'null': 'True'}),
            'closed': ('django.db.models.fields.BooleanField', [], {'default': 'False', 'blank': 'True'}),
            'date_time': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'payment_method': ('django.db.models.fields.CharField', [], {'default': "'Manual Payment'", 'max_length': '255'}),
            'shippingdata': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['sell.ShippingData']", 'unique': 'True', 'null': 'True', 'blank': 'True'}),
            'shop': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['shops.Shop']", 'null': 'True'})
        },
        'sell.shippingdata': {
            'Meta': {'object_name': 'ShippingData'},
            'city': ('django.db.models.fields.CharField', [], {'max_length': '80', 'null': 'True', 'blank': 'True'}),
            'country': ('django.db.models.fields.CharField', [], {'max_length': '50', 'null': 'True', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'state': ('django.db.models.fields.CharField', [], {'max_length': '80', 'null': 'True', 'blank': 'True'}),
            'street_address': ('django.db.models.fields.CharField', [], {'max_length': '80', 'null': 'True', 'blank': 'True'}),
            'zip': ('django.db.models.fields.CharField', [], {'max_length': '30', 'null': 'True', 'blank': 'True'})
        },
        'shops.shop': {
            'Meta': {'object_name': 'Shop'},
            'admin': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['auth.User']"}),
            'bids': ('django.db.models.fields.IntegerField', [], {'default': '0'}),
            'date_time': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'location': ('django.db.models.fields.CharField', [], {'default': "'39.29038,-76.61219'", 'max_length': '255'}),
            'marketplace': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['market.MarketPlace']"}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '60'}),
            'views': ('django.db.models.fields.IntegerField', [], {'default': '0'})
        }
    }

    complete_apps = ['payments']

########NEW FILE########
__FILENAME__ = 0002_auto__add_braintreetransaction
# encoding: utf-8
import datetime
from south.db import db
from south.v2 import SchemaMigration
from django.db import models

class Migration(SchemaMigration):

    def forwards(self, orm):
        
        # Adding model 'BrainTreeTransaction'
        db.create_table('payments_braintreetransaction', (
            ('id', self.gf('django.db.models.fields.AutoField')(primary_key=True)),
            ('sell', self.gf('django.db.models.fields.related.ForeignKey')(to=orm['sell.Sell'])),
            ('transaction_id', self.gf('django.db.models.fields.CharField')(max_length=20)),
        ))
        db.send_create_signal('payments', ['BrainTreeTransaction'])


    def backwards(self, orm):
        
        # Deleting model 'BrainTreeTransaction'
        db.delete_table('payments_braintreetransaction')


    models = {
        'auth.group': {
            'Meta': {'object_name': 'Group'},
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '80'}),
            'permissions': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['auth.Permission']", 'symmetrical': 'False', 'blank': 'True'})
        },
        'auth.permission': {
            'Meta': {'unique_together': "(('content_type', 'codename'),)", 'object_name': 'Permission'},
            'codename': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'content_type': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['contenttypes.ContentType']"}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '50'})
        },
        'auth.user': {
            'Meta': {'object_name': 'User'},
            'date_joined': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
            'email': ('django.db.models.fields.EmailField', [], {'max_length': '75'}),
            'first_name': ('django.db.models.fields.CharField', [], {'max_length': '30', 'blank': 'True'}),
            'groups': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['auth.Group']", 'symmetrical': 'False', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'is_active': ('django.db.models.fields.BooleanField', [], {'default': 'True', 'blank': 'True'}),
            'is_staff': ('django.db.models.fields.BooleanField', [], {'default': 'False', 'blank': 'True'}),
            'is_superuser': ('django.db.models.fields.BooleanField', [], {'default': 'False', 'blank': 'True'}),
            'last_login': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
            'last_name': ('django.db.models.fields.CharField', [], {'max_length': '30', 'blank': 'True'}),
            'password': ('django.db.models.fields.CharField', [], {'max_length': '128'}),
            'user_permissions': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['auth.Permission']", 'symmetrical': 'False', 'blank': 'True'}),
            'username': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '32'})
        },
        'contenttypes.contenttype': {
            'Meta': {'unique_together': "(('app_label', 'model'),)", 'object_name': 'ContentType', 'db_table': "'django_content_type'"},
            'app_label': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'model': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '100'})
        },
        'market.marketplace': {
            'Meta': {'object_name': 'MarketPlace'},
            'base_domain': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '128'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '92'}),
            'slug': ('django.db.models.fields.SlugField', [], {'unique': 'True', 'max_length': '92', 'db_index': 'True'}),
            'template_prefix': ('django.db.models.fields.SlugField', [], {'unique': 'True', 'max_length': '92', 'db_index': 'True'}),
            'title': ('django.db.models.fields.CharField', [], {'max_length': '92'})
        },
        'payments.braintreeshopsettings': {
            'Meta': {'object_name': 'BraintreeShopSettings'},
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'merchant_id': ('django.db.models.fields.CharField', [], {'max_length': '40'}),
            'private_key': ('django.db.models.fields.CharField', [], {'max_length': '40'}),
            'public_key': ('django.db.models.fields.CharField', [], {'max_length': '40'}),
            'shop': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['shops.Shop']"})
        },
        'payments.braintreetransaction': {
            'Meta': {'object_name': 'BrainTreeTransaction'},
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'sell': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['sell.Sell']"}),
            'transaction_id': ('django.db.models.fields.CharField', [], {'max_length': '20'})
        },
        'payments.googlecheckoutorder': {
            'Meta': {'object_name': 'GoogleCheckoutOrder'},
            'buyer_id': ('django.db.models.fields.CharField', [], {'max_length': '20'}),
            'financial_state': ('django.db.models.fields.CharField', [], {'max_length': '20'}),
            'fulfillment_state': ('django.db.models.fields.CharField', [], {'max_length': '20'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'order_number': ('django.db.models.fields.CharField', [], {'max_length': '20'}),
            'ready_to_ship': ('django.db.models.fields.BooleanField', [], {'default': 'False', 'blank': 'True'}),
            'sell': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['sell.Sell']"})
        },
        'payments.googlecheckoutshopsettings': {
            'Meta': {'object_name': 'GoogleCheckoutShopSettings'},
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'merchant_id': ('django.db.models.fields.CharField', [], {'max_length': '20'}),
            'merchant_key': ('django.db.models.fields.CharField', [], {'max_length': '40'}),
            'shop': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['shops.Shop']"})
        },
        'payments.manualpaymentshopsettings': {
            'Meta': {'object_name': 'ManualPaymentShopSettings'},
            'description': ('django.db.models.fields.TextField', [], {'default': "''"}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'instructions': ('django.db.models.fields.TextField', [], {}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '50'}),
            'shop': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['shops.Shop']"})
        },
        'payments.paypalshopsettings': {
            'Meta': {'object_name': 'PayPalShopSettings'},
            'email': ('django.db.models.fields.EmailField', [], {'max_length': '75'}),
            'first_name': ('django.db.models.fields.EmailField', [], {'max_length': '75'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'last_name': ('django.db.models.fields.EmailField', [], {'max_length': '75'}),
            'payer_id': ('django.db.models.fields.CharField', [], {'max_length': '92'}),
            'perms': ('picklefield.fields.PickledObjectField', [], {'default': '[]'}),
            'shop': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['shops.Shop']"})
        },
        'payments.paypaltoken': {
            'Meta': {'object_name': 'PayPalToken'},
            'cart': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['sell.Cart']"}),
            'confirmed': ('django.db.models.fields.BooleanField', [], {'default': 'False', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'timestamp': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'token': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '255'})
        },
        'sell.cart': {
            'Meta': {'object_name': 'Cart'},
            'bidder': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['auth.User']"}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'shippingdata': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['sell.ShippingData']", 'unique': 'True', 'null': 'True', 'blank': 'True'}),
            'shop': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['shops.Shop']"})
        },
        'sell.sell': {
            'Meta': {'object_name': 'Sell'},
            'bidder': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['auth.User']", 'null': 'True'}),
            'closed': ('django.db.models.fields.BooleanField', [], {'default': 'False', 'blank': 'True'}),
            'date_time': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'payment_method': ('django.db.models.fields.CharField', [], {'default': "'Manual Payment'", 'max_length': '255'}),
            'shippingdata': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['sell.ShippingData']", 'unique': 'True', 'null': 'True', 'blank': 'True'}),
            'shop': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['shops.Shop']", 'null': 'True'})
        },
        'sell.shippingdata': {
            'Meta': {'object_name': 'ShippingData'},
            'city': ('django.db.models.fields.CharField', [], {'max_length': '80', 'null': 'True', 'blank': 'True'}),
            'country': ('django.db.models.fields.CharField', [], {'max_length': '50', 'null': 'True', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'state': ('django.db.models.fields.CharField', [], {'max_length': '80', 'null': 'True', 'blank': 'True'}),
            'street_address': ('django.db.models.fields.CharField', [], {'max_length': '80', 'null': 'True', 'blank': 'True'}),
            'zip': ('django.db.models.fields.CharField', [], {'max_length': '30', 'null': 'True', 'blank': 'True'})
        },
        'shops.shop': {
            'Meta': {'object_name': 'Shop'},
            'admin': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['auth.User']"}),
            'bids': ('django.db.models.fields.IntegerField', [], {'default': '0'}),
            'date_time': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'location': ('django.db.models.fields.CharField', [], {'default': "'39.29038,-76.61219'", 'max_length': '255'}),
            'marketplace': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['market.MarketPlace']"}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '60'}),
            'views': ('django.db.models.fields.IntegerField', [], {'default': '0'})
        }
    }

    complete_apps = ['payments']

########NEW FILE########
__FILENAME__ = 0003_auto__add_paypaltransaction
# encoding: utf-8
import datetime
from south.db import db
from south.v2 import SchemaMigration
from django.db import models

class Migration(SchemaMigration):

    def forwards(self, orm):
        
        # Adding model 'PayPalTransaction'
        db.create_table('payments_paypaltransaction', (
            ('id', self.gf('django.db.models.fields.AutoField')(primary_key=True)),
            ('sell', self.gf('django.db.models.fields.related.ForeignKey')(to=orm['sell.Sell'])),
            ('transaction_id', self.gf('django.db.models.fields.CharField')(max_length=30)),
        ))
        db.send_create_signal('payments', ['PayPalTransaction'])


    def backwards(self, orm):
        
        # Deleting model 'PayPalTransaction'
        db.delete_table('payments_paypaltransaction')


    models = {
        'auth.group': {
            'Meta': {'object_name': 'Group'},
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '80'}),
            'permissions': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['auth.Permission']", 'symmetrical': 'False', 'blank': 'True'})
        },
        'auth.permission': {
            'Meta': {'unique_together': "(('content_type', 'codename'),)", 'object_name': 'Permission'},
            'codename': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'content_type': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['contenttypes.ContentType']"}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '50'})
        },
        'auth.user': {
            'Meta': {'object_name': 'User'},
            'date_joined': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
            'email': ('django.db.models.fields.EmailField', [], {'max_length': '75'}),
            'first_name': ('django.db.models.fields.CharField', [], {'max_length': '30', 'blank': 'True'}),
            'groups': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['auth.Group']", 'symmetrical': 'False', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'is_active': ('django.db.models.fields.BooleanField', [], {'default': 'True', 'blank': 'True'}),
            'is_staff': ('django.db.models.fields.BooleanField', [], {'default': 'False', 'blank': 'True'}),
            'is_superuser': ('django.db.models.fields.BooleanField', [], {'default': 'False', 'blank': 'True'}),
            'last_login': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
            'last_name': ('django.db.models.fields.CharField', [], {'max_length': '30', 'blank': 'True'}),
            'password': ('django.db.models.fields.CharField', [], {'max_length': '128'}),
            'user_permissions': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['auth.Permission']", 'symmetrical': 'False', 'blank': 'True'}),
            'username': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '32'})
        },
        'contenttypes.contenttype': {
            'Meta': {'unique_together': "(('app_label', 'model'),)", 'object_name': 'ContentType', 'db_table': "'django_content_type'"},
            'app_label': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'model': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '100'})
        },
        'market.marketplace': {
            'Meta': {'object_name': 'MarketPlace'},
            'base_domain': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '128'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '92'}),
            'slug': ('django.db.models.fields.SlugField', [], {'unique': 'True', 'max_length': '92', 'db_index': 'True'}),
            'template_prefix': ('django.db.models.fields.SlugField', [], {'unique': 'True', 'max_length': '92', 'db_index': 'True'}),
            'title': ('django.db.models.fields.CharField', [], {'max_length': '92'})
        },
        'payments.braintreeshopsettings': {
            'Meta': {'object_name': 'BraintreeShopSettings'},
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'merchant_id': ('django.db.models.fields.CharField', [], {'max_length': '40'}),
            'private_key': ('django.db.models.fields.CharField', [], {'max_length': '40'}),
            'public_key': ('django.db.models.fields.CharField', [], {'max_length': '40'}),
            'shop': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['shops.Shop']"})
        },
        'payments.braintreetransaction': {
            'Meta': {'object_name': 'BrainTreeTransaction'},
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'sell': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['sell.Sell']"}),
            'transaction_id': ('django.db.models.fields.CharField', [], {'max_length': '20'})
        },
        'payments.googlecheckoutorder': {
            'Meta': {'object_name': 'GoogleCheckoutOrder'},
            'buyer_id': ('django.db.models.fields.CharField', [], {'max_length': '20'}),
            'financial_state': ('django.db.models.fields.CharField', [], {'max_length': '20'}),
            'fulfillment_state': ('django.db.models.fields.CharField', [], {'max_length': '20'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'order_number': ('django.db.models.fields.CharField', [], {'max_length': '20'}),
            'ready_to_ship': ('django.db.models.fields.BooleanField', [], {'default': 'False', 'blank': 'True'}),
            'sell': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['sell.Sell']"})
        },
        'payments.googlecheckoutshopsettings': {
            'Meta': {'object_name': 'GoogleCheckoutShopSettings'},
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'merchant_id': ('django.db.models.fields.CharField', [], {'max_length': '20'}),
            'merchant_key': ('django.db.models.fields.CharField', [], {'max_length': '40'}),
            'shop': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['shops.Shop']"})
        },
        'payments.manualpaymentshopsettings': {
            'Meta': {'object_name': 'ManualPaymentShopSettings'},
            'description': ('django.db.models.fields.TextField', [], {'default': "''"}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'instructions': ('django.db.models.fields.TextField', [], {}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '50'}),
            'shop': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['shops.Shop']"})
        },
        'payments.paypalshopsettings': {
            'Meta': {'object_name': 'PayPalShopSettings'},
            'email': ('django.db.models.fields.EmailField', [], {'max_length': '75'}),
            'first_name': ('django.db.models.fields.EmailField', [], {'max_length': '75'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'last_name': ('django.db.models.fields.EmailField', [], {'max_length': '75'}),
            'payer_id': ('django.db.models.fields.CharField', [], {'max_length': '92'}),
            'perms': ('picklefield.fields.PickledObjectField', [], {'default': '[]'}),
            'shop': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['shops.Shop']"})
        },
        'payments.paypaltoken': {
            'Meta': {'object_name': 'PayPalToken'},
            'cart': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['sell.Cart']"}),
            'confirmed': ('django.db.models.fields.BooleanField', [], {'default': 'False', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'timestamp': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'token': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '255'})
        },
        'payments.paypaltransaction': {
            'Meta': {'object_name': 'PayPalTransaction'},
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'sell': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['sell.Sell']"}),
            'transaction_id': ('django.db.models.fields.CharField', [], {'max_length': '30'})
        },
        'sell.cart': {
            'Meta': {'object_name': 'Cart'},
            'bidder': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['auth.User']"}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'shippingdata': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['sell.ShippingData']", 'unique': 'True', 'null': 'True', 'blank': 'True'}),
            'shop': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['shops.Shop']"})
        },
        'sell.sell': {
            'Meta': {'object_name': 'Sell'},
            'bidder': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['auth.User']", 'null': 'True'}),
            'cancel': ('django.db.models.fields.BooleanField', [], {'default': 'False', 'blank': 'True'}),
            'closed': ('django.db.models.fields.BooleanField', [], {'default': 'False', 'blank': 'True'}),
            'date_time': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'payment_method': ('django.db.models.fields.CharField', [], {'default': "'Manual Payment'", 'max_length': '255'}),
            'shippingdata': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['sell.ShippingData']", 'unique': 'True', 'null': 'True', 'blank': 'True'}),
            'shop': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['shops.Shop']", 'null': 'True'}),
            'total': ('django.db.models.fields.DecimalField', [], {'default': "'0'", 'max_digits': '11', 'decimal_places': '2'}),
            'total_taxes': ('django.db.models.fields.DecimalField', [], {'default': "'0'", 'max_digits': '11', 'decimal_places': '2'}),
            'total_without_taxes': ('django.db.models.fields.DecimalField', [], {'default': "'0'", 'max_digits': '11', 'decimal_places': '2'})
        },
        'sell.shippingdata': {
            'Meta': {'object_name': 'ShippingData'},
            'city': ('django.db.models.fields.CharField', [], {'max_length': '80', 'null': 'True', 'blank': 'True'}),
            'country': ('django.db.models.fields.CharField', [], {'max_length': '50', 'null': 'True', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'state': ('django.db.models.fields.CharField', [], {'max_length': '80', 'null': 'True', 'blank': 'True'}),
            'street_address': ('django.db.models.fields.CharField', [], {'max_length': '80', 'null': 'True', 'blank': 'True'}),
            'zip': ('django.db.models.fields.CharField', [], {'max_length': '30', 'null': 'True', 'blank': 'True'})
        },
        'shops.shop': {
            'Meta': {'object_name': 'Shop'},
            'admin': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['auth.User']"}),
            'bids': ('django.db.models.fields.IntegerField', [], {'default': '0'}),
            'date_time': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'location': ('django.db.models.fields.CharField', [], {'default': "'39.29038,-76.61219'", 'max_length': '255'}),
            'marketplace': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['market.MarketPlace']"}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '60'}),
            'views': ('django.db.models.fields.IntegerField', [], {'default': '0'})
        }
    }

    complete_apps = ['payments']

########NEW FILE########
__FILENAME__ = 0004_auto__chg_field_paypalshopsettings_first_name__chg_field_paypalshopset
# encoding: utf-8
import datetime
from south.db import db
from south.v2 import SchemaMigration
from django.db import models

class Migration(SchemaMigration):

    def forwards(self, orm):
        
        # Changing field 'PayPalShopSettings.first_name'
        db.alter_column('payments_paypalshopsettings', 'first_name', self.gf('django.db.models.fields.CharField')(max_length=40))

        # Changing field 'PayPalShopSettings.last_name'
        db.alter_column('payments_paypalshopsettings', 'last_name', self.gf('django.db.models.fields.CharField')(max_length=40))


    def backwards(self, orm):
        
        # Changing field 'PayPalShopSettings.first_name'
        db.alter_column('payments_paypalshopsettings', 'first_name', self.gf('django.db.models.fields.EmailField')(max_length=75))

        # Changing field 'PayPalShopSettings.last_name'
        db.alter_column('payments_paypalshopsettings', 'last_name', self.gf('django.db.models.fields.EmailField')(max_length=75))


    models = {
        'auth.group': {
            'Meta': {'object_name': 'Group'},
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '80'}),
            'permissions': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['auth.Permission']", 'symmetrical': 'False', 'blank': 'True'})
        },
        'auth.permission': {
            'Meta': {'unique_together': "(('content_type', 'codename'),)", 'object_name': 'Permission'},
            'codename': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'content_type': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['contenttypes.ContentType']"}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '50'})
        },
        'auth.user': {
            'Meta': {'object_name': 'User'},
            'date_joined': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
            'email': ('django.db.models.fields.EmailField', [], {'max_length': '75', 'blank': 'True'}),
            'first_name': ('django.db.models.fields.CharField', [], {'max_length': '30', 'blank': 'True'}),
            'groups': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['auth.Group']", 'symmetrical': 'False', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'is_active': ('django.db.models.fields.BooleanField', [], {'default': 'True', 'blank': 'True'}),
            'is_staff': ('django.db.models.fields.BooleanField', [], {'default': 'False', 'blank': 'True'}),
            'is_superuser': ('django.db.models.fields.BooleanField', [], {'default': 'False', 'blank': 'True'}),
            'last_login': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
            'last_name': ('django.db.models.fields.CharField', [], {'max_length': '30', 'blank': 'True'}),
            'password': ('django.db.models.fields.CharField', [], {'max_length': '128'}),
            'user_permissions': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['auth.Permission']", 'symmetrical': 'False', 'blank': 'True'}),
            'username': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '30'})
        },
        'contenttypes.contenttype': {
            'Meta': {'unique_together': "(('app_label', 'model'),)", 'object_name': 'ContentType', 'db_table': "'django_content_type'"},
            'app_label': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'model': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '100'})
        },
        'market.marketplace': {
            'Meta': {'object_name': 'MarketPlace'},
            'base_domain': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '128'}),
            'charge_on_card_as': ('django.db.models.fields.CharField', [], {'default': "''", 'max_length': '255'}),
            'contact_email': ('django.db.models.fields.EmailField', [], {'default': "'contact@yourstore.com'", 'max_length': '75'}),
            'contact_phone': ('django.db.models.fields.CharField', [], {'default': "''", 'max_length': '128'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '92'}),
            'slug': ('django.db.models.fields.SlugField', [], {'unique': 'True', 'max_length': '92', 'db_index': 'True'}),
            'template_prefix': ('django.db.models.fields.SlugField', [], {'unique': 'True', 'max_length': '92', 'db_index': 'True'}),
            'title': ('django.db.models.fields.CharField', [], {'max_length': '92'})
        },
        'payments.braintreeshopsettings': {
            'Meta': {'object_name': 'BraintreeShopSettings'},
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'merchant_id': ('django.db.models.fields.CharField', [], {'max_length': '40'}),
            'private_key': ('django.db.models.fields.CharField', [], {'max_length': '40'}),
            'public_key': ('django.db.models.fields.CharField', [], {'max_length': '40'}),
            'shop': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['shops.Shop']"})
        },
        'payments.braintreetransaction': {
            'Meta': {'object_name': 'BrainTreeTransaction'},
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'sell': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['sell.Sell']"}),
            'transaction_id': ('django.db.models.fields.CharField', [], {'max_length': '20'})
        },
        'payments.googlecheckoutorder': {
            'Meta': {'object_name': 'GoogleCheckoutOrder'},
            'buyer_id': ('django.db.models.fields.CharField', [], {'max_length': '20'}),
            'financial_state': ('django.db.models.fields.CharField', [], {'max_length': '20'}),
            'fulfillment_state': ('django.db.models.fields.CharField', [], {'max_length': '20'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'order_number': ('django.db.models.fields.CharField', [], {'max_length': '20'}),
            'ready_to_ship': ('django.db.models.fields.BooleanField', [], {'default': 'False', 'blank': 'True'}),
            'sell': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['sell.Sell']"})
        },
        'payments.googlecheckoutshopsettings': {
            'Meta': {'object_name': 'GoogleCheckoutShopSettings'},
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'merchant_id': ('django.db.models.fields.CharField', [], {'max_length': '20'}),
            'merchant_key': ('django.db.models.fields.CharField', [], {'max_length': '40'}),
            'shop': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['shops.Shop']"})
        },
        'payments.manualpaymentshopsettings': {
            'Meta': {'object_name': 'ManualPaymentShopSettings'},
            'description': ('django.db.models.fields.TextField', [], {'default': "''"}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'instructions': ('django.db.models.fields.TextField', [], {}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '50'}),
            'shop': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['shops.Shop']"})
        },
        'payments.paypalshopsettings': {
            'Meta': {'object_name': 'PayPalShopSettings'},
            'email': ('django.db.models.fields.EmailField', [], {'max_length': '75'}),
            'first_name': ('django.db.models.fields.CharField', [], {'max_length': '40'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'last_name': ('django.db.models.fields.CharField', [], {'max_length': '40'}),
            'payer_id': ('django.db.models.fields.CharField', [], {'max_length': '92'}),
            'perms': ('picklefield.fields.PickledObjectField', [], {'default': '[]'}),
            'shop': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['shops.Shop']"})
        },
        'payments.paypaltoken': {
            'Meta': {'object_name': 'PayPalToken'},
            'cart': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['sell.Cart']"}),
            'confirmed': ('django.db.models.fields.BooleanField', [], {'default': 'False', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'timestamp': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'token': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '255'})
        },
        'payments.paypaltransaction': {
            'Meta': {'object_name': 'PayPalTransaction'},
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'sell': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['sell.Sell']"}),
            'transaction_id': ('django.db.models.fields.CharField', [], {'max_length': '30'})
        },
        'sell.cart': {
            'Meta': {'object_name': 'Cart'},
            'bidder': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['auth.User']"}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'shippingdata': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['sell.ShippingData']", 'unique': 'True', 'null': 'True', 'blank': 'True'}),
            'shop': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['shops.Shop']"})
        },
        'sell.sell': {
            'Meta': {'object_name': 'Sell'},
            'bidder': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['auth.User']", 'null': 'True'}),
            'cancel': ('django.db.models.fields.BooleanField', [], {'default': 'False', 'blank': 'True'}),
            'closed': ('django.db.models.fields.BooleanField', [], {'default': 'False', 'blank': 'True'}),
            'date_time': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'payment_method': ('django.db.models.fields.CharField', [], {'default': "'Manual Payment'", 'max_length': '255'}),
            'shippingdata': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['sell.ShippingData']", 'unique': 'True', 'null': 'True', 'blank': 'True'}),
            'shop': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['shops.Shop']", 'null': 'True'}),
            'total': ('django.db.models.fields.DecimalField', [], {'default': "'0'", 'max_digits': '11', 'decimal_places': '2'}),
            'total_shipping': ('django.db.models.fields.DecimalField', [], {'default': "'0'", 'max_digits': '11', 'decimal_places': '2'}),
            'total_taxes': ('django.db.models.fields.DecimalField', [], {'default': "'0'", 'max_digits': '11', 'decimal_places': '2'}),
            'total_without_taxes': ('django.db.models.fields.DecimalField', [], {'default': "'0'", 'max_digits': '11', 'decimal_places': '2'})
        },
        'sell.shippingdata': {
            'Meta': {'object_name': 'ShippingData'},
            'city': ('django.db.models.fields.CharField', [], {'max_length': '80'}),
            'country': ('django.db.models.fields.CharField', [], {'max_length': '50'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'state': ('django.db.models.fields.CharField', [], {'max_length': '80'}),
            'street_address': ('django.db.models.fields.CharField', [], {'max_length': '80'}),
            'zip': ('django.db.models.fields.CharField', [], {'max_length': '30'})
        },
        'shops.shop': {
            'Meta': {'object_name': 'Shop'},
            'active': ('django.db.models.fields.BooleanField', [], {'default': 'True', 'blank': 'True'}),
            'admin': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['auth.User']"}),
            'bids': ('django.db.models.fields.IntegerField', [], {'default': '0'}),
            'date_time': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'last_date_to_change_layout': ('django.db.models.fields.DateTimeField', [], {'null': 'True', 'blank': 'True'}),
            'last_date_to_post': ('django.db.models.fields.DateTimeField', [], {'null': 'True', 'blank': 'True'}),
            'location': ('django.db.models.fields.CharField', [], {'default': "'39.29038,-76.61219'", 'max_length': '255'}),
            'marketplace': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['market.MarketPlace']"}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '60'}),
            'views': ('django.db.models.fields.IntegerField', [], {'default': '0'})
        }
    }

    complete_apps = ['payments']

########NEW FILE########
__FILENAME__ = models
from django.db import models

from picklefield import PickledObjectField
from shops.models import Shop
from sell.models import Sell, Cart


class PayPalShopSettings(models.Model):
    shop = models.ForeignKey(Shop)
    payer_id = models.CharField(max_length=92)
    email = models.EmailField()
    first_name = models.CharField(max_length=40)
    last_name = models.CharField(max_length=40)
    perms = PickledObjectField(default=[])

    def __unicode__(self):
        return "Paypal settings: %s" % self.shop.name
    
    def subject(self):
        if self.first_name and self.last_name:
            return "%s %s <%s>" % (self.first_name, self.last_name, self.email)
        else:
            return self.email

class PayPalToken(models.Model):
    """
        Model to associate a returning customer from paypal with a given sell
    """
    cart = models.ForeignKey(Cart)
    token = models.CharField(max_length=255, unique=True) #TODO: ver que tan unique es el token de paypal
    timestamp = models.DateTimeField(auto_now_add=True)
    confirmed = models.BooleanField(default=False)
    

class GoogleCheckoutShopSettings(models.Model):
    shop = models.ForeignKey(Shop)
    merchant_id = models.CharField(max_length=20)
    merchant_key = models.CharField(max_length=40)
    
    def __unicode__(self):
        return "Google Checkout settings for <%s>" % self.shop.name

class PayPalTransaction(models.Model):
    sell = models.ForeignKey(Sell)
    transaction_id = models.CharField(max_length=30)
    
    def __unicode__(self):
        return "%s > %s" % (self.sell, self.transaction_id)
    
class GoogleCheckoutOrder(models.Model):
    sell = models.ForeignKey(Sell)
    order_number = models.CharField(max_length=20)
    buyer_id = models.CharField(max_length=20)
    financial_state = models.CharField(max_length=20)
    fulfillment_state = models.CharField(max_length=20)
    ready_to_ship = models.BooleanField(default=False)
    
    def __unicode__(self):
        return "Google Checkout Order <%s>" % self.order_number
    
    def sell_charged(self):
        self.ready_to_ship = True
        self.save()
        self.sell.payment.pay()
        
        
    def sell_shipped(self):
        """
        NEW               - The order has been received but not prepared for shipping.
        PROCESSING        - The order is being prepared for shipping.
        DELIVERED         - The seller has shipped the order.
        WILL_NOT_DELIVER  - The seller will not ship the order; this status is used for canceled orders. 
        """
        pass
        
    def sell_cancelled(self):
        pass
    
    def sell_authorized(self):
        pass
    
    
class ManualPaymentShopSettings(models.Model):
    shop = models.ForeignKey(Shop)
    name = models.CharField(max_length=50)
    description = models.TextField(default="")
    instructions = models.TextField()
    

class BraintreeShopSettings(models.Model):
    shop = models.ForeignKey(Shop)
    merchant_id = models.CharField(max_length=40)
    public_key = models.CharField(max_length=40)
    private_key = models.CharField(max_length=40)
    
    def __unicode__(self):
        return "Braintree settings for <%s>" % self.shop.name
    
class BrainTreeTransaction(models.Model):
    sell = models.ForeignKey(Sell)
    transaction_id = models.CharField(max_length=20)
    
    def __unicode__(self):
        return "%s > %s" % (self.sell, self.transaction_id)
########NEW FILE########
__FILENAME__ = shipping
import decimal, logging

from django.db import models

from shops.models import Shop
from preferences.models import ShippingItem, ShippingPrice, ShippingWeight, TaxState

class ShippingCalculator():
    
    @classmethod
    def get_charge(cls, cart):
        total_price = cart.total()
        total_weight = cart.total_weight()
        total_items = cart.total_items()
        
        charge_for_price = ShippingPrice.calculate_charge(cart.shop, total_price)
        #logging.debug("Charge for price: %s" % charge_for_price)
        charge_for_weight = ShippingWeight.calculate_charge(cart.shop, total_weight)
        #logging.debug("Charge for weight: %s" % charge_for_weight)
        charge_for_items = ShippingItem.calculate_charge(cart.shop, total_items)
        #logging.debug("Charge for items: %s" % charge_for_items)
        
        #return the largest charge of available shipping methods
        maxim = max([charge_for_items, charge_for_price, charge_for_weight])
        logging.debug("Charge for shipping that will be aplied: %s" % maxim)
        
        try:
            state = cart.shippingdata.state
            tax_rate = TaxState.objects.filter(shop=cart.shop).filter(state=state).get()
            if tax_rate.apply_tax_to_shipping:
                logging.debug("Shop %s applies a tax of %s%% to shippings to %s" % (cart.shop, tax_rate.tax, state))
                tax_for_shipping = maxim * (tax_rate.tax / 100)
                return maxim + tax_for_shipping
            
        except TaxState.DoesNotExist:
            pass
        
        logging.debug("State %s don't apply taxes to shipping for shop %s" % (state, cart.shop))
        return maxim
            
        
########NEW FILE########
__FILENAME__ = taxes
import decimal, logging

from django.db import models

from shops.models import Shop
from preferences.models import Preference, TaxState

class TaxCalculator():
    
    @classmethod
    def get_tax(cls, shop, state, city=None):
        try: 
            tax_rate = TaxState.objects.filter(shop=shop).filter(state=state).get()
            logging.debug("Shop %s have a tax rate of %s%% for state %s" % (shop, tax_rate.tax, state))
            return tax_rate.tax / 100
        except TaxState.DoesNotExist:
            logging.debug("No tax specified for state %s on shop %s" % (state, shop))
            return decimal.Decimal("0.0")
########NEW FILE########
__FILENAME__ = tests
"""
This file demonstrates two different styles of tests (one doctest and one
unittest). These will both pass when you run "manage.py test".

Replace these with more appropriate tests for your application.
"""

from django.test import TestCase

class SimpleTest(TestCase):
    def test_basic_addition(self):
        """
        Tests that 1 + 1 always equals 2.
        """
        self.failUnlessEqual(1 + 1, 2)

__test__ = {"doctest": """
Another way to test that 1 + 1 is equal to 2.

>>> 1 + 1 == 2
True
"""}


########NEW FILE########
__FILENAME__ = urls
from django.conf.urls.defaults import *

urlpatterns = patterns('',
    url(r'^success/$', 'payments.views.success', name='payments_success'),
    url(r'^cancel/$', 'payments.views.cancel', name='payments_cancel'),    
    url(r'^error/$', 'payments.views.cancel', name='payments_error'),
    (r'^paypal/', include('payments.gateways.paypal_urls')),
    (r'^google/', include('payments.gateways.googlecheckout_urls')),
    (r'^braintree/', include('payments.gateways.braintreegw_urls')),
)
########NEW FILE########
__FILENAME__ = views
from django.template import RequestContext
from django.shortcuts import render_to_response
from django.template import loader
from django.http import HttpResponse
from bidding.views import my_render

def success(request):
    return HttpResponse(my_render(request, {}, 'payment_success'))

def cancel(request):
    return HttpResponse(my_render(request, {}, 'payment_cancel'))
########NEW FILE########
__FILENAME__ = admin
from models import *
from django.contrib import admin


class EmailNotificationHistoryAdmin(admin.ModelAdmin):
    list_display = ('shop','type_notification', 'to', 'datetime')
    list_filter = ('shop','type_notification', 'datetime', 'to')

admin.site.register(Preference)
admin.site.register(ShippingWeight)
admin.site.register(ShippingPrice)
admin.site.register(ShippingItem)
admin.site.register(TaxState)
admin.site.register(DnsShop)
admin.site.register(EmailNotification)
admin.site.register(EmailNotificationHistory, EmailNotificationHistoryAdmin)
admin.site.register(ShopPolicies)



########NEW FILE########
__FILENAME__ = forms
import re, logging
from django import forms
from django.forms import ModelForm
from django.utils.translation import ugettext as _
from django.contrib.localflavor.us.forms import USStateSelect,\
    USPhoneNumberField

from models import Preference, ShippingWeight, ShippingPrice, ShippingItem, TaxState, DnsShop, EmailNotification
from preferences.models import ShopPolicies
from auth.models import User
from users.models import Profile


class GeneralPreferenceForm(ModelForm):
    email = forms.EmailField(required=False)
    phone = USPhoneNumberField(required=False)
    
    class Meta:
        model = Preference
        fields = ['name_store', 'email', 'phone']

class ProfileForm(ModelForm):
    state = forms.CharField(widget=USStateSelect)
    
    class Meta:
        model = Profile
        fields = ['street_address', 'zip', 'city', 'state', 'country', ]
    
    def clean_zip(self):
        zip = self.cleaned_data.get("zip", "")
        if zip.strip() == "": raise forms.ValidationError("Zip is a required field.")
        
        if not (re.match("[0-9]{5}(-[0-9]{4})?$", zip)): raise forms.ValidationError("Invalid Zip code. Valid formats are XXXXX or XXXXX-XXXX")   
        return zip
    
    def clean_country(self):
        country = self.cleaned_data.get("country", "")
        if country.strip() == "": raise forms.ValidationError("Country is a required field.")
        return country
    
    def clean_street_address(self):
        street = self.cleaned_data.get("street_address", "")
        if street.strip() == "": raise forms.ValidationError("Street is a required field.")
        return street
    
    def clean_city(self):
        city = self.cleaned_data.get("city", "")
        if city.strip() == "": raise forms.ValidationError("City is a required field.")
        return city

class TaxesPreferenceForm(ModelForm):
    class Meta:
        model = Preference
        fields = ['taxes_same_state_store', 'taxes_to_shipping_fees']


class TaxStateForm(ModelForm):
    #state = forms.CharField(widget=USStateSelect)
    tax = forms.DecimalField(help_text=_("Enter a state tax rate number (between 1 and 100)"))
    
    class Meta:
        model = TaxState
        exclude = ['shop']
        
    
    def __init__(self, shop, *args, ** kwargs):
        
        self.shop = shop
        super(TaxStateForm, self).__init__(*args, ** kwargs)
        
    def clean_state(self):
        state = self.cleaned_data['state']
        try:
            TaxState.objects.get(shop=self.shop, state=state)
        except TaxState.DoesNotExist:
            return state
        raise forms.ValidationError(_("A tax for state %s already exists." % state))

    def clean_tax(self):
        
        tax = self.cleaned_data['tax']
        if tax < 0:
            raise forms.ValidationError(_("A tax has to be more or equal 0%"))
        elif tax > 100:
            raise forms.ValidationError(_("A tax has to be less than 100%"))
        return tax
            
class TaxStateEditForm(ModelForm):
    
    class Meta:
        model = TaxState
        exclude = ['shop', 'state']
        
    def __init__(self, shop, *args, ** kwargs):
        
        self.shop = shop
        super(TaxStateEditForm, self).__init__(*args, ** kwargs)    
    
    def clean_tax(self):
        
        tax = self.cleaned_data['tax']
        if tax < 0:
            raise forms.ValidationError(_("A tax has to be more or equal 0%"))
        elif tax > 100:
            raise forms.ValidationError(_("A tax has to be less than 100%"))
        return tax

class AuctionsPreferenceForm(ModelForm):
    class Meta:
        model = Preference
        fields = ['allow_sessions', 'allow_open_auctions', 'default_days', 'open_auto_extend', 'session_auto_extend']
    

class DnsShopForm(ModelForm):
    class Meta:
        model = DnsShop
        exclude = ['shop']
        
    def clean_dns(self):
        dns = self.cleaned_data['dns']
        try:
            DnsShop.objects.get(dns=dns)
        except DnsShop.DoesNotExist:
            return dns
        raise forms.ValidationError(_("A shop with that dns already exists."))        
        
        
class ShippingWeightForm(ModelForm):
    class Meta:
        model = ShippingWeight
        exclude = ['shop']


class ShippingPriceForm(ModelForm):
    class Meta:
        model = ShippingPrice
        exclude = ['shop']


class ShippingItemForm(ModelForm):
    class Meta:
        model = ShippingItem
        exclude = ['shop']
        

class EmailNotificationForm(ModelForm):
    class Meta:
        model = EmailNotification
        fields = ['subject', 'body']

        
class ShopPoliciesForm(ModelForm):
    class Meta:
        model = ShopPolicies
        fields = ['refund_policy', 'privacy_policy', 'terms_of_service']


class MarketingForm(ModelForm):
    class Meta:
        model = Preference
        fields = ['google_analytics_account_number']
        
    def clean_google_analytics_account_number(self):
        google_analytics_account_number = self.cleaned_data['google_analytics_account_number']
        if re.match(r"^\w{2}\-\d{4,8}\-\d$", google_analytics_account_number) is None:
            raise forms.ValidationError('Invalid analitycs account number')
        return google_analytics_account_number
        
        

class UsernameChangeForm(forms.ModelForm):
    username = forms.RegexField(label=_("Username"), max_length=30, regex=r'^\w+$',
        help_text = _("Required. 30 characters or fewer. Alphanumeric characters only (letters, digits and underscores)."),
        error_message = _("This value must contain only letters, numbers and underscores."))
    
    class Meta:
        model = User
        fields = ['username']
########NEW FILE########
__FILENAME__ = 0001_initial
# encoding: utf-8
import datetime
from south.db import db
from south.v2 import SchemaMigration
from django.db import models

class Migration(SchemaMigration):

    def forwards(self, orm):
        
        # Adding model 'Preference'
        db.create_table('preferences_preference', (
            ('id', self.gf('django.db.models.fields.AutoField')(primary_key=True)),
            ('shop', self.gf('django.db.models.fields.related.ForeignKey')(to=orm['shops.Shop'])),
            ('name_store', self.gf('django.db.models.fields.CharField')(default='Name of Store', max_length=60)),
            ('email', self.gf('django.db.models.fields.EmailField')(default='Email address when signed up', max_length=75)),
            ('street', self.gf('django.db.models.fields.CharField')(default='Street', max_length=60)),
            ('zip', self.gf('django.db.models.fields.CharField')(default='Zip', max_length=30)),
            ('city', self.gf('django.db.models.fields.CharField')(default='City', max_length=60)),
            ('state', self.gf('django.db.models.fields.CharField')(default='State', max_length=60)),
            ('country', self.gf('django.db.models.fields.CharField')(default='USA', max_length=60)),
            ('phone', self.gf('django.db.models.fields.CharField')(default='Phone', max_length=60)),
            ('store_password', self.gf('django.db.models.fields.BooleanField')(default=False, blank=True)),
            ('password', self.gf('django.db.models.fields.CharField')(max_length=60, blank=True)),
            ('taxes_same_state_store', self.gf('django.db.models.fields.BooleanField')(default=False, blank=True)),
            ('taxes_to_shipping_fees', self.gf('django.db.models.fields.BooleanField')(default=False, blank=True)),
            ('checkout_currency', self.gf('django.db.models.fields.CharField')(default='USD', max_length=60)),
            ('allow_sessions', self.gf('django.db.models.fields.BooleanField')(default=False, blank=True)),
            ('allow_open_auctions', self.gf('django.db.models.fields.BooleanField')(default=False, blank=True)),
            ('default_days', self.gf('django.db.models.fields.CharField')(default=5, max_length=1)),
            ('open_auto_extend', self.gf('django.db.models.fields.BooleanField')(default=True, blank=True)),
            ('session_auto_extend', self.gf('django.db.models.fields.BooleanField')(default=True, blank=True)),
            ('google_analytics_account_number', self.gf('django.db.models.fields.CharField')(default='', max_length=30)),
        ))
        db.send_create_signal('preferences', ['Preference'])

        # Adding model 'ShippingWeight'
        db.create_table('preferences_shippingweight', (
            ('id', self.gf('django.db.models.fields.AutoField')(primary_key=True)),
            ('shop', self.gf('django.db.models.fields.related.ForeignKey')(to=orm['shops.Shop'])),
            ('name', self.gf('django.db.models.fields.CharField')(max_length=60)),
            ('price', self.gf('django.db.models.fields.DecimalField')(max_digits=11, decimal_places=2)),
            ('from_weight', self.gf('django.db.models.fields.DecimalField')(max_digits=11, decimal_places=2)),
            ('to_weight', self.gf('django.db.models.fields.DecimalField')(max_digits=11, decimal_places=2)),
        ))
        db.send_create_signal('preferences', ['ShippingWeight'])

        # Adding model 'ShippingPrice'
        db.create_table('preferences_shippingprice', (
            ('id', self.gf('django.db.models.fields.AutoField')(primary_key=True)),
            ('shop', self.gf('django.db.models.fields.related.ForeignKey')(to=orm['shops.Shop'])),
            ('name', self.gf('django.db.models.fields.CharField')(max_length=60)),
            ('price', self.gf('django.db.models.fields.DecimalField')(max_digits=11, decimal_places=2)),
            ('from_price', self.gf('django.db.models.fields.DecimalField')(max_digits=11, decimal_places=2)),
            ('to_price', self.gf('django.db.models.fields.DecimalField')(max_digits=11, decimal_places=2)),
        ))
        db.send_create_signal('preferences', ['ShippingPrice'])

        # Adding model 'ShippingItem'
        db.create_table('preferences_shippingitem', (
            ('id', self.gf('django.db.models.fields.AutoField')(primary_key=True)),
            ('shop', self.gf('django.db.models.fields.related.ForeignKey')(to=orm['shops.Shop'])),
            ('name', self.gf('django.db.models.fields.CharField')(max_length=60)),
            ('price', self.gf('django.db.models.fields.DecimalField')(max_digits=11, decimal_places=2)),
            ('from_item', self.gf('django.db.models.fields.IntegerField')()),
            ('to_item', self.gf('django.db.models.fields.IntegerField')()),
        ))
        db.send_create_signal('preferences', ['ShippingItem'])

        # Adding model 'TaxState'
        db.create_table('preferences_taxstate', (
            ('id', self.gf('django.db.models.fields.AutoField')(primary_key=True)),
            ('shop', self.gf('django.db.models.fields.related.ForeignKey')(to=orm['shops.Shop'])),
            ('state', self.gf('django.contrib.localflavor.us.models.USStateField')(max_length=2)),
            ('tax', self.gf('django.db.models.fields.DecimalField')(max_digits=11, decimal_places=2)),
            ('apply_tax_to_shipping', self.gf('django.db.models.fields.BooleanField')(default=False, blank=True)),
        ))
        db.send_create_signal('preferences', ['TaxState'])

        # Adding model 'DnsShop'
        db.create_table('preferences_dnsshop', (
            ('id', self.gf('django.db.models.fields.AutoField')(primary_key=True)),
            ('shop', self.gf('django.db.models.fields.related.ForeignKey')(to=orm['shops.Shop'])),
            ('dns', self.gf('django.db.models.fields.CharField')(max_length=255)),
        ))
        db.send_create_signal('preferences', ['DnsShop'])

        # Adding model 'EmailNotification'
        db.create_table('preferences_emailnotification', (
            ('id', self.gf('django.db.models.fields.AutoField')(primary_key=True)),
            ('shop', self.gf('django.db.models.fields.related.ForeignKey')(to=orm['shops.Shop'])),
            ('type_notification', self.gf('django.db.models.fields.CharField')(max_length=3)),
            ('subject', self.gf('django.db.models.fields.CharField')(max_length=60)),
            ('body', self.gf('django.db.models.fields.TextField')()),
        ))
        db.send_create_signal('preferences', ['EmailNotification'])

        # Adding model 'ShopPolicies'
        db.create_table('preferences_shoppolicies', (
            ('id', self.gf('django.db.models.fields.AutoField')(primary_key=True)),
            ('shop', self.gf('django.db.models.fields.related.ForeignKey')(to=orm['shops.Shop'])),
            ('refund_policy', self.gf('django.db.models.fields.TextField')()),
            ('privacy_policy', self.gf('django.db.models.fields.TextField')()),
            ('terms_of_service', self.gf('django.db.models.fields.TextField')()),
        ))
        db.send_create_signal('preferences', ['ShopPolicies'])


    def backwards(self, orm):
        
        # Deleting model 'Preference'
        db.delete_table('preferences_preference')

        # Deleting model 'ShippingWeight'
        db.delete_table('preferences_shippingweight')

        # Deleting model 'ShippingPrice'
        db.delete_table('preferences_shippingprice')

        # Deleting model 'ShippingItem'
        db.delete_table('preferences_shippingitem')

        # Deleting model 'TaxState'
        db.delete_table('preferences_taxstate')

        # Deleting model 'DnsShop'
        db.delete_table('preferences_dnsshop')

        # Deleting model 'EmailNotification'
        db.delete_table('preferences_emailnotification')

        # Deleting model 'ShopPolicies'
        db.delete_table('preferences_shoppolicies')


    models = {
        'auth.group': {
            'Meta': {'object_name': 'Group'},
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '80'}),
            'permissions': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['auth.Permission']", 'symmetrical': 'False', 'blank': 'True'})
        },
        'auth.permission': {
            'Meta': {'unique_together': "(('content_type', 'codename'),)", 'object_name': 'Permission'},
            'codename': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'content_type': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['contenttypes.ContentType']"}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '50'})
        },
        'auth.user': {
            'Meta': {'object_name': 'User'},
            'date_joined': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
            'email': ('django.db.models.fields.EmailField', [], {'max_length': '75'}),
            'first_name': ('django.db.models.fields.CharField', [], {'max_length': '30', 'blank': 'True'}),
            'groups': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['auth.Group']", 'symmetrical': 'False', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'is_active': ('django.db.models.fields.BooleanField', [], {'default': 'True', 'blank': 'True'}),
            'is_staff': ('django.db.models.fields.BooleanField', [], {'default': 'False', 'blank': 'True'}),
            'is_superuser': ('django.db.models.fields.BooleanField', [], {'default': 'False', 'blank': 'True'}),
            'last_login': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
            'last_name': ('django.db.models.fields.CharField', [], {'max_length': '30', 'blank': 'True'}),
            'password': ('django.db.models.fields.CharField', [], {'max_length': '128'}),
            'user_permissions': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['auth.Permission']", 'symmetrical': 'False', 'blank': 'True'}),
            'username': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '32'})
        },
        'contenttypes.contenttype': {
            'Meta': {'unique_together': "(('app_label', 'model'),)", 'object_name': 'ContentType', 'db_table': "'django_content_type'"},
            'app_label': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'model': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '100'})
        },
        'market.marketplace': {
            'Meta': {'object_name': 'MarketPlace'},
            'base_domain': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '128'}),
            'charge_on_card_as': ('django.db.models.fields.CharField', [], {'default': "''", 'unique': 'True', 'max_length': '255'}),
            'contact_email': ('django.db.models.fields.EmailField', [], {'default': "'contact@yourstore.com'", 'max_length': '75'}),
            'contact_phone': ('django.db.models.fields.CharField', [], {'default': "''", 'max_length': '128'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '92'}),
            'privacy_policy': ('django.db.models.fields.TextField', [], {'default': "''"}),
            'slug': ('django.db.models.fields.SlugField', [], {'unique': 'True', 'max_length': '92', 'db_index': 'True'}),
            'template_prefix': ('django.db.models.fields.SlugField', [], {'unique': 'True', 'max_length': '92', 'db_index': 'True'}),
            'title': ('django.db.models.fields.CharField', [], {'max_length': '92'})
        },
        'preferences.dnsshop': {
            'Meta': {'object_name': 'DnsShop'},
            'dns': ('django.db.models.fields.CharField', [], {'max_length': '255'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'shop': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['shops.Shop']"})
        },
        'preferences.emailnotification': {
            'Meta': {'object_name': 'EmailNotification'},
            'body': ('django.db.models.fields.TextField', [], {}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'shop': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['shops.Shop']"}),
            'subject': ('django.db.models.fields.CharField', [], {'max_length': '60'}),
            'type_notification': ('django.db.models.fields.CharField', [], {'max_length': '3'})
        },
        'preferences.preference': {
            'Meta': {'object_name': 'Preference'},
            'allow_open_auctions': ('django.db.models.fields.BooleanField', [], {'default': 'False', 'blank': 'True'}),
            'allow_sessions': ('django.db.models.fields.BooleanField', [], {'default': 'False', 'blank': 'True'}),
            'checkout_currency': ('django.db.models.fields.CharField', [], {'default': "'USD'", 'max_length': '60'}),
            'city': ('django.db.models.fields.CharField', [], {'default': "'City'", 'max_length': '60'}),
            'country': ('django.db.models.fields.CharField', [], {'default': "'USA'", 'max_length': '60'}),
            'default_days': ('django.db.models.fields.CharField', [], {'default': '5', 'max_length': '1'}),
            'email': ('django.db.models.fields.EmailField', [], {'default': "'Email address when signed up'", 'max_length': '75'}),
            'google_analytics_account_number': ('django.db.models.fields.CharField', [], {'default': "''", 'max_length': '30'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'name_store': ('django.db.models.fields.CharField', [], {'default': "'Name of Store'", 'max_length': '60'}),
            'open_auto_extend': ('django.db.models.fields.BooleanField', [], {'default': 'True', 'blank': 'True'}),
            'password': ('django.db.models.fields.CharField', [], {'max_length': '60', 'blank': 'True'}),
            'phone': ('django.db.models.fields.CharField', [], {'default': "'Phone'", 'max_length': '60'}),
            'session_auto_extend': ('django.db.models.fields.BooleanField', [], {'default': 'True', 'blank': 'True'}),
            'shop': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['shops.Shop']"}),
            'state': ('django.db.models.fields.CharField', [], {'default': "'State'", 'max_length': '60'}),
            'store_password': ('django.db.models.fields.BooleanField', [], {'default': 'False', 'blank': 'True'}),
            'street': ('django.db.models.fields.CharField', [], {'default': "'Street'", 'max_length': '60'}),
            'taxes_same_state_store': ('django.db.models.fields.BooleanField', [], {'default': 'False', 'blank': 'True'}),
            'taxes_to_shipping_fees': ('django.db.models.fields.BooleanField', [], {'default': 'False', 'blank': 'True'}),
            'zip': ('django.db.models.fields.CharField', [], {'default': "'Zip'", 'max_length': '30'})
        },
        'preferences.shippingitem': {
            'Meta': {'object_name': 'ShippingItem'},
            'from_item': ('django.db.models.fields.IntegerField', [], {}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '60'}),
            'price': ('django.db.models.fields.DecimalField', [], {'max_digits': '11', 'decimal_places': '2'}),
            'shop': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['shops.Shop']"}),
            'to_item': ('django.db.models.fields.IntegerField', [], {})
        },
        'preferences.shippingprice': {
            'Meta': {'object_name': 'ShippingPrice'},
            'from_price': ('django.db.models.fields.DecimalField', [], {'max_digits': '11', 'decimal_places': '2'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '60'}),
            'price': ('django.db.models.fields.DecimalField', [], {'max_digits': '11', 'decimal_places': '2'}),
            'shop': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['shops.Shop']"}),
            'to_price': ('django.db.models.fields.DecimalField', [], {'max_digits': '11', 'decimal_places': '2'})
        },
        'preferences.shippingweight': {
            'Meta': {'object_name': 'ShippingWeight'},
            'from_weight': ('django.db.models.fields.DecimalField', [], {'max_digits': '11', 'decimal_places': '2'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '60'}),
            'price': ('django.db.models.fields.DecimalField', [], {'max_digits': '11', 'decimal_places': '2'}),
            'shop': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['shops.Shop']"}),
            'to_weight': ('django.db.models.fields.DecimalField', [], {'max_digits': '11', 'decimal_places': '2'})
        },
        'preferences.shoppolicies': {
            'Meta': {'object_name': 'ShopPolicies'},
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'privacy_policy': ('django.db.models.fields.TextField', [], {}),
            'refund_policy': ('django.db.models.fields.TextField', [], {}),
            'shop': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['shops.Shop']"}),
            'terms_of_service': ('django.db.models.fields.TextField', [], {})
        },
        'preferences.taxstate': {
            'Meta': {'object_name': 'TaxState'},
            'apply_tax_to_shipping': ('django.db.models.fields.BooleanField', [], {'default': 'False', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'shop': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['shops.Shop']"}),
            'state': ('django.contrib.localflavor.us.models.USStateField', [], {'max_length': '2'}),
            'tax': ('django.db.models.fields.DecimalField', [], {'max_digits': '11', 'decimal_places': '2'})
        },
        'shops.shop': {
            'Meta': {'object_name': 'Shop'},
            'admin': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['auth.User']"}),
            'bids': ('django.db.models.fields.IntegerField', [], {'default': '0'}),
            'date_time': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'location': ('django.db.models.fields.CharField', [], {'default': "'39.29038,-76.61219'", 'max_length': '255'}),
            'marketplace': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['market.MarketPlace']"}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '60'}),
            'views': ('django.db.models.fields.IntegerField', [], {'default': '0'})
        }
    }

    complete_apps = ['preferences']

########NEW FILE########
__FILENAME__ = 0002_auto__del_field_preference_store_password__del_field_preference_passwo
# encoding: utf-8
import datetime
from south.db import db
from south.v2 import SchemaMigration
from django.db import models

class Migration(SchemaMigration):

    def forwards(self, orm):
        
        # Deleting field 'Preference.store_password'
        db.delete_column('preferences_preference', 'store_password')

        # Deleting field 'Preference.password'
        db.delete_column('preferences_preference', 'password')


    def backwards(self, orm):
        
        # Adding field 'Preference.store_password'
        db.add_column('preferences_preference', 'store_password', self.gf('django.db.models.fields.BooleanField')(default=False, blank=True), keep_default=False)

        # Adding field 'Preference.password'
        db.add_column('preferences_preference', 'password', self.gf('django.db.models.fields.CharField')(default='', max_length=60, blank=True), keep_default=False)


    models = {
        'auth.group': {
            'Meta': {'object_name': 'Group'},
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '80'}),
            'permissions': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['auth.Permission']", 'symmetrical': 'False', 'blank': 'True'})
        },
        'auth.permission': {
            'Meta': {'unique_together': "(('content_type', 'codename'),)", 'object_name': 'Permission'},
            'codename': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'content_type': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['contenttypes.ContentType']"}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '50'})
        },
        'auth.user': {
            'Meta': {'object_name': 'User'},
            'date_joined': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
            'email': ('django.db.models.fields.EmailField', [], {'max_length': '75'}),
            'first_name': ('django.db.models.fields.CharField', [], {'max_length': '30', 'blank': 'True'}),
            'groups': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['auth.Group']", 'symmetrical': 'False', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'is_active': ('django.db.models.fields.BooleanField', [], {'default': 'True', 'blank': 'True'}),
            'is_staff': ('django.db.models.fields.BooleanField', [], {'default': 'False', 'blank': 'True'}),
            'is_superuser': ('django.db.models.fields.BooleanField', [], {'default': 'False', 'blank': 'True'}),
            'last_login': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
            'last_name': ('django.db.models.fields.CharField', [], {'max_length': '30', 'blank': 'True'}),
            'password': ('django.db.models.fields.CharField', [], {'max_length': '128'}),
            'user_permissions': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['auth.Permission']", 'symmetrical': 'False', 'blank': 'True'}),
            'username': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '32'})
        },
        'contenttypes.contenttype': {
            'Meta': {'unique_together': "(('app_label', 'model'),)", 'object_name': 'ContentType', 'db_table': "'django_content_type'"},
            'app_label': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'model': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '100'})
        },
        'market.marketplace': {
            'Meta': {'object_name': 'MarketPlace'},
            'base_domain': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '128'}),
            'charge_on_card_as': ('django.db.models.fields.CharField', [], {'default': "''", 'unique': 'True', 'max_length': '255'}),
            'contact_email': ('django.db.models.fields.EmailField', [], {'default': "'contact@yourstore.com'", 'max_length': '75'}),
            'contact_phone': ('django.db.models.fields.CharField', [], {'default': "''", 'max_length': '128'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '92'}),
            'privacy_policy': ('django.db.models.fields.TextField', [], {'default': "''"}),
            'slug': ('django.db.models.fields.SlugField', [], {'unique': 'True', 'max_length': '92', 'db_index': 'True'}),
            'template_prefix': ('django.db.models.fields.SlugField', [], {'unique': 'True', 'max_length': '92', 'db_index': 'True'}),
            'title': ('django.db.models.fields.CharField', [], {'max_length': '92'})
        },
        'preferences.dnsshop': {
            'Meta': {'object_name': 'DnsShop'},
            'dns': ('django.db.models.fields.CharField', [], {'max_length': '255'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'shop': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['shops.Shop']"})
        },
        'preferences.emailnotification': {
            'Meta': {'object_name': 'EmailNotification'},
            'body': ('django.db.models.fields.TextField', [], {}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'shop': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['shops.Shop']"}),
            'subject': ('django.db.models.fields.CharField', [], {'max_length': '60'}),
            'type_notification': ('django.db.models.fields.CharField', [], {'max_length': '3'})
        },
        'preferences.preference': {
            'Meta': {'object_name': 'Preference'},
            'allow_open_auctions': ('django.db.models.fields.BooleanField', [], {'default': 'False', 'blank': 'True'}),
            'allow_sessions': ('django.db.models.fields.BooleanField', [], {'default': 'False', 'blank': 'True'}),
            'checkout_currency': ('django.db.models.fields.CharField', [], {'default': "'USD'", 'max_length': '60'}),
            'city': ('django.db.models.fields.CharField', [], {'default': "'City'", 'max_length': '60'}),
            'country': ('django.db.models.fields.CharField', [], {'default': "'USA'", 'max_length': '60'}),
            'default_days': ('django.db.models.fields.CharField', [], {'default': '5', 'max_length': '1'}),
            'email': ('django.db.models.fields.EmailField', [], {'default': "'Email address when signed up'", 'max_length': '75'}),
            'google_analytics_account_number': ('django.db.models.fields.CharField', [], {'default': "''", 'max_length': '30'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'name_store': ('django.db.models.fields.CharField', [], {'default': "'Name of Store'", 'max_length': '60'}),
            'open_auto_extend': ('django.db.models.fields.BooleanField', [], {'default': 'True', 'blank': 'True'}),
            'phone': ('django.db.models.fields.CharField', [], {'default': "'Phone'", 'max_length': '60'}),
            'session_auto_extend': ('django.db.models.fields.BooleanField', [], {'default': 'True', 'blank': 'True'}),
            'shop': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['shops.Shop']"}),
            'state': ('django.db.models.fields.CharField', [], {'default': "'State'", 'max_length': '60'}),
            'street': ('django.db.models.fields.CharField', [], {'default': "'Street'", 'max_length': '60'}),
            'taxes_same_state_store': ('django.db.models.fields.BooleanField', [], {'default': 'False', 'blank': 'True'}),
            'taxes_to_shipping_fees': ('django.db.models.fields.BooleanField', [], {'default': 'False', 'blank': 'True'}),
            'zip': ('django.db.models.fields.CharField', [], {'default': "'Zip'", 'max_length': '30'})
        },
        'preferences.shippingitem': {
            'Meta': {'object_name': 'ShippingItem'},
            'from_item': ('django.db.models.fields.IntegerField', [], {}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '60'}),
            'price': ('django.db.models.fields.DecimalField', [], {'max_digits': '11', 'decimal_places': '2'}),
            'shop': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['shops.Shop']"}),
            'to_item': ('django.db.models.fields.IntegerField', [], {})
        },
        'preferences.shippingprice': {
            'Meta': {'object_name': 'ShippingPrice'},
            'from_price': ('django.db.models.fields.DecimalField', [], {'max_digits': '11', 'decimal_places': '2'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '60'}),
            'price': ('django.db.models.fields.DecimalField', [], {'max_digits': '11', 'decimal_places': '2'}),
            'shop': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['shops.Shop']"}),
            'to_price': ('django.db.models.fields.DecimalField', [], {'max_digits': '11', 'decimal_places': '2'})
        },
        'preferences.shippingweight': {
            'Meta': {'object_name': 'ShippingWeight'},
            'from_weight': ('django.db.models.fields.DecimalField', [], {'max_digits': '11', 'decimal_places': '2'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '60'}),
            'price': ('django.db.models.fields.DecimalField', [], {'max_digits': '11', 'decimal_places': '2'}),
            'shop': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['shops.Shop']"}),
            'to_weight': ('django.db.models.fields.DecimalField', [], {'max_digits': '11', 'decimal_places': '2'})
        },
        'preferences.shoppolicies': {
            'Meta': {'object_name': 'ShopPolicies'},
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'privacy_policy': ('django.db.models.fields.TextField', [], {}),
            'refund_policy': ('django.db.models.fields.TextField', [], {}),
            'shop': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['shops.Shop']"}),
            'terms_of_service': ('django.db.models.fields.TextField', [], {})
        },
        'preferences.taxstate': {
            'Meta': {'object_name': 'TaxState'},
            'apply_tax_to_shipping': ('django.db.models.fields.BooleanField', [], {'default': 'False', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'shop': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['shops.Shop']"}),
            'state': ('django.contrib.localflavor.us.models.USStateField', [], {'max_length': '2'}),
            'tax': ('django.db.models.fields.DecimalField', [], {'max_digits': '11', 'decimal_places': '2'})
        },
        'shops.shop': {
            'Meta': {'object_name': 'Shop'},
            'admin': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['auth.User']"}),
            'bids': ('django.db.models.fields.IntegerField', [], {'default': '0'}),
            'date_time': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'location': ('django.db.models.fields.CharField', [], {'default': "'39.29038,-76.61219'", 'max_length': '255'}),
            'marketplace': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['market.MarketPlace']"}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '60'}),
            'views': ('django.db.models.fields.IntegerField', [], {'default': '0'})
        }
    }

    complete_apps = ['preferences']

########NEW FILE########
__FILENAME__ = 0003_auto__del_field_preference_city__del_field_preference_street__del_fiel
# encoding: utf-8
import datetime
from south.db import db
from south.v2 import SchemaMigration
from django.db import models

class Migration(SchemaMigration):

    def forwards(self, orm):
        
        # Deleting field 'Preference.city'
        db.delete_column('preferences_preference', 'city')

        # Deleting field 'Preference.street'
        db.delete_column('preferences_preference', 'street')

        # Deleting field 'Preference.zip'
        db.delete_column('preferences_preference', 'zip')

        # Deleting field 'Preference.country'
        db.delete_column('preferences_preference', 'country')

        # Deleting field 'Preference.state'
        db.delete_column('preferences_preference', 'state')


    def backwards(self, orm):
        
        # Adding field 'Preference.city'
        db.add_column('preferences_preference', 'city', self.gf('django.db.models.fields.CharField')(default='City', max_length=60), keep_default=False)

        # Adding field 'Preference.street'
        db.add_column('preferences_preference', 'street', self.gf('django.db.models.fields.CharField')(default='Street', max_length=60), keep_default=False)

        # Adding field 'Preference.zip'
        db.add_column('preferences_preference', 'zip', self.gf('django.db.models.fields.CharField')(default='Zip', max_length=30), keep_default=False)

        # Adding field 'Preference.country'
        db.add_column('preferences_preference', 'country', self.gf('django.db.models.fields.CharField')(default='USA', max_length=60), keep_default=False)

        # Adding field 'Preference.state'
        db.add_column('preferences_preference', 'state', self.gf('django.db.models.fields.CharField')(default='State', max_length=60), keep_default=False)


    models = {
        'auth.group': {
            'Meta': {'object_name': 'Group'},
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '80'}),
            'permissions': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['auth.Permission']", 'symmetrical': 'False', 'blank': 'True'})
        },
        'auth.permission': {
            'Meta': {'unique_together': "(('content_type', 'codename'),)", 'object_name': 'Permission'},
            'codename': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'content_type': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['contenttypes.ContentType']"}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '50'})
        },
        'auth.user': {
            'Meta': {'object_name': 'User'},
            'date_joined': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
            'email': ('django.db.models.fields.EmailField', [], {'max_length': '75'}),
            'first_name': ('django.db.models.fields.CharField', [], {'max_length': '30', 'blank': 'True'}),
            'groups': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['auth.Group']", 'symmetrical': 'False', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'is_active': ('django.db.models.fields.BooleanField', [], {'default': 'True', 'blank': 'True'}),
            'is_staff': ('django.db.models.fields.BooleanField', [], {'default': 'False', 'blank': 'True'}),
            'is_superuser': ('django.db.models.fields.BooleanField', [], {'default': 'False', 'blank': 'True'}),
            'last_login': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
            'last_name': ('django.db.models.fields.CharField', [], {'max_length': '30', 'blank': 'True'}),
            'password': ('django.db.models.fields.CharField', [], {'max_length': '128'}),
            'user_permissions': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['auth.Permission']", 'symmetrical': 'False', 'blank': 'True'}),
            'username': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '32'})
        },
        'contenttypes.contenttype': {
            'Meta': {'unique_together': "(('app_label', 'model'),)", 'object_name': 'ContentType', 'db_table': "'django_content_type'"},
            'app_label': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'model': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '100'})
        },
        'market.marketplace': {
            'Meta': {'object_name': 'MarketPlace'},
            'base_domain': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '128'}),
            'charge_on_card_as': ('django.db.models.fields.CharField', [], {'default': "''", 'unique': 'True', 'max_length': '255'}),
            'contact_email': ('django.db.models.fields.EmailField', [], {'default': "'contact@yourstore.com'", 'max_length': '75'}),
            'contact_phone': ('django.db.models.fields.CharField', [], {'default': "''", 'max_length': '128'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '92'}),
            'privacy_policy': ('django.db.models.fields.TextField', [], {'default': "''"}),
            'slug': ('django.db.models.fields.SlugField', [], {'unique': 'True', 'max_length': '92', 'db_index': 'True'}),
            'template_prefix': ('django.db.models.fields.SlugField', [], {'unique': 'True', 'max_length': '92', 'db_index': 'True'}),
            'title': ('django.db.models.fields.CharField', [], {'max_length': '92'})
        },
        'preferences.dnsshop': {
            'Meta': {'object_name': 'DnsShop'},
            'dns': ('django.db.models.fields.CharField', [], {'max_length': '255'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'shop': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['shops.Shop']"})
        },
        'preferences.emailnotification': {
            'Meta': {'object_name': 'EmailNotification'},
            'body': ('django.db.models.fields.TextField', [], {}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'shop': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['shops.Shop']"}),
            'subject': ('django.db.models.fields.CharField', [], {'max_length': '60'}),
            'type_notification': ('django.db.models.fields.CharField', [], {'max_length': '3'})
        },
        'preferences.preference': {
            'Meta': {'object_name': 'Preference'},
            'allow_open_auctions': ('django.db.models.fields.BooleanField', [], {'default': 'False', 'blank': 'True'}),
            'allow_sessions': ('django.db.models.fields.BooleanField', [], {'default': 'False', 'blank': 'True'}),
            'checkout_currency': ('django.db.models.fields.CharField', [], {'default': "'USD'", 'max_length': '60'}),
            'default_days': ('django.db.models.fields.CharField', [], {'default': '5', 'max_length': '1'}),
            'email': ('django.db.models.fields.EmailField', [], {'default': "'Email address when signed up'", 'max_length': '75'}),
            'google_analytics_account_number': ('django.db.models.fields.CharField', [], {'default': "''", 'max_length': '30'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'name_store': ('django.db.models.fields.CharField', [], {'default': "'Name of Store'", 'max_length': '60'}),
            'open_auto_extend': ('django.db.models.fields.BooleanField', [], {'default': 'True', 'blank': 'True'}),
            'phone': ('django.db.models.fields.CharField', [], {'default': "'Phone'", 'max_length': '60'}),
            'session_auto_extend': ('django.db.models.fields.BooleanField', [], {'default': 'True', 'blank': 'True'}),
            'shop': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['shops.Shop']"}),
            'taxes_same_state_store': ('django.db.models.fields.BooleanField', [], {'default': 'False', 'blank': 'True'}),
            'taxes_to_shipping_fees': ('django.db.models.fields.BooleanField', [], {'default': 'False', 'blank': 'True'})
        },
        'preferences.shippingitem': {
            'Meta': {'object_name': 'ShippingItem'},
            'from_item': ('django.db.models.fields.IntegerField', [], {}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '60'}),
            'price': ('django.db.models.fields.DecimalField', [], {'max_digits': '11', 'decimal_places': '2'}),
            'shop': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['shops.Shop']"}),
            'to_item': ('django.db.models.fields.IntegerField', [], {})
        },
        'preferences.shippingprice': {
            'Meta': {'object_name': 'ShippingPrice'},
            'from_price': ('django.db.models.fields.DecimalField', [], {'max_digits': '11', 'decimal_places': '2'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '60'}),
            'price': ('django.db.models.fields.DecimalField', [], {'max_digits': '11', 'decimal_places': '2'}),
            'shop': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['shops.Shop']"}),
            'to_price': ('django.db.models.fields.DecimalField', [], {'max_digits': '11', 'decimal_places': '2'})
        },
        'preferences.shippingweight': {
            'Meta': {'object_name': 'ShippingWeight'},
            'from_weight': ('django.db.models.fields.DecimalField', [], {'max_digits': '11', 'decimal_places': '2'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '60'}),
            'price': ('django.db.models.fields.DecimalField', [], {'max_digits': '11', 'decimal_places': '2'}),
            'shop': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['shops.Shop']"}),
            'to_weight': ('django.db.models.fields.DecimalField', [], {'max_digits': '11', 'decimal_places': '2'})
        },
        'preferences.shoppolicies': {
            'Meta': {'object_name': 'ShopPolicies'},
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'privacy_policy': ('django.db.models.fields.TextField', [], {}),
            'refund_policy': ('django.db.models.fields.TextField', [], {}),
            'shop': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['shops.Shop']"}),
            'terms_of_service': ('django.db.models.fields.TextField', [], {})
        },
        'preferences.taxstate': {
            'Meta': {'object_name': 'TaxState'},
            'apply_tax_to_shipping': ('django.db.models.fields.BooleanField', [], {'default': 'False', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'shop': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['shops.Shop']"}),
            'state': ('django.contrib.localflavor.us.models.USStateField', [], {'max_length': '2'}),
            'tax': ('django.db.models.fields.DecimalField', [], {'max_digits': '11', 'decimal_places': '2'})
        },
        'shops.shop': {
            'Meta': {'object_name': 'Shop'},
            'admin': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['auth.User']"}),
            'bids': ('django.db.models.fields.IntegerField', [], {'default': '0'}),
            'date_time': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'location': ('django.db.models.fields.CharField', [], {'default': "'39.29038,-76.61219'", 'max_length': '255'}),
            'marketplace': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['market.MarketPlace']"}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '60'}),
            'views': ('django.db.models.fields.IntegerField', [], {'default': '0'})
        }
    }

    complete_apps = ['preferences']

########NEW FILE########
__FILENAME__ = 0004_auto__add_field_dnsshop_default
# encoding: utf-8
import datetime
from south.db import db
from south.v2 import SchemaMigration
from django.db import models

class Migration(SchemaMigration):

    def forwards(self, orm):
        
        # Adding field 'DnsShop.default'
        db.add_column('preferences_dnsshop', 'default', self.gf('django.db.models.fields.BooleanField')(default=False, blank=True), keep_default=False)


    def backwards(self, orm):
        
        # Deleting field 'DnsShop.default'
        db.delete_column('preferences_dnsshop', 'default')


    models = {
        'auth.group': {
            'Meta': {'object_name': 'Group'},
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '80'}),
            'permissions': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['auth.Permission']", 'symmetrical': 'False', 'blank': 'True'})
        },
        'auth.permission': {
            'Meta': {'unique_together': "(('content_type', 'codename'),)", 'object_name': 'Permission'},
            'codename': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'content_type': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['contenttypes.ContentType']"}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '50'})
        },
        'auth.user': {
            'Meta': {'object_name': 'User'},
            'date_joined': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
            'email': ('django.db.models.fields.EmailField', [], {'max_length': '75'}),
            'first_name': ('django.db.models.fields.CharField', [], {'max_length': '30', 'blank': 'True'}),
            'groups': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['auth.Group']", 'symmetrical': 'False', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'is_active': ('django.db.models.fields.BooleanField', [], {'default': 'True', 'blank': 'True'}),
            'is_staff': ('django.db.models.fields.BooleanField', [], {'default': 'False', 'blank': 'True'}),
            'is_superuser': ('django.db.models.fields.BooleanField', [], {'default': 'False', 'blank': 'True'}),
            'last_login': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
            'last_name': ('django.db.models.fields.CharField', [], {'max_length': '30', 'blank': 'True'}),
            'password': ('django.db.models.fields.CharField', [], {'max_length': '128'}),
            'user_permissions': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['auth.Permission']", 'symmetrical': 'False', 'blank': 'True'}),
            'username': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '32'})
        },
        'contenttypes.contenttype': {
            'Meta': {'unique_together': "(('app_label', 'model'),)", 'object_name': 'ContentType', 'db_table': "'django_content_type'"},
            'app_label': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'model': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '100'})
        },
        'market.marketplace': {
            'Meta': {'object_name': 'MarketPlace'},
            'base_domain': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '128'}),
            'charge_on_card_as': ('django.db.models.fields.CharField', [], {'default': "''", 'unique': 'True', 'max_length': '255'}),
            'contact_email': ('django.db.models.fields.EmailField', [], {'default': "'contact@yourstore.com'", 'max_length': '75'}),
            'contact_phone': ('django.db.models.fields.CharField', [], {'default': "''", 'max_length': '128'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '92'}),
            'slug': ('django.db.models.fields.SlugField', [], {'unique': 'True', 'max_length': '92', 'db_index': 'True'}),
            'template_prefix': ('django.db.models.fields.SlugField', [], {'unique': 'True', 'max_length': '92', 'db_index': 'True'}),
            'title': ('django.db.models.fields.CharField', [], {'max_length': '92'})
        },
        'preferences.dnsshop': {
            'Meta': {'object_name': 'DnsShop'},
            'default': ('django.db.models.fields.BooleanField', [], {'default': 'False', 'blank': 'True'}),
            'dns': ('django.db.models.fields.CharField', [], {'max_length': '255'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'shop': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['shops.Shop']"})
        },
        'preferences.emailnotification': {
            'Meta': {'object_name': 'EmailNotification'},
            'body': ('django.db.models.fields.TextField', [], {}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'shop': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['shops.Shop']"}),
            'subject': ('django.db.models.fields.CharField', [], {'max_length': '60'}),
            'type_notification': ('django.db.models.fields.CharField', [], {'max_length': '3'})
        },
        'preferences.preference': {
            'Meta': {'object_name': 'Preference'},
            'allow_open_auctions': ('django.db.models.fields.BooleanField', [], {'default': 'False', 'blank': 'True'}),
            'allow_sessions': ('django.db.models.fields.BooleanField', [], {'default': 'False', 'blank': 'True'}),
            'checkout_currency': ('django.db.models.fields.CharField', [], {'default': "'USD'", 'max_length': '60'}),
            'default_days': ('django.db.models.fields.CharField', [], {'default': '5', 'max_length': '1'}),
            'email': ('django.db.models.fields.EmailField', [], {'max_length': '75'}),
            'google_analytics_account_number': ('django.db.models.fields.CharField', [], {'default': "''", 'max_length': '30'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'name_store': ('django.db.models.fields.CharField', [], {'max_length': '60'}),
            'open_auto_extend': ('django.db.models.fields.BooleanField', [], {'default': 'True', 'blank': 'True'}),
            'phone': ('django.db.models.fields.CharField', [], {'max_length': '60'}),
            'session_auto_extend': ('django.db.models.fields.BooleanField', [], {'default': 'True', 'blank': 'True'}),
            'shop': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['shops.Shop']"}),
            'taxes_same_state_store': ('django.db.models.fields.BooleanField', [], {'default': 'False', 'blank': 'True'}),
            'taxes_to_shipping_fees': ('django.db.models.fields.BooleanField', [], {'default': 'False', 'blank': 'True'})
        },
        'preferences.shippingitem': {
            'Meta': {'object_name': 'ShippingItem'},
            'from_item': ('django.db.models.fields.IntegerField', [], {}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '60'}),
            'price': ('django.db.models.fields.DecimalField', [], {'max_digits': '11', 'decimal_places': '2'}),
            'shop': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['shops.Shop']"}),
            'to_item': ('django.db.models.fields.IntegerField', [], {})
        },
        'preferences.shippingprice': {
            'Meta': {'object_name': 'ShippingPrice'},
            'from_price': ('django.db.models.fields.DecimalField', [], {'max_digits': '11', 'decimal_places': '2'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '60'}),
            'price': ('django.db.models.fields.DecimalField', [], {'max_digits': '11', 'decimal_places': '2'}),
            'shop': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['shops.Shop']"}),
            'to_price': ('django.db.models.fields.DecimalField', [], {'max_digits': '11', 'decimal_places': '2'})
        },
        'preferences.shippingweight': {
            'Meta': {'object_name': 'ShippingWeight'},
            'from_weight': ('django.db.models.fields.DecimalField', [], {'max_digits': '11', 'decimal_places': '2'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '60'}),
            'price': ('django.db.models.fields.DecimalField', [], {'max_digits': '11', 'decimal_places': '2'}),
            'shop': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['shops.Shop']"}),
            'to_weight': ('django.db.models.fields.DecimalField', [], {'max_digits': '11', 'decimal_places': '2'})
        },
        'preferences.shoppolicies': {
            'Meta': {'object_name': 'ShopPolicies'},
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'privacy_policy': ('django.db.models.fields.TextField', [], {}),
            'refund_policy': ('django.db.models.fields.TextField', [], {}),
            'shop': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['shops.Shop']"}),
            'terms_of_service': ('django.db.models.fields.TextField', [], {})
        },
        'preferences.taxstate': {
            'Meta': {'object_name': 'TaxState'},
            'apply_tax_to_shipping': ('django.db.models.fields.BooleanField', [], {'default': 'False', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'shop': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['shops.Shop']"}),
            'state': ('django.contrib.localflavor.us.models.USStateField', [], {'max_length': '2'}),
            'tax': ('django.db.models.fields.DecimalField', [], {'max_digits': '11', 'decimal_places': '2'})
        },
        'shops.shop': {
            'Meta': {'object_name': 'Shop'},
            'admin': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['auth.User']"}),
            'bids': ('django.db.models.fields.IntegerField', [], {'default': '0'}),
            'date_time': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'location': ('django.db.models.fields.CharField', [], {'default': "'39.29038,-76.61219'", 'max_length': '255'}),
            'marketplace': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['market.MarketPlace']"}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '60'}),
            'views': ('django.db.models.fields.IntegerField', [], {'default': '0'})
        }
    }

    complete_apps = ['preferences']

########NEW FILE########
__FILENAME__ = 0005_auto__add_emailnotificationhistory
# encoding: utf-8
import datetime
from south.db import db
from south.v2 import SchemaMigration
from django.db import models

class Migration(SchemaMigration):

    def forwards(self, orm):
        
        # Adding model 'EmailNotificationHistory'
        db.create_table('preferences_emailnotificationhistory', (
            ('id', self.gf('django.db.models.fields.AutoField')(primary_key=True)),
            ('shop', self.gf('django.db.models.fields.related.ForeignKey')(to=orm['shops.Shop'])),
            ('type_notification', self.gf('django.db.models.fields.CharField')(max_length=3)),
            ('datetime', self.gf('django.db.models.fields.DateTimeField')()),
            ('to', self.gf('django.db.models.fields.CharField')(max_length=60)),
            ('subject', self.gf('django.db.models.fields.CharField')(max_length=60)),
            ('body', self.gf('django.db.models.fields.TextField')()),
        ))
        db.send_create_signal('preferences', ['EmailNotificationHistory'])


    def backwards(self, orm):
        
        # Deleting model 'EmailNotificationHistory'
        db.delete_table('preferences_emailnotificationhistory')


    models = {
        'auth.group': {
            'Meta': {'object_name': 'Group'},
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '80'}),
            'permissions': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['auth.Permission']", 'symmetrical': 'False', 'blank': 'True'})
        },
        'auth.permission': {
            'Meta': {'unique_together': "(('content_type', 'codename'),)", 'object_name': 'Permission'},
            'codename': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'content_type': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['contenttypes.ContentType']"}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '50'})
        },
        'auth.user': {
            'Meta': {'object_name': 'User'},
            'date_joined': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
            'email': ('django.db.models.fields.EmailField', [], {'max_length': '75', 'blank': 'True'}),
            'first_name': ('django.db.models.fields.CharField', [], {'max_length': '30', 'blank': 'True'}),
            'groups': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['auth.Group']", 'symmetrical': 'False', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'is_active': ('django.db.models.fields.BooleanField', [], {'default': 'True', 'blank': 'True'}),
            'is_staff': ('django.db.models.fields.BooleanField', [], {'default': 'False', 'blank': 'True'}),
            'is_superuser': ('django.db.models.fields.BooleanField', [], {'default': 'False', 'blank': 'True'}),
            'last_login': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
            'last_name': ('django.db.models.fields.CharField', [], {'max_length': '30', 'blank': 'True'}),
            'password': ('django.db.models.fields.CharField', [], {'max_length': '128'}),
            'user_permissions': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['auth.Permission']", 'symmetrical': 'False', 'blank': 'True'}),
            'username': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '30'})
        },
        'contenttypes.contenttype': {
            'Meta': {'unique_together': "(('app_label', 'model'),)", 'object_name': 'ContentType', 'db_table': "'django_content_type'"},
            'app_label': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'model': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '100'})
        },
        'market.marketplace': {
            'Meta': {'object_name': 'MarketPlace'},
            'base_domain': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '128'}),
            'charge_on_card_as': ('django.db.models.fields.CharField', [], {'default': "''", 'max_length': '255'}),
            'contact_email': ('django.db.models.fields.EmailField', [], {'default': "'contact@yourstore.com'", 'max_length': '75'}),
            'contact_phone': ('django.db.models.fields.CharField', [], {'default': "''", 'max_length': '128'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '92'}),
            'slug': ('django.db.models.fields.SlugField', [], {'unique': 'True', 'max_length': '92', 'db_index': 'True'}),
            'template_prefix': ('django.db.models.fields.SlugField', [], {'unique': 'True', 'max_length': '92', 'db_index': 'True'}),
            'title': ('django.db.models.fields.CharField', [], {'max_length': '92'})
        },
        'preferences.dnsshop': {
            'Meta': {'object_name': 'DnsShop'},
            'default': ('django.db.models.fields.BooleanField', [], {'default': 'False', 'blank': 'True'}),
            'dns': ('django.db.models.fields.CharField', [], {'max_length': '255'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'shop': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['shops.Shop']"})
        },
        'preferences.emailnotification': {
            'Meta': {'object_name': 'EmailNotification'},
            'body': ('django.db.models.fields.TextField', [], {}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'shop': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['shops.Shop']"}),
            'subject': ('django.db.models.fields.CharField', [], {'max_length': '60'}),
            'type_notification': ('django.db.models.fields.CharField', [], {'max_length': '3'})
        },
        'preferences.emailnotificationhistory': {
            'Meta': {'object_name': 'EmailNotificationHistory'},
            'body': ('django.db.models.fields.TextField', [], {}),
            'datetime': ('django.db.models.fields.DateTimeField', [], {}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'shop': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['shops.Shop']"}),
            'subject': ('django.db.models.fields.CharField', [], {'max_length': '60'}),
            'to': ('django.db.models.fields.CharField', [], {'max_length': '60'}),
            'type_notification': ('django.db.models.fields.CharField', [], {'max_length': '3'})
        },
        'preferences.preference': {
            'Meta': {'object_name': 'Preference'},
            'allow_open_auctions': ('django.db.models.fields.BooleanField', [], {'default': 'False', 'blank': 'True'}),
            'allow_sessions': ('django.db.models.fields.BooleanField', [], {'default': 'False', 'blank': 'True'}),
            'checkout_currency': ('django.db.models.fields.CharField', [], {'default': "'USD'", 'max_length': '60'}),
            'default_days': ('django.db.models.fields.CharField', [], {'default': '5', 'max_length': '1'}),
            'email': ('django.db.models.fields.EmailField', [], {'max_length': '75'}),
            'google_analytics_account_number': ('django.db.models.fields.CharField', [], {'default': "''", 'max_length': '30'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'name_store': ('django.db.models.fields.CharField', [], {'max_length': '60'}),
            'open_auto_extend': ('django.db.models.fields.BooleanField', [], {'default': 'True', 'blank': 'True'}),
            'phone': ('django.db.models.fields.CharField', [], {'max_length': '60'}),
            'session_auto_extend': ('django.db.models.fields.BooleanField', [], {'default': 'True', 'blank': 'True'}),
            'shop': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['shops.Shop']"}),
            'taxes_same_state_store': ('django.db.models.fields.BooleanField', [], {'default': 'False', 'blank': 'True'}),
            'taxes_to_shipping_fees': ('django.db.models.fields.BooleanField', [], {'default': 'False', 'blank': 'True'})
        },
        'preferences.shippingitem': {
            'Meta': {'object_name': 'ShippingItem'},
            'from_item': ('django.db.models.fields.IntegerField', [], {}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '60'}),
            'price': ('django.db.models.fields.DecimalField', [], {'max_digits': '11', 'decimal_places': '2'}),
            'shop': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['shops.Shop']"}),
            'to_item': ('django.db.models.fields.IntegerField', [], {})
        },
        'preferences.shippingprice': {
            'Meta': {'object_name': 'ShippingPrice'},
            'from_price': ('django.db.models.fields.DecimalField', [], {'max_digits': '11', 'decimal_places': '2'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '60'}),
            'price': ('django.db.models.fields.DecimalField', [], {'max_digits': '11', 'decimal_places': '2'}),
            'shop': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['shops.Shop']"}),
            'to_price': ('django.db.models.fields.DecimalField', [], {'max_digits': '11', 'decimal_places': '2'})
        },
        'preferences.shippingweight': {
            'Meta': {'object_name': 'ShippingWeight'},
            'from_weight': ('django.db.models.fields.DecimalField', [], {'max_digits': '11', 'decimal_places': '2'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '60'}),
            'price': ('django.db.models.fields.DecimalField', [], {'max_digits': '11', 'decimal_places': '2'}),
            'shop': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['shops.Shop']"}),
            'to_weight': ('django.db.models.fields.DecimalField', [], {'max_digits': '11', 'decimal_places': '2'})
        },
        'preferences.shoppolicies': {
            'Meta': {'object_name': 'ShopPolicies'},
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'privacy_policy': ('django.db.models.fields.TextField', [], {}),
            'refund_policy': ('django.db.models.fields.TextField', [], {}),
            'shop': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['shops.Shop']"}),
            'terms_of_service': ('django.db.models.fields.TextField', [], {})
        },
        'preferences.taxstate': {
            'Meta': {'object_name': 'TaxState'},
            'apply_tax_to_shipping': ('django.db.models.fields.BooleanField', [], {'default': 'False', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'shop': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['shops.Shop']"}),
            'state': ('django.contrib.localflavor.us.models.USStateField', [], {'max_length': '2'}),
            'tax': ('django.db.models.fields.DecimalField', [], {'max_digits': '11', 'decimal_places': '2'})
        },
        'shops.shop': {
            'Meta': {'object_name': 'Shop'},
            'active': ('django.db.models.fields.BooleanField', [], {'default': 'True', 'blank': 'True'}),
            'admin': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['auth.User']"}),
            'bids': ('django.db.models.fields.IntegerField', [], {'default': '0'}),
            'date_time': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'last_date_to_change_layout': ('django.db.models.fields.DateTimeField', [], {'null': 'True', 'blank': 'True'}),
            'last_date_to_post': ('django.db.models.fields.DateTimeField', [], {'null': 'True', 'blank': 'True'}),
            'location': ('django.db.models.fields.CharField', [], {'default': "'39.29038,-76.61219'", 'max_length': '255'}),
            'marketplace': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['market.MarketPlace']"}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '60'}),
            'views': ('django.db.models.fields.IntegerField', [], {'default': '0'})
        }
    }

    complete_apps = ['preferences']

########NEW FILE########
__FILENAME__ = 0006_auto__chg_field_shoppolicies_privacy_policy__chg_field_shoppolicies_re
# encoding: utf-8
import datetime
from south.db import db
from south.v2 import SchemaMigration
from django.db import models

class Migration(SchemaMigration):

    def forwards(self, orm):
        
        # Changing field 'ShopPolicies.privacy_policy'
        db.alter_column('preferences_shoppolicies', 'privacy_policy', self.gf('django.db.models.fields.TextField')(null=True, blank=True))

        # Changing field 'ShopPolicies.refund_policy'
        db.alter_column('preferences_shoppolicies', 'refund_policy', self.gf('django.db.models.fields.TextField')(null=True, blank=True))

        # Changing field 'ShopPolicies.terms_of_service'
        db.alter_column('preferences_shoppolicies', 'terms_of_service', self.gf('django.db.models.fields.TextField')(null=True, blank=True))


    def backwards(self, orm):
        
        # Changing field 'ShopPolicies.privacy_policy'
        db.alter_column('preferences_shoppolicies', 'privacy_policy', self.gf('django.db.models.fields.TextField')())

        # Changing field 'ShopPolicies.refund_policy'
        db.alter_column('preferences_shoppolicies', 'refund_policy', self.gf('django.db.models.fields.TextField')())

        # Changing field 'ShopPolicies.terms_of_service'
        db.alter_column('preferences_shoppolicies', 'terms_of_service', self.gf('django.db.models.fields.TextField')())


    models = {
        'auth.group': {
            'Meta': {'object_name': 'Group'},
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '80'}),
            'permissions': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['auth.Permission']", 'symmetrical': 'False', 'blank': 'True'})
        },
        'auth.permission': {
            'Meta': {'unique_together': "(('content_type', 'codename'),)", 'object_name': 'Permission'},
            'codename': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'content_type': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['contenttypes.ContentType']"}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '50'})
        },
        'auth.user': {
            'Meta': {'object_name': 'User'},
            'date_joined': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
            'email': ('django.db.models.fields.EmailField', [], {'max_length': '75', 'blank': 'True'}),
            'first_name': ('django.db.models.fields.CharField', [], {'max_length': '30', 'blank': 'True'}),
            'groups': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['auth.Group']", 'symmetrical': 'False', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'is_active': ('django.db.models.fields.BooleanField', [], {'default': 'True', 'blank': 'True'}),
            'is_staff': ('django.db.models.fields.BooleanField', [], {'default': 'False', 'blank': 'True'}),
            'is_superuser': ('django.db.models.fields.BooleanField', [], {'default': 'False', 'blank': 'True'}),
            'last_login': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
            'last_name': ('django.db.models.fields.CharField', [], {'max_length': '30', 'blank': 'True'}),
            'password': ('django.db.models.fields.CharField', [], {'max_length': '128'}),
            'user_permissions': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['auth.Permission']", 'symmetrical': 'False', 'blank': 'True'}),
            'username': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '30'})
        },
        'contenttypes.contenttype': {
            'Meta': {'unique_together': "(('app_label', 'model'),)", 'object_name': 'ContentType', 'db_table': "'django_content_type'"},
            'app_label': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'model': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '100'})
        },
        'market.marketplace': {
            'Meta': {'object_name': 'MarketPlace'},
            'base_domain': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '128'}),
            'charge_on_card_as': ('django.db.models.fields.CharField', [], {'default': "''", 'max_length': '255'}),
            'contact_email': ('django.db.models.fields.EmailField', [], {'default': "'contact@yourstore.com'", 'max_length': '75'}),
            'contact_phone': ('django.db.models.fields.CharField', [], {'default': "''", 'max_length': '128'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '92'}),
            'slug': ('django.db.models.fields.SlugField', [], {'unique': 'True', 'max_length': '92', 'db_index': 'True'}),
            'template_prefix': ('django.db.models.fields.SlugField', [], {'unique': 'True', 'max_length': '92', 'db_index': 'True'}),
            'title': ('django.db.models.fields.CharField', [], {'max_length': '92'})
        },
        'preferences.dnsshop': {
            'Meta': {'object_name': 'DnsShop'},
            'default': ('django.db.models.fields.BooleanField', [], {'default': 'False', 'blank': 'True'}),
            'dns': ('django.db.models.fields.CharField', [], {'max_length': '255'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'shop': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['shops.Shop']"})
        },
        'preferences.emailnotification': {
            'Meta': {'object_name': 'EmailNotification'},
            'body': ('django.db.models.fields.TextField', [], {}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'shop': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['shops.Shop']"}),
            'subject': ('django.db.models.fields.CharField', [], {'max_length': '60'}),
            'type_notification': ('django.db.models.fields.CharField', [], {'max_length': '3'})
        },
        'preferences.emailnotificationhistory': {
            'Meta': {'object_name': 'EmailNotificationHistory'},
            'body': ('django.db.models.fields.TextField', [], {}),
            'datetime': ('django.db.models.fields.DateTimeField', [], {}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'shop': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['shops.Shop']"}),
            'subject': ('django.db.models.fields.CharField', [], {'max_length': '60'}),
            'to': ('django.db.models.fields.CharField', [], {'max_length': '60'}),
            'type_notification': ('django.db.models.fields.CharField', [], {'max_length': '3'})
        },
        'preferences.preference': {
            'Meta': {'object_name': 'Preference'},
            'allow_open_auctions': ('django.db.models.fields.BooleanField', [], {'default': 'False', 'blank': 'True'}),
            'allow_sessions': ('django.db.models.fields.BooleanField', [], {'default': 'False', 'blank': 'True'}),
            'checkout_currency': ('django.db.models.fields.CharField', [], {'default': "'USD'", 'max_length': '60'}),
            'default_days': ('django.db.models.fields.CharField', [], {'default': '5', 'max_length': '1'}),
            'email': ('django.db.models.fields.EmailField', [], {'max_length': '75'}),
            'google_analytics_account_number': ('django.db.models.fields.CharField', [], {'default': "''", 'max_length': '30'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'name_store': ('django.db.models.fields.CharField', [], {'max_length': '60'}),
            'open_auto_extend': ('django.db.models.fields.BooleanField', [], {'default': 'True', 'blank': 'True'}),
            'phone': ('django.db.models.fields.CharField', [], {'max_length': '60'}),
            'session_auto_extend': ('django.db.models.fields.BooleanField', [], {'default': 'True', 'blank': 'True'}),
            'shop': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['shops.Shop']"}),
            'taxes_same_state_store': ('django.db.models.fields.BooleanField', [], {'default': 'False', 'blank': 'True'}),
            'taxes_to_shipping_fees': ('django.db.models.fields.BooleanField', [], {'default': 'False', 'blank': 'True'})
        },
        'preferences.shippingitem': {
            'Meta': {'object_name': 'ShippingItem'},
            'from_item': ('django.db.models.fields.IntegerField', [], {}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '60'}),
            'price': ('django.db.models.fields.DecimalField', [], {'max_digits': '11', 'decimal_places': '2'}),
            'shop': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['shops.Shop']"}),
            'to_item': ('django.db.models.fields.IntegerField', [], {})
        },
        'preferences.shippingprice': {
            'Meta': {'object_name': 'ShippingPrice'},
            'from_price': ('django.db.models.fields.DecimalField', [], {'max_digits': '11', 'decimal_places': '2'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '60'}),
            'price': ('django.db.models.fields.DecimalField', [], {'max_digits': '11', 'decimal_places': '2'}),
            'shop': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['shops.Shop']"}),
            'to_price': ('django.db.models.fields.DecimalField', [], {'max_digits': '11', 'decimal_places': '2'})
        },
        'preferences.shippingweight': {
            'Meta': {'object_name': 'ShippingWeight'},
            'from_weight': ('django.db.models.fields.DecimalField', [], {'max_digits': '11', 'decimal_places': '2'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '60'}),
            'price': ('django.db.models.fields.DecimalField', [], {'max_digits': '11', 'decimal_places': '2'}),
            'shop': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['shops.Shop']"}),
            'to_weight': ('django.db.models.fields.DecimalField', [], {'max_digits': '11', 'decimal_places': '2'})
        },
        'preferences.shoppolicies': {
            'Meta': {'object_name': 'ShopPolicies'},
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'privacy_policy': ('django.db.models.fields.TextField', [], {'null': 'True', 'blank': 'True'}),
            'refund_policy': ('django.db.models.fields.TextField', [], {'null': 'True', 'blank': 'True'}),
            'shop': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['shops.Shop']"}),
            'terms_of_service': ('django.db.models.fields.TextField', [], {'null': 'True', 'blank': 'True'})
        },
        'preferences.taxstate': {
            'Meta': {'object_name': 'TaxState'},
            'apply_tax_to_shipping': ('django.db.models.fields.BooleanField', [], {'default': 'False', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'shop': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['shops.Shop']"}),
            'state': ('django.contrib.localflavor.us.models.USStateField', [], {'max_length': '2'}),
            'tax': ('django.db.models.fields.DecimalField', [], {'max_digits': '11', 'decimal_places': '2'})
        },
        'shops.shop': {
            'Meta': {'object_name': 'Shop'},
            'active': ('django.db.models.fields.BooleanField', [], {'default': 'True', 'blank': 'True'}),
            'admin': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['auth.User']"}),
            'bids': ('django.db.models.fields.IntegerField', [], {'default': '0'}),
            'date_time': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'last_date_to_change_layout': ('django.db.models.fields.DateTimeField', [], {'null': 'True', 'blank': 'True'}),
            'last_date_to_post': ('django.db.models.fields.DateTimeField', [], {'null': 'True', 'blank': 'True'}),
            'location': ('django.db.models.fields.CharField', [], {'default': "'39.29038,-76.61219'", 'max_length': '255'}),
            'marketplace': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['market.MarketPlace']"}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '60'}),
            'views': ('django.db.models.fields.IntegerField', [], {'default': '0'})
        }
    }

    complete_apps = ['preferences']

########NEW FILE########
__FILENAME__ = models
import decimal

from django.db import models
from django.utils.translation import ugettext_lazy as _
from django.contrib.localflavor.us.models import USStateField
from django.template import Context, Template
import datetime

from shops.models import Shop
from for_sale.models import Item

DAYS = [
        ('1','1'),
        ('2','2'),
        ('3','3'),
        ('4','4'),
        ('5','5'),
        ('6','6'),
        ('7','7'),
        ] 

    
class Preference(models.Model):
    shop = models.ForeignKey(Shop)
    name_store = models.CharField(max_length=60, help_text="The Name of your Store")
    email = models.EmailField(help_text="Email address when signed up")
    phone = models.CharField(max_length=60)
    taxes_same_state_store = models.BooleanField() 
    taxes_to_shipping_fees = models.BooleanField()
    checkout_currency = models.CharField(max_length=60, default = "USD") 
    allow_sessions = models.BooleanField()
    allow_open_auctions = models.BooleanField()
    default_days = models.CharField(max_length=1, choices=DAYS, default=5)
    open_auto_extend = models.BooleanField(default = True)
    session_auto_extend = models.BooleanField(default = True)
    google_analytics_account_number = models.CharField(max_length=30, default = "")
   
    @classmethod
    def get_preference(cls, shop):
        try:
            preference = Preference.objects.filter(shop=shop).get()
        except:
            preference = Preference(shop=shop)
            preference.save()
        return preference

    def __str__(self):
        return "%s <%s> Preferences" % (self.shop, self.shop.default_dns)

class ShippingWeight(models.Model):
    shop = models.ForeignKey(Shop)
    name = models.CharField(max_length=60)
    price = models.DecimalField(max_digits=11, decimal_places=2)
    from_weight = models.DecimalField(max_digits=11, decimal_places=2)
    to_weight = models.DecimalField(max_digits=11, decimal_places=2)
    
    @classmethod
    def calculate_charge(cls, shop, total_weight):
        options = ShippingWeight.objects.filter(shop=shop)
        for option in options:
            if option.match(total_weight):
                return option.price
            #logging.debug("Option %s not watch and not will be aplied" % option)
        return decimal.Decimal(0)
    
    def match(self, weight):
        return (weight >= self.from_weight and weight <= self.to_weight)

    def __str__(self):
        return "%s <%s-%s> cost: %s" % (self.shop, self.from_weight, self.to_weight, self.price)
    
class ShippingPrice(models.Model):
    shop = models.ForeignKey(Shop)
    name = models.CharField(max_length=60)
    price = models.DecimalField(max_digits=11, decimal_places=2)
    from_price = models.DecimalField(max_digits=11, decimal_places=2)
    to_price = models.DecimalField(max_digits=11, decimal_places=2)
    
    @classmethod
    def calculate_charge(cls, shop, total_price):
        options = ShippingPrice.objects.filter(shop=shop)
        for option in options:
            if option.match(total_price):
                return option.price
            #logging.debug("Option %s not watch and not will be aplied" % option)
        return decimal.Decimal(0)
    
    def match(self, price):
        return (price >= self.from_price and price <= self.to_price)
    
    def __str__(self):
        return "%s <%s-%s> cost: %s" % (self.shop, self.from_price, self.to_price, self.price)
    
class ShippingItem(models.Model):
    shop = models.ForeignKey(Shop)
    name = models.CharField(max_length=60)
    price = models.DecimalField(max_digits=11, decimal_places=2)
    from_item = models.IntegerField()
    to_item = models.IntegerField()
    
    def __str__(self):
        return "%s <%s-%s> cost: %s)" % (self.shop, self.from_item, self.to_item, self.price)
    
    @classmethod
    def calculate_charge(cls, shop, total_items):
        options = ShippingItem.objects.filter(shop=shop)
        for option in options:
            if option.match(total_items):
                return option.price
            #logging.debug("Option %s not watch and not will be aplied" % option)
        return decimal.Decimal(0)
    
    def match(self, items):
        return (items >= self.from_item and items <= self.to_item)

    
class TaxState(models.Model):
    shop = models.ForeignKey(Shop)
    state = USStateField()
    tax = models.DecimalField(max_digits=11, decimal_places=2)
    apply_tax_to_shipping = models.BooleanField(default=False)

    def __str__(self):
        return "%s > %s: $%s (apply_on_ship=%s)" % (self.shop, self.state, self.tax, self.apply_tax_to_shipping)
    
class DnsShop(models.Model):
    shop = models.ForeignKey(Shop)
    dns = models.CharField(max_length=255)
    default = models.BooleanField(default=False)
    
    
TYPE_NOTIFICATION=[
                   ('OC',_('Order confirmation')),
                   ('AWC',_('Auction Won Confirmation')),
                   ('NON',_('New Order Notification')),
                   ('CB',_('Contact Buyer')),
                   ('BCN',_('Buyer Cart Notification')),
#                   ('SU',_('Shipping Update')),
#                   ('SC',_('Shipping Confirmation')),
                   ]

class EmailNotification(models.Model):
    shop = models.ForeignKey(Shop)
    type_notification = models.CharField(max_length=3, choices=TYPE_NOTIFICATION)
    subject = models.CharField(max_length=60)
    body = models.TextField()

    def __unicode__(self):
        return u'Email Notification: %s' % self.type_notification
    
    def render_dummy(self, template_string):
        "Return a dummy Email Notification body"
        
        return Template(template_string).render(Context({
            'buyer_name': 'Jhon B',
            'buyer_email': 'jhonb@mail.com',
            'gateway': 'aPaymentGateway',
            'shop': 'Test Shop',
            'shipping_street_address': '',
            'shipping_city': 'Washington',
            'shipping_state': 'District of Columbia',
            'shipping_zip': '1234',
            'shipping_country': 'USA',
            'sell_date': datetime.datetime.now(),
            'sell_total': '185',
            'sell_without_taxes': '160',
            'sell_total_taxes': '25',
            'sell_total_shipping': '50',
            'bidder_name': 'Paul C',
            'bid_amount': '75',
            'bid_time': 'Tue Aug 25 17:35:00 2012',
            'session_title': 'Untitled Session',
            'session_description': 'Untitled Session descrpition',
            'session_start': 'Sat Jan 28 14:16:07 2012',
            'session_end': 'Mon Jan 30 15:22:29 2012',
            'lot_title': 'Example Lot',
            'lot_description': 'Description of Example Lot',
            'items': [ {'title': '1942 Tombac 5c MS63 PCGS', 'qty': '2', 'price': '65.35', 'total': '130.70','id': '54', 'link': 'http://'},
                       {'title': '1950-d Semi-Key VF', 'qty': '1', 'price': '13.40', 'total': '13.40', 'id': '18', 'link': 'http://'},
                       {'title': '1942 Tombac 5c MS63 PCGS', 'qty': '4', 'price': '12.75', 'total': '51.00', 'id': '45', 'link': 'http://'} ],
        }))

class ShopPolicies(models.Model):
    shop = models.ForeignKey(Shop)
    refund_policy = models.TextField(null=True, blank=True)
    privacy_policy = models.TextField(null=True, blank=True)
    terms_of_service = models.TextField(null=True, blank=True)
    def __unicode__(self):
        return "%s shop Policies" % self.shop

class EmailNotificationHistory(models.Model):
    shop = models.ForeignKey(Shop)
    type_notification = models.CharField(max_length=3, choices=TYPE_NOTIFICATION)
    datetime = models.DateTimeField()
    to = models.CharField(max_length=60)
    subject = models.CharField(max_length=60)
    body = models.TextField()
    
    def __unicode__(self):
        return u'Email Notification: %s to: %s' %(self.type_notification, self.to)

########NEW FILE########
__FILENAME__ = urls
from django.conf.urls.defaults import *

urlpatterns = patterns('',
    url(r'^general/$', 'preferences.views.preferences_general', name='preferences_general'),
    url(r'^taxes/$', 'preferences.views.preferences_taxes', name='preferences_taxes'),
    url(r'^taxes/add/$', 'preferences.views.add_state_tax', name='preferences_add_state_tax'),
    url(r'^taxes/delete_tax/([\d]+)/$', 'preferences.views.delete_tax', name='preferences_delete_tax'),
    url(r'^taxes/edit_tax/([\d]+)/$', 'preferences.views.edit_tax', name='preferences_edit_tax'),
    
    url(r'^payment/overview/$', 'preferences.views.preferences_payments', name='preferences_payments'),
    url(r'^payment/paypal/$', 'preferences.views.preferences_payment_paypal', name='preferences_payment_paypal'),
    url(r'^payment/google_checkout/$', 'preferences.views.preferences_payment_google_checkout', name='preferences_payment_google_checkout'),
    url(r'^payment/credit_cards/$', 'preferences.views.preferences_payment_credit_cards', name='preferences_payment_credit_cards'),
    url(r'^payment/manual/$', 'preferences.views.preferences_payment_manual', name='preferences_payment_manual'),
    
    url(r'^payment/paypal/setpermissions/$', 'preferences.views.payment_paypal_setpermissions',  name='preferences_payment_paypal_setpermissions'),
    url(r'^payment/paypal/disable/$', 'preferences.views.payment_paypal_disable', name='preferences_payment_paypal_disable'),
    url(r'^payment/paypal/return/(?P<action>(agree|cancel|logout))/$', 'preferences.views.payment_paypal_return', name='preferences_payment_paypal_return'),
    url(r'^auctions/$', 'preferences.views.preferences_auctions', name='preferences_auctions'),
    url(r'^shipping/$', 'preferences.views.preferences_shipping', name='preferences_shipping'),
    url(r'^email/$', 'preferences.views.preferences_email', name='preferences_email'),
    url(r'^dns/$', 'preferences.views.preferences_dns', name='preferences_dns'),
    url(r'^policies/$', 'preferences.views.preferences_policies', name='preferences_policies'),

    url(r'^delete_shipping_weight/([\d]+)/$', 'preferences.views.delete_shipping_weight', name='delete_shipping_weight'),
    url(r'^delete_shipping_price/([\d]+)/$', 'preferences.views.delete_shipping_price', name='delete_shipping_price'),
    url(r'^delete_shipping_item/([\d]+)/$', 'preferences.views.delete_shipping_item', name='delete_shipping_item'),

    url(r'^delete_dns/([\d]+)/$', 'preferences.views.delete_dns', name='delete_dns'),
    url(r'^default_dns/([\d]+)/$', 'preferences.views.set_default_dns', name='set_default_dns'),
    url(r'^edit_dns/([\d]+)/$', 'preferences.views.edit_dns', name='edit_dns'),
    
    url(r'^ajax_edit_notification/$', 'preferences.views.ajax_edit_notification', name='ajax_edit_notification'),
    url(r'^send_template/$', 'preferences.views.send_template', name='send_template'),
    
    url(r'^save_manual_payment/$', 'preferences.views.save_manual_payment', name='save_manual_payment'),
    url(r'^delete_manual_payment/(?P<payment_id>[\d]+)/$', 'preferences.views.delete_manual_payment', name='delete_manual_payment'),
    url(r'^edit_manual_payment/(?P<payment_id>[\d]+)/$', 'preferences.views.edit_manual_payment', name='edit_manual_payment'),
    
    url(r'^save_googlecheckout_settings/$', 'preferences.views.save_googlecheckout_settings', name='save_googlecheckout_settings'),
    url(r'^delete_googlecheckout_settings/(?P<setting_id>[\d]+)/$', 'preferences.views.delete_googlecheckout_settings', name='delete_googlecheckout_settings'),
    
    url(r'^save_braintree_settings/$', 'preferences.views.save_braintree_settings', name='save_braintree_settings'),
    url(r'^delete_braintree_settings/(?P<setting_id>[\d]+)/$', 'preferences.views.delete_braintree_settings', name='delete_braintree_settings'),
    
)
########NEW FILE########
__FILENAME__ = views
"""
    Edit shop preferences
"""
import datetime
from preferences.forms import MarketingForm, TaxStateEditForm
import logging

from django.conf import settings
from django.core.urlresolvers import reverse
from django.http import HttpResponseRedirect, HttpResponse, Http404, HttpResponseForbidden
from django.shortcuts import render_to_response, get_object_or_404
from django.template import RequestContext
from django.utils.translation import ugettext_lazy as _

from auth.forms import PasswordChangeForm
from core.decorators import shop_admin_required

from forms import GeneralPreferenceForm, TaxesPreferenceForm, AuctionsPreferenceForm
from forms import ShippingWeightForm, ShippingPriceForm, ShippingItemForm, TaxStateForm, DnsShopForm, EmailNotificationForm, ShopPoliciesForm
from forms import UsernameChangeForm, ProfileForm
from models import Preference, ShippingWeight, ShippingPrice, ShippingItem, TaxState, DnsShop, EmailNotification, ShopPolicies
from models import TYPE_NOTIFICATION


@shop_admin_required
def preferences_general(request):
    shop = request.shop
    profile = shop.admin.get_profile()
    preferences = Preference.get_preference(shop)
    form = GeneralPreferenceForm(request.POST or None, instance=preferences)
    profile_form = ProfileForm(request.POST or None, instance=profile)
    if form.is_valid() and profile_form.is_valid():
        preferences = form.save(commit = False)
        preferences.shop = shop
        preferences.save()
        
        profile = profile_form.save(commit = True)
        shop.update_geolocation()
    
        request.flash['message'] = unicode(_("General preferences successfully saved."))
        request.flash['severity'] = "success"
        return HttpResponseRedirect(reverse('preferences_general'))
    
    return render_to_response('preferences/preferences_general.html', 
                              {'form': form, 'profile_form': profile_form}, 
                              RequestContext(request))   

@shop_admin_required
def add_state_tax(request):
    shop = request.shop
    
    
    if request.method == 'POST':
        form_tax = TaxStateForm(shop, request.POST)
        if form_tax.is_valid():
            
            tax = form_tax.save(commit = False)
            tax.shop = shop
            tax.save()
            request.flash['message'] = unicode(_("Tax successfully saved."))
            request.flash['severity'] = "success"
            return HttpResponseRedirect(reverse('preferences_taxes'))
    else:
        form_tax = TaxStateForm(shop)    
        
    return render_to_response('preferences/preferences_add_state_tax.html', 
                              {'form_tax': form_tax },
                              RequestContext(request))

@shop_admin_required
def edit_tax(request, id):
    
    shop = request.shop
    tax = get_object_or_404(TaxState, pk=id)
        
    if request.method == 'POST':
        form_tax = TaxStateEditForm(shop, request.POST, instance=tax)
        if form_tax.is_valid():
            tax = form_tax.save(commit = True)
            request.flash['message'] = unicode(_("Tax successfully updated."))
            request.flash['severity'] = "success"
            return HttpResponseRedirect(reverse('preferences_taxes'))
    else:
        form_tax = TaxStateEditForm(shop, instance=tax)
        
    return render_to_response('preferences/preferences_edit_tax.html', 
                              {'form_tax': form_tax },
                              RequestContext(request))

        
@shop_admin_required    
def preferences_taxes(request):
    shop = request.shop
    taxs = TaxState.objects.filter(shop=shop).order_by("state")
    form_tax = TaxStateForm(shop)
    
    return render_to_response('preferences/preferences_taxes.html', 
                              {'form_tax': form_tax, 'taxs': taxs}, 
                              RequestContext(request))   

@shop_admin_required
def delete_tax(request, id):
    tax = get_object_or_404(TaxState, pk=id)
    shop = request.shop
    if tax.shop != shop:
        raise Http404
    tax.delete()
    return HttpResponseRedirect(reverse('preferences_taxes'))


@shop_admin_required
def save_googlecheckout_settings(request):
    from payments.models import GoogleCheckoutShopSettings
    from payments.forms import GoogleCheckoutShopSettingsForm
    
    shop = request.shop
    
    try:
        current_google_settings = GoogleCheckoutShopSettings.objects.filter(shop=shop)[0]
    except IndexError:
        current_google_settings = None
    
    if request.method == "POST":
        google_form = GoogleCheckoutShopSettingsForm(request.POST, instance=current_google_settings)
        if google_form.is_valid():
            googlesettings = google_form.save(commit = False)
            googlesettings.shop = shop        
            googlesettings.save()
            request.flash['message'] = unicode(_("Google checkout settings successfully saved."))
            request.flash['severity'] = "success"
            return HttpResponseRedirect(reverse('preferences_payment_google_checkout'))
        else:
            request.flash['message'] = unicode(_("Could not save Google checkout settings!"))
            request.flash['severity'] = "error"
            return HttpResponseRedirect(reverse('preferences_payment_google_checkout'))
    else:
        return preferences_payment_google_checkout(request)
    

@shop_admin_required
def save_braintree_settings(request):
    from payments.models import BraintreeShopSettings
    from payments.forms import BraintreeShopSettingsForm
    
    shop = request.shop
    
    try:
        current_bt_settings = BraintreeShopSettings.objects.filter(shop=shop)[0]
    except IndexError:
        current_bt_settings = None
    
    if request.method == "POST":
        braintree_form = BraintreeShopSettingsForm(request.POST, instance=current_bt_settings)
        if braintree_form.is_valid():
            braintreesettings = braintree_form.save(commit = False)
            braintreesettings.shop = shop        
            braintreesettings.save()
            request.flash['message'] = unicode(_("Braintreee settings successfully saved."))
            request.flash['severity'] = "success"
            return HttpResponseRedirect(reverse('preferences_payment_credit_cards'))
        else:
            request.flash['message'] = unicode(_("Could not save Braintree settings!"))
            request.flash['severity'] = "error"
            return HttpResponseRedirect(reverse('preferences_payment_credit_cards'))
    else:
        return preferences_payment_credit_cards(request)


@shop_admin_required
def delete_googlecheckout_settings(request, setting_id):
    from payments.models import GoogleCheckoutShopSettings
    setting = get_object_or_404(GoogleCheckoutShopSettings, pk=setting_id)
    
    shop = request.shop
    if setting.shop != shop:
        raise Http404
    
    setting.delete()
    
    request.flash['message'] = unicode(_("Google Checkout settings successfully deleted."))
    request.flash['severity'] = "success"
    return HttpResponseRedirect(reverse('preferences_payment_google_checkout'))

@shop_admin_required
def delete_braintree_settings(request, setting_id):
    from payments.models import BraintreeShopSettings
    setting = get_object_or_404(BraintreeShopSettings, pk=setting_id)
    
    shop = request.shop
    if setting.shop != shop:
        raise Http404
    
    setting.delete()
    
    request.flash['message'] = unicode(_("Braintree settings successfully deleted."))
    request.flash['severity'] = "success"
    return HttpResponseRedirect(reverse('preferences_payment_credit_cards'))

@shop_admin_required
def save_manual_payment(request):
    from payments.models import ManualPaymentShopSettings
    from payments.forms import ManualPaymentShopSettingsForm
    
    shop = request.shop
    
    if request.method == "POST":
        manual_payment_form = ManualPaymentShopSettingsForm(shop, request.POST)
        if manual_payment_form.is_valid():
            manual_payment = manual_payment_form.save(commit = False)
            manual_payment.shop = shop        
            manual_payment.save()
            request.flash['message'] = unicode(_("Manual payment successfully saved."))
            request.flash['severity'] = "success"
            return HttpResponseRedirect(reverse('preferences_payment_manual'))
        else:
            errors = ",".join(manual_payment_form.errors)
            request.flash['message'] = unicode(_("Could not save Manual payment! fields with errors: %s" % errors))
            request.flash['severity'] = "error"
            return HttpResponseRedirect(reverse('preferences_payment_manual'))
    else:
        return preferences_payment_manual(request)


@shop_admin_required
def delete_manual_payment(request, payment_id):
    from payments.models import ManualPaymentShopSettings
    manual_payment = get_object_or_404(ManualPaymentShopSettings, pk=payment_id)
    
    shop = request.shop
    if manual_payment.shop != shop:
        raise Http404
    
    manual_payment.delete()
    
    request.flash['message'] = unicode(_("Manual Payment successfully deleted."))
    request.flash['severity'] = "success"
    return HttpResponseRedirect(reverse('preferences_payment_manual'))
    

@shop_admin_required
def edit_manual_payment(request, payment_id):
    from payments.forms import ManualPaymentShopSettingsForm
    from payments.models import ManualPaymentShopSettings
    
    manual_payment = get_object_or_404(ManualPaymentShopSettings, pk=payment_id)
    
    shop = request.shop
    if manual_payment.shop != shop:
        raise Http404
    
    if request.method == "POST":
        form = ManualPaymentShopSettingsForm(shop, request.POST, instance=manual_payment)    
        if form.is_valid():
            method = form.save(commit=True)
            request.flash["message"] = _("Manual payment successfully edited")
            request.flash["severity"] = "success"
            return HttpResponseRedirect(reverse("preferences_payment_manual"))
        
    form = ManualPaymentShopSettingsForm(shop, instance=manual_payment)
        
    return render_to_response('preferences/preferences_payment_manual_edit.html', 
                              { 
                               'form' : form,
                              }, 
                              RequestContext(request))

@shop_admin_required
def preferences_payments(request):
    shop = request.shop
    limit = shop.plan().payment_methods
#    current = 0
#    if shop.get_features().paypal: current += 1
#    if shop.get_features().credit_card: current += 1
#    if shop.get_features().google_checkout: current += 1
#    if shop.get_features().manual_payment: current += 1
#    params = {'available_methods' : limit, 'current_methods': current }
    params = {}
    return render_to_response("preferences/preferences_payments.html", params, RequestContext(request))
  
@shop_admin_required    
def preferences_payment_paypal(request):
    from payments.models import PayPalShopSettings
    
    shop = request.shop
    
    if not shop.paypal_feature_enabled():
        raise Http404
    
    try:
        paypal_settings = PayPalShopSettings.objects.filter(shop=shop)[0]
    except IndexError:
        paypal_settings = None
    
    return render_to_response('preferences/preferences_payment_paypal.html', 
                              { 
                               'paypal_settings': paypal_settings,
                              }, 
                              RequestContext(request))


@shop_admin_required    
def preferences_payment_credit_cards(request):
    from payments.forms import BraintreeShopSettingsForm
    from payments.models import BraintreeShopSettings
    
    shop = request.shop
    
    if not shop.credit_card_feature_enabled():
        raise Http404
    
    try:
        current_braintree_settings = BraintreeShopSettings.objects.filter(shop=shop)[0]
    except IndexError:
        current_braintree_settings = None
    
    braintree_form = BraintreeShopSettingsForm(instance=current_braintree_settings)
    
    return render_to_response('preferences/preferences_payment_credit_cards.html', 
                              { 
                               'braintree_form' : braintree_form,
                               'braintree_settings' : current_braintree_settings,
                              }, 
                              RequestContext(request))


@shop_admin_required
def preferences_payment_google_checkout(request):
    from payments.forms import GoogleCheckoutShopSettingsForm
    from payments.models import GoogleCheckoutShopSettings
    
    shop = request.shop
    
    if not shop.google_checkout_feature_enabled():
        raise Http404
    
    try:
        current_google_settings = GoogleCheckoutShopSettings.objects.filter(shop=shop)[0]
    except IndexError:
        current_google_settings = None
        
    google_form = GoogleCheckoutShopSettingsForm(instance=current_google_settings)
        
    return render_to_response('preferences/preferences_payment_google_checkout.html', 
                              { 
                               'google_form': google_form,
                               'google_settings' : current_google_settings,
                              }, 
                              RequestContext(request))


@shop_admin_required    
def preferences_payment_manual(request):
    from payments.forms import ManualPaymentShopSettingsForm
    from payments.models import ManualPaymentShopSettings
    
    shop = request.shop
    
    if not shop.manual_payment_feature_enabled():
        raise Http404
    
    manual_payment_form = ManualPaymentShopSettingsForm(shop)
    manual_payments = ManualPaymentShopSettings.objects.filter(shop=shop)
    
    return render_to_response('preferences/preferences_payment_manual.html', 
                              { 
                               'manual_payment_form' : manual_payment_form,
                               'manual_payments' : manual_payments,
                              }, 
                              RequestContext(request))


@shop_admin_required 
def payment_paypal_setpermissions(request):
    
    from payments.gateways.paypal import PayPalGateway
    
    ppgw = PayPalGateway(username=settings.PAYPAL_USERNAME,
                         password=settings.PAYPAL_PASSWORD,
                         sign=settings.PAYPAL_SIGNATURE,
                         debug=settings.PAYPAL_DEBUG)
    required_perms = [
        "Email", 
        "Name",
        "RefundTransaction",
        "SetExpressCheckout", 
        "GetExpressCheckoutDetails",        
        "DoExpressCheckoutPayment",
        "DoAuthorization",
        "DoCapture",
        "DoReauthorization"
    ]
    
    success, response = ppgw.SetAccessPermissions(return_url=request.build_absolute_uri(reverse("preferences_payment_paypal_return", args=["agree"])), 
                                                  cancel_url=request.build_absolute_uri(reverse("preferences_payment_paypal_return", args=["cancel"])), 
                                                  logout_url=request.build_absolute_uri(reverse("preferences_payment_paypal_return", args=["logout"])), 
                                                  required_permissions=required_perms)
    
    if success:
        return HttpResponseRedirect(ppgw.redirect_url(cmd='_access-permission-login', token=response['TOKEN'][0]))
    else:
        logging.info(response)
        request.flash["message"] = _("Paypal not available, try again later")
        request.flash["severity"] = "notice"
        #return HttpResponseRedirect(reverse("preferences_general"))
        return HttpResponse("error")

@shop_admin_required    
def payment_paypal_disable(request):
    from payments.forms import PayPalShopSettingsForm, GoogleCheckoutShopSettingsForm
    from payments.models import PayPalShopSettings, GoogleCheckoutShopSettings
    
    shop = request.shop
    
    try:
        paypal_settings = PayPalShopSettings.objects.get(shop=shop)
    except PayPalShopSettings.DoesNotExist:
        paypal_settings = None
        request.flash["message"] = _("Paypal didn't seems to be enable")
        request.flash["severity"] = "error"
        return HttpResponseRedirect(reverse("preferences_payment_paypal"))

    #TODO: call update permissions    
    paypal_settings.delete()
    request.flash["message"] = _("Paypal disabled")
    request.flash["severity"] = "notice"
    return HttpResponseRedirect(reverse("preferences_payment_paypal"))

@shop_admin_required 
def payment_paypal_return(request, action):
    """
        Process the request of the shop admin coming back from paypal. 
    """
    from payments.gateways.paypal import PayPalGateway
    from payments.models import PayPalShopSettings
    if action == 'agree':
        ppgw = PayPalGateway(username=settings.PAYPAL_USERNAME,
                         password=settings.PAYPAL_PASSWORD,
                         sign=settings.PAYPAL_SIGNATURE,
                         debug=settings.PAYPAL_DEBUG)
        success, response = ppgw.GetAccessPermissionDetails(request.GET['token'])
        
        if not success:
            request.flash['message'] = unicode(_("Preferences not saved. PayPal respond: %s" % response["L_SHORTMESSAGE0"][0]))
            request.flash['severity'] = "error"
            return HttpResponseRedirect(reverse('preferences_payment_paypal'))
        
        perms = []
        for key in response.iterkeys():
            if 'L_ACCESSPERMISSIONSTATUS' not in key:
                continue
            if response[key][0] == 'Accepted':
                idx = key.split('L_ACCESSPERMISSIONSTATUS')[1]
                perms.append(response['L_ACCESSPERMISSIONNAME%s' % idx][0])
                
        try:
            paypalinst = PayPalShopSettings.objects.get(shop=request.shop)
        except PayPalShopSettings.DoesNotExist:
            paypalinst = PayPalShopSettings(shop=request.shop)
        
        paypalinst.payer_id = response['PAYERID'][0]
        paypalinst.email = response['EMAIL'][0]
        paypalinst.first_name = response['FIRSTNAME'][0] 
        paypalinst.last_name = response['LASTNAME'][0]
        paypalinst.perms = perms
        paypalinst.save()
        
        request.flash['message'] = unicode(_("Preferences successfully saved."))
        request.flash['severity'] = "success"

    if action == 'cancel':
        request.flash['message'] = unicode(_("You have decided not to complete the setup process. Your Paypal payment option is still disabled."))
        request.flash['severity'] = "error"
        
    if action == 'logout':
        request.flash['message'] = unicode(_("You are logged out from Paypal!"))
        request.flash['severity'] = "error"

    return HttpResponseRedirect(reverse('preferences_payment_paypal'))

@shop_admin_required
def preferences_auctions(request):
    shop = request.shop
    preferences = Preference.get_preference(shop)
    if request.method == 'POST':
        form = AuctionsPreferenceForm(request.POST, instance=preferences)
        if form.is_valid():
            preferences = form.save(commit=False)
            preferences.shop = shop
            request.flash['message'] = unicode(_("Auctions preferences successfully saved."))
            request.flash['severity'] = "success"
            return HttpResponseRedirect(reverse('preferences_auctions'))
    else:            
        form = AuctionsPreferenceForm(instance=preferences)
    return render_to_response('preferences/preferences_auctions.html', 
                              {'form': form}, 
                              RequestContext(request))  


@shop_admin_required
def preferences_shipping(request):
    shop = request.shop

    shipping_weight = ShippingWeight.objects.filter(shop=shop)
    shipping_price = ShippingPrice.objects.filter(shop=shop)
    shipping_item = ShippingItem.objects.filter(shop=shop)

    form_weight = ShippingWeightForm()
    form_price = ShippingPriceForm()
    form_item = ShippingItemForm()
    
    if request.method == 'POST':
        if request.POST.get('type') == 'weight':
            form_weight = ShippingWeightForm(request.POST)
            form = form_weight 
        elif request.POST.get('type') == 'price':
            form_price = ShippingPriceForm(request.POST)
            form = form_price 
        elif request.POST.get('type') == 'item':
            form_item = ShippingItemForm(request.POST)
            form = form_item 
            
        if form.is_valid():
            shipping = form.save(commit=False)
            shipping.shop = shop
            shipping.save()
            request.flash['message'] = unicode(_("Flat rate shipping successfully saved."))
            request.flash['severity'] = "success"
            return HttpResponseRedirect(reverse('preferences_shipping'))
            
    return render_to_response('preferences/preferences_shipping.html', 
                              {'shipping_weight': shipping_weight,
                               'shipping_price': shipping_price,
                               'shipping_item': shipping_item,
                               'form_weight': form_weight,
                               'form_price': form_price,
                               'form_item': form_item,
                               }, 
                              RequestContext(request))  

@shop_admin_required
def delete_shipping_weight(request, id):
    shipping_weight = get_object_or_404(ShippingWeight, pk=id)
    shop = request.shop
    if shipping_weight.shop != shop:
        raise Http404
    shipping_weight.delete()
    return HttpResponseRedirect(reverse('preferences_shipping'))
    
@shop_admin_required
def delete_shipping_price(request, id):
    shipping_price = get_object_or_404(ShippingPrice, pk=id)
    shop = request.shop
    if shipping_price.shop != shop:
        raise Http404
    shipping_price.delete()
    return HttpResponseRedirect(reverse('preferences_shipping'))
    
@shop_admin_required
def delete_shipping_item(request, id):
    shipping_item = get_object_or_404(ShippingItem, pk=id)
    shop = request.shop
    if shipping_item.shop != shop:
        raise Http404
    shipping_item.delete()
    return HttpResponseRedirect(reverse('preferences_shipping'))


@shop_admin_required
def preferences_email(request):
    type_notification = TYPE_NOTIFICATION
    return render_to_response('preferences/preferences_email.html', 
                              {'type_notification':type_notification,
                               }, 
                              RequestContext(request))  

@shop_admin_required
def ajax_edit_notification(request):
    #TODO: check this key in TYPE_NOTIFICATION
    try:
        shop = request.shop
        if request.method == 'POST':
            key = request.POST.get('key')
        else:
            key = request.GET.get('key')
        try:
            email_notification = EmailNotification.objects.filter(type_notification=key, shop=shop).get()
        except:
            if key == "NON":
                subject = "[{{shop}}]  {{ buyer_name }} place a new order"
                body = """{{ buyer_name }} placed a new order with you today ({{ sell_date }}).

Buyer Info:
    email: {{buyer_email}}
    phone: {{ buyer_phone }}

Paymenth Gateway: {{ gateway }}

Shipping address:
    {{ shipping_street_address }}
    {{ shipping_city }}, {{ shipping_state }} {{ shipping_zip }},  {{ shipping_country }}

Items:
{% for item in items %}
    id: {{ item.id }} | qty: {{ item.qty }} | title: {{ item.title }} | total: {{  item.total }} | link: {{ item.link }}
{% endfor %}
                
Total Without Taxes: {{ sell_without_taxes }}
Total Taxes: {{ sell_total_taxes }}
Total Shipping: {{ sell_total_shipping }}
Total: {{ sell_total }} 
 """
                
            elif key == "AWC":
                subject = "Congratulations {{ bidder_name }}!" 
                body = """
{{ bidder_name }}, you have won the {{ session_title }} on {{ shop }} that finished at {{ session_end }}

You bid u$s {{ bid_amount }} for the lot {{ lot_title }} on {{ bid_time }}.

Lot Description: {{ lot_description }}. """

            elif key == "OC":
                subject = "Order confirmation from {{ shop }}"
                body = body = """
Thank you for placing your order with {{ shop }}!

This email is to confirm your recent order.

Date: {{ sell_date }}
Shipping address:
    {{ shipping_street_address }}
    {{ shipping_city }}, {{ shipping_state }} {{ shipping_zip }},  {{ shipping_country }}

The order contains these items:
{% for item in items %}
   ** {{ item.qty }}x {{ item.title }}  | {{ item.total }}
{% endfor %}

Taxes     : {{ sell_total_taxes }}
Shipping  : {{ sell_total_shipping }}
Total     : {{ sell_total }}        """
            elif key == "CB":
                subject = "Contact from {{ shop }}"
                body = ""
                
            elif key == "BCN":
                subject = "Remember your items orders in {{ shop }}"
                body = """Dear {{ bidder_name }}:

Please remember your items in the cart created at {{ cart_date }}, for a total of ${{ cart_total }}.

Cart items detail:

{% for item in items %}
    {{ item.qty }}x {{ item.title }} x ${{ item.price }} | sub total: ${{  item.total }}
{% endfor %}

Sincerly. {{ shop }}"""
                
            email_notification = EmailNotification(type_notification=key, shop=shop, subject=subject, body=body)
            
        form = EmailNotificationForm(request.POST or None, instance=email_notification)
        if form.is_valid():
            email_notification = form.save(commit=False)
            email_notification.type_notification = key
            email_notification.save()
            request.flash['message'] = unicode(_("Email notification successfully saved."))
            request.flash['severity'] = "success"
            return HttpResponseRedirect(reverse('preferences_email'))
    
        return render_to_response('preferences/ajax_edit_notification.html',
                                  {'form': form, 
                                   'key': key,
                                   'email_notification': email_notification },
                                  RequestContext(request))
    except Exception, e:
        logging.critical(e)


@shop_admin_required
def preferences_policies(request):
    shop = request.shop
    
    try:
        policies = ShopPolicies.objects.filter(shop=shop).get()
    except ShopPolicies.DoesNotExist:
        policies = ShopPolicies(shop=shop)
        policies.save()
        
    if request.method == "POST":
        form = ShopPoliciesForm(request.POST)
        if form.is_valid():
            policies.refund_policy = form.cleaned_data['refund_policy']
            policies.terms_of_service = form.cleaned_data['terms_of_service']
            policies.privacy_policy = form.cleaned_data['privacy_policy']
            policies.save()
            request.flash['message'] = unicode(_("Policies successfully saved."))
            request.flash['severity'] = "success"
            return HttpResponseRedirect(reverse('preferences_policies'))

            request.flash['message'] = unicode(_("Policies successfully saved."))
            request.flash['severity'] = "success"
            return HttpResponseRedirect(reverse('preferences_policies'))
    else:
        form = ShopPoliciesForm(instance=policies)

    return render_to_response('preferences/preferences_policies.html',
                              {'form': form},
                              RequestContext(request))

@shop_admin_required
def preferences_dns(request):
    shop = request.shop
    dnss= DnsShop.objects.filter(shop=shop)
    form = DnsShopForm(request.POST or None)
    if form.is_valid():
        dns = form.save(commit=False)
        dns.shop = shop
        dns.save()
        request.flash['message'] = unicode(_("Dns successfully saved."))
        request.flash['severity'] = "success"
        return HttpResponseRedirect(reverse('preferences_dns'))
    return render_to_response('preferences/preferences_dns.html', 
                              {'form': form,
                               'dnss': dnss
                               }, 
                              RequestContext(request))  


@shop_admin_required
def delete_dns(request, id):
    dns = get_object_or_404(DnsShop, pk=id)
    shop = request.shop
    if dns.shop != shop:
        raise Http404
    
    dns.delete()
    return HttpResponseRedirect(reverse('preferences_dns'))

@shop_admin_required
def edit_dns(request, id):
    dns = get_object_or_404(DnsShop, pk=id)
    shop = request.shop
    if dns.shop != shop:
        raise Http404
    
    if request.method != "POST":
        raise Http404
    
    domain_name = request.POST.get("dns")
    try:
        DnsShop.objects.get(dns=domain_name)
        request.flash["message"] = "A shop with that dns already exists."
        request.flash["severity"] = "error"
    except DnsShop.DoesNotExist:
        dns.dns = domain_name
        dns.save()
        request.flash["message"] = "DNS successfully updated."
        request.flash["severity"] = "success"
    
    return HttpResponseRedirect(reverse('preferences_dns'))

@shop_admin_required
def set_default_dns(request, id):
    dns = get_object_or_404(DnsShop, pk=id)
    shop = request.shop
    
    if dns.shop != shop:
        raise Http404
    
    try:
        older = DnsShop.objects.filter(shop=dns.shop, default=True).get()
        older.default = False
        older.save()
    except DnsShop.DoesNotExist:
        pass
    
    dns.default = True
    dns.save()
    
    return HttpResponseRedirect(reverse('preferences_dns'))


@shop_admin_required
def marketing(request):
    shop = request.shop
    preferences = shop.preference_set.all().get()
    form = MarketingForm(request.POST or None, instance=preferences)
    if form.is_valid():
        form.save()
        request.flash['message'] = unicode(_("Marketing data successfully saved."))
        request.flash['severity'] = "success"
        return HttpResponseRedirect(reverse('web_store_marketing'))
    return render_to_response('store_admin/web_store/analytics.html', 
                              {'form': form}, 
                              RequestContext(request))

@shop_admin_required
def shows(request):
    from market_buy.models import Show
    from shops.models import DealerToShow
    shop = request.shop

    sort = request.GET.get('sort_by', 'date')
            
    assistant_to = DealerToShow.objects.filter(shop=shop)
    active_shows = Show.objects.filter(marketplace=shop.marketplace).filter(date_to__gte=datetime.datetime.now())
    
    if sort == "date": active_shows = active_shows.order_by("date_from")
    if sort == "-date": active_shows = active_shows.order_by("-date_from")
    if sort == "name": active_shows = active_shows.order_by("name")
    
    return render_to_response('store_admin/web_store/shows.html', 
                              {
                               'active_shows' : active_shows,
                               'assistant_to' : assistant_to,
                               }, 
                              RequestContext(request))


@shop_admin_required
def show_not_go(request, id):
    from shops.models import DealerToShow
    from market_buy.models import Show
    show = get_object_or_404(Show, pk=id)
    shop = request.shop
    
    assistant = DealerToShow.objects.filter(shop=shop, show=show).get()
    if assistant.shop != shop:
        raise Http404
    assistant.delete()
    
    return HttpResponseRedirect(reverse('web_store_shows'))


@shop_admin_required
def show_go(request, id):
    from shops.models import DealerToShow
    from market_buy.models import Show
    shop = request.shop
    show = get_object_or_404(Show, pk=id)
    
    assistant = DealerToShow.objects.get_or_create(shop=shop, show=show)  
    
    return HttpResponseRedirect(reverse('web_store_shows'))

@shop_admin_required
def add_show(request):
    from market_buy.models import Show
    from market_buy.forms import ShowForm
    from shops.models import DealerToShow
    
    shop = request.shop
    
    if request.method == "POST":
        form = ShowForm(request.POST)
        if form.is_valid():
            
            show = form.save(commit = False)
            show.marketplace = shop.marketplace
            show.owner = shop.admin
            show.create(shop)
            
            request.flash['message'] = "Show added"
            request.flash['severity'] = "success"
            return HttpResponseRedirect(reverse('web_store_shows'))
    else:
        form = ShowForm()
    
    params = {'form' : form}
    return render_to_response("store_admin/web_store/show_add.html", params, RequestContext(request))

@shop_admin_required
def edit_show(request, show_id):
    from market_buy.models import Show
    from market_buy.forms import ShowForm
    shop = request.shop
    show = get_object_or_404(Show, pk=show_id)
    if show.owner != request.user:
        return HttpResponseForbidden('Not allowed')
    
    if request.method == "POST":
        form = ShowForm(request.POST, instance=show)
        if form.is_valid():
            show = form.save(commit = False)
            show.marketplace = shop.marketplace
            show.owner = shop.admin
            show.save()
            
            request.flash['message'] = "Show edited"
            request.flash['severity'] = "success"
            return HttpResponseRedirect(reverse('web_store_shows'))
    else:
        form = ShowForm(instance=show)
    
    params = {'form' : form}
    return render_to_response("store_admin/web_store/show_edit.html", params, RequestContext(request))

@shop_admin_required
def change_username_password(request):
    user = request.user
    form_username = UsernameChangeForm(request.POST or None, prefix="username", instance=user)
    form_password = PasswordChangeForm(user, request.POST or None, prefix="password")
    if form_password.is_valid() or form_username.is_valid():
        if form_password.is_valid():
            form_password.save()
            request.flash['message'] = unicode(_("Password successfully saved."))
            request.flash['severity'] = "success"
            return HttpResponseRedirect(reverse('username_password'))
        if form_username.is_valid():
            form_username.save()
            request.flash['message'] = unicode(_("Username successfully saved."))
            request.flash['severity'] = "success"
            return HttpResponseRedirect(reverse('username_password'))
    return render_to_response('store_admin/account/username_password.html', 
                              {'form_password': form_password,
                               'form_username': form_username}, 
                              RequestContext(request))


#@shop_admin_required
#def change_username(request):
#    user = request.user
#    form_username = UsernameChangeForm(request.POST or None, instance=user)
#    if form_username.is_valid():
#        form_username.save()
#        request.flash['message'] = unicode(_("Username successfully saved."))
#        request.flash['severity'] = "success"
#        return HttpResponseRedirect(reverse('username'))
#    return render_to_response('store_admin/account/username.html', 
#                              {'form_username': form_username}, 
#                              RequestContext(request))

@shop_admin_required
def change_profile(request):
    return render_to_response('store_admin/account/photo.html', {}, RequestContext(request))


@shop_admin_required
def change_password(request):
    user = request.user
    form_password = PasswordChangeForm(user, request.POST or None, prefix="password")
    if form_password.is_valid():
        form_password.save()
        request.flash['message'] = unicode(_("Password successfully saved."))
        request.flash['severity'] = "success"
        return HttpResponseRedirect(reverse('account_password'))
    return render_to_response('store_admin/account/password.html', 
                              {'form_password': form_password}, 
                              RequestContext(request))
    
def send_template(request):
    from django.conf import settings
    from django.core.mail import send_mail
    
    try:
        shop = request.shop
        email = request.GET.get('email', None)
        id = long(request.GET.get('id', None))        
        
        notification = EmailNotification.objects.filter(id=id, shop=shop).get()
        
        send_mail(notification.render_dummy(notification.subject),
                  notification.render_dummy(notification.body),
                  settings.EMAIL_FROM, recipient_list=[email,],
                  fail_silently=True)
        
        request.flash['message'] = unicode(_("Email sent."))
        request.flash['severity'] = "success"
        
    except Exception, e:
        request.flash['message'] = unicode(_("Can't send email."))
        request.flash['severity'] = "error"
        
    return HttpResponseRedirect(reverse("preferences_email"))
########NEW FILE########
__FILENAME__ = indexes
# -*- coding: utf-8 -*-
from datetime import datetime

from haystack.indexes import (RealTimeSearchIndex, CharField, IntegerField,
    FloatField, DateTimeField, EdgeNgramField, DecimalField)
from haystack import site

# import models to be indexed...
from for_sale.models import Item
from auctions.models import AuctionSession
from lots.models import Lot
from inventory.models import Product
from sell.models import CartItem


class ItemIndex(RealTimeSearchIndex):
    """
    Indexes for_sale.models.Item instances
    """

    # remember to respect haystack primary field convention name!
    # by default, stored and indexed parameters are True
    summary = CharField(document=True, use_template=True)

    title = CharField(model_attr="title")
    description = CharField(model_attr="description", indexed=False, null=True)
    price = FloatField(model_attr="price", indexed=False)
#    price = DecimalField(model_attr="price", indexed=False)
    added_at = DateTimeField(model_attr="date_time", stored=False)

    shop_id = IntegerField(model_attr="shop__id", stored=False)
    shop_name = CharField(model_attr="shop__name")

    category = CharField(model_attr="category")
    subcategory = CharField(model_attr="subcategory", null=True)

    # order by:
    # * relevance == score function?
    # * added_at ASC / DESC
    # * price ASC / DESC
    # * title ASC / DESC

#    def get_queryset(self):
    def index_queryset(self):
        return Item.objects.filter(qty__gt=0)

site.register(Item, ItemIndex)

class CartItemIndex(RealTimeSearchIndex):
    summary = EdgeNgramField(model_attr='product__title', document=True)
    shop_id = IntegerField(model_attr="cart__shop__id", stored=False)
    cart_id = IntegerField(model_attr="cart__id")
    category_id = CharField(model_attr="product__category_id")
    subcategory_id = CharField(model_attr="product__subcategory_id", null=True)
    
site.register(CartItem, CartItemIndex)

class AuctionSessionIndex(RealTimeSearchIndex):
    """
    Indexes auctions.models.AuctionSession instances
    """
    # remember to respect haystack primary field convention name!
    # by default, stored and indexed parameters are True
    summary = CharField(document=True, use_template=True)

    title = CharField(model_attr="title")
    description = CharField(model_attr="description", indexed=False, null=True)

    shop_id = IntegerField(model_attr="shop__id", stored=False)
    shop_name = CharField(model_attr="shop__name")

    starts_at = DateTimeField(model_attr="start", stored=False)
    ends_at = DateTimeField(model_attr="end", stored=False)

#    def get_queryset(self):
    def index_queryset(self):
        return AuctionSession.objects.filter(start__lte=datetime.now(), end__gt=datetime.now())

site.register(AuctionSession, AuctionSessionIndex)

class LotIndex(RealTimeSearchIndex):
    """
    Indexes lots.models.Lot instances
    """

    # remember to respect haystack primary field convention name!
    # by default, stored and indexed parameters are True
    summary = CharField(document=True, use_template=True)

    title = CharField(model_attr="title")
    description = CharField(model_attr="description", indexed=False, null=True)
    state = CharField(model_attr="get_state_display")

    shop_id = IntegerField(model_attr="shop__id", stored=False)
    shop_name = CharField(model_attr="shop__name")

    category = CharField(model_attr="category")
    subcategory = CharField(model_attr="subcategory", null=True)

    added_at = DateTimeField(model_attr="date_time", stored=False)

#    def get_queryset(self):
    def index_queryset(self):
        # allow to search only active lots
        return Lot.objects.filter(state="A")

site.register(Lot, LotIndex)

class ProductIndex(RealTimeSearchIndex):
    """
    Index for inventory.models.Product
    """

    # summary template will include title, description, category name and
    # subcategory name in order to make it easy to search
    summary = CharField(document=True, use_template=True, stored=False)

    title = CharField(model_attr="title")
    description = CharField(model_attr="description", indexed=False, null=True)

    product_id = IntegerField(model_attr="id")
    category = CharField(model_attr="category__name")#, faceted=True)
    category_id = IntegerField(model_attr="category__id")
    subcategory = CharField(model_attr="subcategory__name", null=True)#, faceted=True, null=True)
    subcategory_id = IntegerField(model_attr="subcategory__id", null=True)
    price = FloatField()
#    price = DecimalField()
    image_url = CharField(null=True, indexed=True)

    marketplace_id = IntegerField(model_attr="shop__marketplace__id")

    shop_id = IntegerField(model_attr="shop__id")
    shop_name = CharField(model_attr="shop__name", indexed=False)
    shop_default_dns = CharField(model_attr="shop__default_dns", indexed=False)
    shop_currency = CharField(indexed=False)

    added_at = DateTimeField(model_attr="date_time")

    def prepare_price(self, obj):
        price = obj.child().price

        # the price of a Lot is an instance method
        if callable(price):
            return price()

        # the .price of an Item is an instance attribute
        return price

    def prepare_image_url(self, obj):
        image = obj.child().image()
        if image:
            return image.image.url_100x100
        return None

    def prepare_shop_currency(self, obj):
        return obj.shop.preference().checkout_currency

site.register(Product, ProductIndex)

########NEW FILE########
__FILENAME__ = models
from django.db import models

# Create your models here.

########NEW FILE########
__FILENAME__ = tests
"""
This file demonstrates two different styles of tests (one doctest and one
unittest). These will both pass when you run "manage.py test".

Replace these with more appropriate tests for your application.
"""

from django.test import TestCase


class SimpleTest(TestCase):
    def test_basic_addition(self):
        """
        Tests that 1 + 1 always equals 2.
        """
        self.failUnlessEqual(1 + 1, 2)

__test__ = {"doctest": """
Another way to test that 1 + 1 is equal to 2.

>>> 1 + 1 == 2
True
"""}

########NEW FILE########
__FILENAME__ = views
# Create your views here.

########NEW FILE########
__FILENAME__ = admin
from models import *
from django.contrib import admin

admin.site.register(Cart)
admin.site.register(CartItem)

admin.site.register(Sell)
admin.site.register(SellItem)
admin.site.register(ShippingData)
admin.site.register(Payment)
admin.site.register(PaymentHistory)
admin.site.register(Shipping)
admin.site.register(ShippingHistory)




########NEW FILE########
__FILENAME__ = countries
from django.utils.translation import ugettext as _

COUNTRIES = (
    ('AD', _('Andorra')),
    ('AE', _('United Arab Emirates')),
    ('AF', _('Afghanistan')),
    ('AG', _('Antigua & Barbuda')),
    ('AI', _('Anguilla')),
    ('AL', _('Albania')),
    ('AM', _('Armenia')),
    ('AN', _('Netherlands Antilles')),
    ('AO', _('Angola')),
    ('AQ', _('Antarctica')),
    ('AR', _('Argentina')),
    ('AS', _('American Samoa')),
    ('AT', _('Austria')),
    ('AU', _('Australia')),
    ('AW', _('Aruba')),
    ('AZ', _('Azerbaijan')),
    ('BA', _('Bosnia and Herzegovina')),
    ('BB', _('Barbados')),
    ('BD', _('Bangladesh')),
    ('BE', _('Belgium')),
    ('BF', _('Burkina Faso')),
    ('BG', _('Bulgaria')),
    ('BH', _('Bahrain')),
    ('BI', _('Burundi')),
    ('BJ', _('Benin')),
    ('BM', _('Bermuda')),
    ('BN', _('Brunei Darussalam')),
    ('BO', _('Bolivia')),
    ('BR', _('Brazil')),
    ('BS', _('Bahama')),
    ('BT', _('Bhutan')),
    ('BV', _('Bouvet Island')),
    ('BW', _('Botswana')),
    ('BY', _('Belarus')),
    ('BZ', _('Belize')),
    ('CA', _('Canada')),
    ('CC', _('Cocos (Keeling) Islands')),
    ('CF', _('Central African Republic')),
    ('CG', _('Congo')),
    ('CH', _('Switzerland')),
    ('CI', _('Ivory Coast')),
    ('CK', _('Cook Iislands')),
    ('CL', _('Chile')),
    ('CM', _('Cameroon')),
    ('CN', _('China')),
    ('CO', _('Colombia')),
    ('CR', _('Costa Rica')),
    ('CU', _('Cuba')),
    ('CV', _('Cape Verde')),
    ('CX', _('Christmas Island')),
    ('CY', _('Cyprus')),
    ('CZ', _('Czech Republic')),
    ('DE', _('Germany')),
    ('DJ', _('Djibouti')),
    ('DK', _('Denmark')),
    ('DM', _('Dominica')),
    ('DO', _('Dominican Republic')),
    ('DZ', _('Algeria')),
    ('EC', _('Ecuador')),
    ('EE', _('Estonia')),
    ('EG', _('Egypt')),
    ('EH', _('Western Sahara')),
    ('ER', _('Eritrea')),
    ('ES', _('Spain')),
    ('ET', _('Ethiopia')),
    ('FI', _('Finland')),
    ('FJ', _('Fiji')),
    ('FK', _('Falkland Islands (Malvinas)')),
    ('FM', _('Micronesia')),
    ('FO', _('Faroe Islands')),
    ('FR', _('France')),
    ('FX', _('France, Metropolitan')),
    ('GA', _('Gabon')),
    ('GB', _('United Kingdom (Great Britain)')),
    ('GD', _('Grenada')),
    ('GE', _('Georgia')),
    ('GF', _('French Guiana')),
    ('GH', _('Ghana')),
    ('GI', _('Gibraltar')),
    ('GL', _('Greenland')),
    ('GM', _('Gambia')),
    ('GN', _('Guinea')),
    ('GP', _('Guadeloupe')),
    ('GQ', _('Equatorial Guinea')),
    ('GR', _('Greece')),
    ('GS', _('South Georgia and the South Sandwich Islands')),
    ('GT', _('Guatemala')),
    ('GU', _('Guam')),
    ('GW', _('Guinea-Bissau')),
    ('GY', _('Guyana')),
    ('HK', _('Hong Kong')),
    ('HM', _('Heard & McDonald Islands')),
    ('HN', _('Honduras')),
    ('HR', _('Croatia')),
    ('HT', _('Haiti')),
    ('HU', _('Hungary')),
    ('ID', _('Indonesia')),
    ('IE', _('Ireland')),
    ('IL', _('Israel')),
    ('IN', _('India')),
    ('IO', _('British Indian Ocean Territory')),
    ('IQ', _('Iraq')),
    ('IR', _('Islamic Republic of Iran')),
    ('IS', _('Iceland')),
    ('IT', _('Italy')),
    ('JM', _('Jamaica')),
    ('JO', _('Jordan')),
    ('JP', _('Japan')),
    ('KE', _('Kenya')),
    ('KG', _('Kyrgyzstan')),
    ('KH', _('Cambodia')),
    ('KI', _('Kiribati')),
    ('KM', _('Comoros')),
    ('KN', _('St. Kitts and Nevis')),
    ('KP', _('Korea, Democratic People\'s Republic of')),
    ('KR', _('Korea, Republic of')),
    ('KW', _('Kuwait')),
    ('KY', _('Cayman Islands')),
    ('KZ', _('Kazakhstan')),
    ('LA', _('Lao People\'s Democratic Republic')),
    ('LB', _('Lebanon')),
    ('LC', _('Saint Lucia')),
    ('LI', _('Liechtenstein')),
    ('LK', _('Sri Lanka')),
    ('LR', _('Liberia')),
    ('LS', _('Lesotho')),
    ('LT', _('Lithuania')),
    ('LU', _('Luxembourg')),
    ('LV', _('Latvia')),
    ('LY', _('Libyan Arab Jamahiriya')),
    ('MA', _('Morocco')),
    ('MC', _('Monaco')),
    ('MD', _('Moldova, Republic of')),
    ('MG', _('Madagascar')),
    ('MH', _('Marshall Islands')),
    ('ML', _('Mali')),
    ('MN', _('Mongolia')),
    ('MM', _('Myanmar')),
    ('MO', _('Macau')),
    ('MP', _('Northern Mariana Islands')),
    ('MQ', _('Martinique')),
    ('MR', _('Mauritania')),
    ('MS', _('Monserrat')),
    ('MT', _('Malta')),
    ('MU', _('Mauritius')),
    ('MV', _('Maldives')),
    ('MW', _('Malawi')),
    ('MX', _('Mexico')),
    ('MY', _('Malaysia')),
    ('MZ', _('Mozambique')),
    ('NA', _('Namibia')),
    ('NC', _('New Caledonia')),
    ('NE', _('Niger')),
    ('NF', _('Norfolk Island')),
    ('NG', _('Nigeria')),
    ('NI', _('Nicaragua')),
    ('NL', _('Netherlands')),
    ('NO', _('Norway')),
    ('NP', _('Nepal')),
    ('NR', _('Nauru')),
    ('NU', _('Niue')),
    ('NZ', _('New Zealand')),
    ('OM', _('Oman')),
    ('PA', _('Panama')),
    ('PE', _('Peru')),
    ('PF', _('French Polynesia')),
    ('PG', _('Papua New Guinea')),
    ('PH', _('Philippines')),
    ('PK', _('Pakistan')),
    ('PL', _('Poland')),
    ('PM', _('St. Pierre & Miquelon')),
    ('PN', _('Pitcairn')),
    ('PR', _('Puerto Rico')),
    ('PT', _('Portugal')),
    ('PW', _('Palau')),
    ('PY', _('Paraguay')),
    ('QA', _('Qatar')),
    ('RE', _('Reunion')),
    ('RO', _('Romania')),
    ('RU', _('Russian Federation')),
    ('RW', _('Rwanda')),
    ('SA', _('Saudi Arabia')),
    ('SB', _('Solomon Islands')),
    ('SC', _('Seychelles')),
    ('SD', _('Sudan')),
    ('SE', _('Sweden')),
    ('SG', _('Singapore')),
    ('SH', _('St. Helena')),
    ('SI', _('Slovenia')),
    ('SJ', _('Svalbard & Jan Mayen Islands')),
    ('SK', _('Slovakia')),
    ('SL', _('Sierra Leone')),
    ('SM', _('San Marino')),
    ('SN', _('Senegal')),
    ('SO', _('Somalia')),
    ('SR', _('Suriname')),
    ('ST', _('Sao Tome & Principe')),
    ('SV', _('El Salvador')),
    ('SY', _('Syrian Arab Republic')),
    ('SZ', _('Swaziland')),
    ('TC', _('Turks & Caicos Islands')),
    ('TD', _('Chad')),
    ('TF', _('French Southern Territories')),
    ('TG', _('Togo')),
    ('TH', _('Thailand')),
    ('TJ', _('Tajikistan')),
    ('TK', _('Tokelau')),
    ('TM', _('Turkmenistan')),
    ('TN', _('Tunisia')),
    ('TO', _('Tonga')),
    ('TP', _('East Timor')),
    ('TR', _('Turkey')),
    ('TT', _('Trinidad & Tobago')),
    ('TV', _('Tuvalu')),
    ('TW', _('Taiwan, Province of China')),
    ('TZ', _('Tanzania, United Republic of')),
    ('UA', _('Ukraine')),
    ('UG', _('Uganda')),
    ('UM', _('United States Minor Outlying Islands')),
    ('US', _('United States of America')),
    ('UY', _('Uruguay')),
    ('UZ', _('Uzbekistan')),
    ('VA', _('Vatican City State (Holy See)')),
    ('VC', _('St. Vincent & the Grenadines')),
    ('VE', _('Venezuela')),
    ('VG', _('British Virgin Islands')),
    ('VI', _('United States Virgin Islands')),
    ('VN', _('Viet Nam')),
    ('VU', _('Vanuatu')),
    ('WF', _('Wallis & Futuna Islands')),
    ('WS', _('Samoa')),
    ('YE', _('Yemen')),
    ('YT', _('Mayotte')),
    ('YU', _('Yugoslavia')),
    ('ZA', _('South Africa')),
    ('ZM', _('Zambia')),
    ('ZR', _('Zaire')),
    ('ZW', _('Zimbabwe')),
    ('ZZ', _('Unknown or unspecified country')),
)
########NEW FILE########
__FILENAME__ = forms
import re
from django import forms 

from sell.models import ShippingData
from django.contrib.localflavor.us.forms import USStateSelect, USZipCodeField

class ShippingDataForm(forms.ModelForm):
    state = forms.CharField(widget=USStateSelect)
    save_shipping_info = forms.BooleanField(label="Save Shipping Information", widget=forms.CheckboxInput(), required=False)
    
    class Meta:
        model = ShippingData
        
    def clean_zip(self):
        zip = self.cleaned_data.get("zip", "")
        if zip.strip() == "": raise forms.ValidationError("Zip is a required field.")
        
        if not (re.match("[0-9]{5}(-[0-9]{4})?$", zip)): raise forms.ValidationError("Invalid Zip code. Valid formats are XXXXX or XXXXX-XXXX")   
        return zip
    
    def clean(self):
        first_name = self.cleaned_data.get("first_name", "")
        last_name = self.cleaned_data.get("last_name", "")
        country = self.cleaned_data.get("country", "")
        street = self.cleaned_data.get("street_address", "")
        city = self.cleaned_data.get("city", "")
        
        if first_name.strip() == "": raise forms.ValidationError("First name is a required field.")
        if last_name.strip() == "": raise forms.ValidationError("First name is a required field.")
        if street.strip() == "": raise forms.ValidationError("Street is a required field.")
        if city.strip() == "": raise forms.ValidationError("City is a required field.")
        if country.strip() == "": raise forms.ValidationError("Country is a required field.")
        
        return self.cleaned_data
    
    def save_shipping(self):
        return self.cleaned_data.get("save_shipping_info", False)

########NEW FILE########
__FILENAME__ = 0001_initial
# encoding: utf-8
import datetime
from south.db import db
from south.v2 import SchemaMigration
from django.db import models

class Migration(SchemaMigration):

    def forwards(self, orm):
        
        # Adding model 'ShippingData'
        db.create_table('sell_shippingdata', (
            ('id', self.gf('django.db.models.fields.AutoField')(primary_key=True)),
            ('street_address', self.gf('django.db.models.fields.CharField')(max_length=80, null=True, blank=True)),
            ('city', self.gf('django.db.models.fields.CharField')(max_length=80, null=True, blank=True)),
            ('state', self.gf('django.db.models.fields.CharField')(max_length=80, null=True, blank=True)),
            ('zip', self.gf('django.db.models.fields.CharField')(max_length=30, null=True, blank=True)),
            ('country', self.gf('django.db.models.fields.CharField')(max_length=50, null=True, blank=True)),
        ))
        db.send_create_signal('sell', ['ShippingData'])

        # Adding model 'Cart'
        db.create_table('sell_cart', (
            ('id', self.gf('django.db.models.fields.AutoField')(primary_key=True)),
            ('bidder', self.gf('django.db.models.fields.related.ForeignKey')(to=orm['auth.User'])),
            ('shop', self.gf('django.db.models.fields.related.ForeignKey')(to=orm['shops.Shop'])),
            ('shippingdata', self.gf('django.db.models.fields.related.OneToOneField')(to=orm['sell.ShippingData'], unique=True, null=True, blank=True)),
        ))
        db.send_create_signal('sell', ['Cart'])

        # Adding model 'CartItem'
        db.create_table('sell_cartitem', (
            ('id', self.gf('django.db.models.fields.AutoField')(primary_key=True)),
            ('cart', self.gf('django.db.models.fields.related.ForeignKey')(to=orm['sell.Cart'])),
            ('price', self.gf('django.db.models.fields.DecimalField')(max_digits=11, decimal_places=2)),
            ('qty', self.gf('django.db.models.fields.IntegerField')()),
            ('content_type', self.gf('django.db.models.fields.related.ForeignKey')(to=orm['contenttypes.ContentType'])),
            ('object_id', self.gf('django.db.models.fields.PositiveIntegerField')()),
        ))
        db.send_create_signal('sell', ['CartItem'])

        # Adding model 'Sell'
        db.create_table('sell_sell', (
            ('id', self.gf('django.db.models.fields.AutoField')(primary_key=True)),
            ('date_time', self.gf('django.db.models.fields.DateTimeField')(auto_now_add=True, blank=True)),
            ('bidder', self.gf('django.db.models.fields.related.ForeignKey')(to=orm['auth.User'], null=True)),
            ('shop', self.gf('django.db.models.fields.related.ForeignKey')(to=orm['shops.Shop'], null=True)),
            ('completed', self.gf('django.db.models.fields.BooleanField')(default=False, blank=True)),
            ('closed', self.gf('django.db.models.fields.BooleanField')(default=False, blank=True)),
            ('shippingdata', self.gf('django.db.models.fields.related.OneToOneField')(to=orm['sell.ShippingData'], unique=True, null=True, blank=True)),
        ))
        db.send_create_signal('sell', ['Sell'])

        # Adding model 'SellItem'
        db.create_table('sell_sellitem', (
            ('id', self.gf('django.db.models.fields.AutoField')(primary_key=True)),
            ('sell', self.gf('django.db.models.fields.related.ForeignKey')(to=orm['sell.Sell'])),
            ('price', self.gf('django.db.models.fields.DecimalField')(max_digits=11, decimal_places=2)),
            ('qty', self.gf('django.db.models.fields.IntegerField')()),
            ('content_type', self.gf('django.db.models.fields.related.ForeignKey')(to=orm['contenttypes.ContentType'])),
            ('object_id', self.gf('django.db.models.fields.PositiveIntegerField')()),
        ))
        db.send_create_signal('sell', ['SellItem'])

        # Adding model 'Payment'
        db.create_table('sell_payment', (
            ('id', self.gf('django.db.models.fields.AutoField')(primary_key=True)),
            ('shop', self.gf('django.db.models.fields.related.ForeignKey')(to=orm['shops.Shop'])),
            ('sell', self.gf('django.db.models.fields.related.OneToOneField')(to=orm['sell.Sell'], unique=True)),
            ('total', self.gf('django.db.models.fields.DecimalField')(default='0.0', max_digits=11, decimal_places=2)),
            ('state_actual', self.gf('django.db.models.fields.related.OneToOneField')(related_name='payment_history', unique=True, null=True, to=orm['sell.PaymentHistory'])),
        ))
        db.send_create_signal('sell', ['Payment'])

        # Adding model 'PaymentHistory'
        db.create_table('sell_paymenthistory', (
            ('id', self.gf('django.db.models.fields.AutoField')(primary_key=True)),
            ('payment', self.gf('django.db.models.fields.related.ForeignKey')(to=orm['sell.Payment'])),
            ('date_time', self.gf('django.db.models.fields.DateTimeField')(auto_now_add=True, blank=True)),
            ('state', self.gf('django.db.models.fields.CharField')(max_length=2)),
        ))
        db.send_create_signal('sell', ['PaymentHistory'])

        # Adding model 'Shipping'
        db.create_table('sell_shipping', (
            ('id', self.gf('django.db.models.fields.AutoField')(primary_key=True)),
            ('shop', self.gf('django.db.models.fields.related.ForeignKey')(to=orm['shops.Shop'])),
            ('sell', self.gf('django.db.models.fields.related.OneToOneField')(to=orm['sell.Sell'], unique=True)),
            ('state_actual', self.gf('django.db.models.fields.related.OneToOneField')(related_name='shipping_history', unique=True, null=True, to=orm['sell.ShippingHistory'])),
        ))
        db.send_create_signal('sell', ['Shipping'])

        # Adding model 'ShippingHistory'
        db.create_table('sell_shippinghistory', (
            ('id', self.gf('django.db.models.fields.AutoField')(primary_key=True)),
            ('shipping', self.gf('django.db.models.fields.related.ForeignKey')(to=orm['sell.Shipping'])),
            ('date_time', self.gf('django.db.models.fields.DateTimeField')(auto_now_add=True, blank=True)),
            ('state', self.gf('django.db.models.fields.CharField')(max_length=2)),
        ))
        db.send_create_signal('sell', ['ShippingHistory'])


    def backwards(self, orm):
        
        # Deleting model 'ShippingData'
        db.delete_table('sell_shippingdata')

        # Deleting model 'Cart'
        db.delete_table('sell_cart')

        # Deleting model 'CartItem'
        db.delete_table('sell_cartitem')

        # Deleting model 'Sell'
        db.delete_table('sell_sell')

        # Deleting model 'SellItem'
        db.delete_table('sell_sellitem')

        # Deleting model 'Payment'
        db.delete_table('sell_payment')

        # Deleting model 'PaymentHistory'
        db.delete_table('sell_paymenthistory')

        # Deleting model 'Shipping'
        db.delete_table('sell_shipping')

        # Deleting model 'ShippingHistory'
        db.delete_table('sell_shippinghistory')


    models = {
        'auth.group': {
            'Meta': {'object_name': 'Group'},
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '80'}),
            'permissions': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['auth.Permission']", 'symmetrical': 'False', 'blank': 'True'})
        },
        'auth.permission': {
            'Meta': {'unique_together': "(('content_type', 'codename'),)", 'object_name': 'Permission'},
            'codename': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'content_type': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['contenttypes.ContentType']"}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '50'})
        },
        'auth.user': {
            'Meta': {'object_name': 'User'},
            'date_joined': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
            'email': ('django.db.models.fields.EmailField', [], {'max_length': '75'}),
            'first_name': ('django.db.models.fields.CharField', [], {'max_length': '30', 'blank': 'True'}),
            'groups': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['auth.Group']", 'symmetrical': 'False', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'is_active': ('django.db.models.fields.BooleanField', [], {'default': 'True', 'blank': 'True'}),
            'is_staff': ('django.db.models.fields.BooleanField', [], {'default': 'False', 'blank': 'True'}),
            'is_superuser': ('django.db.models.fields.BooleanField', [], {'default': 'False', 'blank': 'True'}),
            'last_login': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
            'last_name': ('django.db.models.fields.CharField', [], {'max_length': '30', 'blank': 'True'}),
            'password': ('django.db.models.fields.CharField', [], {'max_length': '128'}),
            'user_permissions': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['auth.Permission']", 'symmetrical': 'False', 'blank': 'True'}),
            'username': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '32'})
        },
        'contenttypes.contenttype': {
            'Meta': {'unique_together': "(('app_label', 'model'),)", 'object_name': 'ContentType', 'db_table': "'django_content_type'"},
            'app_label': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'model': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '100'})
        },
        'market.marketplace': {
            'Meta': {'object_name': 'MarketPlace'},
            'base_domain': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '128'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '92'}),
            'slug': ('django.db.models.fields.SlugField', [], {'unique': 'True', 'max_length': '92', 'db_index': 'True'}),
            'template_prefix': ('django.db.models.fields.SlugField', [], {'unique': 'True', 'max_length': '92', 'db_index': 'True'}),
            'title': ('django.db.models.fields.CharField', [], {'max_length': '92'})
        },
        'sell.cart': {
            'Meta': {'object_name': 'Cart'},
            'bidder': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['auth.User']"}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'shippingdata': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['sell.ShippingData']", 'unique': 'True', 'null': 'True', 'blank': 'True'}),
            'shop': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['shops.Shop']"})
        },
        'sell.cartitem': {
            'Meta': {'object_name': 'CartItem'},
            'cart': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['sell.Cart']"}),
            'content_type': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['contenttypes.ContentType']"}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'object_id': ('django.db.models.fields.PositiveIntegerField', [], {}),
            'price': ('django.db.models.fields.DecimalField', [], {'max_digits': '11', 'decimal_places': '2'}),
            'qty': ('django.db.models.fields.IntegerField', [], {})
        },
        'sell.payment': {
            'Meta': {'object_name': 'Payment'},
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'sell': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['sell.Sell']", 'unique': 'True'}),
            'shop': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['shops.Shop']"}),
            'state_actual': ('django.db.models.fields.related.OneToOneField', [], {'related_name': "'payment_history'", 'unique': 'True', 'null': 'True', 'to': "orm['sell.PaymentHistory']"}),
            'total': ('django.db.models.fields.DecimalField', [], {'default': "'0.0'", 'max_digits': '11', 'decimal_places': '2'})
        },
        'sell.paymenthistory': {
            'Meta': {'object_name': 'PaymentHistory'},
            'date_time': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'payment': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['sell.Payment']"}),
            'state': ('django.db.models.fields.CharField', [], {'max_length': '2'})
        },
        'sell.sell': {
            'Meta': {'object_name': 'Sell'},
            'bidder': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['auth.User']", 'null': 'True'}),
            'closed': ('django.db.models.fields.BooleanField', [], {'default': 'False', 'blank': 'True'}),
            'completed': ('django.db.models.fields.BooleanField', [], {'default': 'False', 'blank': 'True'}),
            'date_time': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'shippingdata': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['sell.ShippingData']", 'unique': 'True', 'null': 'True', 'blank': 'True'}),
            'shop': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['shops.Shop']", 'null': 'True'})
        },
        'sell.sellitem': {
            'Meta': {'object_name': 'SellItem'},
            'content_type': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['contenttypes.ContentType']"}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'object_id': ('django.db.models.fields.PositiveIntegerField', [], {}),
            'price': ('django.db.models.fields.DecimalField', [], {'max_digits': '11', 'decimal_places': '2'}),
            'qty': ('django.db.models.fields.IntegerField', [], {}),
            'sell': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['sell.Sell']"})
        },
        'sell.shipping': {
            'Meta': {'object_name': 'Shipping'},
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'sell': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['sell.Sell']", 'unique': 'True'}),
            'shop': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['shops.Shop']"}),
            'state_actual': ('django.db.models.fields.related.OneToOneField', [], {'related_name': "'shipping_history'", 'unique': 'True', 'null': 'True', 'to': "orm['sell.ShippingHistory']"})
        },
        'sell.shippingdata': {
            'Meta': {'object_name': 'ShippingData'},
            'city': ('django.db.models.fields.CharField', [], {'max_length': '80', 'null': 'True', 'blank': 'True'}),
            'country': ('django.db.models.fields.CharField', [], {'max_length': '50', 'null': 'True', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'state': ('django.db.models.fields.CharField', [], {'max_length': '80', 'null': 'True', 'blank': 'True'}),
            'street_address': ('django.db.models.fields.CharField', [], {'max_length': '80', 'null': 'True', 'blank': 'True'}),
            'zip': ('django.db.models.fields.CharField', [], {'max_length': '30', 'null': 'True', 'blank': 'True'})
        },
        'sell.shippinghistory': {
            'Meta': {'object_name': 'ShippingHistory'},
            'date_time': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'shipping': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['sell.Shipping']"}),
            'state': ('django.db.models.fields.CharField', [], {'max_length': '2'})
        },
        'shops.shop': {
            'Meta': {'object_name': 'Shop'},
            'admin': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['auth.User']"}),
            'bids': ('django.db.models.fields.IntegerField', [], {'default': '0'}),
            'date_time': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'location': ('django.db.models.fields.CharField', [], {'default': "'39.29038,-76.61219'", 'max_length': '255'}),
            'marketplace': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['market.MarketPlace']"}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '60'}),
            'views': ('django.db.models.fields.IntegerField', [], {'default': '0'})
        }
    }

    complete_apps = ['sell']

########NEW FILE########
__FILENAME__ = 0002_auto__del_field_sell_completed__add_field_sell_payment_method__add_fie
# encoding: utf-8
import datetime
from south.db import db
from south.v2 import SchemaMigration
from django.db import models

class Migration(SchemaMigration):

    def forwards(self, orm):
        
        # Deleting field 'Sell.completed'
        db.delete_column('sell_sell', 'completed')

        # Adding field 'Sell.payment_method'
        db.add_column('sell_sell', 'payment_method', self.gf('django.db.models.fields.CharField')(default='Manual Payment', max_length=255), keep_default=False)

        # Adding field 'Shipping.shipping_service'
        db.add_column('sell_shipping', 'shipping_service', self.gf('django.db.models.fields.CharField')(default='Other', max_length=255), keep_default=False)

        # Adding field 'Shipping.tracking_number'
        db.add_column('sell_shipping', 'tracking_number', self.gf('django.db.models.fields.CharField')(default='--', max_length=255), keep_default=False)


    def backwards(self, orm):
        
        # Adding field 'Sell.completed'
        db.add_column('sell_sell', 'completed', self.gf('django.db.models.fields.BooleanField')(default=False, blank=True), keep_default=False)

        # Deleting field 'Sell.payment_method'
        db.delete_column('sell_sell', 'payment_method')

        # Deleting field 'Shipping.shipping_service'
        db.delete_column('sell_shipping', 'shipping_service')

        # Deleting field 'Shipping.tracking_number'
        db.delete_column('sell_shipping', 'tracking_number')


    models = {
        'auth.group': {
            'Meta': {'object_name': 'Group'},
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '80'}),
            'permissions': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['auth.Permission']", 'symmetrical': 'False', 'blank': 'True'})
        },
        'auth.permission': {
            'Meta': {'unique_together': "(('content_type', 'codename'),)", 'object_name': 'Permission'},
            'codename': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'content_type': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['contenttypes.ContentType']"}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '50'})
        },
        'auth.user': {
            'Meta': {'object_name': 'User'},
            'date_joined': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
            'email': ('django.db.models.fields.EmailField', [], {'max_length': '75'}),
            'first_name': ('django.db.models.fields.CharField', [], {'max_length': '30', 'blank': 'True'}),
            'groups': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['auth.Group']", 'symmetrical': 'False', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'is_active': ('django.db.models.fields.BooleanField', [], {'default': 'True', 'blank': 'True'}),
            'is_staff': ('django.db.models.fields.BooleanField', [], {'default': 'False', 'blank': 'True'}),
            'is_superuser': ('django.db.models.fields.BooleanField', [], {'default': 'False', 'blank': 'True'}),
            'last_login': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
            'last_name': ('django.db.models.fields.CharField', [], {'max_length': '30', 'blank': 'True'}),
            'password': ('django.db.models.fields.CharField', [], {'max_length': '128'}),
            'user_permissions': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['auth.Permission']", 'symmetrical': 'False', 'blank': 'True'}),
            'username': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '32'})
        },
        'contenttypes.contenttype': {
            'Meta': {'unique_together': "(('app_label', 'model'),)", 'object_name': 'ContentType', 'db_table': "'django_content_type'"},
            'app_label': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'model': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '100'})
        },
        'market.marketplace': {
            'Meta': {'object_name': 'MarketPlace'},
            'base_domain': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '128'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '92'}),
            'slug': ('django.db.models.fields.SlugField', [], {'unique': 'True', 'max_length': '92', 'db_index': 'True'}),
            'template_prefix': ('django.db.models.fields.SlugField', [], {'unique': 'True', 'max_length': '92', 'db_index': 'True'}),
            'title': ('django.db.models.fields.CharField', [], {'max_length': '92'})
        },
        'sell.cart': {
            'Meta': {'object_name': 'Cart'},
            'bidder': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['auth.User']"}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'shippingdata': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['sell.ShippingData']", 'unique': 'True', 'null': 'True', 'blank': 'True'}),
            'shop': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['shops.Shop']"})
        },
        'sell.cartitem': {
            'Meta': {'object_name': 'CartItem'},
            'cart': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['sell.Cart']"}),
            'content_type': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['contenttypes.ContentType']"}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'object_id': ('django.db.models.fields.PositiveIntegerField', [], {}),
            'price': ('django.db.models.fields.DecimalField', [], {'max_digits': '11', 'decimal_places': '2'}),
            'qty': ('django.db.models.fields.IntegerField', [], {})
        },
        'sell.payment': {
            'Meta': {'object_name': 'Payment'},
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'sell': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['sell.Sell']", 'unique': 'True'}),
            'shop': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['shops.Shop']"}),
            'state_actual': ('django.db.models.fields.related.OneToOneField', [], {'related_name': "'payment_history'", 'unique': 'True', 'null': 'True', 'to': "orm['sell.PaymentHistory']"}),
            'total': ('django.db.models.fields.DecimalField', [], {'default': "'0.0'", 'max_digits': '11', 'decimal_places': '2'})
        },
        'sell.paymenthistory': {
            'Meta': {'object_name': 'PaymentHistory'},
            'date_time': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'payment': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['sell.Payment']"}),
            'state': ('django.db.models.fields.CharField', [], {'max_length': '2'})
        },
        'sell.sell': {
            'Meta': {'object_name': 'Sell'},
            'bidder': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['auth.User']", 'null': 'True'}),
            'closed': ('django.db.models.fields.BooleanField', [], {'default': 'False', 'blank': 'True'}),
            'date_time': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'payment_method': ('django.db.models.fields.CharField', [], {'default': "'Manual Payment'", 'max_length': '255'}),
            'shippingdata': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['sell.ShippingData']", 'unique': 'True', 'null': 'True', 'blank': 'True'}),
            'shop': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['shops.Shop']", 'null': 'True'})
        },
        'sell.sellitem': {
            'Meta': {'object_name': 'SellItem'},
            'content_type': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['contenttypes.ContentType']"}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'object_id': ('django.db.models.fields.PositiveIntegerField', [], {}),
            'price': ('django.db.models.fields.DecimalField', [], {'max_digits': '11', 'decimal_places': '2'}),
            'qty': ('django.db.models.fields.IntegerField', [], {}),
            'sell': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['sell.Sell']"})
        },
        'sell.shipping': {
            'Meta': {'object_name': 'Shipping'},
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'sell': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['sell.Sell']", 'unique': 'True'}),
            'shipping_service': ('django.db.models.fields.CharField', [], {'default': "'Other'", 'max_length': '255'}),
            'shop': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['shops.Shop']"}),
            'state_actual': ('django.db.models.fields.related.OneToOneField', [], {'related_name': "'shipping_history'", 'unique': 'True', 'null': 'True', 'to': "orm['sell.ShippingHistory']"}),
            'tracking_number': ('django.db.models.fields.CharField', [], {'default': "'--'", 'max_length': '255'})
        },
        'sell.shippingdata': {
            'Meta': {'object_name': 'ShippingData'},
            'city': ('django.db.models.fields.CharField', [], {'max_length': '80', 'null': 'True', 'blank': 'True'}),
            'country': ('django.db.models.fields.CharField', [], {'max_length': '50', 'null': 'True', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'state': ('django.db.models.fields.CharField', [], {'max_length': '80', 'null': 'True', 'blank': 'True'}),
            'street_address': ('django.db.models.fields.CharField', [], {'max_length': '80', 'null': 'True', 'blank': 'True'}),
            'zip': ('django.db.models.fields.CharField', [], {'max_length': '30', 'null': 'True', 'blank': 'True'})
        },
        'sell.shippinghistory': {
            'Meta': {'object_name': 'ShippingHistory'},
            'date_time': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'shipping': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['sell.Shipping']"}),
            'state': ('django.db.models.fields.CharField', [], {'max_length': '2'})
        },
        'shops.shop': {
            'Meta': {'object_name': 'Shop'},
            'admin': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['auth.User']"}),
            'bids': ('django.db.models.fields.IntegerField', [], {'default': '0'}),
            'date_time': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'location': ('django.db.models.fields.CharField', [], {'default': "'39.29038,-76.61219'", 'max_length': '255'}),
            'marketplace': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['market.MarketPlace']"}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '60'}),
            'views': ('django.db.models.fields.IntegerField', [], {'default': '0'})
        }
    }

    complete_apps = ['sell']

########NEW FILE########
__FILENAME__ = 0003_auto__add_field_sell_total__add_field_sell_total_without_taxes__add_fi
# encoding: utf-8
import datetime
from south.db import db
from south.v2 import SchemaMigration
from django.db import models

class Migration(SchemaMigration):

    def forwards(self, orm):
        
        # Adding field 'Sell.total'
        db.add_column('sell_sell', 'total', self.gf('django.db.models.fields.DecimalField')(default='0', max_digits=11, decimal_places=2), keep_default=False)

        # Adding field 'Sell.total_without_taxes'
        db.add_column('sell_sell', 'total_without_taxes', self.gf('django.db.models.fields.DecimalField')(default='0', max_digits=11, decimal_places=2), keep_default=False)

        # Adding field 'Sell.total_taxes'
        db.add_column('sell_sell', 'total_taxes', self.gf('django.db.models.fields.DecimalField')(default='0', max_digits=11, decimal_places=2), keep_default=False)


    def backwards(self, orm):
        
        # Deleting field 'Sell.total'
        db.delete_column('sell_sell', 'total')

        # Deleting field 'Sell.total_without_taxes'
        db.delete_column('sell_sell', 'total_without_taxes')

        # Deleting field 'Sell.total_taxes'
        db.delete_column('sell_sell', 'total_taxes')


    models = {
        'auth.group': {
            'Meta': {'object_name': 'Group'},
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '80'}),
            'permissions': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['auth.Permission']", 'symmetrical': 'False', 'blank': 'True'})
        },
        'auth.permission': {
            'Meta': {'unique_together': "(('content_type', 'codename'),)", 'object_name': 'Permission'},
            'codename': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'content_type': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['contenttypes.ContentType']"}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '50'})
        },
        'auth.user': {
            'Meta': {'object_name': 'User'},
            'date_joined': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
            'email': ('django.db.models.fields.EmailField', [], {'max_length': '75'}),
            'first_name': ('django.db.models.fields.CharField', [], {'max_length': '30', 'blank': 'True'}),
            'groups': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['auth.Group']", 'symmetrical': 'False', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'is_active': ('django.db.models.fields.BooleanField', [], {'default': 'True', 'blank': 'True'}),
            'is_staff': ('django.db.models.fields.BooleanField', [], {'default': 'False', 'blank': 'True'}),
            'is_superuser': ('django.db.models.fields.BooleanField', [], {'default': 'False', 'blank': 'True'}),
            'last_login': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
            'last_name': ('django.db.models.fields.CharField', [], {'max_length': '30', 'blank': 'True'}),
            'password': ('django.db.models.fields.CharField', [], {'max_length': '128'}),
            'user_permissions': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['auth.Permission']", 'symmetrical': 'False', 'blank': 'True'}),
            'username': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '32'})
        },
        'contenttypes.contenttype': {
            'Meta': {'unique_together': "(('app_label', 'model'),)", 'object_name': 'ContentType', 'db_table': "'django_content_type'"},
            'app_label': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'model': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '100'})
        },
        'market.marketplace': {
            'Meta': {'object_name': 'MarketPlace'},
            'base_domain': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '128'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '92'}),
            'slug': ('django.db.models.fields.SlugField', [], {'unique': 'True', 'max_length': '92', 'db_index': 'True'}),
            'template_prefix': ('django.db.models.fields.SlugField', [], {'unique': 'True', 'max_length': '92', 'db_index': 'True'}),
            'title': ('django.db.models.fields.CharField', [], {'max_length': '92'})
        },
        'sell.cart': {
            'Meta': {'object_name': 'Cart'},
            'bidder': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['auth.User']"}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'shippingdata': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['sell.ShippingData']", 'unique': 'True', 'null': 'True', 'blank': 'True'}),
            'shop': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['shops.Shop']"})
        },
        'sell.cartitem': {
            'Meta': {'object_name': 'CartItem'},
            'cart': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['sell.Cart']"}),
            'content_type': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['contenttypes.ContentType']"}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'object_id': ('django.db.models.fields.PositiveIntegerField', [], {}),
            'price': ('django.db.models.fields.DecimalField', [], {'max_digits': '11', 'decimal_places': '2'}),
            'qty': ('django.db.models.fields.IntegerField', [], {})
        },
        'sell.payment': {
            'Meta': {'object_name': 'Payment'},
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'sell': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['sell.Sell']", 'unique': 'True'}),
            'shop': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['shops.Shop']"}),
            'state_actual': ('django.db.models.fields.related.OneToOneField', [], {'related_name': "'payment_history'", 'unique': 'True', 'null': 'True', 'to': "orm['sell.PaymentHistory']"}),
            'total': ('django.db.models.fields.DecimalField', [], {'default': "'0.0'", 'max_digits': '11', 'decimal_places': '2'})
        },
        'sell.paymenthistory': {
            'Meta': {'object_name': 'PaymentHistory'},
            'date_time': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'payment': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['sell.Payment']"}),
            'state': ('django.db.models.fields.CharField', [], {'max_length': '2'})
        },
        'sell.sell': {
            'Meta': {'object_name': 'Sell'},
            'bidder': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['auth.User']", 'null': 'True'}),
            'closed': ('django.db.models.fields.BooleanField', [], {'default': 'False', 'blank': 'True'}),
            'date_time': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'payment_method': ('django.db.models.fields.CharField', [], {'default': "'Manual Payment'", 'max_length': '255'}),
            'shippingdata': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['sell.ShippingData']", 'unique': 'True', 'null': 'True', 'blank': 'True'}),
            'shop': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['shops.Shop']", 'null': 'True'}),
            'total': ('django.db.models.fields.DecimalField', [], {'default': "'0'", 'max_digits': '11', 'decimal_places': '2'}),
            'total_taxes': ('django.db.models.fields.DecimalField', [], {'default': "'0'", 'max_digits': '11', 'decimal_places': '2'}),
            'total_without_taxes': ('django.db.models.fields.DecimalField', [], {'default': "'0'", 'max_digits': '11', 'decimal_places': '2'})
        },
        'sell.sellitem': {
            'Meta': {'object_name': 'SellItem'},
            'content_type': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['contenttypes.ContentType']"}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'object_id': ('django.db.models.fields.PositiveIntegerField', [], {}),
            'price': ('django.db.models.fields.DecimalField', [], {'max_digits': '11', 'decimal_places': '2'}),
            'qty': ('django.db.models.fields.IntegerField', [], {}),
            'sell': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['sell.Sell']"})
        },
        'sell.shipping': {
            'Meta': {'object_name': 'Shipping'},
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'sell': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['sell.Sell']", 'unique': 'True'}),
            'shipping_service': ('django.db.models.fields.CharField', [], {'default': "'Other'", 'max_length': '255'}),
            'shop': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['shops.Shop']"}),
            'state_actual': ('django.db.models.fields.related.OneToOneField', [], {'related_name': "'shipping_history'", 'unique': 'True', 'null': 'True', 'to': "orm['sell.ShippingHistory']"}),
            'tracking_number': ('django.db.models.fields.CharField', [], {'default': "'--'", 'max_length': '255'})
        },
        'sell.shippingdata': {
            'Meta': {'object_name': 'ShippingData'},
            'city': ('django.db.models.fields.CharField', [], {'max_length': '80', 'null': 'True', 'blank': 'True'}),
            'country': ('django.db.models.fields.CharField', [], {'max_length': '50', 'null': 'True', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'state': ('django.db.models.fields.CharField', [], {'max_length': '80', 'null': 'True', 'blank': 'True'}),
            'street_address': ('django.db.models.fields.CharField', [], {'max_length': '80', 'null': 'True', 'blank': 'True'}),
            'zip': ('django.db.models.fields.CharField', [], {'max_length': '30', 'null': 'True', 'blank': 'True'})
        },
        'sell.shippinghistory': {
            'Meta': {'object_name': 'ShippingHistory'},
            'date_time': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'shipping': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['sell.Shipping']"}),
            'state': ('django.db.models.fields.CharField', [], {'max_length': '2'})
        },
        'shops.shop': {
            'Meta': {'object_name': 'Shop'},
            'admin': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['auth.User']"}),
            'bids': ('django.db.models.fields.IntegerField', [], {'default': '0'}),
            'date_time': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'location': ('django.db.models.fields.CharField', [], {'default': "'39.29038,-76.61219'", 'max_length': '255'}),
            'marketplace': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['market.MarketPlace']"}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '60'}),
            'views': ('django.db.models.fields.IntegerField', [], {'default': '0'})
        }
    }

    complete_apps = ['sell']

########NEW FILE########
__FILENAME__ = 0004_auto__add_field_sell_cancel
# encoding: utf-8
import datetime
from south.db import db
from south.v2 import SchemaMigration
from django.db import models

class Migration(SchemaMigration):

    def forwards(self, orm):
        
        # Adding field 'Sell.cancel'
        db.add_column('sell_sell', 'cancel', self.gf('django.db.models.fields.BooleanField')(default=False, blank=True), keep_default=False)


    def backwards(self, orm):
        
        # Deleting field 'Sell.cancel'
        db.delete_column('sell_sell', 'cancel')


    models = {
        'auth.group': {
            'Meta': {'object_name': 'Group'},
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '80'}),
            'permissions': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['auth.Permission']", 'symmetrical': 'False', 'blank': 'True'})
        },
        'auth.permission': {
            'Meta': {'unique_together': "(('content_type', 'codename'),)", 'object_name': 'Permission'},
            'codename': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'content_type': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['contenttypes.ContentType']"}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '50'})
        },
        'auth.user': {
            'Meta': {'object_name': 'User'},
            'date_joined': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
            'email': ('django.db.models.fields.EmailField', [], {'max_length': '75'}),
            'first_name': ('django.db.models.fields.CharField', [], {'max_length': '30', 'blank': 'True'}),
            'groups': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['auth.Group']", 'symmetrical': 'False', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'is_active': ('django.db.models.fields.BooleanField', [], {'default': 'True', 'blank': 'True'}),
            'is_staff': ('django.db.models.fields.BooleanField', [], {'default': 'False', 'blank': 'True'}),
            'is_superuser': ('django.db.models.fields.BooleanField', [], {'default': 'False', 'blank': 'True'}),
            'last_login': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
            'last_name': ('django.db.models.fields.CharField', [], {'max_length': '30', 'blank': 'True'}),
            'password': ('django.db.models.fields.CharField', [], {'max_length': '128'}),
            'user_permissions': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['auth.Permission']", 'symmetrical': 'False', 'blank': 'True'}),
            'username': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '32'})
        },
        'contenttypes.contenttype': {
            'Meta': {'unique_together': "(('app_label', 'model'),)", 'object_name': 'ContentType', 'db_table': "'django_content_type'"},
            'app_label': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'model': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '100'})
        },
        'market.marketplace': {
            'Meta': {'object_name': 'MarketPlace'},
            'base_domain': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '128'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '92'}),
            'slug': ('django.db.models.fields.SlugField', [], {'unique': 'True', 'max_length': '92', 'db_index': 'True'}),
            'template_prefix': ('django.db.models.fields.SlugField', [], {'unique': 'True', 'max_length': '92', 'db_index': 'True'}),
            'title': ('django.db.models.fields.CharField', [], {'max_length': '92'})
        },
        'sell.cart': {
            'Meta': {'object_name': 'Cart'},
            'bidder': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['auth.User']"}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'shippingdata': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['sell.ShippingData']", 'unique': 'True', 'null': 'True', 'blank': 'True'}),
            'shop': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['shops.Shop']"})
        },
        'sell.cartitem': {
            'Meta': {'object_name': 'CartItem'},
            'cart': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['sell.Cart']"}),
            'content_type': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['contenttypes.ContentType']"}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'object_id': ('django.db.models.fields.PositiveIntegerField', [], {}),
            'price': ('django.db.models.fields.DecimalField', [], {'max_digits': '11', 'decimal_places': '2'}),
            'qty': ('django.db.models.fields.IntegerField', [], {})
        },
        'sell.payment': {
            'Meta': {'object_name': 'Payment'},
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'sell': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['sell.Sell']", 'unique': 'True'}),
            'shop': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['shops.Shop']"}),
            'state_actual': ('django.db.models.fields.related.OneToOneField', [], {'related_name': "'payment_history'", 'unique': 'True', 'null': 'True', 'to': "orm['sell.PaymentHistory']"}),
            'total': ('django.db.models.fields.DecimalField', [], {'default': "'0.0'", 'max_digits': '11', 'decimal_places': '2'})
        },
        'sell.paymenthistory': {
            'Meta': {'object_name': 'PaymentHistory'},
            'date_time': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'payment': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['sell.Payment']"}),
            'state': ('django.db.models.fields.CharField', [], {'max_length': '2'})
        },
        'sell.sell': {
            'Meta': {'object_name': 'Sell'},
            'bidder': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['auth.User']", 'null': 'True'}),
            'cancel': ('django.db.models.fields.BooleanField', [], {'default': 'False', 'blank': 'True'}),
            'closed': ('django.db.models.fields.BooleanField', [], {'default': 'False', 'blank': 'True'}),
            'date_time': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'payment_method': ('django.db.models.fields.CharField', [], {'default': "'Manual Payment'", 'max_length': '255'}),
            'shippingdata': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['sell.ShippingData']", 'unique': 'True', 'null': 'True', 'blank': 'True'}),
            'shop': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['shops.Shop']", 'null': 'True'}),
            'total': ('django.db.models.fields.DecimalField', [], {'default': "'0'", 'max_digits': '11', 'decimal_places': '2'}),
            'total_taxes': ('django.db.models.fields.DecimalField', [], {'default': "'0'", 'max_digits': '11', 'decimal_places': '2'}),
            'total_without_taxes': ('django.db.models.fields.DecimalField', [], {'default': "'0'", 'max_digits': '11', 'decimal_places': '2'})
        },
        'sell.sellitem': {
            'Meta': {'object_name': 'SellItem'},
            'content_type': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['contenttypes.ContentType']"}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'object_id': ('django.db.models.fields.PositiveIntegerField', [], {}),
            'price': ('django.db.models.fields.DecimalField', [], {'max_digits': '11', 'decimal_places': '2'}),
            'qty': ('django.db.models.fields.IntegerField', [], {}),
            'sell': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['sell.Sell']"})
        },
        'sell.shipping': {
            'Meta': {'object_name': 'Shipping'},
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'sell': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['sell.Sell']", 'unique': 'True'}),
            'shipping_service': ('django.db.models.fields.CharField', [], {'default': "'Other'", 'max_length': '255'}),
            'shop': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['shops.Shop']"}),
            'state_actual': ('django.db.models.fields.related.OneToOneField', [], {'related_name': "'shipping_history'", 'unique': 'True', 'null': 'True', 'to': "orm['sell.ShippingHistory']"}),
            'tracking_number': ('django.db.models.fields.CharField', [], {'default': "'--'", 'max_length': '255'})
        },
        'sell.shippingdata': {
            'Meta': {'object_name': 'ShippingData'},
            'city': ('django.db.models.fields.CharField', [], {'max_length': '80', 'null': 'True', 'blank': 'True'}),
            'country': ('django.db.models.fields.CharField', [], {'max_length': '50', 'null': 'True', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'state': ('django.db.models.fields.CharField', [], {'max_length': '80', 'null': 'True', 'blank': 'True'}),
            'street_address': ('django.db.models.fields.CharField', [], {'max_length': '80', 'null': 'True', 'blank': 'True'}),
            'zip': ('django.db.models.fields.CharField', [], {'max_length': '30', 'null': 'True', 'blank': 'True'})
        },
        'sell.shippinghistory': {
            'Meta': {'object_name': 'ShippingHistory'},
            'date_time': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'shipping': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['sell.Shipping']"}),
            'state': ('django.db.models.fields.CharField', [], {'max_length': '2'})
        },
        'shops.shop': {
            'Meta': {'object_name': 'Shop'},
            'admin': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['auth.User']"}),
            'bids': ('django.db.models.fields.IntegerField', [], {'default': '0'}),
            'date_time': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'location': ('django.db.models.fields.CharField', [], {'default': "'39.29038,-76.61219'", 'max_length': '255'}),
            'marketplace': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['market.MarketPlace']"}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '60'}),
            'views': ('django.db.models.fields.IntegerField', [], {'default': '0'})
        }
    }

    complete_apps = ['sell']

########NEW FILE########
__FILENAME__ = 0005_auto__add_field_sell_total_shipping__chg_field_shippingdata_city__chg_
# encoding: utf-8
import datetime
from south.db import db
from south.v2 import SchemaMigration
from django.db import models

class Migration(SchemaMigration):

    def forwards(self, orm):
        
        # Adding field 'Sell.total_shipping'
        db.add_column('sell_sell', 'total_shipping', self.gf('django.db.models.fields.DecimalField')(default='0', max_digits=11, decimal_places=2), keep_default=False)

        # Changing field 'ShippingData.city'
        db.alter_column('sell_shippingdata', 'city', self.gf('django.db.models.fields.CharField')(max_length=80))

        # Changing field 'ShippingData.zip'
        db.alter_column('sell_shippingdata', 'zip', self.gf('django.db.models.fields.CharField')(max_length=30))

        # Changing field 'ShippingData.country'
        db.alter_column('sell_shippingdata', 'country', self.gf('django.db.models.fields.CharField')(max_length=50))

        # Changing field 'ShippingData.state'
        db.alter_column('sell_shippingdata', 'state', self.gf('django.db.models.fields.CharField')(max_length=80))

        # Changing field 'ShippingData.street_address'
        db.alter_column('sell_shippingdata', 'street_address', self.gf('django.db.models.fields.CharField')(max_length=80))


    def backwards(self, orm):
        
        # Deleting field 'Sell.total_shipping'
        db.delete_column('sell_sell', 'total_shipping')

        # Changing field 'ShippingData.city'
        db.alter_column('sell_shippingdata', 'city', self.gf('django.db.models.fields.CharField')(max_length=80, null=True, blank=True))

        # Changing field 'ShippingData.zip'
        db.alter_column('sell_shippingdata', 'zip', self.gf('django.db.models.fields.CharField')(max_length=30, null=True, blank=True))

        # Changing field 'ShippingData.country'
        db.alter_column('sell_shippingdata', 'country', self.gf('django.db.models.fields.CharField')(max_length=50, null=True, blank=True))

        # Changing field 'ShippingData.state'
        db.alter_column('sell_shippingdata', 'state', self.gf('django.db.models.fields.CharField')(max_length=80, null=True, blank=True))

        # Changing field 'ShippingData.street_address'
        db.alter_column('sell_shippingdata', 'street_address', self.gf('django.db.models.fields.CharField')(max_length=80, null=True, blank=True))


    models = {
        'auth.group': {
            'Meta': {'object_name': 'Group'},
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '80'}),
            'permissions': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['auth.Permission']", 'symmetrical': 'False', 'blank': 'True'})
        },
        'auth.permission': {
            'Meta': {'unique_together': "(('content_type', 'codename'),)", 'object_name': 'Permission'},
            'codename': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'content_type': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['contenttypes.ContentType']"}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '50'})
        },
        'auth.user': {
            'Meta': {'object_name': 'User'},
            'date_joined': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
            'email': ('django.db.models.fields.EmailField', [], {'max_length': '75'}),
            'first_name': ('django.db.models.fields.CharField', [], {'max_length': '30', 'blank': 'True'}),
            'groups': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['auth.Group']", 'symmetrical': 'False', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'is_active': ('django.db.models.fields.BooleanField', [], {'default': 'True', 'blank': 'True'}),
            'is_staff': ('django.db.models.fields.BooleanField', [], {'default': 'False', 'blank': 'True'}),
            'is_superuser': ('django.db.models.fields.BooleanField', [], {'default': 'False', 'blank': 'True'}),
            'last_login': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
            'last_name': ('django.db.models.fields.CharField', [], {'max_length': '30', 'blank': 'True'}),
            'password': ('django.db.models.fields.CharField', [], {'max_length': '128'}),
            'user_permissions': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['auth.Permission']", 'symmetrical': 'False', 'blank': 'True'}),
            'username': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '32'})
        },
        'contenttypes.contenttype': {
            'Meta': {'unique_together': "(('app_label', 'model'),)", 'object_name': 'ContentType', 'db_table': "'django_content_type'"},
            'app_label': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'model': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '100'})
        },
        'market.marketplace': {
            'Meta': {'object_name': 'MarketPlace'},
            'base_domain': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '128'}),
            'charge_on_card_as': ('django.db.models.fields.CharField', [], {'default': "''", 'unique': 'True', 'max_length': '255'}),
            'contact_email': ('django.db.models.fields.EmailField', [], {'default': "'contact@yourstore.com'", 'max_length': '75'}),
            'contact_phone': ('django.db.models.fields.CharField', [], {'default': "''", 'max_length': '128'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '92'}),
            'slug': ('django.db.models.fields.SlugField', [], {'unique': 'True', 'max_length': '92', 'db_index': 'True'}),
            'template_prefix': ('django.db.models.fields.SlugField', [], {'unique': 'True', 'max_length': '92', 'db_index': 'True'}),
            'title': ('django.db.models.fields.CharField', [], {'max_length': '92'})
        },
        'sell.cart': {
            'Meta': {'object_name': 'Cart'},
            'bidder': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['auth.User']"}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'shippingdata': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['sell.ShippingData']", 'unique': 'True', 'null': 'True', 'blank': 'True'}),
            'shop': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['shops.Shop']"})
        },
        'sell.cartitem': {
            'Meta': {'object_name': 'CartItem'},
            'cart': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['sell.Cart']"}),
            'content_type': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['contenttypes.ContentType']"}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'object_id': ('django.db.models.fields.PositiveIntegerField', [], {}),
            'price': ('django.db.models.fields.DecimalField', [], {'max_digits': '11', 'decimal_places': '2'}),
            'qty': ('django.db.models.fields.IntegerField', [], {})
        },
        'sell.payment': {
            'Meta': {'object_name': 'Payment'},
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'sell': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['sell.Sell']", 'unique': 'True'}),
            'shop': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['shops.Shop']"}),
            'state_actual': ('django.db.models.fields.related.OneToOneField', [], {'related_name': "'payment_history'", 'unique': 'True', 'null': 'True', 'to': "orm['sell.PaymentHistory']"}),
            'total': ('django.db.models.fields.DecimalField', [], {'default': "'0.0'", 'max_digits': '11', 'decimal_places': '2'})
        },
        'sell.paymenthistory': {
            'Meta': {'object_name': 'PaymentHistory'},
            'date_time': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'payment': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['sell.Payment']"}),
            'state': ('django.db.models.fields.CharField', [], {'max_length': '2'})
        },
        'sell.sell': {
            'Meta': {'object_name': 'Sell'},
            'bidder': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['auth.User']", 'null': 'True'}),
            'cancel': ('django.db.models.fields.BooleanField', [], {'default': 'False', 'blank': 'True'}),
            'closed': ('django.db.models.fields.BooleanField', [], {'default': 'False', 'blank': 'True'}),
            'date_time': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'payment_method': ('django.db.models.fields.CharField', [], {'default': "'Manual Payment'", 'max_length': '255'}),
            'shippingdata': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['sell.ShippingData']", 'unique': 'True', 'null': 'True', 'blank': 'True'}),
            'shop': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['shops.Shop']", 'null': 'True'}),
            'total': ('django.db.models.fields.DecimalField', [], {'default': "'0'", 'max_digits': '11', 'decimal_places': '2'}),
            'total_shipping': ('django.db.models.fields.DecimalField', [], {'default': "'0'", 'max_digits': '11', 'decimal_places': '2'}),
            'total_taxes': ('django.db.models.fields.DecimalField', [], {'default': "'0'", 'max_digits': '11', 'decimal_places': '2'}),
            'total_without_taxes': ('django.db.models.fields.DecimalField', [], {'default': "'0'", 'max_digits': '11', 'decimal_places': '2'})
        },
        'sell.sellitem': {
            'Meta': {'object_name': 'SellItem'},
            'content_type': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['contenttypes.ContentType']"}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'object_id': ('django.db.models.fields.PositiveIntegerField', [], {}),
            'price': ('django.db.models.fields.DecimalField', [], {'max_digits': '11', 'decimal_places': '2'}),
            'qty': ('django.db.models.fields.IntegerField', [], {}),
            'sell': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['sell.Sell']"})
        },
        'sell.shipping': {
            'Meta': {'object_name': 'Shipping'},
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'sell': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['sell.Sell']", 'unique': 'True'}),
            'shipping_service': ('django.db.models.fields.CharField', [], {'default': "'Other'", 'max_length': '255'}),
            'shop': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['shops.Shop']"}),
            'state_actual': ('django.db.models.fields.related.OneToOneField', [], {'related_name': "'shipping_history'", 'unique': 'True', 'null': 'True', 'to': "orm['sell.ShippingHistory']"}),
            'tracking_number': ('django.db.models.fields.CharField', [], {'default': "'--'", 'max_length': '255'})
        },
        'sell.shippingdata': {
            'Meta': {'object_name': 'ShippingData'},
            'city': ('django.db.models.fields.CharField', [], {'max_length': '80'}),
            'country': ('django.db.models.fields.CharField', [], {'max_length': '50'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'state': ('django.db.models.fields.CharField', [], {'max_length': '80'}),
            'street_address': ('django.db.models.fields.CharField', [], {'max_length': '80'}),
            'zip': ('django.db.models.fields.CharField', [], {'max_length': '30'})
        },
        'sell.shippinghistory': {
            'Meta': {'object_name': 'ShippingHistory'},
            'date_time': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'shipping': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['sell.Shipping']"}),
            'state': ('django.db.models.fields.CharField', [], {'max_length': '2'})
        },
        'shops.shop': {
            'Meta': {'object_name': 'Shop'},
            'admin': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['auth.User']"}),
            'bids': ('django.db.models.fields.IntegerField', [], {'default': '0'}),
            'date_time': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'location': ('django.db.models.fields.CharField', [], {'default': "'39.29038,-76.61219'", 'max_length': '255'}),
            'marketplace': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['market.MarketPlace']"}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '60'}),
            'views': ('django.db.models.fields.IntegerField', [], {'default': '0'})
        }
    }

    complete_apps = ['sell']

########NEW FILE########
__FILENAME__ = 0006_auto__add_field_shippingdata_first_name__add_field_shippingdata_last_n
# encoding: utf-8
import datetime
from south.db import db
from south.v2 import SchemaMigration
from django.db import models

class Migration(SchemaMigration):

    def forwards(self, orm):
        
        # Adding field 'ShippingData.first_name'
        db.add_column('sell_shippingdata', 'first_name', self.gf('django.db.models.fields.CharField')(default='', max_length=80), keep_default=False)

        # Adding field 'ShippingData.last_name'
        db.add_column('sell_shippingdata', 'last_name', self.gf('django.db.models.fields.CharField')(default='', max_length=80), keep_default=False)


    def backwards(self, orm):
        
        # Deleting field 'ShippingData.first_name'
        db.delete_column('sell_shippingdata', 'first_name')

        # Deleting field 'ShippingData.last_name'
        db.delete_column('sell_shippingdata', 'last_name')


    models = {
        'auth.group': {
            'Meta': {'object_name': 'Group'},
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '80'}),
            'permissions': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['auth.Permission']", 'symmetrical': 'False', 'blank': 'True'})
        },
        'auth.permission': {
            'Meta': {'unique_together': "(('content_type', 'codename'),)", 'object_name': 'Permission'},
            'codename': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'content_type': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['contenttypes.ContentType']"}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '50'})
        },
        'auth.user': {
            'Meta': {'object_name': 'User'},
            'date_joined': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
            'email': ('django.db.models.fields.EmailField', [], {'max_length': '75'}),
            'first_name': ('django.db.models.fields.CharField', [], {'max_length': '30', 'blank': 'True'}),
            'groups': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['auth.Group']", 'symmetrical': 'False', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'is_active': ('django.db.models.fields.BooleanField', [], {'default': 'True', 'blank': 'True'}),
            'is_staff': ('django.db.models.fields.BooleanField', [], {'default': 'False', 'blank': 'True'}),
            'is_superuser': ('django.db.models.fields.BooleanField', [], {'default': 'False', 'blank': 'True'}),
            'last_login': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
            'last_name': ('django.db.models.fields.CharField', [], {'max_length': '30', 'blank': 'True'}),
            'password': ('django.db.models.fields.CharField', [], {'max_length': '128'}),
            'user_permissions': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['auth.Permission']", 'symmetrical': 'False', 'blank': 'True'}),
            'username': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '32'})
        },
        'contenttypes.contenttype': {
            'Meta': {'unique_together': "(('app_label', 'model'),)", 'object_name': 'ContentType', 'db_table': "'django_content_type'"},
            'app_label': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'model': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '100'})
        },
        'market.marketplace': {
            'Meta': {'object_name': 'MarketPlace'},
            'base_domain': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '128'}),
            'charge_on_card_as': ('django.db.models.fields.CharField', [], {'default': "''", 'max_length': '255'}),
            'contact_email': ('django.db.models.fields.EmailField', [], {'default': "'contact@yourstore.com'", 'max_length': '75'}),
            'contact_phone': ('django.db.models.fields.CharField', [], {'default': "''", 'max_length': '128'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '92'}),
            'slug': ('django.db.models.fields.SlugField', [], {'unique': 'True', 'max_length': '92', 'db_index': 'True'}),
            'template_prefix': ('django.db.models.fields.SlugField', [], {'unique': 'True', 'max_length': '92', 'db_index': 'True'}),
            'title': ('django.db.models.fields.CharField', [], {'max_length': '92'})
        },
        'sell.cart': {
            'Meta': {'object_name': 'Cart'},
            'bidder': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['auth.User']"}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'shippingdata': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['sell.ShippingData']", 'unique': 'True', 'null': 'True', 'blank': 'True'}),
            'shop': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['shops.Shop']"})
        },
        'sell.cartitem': {
            'Meta': {'object_name': 'CartItem'},
            'cart': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['sell.Cart']"}),
            'content_type': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['contenttypes.ContentType']"}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'object_id': ('django.db.models.fields.PositiveIntegerField', [], {}),
            'price': ('django.db.models.fields.DecimalField', [], {'max_digits': '11', 'decimal_places': '2'}),
            'qty': ('django.db.models.fields.IntegerField', [], {})
        },
        'sell.payment': {
            'Meta': {'object_name': 'Payment'},
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'sell': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['sell.Sell']", 'unique': 'True'}),
            'shop': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['shops.Shop']"}),
            'state_actual': ('django.db.models.fields.related.OneToOneField', [], {'related_name': "'payment_history'", 'unique': 'True', 'null': 'True', 'to': "orm['sell.PaymentHistory']"}),
            'total': ('django.db.models.fields.DecimalField', [], {'default': "'0.0'", 'max_digits': '11', 'decimal_places': '2'})
        },
        'sell.paymenthistory': {
            'Meta': {'object_name': 'PaymentHistory'},
            'date_time': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'payment': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['sell.Payment']"}),
            'state': ('django.db.models.fields.CharField', [], {'max_length': '2'})
        },
        'sell.sell': {
            'Meta': {'object_name': 'Sell'},
            'bidder': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['auth.User']", 'null': 'True'}),
            'cancel': ('django.db.models.fields.BooleanField', [], {'default': 'False', 'blank': 'True'}),
            'closed': ('django.db.models.fields.BooleanField', [], {'default': 'False', 'blank': 'True'}),
            'date_time': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'payment_method': ('django.db.models.fields.CharField', [], {'default': "'Manual Payment'", 'max_length': '255'}),
            'shippingdata': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['sell.ShippingData']", 'unique': 'True', 'null': 'True', 'blank': 'True'}),
            'shop': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['shops.Shop']", 'null': 'True'}),
            'total': ('django.db.models.fields.DecimalField', [], {'default': "'0'", 'max_digits': '11', 'decimal_places': '2'}),
            'total_shipping': ('django.db.models.fields.DecimalField', [], {'default': "'0'", 'max_digits': '11', 'decimal_places': '2'}),
            'total_taxes': ('django.db.models.fields.DecimalField', [], {'default': "'0'", 'max_digits': '11', 'decimal_places': '2'}),
            'total_without_taxes': ('django.db.models.fields.DecimalField', [], {'default': "'0'", 'max_digits': '11', 'decimal_places': '2'})
        },
        'sell.sellitem': {
            'Meta': {'object_name': 'SellItem'},
            'content_type': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['contenttypes.ContentType']"}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'object_id': ('django.db.models.fields.PositiveIntegerField', [], {}),
            'price': ('django.db.models.fields.DecimalField', [], {'max_digits': '11', 'decimal_places': '2'}),
            'qty': ('django.db.models.fields.IntegerField', [], {}),
            'sell': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['sell.Sell']"})
        },
        'sell.shipping': {
            'Meta': {'object_name': 'Shipping'},
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'sell': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['sell.Sell']", 'unique': 'True'}),
            'shipping_service': ('django.db.models.fields.CharField', [], {'default': "'Other'", 'max_length': '255'}),
            'shop': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['shops.Shop']"}),
            'state_actual': ('django.db.models.fields.related.OneToOneField', [], {'related_name': "'shipping_history'", 'unique': 'True', 'null': 'True', 'to': "orm['sell.ShippingHistory']"}),
            'tracking_number': ('django.db.models.fields.CharField', [], {'default': "'--'", 'max_length': '255'})
        },
        'sell.shippingdata': {
            'Meta': {'object_name': 'ShippingData'},
            'city': ('django.db.models.fields.CharField', [], {'max_length': '80'}),
            'country': ('django.db.models.fields.CharField', [], {'max_length': '50'}),
            'first_name': ('django.db.models.fields.CharField', [], {'max_length': '80'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'last_name': ('django.db.models.fields.CharField', [], {'max_length': '80'}),
            'state': ('django.db.models.fields.CharField', [], {'max_length': '80'}),
            'street_address': ('django.db.models.fields.CharField', [], {'max_length': '80'}),
            'zip': ('django.db.models.fields.CharField', [], {'max_length': '30'})
        },
        'sell.shippinghistory': {
            'Meta': {'object_name': 'ShippingHistory'},
            'date_time': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'shipping': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['sell.Shipping']"}),
            'state': ('django.db.models.fields.CharField', [], {'max_length': '2'})
        },
        'shops.shop': {
            'Meta': {'object_name': 'Shop'},
            'active': ('django.db.models.fields.BooleanField', [], {'default': 'True', 'blank': 'True'}),
            'admin': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['auth.User']"}),
            'bids': ('django.db.models.fields.IntegerField', [], {'default': '0'}),
            'date_time': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'last_date_to_change_layout': ('django.db.models.fields.DateTimeField', [], {'null': 'True', 'blank': 'True'}),
            'last_date_to_post': ('django.db.models.fields.DateTimeField', [], {'null': 'True', 'blank': 'True'}),
            'location': ('django.db.models.fields.CharField', [], {'default': "'39.29038,-76.61219'", 'max_length': '255'}),
            'marketplace': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['market.MarketPlace']"}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '60'}),
            'views': ('django.db.models.fields.IntegerField', [], {'default': '0'})
        }
    }

    complete_apps = ['sell']

########NEW FILE########
__FILENAME__ = 0007_auto__add_field_cart_creation_date
# encoding: utf-8
import datetime
from south.db import db
from south.v2 import SchemaMigration
from django.db import models

class Migration(SchemaMigration):

    def forwards(self, orm):
        
        # Adding field 'Cart.creation_date'
        db.add_column('sell_cart', 'creation_date', self.gf('django.db.models.fields.DateTimeField')(auto_now_add=True, null=True, blank=True), keep_default=False)


    def backwards(self, orm):
        
        # Deleting field 'Cart.creation_date'
        db.delete_column('sell_cart', 'creation_date')


    models = {
        'auth.group': {
            'Meta': {'object_name': 'Group'},
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '80'}),
            'permissions': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['auth.Permission']", 'symmetrical': 'False', 'blank': 'True'})
        },
        'auth.permission': {
            'Meta': {'unique_together': "(('content_type', 'codename'),)", 'object_name': 'Permission'},
            'codename': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'content_type': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['contenttypes.ContentType']"}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '50'})
        },
        'auth.user': {
            'Meta': {'object_name': 'User'},
            'date_joined': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
            'email': ('django.db.models.fields.EmailField', [], {'max_length': '75'}),
            'first_name': ('django.db.models.fields.CharField', [], {'max_length': '30', 'blank': 'True'}),
            'groups': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['auth.Group']", 'symmetrical': 'False', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'is_active': ('django.db.models.fields.BooleanField', [], {'default': 'True', 'blank': 'True'}),
            'is_staff': ('django.db.models.fields.BooleanField', [], {'default': 'False', 'blank': 'True'}),
            'is_superuser': ('django.db.models.fields.BooleanField', [], {'default': 'False', 'blank': 'True'}),
            'last_login': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
            'last_name': ('django.db.models.fields.CharField', [], {'max_length': '30', 'blank': 'True'}),
            'password': ('django.db.models.fields.CharField', [], {'max_length': '128'}),
            'user_permissions': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['auth.Permission']", 'symmetrical': 'False', 'blank': 'True'}),
            'username': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '32'})
        },
        'contenttypes.contenttype': {
            'Meta': {'unique_together': "(('app_label', 'model'),)", 'object_name': 'ContentType', 'db_table': "'django_content_type'"},
            'app_label': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'model': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '100'})
        },
        'market.marketplace': {
            'Meta': {'object_name': 'MarketPlace'},
            'base_domain': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '128'}),
            'charge_on_card_as': ('django.db.models.fields.CharField', [], {'default': "''", 'max_length': '255'}),
            'contact_email': ('django.db.models.fields.EmailField', [], {'default': "'contact@yourstore.com'", 'max_length': '75'}),
            'contact_phone': ('django.db.models.fields.CharField', [], {'default': "''", 'max_length': '128'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '92'}),
            'slug': ('django.db.models.fields.SlugField', [], {'unique': 'True', 'max_length': '92', 'db_index': 'True'}),
            'template_prefix': ('django.db.models.fields.SlugField', [], {'unique': 'True', 'max_length': '92', 'db_index': 'True'}),
            'title': ('django.db.models.fields.CharField', [], {'max_length': '92'})
        },
        'sell.cart': {
            'Meta': {'object_name': 'Cart'},
            'bidder': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['auth.User']"}),
            'creation_date': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'null': 'True', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'shippingdata': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['sell.ShippingData']", 'unique': 'True', 'null': 'True', 'blank': 'True'}),
            'shop': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['shops.Shop']"})
        },
        'sell.cartitem': {
            'Meta': {'object_name': 'CartItem'},
            'cart': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['sell.Cart']"}),
            'content_type': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['contenttypes.ContentType']"}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'object_id': ('django.db.models.fields.PositiveIntegerField', [], {}),
            'price': ('django.db.models.fields.DecimalField', [], {'max_digits': '11', 'decimal_places': '2'}),
            'qty': ('django.db.models.fields.IntegerField', [], {})
        },
        'sell.payment': {
            'Meta': {'object_name': 'Payment'},
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'sell': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['sell.Sell']", 'unique': 'True'}),
            'shop': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['shops.Shop']"}),
            'state_actual': ('django.db.models.fields.related.OneToOneField', [], {'related_name': "'payment_history'", 'unique': 'True', 'null': 'True', 'to': "orm['sell.PaymentHistory']"}),
            'total': ('django.db.models.fields.DecimalField', [], {'default': "'0.0'", 'max_digits': '11', 'decimal_places': '2'})
        },
        'sell.paymenthistory': {
            'Meta': {'object_name': 'PaymentHistory'},
            'date_time': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'payment': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['sell.Payment']"}),
            'state': ('django.db.models.fields.CharField', [], {'max_length': '2'})
        },
        'sell.sell': {
            'Meta': {'object_name': 'Sell'},
            'bidder': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['auth.User']", 'null': 'True'}),
            'cancel': ('django.db.models.fields.BooleanField', [], {'default': 'False', 'blank': 'True'}),
            'closed': ('django.db.models.fields.BooleanField', [], {'default': 'False', 'blank': 'True'}),
            'date_time': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'payment_method': ('django.db.models.fields.CharField', [], {'default': "'Manual Payment'", 'max_length': '255'}),
            'shippingdata': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['sell.ShippingData']", 'unique': 'True', 'null': 'True', 'blank': 'True'}),
            'shop': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['shops.Shop']", 'null': 'True'}),
            'total': ('django.db.models.fields.DecimalField', [], {'default': "'0'", 'max_digits': '11', 'decimal_places': '2'}),
            'total_shipping': ('django.db.models.fields.DecimalField', [], {'default': "'0'", 'max_digits': '11', 'decimal_places': '2'}),
            'total_taxes': ('django.db.models.fields.DecimalField', [], {'default': "'0'", 'max_digits': '11', 'decimal_places': '2'}),
            'total_without_taxes': ('django.db.models.fields.DecimalField', [], {'default': "'0'", 'max_digits': '11', 'decimal_places': '2'})
        },
        'sell.sellitem': {
            'Meta': {'object_name': 'SellItem'},
            'content_type': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['contenttypes.ContentType']"}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'object_id': ('django.db.models.fields.PositiveIntegerField', [], {}),
            'price': ('django.db.models.fields.DecimalField', [], {'max_digits': '11', 'decimal_places': '2'}),
            'qty': ('django.db.models.fields.IntegerField', [], {}),
            'sell': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['sell.Sell']"})
        },
        'sell.shipping': {
            'Meta': {'object_name': 'Shipping'},
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'sell': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['sell.Sell']", 'unique': 'True'}),
            'shipping_service': ('django.db.models.fields.CharField', [], {'default': "'Other'", 'max_length': '255'}),
            'shop': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['shops.Shop']"}),
            'state_actual': ('django.db.models.fields.related.OneToOneField', [], {'related_name': "'shipping_history'", 'unique': 'True', 'null': 'True', 'to': "orm['sell.ShippingHistory']"}),
            'tracking_number': ('django.db.models.fields.CharField', [], {'default': "'--'", 'max_length': '255'})
        },
        'sell.shippingdata': {
            'Meta': {'object_name': 'ShippingData'},
            'city': ('django.db.models.fields.CharField', [], {'max_length': '80'}),
            'country': ('django.db.models.fields.CharField', [], {'max_length': '50'}),
            'first_name': ('django.db.models.fields.CharField', [], {'max_length': '80'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'last_name': ('django.db.models.fields.CharField', [], {'max_length': '80'}),
            'state': ('django.db.models.fields.CharField', [], {'max_length': '80'}),
            'street_address': ('django.db.models.fields.CharField', [], {'max_length': '80'}),
            'zip': ('django.db.models.fields.CharField', [], {'max_length': '30'})
        },
        'sell.shippinghistory': {
            'Meta': {'object_name': 'ShippingHistory'},
            'date_time': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'shipping': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['sell.Shipping']"}),
            'state': ('django.db.models.fields.CharField', [], {'max_length': '2'})
        },
        'shops.shop': {
            'Meta': {'object_name': 'Shop'},
            'active': ('django.db.models.fields.BooleanField', [], {'default': 'True', 'blank': 'True'}),
            'admin': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['auth.User']"}),
            'bids': ('django.db.models.fields.IntegerField', [], {'default': '0'}),
            'date_time': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'last_date_to_change_layout': ('django.db.models.fields.DateTimeField', [], {'null': 'True', 'blank': 'True'}),
            'last_date_to_post': ('django.db.models.fields.DateTimeField', [], {'null': 'True', 'blank': 'True'}),
            'location': ('django.db.models.fields.CharField', [], {'default': "'39.29038,-76.61219'", 'max_length': '255'}),
            'marketplace': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['market.MarketPlace']"}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '60'}),
            'views': ('django.db.models.fields.IntegerField', [], {'default': '0'})
        }
    }

    complete_apps = ['sell']

########NEW FILE########
__FILENAME__ = 0008_auto__add_field_cart_last_update
# encoding: utf-8
import datetime
from south.db import db
from south.v2 import SchemaMigration
from django.db import models

class Migration(SchemaMigration):

    def forwards(self, orm):
        
        # Adding field 'Cart.last_update'
        db.add_column('sell_cart', 'last_update', self.gf('django.db.models.fields.DateTimeField')(auto_now=True, default=datetime.datetime(2012, 2, 16, 10, 56, 1, 834657), blank=True), keep_default=False)


    def backwards(self, orm):
        
        # Deleting field 'Cart.last_update'
        db.delete_column('sell_cart', 'last_update')


    models = {
        'auth.group': {
            'Meta': {'object_name': 'Group'},
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '80'}),
            'permissions': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['auth.Permission']", 'symmetrical': 'False', 'blank': 'True'})
        },
        'auth.permission': {
            'Meta': {'unique_together': "(('content_type', 'codename'),)", 'object_name': 'Permission'},
            'codename': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'content_type': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['contenttypes.ContentType']"}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '50'})
        },
        'auth.user': {
            'Meta': {'object_name': 'User'},
            'date_joined': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
            'email': ('django.db.models.fields.EmailField', [], {'max_length': '75', 'blank': 'True'}),
            'first_name': ('django.db.models.fields.CharField', [], {'max_length': '30', 'blank': 'True'}),
            'groups': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['auth.Group']", 'symmetrical': 'False', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'is_active': ('django.db.models.fields.BooleanField', [], {'default': 'True', 'blank': 'True'}),
            'is_staff': ('django.db.models.fields.BooleanField', [], {'default': 'False', 'blank': 'True'}),
            'is_superuser': ('django.db.models.fields.BooleanField', [], {'default': 'False', 'blank': 'True'}),
            'last_login': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
            'last_name': ('django.db.models.fields.CharField', [], {'max_length': '30', 'blank': 'True'}),
            'password': ('django.db.models.fields.CharField', [], {'max_length': '128'}),
            'user_permissions': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['auth.Permission']", 'symmetrical': 'False', 'blank': 'True'}),
            'username': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '30'})
        },
        'contenttypes.contenttype': {
            'Meta': {'unique_together': "(('app_label', 'model'),)", 'object_name': 'ContentType', 'db_table': "'django_content_type'"},
            'app_label': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'model': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '100'})
        },
        'market.marketplace': {
            'Meta': {'object_name': 'MarketPlace'},
            'base_domain': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '128'}),
            'charge_on_card_as': ('django.db.models.fields.CharField', [], {'default': "''", 'max_length': '255'}),
            'contact_email': ('django.db.models.fields.EmailField', [], {'default': "'contact@yourstore.com'", 'max_length': '75'}),
            'contact_phone': ('django.db.models.fields.CharField', [], {'default': "''", 'max_length': '128'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '92'}),
            'slug': ('django.db.models.fields.SlugField', [], {'unique': 'True', 'max_length': '92', 'db_index': 'True'}),
            'template_prefix': ('django.db.models.fields.SlugField', [], {'unique': 'True', 'max_length': '92', 'db_index': 'True'}),
            'title': ('django.db.models.fields.CharField', [], {'max_length': '92'})
        },
        'sell.cart': {
            'Meta': {'object_name': 'Cart'},
            'bidder': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['auth.User']"}),
            'creation_date': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'null': 'True', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'last_update': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'blank': 'True'}),
            'shippingdata': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['sell.ShippingData']", 'unique': 'True', 'null': 'True', 'blank': 'True'}),
            'shop': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['shops.Shop']"})
        },
        'sell.cartitem': {
            'Meta': {'object_name': 'CartItem'},
            'cart': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['sell.Cart']"}),
            'content_type': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['contenttypes.ContentType']"}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'object_id': ('django.db.models.fields.PositiveIntegerField', [], {}),
            'price': ('django.db.models.fields.DecimalField', [], {'max_digits': '11', 'decimal_places': '2'}),
            'qty': ('django.db.models.fields.IntegerField', [], {})
        },
        'sell.payment': {
            'Meta': {'object_name': 'Payment'},
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'sell': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['sell.Sell']", 'unique': 'True'}),
            'shop': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['shops.Shop']"}),
            'state_actual': ('django.db.models.fields.related.OneToOneField', [], {'related_name': "'payment_history'", 'unique': 'True', 'null': 'True', 'to': "orm['sell.PaymentHistory']"}),
            'total': ('django.db.models.fields.DecimalField', [], {'default': "'0.0'", 'max_digits': '11', 'decimal_places': '2'})
        },
        'sell.paymenthistory': {
            'Meta': {'object_name': 'PaymentHistory'},
            'date_time': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'payment': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['sell.Payment']"}),
            'state': ('django.db.models.fields.CharField', [], {'max_length': '2'})
        },
        'sell.sell': {
            'Meta': {'object_name': 'Sell'},
            'bidder': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['auth.User']", 'null': 'True'}),
            'cancel': ('django.db.models.fields.BooleanField', [], {'default': 'False', 'blank': 'True'}),
            'closed': ('django.db.models.fields.BooleanField', [], {'default': 'False', 'blank': 'True'}),
            'date_time': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'payment_method': ('django.db.models.fields.CharField', [], {'default': "'Manual Payment'", 'max_length': '255'}),
            'shippingdata': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['sell.ShippingData']", 'unique': 'True', 'null': 'True', 'blank': 'True'}),
            'shop': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['shops.Shop']", 'null': 'True'}),
            'total': ('django.db.models.fields.DecimalField', [], {'default': "'0'", 'max_digits': '11', 'decimal_places': '2'}),
            'total_shipping': ('django.db.models.fields.DecimalField', [], {'default': "'0'", 'max_digits': '11', 'decimal_places': '2'}),
            'total_taxes': ('django.db.models.fields.DecimalField', [], {'default': "'0'", 'max_digits': '11', 'decimal_places': '2'}),
            'total_without_taxes': ('django.db.models.fields.DecimalField', [], {'default': "'0'", 'max_digits': '11', 'decimal_places': '2'})
        },
        'sell.sellitem': {
            'Meta': {'object_name': 'SellItem'},
            'content_type': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['contenttypes.ContentType']"}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'object_id': ('django.db.models.fields.PositiveIntegerField', [], {}),
            'price': ('django.db.models.fields.DecimalField', [], {'max_digits': '11', 'decimal_places': '2'}),
            'qty': ('django.db.models.fields.IntegerField', [], {}),
            'sell': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['sell.Sell']"})
        },
        'sell.shipping': {
            'Meta': {'object_name': 'Shipping'},
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'sell': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['sell.Sell']", 'unique': 'True'}),
            'shipping_service': ('django.db.models.fields.CharField', [], {'default': "'Other'", 'max_length': '255'}),
            'shop': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['shops.Shop']"}),
            'state_actual': ('django.db.models.fields.related.OneToOneField', [], {'related_name': "'shipping_history'", 'unique': 'True', 'null': 'True', 'to': "orm['sell.ShippingHistory']"}),
            'tracking_number': ('django.db.models.fields.CharField', [], {'default': "'--'", 'max_length': '255'})
        },
        'sell.shippingdata': {
            'Meta': {'object_name': 'ShippingData'},
            'city': ('django.db.models.fields.CharField', [], {'max_length': '80'}),
            'country': ('django.db.models.fields.CharField', [], {'max_length': '50'}),
            'first_name': ('django.db.models.fields.CharField', [], {'max_length': '80'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'last_name': ('django.db.models.fields.CharField', [], {'max_length': '80'}),
            'state': ('django.db.models.fields.CharField', [], {'max_length': '80'}),
            'street_address': ('django.db.models.fields.CharField', [], {'max_length': '80'}),
            'zip': ('django.db.models.fields.CharField', [], {'max_length': '30'})
        },
        'sell.shippinghistory': {
            'Meta': {'object_name': 'ShippingHistory'},
            'date_time': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'shipping': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['sell.Shipping']"}),
            'state': ('django.db.models.fields.CharField', [], {'max_length': '2'})
        },
        'shops.shop': {
            'Meta': {'object_name': 'Shop'},
            'active': ('django.db.models.fields.BooleanField', [], {'default': 'True', 'blank': 'True'}),
            'admin': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['auth.User']"}),
            'bids': ('django.db.models.fields.IntegerField', [], {'default': '0'}),
            'date_time': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'last_date_to_change_layout': ('django.db.models.fields.DateTimeField', [], {'null': 'True', 'blank': 'True'}),
            'last_date_to_post': ('django.db.models.fields.DateTimeField', [], {'null': 'True', 'blank': 'True'}),
            'location': ('django.db.models.fields.CharField', [], {'default': "'39.29038,-76.61219'", 'max_length': '255'}),
            'marketplace': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['market.MarketPlace']"}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '60'}),
            'views': ('django.db.models.fields.IntegerField', [], {'default': '0'})
        }
    }

    complete_apps = ['sell']

########NEW FILE########
__FILENAME__ = models
import datetime
import decimal
import logging
from django.core.urlresolvers import reverse
from django.conf import settings
from django.db import models
from django.db.models import Sum
from django.contrib.contenttypes import generic
from django.contrib.contenttypes.models import ContentType
from django.utils.translation import ugettext_lazy as _

from auth.models import User
from shops.models import Shop
from for_sale.models import Item

class SellError(Exception):
    pass

class ShippingData(models.Model):
    first_name = models.CharField(max_length=80)
    last_name = models.CharField(max_length=80)
    street_address = models.CharField(max_length=80)
    city = models.CharField(max_length=80)
    state = models.CharField(max_length=80)
    zip = models.CharField(max_length=30)
    country = models.CharField(max_length=50)
    
    def __str__(self):
        return "%s, %s, %s, %s" % (self.street_address, self.city, self.state, self.country)


class Cart(models.Model):
    bidder = models.ForeignKey(User)
    shop = models.ForeignKey(Shop)
    shippingdata = models.OneToOneField(ShippingData, null=True, blank=True)
    creation_date = models.DateTimeField(auto_now_add=True, null=True, blank=True)
    last_update = models.DateTimeField(auto_now=True)

    def __unicode__(self):
        return "%s > %s" % (self.shop, self.bidder)
    
    def close(self, payment_method):
        from django.conf import settings
        from django.core.mail import send_mail, EmailMessage
        from django.template import Context, Template
        from preferences.models import EmailNotification, EmailNotificationHistory, TYPE_NOTIFICATION
        
        if self.shippingdata is None: raise Exception("Cart Shipping address should never be empty. Something is wrong!")
        sell = Sell.new_sell(self.shop, self.bidder, self.shippingdata, self)
        items = []
        for cart_item in self.cartitem_set.all():
            sell_item = SellItem(sell=sell, product=cart_item.product, qty=cart_item.qty, price=cart_item.price)
            sell_item.save()

            cart_item.product.decrease_qty(cart_item.qty)
            cart_item.product.save()
            
            host_name = sell_item.product.shop.default_dns
            link = "http://%s/admin/for_sale/item_details/%s" % (host_name, sell_item.product.id)
            
            item = { 'id': sell_item.product.id,
                     'title': sell_item.product.title,
                     'qty': sell_item.qty,
                     'price': sell_item.price,
                     'total': sell_item.get_total(),
                     'link': link,
                    }
            
            items.append(item)
            
            cart_item.delete()
            
        sell.payment_method = payment_method
        sell.save() 
        
        #Why is this put to None!!!
        # there is only one cart for user so the cart has to be clean 
        self.shippingdata = None
        self.save()
        
        # -----------------------------
        # Send notification to Shop that new order has been created
        c = Context({
                'buyer_name': '%s %s' % (sell.shippingdata.first_name, sell.shippingdata.last_name), #self.bidder.get_full_name(),
                'buyer_email': self.bidder.email,
                'buyer_phone': self.bidder.profile.phone,
                'gateway': sell.payment_method,
                'shop': self.shop,
                'shipping_street_address': sell.shippingdata.street_address,
                'shipping_city': sell.shippingdata.city,
                'shipping_state': sell.shippingdata.state,
                'shipping_zip': sell.shippingdata.zip,
                'shipping_country': sell.shippingdata.country,
                'sell_date' : sell.date_time,
                'sell_total' : sell.total,
                'sell_without_taxes': sell.total_without_taxes,
                'sell_total_taxes': sell.total_taxes,
                'sell_total_shipping': sell.total_shipping,
                'items': items
            })
        
        # SEND NEW ORDER NOTIFICATION TO SHOP OWNER       
        try:
            notification = EmailNotification.objects.filter(type_notification='NON', shop=self.shop).get()
            type_notification_name = dict(TYPE_NOTIFICATION)[notification.type_notification].title()

            subj_template = Template(notification.subject)
            body_template = Template(notification.body)
            
            subj_text = subj_template.render(c)
            body_text = body_template.render(c)
#            send_mail(subj_text, body_text, settings.EMAIL_FROM, [self.shop.admin.email], fail_silently=True)
            
            mail = EmailMessage(subject=subj_text, body=body_text, from_email=settings.EMAIL_FROM, to=[self.shop.admin.email],
                                headers={'X-SMTPAPI': '{\"category\": \"%s\"}' % type_notification_name})
            mail.send(fail_silently=True)
            
            notification_history = EmailNotificationHistory(shop=self.shop,
                                                        type_notification=notification.type_notification,
                                                        datetime= datetime.datetime.now(),
                                                        to=self.shop.admin.email,
                                                        subject=subj_text,
                                                        body=body_text)
            notification_history.save()

        except EmailNotification.DoesNotExist:
            msg = "New Order Notification"
            
            mail = EmailMessage(subject="New Order Notification",
                                body=msg,
                                from_email=settings.EMAIL_FROM,
                                to=[self.shop.admin.email],
                                headers={'X-SMTPAPI': '{\"category\": \"%s\"}' % dict(TYPE_NOTIFICATION)['NON'].title()})
            mail.send(fail_silently=True)
#            send_mail("New order has been generated!", msg, settings.EMAIL_FROM, [self.shop.admin.email], fail_silently=True)
            
        except Exception, e:
            mail = EmailMessage(subject="Fail when trying to send email!",
                                body=e,
                                from_email=settings.EMAIL_FROM,
                                to=[mail for (name, mail) in settings.STAFF],
                                headers={'X-SMTPAPI': '{\"category\": \"Error\"}'})
            mail.send(fail_silently=True)
#            send_mail("Fail when trying to send email!", "%s" % e, settings.EMAIL_FROM, [mail for (name, mail) in settings.STAFF], fail_silently=True)

        # SEND NEW ORDER NOTIFICATION TO CUSTOMER
        try:
            notification = EmailNotification.objects.filter(type_notification='OC', shop=self.shop).get()
            subj_template = Template(notification.subject)
            body_template = Template(notification.body)
            
            subj_text = subj_template.render(c)
            body_text = body_template.render(c)
            
            mail = EmailMessage(subject=subj_text,
                                body=body_text,
                                from_email=settings.EMAIL_FROM,
                                to=[self.bidder.email],
                                headers={'X-SMTPAPI': '{\"category\": \"%s\"}' % dict(TYPE_NOTIFICATION)['OC'].title()})
            mail.send(fail_silently=True)
#            send_mail(subj_text, body_text, settings.EMAIL_FROM, [self.bidder.email], fail_silently=True)
            notification_history = EmailNotificationHistory(shop=self.shop,
                                                        type_notification=notification.type_notification,
                                                        datetime= datetime.datetime.now(),
                                                        to=self.bidder.email,
                                                        subject=subj_text,
                                                        body=body_text)
            notification_history.save()
        except EmailNotification.DoesNotExist:
            msg = "This mail is to confirm your order on %s" % self.shop
            mail = EmailMessage(subject="New order has been generated!",
                                body=msg,
                                from_email=settings.EMAIL_FROM,
                                to=[self.bidder.email],
                                headers={'X-SMTPAPI': '{\"category\": \"%s\"}' % dict(TYPE_NOTIFICATION)['OC'].title()})
            mail.send(fail_silently=True)
#            send_mail("New order has been generated!", msg, settings.EMAIL_FROM, [self.bidder.email], fail_silently=True)
        except Exception, e:
            from django.conf import settings
            mail = EmailMessage(subject="Fail when trying to send email!",
                                body="%s" % e,
                                from_email=settings.EMAIL_FROM,
                                to=[mail for (name, mail) in settings.STAFF],
                                headers={'X-SMTPAPI': '{\"category\": \"Error\"}'})
            mail.send(fail_silently=True)
#            send_mail("Fail when trying to send email!", "%s" % e, settings.EMAIL_FROM, [mail for (name, mail) in settings.STAFF], fail_silently=True)
        
        return sell
    
    def add(self, product, price, qty=1):
        try:
            product_type = ContentType.objects.get_for_model(product)
            cart_item = self.cartitem_set.filter(object_id=product.id, content_type__pk=product_type.id).get()
            cart_item.qty += qty
        except CartItem.DoesNotExist:
            cart_item = CartItem(cart=self, product=product, price=price, qty=qty)
        self.date_update()
        cart_item.save()

    def remove(self, cartitem):
        """ Remove an item from the cart """
        try:
#            cartitem.product.increase_qty(cartitem.qty)
            cartitem.delete()
        except CartItem.DoesNotExist:
            pass
        self.date_update()
    
    def remove_one(self, cartitem):
        """ Remove just one item from the cart """
        try:
#            cartitem.product.increase_qty(1)
            if cartitem.qty == 1:
                cartitem.delete()
            else:
                cartitem.qty -= 1
                cartitem.save()
        except CartItem.DoesNotExist:
            pass
        self.date_update()
        
    def clean(self):
        """ Clean the cart """
        for cartitem in self.cartitem_set.all():
            self.remove(cartitem)
                
    def total(self):
        """
            Get back the total prize without any taxes or shipping cost
        """
        price = decimal.Decimal('0.00')
        for item in self.cartitem_set.all():
            price += item.price * item.qty
        return decimal.Decimal(price)
    
    def total_weight(self):
        """
            Get back the total weight of the cart
        """
        weight = 0
        for item in self.cartitem_set.all():
            weight += item.product.weight * item.qty
        return weight
    
    def total_items(self):
        """
            Return total amount of items in the cart
        """
        items = 0
        for item in self.cartitem_set.all():
            items += item.qty
        return items
    
    def taxes(self):
        """
            Return taxes for the shipping address
        """
        return self.rate_taxes() * self.total()
    
    def rate_taxes(self):
        """
            Return the rate that should be aplied to to this cart according to where is going to be shipped  
        """
        from payments.taxes import TaxCalculator
        return TaxCalculator.get_tax(shop=self.shop, state=self.shippingdata.state, city=self.shippingdata.city)
        
    
    def shipping_charge(self):
        """
            Return the cost of shipping this cart
        """
        from payments.shipping import ShippingCalculator
        return ShippingCalculator.get_charge(self)
            
    def total_with_taxes(self):
        """
            Return total amount due with taxes calculated for the shipping address
        """    
        return self.total() + self.taxes() + self.shipping_charge()
    
    def is_available(self):
        """ Verify that the items in the cart are available """
        return len(filter(lambda cart_item: cart_item.is_available(), self.cartitem_set.all())) == self.cartitem_set.count()

    def items_not_availables(self):
        return filter(lambda cart_item: not cart_item.is_available(), self.cartitem_set.all())
    
    def remove_not_available_items(self):
        for item in self.items_not_availables():
            self.remove(item)

    def date_update(self):
        self.last_update = datetime.datetime.now()
        self.save()

class CartItem(models.Model):
    cart = models.ForeignKey(Cart)
    
    price = models.DecimalField(max_digits=11, decimal_places=2) 
    qty = models.IntegerField()
    
    content_type = models.ForeignKey(ContentType)
    object_id = models.PositiveIntegerField()
    product = generic.GenericForeignKey('content_type', 'object_id')
    
    def sub_total(self):        
        return self.price * self.qty
    
    def is_available(self):
        if hasattr(self.product, 'qty'):
            return self.qty <= self.product.qty
        else:
            return True
 

#TODO: Remove the null=True properties in shop & bidder!!!
class Sell(models.Model):
    payment_method = models.CharField(max_length=255, default="Manual Payment")
    date_time = models.DateTimeField(auto_now_add=True)
    bidder = models.ForeignKey(User, null=True)
    shop = models.ForeignKey(Shop, null=True)
    closed = models.BooleanField(default = False)
    shippingdata = models.OneToOneField(ShippingData, null=True, blank=True)
    total = models.DecimalField(max_digits=11, 
                                decimal_places=2, default=decimal.Decimal(0))
    total_without_taxes = models.DecimalField(max_digits=11, 
                                decimal_places=2, default=decimal.Decimal(0))
    total_taxes = models.DecimalField(max_digits=11, 
                                decimal_places=2, default=decimal.Decimal(0))
    total_shipping = models.DecimalField(max_digits=11, 
                                decimal_places=2, default=decimal.Decimal(0))
    cancel = models.BooleanField(default = False)
    #TODO: Shipping charge, Taxes and Total Cost should be properties, not a calculated value...
    #TODO: don't should add billingdata to?
    def __unicode__(self):
        return "%s > %s (ID=%s)" % (self.shop, self.bidder, self.id)
    
    @classmethod
    def new_sell(cls, shop, bidder, shippingdata, cart):
        sell = Sell(bidder=bidder, shop=shop, shippingdata=shippingdata)
        sell.total_without_taxes = cart.total()
        sell.total = cart.total_with_taxes()        
        sell.total_shipping = cart.shipping_charge()
        sell.total_taxes = cart.taxes()
        sell.save()
        Payment.new_pending_payment(shop, sell)
        Shipping.new_pending_shipping(shop, sell)
        return sell
    
    def is_manual_payment(self):
        return 'Manual Payment' in self.payment_method

    def is_paypal_payment(self):
        return self.payment_method == 'PayPal'

    def is_google_checkout(self):
        return self.payment_method == 'GoogleCheckout'

    def is_braintree(self):
        return self.payment_method == 'BrainTree'

    
    def get_payment(self):
        return self.payment_set.all()[0]

#    def _total_without_taxes(self):
#        result = 0
#        for item in self.sellitem_set.all():
#            result += item.price * item.qty
#        return result   
#
#    def _taxes(self):
#        """
#            Return taxes for the shipping address
#        """
#        from payments.taxes import TaxCalculator
#        taxes = TaxCalculator.get_tax(shop=self.shop, state=self.shippingdata.state, city=self.shippingdata.city)
#        return taxes * self.total_without_taxes()
#    
#    def _total(self):
#        """
#            Return total amount due with taxes calculated for the shipping address
#        """
#        return self._total_without_taxes() + self._taxes()
    

    def close(self):
        self.closed = True
        self.save()
        
    def open(self):
        self.closed = False
        self.save()
        
    def cancel_sell(self):
        if self.payment.state_actual.state != 'PA':
            for item in self.sellitem_set.all():
#                item.product.increase_qty(item.qty)
                item.product.activate()
                item.save()
            self.cancel = True
            self.save()
        else:
            raise SellError('Can not cancel this sell, your state is paid.')
        
    def refund(self):
        if self.payment.state_actual.state == 'PA':
            if self.is_manual_payment():
                pass
            if self.is_paypal_payment():
                from payments.gateways.paypal import PayPalGateway
                from payments.models import PayPalShopSettings, PayPalTransaction
                
                paypal_gw = PayPalGateway(username=settings.PAYPAL_USERNAME,
                                          password=settings.PAYPAL_PASSWORD,
                                          sign=settings.PAYPAL_SIGNATURE,
                                          debug=settings.PAYPAL_DEBUG)
                                
                try:
                    txn = PayPalTransaction.objects.filter(sell=self).get()
                    paypal_gw.RefundTransaction(txn.transaction_id, 'Full', 'USD', self.total, "Programatic refund from shop admin")
                except PayPalTransaction.DoesNotExist:
                    raise SellError("PayPalTransaction not found. Refund can't be performed...")
                
                    
            if self.is_google_checkout():
                from payments.gateways.googlecheckout import GoogleCheckoutGateway, GoogleCheckoutOrder
                from payments.models import GoogleCheckoutShopSettings
                
                try:
                    google_settings = GoogleCheckoutShopSettings.objects.filter(shop = self.shop).get()
                except GoogleCheckoutShopSettings.DoesNotExist:
                    raise SellError("Google Checkout Settings are disabled! Refund can't be performed")
                    
                googlecheckout_gw = GoogleCheckoutGateway(google_settings.merchant_id, 
                                                          google_settings.merchant_key, 
                                                          debug=True)
                try:
                    order = GoogleCheckoutOrder.objects.filter(sell=self).get()
                    refund = googlecheckout_gw.refund_order(order.order_number, self.total, "Programatic refund from shop admin")
                except GoogleCheckoutOrder.DoesNotExist:
                    raise SellError("This sell it's not associated to any GoogleCheckoutOrder! Refund can't be performed")
                
                
            if self.is_braintree():
            
                from payments.gateways.braintreegw import BraintreeGateway
                from payments.models import BrainTreeTransaction
                
                try:
                    bt_txn = BrainTreeTransaction.objects.filter(sell=self).get()
                except BrainTreeTransaction.DoesNotExist:
                    raise SellError('There is no Braintree transaction associated to this sell!')
                
                gw = BraintreeGateway(settings.MERCHANT_ID, settings.PUBLIC_KEY, settings.PRIVATE_KEY)
                refund = gw.refund_transaction(bt_txn.transaction_id)
                if not refund.is_success:
                    message = ""
                    if refund.transaction:
                        code = refund.transaction.processor_response_code
                        text = refund.transaction.processor_response_text
                        message = "Refund Failed! %s.\[%s] %s" % (refund.message, code, text)
                        
                    else:
                        for error in refund.errors.deep_errors:
                            txt = "attribute: %s, code: %s. %s" (error.attribute, error.code, error.message)    
                            message += txt + "\n"
                    raise SellError("Can't do refund. %s" % message)    
                
                
            for item in self.sellitem_set.all():
#                item.product.increase_qty(item.qty)
                item.product.activate()
                item.save()
            self.cancel = True
            self.save()
            self.payment.refunded()
        else:
            raise SellError('Can not refund this sell, your state is not paid.')
            
    
class SellItem(models.Model):
    sell = models.ForeignKey(Sell)
    price = models.DecimalField(max_digits=11, 
                                decimal_places=2) 
    qty = models.IntegerField()
    
    content_type = models.ForeignKey(ContentType)
    object_id = models.PositiveIntegerField()
    product = generic.GenericForeignKey('content_type', 'object_id')
    
    def __unicode__(self):
        return "Item : %s" % self.product
    
    def get_total(self):
        return "%0.2f" % (self.price * self.qty)
    
    
   
STATE_PAYMENT = [
    ('PE', _('Pending')),
    ('PA', _('Paid')),
    ('FA', _('Failed')),
    ('RE', _('Refunded')),
]   

class Payment(models.Model):
    shop = models.ForeignKey(Shop)
    sell = models.OneToOneField(Sell)
    total = models.DecimalField(max_digits=11, decimal_places=2, default=decimal.Decimal("0.0"))
    state_actual = models.OneToOneField('PaymentHistory', null=True, related_name="payment_history")
    def __unicode__(self):
        return "%s - Sell<%s> $%s (%s)" % (self.shop, self.sell.id, self.total, self.state_actual)
    
    #TODO: transaction in this methods
    @classmethod
    def new_pending_payment(cls, shop, sell):
        payment = Payment(shop=shop, sell=sell)
        payment.save()
        payment_history = PaymentHistory(payment=payment, state="PE")
        payment_history.save()
        payment.state_actual = payment_history 
        payment.save()
        
    def pay(self):
        payment_history = PaymentHistory(payment=self, state="PA")
        payment_history.save()
        self.state_actual = payment_history
        self.total = self.sell.total
        self.save() 
    
    def fail(self):
        payment_history = PaymentHistory(payment=self, state="FA")
        payment_history.save()
        self.state_actual = payment_history
        self.save()     

    def refunded(self):
        payment_history = PaymentHistory(payment=self, state="RE")
        payment_history.save()
        self.state_actual = payment_history
        self.save()     

    
    
class PaymentHistory(models.Model):
    payment = models.ForeignKey(Payment)
    date_time = models.DateTimeField(auto_now_add=True)
    state = models.CharField(max_length=2, choices=STATE_PAYMENT)
    def __unicode__(self):
        return self.state
    
STATE_SHIPPING = [
    ('PE', _('Pending')),
    ('DI', _('Dispatched')),
    ('FU', _('Fulfilled')),
]


SHIPPING_SERVICES = [
    ('Amazon', _('Amazon Services')),                     
    ('Shipwire', _('Shipwire Services')),
    ('Webgistix', _('WebGistics')),
    ('Other', _('Other')),
]

class Shipping(models.Model):
    shop = models.ForeignKey(Shop)
    sell = models.OneToOneField(Sell)
    shipping_service = models.CharField(max_length=255, choices=SHIPPING_SERVICES, default='Other')
    tracking_number = models.CharField(max_length=255, default="--")
    state_actual = models.OneToOneField('ShippingHistory', null=True, related_name="shipping_history")
    def __unicode__(self):
        return "%s (%s)" % (self.sell, self.state_actual)
    
    #TODO: transaction in this methods
    @classmethod
    def new_pending_shipping(cls, shop, sell):
        shipping = Shipping(shop=shop, sell=sell)
        shipping.save()
        shipping_history = ShippingHistory(shipping=shipping, state="PE")
        shipping_history.save()
        shipping.state_actual = shipping_history 
        shipping.save()        
     
    def dispatched(self):
        shipping_history = ShippingHistory(shipping=self, state="DI")
        shipping_history.save()
        self.state_actual = shipping_history
        self.save()
        
    def undispatched(self):
        shipping_history = ShippingHistory(shipping=self, state="PE")
        shipping_history.save()
        self.state_actual = shipping_history 
        self.save()  

    def fulfilled(self):
        shipping_history = ShippingHistory(shipping=self, state="FU")
        shipping_history.save()
        self.state_actual = shipping_history
        self.save() 
    
    
class ShippingHistory(models.Model):
    shipping = models.ForeignKey(Shipping)
    date_time = models.DateTimeField(auto_now_add=True)
    state = models.CharField(max_length=2, choices=STATE_SHIPPING)
    def __unicode__(self):
        return self.state
    
decimal.getcontext().prec = 5

########NEW FILE########
__FILENAME__ = sell_tags
import decimal, logging
import re

from django import template
from sell.models import Payment, Cart
register = template.Library()

@register.filter
def total_pending(shop, user):
    cart = Cart.objects.filter(shop=shop).filter(bidder=user).get()
    total_cart = cart.total()
    try:
        payment = Payment.objects.filter(sell__bidder=user, state_actual__state='PE')[0]
        total_sell = payment.sell.total()
    except Payment.DoesNotExist:
        total_sell = 0
    except Exception, e:
        total_sell = 0
    return total_cart + total_sell
    

@register.filter
def count_pending(shop, user):
    cart = Cart.objects.filter(shop=shop).filter(bidder=user).get()
    total_cart = cart.cartitem_set.all().count()
    try:
        payment = Payment.objects.filter(sell__bidder=user, state_actual__state='PE').get()
        total_sell = payment.sell.sellitem_set.all().count()
    except Payment.DoesNotExist:
        total_sell = 0
    return total_cart + total_sell


@register.filter
def money_format(value, shop):
    context = decimal.Context(prec=20, rounding=decimal.ROUND_HALF_DOWN)
    decimal.setcontext(context)
    
    currency_symbol =  shop.preference().checkout_currency
    if currency_symbol is None:
        currency_symbol = '$$'
    
    if currency_symbol == 'USD':
        currency_symbol = '$'
    
    try:
        value = decimal.Decimal(value)
    except Exception,e:
        logging.critical("could not convert value %s to decimal" % value)
        return "%s %s" % (currency_symbol, value)
        
    try:
        amount =  value.quantize(decimal.Decimal('.01'))
    except Exception,e:
        logging.error("could not format value %s as decimal. %s" % (value, e))
        amount = value
    
    amount = "%s %.2f" % (currency_symbol, amount)
    return re.sub("(\.00)$", '', amount)


@register.filter
def money_format2(value, shop):
    context = decimal.Context(prec=20, rounding=decimal.ROUND_HALF_DOWN)
    decimal.setcontext(context)
    
    currency_symbol =  shop.preference().checkout_currency
    if currency_symbol is None:
        currency_symbol = '$$'
    
    if currency_symbol == 'USD':
        currency_symbol = '$'
    
    try:
        value = decimal.Decimal(value)
    except Exception,e:
        logging.critical("could not convert value %s to decimal" % value)
        return "%s %s" % (currency_symbol, value)
        
    try:
        amount =  value.quantize(decimal.Decimal('.01'))
    except Exception,e:
        logging.error("could not format value %s as decimal. %s" % (value, e))
        amount = value
    
    amount = "%s %.2f" % (currency_symbol, amount)
    m = re.match(r"(?P<price>[\d\$\W]+)(\.)(?P<fl>[\d]+)$", amount)
    return (m.group('price'), m.group('fl'))

        
@register.filter
def format_price(value, currency_symbol):
    context = decimal.Context(prec=20, rounding=decimal.ROUND_HALF_DOWN)
    decimal.setcontext(context)
    
    if currency_symbol is None:
        currency_symbol = '$$'
    
    if currency_symbol == 'USD':
        currency_symbol = '$'
    
    try:
        value = decimal.Decimal(str(value))
    except Exception,e:
        logging.critical("could not convert value %s to decimal" % value)
        return value
    
    value = "%s %.2f" % (currency_symbol, value)
    return re.sub("(\.00)$", '', value)

########NEW FILE########
__FILENAME__ = tests
import unittest
import decimal
import logging

from django.test import TestCase

from auth.models import User
from models import *
from for_sale.models import Item
from market.models import MarketPlace, MarketCategory, MarketSubCategory
from shops.models import Shop
from inventory.models import Product
from preferences.models import TaxState, ShippingWeight, ShippingItem, ShippingPrice,\
    Preference
from users.models import Profile
from subscriptions.models import Subscription, SubscriptionPlan


class BuyItemTestCase(TestCase):
    
    def setUp(self):
        self.owner = User.objects.create_user("owner", "owner@t.com", "testpw")
        owner_profile = Profile(user=self.owner)
        owner_profile.save()
        self.user = User.objects.create_user("test", "t@t.com", "testpw")
        self.user2 = User.objects.create_user("user2", "u@tsr.com", "user2")
        Profile(user=self.user).save()
        Profile(user=self.user2).save()
        
        self.marketplace = MarketPlace(name="greatsomething", title="Great Something", slug="great-something", 
                                       template_prefix="default", base_domain="greatsomething.com")
        self.marketplace.save()
        self.shop = Shop(marketplace=self.marketplace, admin=self.owner, name="test_shop")
        self.shop.save()
        Preference(shop=self.shop).save()
        self.shop.update()
        plan = SubscriptionPlan(plan_id=1,
                         marketplace=self.marketplace, 
                         trial_period=True, 
                         total_store_revenue=1000, 
                         concurrent_store_items=1000)
        plan.save()
        Subscription(owner=owner_profile, plan=plan).save()
        self.category = MarketCategory(marketplace=self.marketplace, name="Category1")
        self.category.save()
        self.subcategory = MarketSubCategory(marketplace=self.marketplace, parent=self.category, name="SubCategory1")
        self.subcategory.save()
        
        self.cart = Cart(shop=self.shop, bidder=self.user)
        self.cart.save()
        
        self.cart2 = Cart(shop=self.shop, bidder=self.user2)
        self.cart2.save()
        
        
    def tearDown(self):
        self.user.delete()
        self.marketplace.delete()
        self.category.delete()
        self.subcategory.delete()
#        item.delete()
    
    def testCartMethods(self):
        item = Item(shop=self.shop, 
                        title="item",
                        description="an item", 
                        price="10.0", 
                        category=self.category, 
                        subcategory=self.subcategory, 
                        qty=5, 
                        weight="2.0")
        item.save()
        
        
        shippingdata = ShippingData(street_address="Calle 8 n 182", city="La Plata", state="Buenos Aires", zip="1900", country="AR")
        shippingdata.save()

        self.cart.shippingdata = shippingdata
                
        qty = item.qty
        #add an item to cart
        qty_to_buy = 2
        self.cart.add(item, item.price, qty=qty_to_buy)
        
        #check that qty item NOT decrease
        self.assertEqual(qty, item.qty)
        
        #check that item is in cart
        cart_item = self.cart.cartitem_set.all()[0]
        self.assertEqual(item, cart_item.product)
        
        #check cart methods
        self.assertEqual(self.cart.total_items(), qty_to_buy)
        self.assertEqual(self.cart.total_weight() , decimal.Decimal("4.0"))
        self.assertEqual(self.cart.total(), decimal.Decimal("20.0"))
        self.assertEqual(self.cart.total_with_taxes(), decimal.Decimal("20.0"))
        
        #clean the cart
        self.cart.clean()
        
        #recheck cart methods
        self.assertEqual(self.cart.total_items(), 0)
        self.assertEqual(self.cart.total_weight() , decimal.Decimal("0.0"))
        self.assertEqual(self.cart.total(), decimal.Decimal("0.0"))
        self.assertEqual(self.cart.total_with_taxes(), decimal.Decimal("0.0"))
        
        
    def testTaxCalculation(self):
        item = Item(shop=self.shop, 
                title="item",
                description="an item", 
                price="10.0", 
                category=self.category, 
                subcategory=self.subcategory, 
                qty=5, 
                weight="2.0")
        item.save()
        
        #load some taxes 
        miami_tax = decimal.Decimal("2.5")
        tax_for_miami = TaxState(shop=self.shop, state="MI", tax=miami_tax)
        tax_for_miami.save()
        
        ny_tax = decimal.Decimal("1.5")
        tax_for_ny = TaxState(shop=self.shop, state="NY", tax=ny_tax)
        tax_for_ny.save()
        
        #add an item to the cart
        self.cart.add(item, item.price, qty=1)
        
        #set the shipping address        
        shippingdata = ShippingData(street_address="Abey Road", city="Great Beach", state="MI", zip="11001", country="US")
        shippingdata.save()
        self.cart.shippingdata = shippingdata
      
        #check that tax is correctly calculated
        self.assertEquals(self.cart.taxes(), miami_tax * decimal.Decimal(item.price) / decimal.Decimal("100.0"))
        self.assertNotEquals(self.cart.taxes(), ny_tax * decimal.Decimal(item.price) / decimal.Decimal("100.0"))

        #if shipping address is not MI or NY, no tax must be applied...
        shippingdata = ShippingData(street_address="Abey Road", city="Great Beach", state="IO", zip="11001", country="US")
        shippingdata.save()
        self.cart.shippingdata = shippingdata

        self.assertEquals(self.cart.taxes(), decimal.Decimal("0.0") )        
        
        
    def testShippingCharge(self):
        item = Item(shop=self.shop, 
                title="item",
                description="an item", 
                price="10.0", 
                category=self.category, 
                subcategory=self.subcategory, 
                qty=5, 
                weight="2.0")
        item.save()
        #add an item to the cart
        self.cart.add(item, item.price, qty=3)
        
        #set the shipping address        
        shippingdata = ShippingData(street_address="Abey Road", city="Great Beach", state="MI", zip="11001", country="US")
        shippingdata.save()
        self.cart.shippingdata = shippingdata
        
        sw1 = ShippingWeight(shop=self.shop, name="Shipping by Weight", price="3.00", from_weight="0.0", to_weight="5.0")
        sw1.save()
        sw2 = ShippingWeight(shop=self.shop, name="Shipping by Weight", price="5.00", from_weight="5.0", to_weight="10.0")
        sw2.save()
        self.assertEquals(self.cart.shipping_charge(), decimal.Decimal("5.0"))
        sw1.delete()
        sw2.delete()
        
        si1 = ShippingItem(shop=self.shop, name="Shipping by Item", price="9.00", from_item=0, to_item=3)
        si1.save()
        si2 = ShippingItem(shop=self.shop, name="Shipping by Item", price="19.00", from_item=3, to_item=5)
        si2.save()
        si3 = ShippingItem(shop=self.shop, name="Shipping by Item", price="29.00", from_item=5, to_item=15)
        si3.save()
        
        self.assertEquals(self.cart.shipping_charge(), decimal.Decimal("9.0"))
        si1.delete()
        si2.delete()
        si3.delete()
        
        pw1 = ShippingPrice(shop=self.shop, name="Shipping by Price", price="5.00", from_price="0.0", to_price="20.0")
        pw1.save()
        pw2 = ShippingPrice(shop=self.shop, name="Shipping by Price", price="9.00", from_price="20.0", to_price="40.0")
        pw2.save()
        self.assertEquals(self.cart.shipping_charge(), decimal.Decimal("9.0"))
        pw1.delete()
        pw2.delete()
        
        
    def testCartClose(self):
        item = Item(shop=self.shop, 
                title="item",
                description="an item", 
                price="10.0", 
                category=self.category, 
                subcategory=self.subcategory, 
                qty=1, 
                weight="2.0")
        item.save()
        
        item2 = Item(shop=self.shop, 
                title="item",
                description="an item", 
                price="10.0", 
                category=self.category, 
                subcategory=self.subcategory, 
                qty=2, 
                weight="2.0")
        item2.save()

        stock_item = item.qty
        stock_item2 = item2.qty
        
        shippingdata = ShippingData(street_address="Calle 8 n 182", city="La Plata", state="Buenos Aires", zip="1900", country="AR")
        shippingdata.save()
        
        #add the shipping data
        self.cart.shippingdata = shippingdata
        self.cart.save()
        
        #add 2 items
        self.cart.add(item, item.price, qty=1)
        self.cart.add(item2, item2.price, qty=2)
        
        item = Item.objects.get(id=item.id)
        self.cart2.add(item, item.price, qty=1)
        
        item = Item.objects.get(id=item.id)
        self.assertEqual(stock_item, item.qty)
        self.assertEqual(stock_item2, item2.qty)
        
        success = self.client.login(username='user2', password='user2')
        self.assertEqual(success, True, "login failed")
        HTTP_HOST = self.shop.default_dns
        response = self.client.get(reverse("myshopping_checkout_shipping"), HTTP_HOST=HTTP_HOST)
        self.assertEqual(response.status_code, 200)
        shipping_data = { 
            'first_name': 'User',
            'last_name': 'Buyer',
            'street_address': 'Street 54',
            'city': 'Washington',
            'state': 'DC',
            'zip': '12345-4321',
            'country': 'United States',
        }
        response = self.client.post(reverse("myshopping_checkout_shipping"), shipping_data, HTTP_HOST=HTTP_HOST)
        self.assertEqual(response.status_code, 302)


        # cart and cart2 is availables
        self.assertTrue(self.cart.is_available())
        self.assertTrue(self.cart2.is_available())
        
        #close the cart
        sell = self.cart.close("manual")
        
        self.assertTrue(self.cart.is_available())

        # cart2 is not available
        self.assertFalse(self.cart2.is_available())
         
        response = self.client.get(reverse("myshopping_checkout_confirm"), HTTP_HOST=HTTP_HOST,  follow=True)
        self.assertRedirects(response, reverse('my_shopping'),  status_code=302, host=HTTP_HOST)
        logging.info('\t%s' % response.redirect_chain)

        item = Item.objects.get(id=item.id)
        item2 = Item.objects.get(id=item2.id)
        
        self.assertEqual(stock_item - 1, item.qty)
        self.assertEqual(stock_item2 - 2, item2.qty)
        
        #check that the sell object has the default values setted... 
        self.assertEquals(self.cart.total_items(), 0)
        self.assertEquals(sell.closed, False)
        self.assertEquals(sell.sellitem_set.count(), 2)
        self.assertEquals(sell.payment.state_actual.state, "PE")
        self.assertEquals(sell.shipping.state_actual.state, "PE")

        
        
        
########NEW FILE########
__FILENAME__ = urls
from django.conf.urls.defaults import *

urlpatterns = patterns('',
    url(r'^sell_all/$', 'sell.views.sell_all', name='sell_all'),
    url(r'^sell_details/([\d]+)/$', 'sell.views.sell_details', name='sell_details'),
    url(r'^sell_dispatched/([\d]+)/$', 'sell.views.sell_dispatched', name='sell_dispatched'),
    url(r'^sel_undispatched/([\d]+)/$', 'sell.views.sel_undispatched', name='sel_undispatched'),
    url(r'^sell_fulfilled/([\d]+)/$', 'sell.views.sell_fulfilled', name='sell_fulfilled'),

    url(r'^sell_manual_pay/([\d]+)/$', 'sell.views.sell_manual_pay', name='sell_manual_pay'),
    url(r'^sell_manual_fail/([\d]+)/$', 'sell.views.sell_manual_fail', name='sell_manual_fail'),

    url(r'^sell_open/([\d]+)/$', 'sell.views.sell_open', name='sell_open'),
    url(r'^sell_close/([\d]+)/$', 'sell.views.sell_close', name='sell_close'),

    url(r'^sell_cancel/([\d]+)/$', 'sell.views.sell_cancel', name='sell_cancel'),
    url(r'^sell_refund/([\d]+)/$', 'sell.views.sell_refund', name='sell_refund'),
)
########NEW FILE########
__FILENAME__ = views
import datetime

from django.db.models import Sum
from django.core.urlresolvers import reverse
#from django.contrib.auth.decorators import login_required
from django.http import HttpResponseRedirect, HttpResponse, Http404
from django.template import RequestContext
from django.shortcuts import render_to_response, get_object_or_404
from django.utils.translation import ugettext as _

from django.core.paginator import Paginator, InvalidPage, EmptyPage

from auctions.forms import AuctionSessionForm
from auctions.models import AuctionSession 
from auth.models import User
from core.decorators import shop_admin_required

from models import Payment, Shipping, Sell


from datetime import timedelta

PAGE_SELL = 5


@shop_admin_required
def sell_all(request):
    shop = request.shop
    
    sell_list = Sell.objects.filter(shop=shop).order_by("-date_time")

    pager = Paginator(sell_list, PAGE_SELL)
    try:
        page = int(request.GET.get('page','1'))
    except:
        page = 1
    try:
        sells = pager.page(page)
    except (EmptyPage, InvalidPage):
        sells = pager.page(pager.num_pages)
    paged = (pager.num_pages > 1)
    
    return render_to_response('sell/sell_all.html', 
                              {'sells': sells,
                               'pages': pager.page_range,
                               'paged': paged,
                               }, 
                              RequestContext(request))    

@shop_admin_required
def sell_details(request, id):
    sell = get_object_or_404(Sell, pk=id)
    shop = request.shop
    
    if sell.shop != shop:
        raise Http404
    return render_to_response('sell/sell_details.html', 
                              {'sell': sell},
                              RequestContext(request))

@shop_admin_required
def sell_manual_pay(request, id):
    sell = get_object_or_404(Sell, pk=id)
    shop = request.shop
    if sell.shop != shop:
        raise Http404
    sell.payment.pay()
    request.flash['message'] = unicode(_("Operation successfully saved."))
    request.flash['severity'] = "success"
    return HttpResponseRedirect(reverse('sell_details', args=[id])) 


@shop_admin_required
def sell_manual_fail(request, id):
    sell = get_object_or_404(Sell, pk=id)
    shop = request.shop
    if sell.shop != shop:
        raise Http404
    sell.payment.fail()
    request.flash['message'] = unicode(_("Operation successfully saved."))
    request.flash['severity'] = "success"
    return HttpResponseRedirect(reverse('sell_details', args=[id])) 

@shop_admin_required
def sell_dispatched(request, id):
    sell = get_object_or_404(Sell, pk=id)
    shop = request.shop
    
    if sell.shop != shop:
        raise Http404
    sell.shipping.dispatched()
    request.flash['message'] = unicode(_("Operation successfully saved."))
    request.flash['severity'] = "success"
    return HttpResponseRedirect(reverse('sell_details', args=[id]))

@shop_admin_required
def sel_undispatched(request, id):
    sell = get_object_or_404(Sell, pk=id)
    shop = request.shop
    
    if sell.shop != shop:
        raise Http404
    sell.shipping.undispatched()
    request.flash['message'] = unicode(_("Operation successfully saved."))
    request.flash['severity'] = "success"
    return HttpResponseRedirect(reverse('sell_details', args=[id]))

@shop_admin_required
def sell_fulfilled(request, id):
    sell = get_object_or_404(Sell, pk=id)
    shop = request.shop
    
    if sell.shop != shop:
        raise Http404
    sell.shipping.fulfilled()
    request.flash['message'] = unicode(_("Operation successfully saved."))
    request.flash['severity'] = "success"
    return HttpResponseRedirect(reverse('sell_details', args=[id]))    


@shop_admin_required
def sell_close(request, id):
    sell = get_object_or_404(Sell, pk=id)
    shop = request.shop
    if sell.shop != shop:
        raise Http404
    sell.close()
    request.flash['message'] = unicode(_("Operation successfully saved."))
    request.flash['severity'] = "success"
    return HttpResponseRedirect(reverse('sell_details', args=[id])) 


@shop_admin_required
def sell_open(request, id):
    sell = get_object_or_404(Sell, pk=id)
    shop = request.shop
    if sell.shop != shop:
        raise Http404
    sell.open()
    request.flash['message'] = unicode(_("Operation successfully saved."))
    request.flash['severity'] = "success"
    return HttpResponseRedirect(reverse('sell_details', args=[id])) 

@shop_admin_required
def sell_cancel(request, id):
    from models import SellError
    sell = get_object_or_404(Sell, pk=id)
    shop = request.shop
    if sell.shop != shop:
        raise Http404
    try:
        sell.cancel_sell()
        request.flash['message'] = unicode(_("Operation successfully saved."))
        request.flash['severity'] = "success"
    except SellError, e:
        request.flash['message'] = e 
        request.flash['severity'] = "error"
    return HttpResponseRedirect(reverse('sell_details', args=[id])) 

@shop_admin_required
def sell_refund(request, id):
    from models import SellError
    sell = get_object_or_404(Sell, pk=id)
    shop = request.shop
    if sell.shop != shop:
        raise Http404
    try:
        sell.refund()
        request.flash['message'] = unicode(_("Operation successfully saved."))
        request.flash['severity'] = "success"
    except SellError, e:
        request.flash['message'] = e 
        request.flash['severity'] = "error"
    return HttpResponseRedirect(reverse('sell_details', args=[id])) 

########NEW FILE########
__FILENAME__ = admin
from models import *
from django.contrib import admin

admin.site.register(Shop)
admin.site.register(ShopBillingInfo)
admin.site.register(DealerToShow)
admin.site.register(MailingListMember)
########NEW FILE########
__FILENAME__ = admin_urls
from django.conf.urls.defaults import *

#TODO: ask to martin and delete this file

#
#urlpatterns = patterns('',
#    url(r'^customers/$', 'lots.views.home_admin', name='customers_admin'),
#    url(r'^inventary/$', 'lots.views.home_admin', name='inventory_admin'),
#    url(r'^account/$', 'lots.views.home_admin', name='shop_account_admin'),
#)
########NEW FILE########
__FILENAME__ = forms
import datetime

from django import forms
from auth.models import User
from django.utils.translation import ugettext as _
from django.forms import ModelForm
from django.contrib.localflavor.us.forms import USStateSelect, USZipCodeField

from sell.countries import COUNTRIES
from models import Shop, MailingListMember
from subscriptions.models import SubscriptionPlan


MONTHS = (
    ("01", "January"),
    ("02", "February"),
    ("03", "March"),
    ("04", "April"),
    ("05", "May"),
    ("06", "June"),
    ("07", "July"),
    ("08", "August"),
    ("09", "September"),
    ("10", "October"),
    ("11", "November"),
    ("12", "December"),
)

current_year = datetime.date.today().year
YEARS = ((current_year + i, current_year + i) for i in range(31))


class ShopForm(forms.Form):
    name_store = forms.RegexField(max_length=60, label =_("Your shop's name"), regex=r'^[\s\w+-]+$',
            error_messages = {'invalid': _("This value may contain only letters, numbers and - character.")})
    
    shop_name = forms.CharField(max_length=60, label =_("Your shop's web address"))

    first_name = forms.CharField(label=_("First name"), max_length=50, required=True) 
    last_name = forms.CharField(label=_("Last name"), max_length=50, required=True)
        
    username = forms.RegexField(label=_("Username"), max_length=30, regex=r'^[\w.@+-]+$',
            help_text = _("Required. 30 characters or fewer. Letters, digits and @/./+/-/_ only."),
            error_messages = {'invalid': _("This value may contain only letters, numbers and @/./+/-/_ characters.")})
    
    email = forms.EmailField(label =_("E-mail"))
    
    password1 = forms.CharField(label=_("Password"), widget=forms.PasswordInput)
    password2 = forms.CharField(label=_("Password confirmation"), widget=forms.PasswordInput)
    
    #Plan ID
    plan_id = forms.ModelChoiceField(queryset=SubscriptionPlan.objects.filter(active=True), empty_label=None)
    
    #Billing Address
    street = forms.CharField(max_length=100)
    city = forms.CharField(max_length=100)
    state = forms.CharField(widget=USStateSelect)
    zip = USZipCodeField()
    
    #Billing information
    cc_number = forms.CharField(max_length=60, label =_("Credit Card Number"))
    cc_expiration_month = forms.ChoiceField(choices=MONTHS)
    cc_expiration_year = forms.ChoiceField(choices=YEARS)
    card_security_number = forms.CharField(max_length=4, label =_("Card Security Number"))
     
    terms = forms.BooleanField(required=False)    

    def clean_shop_name(self):
        shop_name = self.cleaned_data["shop_name"]
        try:
            Shop.objects.get(name=shop_name)
        except Shop.DoesNotExist:
            return shop_name
        raise forms.ValidationError(_("A shop with that name already exists."))


    def clean_username(self):
        username = self.cleaned_data["username"]
        try:
            User.objects.get(username=username)
        except User.DoesNotExist:
            return username
        raise forms.ValidationError(_("A user with that username already exists."))


    def clean_email(self):
        email = self.cleaned_data["email"]
        try:
            user = User.objects.filter(email = email).get()
        except User.DoesNotExist:
            user = None
        if user:
            raise forms.ValidationError(_("A user with that email already exists."))
        else:
            return email


    def clean_password2(self):
        password1 = self.cleaned_data.get("password1", "")
        password2 = self.cleaned_data["password2"]
        if password1 != password2:
            raise forms.ValidationError(_("The two password fields didn't match."))
        return password2


    def clean_terms(self):
        terms = self.cleaned_data["terms"]
        if terms:
            return terms
        else:
            raise forms.ValidationError(_("You must agree to the terms and conditions before you can create your account."))

class MailingListMemberForm(ModelForm):
    class Meta:
        model = MailingListMember
        exclude = ['shop']


########NEW FILE########
__FILENAME__ = middleware
#from django.http import Http404
#from django.core.exceptions import ObjectDoesNotExist

#from shops.models import Shop
from sell.models import Cart
 
import logging

class CartMiddleware:

    def process_request(self, request):
        user= request.user
        shop = request.shop        
        
        if (shop is not None) and (user is not None) and (user.is_anonymous() == False) and (user != shop.admin):
            try:
                cart = Cart.objects.filter(bidder=user).filter(shop=shop).get()
            except Cart.DoesNotExist:
                cart = Cart(shop=shop, bidder=user)
                cart.save()
            request.cart = cart
########NEW FILE########
__FILENAME__ = 0001_initial
# encoding: utf-8
import datetime
from south.db import db
from south.v2 import SchemaMigration
from django.db import models

class Migration(SchemaMigration):

    def forwards(self, orm):
        
        # Adding model 'Shop'
        db.create_table('shops_shop', (
            ('id', self.gf('django.db.models.fields.AutoField')(primary_key=True)),
            ('marketplace', self.gf('django.db.models.fields.related.ForeignKey')(to=orm['market.MarketPlace'])),
            ('admin', self.gf('django.db.models.fields.related.ForeignKey')(to=orm['auth.User'])),
            ('name', self.gf('django.db.models.fields.CharField')(max_length=60)),
            ('date_time', self.gf('django.db.models.fields.DateTimeField')(auto_now_add=True, blank=True)),
            ('views', self.gf('django.db.models.fields.IntegerField')(default=0)),
            ('bids', self.gf('django.db.models.fields.IntegerField')(default=0)),
        ))
        db.send_create_signal('shops', ['Shop'])

        # Adding model 'DealerToShow'
        db.create_table('shops_dealertoshow', (
            ('id', self.gf('django.db.models.fields.AutoField')(primary_key=True)),
            ('shop', self.gf('django.db.models.fields.related.ForeignKey')(to=orm['shops.Shop'])),
            ('show', self.gf('django.db.models.fields.related.ForeignKey')(to=orm['market_buy.Show'])),
        ))
        db.send_create_signal('shops', ['DealerToShow'])


    def backwards(self, orm):
        
        # Deleting model 'Shop'
        db.delete_table('shops_shop')

        # Deleting model 'DealerToShow'
        db.delete_table('shops_dealertoshow')


    models = {
        'auth.group': {
            'Meta': {'object_name': 'Group'},
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '80'}),
            'permissions': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['auth.Permission']", 'symmetrical': 'False', 'blank': 'True'})
        },
        'auth.permission': {
            'Meta': {'unique_together': "(('content_type', 'codename'),)", 'object_name': 'Permission'},
            'codename': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'content_type': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['contenttypes.ContentType']"}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '50'})
        },
        'auth.user': {
            'Meta': {'object_name': 'User'},
            'date_joined': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
            'email': ('django.db.models.fields.EmailField', [], {'max_length': '75'}),
            'first_name': ('django.db.models.fields.CharField', [], {'max_length': '30', 'blank': 'True'}),
            'groups': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['auth.Group']", 'symmetrical': 'False', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'is_active': ('django.db.models.fields.BooleanField', [], {'default': 'True', 'blank': 'True'}),
            'is_staff': ('django.db.models.fields.BooleanField', [], {'default': 'False', 'blank': 'True'}),
            'is_superuser': ('django.db.models.fields.BooleanField', [], {'default': 'False', 'blank': 'True'}),
            'last_login': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
            'last_name': ('django.db.models.fields.CharField', [], {'max_length': '30', 'blank': 'True'}),
            'password': ('django.db.models.fields.CharField', [], {'max_length': '128'}),
            'user_permissions': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['auth.Permission']", 'symmetrical': 'False', 'blank': 'True'}),
            'username': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '32'})
        },
        'contenttypes.contenttype': {
            'Meta': {'unique_together': "(('app_label', 'model'),)", 'object_name': 'ContentType', 'db_table': "'django_content_type'"},
            'app_label': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'model': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '100'})
        },
        'market.marketplace': {
            'Meta': {'object_name': 'MarketPlace'},
            'base_domain': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '128'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '92'}),
            'slug': ('django.db.models.fields.SlugField', [], {'unique': 'True', 'max_length': '92', 'db_index': 'True'}),
            'template_prefix': ('django.db.models.fields.SlugField', [], {'unique': 'True', 'max_length': '92', 'db_index': 'True'}),
            'title': ('django.db.models.fields.CharField', [], {'max_length': '92'})
        },
        'market_buy.show': {
            'Meta': {'object_name': 'Show'},
            'address': ('django.db.models.fields.CharField', [], {'max_length': '128'}),
            'admission': ('django.db.models.fields.DecimalField', [], {'default': "'0.0'", 'max_digits': '11', 'decimal_places': '2'}),
            'city': ('django.db.models.fields.CharField', [], {'max_length': '128'}),
            'contact_info': ('django.db.models.fields.CharField', [], {'max_length': '128'}),
            'date_from': ('django.db.models.fields.DateField', [], {}),
            'date_to': ('django.db.models.fields.DateField', [], {}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'marketplace': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['market.MarketPlace']"}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '128'}),
            'state': ('django.db.models.fields.CharField', [], {'max_length': '128'}),
            'time_from': ('django.db.models.fields.TimeField', [], {}),
            'time_to': ('django.db.models.fields.TimeField', [], {}),
            'zip': ('django.db.models.fields.CharField', [], {'max_length': '10'})
        },
        'shops.dealertoshow': {
            'Meta': {'object_name': 'DealerToShow'},
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'shop': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['shops.Shop']"}),
            'show': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['market_buy.Show']"})
        },
        'shops.shop': {
            'Meta': {'object_name': 'Shop'},
            'admin': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['auth.User']"}),
            'bids': ('django.db.models.fields.IntegerField', [], {'default': '0'}),
            'date_time': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'marketplace': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['market.MarketPlace']"}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '60'}),
            'views': ('django.db.models.fields.IntegerField', [], {'default': '0'})
        }
    }

    complete_apps = ['shops']

########NEW FILE########
__FILENAME__ = 0002_auto__add_field_shop_location
# encoding: utf-8
import datetime
from south.db import db
from south.v2 import SchemaMigration
from django.db import models

class Migration(SchemaMigration):

    def forwards(self, orm):
        
        # Adding field 'Shop.location'
        db.add_column('shops_shop', 'location', self.gf('django.db.models.fields.CharField')(default='39.29038,-76.61219', max_length=255), keep_default=False)


    def backwards(self, orm):
        
        # Deleting field 'Shop.location'
        db.delete_column('shops_shop', 'location')


    models = {
        'auth.group': {
            'Meta': {'object_name': 'Group'},
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '80'}),
            'permissions': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['auth.Permission']", 'symmetrical': 'False', 'blank': 'True'})
        },
        'auth.permission': {
            'Meta': {'unique_together': "(('content_type', 'codename'),)", 'object_name': 'Permission'},
            'codename': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'content_type': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['contenttypes.ContentType']"}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '50'})
        },
        'auth.user': {
            'Meta': {'object_name': 'User'},
            'date_joined': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
            'email': ('django.db.models.fields.EmailField', [], {'max_length': '75'}),
            'first_name': ('django.db.models.fields.CharField', [], {'max_length': '30', 'blank': 'True'}),
            'groups': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['auth.Group']", 'symmetrical': 'False', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'is_active': ('django.db.models.fields.BooleanField', [], {'default': 'True', 'blank': 'True'}),
            'is_staff': ('django.db.models.fields.BooleanField', [], {'default': 'False', 'blank': 'True'}),
            'is_superuser': ('django.db.models.fields.BooleanField', [], {'default': 'False', 'blank': 'True'}),
            'last_login': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
            'last_name': ('django.db.models.fields.CharField', [], {'max_length': '30', 'blank': 'True'}),
            'password': ('django.db.models.fields.CharField', [], {'max_length': '128'}),
            'user_permissions': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['auth.Permission']", 'symmetrical': 'False', 'blank': 'True'}),
            'username': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '32'})
        },
        'contenttypes.contenttype': {
            'Meta': {'unique_together': "(('app_label', 'model'),)", 'object_name': 'ContentType', 'db_table': "'django_content_type'"},
            'app_label': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'model': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '100'})
        },
        'market.marketplace': {
            'Meta': {'object_name': 'MarketPlace'},
            'base_domain': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '128'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '92'}),
            'slug': ('django.db.models.fields.SlugField', [], {'unique': 'True', 'max_length': '92', 'db_index': 'True'}),
            'template_prefix': ('django.db.models.fields.SlugField', [], {'unique': 'True', 'max_length': '92', 'db_index': 'True'}),
            'title': ('django.db.models.fields.CharField', [], {'max_length': '92'})
        },
        'market_buy.show': {
            'Meta': {'object_name': 'Show'},
            'address': ('django.db.models.fields.CharField', [], {'max_length': '128'}),
            'admission': ('django.db.models.fields.DecimalField', [], {'default': "'0.0'", 'max_digits': '11', 'decimal_places': '2'}),
            'city': ('django.db.models.fields.CharField', [], {'max_length': '128'}),
            'contact_info': ('django.db.models.fields.CharField', [], {'max_length': '128'}),
            'date_from': ('django.db.models.fields.DateField', [], {}),
            'date_to': ('django.db.models.fields.DateField', [], {}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'marketplace': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['market.MarketPlace']"}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '128'}),
            'state': ('django.db.models.fields.CharField', [], {'max_length': '128'}),
            'time_from': ('django.db.models.fields.TimeField', [], {}),
            'time_to': ('django.db.models.fields.TimeField', [], {}),
            'zip': ('django.db.models.fields.CharField', [], {'max_length': '10'})
        },
        'shops.dealertoshow': {
            'Meta': {'object_name': 'DealerToShow'},
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'shop': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['shops.Shop']"}),
            'show': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['market_buy.Show']"})
        },
        'shops.shop': {
            'Meta': {'object_name': 'Shop'},
            'admin': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['auth.User']"}),
            'bids': ('django.db.models.fields.IntegerField', [], {'default': '0'}),
            'date_time': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'location': ('django.db.models.fields.CharField', [], {'default': "'39.29038,-76.61219'", 'max_length': '255'}),
            'marketplace': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['market.MarketPlace']"}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '60'}),
            'views': ('django.db.models.fields.IntegerField', [], {'default': '0'})
        }
    }

    complete_apps = ['shops']

########NEW FILE########
__FILENAME__ = 0003_auto__add_shopbillinginfo
# encoding: utf-8
import datetime
from south.db import db
from south.v2 import SchemaMigration
from django.db import models

class Migration(SchemaMigration):

    def forwards(self, orm):
        
        # Adding model 'ShopBillingInfo'
        db.create_table('shops_shopbillinginfo', (
            ('id', self.gf('django.db.models.fields.AutoField')(primary_key=True)),
            ('shop', self.gf('django.db.models.fields.related.ForeignKey')(to=orm['shops.Shop'])),
            ('card_ending', self.gf('django.db.models.fields.CharField')(default='Card ending', max_length=60)),
            ('card_expire', self.gf('django.db.models.fields.DateTimeField')()),
            ('street', self.gf('django.db.models.fields.CharField')(default='Street', max_length=60)),
            ('zip', self.gf('django.db.models.fields.CharField')(default='Zip', max_length=30)),
            ('city', self.gf('django.db.models.fields.CharField')(default='City', max_length=60)),
            ('state', self.gf('django.db.models.fields.CharField')(default='State', max_length=60)),
        ))
        db.send_create_signal('shops', ['ShopBillingInfo'])


    def backwards(self, orm):
        
        # Deleting model 'ShopBillingInfo'
        db.delete_table('shops_shopbillinginfo')


    models = {
        'auth.group': {
            'Meta': {'object_name': 'Group'},
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '80'}),
            'permissions': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['auth.Permission']", 'blank': 'True'})
        },
        'auth.permission': {
            'Meta': {'unique_together': "(('content_type', 'codename'),)", 'object_name': 'Permission'},
            'codename': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'content_type': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['contenttypes.ContentType']"}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '50'})
        },
        'auth.user': {
            'Meta': {'object_name': 'User'},
            'date_joined': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
            'email': ('django.db.models.fields.EmailField', [], {'max_length': '75'}),
            'first_name': ('django.db.models.fields.CharField', [], {'max_length': '30', 'blank': 'True'}),
            'groups': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['auth.Group']", 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'is_active': ('django.db.models.fields.BooleanField', [], {'default': 'True', 'blank': 'True'}),
            'is_staff': ('django.db.models.fields.BooleanField', [], {'default': 'False', 'blank': 'True'}),
            'is_superuser': ('django.db.models.fields.BooleanField', [], {'default': 'False', 'blank': 'True'}),
            'last_login': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
            'last_name': ('django.db.models.fields.CharField', [], {'max_length': '30', 'blank': 'True'}),
            'password': ('django.db.models.fields.CharField', [], {'max_length': '128'}),
            'user_permissions': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['auth.Permission']", 'blank': 'True'}),
            'username': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '32'})
        },
        'contenttypes.contenttype': {
            'Meta': {'unique_together': "(('app_label', 'model'),)", 'object_name': 'ContentType', 'db_table': "'django_content_type'"},
            'app_label': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'model': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '100'})
        },
        'market.marketplace': {
            'Meta': {'object_name': 'MarketPlace'},
            'base_domain': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '128'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '92'}),
            'slug': ('django.db.models.fields.SlugField', [], {'unique': 'True', 'max_length': '92', 'db_index': 'True'}),
            'template_prefix': ('django.db.models.fields.SlugField', [], {'unique': 'True', 'max_length': '92', 'db_index': 'True'}),
            'title': ('django.db.models.fields.CharField', [], {'max_length': '92'})
        },
        'market_buy.show': {
            'Meta': {'object_name': 'Show'},
            'address': ('django.db.models.fields.CharField', [], {'max_length': '128'}),
            'admission': ('django.db.models.fields.DecimalField', [], {'default': "'0.0'", 'max_digits': '11', 'decimal_places': '2'}),
            'city': ('django.db.models.fields.CharField', [], {'max_length': '128'}),
            'contact_info': ('django.db.models.fields.CharField', [], {'max_length': '128'}),
            'date_from': ('django.db.models.fields.DateField', [], {}),
            'date_to': ('django.db.models.fields.DateField', [], {}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'marketplace': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['market.MarketPlace']"}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '128'}),
            'state': ('django.db.models.fields.CharField', [], {'max_length': '128'}),
            'time_from': ('django.db.models.fields.TimeField', [], {}),
            'time_to': ('django.db.models.fields.TimeField', [], {}),
            'zip': ('django.db.models.fields.CharField', [], {'max_length': '10'})
        },
        'shops.dealertoshow': {
            'Meta': {'object_name': 'DealerToShow'},
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'shop': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['shops.Shop']"}),
            'show': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['market_buy.Show']"})
        },
        'shops.shop': {
            'Meta': {'object_name': 'Shop'},
            'admin': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['auth.User']"}),
            'bids': ('django.db.models.fields.IntegerField', [], {'default': '0'}),
            'date_time': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'location': ('django.db.models.fields.CharField', [], {'default': "'39.29038,-76.61219'", 'max_length': '255'}),
            'marketplace': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['market.MarketPlace']"}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '60'}),
            'views': ('django.db.models.fields.IntegerField', [], {'default': '0'})
        },
        'shops.shopbillinginfo': {
            'Meta': {'object_name': 'ShopBillingInfo'},
            'card_ending': ('django.db.models.fields.CharField', [], {'default': "'Card ending'", 'max_length': '60'}),
            'card_expire': ('django.db.models.fields.DateTimeField', [], {}),
            'city': ('django.db.models.fields.CharField', [], {'default': "'City'", 'max_length': '60'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'shop': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['shops.Shop']"}),
            'state': ('django.db.models.fields.CharField', [], {'default': "'State'", 'max_length': '60'}),
            'street': ('django.db.models.fields.CharField', [], {'default': "'Street'", 'max_length': '60'}),
            'zip': ('django.db.models.fields.CharField', [], {'default': "'Zip'", 'max_length': '30'})
        }
    }

    complete_apps = ['shops']

########NEW FILE########
__FILENAME__ = 0004_auto__add_mailinglistmember
# encoding: utf-8
import datetime
from south.db import db
from south.v2 import SchemaMigration
from django.db import models

class Migration(SchemaMigration):

    def forwards(self, orm):
        
        # Adding model 'MailingListMember'
        db.create_table('shops_mailinglistmember', (
            ('id', self.gf('django.db.models.fields.AutoField')(primary_key=True)),
            ('shop', self.gf('django.db.models.fields.related.ForeignKey')(to=orm['shops.Shop'])),
            ('email', self.gf('django.db.models.fields.EmailField')(max_length=75)),
        ))
        db.send_create_signal('shops', ['MailingListMember'])


    def backwards(self, orm):
        
        # Deleting model 'MailingListMember'
        db.delete_table('shops_mailinglistmember')


    models = {
        'auth.group': {
            'Meta': {'object_name': 'Group'},
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '80'}),
            'permissions': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['auth.Permission']", 'symmetrical': 'False', 'blank': 'True'})
        },
        'auth.permission': {
            'Meta': {'unique_together': "(('content_type', 'codename'),)", 'object_name': 'Permission'},
            'codename': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'content_type': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['contenttypes.ContentType']"}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '50'})
        },
        'auth.user': {
            'Meta': {'object_name': 'User'},
            'date_joined': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
            'email': ('django.db.models.fields.EmailField', [], {'max_length': '75', 'blank': 'True'}),
            'first_name': ('django.db.models.fields.CharField', [], {'max_length': '30', 'blank': 'True'}),
            'groups': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['auth.Group']", 'symmetrical': 'False', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'is_active': ('django.db.models.fields.BooleanField', [], {'default': 'True', 'blank': 'True'}),
            'is_staff': ('django.db.models.fields.BooleanField', [], {'default': 'False', 'blank': 'True'}),
            'is_superuser': ('django.db.models.fields.BooleanField', [], {'default': 'False', 'blank': 'True'}),
            'last_login': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
            'last_name': ('django.db.models.fields.CharField', [], {'max_length': '30', 'blank': 'True'}),
            'password': ('django.db.models.fields.CharField', [], {'max_length': '128'}),
            'user_permissions': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['auth.Permission']", 'symmetrical': 'False', 'blank': 'True'}),
            'username': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '30'})
        },
        'contenttypes.contenttype': {
            'Meta': {'unique_together': "(('app_label', 'model'),)", 'object_name': 'ContentType', 'db_table': "'django_content_type'"},
            'app_label': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'model': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '100'})
        },
        'market.marketplace': {
            'Meta': {'object_name': 'MarketPlace'},
            'base_domain': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '128'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '92'}),
            'slug': ('django.db.models.fields.SlugField', [], {'unique': 'True', 'max_length': '92', 'db_index': 'True'}),
            'template_prefix': ('django.db.models.fields.SlugField', [], {'unique': 'True', 'max_length': '92', 'db_index': 'True'}),
            'title': ('django.db.models.fields.CharField', [], {'max_length': '92'})
        },
        'market_buy.show': {
            'Meta': {'object_name': 'Show'},
            'address': ('django.db.models.fields.CharField', [], {'max_length': '128'}),
            'admission': ('django.db.models.fields.DecimalField', [], {'default': "'0.0'", 'max_digits': '11', 'decimal_places': '2'}),
            'city': ('django.db.models.fields.CharField', [], {'max_length': '128'}),
            'contact_info': ('django.db.models.fields.CharField', [], {'max_length': '128'}),
            'country': ('django.db.models.fields.CharField', [], {'default': "'US'", 'max_length': '128'}),
            'date_from': ('django.db.models.fields.DateField', [], {}),
            'date_to': ('django.db.models.fields.DateField', [], {}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'location': ('django.db.models.fields.CharField', [], {'default': "'49.00, -96.00'", 'max_length': '255'}),
            'marketplace': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['market.MarketPlace']"}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '128'}),
            'state': ('django.db.models.fields.CharField', [], {'max_length': '128'}),
            'time_from': ('django.db.models.fields.TimeField', [], {}),
            'time_to': ('django.db.models.fields.TimeField', [], {}),
            'zip': ('django.db.models.fields.CharField', [], {'max_length': '10'})
        },
        'shops.dealertoshow': {
            'Meta': {'object_name': 'DealerToShow'},
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'shop': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['shops.Shop']"}),
            'show': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['market_buy.Show']"})
        },
        'shops.mailinglistmember': {
            'Meta': {'object_name': 'MailingListMember'},
            'email': ('django.db.models.fields.EmailField', [], {'max_length': '75'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'shop': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['shops.Shop']"})
        },
        'shops.shop': {
            'Meta': {'object_name': 'Shop'},
            'admin': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['auth.User']"}),
            'bids': ('django.db.models.fields.IntegerField', [], {'default': '0'}),
            'date_time': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'location': ('django.db.models.fields.CharField', [], {'default': "'39.29038,-76.61219'", 'max_length': '255'}),
            'marketplace': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['market.MarketPlace']"}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '60'}),
            'views': ('django.db.models.fields.IntegerField', [], {'default': '0'})
        },
        'shops.shopbillinginfo': {
            'Meta': {'object_name': 'ShopBillingInfo'},
            'card_ending': ('django.db.models.fields.CharField', [], {'default': "'Card ending'", 'max_length': '60'}),
            'card_expire': ('django.db.models.fields.DateTimeField', [], {}),
            'city': ('django.db.models.fields.CharField', [], {'default': "'City'", 'max_length': '60'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'shop': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['shops.Shop']"}),
            'state': ('django.db.models.fields.CharField', [], {'default': "'State'", 'max_length': '60'}),
            'street': ('django.db.models.fields.CharField', [], {'default': "'Street'", 'max_length': '60'}),
            'zip': ('django.db.models.fields.CharField', [], {'default': "'Zip'", 'max_length': '30'})
        }
    }

    complete_apps = ['shops']

########NEW FILE########
__FILENAME__ = 0005_auto__add_field_shop_last_date_to_post__add_field_shop_last_date_to_ch
# encoding: utf-8
import datetime
from south.db import db
from south.v2 import SchemaMigration
from django.db import models

class Migration(SchemaMigration):

    def forwards(self, orm):
        
        # Adding field 'Shop.last_date_to_post'
        db.add_column('shops_shop', 'last_date_to_post', self.gf('django.db.models.fields.DateTimeField')(null=True, blank=True), keep_default=False)

        # Adding field 'Shop.last_date_to_change_layout'
        db.add_column('shops_shop', 'last_date_to_change_layout', self.gf('django.db.models.fields.DateTimeField')(null=True, blank=True), keep_default=False)


    def backwards(self, orm):
        
        # Deleting field 'Shop.last_date_to_post'
        db.delete_column('shops_shop', 'last_date_to_post')

        # Deleting field 'Shop.last_date_to_change_layout'
        db.delete_column('shops_shop', 'last_date_to_change_layout')


    models = {
        'auth.group': {
            'Meta': {'object_name': 'Group'},
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '80'}),
            'permissions': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['auth.Permission']", 'symmetrical': 'False', 'blank': 'True'})
        },
        'auth.permission': {
            'Meta': {'unique_together': "(('content_type', 'codename'),)", 'object_name': 'Permission'},
            'codename': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'content_type': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['contenttypes.ContentType']"}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '50'})
        },
        'auth.user': {
            'Meta': {'object_name': 'User'},
            'date_joined': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
            'email': ('django.db.models.fields.EmailField', [], {'max_length': '75', 'blank': 'True'}),
            'first_name': ('django.db.models.fields.CharField', [], {'max_length': '30', 'blank': 'True'}),
            'groups': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['auth.Group']", 'symmetrical': 'False', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'is_active': ('django.db.models.fields.BooleanField', [], {'default': 'True', 'blank': 'True'}),
            'is_staff': ('django.db.models.fields.BooleanField', [], {'default': 'False', 'blank': 'True'}),
            'is_superuser': ('django.db.models.fields.BooleanField', [], {'default': 'False', 'blank': 'True'}),
            'last_login': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
            'last_name': ('django.db.models.fields.CharField', [], {'max_length': '30', 'blank': 'True'}),
            'password': ('django.db.models.fields.CharField', [], {'max_length': '128'}),
            'user_permissions': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['auth.Permission']", 'symmetrical': 'False', 'blank': 'True'}),
            'username': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '30'})
        },
        'contenttypes.contenttype': {
            'Meta': {'unique_together': "(('app_label', 'model'),)", 'object_name': 'ContentType', 'db_table': "'django_content_type'"},
            'app_label': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'model': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '100'})
        },
        'market.marketplace': {
            'Meta': {'object_name': 'MarketPlace'},
            'base_domain': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '128'}),
            'charge_on_card_as': ('django.db.models.fields.CharField', [], {'default': "''", 'max_length': '255'}),
            'contact_email': ('django.db.models.fields.EmailField', [], {'default': "'contact@yourstore.com'", 'max_length': '75'}),
            'contact_phone': ('django.db.models.fields.CharField', [], {'default': "''", 'max_length': '128'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '92'}),
            'slug': ('django.db.models.fields.SlugField', [], {'unique': 'True', 'max_length': '92', 'db_index': 'True'}),
            'template_prefix': ('django.db.models.fields.SlugField', [], {'unique': 'True', 'max_length': '92', 'db_index': 'True'}),
            'title': ('django.db.models.fields.CharField', [], {'max_length': '92'})
        },
        'market_buy.show': {
            'Meta': {'object_name': 'Show'},
            'address': ('django.db.models.fields.CharField', [], {'max_length': '128'}),
            'admission': ('django.db.models.fields.DecimalField', [], {'default': "'0.0'", 'max_digits': '11', 'decimal_places': '2'}),
            'city': ('django.db.models.fields.CharField', [], {'max_length': '128'}),
            'contact_info': ('django.db.models.fields.CharField', [], {'max_length': '128'}),
            'country': ('django.db.models.fields.CharField', [], {'default': "'US'", 'max_length': '128'}),
            'date_from': ('django.db.models.fields.DateField', [], {}),
            'date_to': ('django.db.models.fields.DateField', [], {}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'location': ('django.db.models.fields.CharField', [], {'default': "'49.00, -96.00'", 'max_length': '255'}),
            'marketplace': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['market.MarketPlace']"}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '128'}),
            'state': ('django.db.models.fields.CharField', [], {'max_length': '128'}),
            'time_from': ('django.db.models.fields.TimeField', [], {}),
            'time_to': ('django.db.models.fields.TimeField', [], {}),
            'zip': ('django.db.models.fields.CharField', [], {'max_length': '10'})
        },
        'shops.dealertoshow': {
            'Meta': {'object_name': 'DealerToShow'},
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'shop': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['shops.Shop']"}),
            'show': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['market_buy.Show']"})
        },
        'shops.mailinglistmember': {
            'Meta': {'object_name': 'MailingListMember'},
            'email': ('django.db.models.fields.EmailField', [], {'max_length': '75'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'shop': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['shops.Shop']"})
        },
        'shops.shop': {
            'Meta': {'object_name': 'Shop'},
            'admin': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['auth.User']"}),
            'bids': ('django.db.models.fields.IntegerField', [], {'default': '0'}),
            'date_time': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'last_date_to_change_layout': ('django.db.models.fields.DateTimeField', [], {'null': 'True', 'blank': 'True'}),
            'last_date_to_post': ('django.db.models.fields.DateTimeField', [], {'null': 'True', 'blank': 'True'}),
            'location': ('django.db.models.fields.CharField', [], {'default': "'39.29038,-76.61219'", 'max_length': '255'}),
            'marketplace': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['market.MarketPlace']"}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '60'}),
            'views': ('django.db.models.fields.IntegerField', [], {'default': '0'})
        },
        'shops.shopbillinginfo': {
            'Meta': {'object_name': 'ShopBillingInfo'},
            'card_ending': ('django.db.models.fields.CharField', [], {'default': "'Card ending'", 'max_length': '60'}),
            'card_expire': ('django.db.models.fields.DateTimeField', [], {}),
            'city': ('django.db.models.fields.CharField', [], {'default': "'City'", 'max_length': '60'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'shop': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['shops.Shop']"}),
            'state': ('django.db.models.fields.CharField', [], {'default': "'State'", 'max_length': '60'}),
            'street': ('django.db.models.fields.CharField', [], {'default': "'Street'", 'max_length': '60'}),
            'zip': ('django.db.models.fields.CharField', [], {'default': "'Zip'", 'max_length': '30'})
        }
    }

    complete_apps = ['shops']

########NEW FILE########
__FILENAME__ = 0006_auto__del_field_shopbillinginfo_card_ending__del_field_shopbillinginfo
# encoding: utf-8
import datetime
from south.db import db
from south.v2 import SchemaMigration
from django.db import models

class Migration(SchemaMigration):

    def forwards(self, orm):
        
        # Deleting field 'ShopBillingInfo.card_ending'
        db.delete_column('shops_shopbillinginfo', 'card_ending')

        # Deleting field 'ShopBillingInfo.card_expire'
        db.delete_column('shops_shopbillinginfo', 'card_expire')

        # Adding field 'ShopBillingInfo.customer_id'
        db.add_column('shops_shopbillinginfo', 'customer_id', self.gf('django.db.models.fields.CharField')(default='undefined', max_length=60), keep_default=False)


    def backwards(self, orm):
        
        # Adding field 'ShopBillingInfo.card_ending'
        db.add_column('shops_shopbillinginfo', 'card_ending', self.gf('django.db.models.fields.CharField')(default='Card ending', max_length=60), keep_default=False)

        # Adding field 'ShopBillingInfo.card_expire'
        db.add_column('shops_shopbillinginfo', 'card_expire', self.gf('django.db.models.fields.DateTimeField')(default=None), keep_default=False)

        # Deleting field 'ShopBillingInfo.customer_id'
        db.delete_column('shops_shopbillinginfo', 'customer_id')


    models = {
        'auth.group': {
            'Meta': {'object_name': 'Group'},
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '80'}),
            'permissions': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['auth.Permission']", 'symmetrical': 'False', 'blank': 'True'})
        },
        'auth.permission': {
            'Meta': {'unique_together': "(('content_type', 'codename'),)", 'object_name': 'Permission'},
            'codename': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'content_type': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['contenttypes.ContentType']"}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '50'})
        },
        'auth.user': {
            'Meta': {'object_name': 'User'},
            'date_joined': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
            'email': ('django.db.models.fields.EmailField', [], {'max_length': '75', 'blank': 'True'}),
            'first_name': ('django.db.models.fields.CharField', [], {'max_length': '30', 'blank': 'True'}),
            'groups': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['auth.Group']", 'symmetrical': 'False', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'is_active': ('django.db.models.fields.BooleanField', [], {'default': 'True', 'blank': 'True'}),
            'is_staff': ('django.db.models.fields.BooleanField', [], {'default': 'False', 'blank': 'True'}),
            'is_superuser': ('django.db.models.fields.BooleanField', [], {'default': 'False', 'blank': 'True'}),
            'last_login': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
            'last_name': ('django.db.models.fields.CharField', [], {'max_length': '30', 'blank': 'True'}),
            'password': ('django.db.models.fields.CharField', [], {'max_length': '128'}),
            'user_permissions': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['auth.Permission']", 'symmetrical': 'False', 'blank': 'True'}),
            'username': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '30'})
        },
        'contenttypes.contenttype': {
            'Meta': {'unique_together': "(('app_label', 'model'),)", 'object_name': 'ContentType', 'db_table': "'django_content_type'"},
            'app_label': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'model': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '100'})
        },
        'market.marketplace': {
            'Meta': {'object_name': 'MarketPlace'},
            'base_domain': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '128'}),
            'charge_on_card_as': ('django.db.models.fields.CharField', [], {'default': "''", 'max_length': '255'}),
            'contact_email': ('django.db.models.fields.EmailField', [], {'default': "'contact@yourstore.com'", 'max_length': '75'}),
            'contact_phone': ('django.db.models.fields.CharField', [], {'default': "''", 'max_length': '128'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '92'}),
            'slug': ('django.db.models.fields.SlugField', [], {'unique': 'True', 'max_length': '92', 'db_index': 'True'}),
            'template_prefix': ('django.db.models.fields.SlugField', [], {'unique': 'True', 'max_length': '92', 'db_index': 'True'}),
            'title': ('django.db.models.fields.CharField', [], {'max_length': '92'})
        },
        'market_buy.show': {
            'Meta': {'object_name': 'Show'},
            'address': ('django.db.models.fields.CharField', [], {'max_length': '128'}),
            'admission': ('django.db.models.fields.DecimalField', [], {'default': "'0.0'", 'max_digits': '11', 'decimal_places': '2'}),
            'city': ('django.db.models.fields.CharField', [], {'max_length': '128'}),
            'contact_info': ('django.db.models.fields.CharField', [], {'max_length': '128'}),
            'country': ('django.db.models.fields.CharField', [], {'default': "'US'", 'max_length': '128'}),
            'date_from': ('django.db.models.fields.DateField', [], {}),
            'date_to': ('django.db.models.fields.DateField', [], {}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'location': ('django.db.models.fields.CharField', [], {'default': "'49.00, -96.00'", 'max_length': '255'}),
            'marketplace': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['market.MarketPlace']"}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '128'}),
            'state': ('django.db.models.fields.CharField', [], {'max_length': '128'}),
            'time_from': ('django.db.models.fields.TimeField', [], {'default': 'datetime.time(12, 0)'}),
            'time_to': ('django.db.models.fields.TimeField', [], {'default': 'datetime.time(12, 0)'}),
            'zip': ('django.db.models.fields.CharField', [], {'max_length': '10'})
        },
        'shops.dealertoshow': {
            'Meta': {'object_name': 'DealerToShow'},
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'shop': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['shops.Shop']"}),
            'show': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['market_buy.Show']"})
        },
        'shops.mailinglistmember': {
            'Meta': {'object_name': 'MailingListMember'},
            'email': ('django.db.models.fields.EmailField', [], {'max_length': '75'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'shop': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['shops.Shop']"})
        },
        'shops.shop': {
            'Meta': {'object_name': 'Shop'},
            'admin': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['auth.User']"}),
            'bids': ('django.db.models.fields.IntegerField', [], {'default': '0'}),
            'date_time': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'last_date_to_change_layout': ('django.db.models.fields.DateTimeField', [], {'null': 'True', 'blank': 'True'}),
            'last_date_to_post': ('django.db.models.fields.DateTimeField', [], {'null': 'True', 'blank': 'True'}),
            'location': ('django.db.models.fields.CharField', [], {'default': "'39.29038,-76.61219'", 'max_length': '255'}),
            'marketplace': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['market.MarketPlace']"}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '60'}),
            'views': ('django.db.models.fields.IntegerField', [], {'default': '0'})
        },
        'shops.shopbillinginfo': {
            'Meta': {'object_name': 'ShopBillingInfo'},
            'city': ('django.db.models.fields.CharField', [], {'default': "'City'", 'max_length': '60'}),
            'customer_id': ('django.db.models.fields.CharField', [], {'default': "'undefined'", 'max_length': '60'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'shop': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['shops.Shop']"}),
            'state': ('django.db.models.fields.CharField', [], {'default': "'State'", 'max_length': '60'}),
            'street': ('django.db.models.fields.CharField', [], {'default': "'Street'", 'max_length': '60'}),
            'zip': ('django.db.models.fields.CharField', [], {'default': "'Zip'", 'max_length': '30'})
        }
    }

    complete_apps = ['shops']

########NEW FILE########
__FILENAME__ = 0007_auto__add_field_shop_active
# encoding: utf-8
import datetime
from south.db import db
from south.v2 import SchemaMigration
from django.db import models

class Migration(SchemaMigration):

    def forwards(self, orm):
        
        # Adding field 'Shop.active'
        db.add_column('shops_shop', 'active', self.gf('django.db.models.fields.BooleanField')(default=True, blank=True), keep_default=False)


    def backwards(self, orm):
        
        # Deleting field 'Shop.active'
        db.delete_column('shops_shop', 'active')


    models = {
        'auth.group': {
            'Meta': {'object_name': 'Group'},
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '80'}),
            'permissions': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['auth.Permission']", 'symmetrical': 'False', 'blank': 'True'})
        },
        'auth.permission': {
            'Meta': {'unique_together': "(('content_type', 'codename'),)", 'object_name': 'Permission'},
            'codename': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'content_type': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['contenttypes.ContentType']"}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '50'})
        },
        'auth.user': {
            'Meta': {'object_name': 'User'},
            'date_joined': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
            'email': ('django.db.models.fields.EmailField', [], {'max_length': '75', 'blank': 'True'}),
            'first_name': ('django.db.models.fields.CharField', [], {'max_length': '30', 'blank': 'True'}),
            'groups': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['auth.Group']", 'symmetrical': 'False', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'is_active': ('django.db.models.fields.BooleanField', [], {'default': 'True', 'blank': 'True'}),
            'is_staff': ('django.db.models.fields.BooleanField', [], {'default': 'False', 'blank': 'True'}),
            'is_superuser': ('django.db.models.fields.BooleanField', [], {'default': 'False', 'blank': 'True'}),
            'last_login': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
            'last_name': ('django.db.models.fields.CharField', [], {'max_length': '30', 'blank': 'True'}),
            'password': ('django.db.models.fields.CharField', [], {'max_length': '128'}),
            'user_permissions': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['auth.Permission']", 'symmetrical': 'False', 'blank': 'True'}),
            'username': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '30'})
        },
        'contenttypes.contenttype': {
            'Meta': {'unique_together': "(('app_label', 'model'),)", 'object_name': 'ContentType', 'db_table': "'django_content_type'"},
            'app_label': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'model': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '100'})
        },
        'market.marketplace': {
            'Meta': {'object_name': 'MarketPlace'},
            'base_domain': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '128'}),
            'charge_on_card_as': ('django.db.models.fields.CharField', [], {'default': "''", 'max_length': '255'}),
            'contact_email': ('django.db.models.fields.EmailField', [], {'default': "'contact@yourstore.com'", 'max_length': '75'}),
            'contact_phone': ('django.db.models.fields.CharField', [], {'default': "''", 'max_length': '128'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '92'}),
            'slug': ('django.db.models.fields.SlugField', [], {'unique': 'True', 'max_length': '92', 'db_index': 'True'}),
            'template_prefix': ('django.db.models.fields.SlugField', [], {'unique': 'True', 'max_length': '92', 'db_index': 'True'}),
            'title': ('django.db.models.fields.CharField', [], {'max_length': '92'})
        },
        'market_buy.show': {
            'Meta': {'object_name': 'Show'},
            'address': ('django.db.models.fields.CharField', [], {'max_length': '128'}),
            'admission': ('django.db.models.fields.DecimalField', [], {'default': "'0.0'", 'max_digits': '11', 'decimal_places': '2'}),
            'city': ('django.db.models.fields.CharField', [], {'max_length': '128'}),
            'contact_info': ('django.db.models.fields.CharField', [], {'max_length': '128'}),
            'country': ('django.db.models.fields.CharField', [], {'default': "'US'", 'max_length': '128'}),
            'date_from': ('django.db.models.fields.DateField', [], {}),
            'date_to': ('django.db.models.fields.DateField', [], {}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'location': ('django.db.models.fields.CharField', [], {'default': "'49.00, -96.00'", 'max_length': '255'}),
            'marketplace': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['market.MarketPlace']"}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '128'}),
            'state': ('django.db.models.fields.CharField', [], {'max_length': '128'}),
            'time_from': ('django.db.models.fields.TimeField', [], {'default': 'datetime.time(12, 0)'}),
            'time_to': ('django.db.models.fields.TimeField', [], {'default': 'datetime.time(12, 0)'}),
            'zip': ('django.db.models.fields.CharField', [], {'max_length': '10'})
        },
        'shops.dealertoshow': {
            'Meta': {'object_name': 'DealerToShow'},
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'shop': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['shops.Shop']"}),
            'show': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['market_buy.Show']"})
        },
        'shops.mailinglistmember': {
            'Meta': {'object_name': 'MailingListMember'},
            'email': ('django.db.models.fields.EmailField', [], {'max_length': '75'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'shop': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['shops.Shop']"})
        },
        'shops.shop': {
            'Meta': {'object_name': 'Shop'},
            'active': ('django.db.models.fields.BooleanField', [], {'default': 'True', 'blank': 'True'}),
            'admin': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['auth.User']"}),
            'bids': ('django.db.models.fields.IntegerField', [], {'default': '0'}),
            'date_time': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'last_date_to_change_layout': ('django.db.models.fields.DateTimeField', [], {'null': 'True', 'blank': 'True'}),
            'last_date_to_post': ('django.db.models.fields.DateTimeField', [], {'null': 'True', 'blank': 'True'}),
            'location': ('django.db.models.fields.CharField', [], {'default': "'39.29038,-76.61219'", 'max_length': '255'}),
            'marketplace': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['market.MarketPlace']"}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '60'}),
            'views': ('django.db.models.fields.IntegerField', [], {'default': '0'})
        },
        'shops.shopbillinginfo': {
            'Meta': {'object_name': 'ShopBillingInfo'},
            'city': ('django.db.models.fields.CharField', [], {'default': "'City'", 'max_length': '60'}),
            'customer_id': ('django.db.models.fields.CharField', [], {'default': "'undefined'", 'max_length': '60'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'shop': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['shops.Shop']"}),
            'state': ('django.db.models.fields.CharField', [], {'default': "'State'", 'max_length': '60'}),
            'street': ('django.db.models.fields.CharField', [], {'default': "'Street'", 'max_length': '60'}),
            'zip': ('django.db.models.fields.CharField', [], {'default': "'Zip'", 'max_length': '30'})
        }
    }

    complete_apps = ['shops']

########NEW FILE########
__FILENAME__ = models
import logging

from django.conf import settings 
from django.db import models
from django.db.models import Q
from django.contrib import admin

from auth.models import User 
from market.models import MarketPlace
from market_buy.models import Show

from payments.gateways.braintreegw import BraintreeGateway

class ShopManager(models.Manager):
    
    def create(self, marketplace, name, admin, name_store):
        
        from geopy import geocoders
        from themes.models import Theme
        from preferences.models import Preference, DnsShop
        from blog_pages.models import Home, About, Menu, DynamicPageContent
        from themes.models import PAGES
        
        shop = Shop(marketplace=marketplace, name=name, admin=admin)
        
        profile = admin.get_profile()
        try:
            #get the geoposition according to the shop address
            g = geocoders.Google(settings.GOOGLE_KEY)
            place = "%s, %s, %s, %s" % (profile.street_address, profile.city, profile.state, profile.country)
            place, point = g.geocode(place)
            shop.location = "%s,%s" % point
        except Exception, e:
            logging.critical(e)
        
        shop.save()

        Theme.create_default(shop)
        
        """ Create Static Pages for this shop """
        Home(shop=shop).save()
        About(shop=shop).save()
        
        """ Create Content for Dynamic Pages for this shop """        
        for page in PAGES:
            DynamicPageContent(shop=shop, page=page, meta_content=page).save()
            
        """ Create Default MENU """
        Menu.create_default(shop)
            
        """ Create DNS default """
        dns = DnsShop(shop=shop, dns="%s.%s" % (shop.name, settings.DEFAULT_DNS), default=True)
        dns.save()
            
        """ Create preference to shop """
        preference = Preference(shop=shop, name_store=name_store)
        preference.save()
        
        
        return shop
    
class ActiveShopManager(models.Manager):
    
    def get_query_set(self):
        return super(ActiveShopManager, self).get_query_set().filter(active=True)
    

class Shop(models.Model):
    marketplace = models.ForeignKey(MarketPlace)
    admin = models.ForeignKey(User)
    name = models.CharField(max_length=60)
    date_time = models.DateTimeField(auto_now_add=True)
    views = models.IntegerField(default=0)
    bids = models.IntegerField(default=0)
    location = models.CharField(max_length=255, default="39.29038,-76.61219")
    last_date_to_post = models.DateTimeField(blank=True, null=True)
    last_date_to_change_layout = models.DateTimeField(blank=True, null=True)
    active = models.BooleanField(default=True) 
    objects = ShopManager()
    actives = ActiveShopManager()
    
    def save(self, *args, **kwargs):
        if self.subscription():
            self.active = self.subscription().status == "A"
        super(Shop, self).save(*args, **kwargs)
        
    def __unicode__(self):
        return self.name.capitalize()
    
    def delete(self, *args, **kwargs):
        status = self.subscription().status
        if status == "A":
            raise Exception("This shop can't be deleted because it has an active subscription")
        else:
            super(Shop, self).delete(*args, **kwargs)
    
    @property
    def default_dns(self):
        """
        Builds the default dns name of the shop
        #FIXME: remember to update this once we create the marketplace
        """
        from preferences.models import DnsShop
        try:
            dns = DnsShop.objects.filter(shop=self, default=True).get()
        except DnsShop.DoesNotExist:
            try:
                dns = DnsShop.objects.filter(shop=self)[0]
                dns.default = True
                dns.save()
            except IndexError:
                dns = DnsShop(shop=self, dns="%s.%s" % (self.name, settings.DEFAULT_DNS), default=True)
                dns.save()
        return dns.dns
    
    def owner(self):
        return self.admin
    
    def is_admin(self, user):
        #TODO: Reimplement when shop have more that one admin...
        return self.admin == user 
        
    def name_shop(self):
        try:
            return self.preference_set.all().get().name_store.title()
        except:
            return "Shop"
    
    def add_view(self):
        self.views += 1
        self.save()
    
    def billing_info(self):
        try:
            info = self.shopbillinginfo_set.all()[0]
            return info 
        except Exception:
            return None
        
    #TODO: borrar, y poner oneToOne la relacion de preferencia con el shop
    def page(self):
        return self.page_set.all()[0]

    #TODO: borrar, y poner oneToOne la relacion de preferencia con el shop
    def preference(self):
        from preferences.models import Preference
        preferences = Preference.objects.filter(shop=self).get()
        return preferences

    def first_post(self):
        from blog_pages.models import Post
        try:
            return self.post_set.all()[0]
        except:
            post = Post(shop=self, title="First Post", body="""This is your blog. 
            You can use it to write about new product launches, experiences, 
            tips or other news you want your costumers to read about.""")
            post.save()
            return post
        
    def last_post(self):
        from blog_pages.models import Post
        try:
            return Post.objects.filter(shop=self).filter(draft=False).order_by('-date_time')[0]
        except:
            return None
    
    def theme(self):
        try:
            return self.preference_set.all().get().theme.name
        except:
            return 'default'

    def update_page_content(self):
        """ Creates DynamicPageContent for those old shops """
        from themes.models import PAGES
        from blog_pages.models import DynamicPageContent
        for page in PAGES:
            try:
                DynamicPageContent.objects.filter(shop=self, page=page).get()
            except DynamicPageContent.DoesNotExist:
                logging.debug("Creating page %s for %s" % (page, self))
                DynamicPageContent(shop=self, page=page, meta_content=page).save()
            
    def update(self):
        """ Create Blog Page to shop """
        from blog_pages.models import Home, About, Menu
        from themes.models import Theme
                
        try:
            Home.objects.filter(shop=self).get()
        except Home.DoesNotExist:
            Home(shop=self).save()
            
        try:
            About.objects.filter(shop=self).get()
        except About.DoesNotExist:
            About(shop=self).save()
        Menu.create_default(self)

        """ Create default pages whit default theme """
        
        #Theme.create_default(self)

    def last_posted_products(self):
        from inventory.models import Product 
        products = Product.objects.filter(shop=self, latest_item=False) 
        if products.count < 5:
            return products
        else:
            products = products.order_by('-date_time')[:5]
            return products
    
    def last_date_to_post_item(self):
        from inventory.models import Product
        
        if self.last_date_to_post is None:
            try: 
                product = Product.objects.filter(shop=self, latest_item=True).get()
                self.last_date_to_post = product.date_time
                self.save()                
            except:
                return None
        
        return self.last_date_to_post
    
    def total_items(self):
        from for_sale.models import Item
        return Item.objects.filter(shop=self).count()
    
    def total_products(self):
        from inventory.models import Product
        return Product.objects.filter(shop=self).count()
    
    def total_transactions(self):
        from sell.models import Sell
        return Sell.objects.filter(shop=self, shop__marketplace=self.marketplace).count()
    
    def categories_list(self):
        return sorted(set(map(lambda product: product.category, self.product_set.filter(Q(item__qty__gt=0)|Q(lot__isnull=False)).select_related('category'))), key=lambda category: category.name)
    
    def sub_categories_list(self):
        return sorted(set(map(lambda product: product.subcategory, self.product_set.filter(Q(subcategory__isnull=False),Q(item__qty__gt=0)|Q(lot__isnull=False)).select_related('subcategory'))), key=lambda category: category.name)

    def categories_total(self):
        return len(set(map(lambda product: product.category, self.product_set.filter(Q(item__qty__gt=0)|Q(lot__isnull=False)).select_related('category'))))
    
    def sub_categories_total(self):
        return len(set(map(lambda product: product.subcategory, self.product_set.filter(Q(subcategory__isnull=False),Q(item__qty__gt=0)|Q(lot__isnull=False)).select_related('subcategory'))))

    def geo_location(self):
        return self.location.split(",")
    
    def update_geolocation(self):
        from geopy import geocoders
        try:
            profile = self.owner().get_profile()
            g = geocoders.Google(settings.GOOGLE_KEY)
            place = "%s, %s, %s, %s" % (profile.street_address, profile.city, profile.state, profile.country)
            place, point = g.geocode(place)
            self.location = "%s,%s" % point
            self.save()
            logging.info("shop %s updated" % self)
        except Exception, e:
            logging.info("shop %s location could not be updated because %s" % (self, e))
    
    def get_limit(self, key):
        return self.plan().get_limit(key)
    
    def subscription(self):
        from subscriptions.models import Subscription
        from django.core.exceptions import MultipleObjectsReturned
        
        profile = self.owner().get_profile()
        try:
            subscription = Subscription.objects.filter(owner=profile).get()
        except MultipleObjectsReturned:
            msg = "It seems that there is more that one subscription for this profile: %s. This should never have happened!" % profile
            logging.critical(msg)
            subscription = Subscription.objects.filter(owner=profile)[0]
        except Exception, e:
            msg = "An exception occurred when trying to get the shop subscription for this shop: %s. %s" % (self, e)
            logging.critical(msg)
            subscription = None
            
        return subscription
    
    def plan(self):
        return self.subscription().plan
    
    def get_main_menu_links(self):
        menus = self.menu_set.all()
        links = []
        if menus.count() > 0:
            for link in menus[0].links():
                if link.to == "/auctions/" and not self.auctions_feature_enabled():
                    continue
                links.append(link)
        return links    
    
    #Getters for Enabled/Disabled Features
    def get_features(self):
        from subscriptions.models import Feature
        features = None
        try:
            features = Feature.objects.filter(shop=self).get()
        except Feature.DoesNotExist:
            plan = self.plan()
            features = Feature(shop=self)
            features.auctions = True if plan.create_auctions == 0 else False 
            features.wishlist = True if plan.community_wish_list == 0 else False
            features.mailinglist = True if plan.collect_emails == 0 else False
            features.google_analytics = True if plan.google_analytics_support == 0 else False
            features.show_attendance = True if plan.show_attendance == 0 else False
            features.custom_dns = True if plan.custom_domain_name_fee == 0 else False
            features.theme_change = True if plan.theme_change == 0 else False
            features.add_new_pages = True if plan.add_new_pages == 0 else False
            
            if plan.payment_methods >= 1:
                features.paypal = True
            if plan.payment_methods >= 2:
                features.google_checkout = True 
            if plan.payment_methods >= 3:
                features.credit_card = True
            if plan.payment_methods == 4:
                features.manual_payment = True
            
            features.save()
    
        return features
    
    def get_help_text_support(self):
        from support.models import FeaturesHelpText
        help = None
        try:
            help = FeaturesHelpText.objects.all()[0]
        except Exception:
            help = FeaturesHelpText()
            help.save()
        return help
    
    def add_pages_feature_enabled(self):
        return self.get_features().add_new_pages        
    
    def add_pages_feature_price(self):
        return self.plan().add_new_pages
    
    def add_pages_feature_help_text(self):
        return self.get_help_text_support().add_new_pages
    
    def auctions_feature_enabled(self):
        return self.get_features().auctions        
    
    def auctions_feature_price(self):
        return self.plan().create_auctions
    
    def auctions_feature_help_text(self):
        return self.get_help_text_support().auctions
    
    def wishlist_feature_enabled(self):
        return self.get_features().wishlist
    
    def wishlist_feature_price(self):
        return self.plan().community_wish_list
    
    def wishlist_feature_help_text(self):
        return self.get_help_text_support().wishlist
    
    def mailinglist_feature_enabled(self):
        return self.get_features().mailinglist
    
    def mailinglist_feature_price(self):
        return self.plan().collect_emails
    
    def mailinglist_feature_help_text(self):
        return self.get_help_text_support().mailinglist
    
    def analytics_feature_enabled(self):
        return self.get_features().google_analytics
    
    def analytics_feature_price(self):
        return "10.00"
    
    def analytics_feature_help_text(self):
        return self.get_help_text_support().google_analytics
    
    def additional_payment_feature_price(self):
        return self.plan().additional_payment_price
    
    def shows_feature_enabled(self):
        return self.get_features().show_attendance
    
    def shows_feature_price(self):
        return self.plan().show_attendance
    
    def shows_feature_help_text(self):
        return self.get_help_text_support().show_attendance
        
    def dns_feature_enabled(self):
        return self.get_features().custom_dns
    
    def dns_feature_price(self):
        return self.plan().custom_domain_name_fee
    
    def dns_feature_help_text(self):
        return self.get_help_text_support().custom_dns    
    
    def paypal_feature_enabled(self):
        return self.get_features().paypal
    
    def theme_change_enabled(self):
        return self.get_features().theme_change
    
    def credit_card_feature_enabled(self):
        return self.get_features().credit_card
    
    def manual_payment_feature_enabled(self):
        return self.get_features().manual_payment
    
    def google_checkout_feature_enabled(self):
        return self.get_features().google_checkout    
    
    def theme_change_feature_enabled(self):
        return self.get_features().theme_change
    
    def theme_change_feature_price(self):
        return self.plan().theme_change
    
    def voice_support_price(self):
        return self.plan().voice_support_price
    
    def email_support_price(self):
        return self.plan().email_support_price    
    
    
class ShopBillingInfo(models.Model):
    shop = models.ForeignKey(Shop)
    #card_ending = models.CharField(max_length=60, default = "Card ending")
    #card_expire = models.DateTimeField()
    customer_id = models.CharField(max_length=60, default="undefined", help_text="The Braintree CustomerID")
    street = models.CharField(max_length=60, default = "Street")
    zip = models.CharField(max_length=30, default = "Zip")
    city = models.CharField(max_length=60, default = "City")
    state = models.CharField(max_length=60, default = "State")
    
    def __str__(self):
        return "%s (%s)" % (self.shop, self.customer_id)
    
    def credit_card(self):
        
        gw = BraintreeGateway(settings.MERCHANT_ID, settings.PUBLIC_KEY, settings.PRIVATE_KEY)
        customer = None
        cc_bean = {}
        try:
            customer = gw.get_customer_details(self.customer_id)
            cc = customer.credit_cards[0]
            cc_bean['card_type'] = cc.card_type
            cc_bean['expiration_date'] = cc.expiration_date
            cc_bean['masked_number'] = "************" + cc.masked_number[12:]
            cc_bean['expired'] = cc.is_expired
            cc_bean['token'] = cc.token
        except Exception, e:
            logging.critical(e)
        return cc_bean
    
    def update_customer_id(self):
        gw = BraintreeGateway(settings.MERCHANT_ID, settings.PUBLIC_KEY, settings.PRIVATE_KEY)
        try:
            subscription_id = self.shop.subscription().subscription_id
        except:
            logging.critical("Could not update Customer ID for shop %s" % self.shop)
            return
        
        subs = gw.get_subscription_details(subscription_id)
        cid = subs.transactions[0].customer_details.id
        self.customer_id = cid
        self.save()
        logging.critical("Billing info Customer ID for shop %s updated" % self.shop)        
        
    
class DealerToShow(models.Model):
    shop = models.ForeignKey(Shop)
    show = models.ForeignKey(Show)

class MailingListMember(models.Model):
    shop = models.ForeignKey(Shop)
    email = models.EmailField()

    def __unicode__(self):
        return u'%s > %s' %(self.shop.name, self.email)

########NEW FILE########
__FILENAME__ = urls
from django.conf.urls.defaults import *

urlpatterns = patterns('',
    url(r'^list/$', 'shops.views.shop_list', name='shop_list'),
    url(r'^subscription/(?P<shop_id>[\d]+)/$', 'shops.views.shop_subscription', name='shop_subscription'),
    url(r'^subscription/cancel/(?P<shop_id>[\d]+)/$', 'shops.views.shop_cancel_subscription', name='shop_cancel_subscription'),
    url(r'^subscription/change/(?P<plan_id>[\d]+)/$', 'shops.views.change_subscription_plan', name='change_subscription_plan'),
    #url(r'^sign_up/$', 'shops.views.sign_up', name='sign_up'),
)
########NEW FILE########
__FILENAME__ = views
import logging
from django.conf import settings
from django.core.urlresolvers import reverse
from django.http import HttpResponseRedirect, HttpResponse
from django.template import RequestContext
from django.shortcuts import render_to_response, get_object_or_404
from django.db import transaction

from django.utils.translation import ugettext as _

from core.decorators import superuser_required
from core.decorators import shop_admin_required

from blog_pages.models import Home, About, Menu 

from auth.models import User
from users.models import Profile
from preferences.models import DnsShop, Preference
from payments.gateways.braintreegw import BraintreeGateway
from subscriptions.models import Subscription, SubscriptionPlan, SubscriptionCancelation
    
from forms import ShopForm
from models import Shop


@superuser_required
def shop_list(request):
    
    shops = Shop.objects.all()
    return render_to_response('shops/shop_list.html', {'shops': shops}, 
                              RequestContext(request))

@superuser_required
def shop_subscription(request, shop_id):
    shop = get_object_or_404(Shop, pk=shop_id)
    profile = shop.admin.get_profile()
    try:
        subscription = Subscription.objects.filter(owner=profile).get()
        
    except Subscription.DoesNotExist:
        subscription = None
    
    return render_to_response('shops/shop_subscription.html', {'shop' : shop, 'subscription' : subscription}, 
                              RequestContext(request))

def change_subscription_plan(request, plan_id):
    
    plan_id = long(plan_id)
    shop = request.shop
    new_plan = get_object_or_404(SubscriptionPlan, pk=plan_id)
    logging.debug("New Plan >> %s" % new_plan)
    
    shop_subscription = Subscription.objects.filter(owner=shop.admin.get_profile()).get()
    logging.debug("Current Plan >> %s" % shop_subscription.plan)
    
    if shop_subscription.plan.id != plan_id:
        gw = BraintreeGateway(settings.MERCHANT_ID, settings.PUBLIC_KEY, settings.PRIVATE_KEY)
        result = gw.change_subscription(shop_subscription.subscription_id, new_plan.plan_id)
        if result.is_success:
            shop_subscription.plan = new_plan
            shop_subscription.save()
            
            request.flash['message'] = _("Congratulations!! You have successfully changed your subscription plan to %s!" % new_plan.name)
            request.flash['severity'] = "success"
            return HttpResponseRedirect(reverse('subscription_plans'))
        else:
            logging.error(result.message)
            request.flash['message'] = _("There was an error when trying to upgrade/downgrade your subscription plan!")
            request.flash['severity'] = "error"
            return HttpResponseRedirect(reverse('subscription_plans'))
    else:
        request.flash['message'] = _("You are already subscribed to this plan!")
        request.flash['severity'] = "error"
        return HttpResponseRedirect(reverse('subscription_plans'))
    
@shop_admin_required
def shop_cancel_subscription(request, shop_id):
    from subscriptions.models import Subscription
    shop = get_object_or_404(Shop, pk=shop_id)
    profile = shop.admin.get_profile()
    try:
        subscription = Subscription.objects.filter(owner=profile).get()
                 
        gw = BraintreeGateway(settings.MERCHANT_ID, settings.PUBLIC_KEY, settings.PRIVATE_KEY)
        result = gw.cancel_subscription(subscription.subscription_id)
        
        if result.is_success:
            subscription.status = 'C'
            subscription.save()
            
            subscription_cancelation = SubscriptionCancelation(shop=shop, subscription=subscription)
            subscription_cancelation.save()
            
            request.flash['message'] = _("Subscription Cancelled")
            request.flash['severity'] = "success"
            return HttpResponseRedirect(reverse('subscription_overview'))
        
        request.flash['message'] = _("Subscription could not be cancelled. %s" % result.message)
        request.flash['severity'] = "error"
        return HttpResponseRedirect(reverse('subscription_overview'))
        
    except Subscription.DoesNotExist:
        request.flash['message'] = _("Subscription not found!")
        request.flash['severity'] = "error"
        return HttpResponseRedirect(reverse('subscription_overview'))
    

def welcome_shop(request, id):
    shop = get_object_or_404(Shop, pk=id)
    return render_to_response('shops/welcome_shop.html', {'shop': shop}, RequestContext(request))

########NEW FILE########
__FILENAME__ = forms
import datetime
import logging

from django import forms
from django.contrib.localflavor.us.forms import USPhoneNumberField

class EmailContactForm(forms.Form):
    name = forms.CharField(required=False)
    email = forms.EmailField(required=False)
    question = forms.CharField(widget=forms.Textarea, required=False)
    
class PhoneContactForm(forms.Form):
    name = forms.CharField(required=False)
    phone = USPhoneNumberField(required=False)
    messenger_id = forms.CharField(required=False)
    
class CreditCardForm(forms.Form):
    card_holder_name = forms.CharField(max_length=60)
    card_number = forms.CharField(max_length=20)
    expiration_date = forms.CharField(max_length=7)
    security_number = forms.CharField(max_length=4)
########NEW FILE########
__FILENAME__ = models

########NEW FILE########
__FILENAME__ = store_admin_tags
import urllib
import copy
from django import template
from market_buy.models import Show
register = template.Library()

@register.filter
def will_go_show(show, shop):
    return show.will_go_show(shop)

@register.filter
def my_show(show, shop):
    return show.my_show(shop)

@register.filter
def update_filters(params, value):
    k, v = value.split('=')
    new_params = copy.deepcopy(params) 
    new_params.update({k: v})
    return urllib.urlencode(new_params)

@register.filter
def encode_filters(filters):
    return urllib.urlencode(filters)
########NEW FILE########
__FILENAME__ = tests
"""
This file demonstrates two different styles of tests (one doctest and one
unittest). These will both pass when you run "manage.py test".

Replace these with more appropriate tests for your application.
"""
import datetime
import decimal
import logging
import time

from django.test import TestCase
from django.core.urlresolvers import reverse
from django.contrib.auth.models import User

from market.models import MarketCategory
from shops.models import Shop
from sell.models import Cart
from auctions.models import AuctionSession
from lots.models import Lot, BidderIncrementCalculator
from for_sale.models import Item


class StoreAdminTest(TestCase):
    fixtures = [
        'greatcoins_market.json', 
        'greatcoins_subscriptions.json', 
        'greatcoins_auth.json', 
        'greatcoins_shops.json',
        'greatcoins_preferences.json',
        'greatcoins_themes.json'
    ]
    
    def test_urls_access(self):
        
        context = decimal.Context(prec=20, rounding=decimal.ROUND_HALF_DOWN)
        decimal.setcontext(context)
    
        shop = Shop.objects.all()[0]
        category = MarketCategory.objects.all()[0]
        HTTP_HOST = shop.default_dns
        
        now = datetime.datetime.now()
        tomorrow = now + datetime.timedelta(days=1)
        auction = AuctionSession(shop=shop, title="Auction Session Nr 0", description="-- no desc --", start=now, end=tomorrow)
        auction.save()
        
        lot = Lot(shop = shop,
                  title = "Coin From Egypt 1905 (PCGS 60)",
                  description = "rare coin",
                  category = category,
                  date_time = now,
                  weight = "5",
                  session=auction, 
                  starting_bid=decimal.Decimal("10.00"), 
                  reserve=decimal.Decimal("0.00"))
        lot.save()
        
        item = Item(shop = shop,
                  title = "Coin From Rusia 1917 (PCGS 60)",
                  description = "rare coin",
                  category = category,
                  date_time = now,
                  weight = "5",
                  qty = "10",
                  price = decimal.Decimal("150"))
        item.save()
        
        user = shop.admin
#        response = self.client.get(reverse("bidding_view_lot", args=[lot.id]), HTTP_HOST=HTTP_HOST)
#        self.assertEqual(response.status_code, 200, "Failed when trying to view lot")
#       
        success = self.client.login(username=user.username, password="test")
        self.assertEqual(success, True, "Login failed")
         
        ############# CUSTOMERS ################
        response = self.client.get(reverse("home_admin"), HTTP_HOST=HTTP_HOST)
        self.assertEqual(response.status_code, 200, "Failed when trying to reach home_admin")
        
        response = self.client.get(reverse("customers"), HTTP_HOST=HTTP_HOST)
        self.assertEqual(response.status_code, 200, "Failed when trying to reach customers")
        
        response = self.client.get(reverse("customers_overview"), HTTP_HOST=HTTP_HOST)
        self.assertEqual(response.status_code, 200, "Failed when trying to reach customers_overview")
        
        response = self.client.get(reverse("customers_profiles"), HTTP_HOST=HTTP_HOST)
        self.assertEqual(response.status_code, 200, "Failed when trying to reach customers_profiles")
        
        response = self.client.get(reverse("customers_sold_items"), HTTP_HOST=HTTP_HOST)
        self.assertEqual(response.status_code, 200, "Failed when trying to reach customers_sold_items")
        
        response = self.client.get(reverse("customers_payments"), HTTP_HOST=HTTP_HOST)
        self.assertEqual(response.status_code, 200, "Failed when trying to reach customers_payments")
        
        response = self.client.get(reverse("customers_shipments"), HTTP_HOST=HTTP_HOST)
        self.assertEqual(response.status_code, 200, "Failed when trying to reach customers_shipments")
        
        response = self.client.get(reverse("customers_wish_lists"), HTTP_HOST=HTTP_HOST)
        self.assertEqual(response.status_code, 200, "Failed when trying to reach customers_wish_list")
        
#        response = self.client.get(reverse("customers_send_notification"), HTTP_HOST=HTTP_HOST)
#        self.assertEqual(response.status_code, 200, "Failed when trying to bid a valid amount")
        
        response = self.client.get(reverse("customers_mailing_list"), HTTP_HOST=HTTP_HOST)
        self.assertEqual(response.status_code, 200, "Failed when trying to reach customers_mailing_list")
        
        response = self.client.get(reverse("customers_export_mailinglist"), HTTP_HOST=HTTP_HOST)
        self.assertEqual(response.status_code, 200, "Failed when trying to reach customers_export_mailinglist")
        
        ######### WEBSTORE ############
        response = self.client.get(reverse("web_store"), HTTP_HOST=HTTP_HOST)
        self.assertEqual(response.status_code, 200, "Failed when trying to reach web_store")
        
        response = self.client.get(reverse("web_store_overview"), HTTP_HOST=HTTP_HOST)
        self.assertEqual(response.status_code, 200, "Failed when trying to reach web_store_overview")
        
        response = self.client.get(reverse("web_store_marketing"), HTTP_HOST=HTTP_HOST)
        self.assertEqual(response.status_code, 200, "Failed when trying to reach web_store_marketing")
        
        response = self.client.get(reverse("web_store_shows"), HTTP_HOST=HTTP_HOST)
        self.assertEqual(response.status_code, 200, "Failed when trying to reach web_store_shows")
        
#        response = self.client.get(reverse("web_store_theme"), HTTP_HOST=HTTP_HOST)
#        self.assertEqual(response.status_code, 200, "Failed when trying to reach web_store_theme")
        
        response = self.client.get(reverse("web_store_pages"), HTTP_HOST=HTTP_HOST)
        self.assertEqual(response.status_code, 200, "Failed when trying to reach web_store_pages")
        
        response = self.client.get(reverse("web_store_blogs"), HTTP_HOST=HTTP_HOST)
        self.assertEqual(response.status_code, 200, "Failed when trying to reach web_store_blogs")
        
        response = self.client.get(reverse("web_store_navigation"), HTTP_HOST=HTTP_HOST)
        self.assertEqual(response.status_code, 200, "Failed when trying to reach web_store_navigation")
        
#        response = self.client.get(reverse("web_store_show_go"), HTTP_HOST=HTTP_HOST)
#        self.assertEqual(response.status_code, 200, "Failed when trying to bid a valid amount")
#        
#        response = self.client.get(reverse("web_store_show_not_go"), HTTP_HOST=HTTP_HOST)
#        self.assertEqual(response.status_code, 200, "Failed when trying to bid a valid amount")
#        
#        response = self.client.get(reverse("web_store_theme"), HTTP_HOST=HTTP_HOST)
#        self.assertEqual(response.status_code, 200, "Failed when trying to bid a valid amount")
        
        ######### INVENTORY ##########
        response = self.client.get(reverse("inventory"), HTTP_HOST=HTTP_HOST)
        self.assertEqual(response.status_code, 200, "Failed when trying to reach inventory")
        
        response = self.client.get(reverse("inventory_overview"), HTTP_HOST=HTTP_HOST)
        self.assertEqual(response.status_code, 200, "Failed when trying to reach inventory_overview")
        
        response = self.client.get(reverse("inventory_items"), HTTP_HOST=HTTP_HOST)
        self.assertEqual(response.status_code, 200, "Failed when trying to reach inventory_items")
        
        response = self.client.get(reverse("inventory_items_import"), HTTP_HOST=HTTP_HOST)
        self.assertEqual(response.status_code, 200, "Failed when trying to reach inventory_items_import")
        
        response = self.client.get(reverse("inventory_lots"), HTTP_HOST=HTTP_HOST)
        self.assertEqual(response.status_code, 200, "Failed when trying to reach inventory_lots")
                
        response = self.client.get(reverse("inventory_auctions"), HTTP_HOST=HTTP_HOST)
        self.assertEqual(response.status_code, 200, "Failed when trying to reach inventory_auctions")
        
        response = self.client.get(reverse("inventory_categorize"), HTTP_HOST=HTTP_HOST)
        self.assertEqual(response.status_code, 200, "Failed when trying to reach inventory_categorize")
        
        ######## ACCOUNT #########
        response = self.client.get(reverse("account"), HTTP_HOST=HTTP_HOST)
        self.assertEqual(response.status_code, 200, "Failed when trying to reach account")
        
        response = self.client.get(reverse("account_profile"), HTTP_HOST=HTTP_HOST)
        self.assertEqual(response.status_code, 200, "Failed when trying to reach account_profile")
        
        response = self.client.get(reverse("account_password"), HTTP_HOST=HTTP_HOST)
        self.assertEqual(response.status_code, 200, "Failed when trying to reach account_password")
        
        response = self.client.get(reverse("add_profile_photo"), HTTP_HOST=HTTP_HOST)
        self.assertEqual(response.status_code, 302, "Failed when trying to reach add_profile_photo")
        
        response = self.client.get(reverse("preferences"), HTTP_HOST=HTTP_HOST)
        self.assertEqual(response.status_code, 200, "Failed when trying to reach preferences")
    
    
    def test_urls_access_denied(self):
        
        context = decimal.Context(prec=20, rounding=decimal.ROUND_HALF_DOWN)
        decimal.setcontext(context)
    
        shop = Shop.objects.all()[0]
        category = MarketCategory.objects.all()[0]
        HTTP_HOST = shop.default_dns
        
        now = datetime.datetime.now()
        tomorrow = now + datetime.timedelta(days=1)
        auction = AuctionSession(shop=shop, title="Auction Session Nr 0", description="-- no desc --", start=now, end=tomorrow)
        auction.save()
        
        lot = Lot(shop = shop,
                  title = "Coin From Egypt 1905 (PCGS 60)",
                  description = "rare coin",
                  category = category,
                  date_time = now,
                  weight = "5",
                  session=auction, 
                  starting_bid=decimal.Decimal("10.00"), 
                  reserve=decimal.Decimal("0.00"))
        lot.save()
        
        item = Item(shop = shop,
                  title = "Coin From Rusia 1917 (PCGS 60)",
                  description = "rare coin",
                  category = category,
                  date_time = now,
                  weight = "5",
                  qty = "10",
                  price = decimal.Decimal("150"))
        item.save()
        
        ############# CUSTOMERS ################
        response = self.client.get(reverse("home_admin"), HTTP_HOST=HTTP_HOST)
        self.assertEqual(response.status_code, 302, "Failed when trying to reach home_admin")
        
        response = self.client.get(reverse("customers"), HTTP_HOST=HTTP_HOST)
        self.assertEqual(response.status_code, 302, "Failed when trying to reach customers")
        
        response = self.client.get(reverse("customers_overview"), HTTP_HOST=HTTP_HOST)
        self.assertEqual(response.status_code, 302, "Failed when trying to reach customers_overview")
        
        response = self.client.get(reverse("customers_profiles"), HTTP_HOST=HTTP_HOST)
        self.assertEqual(response.status_code, 302, "Failed when trying to reach customers_profiles")
        
        response = self.client.get(reverse("customers_sold_items"), HTTP_HOST=HTTP_HOST)
        self.assertEqual(response.status_code, 302, "Failed when trying to reach customers_sold_items")
        
        response = self.client.get(reverse("customers_payments"), HTTP_HOST=HTTP_HOST)
        self.assertEqual(response.status_code, 302, "Failed when trying to reach customers_payments")
        
        response = self.client.get(reverse("customers_shipments"), HTTP_HOST=HTTP_HOST)
        self.assertEqual(response.status_code, 302, "Failed when trying to reach customers_shipments")
        
        response = self.client.get(reverse("customers_wish_lists"), HTTP_HOST=HTTP_HOST)
        self.assertEqual(response.status_code, 302, "Failed when trying to reach customers_wish_list")
        
#        response = self.client.get(reverse("customers_send_notification"), HTTP_HOST=HTTP_HOST)
#        self.assertEqual(response.status_code, 302, "Failed when trying to bid a valid amount")
        
        response = self.client.get(reverse("customers_mailing_list"), HTTP_HOST=HTTP_HOST)
        self.assertEqual(response.status_code, 302, "Failed when trying to reach customers_mailing_list")
        
        response = self.client.get(reverse("customers_export_mailinglist"), HTTP_HOST=HTTP_HOST)
        self.assertEqual(response.status_code, 302, "Failed when trying to reach customers_export_mailinglist")
        
        ######### WEBSTORE ############
        response = self.client.get(reverse("web_store"), HTTP_HOST=HTTP_HOST)
        self.assertEqual(response.status_code, 302, "Failed when trying to reach web_store")
        
        response = self.client.get(reverse("web_store_overview"), HTTP_HOST=HTTP_HOST)
        self.assertEqual(response.status_code, 302, "Failed when trying to reach web_store_overview")
        
        response = self.client.get(reverse("web_store_marketing"), HTTP_HOST=HTTP_HOST)
        self.assertEqual(response.status_code, 302, "Failed when trying to reach web_store_marketing")
        
        response = self.client.get(reverse("web_store_shows"), HTTP_HOST=HTTP_HOST)
        self.assertEqual(response.status_code, 302, "Failed when trying to reach web_store_shows")
        
#        response = self.client.get(reverse("web_store_theme"), HTTP_HOST=HTTP_HOST)
#        self.assertEqual(response.status_code, 302, "Failed when trying to reach web_store_theme")
        
        response = self.client.get(reverse("web_store_pages"), HTTP_HOST=HTTP_HOST)
        self.assertEqual(response.status_code, 302, "Failed when trying to reach web_store_pages")
        
        response = self.client.get(reverse("web_store_blogs"), HTTP_HOST=HTTP_HOST)
        self.assertEqual(response.status_code, 302, "Failed when trying to reach web_store_blogs")
        
        response = self.client.get(reverse("web_store_navigation"), HTTP_HOST=HTTP_HOST)
        self.assertEqual(response.status_code, 302, "Failed when trying to reach web_store_navigation")

#        self.assertRedirects(response, "/login/", status_code=302, target_status_code=200, msg_prefix='')
#        response = self.client.get(reverse("web_store_show_go"), HTTP_HOST=HTTP_HOST)
#        self.assertEqual(response.status_code, 302, "Failed when trying to bid a valid amount")
#        
#        response = self.client.get(reverse("web_store_show_not_go"), HTTP_HOST=HTTP_HOST)
#        self.assertEqual(response.status_code, 302, "Failed when trying to bid a valid amount")
#        
#        response = self.client.get(reverse("web_store_theme"), HTTP_HOST=HTTP_HOST)
#        self.assertEqual(response.status_code, 302, "Failed when trying to bid a valid amount")
        
        ######### INVENTORY ##########
        response = self.client.get(reverse("inventory"), HTTP_HOST=HTTP_HOST)
        self.assertEqual(response.status_code, 302, "Failed when trying to reach inventory")
        
        response = self.client.get(reverse("inventory_overview"), HTTP_HOST=HTTP_HOST)
        self.assertEqual(response.status_code, 302, "Failed when trying to reach inventory_overview")
        
        response = self.client.get(reverse("inventory_items"), HTTP_HOST=HTTP_HOST)
        self.assertEqual(response.status_code, 302, "Failed when trying to reach inventory_items")
        
        response = self.client.get(reverse("inventory_items_import"), HTTP_HOST=HTTP_HOST)
        self.assertEqual(response.status_code, 302, "Failed when trying to reach inventory_items_import")
        
        response = self.client.get(reverse("inventory_lots"), HTTP_HOST=HTTP_HOST)
        self.assertEqual(response.status_code, 302, "Failed when trying to reach inventory_lots")
                
        response = self.client.get(reverse("inventory_auctions"), HTTP_HOST=HTTP_HOST)
        self.assertEqual(response.status_code, 302, "Failed when trying to reach inventory_auctions")
        
        response = self.client.get(reverse("inventory_categorize"), HTTP_HOST=HTTP_HOST)
        self.assertEqual(response.status_code, 302, "Failed when trying to reach inventory_categorize")
        
        ######## ACCOUNT #########
        response = self.client.get(reverse("account"), HTTP_HOST=HTTP_HOST)
        self.assertEqual(response.status_code, 302, "Failed when trying to reach account")
        
        response = self.client.get(reverse("account_profile"), HTTP_HOST=HTTP_HOST)
        self.assertEqual(response.status_code, 302, "Failed when trying to reach account_profile")
        
        response = self.client.get(reverse("account_password"), HTTP_HOST=HTTP_HOST)
        self.assertEqual(response.status_code, 302, "Failed when trying to reach account_password")
        
        response = self.client.get(reverse("add_profile_photo"), HTTP_HOST=HTTP_HOST)
        self.assertEqual(response.status_code, 302, "Failed when trying to reach add_profile_photo")
        
        response = self.client.get(reverse("preferences"), HTTP_HOST=HTTP_HOST)
        self.assertEqual(response.status_code, 302, "Failed when trying to reach preferences")
########NEW FILE########
__FILENAME__ = urls
from django.conf.urls.defaults import *

urlpatterns = patterns('',
    url(r'^$', 'store_admin.views.home_admin', name='home_admin'),
    
    url(r'^change_qty/$', 'store_admin.views.ajax_change_qty', name='ajax_change_qty'),
    url(r'^change_price/$', 'store_admin.views.ajax_change_price', name='ajax_change_price'),
    
    url(r'^back/$', 'store_admin.views.back_to_site', name='back_to_site'),
    url(r'^customers/$', 'store_admin.views.customers_overview', name='customers'),
    url(r'^customers/overview/$', 'store_admin.views.customers_overview', name='customers_overview'),
    url(r'^customers/profiles/$', 'store_admin.views.customers_profiles', name='customers_profiles'),
    url(r'^customers/sold_items/$', 'store_admin.views.customers_sold_items', name='customers_sold_items'),
    url(r'^customers/payments/$', 'store_admin.views.customers_payments', name='customers_payments'),
    url(r'^customers/shipments/$', 'store_admin.views.customers_shipments', name='customers_shipments'),
    url(r'^customers/wish_lists/$', 'store_admin.views.customers_wish_lists', name='customers_wish_lists'),
    url(r'^customers/wish_lists/send_notification/([\d]+)/$', 'store_admin.views.customers_send_notification', name='customers_send_notification'),
    url(r'^customers/mailing_list/$', 'store_admin.views.customers_mailing_list', name='customers_mailing_list'),
    url(r'^customers/mailing_list/export/$', 'store_admin.views.customers_export_mailinglist', name='customers_export_mailinglist'),

    url(r'^web_store/$', 'store_admin.views.web_store_overview', name='web_store'),
    url(r'^web_store/overview/$', 'store_admin.views.web_store_overview', name='web_store_overview'),
    url(r'^web_store/marketing/$', 'preferences.views.marketing', name='web_store_marketing'),
    url(r'^web_store/shows/$', 'preferences.views.shows', name='web_store_shows'),
    url(r'^web_store/shows/add/$', 'preferences.views.add_show', name='web_store_add_show'),
    url(r'^web_store/shows/edit/([\d]+)/$', 'preferences.views.edit_show', name='web_store_edit_show'),
    url(r'^web_store/show_go/([\d]+)/$', 'preferences.views.show_go', name='web_store_show_go'),
    url(r'^web_store/show_not_go/([\d]+)/$', 'preferences.views.show_not_go', name='web_store_show_not_go'),
    url(r'^web_store/theme/$', 'themes.views.theme', name='web_store_theme'),
    url(r'^web_store/theme/([\d]+)/$', 'themes.views.theme', name='web_store_theme'),
    url(r'^web_store/pages/$', 'blog_pages.views.page_create', name='web_store_pages'),
    url(r'^web_store/blogs/$', 'blog_pages.views.post_add', name='web_store_blogs'),
    url(r'^web_store/navigation/$', 'blog_pages.views.navigation', name='web_store_navigation'),
    
    url(r'^inventory/$', 'store_admin.views.inventory_overview', name='inventory'),
    url(r'^inventory/overview/$', 'store_admin.views.inventory_overview', name='inventory_overview'),
    url(r'^inventory/items/$', 'store_admin.views.inventory_items', name='inventory_items'),
    url(r'^inventory/items/import/$', 'store_admin.views.inventory_items_import', name='inventory_items_import'),
    url(r'^inventory/lots/$', 'store_admin.views.inventory_lots', name='inventory_lots'),
    url(r'^inventory/auctions/$', 'store_admin.views.inventory_auctions', name='inventory_auctions'),
    url(r'^inventory/carts/$', 'store_admin.views.inventory_carts', name='inventory_carts'),
    url(r'^inventory/carts/delete/$', 'store_admin.views.delete_cart_items', name='delete_cart_items'),
    url(r'^inventory/carts/notify/([\d]+)/$', 'store_admin.views.notify_to_buyer', name='notify_to_buyer'),
    url(r'^inventory/carts/buyer/([\d]+)/$', 'store_admin.views.buyer_info', name='buyer_info'),

    url(r'^inventory/category/$', 'store_admin.views.inventory_categorize', name='inventory_categorize'),

    url(r'^account/$', 'preferences.views.change_profile', name='account'),
    url(r'^account_profile/$', 'preferences.views.change_profile', name='account_profile'),
    url(r'^account_password/$', 'preferences.views.change_password', name='account_password'),
    url(r'^account/add_photo/$', 'store_admin.views.add_profile_photo', name='add_profile_photo'),
    url(r'^preferences/$', 'store_admin.views.preferences_overview', name='preferences'),
    
    url(r'^support/$', 'store_admin.views.support_overview', name='support'),
    url(r'^support/overview/$', 'store_admin.views.support_overview', name='support_overview'),
    url(r'^support/email/$', 'store_admin.views.support_email', name='support_email'),
    url(r'^support/phone/$', 'store_admin.views.support_phone', name='support_phone'),
    url(r'^support/community/$', 'store_admin.views.support_community', name='support_community'),
    
    url(r'^enable_feature/(?P<feature>[\w]+)/$', 'store_admin.views.enable_feature', name='enable_feature'),
    url(r'^enable_feature/(?P<feature>[\w]+)/(?P<hook>[\w]+)/$', 'store_admin.views.enable_feature', name='enable_feature'),
    url(r'^charge/(?P<feature>[\w]+)/$', 'store_admin.views.ajax_do_charge', name='ajax_do_charge'),    
)
########NEW FILE########
__FILENAME__ = views
import logging
import datetime
import urllib

from django.core.mail import send_mail, EmailMessage
from django.core.urlresolvers import reverse
from django.core.paginator import Paginator, InvalidPage, EmptyPage
from django.conf import settings
from django.db.models import Q
from django.http import HttpResponse, HttpResponseRedirect, HttpResponseServerError
from django.template import RequestContext
from django.shortcuts import render_to_response, get_object_or_404
from django.utils.translation import ugettext as _

from auctions.models import AuctionSession
from for_sale.models import Item
from core.decorators import shop_admin_required

from market.models import MarketCategory, MarketSubCategory
from django.utils import simplejson

PAGE_ITEMS = 10

@shop_admin_required
def back_to_site(request):
    request.session['admin_checkpoint'] = request.META.get('HTTP_REFERER', '/admin')
    shop_checkpoint = request.session.get("shop_checkpoint", "/") 
    return HttpResponseRedirect(shop_checkpoint)


@shop_admin_required
def redirect_admin(request):
    request.session['shop_checkpoint'] = request.META.get('HTTP_REFERER', '/')
    admin_checkpoint = request.session.get("admin_checkpoint", "/admin") 
    return HttpResponseRedirect(admin_checkpoint)

@shop_admin_required
def home_admin(request):
    return render_to_response('store_admin/home_admin.html', {}, RequestContext(request)) 
    
    
@shop_admin_required
def customers_overview(request):
    from sell.models import Sell
    from market_buy.models import WishListItem
    marketplace = request.shop.marketplace
    
    sells = Sell.objects.filter(shop=request.shop, closed=False).order_by("-date_time")[:5]
    wishlistitems = WishListItem.objects.filter(marketplace=marketplace)
    
    return render_to_response('store_admin/customers/overview.html',
                               {
                                'sells': sells,
                                'wishlistitems' : wishlistitems,
                               }
                               , RequestContext(request))


@shop_admin_required
def customers_profiles(request):
    return render_to_response('store_admin/customers/profiles.html', {}, 
                              RequestContext(request))


@shop_admin_required
def customers_sold_items(request):
    from sell.models import Sell

    filter_by = request.GET.get('filter_by','')
    order_by = request.GET.get('order_by','')
    show = request.GET.get('show','')
    filter_params = {'order_by':order_by,
                     'filter_by':filter_by,
                     'show':show,}
    q_user=''
    
    shop = request.shop
    
    sell_list = Sell.objects.filter(shop=shop)
    
    if filter_by == 'for_date_today':
        d = datetime.datetime.now()
        date_from = datetime.datetime(d.year, d.month, d.day)
        date_to = date_from + datetime.timedelta(1)
        sell_list = sell_list.filter(date_time__range=(date_from, date_to))
    elif filter_by == 'for_date_week':
        d = datetime.datetime.now()
        delta = d.weekday()
        date_from = d - datetime.timedelta(delta)        
        sell_list = sell_list.filter(date_time__range=(date_from, d))
    elif filter_by == 'for_date_month':
        sell_list = sell_list.filter(date_time__month=datetime.datetime.now().date().month)
    elif filter_by == 'for_date_year':
        sell_list = sell_list.filter(date_time__year=datetime.datetime.now().date().year)

    elif filter_by == 'payment_pending':
        sell_list = sell_list.filter(payment__state_actual__state='PE')
    elif filter_by == 'payment_paid':
        sell_list = sell_list.filter(payment__state_actual__state='PA')
    elif filter_by == 'payment_failed':
        sell_list = sell_list.filter(payment__state_actual__state='FA')

    elif filter_by == 'shipping_pending':
        sell_list = sell_list.filter(shipping__state_actual__state='PE')
    elif filter_by == 'shipping_dispatched':
        sell_list = sell_list.filter(shipping__state_actual__state='DI')
    elif filter_by == 'shipping_fullfilled':
        sell_list = sell_list.filter(shipping__state_actual__state='FU')

    elif filter_by == 'user':
        q_user = request.GET.get('q_user','')
        f = Q(bidder__username__icontains=q_user)|Q(bidder__first_name__icontains=q_user)|Q(bidder__last_name__icontains=q_user)
        sell_list = sell_list.filter(f)

    if show == 'open':
        sell_list = sell_list.filter(closed=False)
    elif show == 'close':
        sell_list = sell_list.filter(closed=True)
    else:
        sell_list = sell_list.filter(closed=False)

    if order_by == 'oldest':
        sell_list = sell_list.order_by("id")
    elif order_by == 'newest':
        sell_list = sell_list.order_by("-id")
    elif order_by == 'username':
        sell_list = sell_list.order_by("bidder__username")
    elif order_by == '-username':
        sell_list = sell_list.order_by("-bidder__username")
    elif order_by == 'total':
        sell_list = sell_list.order_by("total")
    elif order_by == '-total':
        sell_list = sell_list.order_by("-total")
    else:
        sell_list = sell_list.order_by("-date_time")


        
    pager = Paginator(sell_list, 5)
    try:
        page = int(request.GET.get('page','1'))
    except:
        page = 1
    try:
        sells = pager.page(page)
    except (EmptyPage, InvalidPage):
        sells = pager.page(pager.num_pages)
    paged = (pager.num_pages > 1)
    
    params = {
        'sells': sells,
        'pages': pager.page_range,
        'paged': paged,
        'filter_params': filter_params,
        'q_user': q_user,
    }
    
    return render_to_response('store_admin/customers/sold_items.html', params, RequestContext(request))


@shop_admin_required
def customers_payments(request):
    return render_to_response('store_admin/customers/payments.html', {}, 
                              RequestContext(request))


@shop_admin_required
def customers_shipments(request):
    return render_to_response('store_admin/customers/shipments.html', {}, 
                              RequestContext(request))


@shop_admin_required
def customers_wish_lists(request):
    from market_buy.models import WishListItem
    
    marketplace = request.shop.marketplace
    wishlistitems = WishListItem.objects.filter(marketplace=marketplace)
    
    search_text = ''
    if request.method == "POST":
        search_text = request.POST.get("search_text")
        wishlistitems = wishlistitems.filter(description__contains=search_text)
    
    else:
        sort = request.GET.get('sort_by', 'oldest')
        if sort == "oldest": wishlistitems = wishlistitems.order_by("id")
        if sort == "newest": wishlistitems = wishlistitems.order_by("-id")
        if sort == "category": wishlistitems = wishlistitems.order_by("category__name")
        if sort == "username": wishlistitems = wishlistitems.order_by("posted_by__username")
        if sort == "price": wishlistitems = wishlistitems.order_by("ideal_price")
        if sort == "-price": wishlistitems = wishlistitems.order_by("-ideal_price")
    
    return render_to_response('store_admin/customers/wish_lists.html', 
                              {
                               'wishlistitems' : wishlistitems,
                               'search_text': search_text,
                               }, 
                              RequestContext(request))

@shop_admin_required
def customers_send_notification(request, id):
    from market_buy.models import WishListItem
    
    wishitem = get_object_or_404(WishListItem, pk=id)
    
    shop = request.shop
    
    subject = "Notification from %s" % shop.name_shop()
    the_wish = "Hi %s, you have post an item in the wish list of %s on %s. You have specified the following information about your wish item: \n\n- Description: %s\n- Ideal Price: $%s\n- Category: %s\n- Subcategory: %s" % (wishitem.posted_by.get_full_name() or wishitem.posted_by.username , wishitem.marketplace, wishitem.posted_on, wishitem.description, wishitem.ideal_price, wishitem.category.name, wishitem.subcategory.name)
    the_message = "%s from %s has found an item that appears to match the item you are looking for. Contact %s at %s" % (shop.admin.get_full_name() or shop.admin.username, shop.name_shop(), shop.admin, shop.default_dns)
    body = the_wish + "\n\n" + the_message
    to = wishitem.posted_by.email
    mail = EmailMessage(subject=subject,
                        body=body,
                        from_email=shop.admin.email,
                        to=[to],
                        headers={'X-SMTPAPI': '{\"category\": \"Customer Notification\"}'})
    mail.send(fail_silently=True)
#    send_mail(subject, body, shop.admin.email, [to], fail_silently=True)
    request.flash['message'] = "Notification sent..."
    request.flash['severity'] = "success"
    return HttpResponseRedirect(reverse("customers_wish_lists"))

@shop_admin_required
def customers_mailing_list(request):
    from shops.models import MailingListMember
    
    shop = request.shop
    mailing_list = MailingListMember.objects.filter(shop=shop)
    
    search_text = ''
    if request.method == "POST":
        search_text = request.POST.get("search_text")
        mailing_list = mailing_list.filter(email__contains=search_text)
    
    else:    
        sort = request.GET.get('sort_by', 'oldest')
        if sort == "email": mailing_list = mailing_list.order_by("email") 
        if sort == "-email": mailing_list = mailing_list.order_by("-email")
        if sort == "oldest": mailing_list = mailing_list.order_by("id")
        if sort == "newest": mailing_list = mailing_list.order_by("-id")
        
    return render_to_response('store_admin/customers/mailing_list.html', 
                              {
                               'mailing_list' : mailing_list,
                               'search_text': search_text,
                               }, 
                              RequestContext(request))   

@shop_admin_required
def customers_export_mailinglist(request):
    import csv
    
    shop = request.shop
    
    # Create the HttpResponse object with the appropriate CSV header.
    filename = "%s_%s" % (shop.default_dns, 'mailing_list.csv')
    
    response = HttpResponse(mimetype='text/csv')
    response['Content-Disposition'] = 'attachment; filename=%s' % filename

    writer = csv.writer(response)
    
    for member in shop.mailinglistmember_set.all():
        writer.writerow([member.email])
    
    return response

    
@shop_admin_required
def web_store_overview(request):
    from blog_pages.models import Page, Post, DynamicPageContent
    
    shop = request.shop    
    static_pages = Page.objects.filter(shop = shop)
    dynamic_pages = DynamicPageContent.objects.filter(shop = shop)
    posts = Post.objects.filter(shop = shop).filter(draft=False)
    return render_to_response('store_admin/web_store/overview.html', 
                              {'static_pages': static_pages, 'dynamic_pages': dynamic_pages, 'posts': posts},
                              RequestContext(request))


@shop_admin_required
def inventory_items_import(request):
    return render_to_response('store_admin/inventory/items_import.html',  {}, RequestContext(request))
    
@shop_admin_required
def inventory_items(request):
    from for_sale.models import Item

    shop = request.shop
    
    filter_by = request.GET.get('filter_by','')
    order_by = request.GET.get('order_by','')
    q_title = request.GET.get('q_title','')
    id_category = request.GET.get('id_category','')
    id_subcategory = request.GET.get('id_subcategory','')
    
    all_items = Item.objects.all().filter(shop=shop)
    total = all_items.count()
    
    items_per_page = int(request.GET.get('items_per_page', -1))
    if items_per_page == -1:
        if total >= 0 and total <= 10: items_per_page = 10
        elif total > 10 and total <= 50: items_per_page = 20
        elif total > 50 and total <= 100: items_per_page = 50
        else: items_per_page = 100
        
    filter_params = {'order_by':order_by,
                     'filter_by':filter_by,
                     'q_title': q_title,
                     'id_subcategory': id_subcategory,
                     'id_category': id_category,
                     'items_per_page': items_per_page,
                     }
            
    

    if filter_by == 'title':
        q_title = request.GET.get('q_title','')
        all_items = all_items.filter(title__icontains=q_title)
    elif filter_by == 'category':
        id_category = request.GET.get('id_category','')
        category = MarketCategory.objects.get(id=id_category) 
        all_items = all_items.filter(category=category)
    elif filter_by == 'subcategory':
        id_subcategory = request.GET.get('id_subcategory','')
        subcategory = MarketSubCategory.objects.get(id=id_subcategory) 
        all_items = all_items.filter(subcategory=subcategory)

    if order_by == 'oldest':
        all_items = all_items.order_by("id")
    elif order_by == 'newest':
        all_items = all_items.order_by("-id")     
    elif order_by == 'price':
        all_items = all_items.order_by("price")
    elif order_by == '-price':
        all_items = all_items.order_by("-price")
    elif order_by == 'qty':
        all_items = all_items.order_by("qty")
    elif order_by == '-qty':
        all_items = all_items.order_by("-qty")
        

    pager = Paginator(all_items, items_per_page)
    try:
        page = int(request.GET.get('page','1'))
    except:
        page = 1
    try:
        products = pager.page(page)
    except (EmptyPage, InvalidPage):
        products = pager.page(pager.num_pages)
    paged = (pager.num_pages > 1)

    items_plan_limit = shop.plan().concurrent_store_items
    
    return render_to_response('store_admin/inventory/items.html', 
                              {'products': products,
                               'total' : total,
                               'items_plan_limit': items_plan_limit, 
                               'pages': pager.page_range,
                               'paged': paged,
                               'filter_params': filter_params,
                               'getvars': '&'+urllib.urlencode(filter_params),
                               'q_title': q_title,
                              }, 
                              RequestContext(request))

@shop_admin_required
def inventory_lots(request):    
    from lots.models import Lot

    shop = request.shop
    
    filter_by = request.GET.get('filter_by','')
    order_by = request.GET.get('order_by','')
    q_title = request.GET.get('q_title','')
    id_category = request.GET.get('id_category','')
    id_subcategory = request.GET.get('id_subcategory','')

    
    all_lots = Lot.objects.all().filter(shop=shop)
    total = all_lots.count()
    
    items_per_page = int(request.GET.get('items_per_page', -1))
    if items_per_page == -1:
        if total >= 0 and total <= 10: items_per_page = 10
        elif total > 10 and total <= 50: items_per_page = 20
        elif total > 50 and total <= 100: items_per_page = 50
        else: items_per_page = 100

    filter_params = {
                     'order_by':order_by,
                     'filter_by':filter_by,
                     'q_title': q_title,
                     'id_subcategory': id_subcategory,
                     'id_category': id_category,
                     'items_per_page': items_per_page,
                     }
        
    if filter_by == 'title':
        q_title = request.GET.get('q_title','')
        all_lots = all_lots.filter(title__icontains=q_title)
    elif filter_by == 'category':
        id_category = request.GET.get('id_category','')
        category = MarketCategory.objects.get(id=id_category) 
        all_lots = all_lots.filter(category=category)
    elif filter_by == 'subcategory':
        id_subcategory = request.GET.get('id_subcategory','')
        subcategory = MarketSubCategory.objects.get(id=id_subcategory) 
        all_lots = all_lots.filter(subcategory=subcategory)
    elif filter_by == 'session':
        id_session = request.GET.get('id_session','')
        session = AuctionSession.objects.get(id=id_session) 
        all_lots = all_lots.filter(session=session)
    elif filter_by == 'active':
        all_lots = all_lots.filter(state='A')
    elif filter_by == 'sold':
        all_lots = all_lots.filter(state='S')
    elif filter_by == 'not_sell':
        all_lots = all_lots.filter(state='N')

    if order_by == 'oldest':
        all_lots = all_lots.order_by("id")
    elif order_by == 'newest':
        all_lots = all_lots.order_by("-id")     
    elif order_by == 'price':
        all_lots = all_lots.order_by("starting_bid")
    elif order_by == '-price':
        all_lots = all_lots.order_by("-starting_bid")
    elif order_by == 'actual_price':
        all_lots = all_lots.order_by("bid_actual__bid_amount")
    elif order_by == '-actual_price':
        all_lots = all_lots.order_by("-bid_actual__bid_amount")
    elif order_by == 'state':
        all_lots = all_lots.order_by("state")
    elif order_by == '-state':
        all_lots = all_lots.order_by("-state")
    

    pager = Paginator(all_lots, PAGE_ITEMS)
    try:
        page = int(request.GET.get('page','1'))
    except:
        page = 1
    try:
        products = pager.page(page)
    except (EmptyPage, InvalidPage):
        products = pager.page(pager.num_pages)
    paged = (pager.num_pages > 1)
         
    return render_to_response('store_admin/inventory/lots.html', 
                              {'products': products,
                               'total': total,
                               'pages': pager.page_range,
                               'paged': paged,
                               'filter_params': filter_params,
                               'getvars': '&'+urllib.urlencode(filter_params),
                               'q_title': q_title,
                              }, 
                              RequestContext(request))
        
@shop_admin_required
def inventory_overview(request):
#    from lots.models import Lot
#    from payments.models import Payment
#    shop = request.shop
#    if request.user.is_superuser:
#        return HttpResponseRedirect(reverse('shop_list'))
#    else:
#        users = []
#        now = datetime.datetime.now().date()
#        
#        lot_revenue_today = Lot.objects.all().filter(shop = shop,
#                                                 state = 'S', 
#                                                 bid_actual__bid_time__year=now.year, 
#                                                 bid_actual__bid_time__month=now.month, 
#                                                 bid_actual__bid_time__day=now.day).aggregate(total=Sum('bid_actual__bid_amount'))
#
#        forsale_revenue_today = Payment.objects.all().filter(shop = shop,
#                                                 state_actual__state='AU',
#                                                 state_actual__date_time__year=now.year,
#                                                 state_actual__date_time__month=now.month,
#                                                 state_actual__date_time__day=now.day).aggregate(total=Sum('total'))
#
#        lot_revenue_today = lot_revenue_today.get('total') or 0
#        forsale_revenue_today = forsale_revenue_today.get('total') or 0 
#        
#        revenue_today = forsale_revenue_today + lot_revenue_today
#                
#        date_from = now - timedelta(now.weekday())
#        date_to = now + timedelta(1)
#        this_week = Lot.objects.all().filter(shop = shop,
#                                             state = 'S', 
#                                             bid_actual__bid_time__range=(date_from, date_to)).aggregate(total=Sum('bid_actual__bid_amount'))
#        this_week = this_week.get('total')
#        if this_week == None: this_week=0 
#        
#        return render_to_response('store_admin/home_admin.html', 
#                                  {'users': users,
#                                   'revenue_today': revenue_today,
#                                   'this_week': this_week,
#                                   }, 
#                                  RequestContext(request))     
    
    return render_to_response('store_admin/inventory/overview.html', {}, 
                              RequestContext(request))

@shop_admin_required
def inventory_auctions(request):
    shop = request.shop
    
    
    filter_by = request.GET.get('filter_by','')
    order_by = request.GET.get('order_by','')
    q_title = request.GET.get('q_title','')
            
    all_auctions = AuctionSession.objects.all().filter(shop=shop)
    total = all_auctions.count()
    
    items_per_page = int(request.GET.get('items_per_page', -1))
    if items_per_page == -1:
        if total >= 0 and total <= 10: items_per_page = 10
        elif total > 10 and total <= 50: items_per_page = 20
        elif total > 50 and total <= 100: items_per_page = 50
        else: items_per_page = 100
        
    filter_params = {
                     'order_by':order_by,
                     'filter_by':filter_by,
                     'items_per_page': items_per_page,
                     }
    
    if filter_by == 'title':
        all_auctions = all_auctions.filter(title__icontains=q_title)
    elif filter_by == 'finished':
        all_auctions = all_auctions.filter(end__lt=datetime.datetime.now())
    elif filter_by == 'in_progress':
        all_auctions = all_auctions.filter(end__gt=datetime.datetime.now(), start__lt=datetime.datetime.now())
    elif filter_by == 'future':
        all_auctions = all_auctions.filter(start__gt=datetime.datetime.now())


    if order_by == 'id':
        all_auctions = all_auctions.order_by("id")
    elif order_by == '-id':
        all_auctions = all_auctions.order_by("-id")
    elif order_by == 'title':
        all_auctions = all_auctions.order_by("title")
    elif order_by == '-title':
        all_auctions = all_auctions.order_by("-title")
    elif order_by == 'start':
        all_auctions = all_auctions.order_by("start")
    elif order_by == '-start':
        all_auctions = all_auctions.order_by("-start")
    elif order_by == 'end':
        all_auctions = all_auctions.order_by("end")
    elif order_by == '-end':
        all_auctions = all_auctions.order_by("-end")
    elif order_by == 'total':
        all_auctions = all_auctions.order_by("lot_set__count")
    elif order_by == '-total':
        all_auctions = all_auctions.order_by("-lot_set__count")
    

    pager = Paginator(all_auctions, PAGE_ITEMS)
    try:
        page = int(request.GET.get('page','1'))
    except:
        page = 1
    try:
        auctions = pager.page(page)
    except (EmptyPage, InvalidPage):
        auctions = pager.page(pager.num_pages)
    paged = (pager.num_pages > 1)
         
    return render_to_response('auctions/auctions_list.html', 
                              {'auctions': auctions,
                               'total': total,
                               'pages': pager.page_range,
                               'paged': paged,
                               'filter_params': filter_params,
                               'q_title': q_title,
                              }, 
                              RequestContext(request))

@shop_admin_required
def inventory_carts(request):
    from sell.models import Cart, CartItem
    from haystack.query import SearchQuerySet
    
    shop = request.shop

    filter_by = request.GET.get('filter_by','')
    order_by = request.GET.get('order_by','')
    q_title = request.GET.get('q_title','')
    id_category = request.GET.get('id_category','')
    id_subcategory = request.GET.get('id_subcategory','')
    
    all_carts = Cart.objects.filter(shop=shop)
    total = all_carts.count() - 1

    items_per_page = int(request.GET.get('items_per_page', -1))
    if items_per_page == -1:
        if total >= 0 and total <= 10: items_per_page = 10
        elif total > 10 and total <= 50: items_per_page = 20
        elif total > 50 and total <= 100: items_per_page = 50
        else: items_per_page = 100
        
    filter_params = {'order_by':order_by,
                     'filter_by':filter_by,
                     'q_title': q_title,
                     'id_subcategory': id_subcategory,
                     'id_category': id_category,
                     'items_per_page': items_per_page,
                     }
    
    if filter_by == 'title':
        q_title = request.GET.get('q_title', None)
        if q_title: 
            sqs = SearchQuerySet().models(CartItem).autocomplete(summary=q_title, shop_id=unicode(shop.id))
            all_carts = all_carts.filter(id__in=map(lambda sr: sr.cart_id, sqs))
    elif filter_by == 'category':
        id_category = request.GET.get('id_category','')
        sqs = SearchQuerySet().models(CartItem).autocomplete(category_id=id_category, shop_id=unicode(shop.id))  
        all_carts = all_carts.filter(id__in=map(lambda sr: sr.cart_id, sqs))
    elif filter_by == 'subcategory':
        id_subcategory = request.GET.get('id_subcategory','')
        sqs = SearchQuerySet().models(CartItem).autocomplete(subcategory_id=id_subcategory, shop_id=unicode(shop.id))
        all_carts = all_carts.filter(id__in=map(lambda sr: sr.cart_id, sqs)) 

    if order_by == 'oldest':
        all_carts = all_carts.order_by("id")
    elif order_by == 'newest':
        all_carts = all_carts.order_by("-id")
    elif order_by == 'price':
        all_carts = all_carts.order_by("price")
    elif order_by == '-price':
        all_carts = all_carts.order_by("-price")
    elif order_by == 'qty':
        all_carts = all_carts.order_by("qty")
    elif order_by == '-qty':
        all_carts = all_carts.order_by("-qty")
        
    pager = Paginator(all_carts, items_per_page)
    try:
        page = int(request.GET.get('page','1'))
    except:
        page = 1
    try:
        carts = pager.page(page)
    except (EmptyPage, InvalidPage):
        carts = pager.page(pager.num_pages)
    paged = (pager.num_pages > 1)

    return render_to_response('store_admin/inventory/carts.html', 
                              {'carts': carts,
                               'total' : total,
                               'pages': pager.page_range,
                               'paged': paged,
                               'filter_params': filter_params,
                               'getvars': '&'+urllib.urlencode(filter_params),
                               'q_title': q_title,
                              }, 
                              RequestContext(request))

@shop_admin_required
def delete_cart_items(request):
    from sell.models import Cart

    ids = request.POST
    if len(ids.items()) > 0:
        for (item_id, status) in ids.items():
            if status == "on":
                cart = get_object_or_404(Cart, pk=item_id)
                cart.clean()
                cart.save()
        request.flash['message'] = unicode(_("Cart Items removed"))
        request.flash['severity'] = "success"
    else:
        request.flash['message'] = unicode(_("No Shopping Carts Selected"))
        request.flash['severity'] = "error"

    return HttpResponseRedirect(reverse("inventory_carts"))

@shop_admin_required
def notify_to_buyer(request, cart_id):
    from sell.models import Cart
    from django.template import Context, Template
    from preferences.models import EmailNotification, EmailNotificationHistory, TYPE_NOTIFICATION
    
    shop = request.shop
    cart = get_object_or_404(Cart, shop=shop, pk=cart_id)
    
    items = []
    for cart_item in cart.cartitem_set.all():
        item = { 'title': cart_item.product.title,
                 'qty': cart_item.qty,
                 'price': cart_item.price,
                 'total': cart_item.sub_total(),
                }
        items.append(item)
    
    c = Context({
            'bidder_name': '%s %s' %(cart.bidder.first_name, cart.bidder.last_name),
            'shop': shop.name,
            'cart_date': cart.creation_date,
            'cart_total': cart.total(),
            'items': items,
        })
    
    try:
        notification = EmailNotification.objects.filter(type_notification='BCN', shop=shop).get()
        type_notification_name = dict(TYPE_NOTIFICATION)[notification.type_notification].title()
        subj_template = Template(notification.subject)
        body_template = Template(notification.body)
        
        subj_text = subj_template.render(c)
        body_text = body_template.render(c)
        
        mail = EmailMessage(subject=subj_text,
                            body=body_text,
                            from_email=settings.EMAIL_FROM,
                            to=[cart.bidder.email],
                            headers={'X-SMTPAPI': '{\"category\": \"%s\"}' % type_notification_name})
        mail.send(fail_silently=True)
#        send_mail(subj_text, body_text, settings.EMAIL_FROM, [cart.bidder.email], fail_silently=True)
        notification_history = EmailNotificationHistory(shop=shop,
                                                        type_notification=notification.type_notification,
                                                        datetime= datetime.datetime.now(),
                                                        to=cart.bidder.email,
                                                        subject=subj_text,
                                                        body=body_text)
        notification_history.save()
        
        request.flash['message'] = unicode(_("Notification sent to %s" % cart.bidder.email))
        request.flash['severity'] = "success"
    except:
        request.flash['message'] = unicode(_("Fail Notification sent to %s" % cart.bidder.email))
        request.flash['severity'] = "error"
    
    return HttpResponseRedirect(reverse("inventory_carts"))

@shop_admin_required
def buyer_info(request, cart_id):
    from sell.models import Cart

    shop = request.shop
    cart = get_object_or_404(Cart, shop=shop, pk=cart_id)

    context = {
        'first_name': cart.bidder.first_name,
        'last_name': cart.bidder.last_name,
        'email': cart.bidder.email,
        'street_address': cart.bidder.profile.street_address,
        'city': cart.bidder.profile.city,
        'state': cart.bidder.profile.state,
        'zip': cart.bidder.profile.zip,
        'country': cart.bidder.profile.country,
        'phone': cart.bidder.profile.phone,
    }

    return render_to_response('store_admin/inventory/buyer_info.html', context, RequestContext(request))

@shop_admin_required
def inventory_categorize(request):
    return render_to_response('store_admin/inventory/overview.html', {}, 
                              RequestContext(request))

@shop_admin_required
def preferences_overview(request):
    return render_to_response('store_admin/preferences/overview.html', {}, RequestContext(request))

@shop_admin_required
def add_profile_photo(request):
    try:
        photo = request.FILES['photo']
        ext = (photo.name.split('.')[1]).lower()
        if ext in ['jpg', 'bmp', 'jpeg', 'gif']:
            shop = request.shop
            profile = shop.owner().get_profile()
            profile.photo = photo
            profile.save()
            request.flash['message'] = "Photo successfully added."
            request.flash['severity'] = "success"
        else:
            request.flash['message'] = "Invalid format!"
            request.flash['severity'] = "error"
    except Exception, e:
        logging.critical("Photo can't be loaded")
        request.flash['message'] = "Photo could not be loaded!"
        request.flash['severity'] = "error"
    return HttpResponseRedirect(reverse("account"))
    
#    
#@shop_admin_required
#def account_username_password(request):
#    return render_to_response('store_admin/account/username_password.html', {},
#                              RequestContext(request))

def ajax_change_qty(request):
    try:
        item_id = request.POST['item_id'].split("_")[1]
        new_qty = int(request.POST['new_qty'])
        
        item = get_object_or_404(Item, pk=item_id)
        item.qty = new_qty
        item.save()
        
    except Exception, e:
        logging.critical(e)
        return HttpResponse("Fallo", status=500)
    
    return HttpResponse()

def ajax_change_price(request):
    import decimal
    try:
        item_id = request.POST['item_id'].split("_")[1]
        new_price = decimal.Decimal(request.POST['new_price'])
        
        item = get_object_or_404(Item, pk=item_id)
        item.price = new_price
        item.save()
        
    except Exception, e:
        logging.critical(e)
        return HttpResponse("Fallo", status=500)
    
    return HttpResponse()

def support_overview(request):    
    return render_to_response('store_admin/support/overview.html',
                              {},
                              RequestContext(request))
    
def support_email(request):
    from store_admin.forms import EmailContactForm
    from preferences.models import EmailNotificationHistory
    from django.template.defaultfilters import striptags
    from subscriptions.models import FeaturePayment
    shop = request.shop
            
    if request.method == "POST":
        txn_id = request.POST.get('txn_id', None)
        payment = FeaturePayment.objects.filter(transaction_id=txn_id, shop=shop).count()
        if not payment:
            request.flash['message'] = "Your payment is not registered in our system."
            request.flash['severity'] = "error"
            return HttpResponseRedirect(reverse("support"))
        
        form = EmailContactForm(request.POST)        
        if form.is_valid():
            marketplace = request.shop.marketplace
            logging.critical(form.cleaned_data)
            to = marketplace.contact_email
            user_email = form.cleaned_data['email']
            user_question = form.cleaned_data['question']
            user_name = form.cleaned_data['name']
            
            subject = "Email Support Requested"
            the_message = "%s has request email support from %s <%s>. \n\nUser Email: %s\n\nUser Question: %s" % (user_name, shop.name_shop(), shop.default_dns, user_email, striptags(user_question))
            
            mail = EmailMessage(subject=subject,
                                body=the_message,
                                from_email=settings.EMAIL_FROM,
                                to=[to],
                                headers={'X-SMTPAPI': '{\"category\": \"Email Support Requested\"}'})
            mail.send(fail_silently=True)
#            send_mail(subject, the_message, shop.admin.email, [to], fail_silently=True)

            notification_history = EmailNotificationHistory(shop=shop,
                                                            type_notification='CB',
                                                            datetime=datetime.datetime.now(),
                                                            to=to,
                                                            subject=subject,
                                                            body=the_message)
            notification_history.save()

            request.flash['message'] = "Support request sent..."
            request.flash['severity'] = "success"
            return HttpResponseRedirect(reverse("support"))                    
    else:
        form = EmailContactForm()    
    return render_to_response('store_admin/support/email.html',
                              {'form': form},
                              RequestContext(request))

def support_phone(request):
    from store_admin.forms import PhoneContactForm
    from subscriptions.models import FeaturePayment

    shop = request.shop
    
    if request.method == "POST":
        txn_id = request.POST.get('txn_id', None)
        payment = FeaturePayment.objects.filter(transaction_id=txn_id, shop=shop).count()
        if not payment:
            request.flash['message'] = "Your payment is not registered in our system."
            request.flash['severity'] = "error"
            return HttpResponseRedirect(reverse("support"))
                
        form = PhoneContactForm(request.POST)        
        if form.is_valid():
            marketplace = request.shop.marketplace
            to = marketplace.contact_email
            user_messenger_id = form.cleaned_data['messenger_id']
            user_phone = form.cleaned_data['phone']
            user_name = form.cleaned_data['name']
            
            subject = "Phone Support Requested"
            the_message = "%s has request phone support from %s <%s>. \n\nUser Phone: %s\n\nUser Messenger Id: %s" % (user_name, shop.name_shop(), shop.default_dns, user_phone, user_messenger_id)

            mail = EmailMessage(subject=subject,
                                body=the_message,
                                from_email=shop.admin.email,
                                to=[to],
                                headers={'X-SMTPAPI': '{\"category\": \"Phone Support Requested\"}'})
            mail.send(fail_silently=True)
#            send_mail(subject, the_message, shop.admin.email, [to], fail_silently=True)

            request.flash['message'] = "Support request sent..."
            request.flash['severity'] = "success"
            return HttpResponseRedirect(reverse("support"))
                        
    else:
        form = PhoneContactForm()
    
    return render_to_response('store_admin/support/phone.html',
                              {'form': form},
                              RequestContext(request))
    
def support_community(request):    
    return render_to_response('store_admin/support/community_forums.html',
                              {},
                              RequestContext(request))
    
def enable_feature(request, feature, hook=None):
    from subscriptions.models import FeaturesManager
    shop = request.shop
    
    (feature_name, feature_description) = FeaturesManager.get_feature_description(feature)
    feature_price = FeaturesManager.get_feature_price(shop, feature)
    credit_card_info = True
    masked_number = "xxx"
    card_type = "---"
    expired = False
    try:
        billing_info = shop.billing_info()
        masked_number = billing_info.credit_card()['masked_number']
        card_type = billing_info.credit_card()['card_type']
        expired = billing_info.credit_card()['expired']
    except:
        credit_card_info = False
    
    params = {'credit_card_info': credit_card_info, 
              'feature_id': feature, 
              'feature_name': feature_name, 
              'feature_description': feature_description, 
              'feature_price': feature_price, 
              'masked_number': masked_number, 
              'card_type': card_type,
              'expired': expired }
    
    return render_to_response("store_admin/enable_feature.html", params, RequestContext(request))
    

def ajax_do_charge(request, feature):
    from payments.gateways.braintreegw import BraintreeGateway
    from subscriptions.models import FeaturesManager, FeaturePayment 
    from django.conf import settings
    
    success = False
    shop = request.shop
    gw = BraintreeGateway(settings.MERCHANT_ID, settings.PUBLIC_KEY, settings.PRIVATE_KEY)
    
    #This is token asociated to the subscription, we will use it to charge the feature
    token = shop.subscription().extra_data()[7]        
    #Try to charge the feature against braintree
    price = FeaturesManager.get_feature_price(shop, feature)
    result = gw.charge_purchase(token, price)
    
    admin_email = shop.marketplace.contact_email
    if result.is_success:
        status = result.transaction.status
        credit_card = "%s - ***********%s" % (result.transaction.credit_card[u'card_type'], result.transaction.credit_card[u'last_4'])
        txn_id = result.transaction.id
        if status == 'authorized':
            logging.info("Transaction <id=%s> was successfully authorized!!" % (txn_id))
            submit = gw.submit_for_settlement(txn_id)
            message = None
            if submit.is_success:                
                message = "Shop: %s\nFeature: %s\nPrice: $ %s\nCredit Card: %s\nTransaction ID: %s\nTransaction Status: %s\n" % (shop, feature, price, credit_card, txn_id, status)
                logging.info(message)
            else:
                message = "WARNING: Transaction<id=%s> was successfully authorized but could not be submited for settlement. Try it manually via braintree admin site" % txn_id
                logging.critical(message)

            mail = EmailMessage(subject="Featured Successfully Purchased!",
                                body="\nWe have enabled the %s feature in your %s shop.\n\nWe collected $%s from your %s credit card account.\n\nThanks, %s" % (feature, shop, price, credit_card, shop.marketplace),
                                from_email=settings.EMAIL_FROM,
                                to=[shop.admin.email],
                                headers={'X-SMTPAPI': '{\"category\": \"Featured Purchased\"}'})
            mail.send(fail_silently=True)
#            send_mail("Featured Successfully Purchased!", "\nWe have enabled the %s feature in your %s shop.\n\nWe collected $%s from your %s credit card account.\n\nThanks, %s" % (feature, shop, price, credit_card, shop.marketplace), settings.EMAIL_FROM, [shop.admin.email], True)

            mail = EmailMessage(subject="%s purchased the %s feature" % (shop, feature),
                                body=message,
                                from_email=settings.EMAIL_FROM,
                                to=[mail for (name, mail) in settings.STAFF]+[admin_email],
                                headers={'X-SMTPAPI': '{\"category\": \"Featured Purchased\"}'})
            mail.send(fail_silently=True)
#            send_mail("%s purchased the %s feature" % (shop, feature), message, settings.EMAIL_FROM, [mail for (name, mail) in settings.STAFF]+[admin_email], True)
        else:
            logging.critical("Transaction<id=%s> status is %s. Can't submit for settlement if status != authorized" % (txn_id, status))
        success = True
    else:
        success = False
        
    if success:
        payment = FeaturePayment(shop=shop)
        payment.transaction_id = txn_id
        payment.price = price
        payment.feature = feature
        payment.save()
        FeaturesManager.set_feature_enabled(shop, feature)
        resp = {
            'status': 'success',
            'txn_id': txn_id
        }
        return HttpResponse(simplejson.dumps(resp), mimetype="application/json")
    
    logging.critical("Feature could not be charged :(")
    
    for error in result.errors.deep_errors:
        logging.critical("Gateway Error Found > code=%s, msg=%s" % (error.code, error.message))
    
    message = ""
    if status == "processor_declined":
        message = "Reason: Processor declined the transaction<id=%s>. Error code %s - %s" % (result.transaction.id, result.transaction.processor_response_code, result.transaction.processor_response_text)
    elif status == "gateway_rejected":
        message = "Reason: Gateway rejected the transaction<id=%s>. Error on %s" % (result.transaction.id, result.transaction.gateway_rejection_reason)
    else:
        message = "Reason: transaction<id=%s> status is %s!. We have no more info about this status. Please check braintree admin console." % (status, result.transaction.id)
    
    logging.critical(message)
    
    mail = EmailMessage(subject="%s tried but failed to purchase the %s feature" % (shop, feature),
                        body=message,
                        from_email=settings.EMAIL_FROM,
                        to=[mail for (name, mail) in settings.STAFF]+[admin_email],
                        headers={'X-SMTPAPI': '{\"category\": \"Error\"}'})
    mail.send(fail_silently=True)
#    send_mail("%s tried but failed to purchase the %s feature" % (shop, feature), message, settings.EMAIL_FROM, [mail for (name, mail) in settings.STAFF]+[admin_email], True)

    return HttpResponseServerError()

    
"""
Braintree response

result.transaction.customer
result.transaction.customer_details
result.transaction.cvv_response_code
result.transaction.descriptor
result.transaction.discounts
result.transaction.gateway
result.transaction.gateway_rejection_reason
result.transaction.id
result.transaction.merchant_account_id
result.transaction.order_id
result.transaction.processor_authorization_code
result.transaction.processor_response_code
result.transaction.processor_response_text
result.transaction.purchase_order_number
result.transaction.refund
result.transaction.refund_id
result.transaction.refund_ids
result.transaction.refunded_transaction_id
result.transaction.sale
result.transaction.search
result.transaction.settlement_batch_id
result.transaction.shipping
result.transaction.shipping_details 
result.transaction.status 'authorized'
result.transaction.status_history
result.transaction.subscription 
result.transaction.amount '14.99'
result.transaction.billing {u'company': None, u'country_code_alpha2': u'US', u'country_code_alpha3': u'USA', u'country_code_numeric': u'840', u'country_name': u'United States of America', u'extended_address': u'-', u'first_name': None, u'id': u'4z',u'last_name': None, u'locality': u'La Plata', u'postal_code': u'19000', u'region': u'AS', u'street_address': u'Calle 28 n 2938'}        
result.transaction.type 'sale'
result.transaction.updated_at
result.transaction.created_at
result.transaction.credit_card  {u'bin': u'411111', u'card_type': u'Visa', u'cardholder_name': None, u'customer_location': u'US', u'expiration_month': u'02', u'expiration_year': u'2014', u'last_4': u'1111', u'token': u'4dbp2'}       
result.transaction.credit_card_details
result.transaction.currency_iso_code 'USD'
result.transaction.custom_fields {u'shop_id': u'5'}
"""
########NEW FILE########
__FILENAME__ = admin
from models import *
from django.contrib import admin

admin.site.register(Feature)
admin.site.register(FeaturePayment)
admin.site.register(Subscription)
admin.site.register(SubscriptionPlan)
admin.site.register(SubscriptionCancelation)
########NEW FILE########
__FILENAME__ = forms

########NEW FILE########
__FILENAME__ = 0001_initial
# encoding: utf-8
import datetime
from south.db import db
from south.v2 import SchemaMigration
from django.db import models

class Migration(SchemaMigration):

    def forwards(self, orm):
        
        # Adding model 'SubscriptionPlan'
        db.create_table('subscriptions_subscriptionplan', (
            ('id', self.gf('django.db.models.fields.AutoField')(primary_key=True)),
            ('marketplace', self.gf('django.db.models.fields.related.ForeignKey')(to=orm['market.MarketPlace'])),
            ('plan_id', self.gf('django.db.models.fields.CharField')(max_length=100)),
            ('name', self.gf('django.db.models.fields.CharField')(max_length=255)),
            ('description', self.gf('django.db.models.fields.TextField')()),
            ('trial_period', self.gf('django.db.models.fields.PositiveSmallIntegerField')()),
            ('price', self.gf('django.db.models.fields.DecimalField')(default=0.0, max_digits=11, decimal_places=2)),
            ('billing_period', self.gf('django.db.models.fields.PositiveSmallIntegerField')(default=1, blank=True)),
            ('total_store_revenue', self.gf('django.db.models.fields.DecimalField')(max_digits=11, decimal_places=2)),
            ('concurrent_store_items', self.gf('django.db.models.fields.PositiveIntegerField')()),
            ('concurrent_auction_items', self.gf('django.db.models.fields.PositiveIntegerField')()),
            ('listings_per_month', self.gf('django.db.models.fields.PositiveIntegerField')()),
            ('payment_methods', self.gf('django.db.models.fields.PositiveSmallIntegerField')()),
            ('pictures_per_lot', self.gf('django.db.models.fields.PositiveSmallIntegerField')(default=1)),
            ('pictures_per_item', self.gf('django.db.models.fields.PositiveSmallIntegerField')(default=1)),
            ('admin_accounts', self.gf('django.db.models.fields.PositiveSmallIntegerField')()),
            ('total_mbs_storage', self.gf('django.db.models.fields.IntegerField')(default=50)),
            ('auto_tax_integration', self.gf('django.db.models.fields.BooleanField')(default=False, blank=True)),
            ('google_analytics_support', self.gf('django.db.models.fields.BooleanField')(default=False, blank=True)),
            ('custom_migration', self.gf('django.db.models.fields.BooleanField')(default=False, blank=True)),
            ('active', self.gf('django.db.models.fields.BooleanField')(default=True, blank=True)),
        ))
        db.send_create_signal('subscriptions', ['SubscriptionPlan'])

        # Adding model 'Subscription'
        db.create_table('subscriptions_subscription', (
            ('id', self.gf('django.db.models.fields.AutoField')(primary_key=True)),
            ('owner', self.gf('django.db.models.fields.related.ForeignKey')(to=orm['users.Profile'])),
            ('subscription_id', self.gf('django.db.models.fields.CharField')(max_length=6)),
            ('plan', self.gf('django.db.models.fields.related.ForeignKey')(to=orm['subscriptions.SubscriptionPlan'])),
            ('status', self.gf('django.db.models.fields.CharField')(default='A', max_length=1)),
            ('date_time', self.gf('django.db.models.fields.DateTimeField')(auto_now_add=True, blank=True)),
        ))
        db.send_create_signal('subscriptions', ['Subscription'])

        # Adding model 'SubscriptionPayment'
        db.create_table('subscriptions_subscriptionpayment', (
            ('id', self.gf('django.db.models.fields.AutoField')(primary_key=True)),
            ('subscription', self.gf('django.db.models.fields.related.ForeignKey')(to=orm['subscriptions.Subscription'])),
            ('datetime', self.gf('django.db.models.fields.DateTimeField')()),
            ('amount', self.gf('django.db.models.fields.FloatField')()),
        ))
        db.send_create_signal('subscriptions', ['SubscriptionPayment'])


    def backwards(self, orm):
        
        # Deleting model 'SubscriptionPlan'
        db.delete_table('subscriptions_subscriptionplan')

        # Deleting model 'Subscription'
        db.delete_table('subscriptions_subscription')

        # Deleting model 'SubscriptionPayment'
        db.delete_table('subscriptions_subscriptionpayment')


    models = {
        'auth.group': {
            'Meta': {'object_name': 'Group'},
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '80'}),
            'permissions': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['auth.Permission']", 'symmetrical': 'False', 'blank': 'True'})
        },
        'auth.permission': {
            'Meta': {'unique_together': "(('content_type', 'codename'),)", 'object_name': 'Permission'},
            'codename': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'content_type': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['contenttypes.ContentType']"}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '50'})
        },
        'auth.user': {
            'Meta': {'object_name': 'User'},
            'date_joined': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
            'email': ('django.db.models.fields.EmailField', [], {'max_length': '75'}),
            'first_name': ('django.db.models.fields.CharField', [], {'max_length': '30', 'blank': 'True'}),
            'groups': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['auth.Group']", 'symmetrical': 'False', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'is_active': ('django.db.models.fields.BooleanField', [], {'default': 'True', 'blank': 'True'}),
            'is_staff': ('django.db.models.fields.BooleanField', [], {'default': 'False', 'blank': 'True'}),
            'is_superuser': ('django.db.models.fields.BooleanField', [], {'default': 'False', 'blank': 'True'}),
            'last_login': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
            'last_name': ('django.db.models.fields.CharField', [], {'max_length': '30', 'blank': 'True'}),
            'password': ('django.db.models.fields.CharField', [], {'max_length': '128'}),
            'user_permissions': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['auth.Permission']", 'symmetrical': 'False', 'blank': 'True'}),
            'username': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '32'})
        },
        'contenttypes.contenttype': {
            'Meta': {'unique_together': "(('app_label', 'model'),)", 'object_name': 'ContentType', 'db_table': "'django_content_type'"},
            'app_label': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'model': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '100'})
        },
        'market.marketplace': {
            'Meta': {'object_name': 'MarketPlace'},
            'base_domain': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '128'}),
            'charge_on_card_as': ('django.db.models.fields.CharField', [], {'default': "''", 'unique': 'True', 'max_length': '255'}),
            'contact_email': ('django.db.models.fields.EmailField', [], {'default': "'contact@yourstore.com'", 'max_length': '75'}),
            'contact_phone': ('django.db.models.fields.CharField', [], {'default': "''", 'max_length': '128'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '92'}),
            'slug': ('django.db.models.fields.SlugField', [], {'unique': 'True', 'max_length': '92', 'db_index': 'True'}),
            'template_prefix': ('django.db.models.fields.SlugField', [], {'unique': 'True', 'max_length': '92', 'db_index': 'True'}),
            'title': ('django.db.models.fields.CharField', [], {'max_length': '92'})
        },
        'subscriptions.subscription': {
            'Meta': {'object_name': 'Subscription'},
            'date_time': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'owner': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['users.Profile']"}),
            'plan': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['subscriptions.SubscriptionPlan']"}),
            'status': ('django.db.models.fields.CharField', [], {'default': "'A'", 'max_length': '1'}),
            'subscription_id': ('django.db.models.fields.CharField', [], {'max_length': '6'})
        },
        'subscriptions.subscriptionpayment': {
            'Meta': {'object_name': 'SubscriptionPayment'},
            'amount': ('django.db.models.fields.FloatField', [], {}),
            'datetime': ('django.db.models.fields.DateTimeField', [], {}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'subscription': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['subscriptions.Subscription']"})
        },
        'subscriptions.subscriptionplan': {
            'Meta': {'object_name': 'SubscriptionPlan'},
            'active': ('django.db.models.fields.BooleanField', [], {'default': 'True', 'blank': 'True'}),
            'admin_accounts': ('django.db.models.fields.PositiveSmallIntegerField', [], {}),
            'auto_tax_integration': ('django.db.models.fields.BooleanField', [], {'default': 'False', 'blank': 'True'}),
            'billing_period': ('django.db.models.fields.PositiveSmallIntegerField', [], {'default': '1', 'blank': 'True'}),
            'concurrent_auction_items': ('django.db.models.fields.PositiveIntegerField', [], {}),
            'concurrent_store_items': ('django.db.models.fields.PositiveIntegerField', [], {}),
            'custom_migration': ('django.db.models.fields.BooleanField', [], {'default': 'False', 'blank': 'True'}),
            'description': ('django.db.models.fields.TextField', [], {}),
            'google_analytics_support': ('django.db.models.fields.BooleanField', [], {'default': 'False', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'listings_per_month': ('django.db.models.fields.PositiveIntegerField', [], {}),
            'marketplace': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['market.MarketPlace']"}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '255'}),
            'payment_methods': ('django.db.models.fields.PositiveSmallIntegerField', [], {}),
            'pictures_per_item': ('django.db.models.fields.PositiveSmallIntegerField', [], {'default': '1'}),
            'pictures_per_lot': ('django.db.models.fields.PositiveSmallIntegerField', [], {'default': '1'}),
            'plan_id': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'price': ('django.db.models.fields.DecimalField', [], {'default': '0.0', 'max_digits': '11', 'decimal_places': '2'}),
            'total_mbs_storage': ('django.db.models.fields.IntegerField', [], {'default': '50'}),
            'total_store_revenue': ('django.db.models.fields.DecimalField', [], {'max_digits': '11', 'decimal_places': '2'}),
            'trial_period': ('django.db.models.fields.PositiveSmallIntegerField', [], {})
        },
        'users.profile': {
            'Meta': {'object_name': 'Profile'},
            'birth': ('django.db.models.fields.DateField', [], {'null': 'True', 'blank': 'True'}),
            'city': ('django.db.models.fields.CharField', [], {'max_length': '80', 'null': 'True', 'blank': 'True'}),
            'country': ('django.db.models.fields.CharField', [], {'max_length': '50', 'null': 'True', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'phone': ('django.db.models.fields.CharField', [], {'max_length': '50', 'null': 'True', 'blank': 'True'}),
            'photo': ('core.thumbs.ImageWithThumbsField', [], {'max_length': '100'}),
            'state': ('django.db.models.fields.CharField', [], {'max_length': '80', 'null': 'True', 'blank': 'True'}),
            'street_address': ('django.db.models.fields.CharField', [], {'max_length': '80', 'null': 'True', 'blank': 'True'}),
            'user': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['auth.User']", 'unique': 'True'}),
            'zip': ('django.db.models.fields.CharField', [], {'max_length': '30', 'null': 'True', 'blank': 'True'})
        }
    }

    complete_apps = ['subscriptions']

########NEW FILE########
__FILENAME__ = 0002_auto__add_field_subscriptionplan_visible__add_field_subscriptionplan_s
# encoding: utf-8
import datetime
from south.db import db
from south.v2 import SchemaMigration
from django.db import models

class Migration(SchemaMigration):

    def forwards(self, orm):
        
        # Adding field 'SubscriptionPlan.visible'
        db.add_column('subscriptions_subscriptionplan', 'visible', self.gf('django.db.models.fields.BooleanField')(default=True, blank=True), keep_default=False)

        # Adding field 'SubscriptionPlan.secret_code'
        db.add_column('subscriptions_subscriptionplan', 'secret_code', self.gf('django.db.models.fields.CharField')(max_length=255, null=True, blank=True), keep_default=False)


    def backwards(self, orm):
        
        # Deleting field 'SubscriptionPlan.visible'
        db.delete_column('subscriptions_subscriptionplan', 'visible')

        # Deleting field 'SubscriptionPlan.secret_code'
        db.delete_column('subscriptions_subscriptionplan', 'secret_code')


    models = {
        'auth.group': {
            'Meta': {'object_name': 'Group'},
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '80'}),
            'permissions': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['auth.Permission']", 'symmetrical': 'False', 'blank': 'True'})
        },
        'auth.permission': {
            'Meta': {'unique_together': "(('content_type', 'codename'),)", 'object_name': 'Permission'},
            'codename': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'content_type': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['contenttypes.ContentType']"}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '50'})
        },
        'auth.user': {
            'Meta': {'object_name': 'User'},
            'date_joined': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
            'email': ('django.db.models.fields.EmailField', [], {'max_length': '75'}),
            'first_name': ('django.db.models.fields.CharField', [], {'max_length': '30', 'blank': 'True'}),
            'groups': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['auth.Group']", 'symmetrical': 'False', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'is_active': ('django.db.models.fields.BooleanField', [], {'default': 'True', 'blank': 'True'}),
            'is_staff': ('django.db.models.fields.BooleanField', [], {'default': 'False', 'blank': 'True'}),
            'is_superuser': ('django.db.models.fields.BooleanField', [], {'default': 'False', 'blank': 'True'}),
            'last_login': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
            'last_name': ('django.db.models.fields.CharField', [], {'max_length': '30', 'blank': 'True'}),
            'password': ('django.db.models.fields.CharField', [], {'max_length': '128'}),
            'user_permissions': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['auth.Permission']", 'symmetrical': 'False', 'blank': 'True'}),
            'username': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '32'})
        },
        'contenttypes.contenttype': {
            'Meta': {'unique_together': "(('app_label', 'model'),)", 'object_name': 'ContentType', 'db_table': "'django_content_type'"},
            'app_label': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'model': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '100'})
        },
        'market.marketplace': {
            'Meta': {'object_name': 'MarketPlace'},
            'base_domain': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '128'}),
            'charge_on_card_as': ('django.db.models.fields.CharField', [], {'default': "''", 'unique': 'True', 'max_length': '255'}),
            'contact_email': ('django.db.models.fields.EmailField', [], {'default': "'contact@yourstore.com'", 'max_length': '75'}),
            'contact_phone': ('django.db.models.fields.CharField', [], {'default': "''", 'max_length': '128'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '92'}),
            'slug': ('django.db.models.fields.SlugField', [], {'unique': 'True', 'max_length': '92', 'db_index': 'True'}),
            'template_prefix': ('django.db.models.fields.SlugField', [], {'unique': 'True', 'max_length': '92', 'db_index': 'True'}),
            'title': ('django.db.models.fields.CharField', [], {'max_length': '92'})
        },
        'subscriptions.subscription': {
            'Meta': {'object_name': 'Subscription'},
            'date_time': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'owner': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['users.Profile']"}),
            'plan': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['subscriptions.SubscriptionPlan']"}),
            'status': ('django.db.models.fields.CharField', [], {'default': "'A'", 'max_length': '1'}),
            'subscription_id': ('django.db.models.fields.CharField', [], {'max_length': '6'})
        },
        'subscriptions.subscriptionpayment': {
            'Meta': {'object_name': 'SubscriptionPayment'},
            'amount': ('django.db.models.fields.FloatField', [], {}),
            'datetime': ('django.db.models.fields.DateTimeField', [], {}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'subscription': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['subscriptions.Subscription']"})
        },
        'subscriptions.subscriptionplan': {
            'Meta': {'object_name': 'SubscriptionPlan'},
            'active': ('django.db.models.fields.BooleanField', [], {'default': 'True', 'blank': 'True'}),
            'admin_accounts': ('django.db.models.fields.PositiveSmallIntegerField', [], {}),
            'auto_tax_integration': ('django.db.models.fields.BooleanField', [], {'default': 'False', 'blank': 'True'}),
            'billing_period': ('django.db.models.fields.PositiveSmallIntegerField', [], {'default': '1', 'blank': 'True'}),
            'concurrent_auction_items': ('django.db.models.fields.PositiveIntegerField', [], {}),
            'concurrent_store_items': ('django.db.models.fields.PositiveIntegerField', [], {}),
            'custom_migration': ('django.db.models.fields.BooleanField', [], {'default': 'False', 'blank': 'True'}),
            'description': ('django.db.models.fields.TextField', [], {}),
            'google_analytics_support': ('django.db.models.fields.BooleanField', [], {'default': 'False', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'listings_per_month': ('django.db.models.fields.PositiveIntegerField', [], {}),
            'marketplace': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['market.MarketPlace']"}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '255'}),
            'payment_methods': ('django.db.models.fields.PositiveSmallIntegerField', [], {}),
            'pictures_per_item': ('django.db.models.fields.PositiveSmallIntegerField', [], {'default': '1'}),
            'pictures_per_lot': ('django.db.models.fields.PositiveSmallIntegerField', [], {'default': '1'}),
            'plan_id': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'price': ('django.db.models.fields.DecimalField', [], {'default': '0.0', 'max_digits': '11', 'decimal_places': '2'}),
            'secret_code': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True', 'blank': 'True'}),
            'total_mbs_storage': ('django.db.models.fields.IntegerField', [], {'default': '50'}),
            'total_store_revenue': ('django.db.models.fields.DecimalField', [], {'max_digits': '11', 'decimal_places': '2'}),
            'trial_period': ('django.db.models.fields.PositiveSmallIntegerField', [], {}),
            'visible': ('django.db.models.fields.BooleanField', [], {'default': 'True', 'blank': 'True'})
        },
        'users.profile': {
            'Meta': {'object_name': 'Profile'},
            'birth': ('django.db.models.fields.DateField', [], {'null': 'True', 'blank': 'True'}),
            'city': ('django.db.models.fields.CharField', [], {'max_length': '80', 'null': 'True', 'blank': 'True'}),
            'country': ('django.db.models.fields.CharField', [], {'max_length': '50', 'null': 'True', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'phone': ('django.db.models.fields.CharField', [], {'max_length': '50', 'null': 'True', 'blank': 'True'}),
            'photo': ('core.thumbs.ImageWithThumbsField', [], {'max_length': '100'}),
            'state': ('django.db.models.fields.CharField', [], {'max_length': '80', 'null': 'True', 'blank': 'True'}),
            'street_address': ('django.db.models.fields.CharField', [], {'max_length': '80', 'null': 'True', 'blank': 'True'}),
            'user': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['auth.User']", 'unique': 'True'}),
            'zip': ('django.db.models.fields.CharField', [], {'max_length': '30', 'null': 'True', 'blank': 'True'})
        }
    }

    complete_apps = ['subscriptions']

########NEW FILE########
__FILENAME__ = 0003_auto__add_subscriptioncancelation
# encoding: utf-8
import datetime
from south.db import db
from south.v2 import SchemaMigration
from django.db import models

class Migration(SchemaMigration):

    def forwards(self, orm):
        
        # Adding model 'SubscriptionCancelation'
        db.create_table('subscriptions_subscriptioncancelation', (
            ('id', self.gf('django.db.models.fields.AutoField')(primary_key=True)),
            ('shop', self.gf('django.db.models.fields.related.ForeignKey')(to=orm['shops.Shop'])),
            ('subscription', self.gf('django.db.models.fields.related.ForeignKey')(to=orm['subscriptions.Subscription'])),
            ('date_time', self.gf('django.db.models.fields.DateTimeField')(auto_now_add=True, blank=True)),
        ))
        db.send_create_signal('subscriptions', ['SubscriptionCancelation'])


    def backwards(self, orm):
        
        # Deleting model 'SubscriptionCancelation'
        db.delete_table('subscriptions_subscriptioncancelation')


    models = {
        'auth.group': {
            'Meta': {'object_name': 'Group'},
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '80'}),
            'permissions': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['auth.Permission']", 'symmetrical': 'False', 'blank': 'True'})
        },
        'auth.permission': {
            'Meta': {'unique_together': "(('content_type', 'codename'),)", 'object_name': 'Permission'},
            'codename': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'content_type': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['contenttypes.ContentType']"}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '50'})
        },
        'auth.user': {
            'Meta': {'object_name': 'User'},
            'date_joined': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
            'email': ('django.db.models.fields.EmailField', [], {'max_length': '75'}),
            'first_name': ('django.db.models.fields.CharField', [], {'max_length': '30', 'blank': 'True'}),
            'groups': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['auth.Group']", 'symmetrical': 'False', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'is_active': ('django.db.models.fields.BooleanField', [], {'default': 'True', 'blank': 'True'}),
            'is_staff': ('django.db.models.fields.BooleanField', [], {'default': 'False', 'blank': 'True'}),
            'is_superuser': ('django.db.models.fields.BooleanField', [], {'default': 'False', 'blank': 'True'}),
            'last_login': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
            'last_name': ('django.db.models.fields.CharField', [], {'max_length': '30', 'blank': 'True'}),
            'password': ('django.db.models.fields.CharField', [], {'max_length': '128'}),
            'user_permissions': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['auth.Permission']", 'symmetrical': 'False', 'blank': 'True'}),
            'username': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '32'})
        },
        'contenttypes.contenttype': {
            'Meta': {'unique_together': "(('app_label', 'model'),)", 'object_name': 'ContentType', 'db_table': "'django_content_type'"},
            'app_label': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'model': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '100'})
        },
        'market.marketplace': {
            'Meta': {'object_name': 'MarketPlace'},
            'base_domain': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '128'}),
            'charge_on_card_as': ('django.db.models.fields.CharField', [], {'default': "''", 'unique': 'True', 'max_length': '255'}),
            'contact_email': ('django.db.models.fields.EmailField', [], {'default': "'contact@yourstore.com'", 'max_length': '75'}),
            'contact_phone': ('django.db.models.fields.CharField', [], {'default': "''", 'max_length': '128'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '92'}),
            'slug': ('django.db.models.fields.SlugField', [], {'unique': 'True', 'max_length': '92', 'db_index': 'True'}),
            'template_prefix': ('django.db.models.fields.SlugField', [], {'unique': 'True', 'max_length': '92', 'db_index': 'True'}),
            'title': ('django.db.models.fields.CharField', [], {'max_length': '92'})
        },
        'shops.shop': {
            'Meta': {'object_name': 'Shop'},
            'admin': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['auth.User']"}),
            'bids': ('django.db.models.fields.IntegerField', [], {'default': '0'}),
            'date_time': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'location': ('django.db.models.fields.CharField', [], {'default': "'39.29038,-76.61219'", 'max_length': '255'}),
            'marketplace': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['market.MarketPlace']"}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '60'}),
            'views': ('django.db.models.fields.IntegerField', [], {'default': '0'})
        },
        'subscriptions.subscription': {
            'Meta': {'object_name': 'Subscription'},
            'date_time': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'owner': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['users.Profile']"}),
            'plan': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['subscriptions.SubscriptionPlan']"}),
            'status': ('django.db.models.fields.CharField', [], {'default': "'A'", 'max_length': '1'}),
            'subscription_id': ('django.db.models.fields.CharField', [], {'max_length': '6'})
        },
        'subscriptions.subscriptioncancelation': {
            'Meta': {'object_name': 'SubscriptionCancelation'},
            'date_time': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'shop': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['shops.Shop']"}),
            'subscription': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['subscriptions.Subscription']"})
        },
        'subscriptions.subscriptionpayment': {
            'Meta': {'object_name': 'SubscriptionPayment'},
            'amount': ('django.db.models.fields.FloatField', [], {}),
            'datetime': ('django.db.models.fields.DateTimeField', [], {}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'subscription': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['subscriptions.Subscription']"})
        },
        'subscriptions.subscriptionplan': {
            'Meta': {'object_name': 'SubscriptionPlan'},
            'active': ('django.db.models.fields.BooleanField', [], {'default': 'True', 'blank': 'True'}),
            'admin_accounts': ('django.db.models.fields.PositiveSmallIntegerField', [], {}),
            'auto_tax_integration': ('django.db.models.fields.BooleanField', [], {'default': 'False', 'blank': 'True'}),
            'billing_period': ('django.db.models.fields.PositiveSmallIntegerField', [], {'default': '1', 'blank': 'True'}),
            'concurrent_auction_items': ('django.db.models.fields.PositiveIntegerField', [], {}),
            'concurrent_store_items': ('django.db.models.fields.PositiveIntegerField', [], {}),
            'custom_migration': ('django.db.models.fields.BooleanField', [], {'default': 'False', 'blank': 'True'}),
            'description': ('django.db.models.fields.TextField', [], {}),
            'google_analytics_support': ('django.db.models.fields.BooleanField', [], {'default': 'False', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'listings_per_month': ('django.db.models.fields.PositiveIntegerField', [], {}),
            'marketplace': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['market.MarketPlace']"}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '255'}),
            'payment_methods': ('django.db.models.fields.PositiveSmallIntegerField', [], {}),
            'pictures_per_item': ('django.db.models.fields.PositiveSmallIntegerField', [], {'default': '1'}),
            'pictures_per_lot': ('django.db.models.fields.PositiveSmallIntegerField', [], {'default': '1'}),
            'plan_id': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'price': ('django.db.models.fields.DecimalField', [], {'default': '0.0', 'max_digits': '11', 'decimal_places': '2'}),
            'secret_code': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True', 'blank': 'True'}),
            'total_mbs_storage': ('django.db.models.fields.IntegerField', [], {'default': '50'}),
            'total_store_revenue': ('django.db.models.fields.DecimalField', [], {'max_digits': '11', 'decimal_places': '2'}),
            'trial_period': ('django.db.models.fields.PositiveSmallIntegerField', [], {}),
            'visible': ('django.db.models.fields.BooleanField', [], {'default': 'True', 'blank': 'True'})
        },
        'users.profile': {
            'Meta': {'object_name': 'Profile'},
            'birth': ('django.db.models.fields.DateField', [], {'null': 'True', 'blank': 'True'}),
            'city': ('django.db.models.fields.CharField', [], {'max_length': '80', 'null': 'True', 'blank': 'True'}),
            'country': ('django.db.models.fields.CharField', [], {'max_length': '50', 'null': 'True', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'phone': ('django.db.models.fields.CharField', [], {'max_length': '50', 'null': 'True', 'blank': 'True'}),
            'photo': ('core.thumbs.ImageWithThumbsField', [], {'max_length': '100'}),
            'state': ('django.db.models.fields.CharField', [], {'max_length': '80', 'null': 'True', 'blank': 'True'}),
            'street_address': ('django.db.models.fields.CharField', [], {'max_length': '80', 'null': 'True', 'blank': 'True'}),
            'user': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['auth.User']", 'unique': 'True'}),
            'zip': ('django.db.models.fields.CharField', [], {'max_length': '30', 'null': 'True', 'blank': 'True'})
        }
    }

    complete_apps = ['subscriptions']

########NEW FILE########
__FILENAME__ = 0004_auto__add_feature__add_field_subscriptionplan_additional_payment_price
# encoding: utf-8
import datetime
from south.db import db
from south.v2 import SchemaMigration
from django.db import models

class Migration(SchemaMigration):

    def forwards(self, orm):
        
        # Adding model 'Feature'
        db.create_table('subscriptions_feature', (
            ('id', self.gf('django.db.models.fields.AutoField')(primary_key=True)),
            ('shop', self.gf('django.db.models.fields.related.ForeignKey')(to=orm['shops.Shop'])),
            ('auctions', self.gf('django.db.models.fields.BooleanField')(default=False, blank=True)),
            ('wishlist', self.gf('django.db.models.fields.BooleanField')(default=False, blank=True)),
            ('mailinglist', self.gf('django.db.models.fields.BooleanField')(default=False, blank=True)),
            ('google_analytics', self.gf('django.db.models.fields.BooleanField')(default=False, blank=True)),
            ('show_attendance', self.gf('django.db.models.fields.BooleanField')(default=False, blank=True)),
            ('custom_dns', self.gf('django.db.models.fields.BooleanField')(default=False, blank=True)),
        ))
        db.send_create_signal('subscriptions', ['Feature'])

        # Adding field 'SubscriptionPlan.additional_payment_price'
        db.add_column('subscriptions_subscriptionplan', 'additional_payment_price', self.gf('django.db.models.fields.DecimalField')(default=0.0, max_digits=11, decimal_places=2), keep_default=False)

        # Adding field 'SubscriptionPlan.total_data_transfer'
        db.add_column('subscriptions_subscriptionplan', 'total_data_transfer', self.gf('django.db.models.fields.IntegerField')(default=50), keep_default=False)

        # Adding field 'SubscriptionPlan.custom_domain_name_fee'
        db.add_column('subscriptions_subscriptionplan', 'custom_domain_name_fee', self.gf('django.db.models.fields.DecimalField')(default=0.0, max_digits=11, decimal_places=2), keep_default=False)

        # Adding field 'SubscriptionPlan.community_support_in_forums'
        db.add_column('subscriptions_subscriptionplan', 'community_support_in_forums', self.gf('django.db.models.fields.BooleanField')(default=True, blank=True), keep_default=False)

        # Adding field 'SubscriptionPlan.voice_support_price'
        db.add_column('subscriptions_subscriptionplan', 'voice_support_price', self.gf('django.db.models.fields.DecimalField')(default=0.0, max_digits=11, decimal_places=2), keep_default=False)

        # Adding field 'SubscriptionPlan.email_support_price'
        db.add_column('subscriptions_subscriptionplan', 'email_support_price', self.gf('django.db.models.fields.DecimalField')(default=0.0, max_digits=11, decimal_places=2), keep_default=False)

        # Adding field 'SubscriptionPlan.online_help_center'
        db.add_column('subscriptions_subscriptionplan', 'online_help_center', self.gf('django.db.models.fields.BooleanField')(default=True, blank=True), keep_default=False)

        # Adding field 'SubscriptionPlan.community_wish_list'
        db.add_column('subscriptions_subscriptionplan', 'community_wish_list', self.gf('django.db.models.fields.DecimalField')(default=0.0, max_digits=11, decimal_places=2), keep_default=False)

        # Adding field 'SubscriptionPlan.collect_emails'
        db.add_column('subscriptions_subscriptionplan', 'collect_emails', self.gf('django.db.models.fields.DecimalField')(default=0.0, max_digits=11, decimal_places=2), keep_default=False)

        # Adding field 'SubscriptionPlan.shopping_cart'
        db.add_column('subscriptions_subscriptionplan', 'shopping_cart', self.gf('django.db.models.fields.BooleanField')(default=True, blank=True), keep_default=False)

        # Adding field 'SubscriptionPlan.create_auctions'
        db.add_column('subscriptions_subscriptionplan', 'create_auctions', self.gf('django.db.models.fields.DecimalField')(default=0.0, max_digits=11, decimal_places=2), keep_default=False)

        # Adding field 'SubscriptionPlan.show_attendance'
        db.add_column('subscriptions_subscriptionplan', 'show_attendance', self.gf('django.db.models.fields.DecimalField')(default=0.0, max_digits=11, decimal_places=2), keep_default=False)

        # Adding field 'SubscriptionPlan.customizable_shipping_rates'
        db.add_column('subscriptions_subscriptionplan', 'customizable_shipping_rates', self.gf('django.db.models.fields.PositiveSmallIntegerField')(default=1), keep_default=False)

        # Adding field 'SubscriptionPlan.additional_shipping_price'
        db.add_column('subscriptions_subscriptionplan', 'additional_shipping_price', self.gf('django.db.models.fields.DecimalField')(default=0.0, max_digits=11, decimal_places=2), keep_default=False)


    def backwards(self, orm):
        
        # Deleting model 'Feature'
        db.delete_table('subscriptions_feature')

        # Deleting field 'SubscriptionPlan.additional_payment_price'
        db.delete_column('subscriptions_subscriptionplan', 'additional_payment_price')

        # Deleting field 'SubscriptionPlan.total_data_transfer'
        db.delete_column('subscriptions_subscriptionplan', 'total_data_transfer')

        # Deleting field 'SubscriptionPlan.custom_domain_name_fee'
        db.delete_column('subscriptions_subscriptionplan', 'custom_domain_name_fee')

        # Deleting field 'SubscriptionPlan.community_support_in_forums'
        db.delete_column('subscriptions_subscriptionplan', 'community_support_in_forums')

        # Deleting field 'SubscriptionPlan.voice_support_price'
        db.delete_column('subscriptions_subscriptionplan', 'voice_support_price')

        # Deleting field 'SubscriptionPlan.email_support_price'
        db.delete_column('subscriptions_subscriptionplan', 'email_support_price')

        # Deleting field 'SubscriptionPlan.online_help_center'
        db.delete_column('subscriptions_subscriptionplan', 'online_help_center')

        # Deleting field 'SubscriptionPlan.community_wish_list'
        db.delete_column('subscriptions_subscriptionplan', 'community_wish_list')

        # Deleting field 'SubscriptionPlan.collect_emails'
        db.delete_column('subscriptions_subscriptionplan', 'collect_emails')

        # Deleting field 'SubscriptionPlan.shopping_cart'
        db.delete_column('subscriptions_subscriptionplan', 'shopping_cart')

        # Deleting field 'SubscriptionPlan.create_auctions'
        db.delete_column('subscriptions_subscriptionplan', 'create_auctions')

        # Deleting field 'SubscriptionPlan.show_attendance'
        db.delete_column('subscriptions_subscriptionplan', 'show_attendance')

        # Deleting field 'SubscriptionPlan.customizable_shipping_rates'
        db.delete_column('subscriptions_subscriptionplan', 'customizable_shipping_rates')

        # Deleting field 'SubscriptionPlan.additional_shipping_price'
        db.delete_column('subscriptions_subscriptionplan', 'additional_shipping_price')


    models = {
        'auth.group': {
            'Meta': {'object_name': 'Group'},
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '80'}),
            'permissions': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['auth.Permission']", 'symmetrical': 'False', 'blank': 'True'})
        },
        'auth.permission': {
            'Meta': {'unique_together': "(('content_type', 'codename'),)", 'object_name': 'Permission'},
            'codename': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'content_type': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['contenttypes.ContentType']"}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '50'})
        },
        'auth.user': {
            'Meta': {'object_name': 'User'},
            'date_joined': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
            'email': ('django.db.models.fields.EmailField', [], {'max_length': '75'}),
            'first_name': ('django.db.models.fields.CharField', [], {'max_length': '30', 'blank': 'True'}),
            'groups': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['auth.Group']", 'symmetrical': 'False', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'is_active': ('django.db.models.fields.BooleanField', [], {'default': 'True', 'blank': 'True'}),
            'is_staff': ('django.db.models.fields.BooleanField', [], {'default': 'False', 'blank': 'True'}),
            'is_superuser': ('django.db.models.fields.BooleanField', [], {'default': 'False', 'blank': 'True'}),
            'last_login': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
            'last_name': ('django.db.models.fields.CharField', [], {'max_length': '30', 'blank': 'True'}),
            'password': ('django.db.models.fields.CharField', [], {'max_length': '128'}),
            'user_permissions': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['auth.Permission']", 'symmetrical': 'False', 'blank': 'True'}),
            'username': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '32'})
        },
        'contenttypes.contenttype': {
            'Meta': {'unique_together': "(('app_label', 'model'),)", 'object_name': 'ContentType', 'db_table': "'django_content_type'"},
            'app_label': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'model': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '100'})
        },
        'market.marketplace': {
            'Meta': {'object_name': 'MarketPlace'},
            'base_domain': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '128'}),
            'charge_on_card_as': ('django.db.models.fields.CharField', [], {'default': "''", 'max_length': '255'}),
            'contact_email': ('django.db.models.fields.EmailField', [], {'default': "'contact@yourstore.com'", 'max_length': '75'}),
            'contact_phone': ('django.db.models.fields.CharField', [], {'default': "''", 'max_length': '128'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '92'}),
            'slug': ('django.db.models.fields.SlugField', [], {'unique': 'True', 'max_length': '92', 'db_index': 'True'}),
            'template_prefix': ('django.db.models.fields.SlugField', [], {'unique': 'True', 'max_length': '92', 'db_index': 'True'}),
            'title': ('django.db.models.fields.CharField', [], {'max_length': '92'})
        },
        'shops.shop': {
            'Meta': {'object_name': 'Shop'},
            'admin': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['auth.User']"}),
            'bids': ('django.db.models.fields.IntegerField', [], {'default': '0'}),
            'date_time': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'location': ('django.db.models.fields.CharField', [], {'default': "'39.29038,-76.61219'", 'max_length': '255'}),
            'marketplace': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['market.MarketPlace']"}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '60'}),
            'views': ('django.db.models.fields.IntegerField', [], {'default': '0'})
        },
        'subscriptions.feature': {
            'Meta': {'object_name': 'Feature'},
            'auctions': ('django.db.models.fields.BooleanField', [], {'default': 'False', 'blank': 'True'}),
            'custom_dns': ('django.db.models.fields.BooleanField', [], {'default': 'False', 'blank': 'True'}),
            'google_analytics': ('django.db.models.fields.BooleanField', [], {'default': 'False', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'mailinglist': ('django.db.models.fields.BooleanField', [], {'default': 'False', 'blank': 'True'}),
            'shop': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['shops.Shop']"}),
            'show_attendance': ('django.db.models.fields.BooleanField', [], {'default': 'False', 'blank': 'True'}),
            'wishlist': ('django.db.models.fields.BooleanField', [], {'default': 'False', 'blank': 'True'})
        },
        'subscriptions.subscription': {
            'Meta': {'object_name': 'Subscription'},
            'date_time': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'owner': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['users.Profile']"}),
            'plan': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['subscriptions.SubscriptionPlan']"}),
            'status': ('django.db.models.fields.CharField', [], {'default': "'A'", 'max_length': '1'}),
            'subscription_id': ('django.db.models.fields.CharField', [], {'max_length': '6'})
        },
        'subscriptions.subscriptioncancelation': {
            'Meta': {'object_name': 'SubscriptionCancelation'},
            'date_time': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'shop': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['shops.Shop']"}),
            'subscription': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['subscriptions.Subscription']"})
        },
        'subscriptions.subscriptionpayment': {
            'Meta': {'object_name': 'SubscriptionPayment'},
            'amount': ('django.db.models.fields.FloatField', [], {}),
            'datetime': ('django.db.models.fields.DateTimeField', [], {}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'subscription': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['subscriptions.Subscription']"})
        },
        'subscriptions.subscriptionplan': {
            'Meta': {'object_name': 'SubscriptionPlan'},
            'active': ('django.db.models.fields.BooleanField', [], {'default': 'True', 'blank': 'True'}),
            'additional_payment_price': ('django.db.models.fields.DecimalField', [], {'default': '0.0', 'max_digits': '11', 'decimal_places': '2'}),
            'additional_shipping_price': ('django.db.models.fields.DecimalField', [], {'default': '0.0', 'max_digits': '11', 'decimal_places': '2'}),
            'admin_accounts': ('django.db.models.fields.PositiveSmallIntegerField', [], {}),
            'auto_tax_integration': ('django.db.models.fields.BooleanField', [], {'default': 'False', 'blank': 'True'}),
            'billing_period': ('django.db.models.fields.PositiveSmallIntegerField', [], {'default': '1', 'blank': 'True'}),
            'collect_emails': ('django.db.models.fields.DecimalField', [], {'default': '0.0', 'max_digits': '11', 'decimal_places': '2'}),
            'community_support_in_forums': ('django.db.models.fields.BooleanField', [], {'default': 'True', 'blank': 'True'}),
            'community_wish_list': ('django.db.models.fields.DecimalField', [], {'default': '0.0', 'max_digits': '11', 'decimal_places': '2'}),
            'concurrent_auction_items': ('django.db.models.fields.PositiveIntegerField', [], {}),
            'concurrent_store_items': ('django.db.models.fields.PositiveIntegerField', [], {}),
            'create_auctions': ('django.db.models.fields.DecimalField', [], {'default': '0.0', 'max_digits': '11', 'decimal_places': '2'}),
            'custom_domain_name_fee': ('django.db.models.fields.DecimalField', [], {'default': '0.0', 'max_digits': '11', 'decimal_places': '2'}),
            'custom_migration': ('django.db.models.fields.BooleanField', [], {'default': 'False', 'blank': 'True'}),
            'customizable_shipping_rates': ('django.db.models.fields.PositiveSmallIntegerField', [], {'default': '1'}),
            'description': ('django.db.models.fields.TextField', [], {}),
            'email_support_price': ('django.db.models.fields.DecimalField', [], {'default': '0.0', 'max_digits': '11', 'decimal_places': '2'}),
            'google_analytics_support': ('django.db.models.fields.BooleanField', [], {'default': 'False', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'listings_per_month': ('django.db.models.fields.PositiveIntegerField', [], {}),
            'marketplace': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['market.MarketPlace']"}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '255'}),
            'online_help_center': ('django.db.models.fields.BooleanField', [], {'default': 'True', 'blank': 'True'}),
            'payment_methods': ('django.db.models.fields.PositiveSmallIntegerField', [], {}),
            'pictures_per_item': ('django.db.models.fields.PositiveSmallIntegerField', [], {'default': '1'}),
            'pictures_per_lot': ('django.db.models.fields.PositiveSmallIntegerField', [], {'default': '1'}),
            'plan_id': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'price': ('django.db.models.fields.DecimalField', [], {'default': '0.0', 'max_digits': '11', 'decimal_places': '2'}),
            'secret_code': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True', 'blank': 'True'}),
            'shopping_cart': ('django.db.models.fields.BooleanField', [], {'default': 'True', 'blank': 'True'}),
            'show_attendance': ('django.db.models.fields.DecimalField', [], {'default': '0.0', 'max_digits': '11', 'decimal_places': '2'}),
            'total_data_transfer': ('django.db.models.fields.IntegerField', [], {'default': '50'}),
            'total_mbs_storage': ('django.db.models.fields.IntegerField', [], {'default': '50'}),
            'total_store_revenue': ('django.db.models.fields.DecimalField', [], {'max_digits': '11', 'decimal_places': '2'}),
            'trial_period': ('django.db.models.fields.PositiveSmallIntegerField', [], {}),
            'visible': ('django.db.models.fields.BooleanField', [], {'default': 'True', 'blank': 'True'}),
            'voice_support_price': ('django.db.models.fields.DecimalField', [], {'default': '0.0', 'max_digits': '11', 'decimal_places': '2'})
        },
        'users.profile': {
            'Meta': {'object_name': 'Profile'},
            'birth': ('django.db.models.fields.DateField', [], {'null': 'True', 'blank': 'True'}),
            'city': ('django.db.models.fields.CharField', [], {'max_length': '80', 'null': 'True', 'blank': 'True'}),
            'country': ('django.db.models.fields.CharField', [], {'max_length': '50', 'null': 'True', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'phone': ('django.db.models.fields.CharField', [], {'max_length': '50', 'null': 'True', 'blank': 'True'}),
            'photo': ('core.thumbs.ImageWithThumbsField', [], {'max_length': '100'}),
            'state': ('django.db.models.fields.CharField', [], {'max_length': '80', 'null': 'True', 'blank': 'True'}),
            'street_address': ('django.db.models.fields.CharField', [], {'max_length': '80', 'null': 'True', 'blank': 'True'}),
            'user': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['auth.User']", 'unique': 'True'}),
            'zip': ('django.db.models.fields.CharField', [], {'max_length': '30', 'null': 'True', 'blank': 'True'})
        }
    }

    complete_apps = ['subscriptions']

########NEW FILE########
__FILENAME__ = 0005_auto__add_field_feature_paypal__add_field_feature_google_checkout__add
# encoding: utf-8
import datetime
from south.db import db
from south.v2 import SchemaMigration
from django.db import models

class Migration(SchemaMigration):

    def forwards(self, orm):
        
        # Adding field 'Feature.paypal'
        db.add_column('subscriptions_feature', 'paypal', self.gf('django.db.models.fields.BooleanField')(default=False, blank=True), keep_default=False)

        # Adding field 'Feature.google_checkout'
        db.add_column('subscriptions_feature', 'google_checkout', self.gf('django.db.models.fields.BooleanField')(default=False, blank=True), keep_default=False)

        # Adding field 'Feature.credit_card'
        db.add_column('subscriptions_feature', 'credit_card', self.gf('django.db.models.fields.BooleanField')(default=False, blank=True), keep_default=False)

        # Adding field 'Feature.manual_payment'
        db.add_column('subscriptions_feature', 'manual_payment', self.gf('django.db.models.fields.BooleanField')(default=False, blank=True), keep_default=False)


    def backwards(self, orm):
        
        # Deleting field 'Feature.paypal'
        db.delete_column('subscriptions_feature', 'paypal')

        # Deleting field 'Feature.google_checkout'
        db.delete_column('subscriptions_feature', 'google_checkout')

        # Deleting field 'Feature.credit_card'
        db.delete_column('subscriptions_feature', 'credit_card')

        # Deleting field 'Feature.manual_payment'
        db.delete_column('subscriptions_feature', 'manual_payment')


    models = {
        'auth.group': {
            'Meta': {'object_name': 'Group'},
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '80'}),
            'permissions': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['auth.Permission']", 'symmetrical': 'False', 'blank': 'True'})
        },
        'auth.permission': {
            'Meta': {'unique_together': "(('content_type', 'codename'),)", 'object_name': 'Permission'},
            'codename': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'content_type': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['contenttypes.ContentType']"}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '50'})
        },
        'auth.user': {
            'Meta': {'object_name': 'User'},
            'date_joined': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
            'email': ('django.db.models.fields.EmailField', [], {'max_length': '75'}),
            'first_name': ('django.db.models.fields.CharField', [], {'max_length': '30', 'blank': 'True'}),
            'groups': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['auth.Group']", 'symmetrical': 'False', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'is_active': ('django.db.models.fields.BooleanField', [], {'default': 'True', 'blank': 'True'}),
            'is_staff': ('django.db.models.fields.BooleanField', [], {'default': 'False', 'blank': 'True'}),
            'is_superuser': ('django.db.models.fields.BooleanField', [], {'default': 'False', 'blank': 'True'}),
            'last_login': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
            'last_name': ('django.db.models.fields.CharField', [], {'max_length': '30', 'blank': 'True'}),
            'password': ('django.db.models.fields.CharField', [], {'max_length': '128'}),
            'user_permissions': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['auth.Permission']", 'symmetrical': 'False', 'blank': 'True'}),
            'username': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '32'})
        },
        'contenttypes.contenttype': {
            'Meta': {'unique_together': "(('app_label', 'model'),)", 'object_name': 'ContentType', 'db_table': "'django_content_type'"},
            'app_label': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'model': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '100'})
        },
        'market.marketplace': {
            'Meta': {'object_name': 'MarketPlace'},
            'base_domain': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '128'}),
            'charge_on_card_as': ('django.db.models.fields.CharField', [], {'default': "''", 'max_length': '255'}),
            'contact_email': ('django.db.models.fields.EmailField', [], {'default': "'contact@yourstore.com'", 'max_length': '75'}),
            'contact_phone': ('django.db.models.fields.CharField', [], {'default': "''", 'max_length': '128'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '92'}),
            'slug': ('django.db.models.fields.SlugField', [], {'unique': 'True', 'max_length': '92', 'db_index': 'True'}),
            'template_prefix': ('django.db.models.fields.SlugField', [], {'unique': 'True', 'max_length': '92', 'db_index': 'True'}),
            'title': ('django.db.models.fields.CharField', [], {'max_length': '92'})
        },
        'shops.shop': {
            'Meta': {'object_name': 'Shop'},
            'admin': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['auth.User']"}),
            'bids': ('django.db.models.fields.IntegerField', [], {'default': '0'}),
            'date_time': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'location': ('django.db.models.fields.CharField', [], {'default': "'39.29038,-76.61219'", 'max_length': '255'}),
            'marketplace': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['market.MarketPlace']"}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '60'}),
            'views': ('django.db.models.fields.IntegerField', [], {'default': '0'})
        },
        'subscriptions.feature': {
            'Meta': {'object_name': 'Feature'},
            'auctions': ('django.db.models.fields.BooleanField', [], {'default': 'False', 'blank': 'True'}),
            'credit_card': ('django.db.models.fields.BooleanField', [], {'default': 'False', 'blank': 'True'}),
            'custom_dns': ('django.db.models.fields.BooleanField', [], {'default': 'False', 'blank': 'True'}),
            'google_analytics': ('django.db.models.fields.BooleanField', [], {'default': 'False', 'blank': 'True'}),
            'google_checkout': ('django.db.models.fields.BooleanField', [], {'default': 'False', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'mailinglist': ('django.db.models.fields.BooleanField', [], {'default': 'False', 'blank': 'True'}),
            'manual_payment': ('django.db.models.fields.BooleanField', [], {'default': 'False', 'blank': 'True'}),
            'paypal': ('django.db.models.fields.BooleanField', [], {'default': 'False', 'blank': 'True'}),
            'shop': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['shops.Shop']"}),
            'show_attendance': ('django.db.models.fields.BooleanField', [], {'default': 'False', 'blank': 'True'}),
            'wishlist': ('django.db.models.fields.BooleanField', [], {'default': 'False', 'blank': 'True'})
        },
        'subscriptions.subscription': {
            'Meta': {'object_name': 'Subscription'},
            'date_time': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'owner': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['users.Profile']"}),
            'plan': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['subscriptions.SubscriptionPlan']"}),
            'status': ('django.db.models.fields.CharField', [], {'default': "'A'", 'max_length': '1'}),
            'subscription_id': ('django.db.models.fields.CharField', [], {'max_length': '6'})
        },
        'subscriptions.subscriptioncancelation': {
            'Meta': {'object_name': 'SubscriptionCancelation'},
            'date_time': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'shop': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['shops.Shop']"}),
            'subscription': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['subscriptions.Subscription']"})
        },
        'subscriptions.subscriptionpayment': {
            'Meta': {'object_name': 'SubscriptionPayment'},
            'amount': ('django.db.models.fields.FloatField', [], {}),
            'datetime': ('django.db.models.fields.DateTimeField', [], {}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'subscription': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['subscriptions.Subscription']"})
        },
        'subscriptions.subscriptionplan': {
            'Meta': {'object_name': 'SubscriptionPlan'},
            'active': ('django.db.models.fields.BooleanField', [], {'default': 'True', 'blank': 'True'}),
            'additional_payment_price': ('django.db.models.fields.DecimalField', [], {'default': '0.0', 'max_digits': '11', 'decimal_places': '2'}),
            'additional_shipping_price': ('django.db.models.fields.DecimalField', [], {'default': '0.0', 'max_digits': '11', 'decimal_places': '2'}),
            'admin_accounts': ('django.db.models.fields.PositiveSmallIntegerField', [], {}),
            'auto_tax_integration': ('django.db.models.fields.BooleanField', [], {'default': 'False', 'blank': 'True'}),
            'billing_period': ('django.db.models.fields.PositiveSmallIntegerField', [], {'default': '1', 'blank': 'True'}),
            'collect_emails': ('django.db.models.fields.DecimalField', [], {'default': '0.0', 'max_digits': '11', 'decimal_places': '2'}),
            'community_support_in_forums': ('django.db.models.fields.BooleanField', [], {'default': 'True', 'blank': 'True'}),
            'community_wish_list': ('django.db.models.fields.DecimalField', [], {'default': '0.0', 'max_digits': '11', 'decimal_places': '2'}),
            'concurrent_auction_items': ('django.db.models.fields.PositiveIntegerField', [], {}),
            'concurrent_store_items': ('django.db.models.fields.PositiveIntegerField', [], {}),
            'create_auctions': ('django.db.models.fields.DecimalField', [], {'default': '0.0', 'max_digits': '11', 'decimal_places': '2'}),
            'custom_domain_name_fee': ('django.db.models.fields.DecimalField', [], {'default': '0.0', 'max_digits': '11', 'decimal_places': '2'}),
            'custom_migration': ('django.db.models.fields.BooleanField', [], {'default': 'False', 'blank': 'True'}),
            'customizable_shipping_rates': ('django.db.models.fields.PositiveSmallIntegerField', [], {'default': '1'}),
            'description': ('django.db.models.fields.TextField', [], {}),
            'email_support_price': ('django.db.models.fields.DecimalField', [], {'default': '0.0', 'max_digits': '11', 'decimal_places': '2'}),
            'google_analytics_support': ('django.db.models.fields.BooleanField', [], {'default': 'False', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'listings_per_month': ('django.db.models.fields.PositiveIntegerField', [], {}),
            'marketplace': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['market.MarketPlace']"}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '255'}),
            'online_help_center': ('django.db.models.fields.BooleanField', [], {'default': 'True', 'blank': 'True'}),
            'payment_methods': ('django.db.models.fields.PositiveSmallIntegerField', [], {}),
            'pictures_per_item': ('django.db.models.fields.PositiveSmallIntegerField', [], {'default': '1'}),
            'pictures_per_lot': ('django.db.models.fields.PositiveSmallIntegerField', [], {'default': '1'}),
            'plan_id': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'price': ('django.db.models.fields.DecimalField', [], {'default': '0.0', 'max_digits': '11', 'decimal_places': '2'}),
            'secret_code': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True', 'blank': 'True'}),
            'shopping_cart': ('django.db.models.fields.BooleanField', [], {'default': 'True', 'blank': 'True'}),
            'show_attendance': ('django.db.models.fields.DecimalField', [], {'default': '0.0', 'max_digits': '11', 'decimal_places': '2'}),
            'total_data_transfer': ('django.db.models.fields.IntegerField', [], {'default': '50'}),
            'total_mbs_storage': ('django.db.models.fields.IntegerField', [], {'default': '50'}),
            'total_store_revenue': ('django.db.models.fields.DecimalField', [], {'max_digits': '11', 'decimal_places': '2'}),
            'trial_period': ('django.db.models.fields.PositiveSmallIntegerField', [], {}),
            'visible': ('django.db.models.fields.BooleanField', [], {'default': 'True', 'blank': 'True'}),
            'voice_support_price': ('django.db.models.fields.DecimalField', [], {'default': '0.0', 'max_digits': '11', 'decimal_places': '2'})
        },
        'users.profile': {
            'Meta': {'object_name': 'Profile'},
            'birth': ('django.db.models.fields.DateField', [], {'null': 'True', 'blank': 'True'}),
            'city': ('django.db.models.fields.CharField', [], {'max_length': '80', 'null': 'True', 'blank': 'True'}),
            'country': ('django.db.models.fields.CharField', [], {'max_length': '50', 'null': 'True', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'phone': ('django.db.models.fields.CharField', [], {'max_length': '50', 'null': 'True', 'blank': 'True'}),
            'photo': ('core.thumbs.ImageWithThumbsField', [], {'max_length': '100'}),
            'state': ('django.db.models.fields.CharField', [], {'max_length': '80', 'null': 'True', 'blank': 'True'}),
            'street_address': ('django.db.models.fields.CharField', [], {'max_length': '80', 'null': 'True', 'blank': 'True'}),
            'user': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['auth.User']", 'unique': 'True'}),
            'zip': ('django.db.models.fields.CharField', [], {'max_length': '30', 'null': 'True', 'blank': 'True'})
        }
    }

    complete_apps = ['subscriptions']

########NEW FILE########
__FILENAME__ = 0006_auto__add_featurepayment
# encoding: utf-8
import datetime
from south.db import db
from south.v2 import SchemaMigration
from django.db import models

class Migration(SchemaMigration):

    def forwards(self, orm):
        
        # Adding model 'FeaturePayment'
        db.create_table('subscriptions_featurepayment', (
            ('id', self.gf('django.db.models.fields.AutoField')(primary_key=True)),
            ('shop', self.gf('django.db.models.fields.related.ForeignKey')(to=orm['shops.Shop'])),
            ('transaction_id', self.gf('django.db.models.fields.CharField')(max_length=10)),
            ('price', self.gf('django.db.models.fields.DecimalField')(default=0.0, max_digits=11, decimal_places=2)),
            ('feature', self.gf('django.db.models.fields.CharField')(max_length=50)),
            ('timestamp', self.gf('django.db.models.fields.DateTimeField')(auto_now_add=True, blank=True)),
        ))
        db.send_create_signal('subscriptions', ['FeaturePayment'])


    def backwards(self, orm):
        
        # Deleting model 'FeaturePayment'
        db.delete_table('subscriptions_featurepayment')


    models = {
        'auth.group': {
            'Meta': {'object_name': 'Group'},
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '80'}),
            'permissions': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['auth.Permission']", 'symmetrical': 'False', 'blank': 'True'})
        },
        'auth.permission': {
            'Meta': {'unique_together': "(('content_type', 'codename'),)", 'object_name': 'Permission'},
            'codename': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'content_type': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['contenttypes.ContentType']"}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '50'})
        },
        'auth.user': {
            'Meta': {'object_name': 'User'},
            'date_joined': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
            'email': ('django.db.models.fields.EmailField', [], {'max_length': '75'}),
            'first_name': ('django.db.models.fields.CharField', [], {'max_length': '30', 'blank': 'True'}),
            'groups': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['auth.Group']", 'symmetrical': 'False', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'is_active': ('django.db.models.fields.BooleanField', [], {'default': 'True', 'blank': 'True'}),
            'is_staff': ('django.db.models.fields.BooleanField', [], {'default': 'False', 'blank': 'True'}),
            'is_superuser': ('django.db.models.fields.BooleanField', [], {'default': 'False', 'blank': 'True'}),
            'last_login': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
            'last_name': ('django.db.models.fields.CharField', [], {'max_length': '30', 'blank': 'True'}),
            'password': ('django.db.models.fields.CharField', [], {'max_length': '128'}),
            'user_permissions': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['auth.Permission']", 'symmetrical': 'False', 'blank': 'True'}),
            'username': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '32'})
        },
        'contenttypes.contenttype': {
            'Meta': {'unique_together': "(('app_label', 'model'),)", 'object_name': 'ContentType', 'db_table': "'django_content_type'"},
            'app_label': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'model': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '100'})
        },
        'market.marketplace': {
            'Meta': {'object_name': 'MarketPlace'},
            'base_domain': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '128'}),
            'charge_on_card_as': ('django.db.models.fields.CharField', [], {'default': "''", 'max_length': '255'}),
            'contact_email': ('django.db.models.fields.EmailField', [], {'default': "'contact@yourstore.com'", 'max_length': '75'}),
            'contact_phone': ('django.db.models.fields.CharField', [], {'default': "''", 'max_length': '128'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '92'}),
            'slug': ('django.db.models.fields.SlugField', [], {'unique': 'True', 'max_length': '92', 'db_index': 'True'}),
            'template_prefix': ('django.db.models.fields.SlugField', [], {'unique': 'True', 'max_length': '92', 'db_index': 'True'}),
            'title': ('django.db.models.fields.CharField', [], {'max_length': '92'})
        },
        'shops.shop': {
            'Meta': {'object_name': 'Shop'},
            'admin': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['auth.User']"}),
            'bids': ('django.db.models.fields.IntegerField', [], {'default': '0'}),
            'date_time': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'location': ('django.db.models.fields.CharField', [], {'default': "'39.29038,-76.61219'", 'max_length': '255'}),
            'marketplace': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['market.MarketPlace']"}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '60'}),
            'views': ('django.db.models.fields.IntegerField', [], {'default': '0'})
        },
        'subscriptions.feature': {
            'Meta': {'object_name': 'Feature'},
            'auctions': ('django.db.models.fields.BooleanField', [], {'default': 'False', 'blank': 'True'}),
            'credit_card': ('django.db.models.fields.BooleanField', [], {'default': 'False', 'blank': 'True'}),
            'custom_dns': ('django.db.models.fields.BooleanField', [], {'default': 'False', 'blank': 'True'}),
            'google_analytics': ('django.db.models.fields.BooleanField', [], {'default': 'False', 'blank': 'True'}),
            'google_checkout': ('django.db.models.fields.BooleanField', [], {'default': 'False', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'mailinglist': ('django.db.models.fields.BooleanField', [], {'default': 'False', 'blank': 'True'}),
            'manual_payment': ('django.db.models.fields.BooleanField', [], {'default': 'False', 'blank': 'True'}),
            'paypal': ('django.db.models.fields.BooleanField', [], {'default': 'False', 'blank': 'True'}),
            'shop': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['shops.Shop']"}),
            'show_attendance': ('django.db.models.fields.BooleanField', [], {'default': 'False', 'blank': 'True'}),
            'wishlist': ('django.db.models.fields.BooleanField', [], {'default': 'False', 'blank': 'True'})
        },
        'subscriptions.featurepayment': {
            'Meta': {'object_name': 'FeaturePayment'},
            'feature': ('django.db.models.fields.CharField', [], {'max_length': '50'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'price': ('django.db.models.fields.DecimalField', [], {'default': '0.0', 'max_digits': '11', 'decimal_places': '2'}),
            'shop': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['shops.Shop']"}),
            'timestamp': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'transaction_id': ('django.db.models.fields.CharField', [], {'max_length': '10'})
        },
        'subscriptions.subscription': {
            'Meta': {'object_name': 'Subscription'},
            'date_time': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'owner': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['users.Profile']"}),
            'plan': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['subscriptions.SubscriptionPlan']"}),
            'status': ('django.db.models.fields.CharField', [], {'default': "'A'", 'max_length': '1'}),
            'subscription_id': ('django.db.models.fields.CharField', [], {'max_length': '6'})
        },
        'subscriptions.subscriptioncancelation': {
            'Meta': {'object_name': 'SubscriptionCancelation'},
            'date_time': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'shop': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['shops.Shop']"}),
            'subscription': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['subscriptions.Subscription']"})
        },
        'subscriptions.subscriptionpayment': {
            'Meta': {'object_name': 'SubscriptionPayment'},
            'amount': ('django.db.models.fields.FloatField', [], {}),
            'datetime': ('django.db.models.fields.DateTimeField', [], {}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'subscription': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['subscriptions.Subscription']"})
        },
        'subscriptions.subscriptionplan': {
            'Meta': {'object_name': 'SubscriptionPlan'},
            'active': ('django.db.models.fields.BooleanField', [], {'default': 'True', 'blank': 'True'}),
            'additional_payment_price': ('django.db.models.fields.DecimalField', [], {'default': '0.0', 'max_digits': '11', 'decimal_places': '2'}),
            'additional_shipping_price': ('django.db.models.fields.DecimalField', [], {'default': '0.0', 'max_digits': '11', 'decimal_places': '2'}),
            'admin_accounts': ('django.db.models.fields.PositiveSmallIntegerField', [], {}),
            'auto_tax_integration': ('django.db.models.fields.BooleanField', [], {'default': 'False', 'blank': 'True'}),
            'billing_period': ('django.db.models.fields.PositiveSmallIntegerField', [], {'default': '1', 'blank': 'True'}),
            'collect_emails': ('django.db.models.fields.DecimalField', [], {'default': '0.0', 'max_digits': '11', 'decimal_places': '2'}),
            'community_support_in_forums': ('django.db.models.fields.BooleanField', [], {'default': 'True', 'blank': 'True'}),
            'community_wish_list': ('django.db.models.fields.DecimalField', [], {'default': '0.0', 'max_digits': '11', 'decimal_places': '2'}),
            'concurrent_auction_items': ('django.db.models.fields.PositiveIntegerField', [], {}),
            'concurrent_store_items': ('django.db.models.fields.PositiveIntegerField', [], {}),
            'create_auctions': ('django.db.models.fields.DecimalField', [], {'default': '0.0', 'max_digits': '11', 'decimal_places': '2'}),
            'custom_domain_name_fee': ('django.db.models.fields.DecimalField', [], {'default': '0.0', 'max_digits': '11', 'decimal_places': '2'}),
            'custom_migration': ('django.db.models.fields.BooleanField', [], {'default': 'False', 'blank': 'True'}),
            'customizable_shipping_rates': ('django.db.models.fields.PositiveSmallIntegerField', [], {'default': '1'}),
            'description': ('django.db.models.fields.TextField', [], {}),
            'email_support_price': ('django.db.models.fields.DecimalField', [], {'default': '0.0', 'max_digits': '11', 'decimal_places': '2'}),
            'google_analytics_support': ('django.db.models.fields.BooleanField', [], {'default': 'False', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'listings_per_month': ('django.db.models.fields.PositiveIntegerField', [], {}),
            'marketplace': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['market.MarketPlace']"}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '255'}),
            'online_help_center': ('django.db.models.fields.BooleanField', [], {'default': 'True', 'blank': 'True'}),
            'payment_methods': ('django.db.models.fields.PositiveSmallIntegerField', [], {}),
            'pictures_per_item': ('django.db.models.fields.PositiveSmallIntegerField', [], {'default': '1'}),
            'pictures_per_lot': ('django.db.models.fields.PositiveSmallIntegerField', [], {'default': '1'}),
            'plan_id': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'price': ('django.db.models.fields.DecimalField', [], {'default': '0.0', 'max_digits': '11', 'decimal_places': '2'}),
            'secret_code': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True', 'blank': 'True'}),
            'shopping_cart': ('django.db.models.fields.BooleanField', [], {'default': 'True', 'blank': 'True'}),
            'show_attendance': ('django.db.models.fields.DecimalField', [], {'default': '0.0', 'max_digits': '11', 'decimal_places': '2'}),
            'total_data_transfer': ('django.db.models.fields.IntegerField', [], {'default': '50'}),
            'total_mbs_storage': ('django.db.models.fields.IntegerField', [], {'default': '50'}),
            'total_store_revenue': ('django.db.models.fields.DecimalField', [], {'max_digits': '11', 'decimal_places': '2'}),
            'trial_period': ('django.db.models.fields.PositiveSmallIntegerField', [], {}),
            'visible': ('django.db.models.fields.BooleanField', [], {'default': 'True', 'blank': 'True'}),
            'voice_support_price': ('django.db.models.fields.DecimalField', [], {'default': '0.0', 'max_digits': '11', 'decimal_places': '2'})
        },
        'users.profile': {
            'Meta': {'object_name': 'Profile'},
            'birth': ('django.db.models.fields.DateField', [], {'null': 'True', 'blank': 'True'}),
            'city': ('django.db.models.fields.CharField', [], {'max_length': '80', 'null': 'True', 'blank': 'True'}),
            'country': ('django.db.models.fields.CharField', [], {'max_length': '50', 'null': 'True', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'phone': ('django.db.models.fields.CharField', [], {'max_length': '50', 'null': 'True', 'blank': 'True'}),
            'photo': ('core.thumbs.ImageWithThumbsField', [], {'max_length': '100'}),
            'state': ('django.db.models.fields.CharField', [], {'max_length': '80', 'null': 'True', 'blank': 'True'}),
            'street_address': ('django.db.models.fields.CharField', [], {'max_length': '80', 'null': 'True', 'blank': 'True'}),
            'user': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['auth.User']", 'unique': 'True'}),
            'zip': ('django.db.models.fields.CharField', [], {'max_length': '30', 'null': 'True', 'blank': 'True'})
        }
    }

    complete_apps = ['subscriptions']

########NEW FILE########
__FILENAME__ = 0007_auto__add_field_subscriptionplan_theme_change__add_field_feature_theme
# encoding: utf-8
import datetime
from south.db import db
from south.v2 import SchemaMigration
from django.db import models

class Migration(SchemaMigration):

    def forwards(self, orm):
        
        # Adding field 'SubscriptionPlan.theme_change'
        db.add_column('subscriptions_subscriptionplan', 'theme_change', self.gf('django.db.models.fields.DecimalField')(default=0.0, max_digits=11, decimal_places=2), keep_default=False)

        # Adding field 'Feature.theme_change'
        db.add_column('subscriptions_feature', 'theme_change', self.gf('django.db.models.fields.BooleanField')(default=False, blank=True), keep_default=False)


    def backwards(self, orm):
        
        # Deleting field 'SubscriptionPlan.theme_change'
        db.delete_column('subscriptions_subscriptionplan', 'theme_change')

        # Deleting field 'Feature.theme_change'
        db.delete_column('subscriptions_feature', 'theme_change')


    models = {
        'auth.group': {
            'Meta': {'object_name': 'Group'},
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '80'}),
            'permissions': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['auth.Permission']", 'symmetrical': 'False', 'blank': 'True'})
        },
        'auth.permission': {
            'Meta': {'unique_together': "(('content_type', 'codename'),)", 'object_name': 'Permission'},
            'codename': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'content_type': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['contenttypes.ContentType']"}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '50'})
        },
        'auth.user': {
            'Meta': {'object_name': 'User'},
            'date_joined': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
            'email': ('django.db.models.fields.EmailField', [], {'max_length': '75'}),
            'first_name': ('django.db.models.fields.CharField', [], {'max_length': '30', 'blank': 'True'}),
            'groups': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['auth.Group']", 'symmetrical': 'False', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'is_active': ('django.db.models.fields.BooleanField', [], {'default': 'True', 'blank': 'True'}),
            'is_staff': ('django.db.models.fields.BooleanField', [], {'default': 'False', 'blank': 'True'}),
            'is_superuser': ('django.db.models.fields.BooleanField', [], {'default': 'False', 'blank': 'True'}),
            'last_login': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
            'last_name': ('django.db.models.fields.CharField', [], {'max_length': '30', 'blank': 'True'}),
            'password': ('django.db.models.fields.CharField', [], {'max_length': '128'}),
            'user_permissions': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['auth.Permission']", 'symmetrical': 'False', 'blank': 'True'}),
            'username': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '32'})
        },
        'contenttypes.contenttype': {
            'Meta': {'unique_together': "(('app_label', 'model'),)", 'object_name': 'ContentType', 'db_table': "'django_content_type'"},
            'app_label': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'model': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '100'})
        },
        'market.marketplace': {
            'Meta': {'object_name': 'MarketPlace'},
            'base_domain': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '128'}),
            'charge_on_card_as': ('django.db.models.fields.CharField', [], {'default': "''", 'max_length': '255'}),
            'contact_email': ('django.db.models.fields.EmailField', [], {'default': "'contact@yourstore.com'", 'max_length': '75'}),
            'contact_phone': ('django.db.models.fields.CharField', [], {'default': "''", 'max_length': '128'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '92'}),
            'slug': ('django.db.models.fields.SlugField', [], {'unique': 'True', 'max_length': '92', 'db_index': 'True'}),
            'template_prefix': ('django.db.models.fields.SlugField', [], {'unique': 'True', 'max_length': '92', 'db_index': 'True'}),
            'title': ('django.db.models.fields.CharField', [], {'max_length': '92'})
        },
        'shops.shop': {
            'Meta': {'object_name': 'Shop'},
            'admin': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['auth.User']"}),
            'bids': ('django.db.models.fields.IntegerField', [], {'default': '0'}),
            'date_time': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'location': ('django.db.models.fields.CharField', [], {'default': "'39.29038,-76.61219'", 'max_length': '255'}),
            'marketplace': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['market.MarketPlace']"}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '60'}),
            'views': ('django.db.models.fields.IntegerField', [], {'default': '0'})
        },
        'subscriptions.feature': {
            'Meta': {'object_name': 'Feature'},
            'auctions': ('django.db.models.fields.BooleanField', [], {'default': 'False', 'blank': 'True'}),
            'credit_card': ('django.db.models.fields.BooleanField', [], {'default': 'False', 'blank': 'True'}),
            'custom_dns': ('django.db.models.fields.BooleanField', [], {'default': 'False', 'blank': 'True'}),
            'google_analytics': ('django.db.models.fields.BooleanField', [], {'default': 'False', 'blank': 'True'}),
            'google_checkout': ('django.db.models.fields.BooleanField', [], {'default': 'False', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'mailinglist': ('django.db.models.fields.BooleanField', [], {'default': 'False', 'blank': 'True'}),
            'manual_payment': ('django.db.models.fields.BooleanField', [], {'default': 'False', 'blank': 'True'}),
            'paypal': ('django.db.models.fields.BooleanField', [], {'default': 'False', 'blank': 'True'}),
            'shop': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['shops.Shop']"}),
            'show_attendance': ('django.db.models.fields.BooleanField', [], {'default': 'False', 'blank': 'True'}),
            'theme_change': ('django.db.models.fields.BooleanField', [], {'default': 'False', 'blank': 'True'}),
            'wishlist': ('django.db.models.fields.BooleanField', [], {'default': 'False', 'blank': 'True'})
        },
        'subscriptions.featurepayment': {
            'Meta': {'object_name': 'FeaturePayment'},
            'feature': ('django.db.models.fields.CharField', [], {'max_length': '50'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'price': ('django.db.models.fields.DecimalField', [], {'default': '0.0', 'max_digits': '11', 'decimal_places': '2'}),
            'shop': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['shops.Shop']"}),
            'timestamp': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'transaction_id': ('django.db.models.fields.CharField', [], {'max_length': '10'})
        },
        'subscriptions.subscription': {
            'Meta': {'object_name': 'Subscription'},
            'date_time': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'owner': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['users.Profile']"}),
            'plan': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['subscriptions.SubscriptionPlan']"}),
            'status': ('django.db.models.fields.CharField', [], {'default': "'A'", 'max_length': '1'}),
            'subscription_id': ('django.db.models.fields.CharField', [], {'max_length': '6'})
        },
        'subscriptions.subscriptioncancelation': {
            'Meta': {'object_name': 'SubscriptionCancelation'},
            'date_time': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'shop': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['shops.Shop']"}),
            'subscription': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['subscriptions.Subscription']"})
        },
        'subscriptions.subscriptionpayment': {
            'Meta': {'object_name': 'SubscriptionPayment'},
            'amount': ('django.db.models.fields.FloatField', [], {}),
            'datetime': ('django.db.models.fields.DateTimeField', [], {}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'subscription': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['subscriptions.Subscription']"})
        },
        'subscriptions.subscriptionplan': {
            'Meta': {'object_name': 'SubscriptionPlan'},
            'active': ('django.db.models.fields.BooleanField', [], {'default': 'True', 'blank': 'True'}),
            'additional_payment_price': ('django.db.models.fields.DecimalField', [], {'default': '0.0', 'max_digits': '11', 'decimal_places': '2'}),
            'additional_shipping_price': ('django.db.models.fields.DecimalField', [], {'default': '0.0', 'max_digits': '11', 'decimal_places': '2'}),
            'admin_accounts': ('django.db.models.fields.PositiveSmallIntegerField', [], {}),
            'auto_tax_integration': ('django.db.models.fields.BooleanField', [], {'default': 'False', 'blank': 'True'}),
            'billing_period': ('django.db.models.fields.PositiveSmallIntegerField', [], {'default': '1', 'blank': 'True'}),
            'collect_emails': ('django.db.models.fields.DecimalField', [], {'default': '0.0', 'max_digits': '11', 'decimal_places': '2'}),
            'community_support_in_forums': ('django.db.models.fields.BooleanField', [], {'default': 'True', 'blank': 'True'}),
            'community_wish_list': ('django.db.models.fields.DecimalField', [], {'default': '0.0', 'max_digits': '11', 'decimal_places': '2'}),
            'concurrent_auction_items': ('django.db.models.fields.PositiveIntegerField', [], {}),
            'concurrent_store_items': ('django.db.models.fields.PositiveIntegerField', [], {}),
            'create_auctions': ('django.db.models.fields.DecimalField', [], {'default': '0.0', 'max_digits': '11', 'decimal_places': '2'}),
            'custom_domain_name_fee': ('django.db.models.fields.DecimalField', [], {'default': '0.0', 'max_digits': '11', 'decimal_places': '2'}),
            'custom_migration': ('django.db.models.fields.BooleanField', [], {'default': 'False', 'blank': 'True'}),
            'customizable_shipping_rates': ('django.db.models.fields.PositiveSmallIntegerField', [], {'default': '1'}),
            'description': ('django.db.models.fields.TextField', [], {}),
            'email_support_price': ('django.db.models.fields.DecimalField', [], {'default': '0.0', 'max_digits': '11', 'decimal_places': '2'}),
            'google_analytics_support': ('django.db.models.fields.BooleanField', [], {'default': 'False', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'listings_per_month': ('django.db.models.fields.PositiveIntegerField', [], {}),
            'marketplace': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['market.MarketPlace']"}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '255'}),
            'online_help_center': ('django.db.models.fields.BooleanField', [], {'default': 'True', 'blank': 'True'}),
            'payment_methods': ('django.db.models.fields.PositiveSmallIntegerField', [], {}),
            'pictures_per_item': ('django.db.models.fields.PositiveSmallIntegerField', [], {'default': '1'}),
            'pictures_per_lot': ('django.db.models.fields.PositiveSmallIntegerField', [], {'default': '1'}),
            'plan_id': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'price': ('django.db.models.fields.DecimalField', [], {'default': '0.0', 'max_digits': '11', 'decimal_places': '2'}),
            'secret_code': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True', 'blank': 'True'}),
            'shopping_cart': ('django.db.models.fields.BooleanField', [], {'default': 'True', 'blank': 'True'}),
            'show_attendance': ('django.db.models.fields.DecimalField', [], {'default': '0.0', 'max_digits': '11', 'decimal_places': '2'}),
            'theme_change': ('django.db.models.fields.DecimalField', [], {'default': '0.0', 'max_digits': '11', 'decimal_places': '2'}),
            'total_data_transfer': ('django.db.models.fields.IntegerField', [], {'default': '50'}),
            'total_mbs_storage': ('django.db.models.fields.IntegerField', [], {'default': '50'}),
            'total_store_revenue': ('django.db.models.fields.DecimalField', [], {'max_digits': '11', 'decimal_places': '2'}),
            'trial_period': ('django.db.models.fields.PositiveSmallIntegerField', [], {}),
            'visible': ('django.db.models.fields.BooleanField', [], {'default': 'True', 'blank': 'True'}),
            'voice_support_price': ('django.db.models.fields.DecimalField', [], {'default': '0.0', 'max_digits': '11', 'decimal_places': '2'})
        },
        'users.profile': {
            'Meta': {'object_name': 'Profile'},
            'birth': ('django.db.models.fields.DateField', [], {'null': 'True', 'blank': 'True'}),
            'city': ('django.db.models.fields.CharField', [], {'max_length': '80', 'null': 'True', 'blank': 'True'}),
            'country': ('django.db.models.fields.CharField', [], {'max_length': '50', 'null': 'True', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'phone': ('django.db.models.fields.CharField', [], {'max_length': '50', 'null': 'True', 'blank': 'True'}),
            'photo': ('core.thumbs.ImageWithThumbsField', [], {'max_length': '100'}),
            'state': ('django.db.models.fields.CharField', [], {'max_length': '80', 'null': 'True', 'blank': 'True'}),
            'street_address': ('django.db.models.fields.CharField', [], {'max_length': '80', 'null': 'True', 'blank': 'True'}),
            'user': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['auth.User']", 'unique': 'True'}),
            'zip': ('django.db.models.fields.CharField', [], {'max_length': '30', 'null': 'True', 'blank': 'True'})
        }
    }

    complete_apps = ['subscriptions']

########NEW FILE########
__FILENAME__ = 0008_auto__add_field_subscriptionplan_add_new_pages__add_field_feature_add_
# encoding: utf-8
import datetime
from south.db import db
from south.v2 import SchemaMigration
from django.db import models

class Migration(SchemaMigration):

    def forwards(self, orm):
        
        # Adding field 'SubscriptionPlan.add_new_pages'
        db.add_column('subscriptions_subscriptionplan', 'add_new_pages', self.gf('django.db.models.fields.DecimalField')(default=0.0, max_digits=11, decimal_places=2), keep_default=False)

        # Adding field 'Feature.add_new_pages'
        db.add_column('subscriptions_feature', 'add_new_pages', self.gf('django.db.models.fields.BooleanField')(default=False, blank=True), keep_default=False)


    def backwards(self, orm):
        
        # Deleting field 'SubscriptionPlan.add_new_pages'
        db.delete_column('subscriptions_subscriptionplan', 'add_new_pages')

        # Deleting field 'Feature.add_new_pages'
        db.delete_column('subscriptions_feature', 'add_new_pages')


    models = {
        'auth.group': {
            'Meta': {'object_name': 'Group'},
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '80'}),
            'permissions': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['auth.Permission']", 'symmetrical': 'False', 'blank': 'True'})
        },
        'auth.permission': {
            'Meta': {'unique_together': "(('content_type', 'codename'),)", 'object_name': 'Permission'},
            'codename': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'content_type': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['contenttypes.ContentType']"}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '50'})
        },
        'auth.user': {
            'Meta': {'object_name': 'User'},
            'date_joined': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
            'email': ('django.db.models.fields.EmailField', [], {'max_length': '75', 'blank': 'True'}),
            'first_name': ('django.db.models.fields.CharField', [], {'max_length': '30', 'blank': 'True'}),
            'groups': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['auth.Group']", 'symmetrical': 'False', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'is_active': ('django.db.models.fields.BooleanField', [], {'default': 'True', 'blank': 'True'}),
            'is_staff': ('django.db.models.fields.BooleanField', [], {'default': 'False', 'blank': 'True'}),
            'is_superuser': ('django.db.models.fields.BooleanField', [], {'default': 'False', 'blank': 'True'}),
            'last_login': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
            'last_name': ('django.db.models.fields.CharField', [], {'max_length': '30', 'blank': 'True'}),
            'password': ('django.db.models.fields.CharField', [], {'max_length': '128'}),
            'user_permissions': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['auth.Permission']", 'symmetrical': 'False', 'blank': 'True'}),
            'username': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '30'})
        },
        'contenttypes.contenttype': {
            'Meta': {'unique_together': "(('app_label', 'model'),)", 'object_name': 'ContentType', 'db_table': "'django_content_type'"},
            'app_label': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'model': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '100'})
        },
        'market.marketplace': {
            'Meta': {'object_name': 'MarketPlace'},
            'base_domain': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '128'}),
            'charge_on_card_as': ('django.db.models.fields.CharField', [], {'default': "''", 'max_length': '255'}),
            'contact_email': ('django.db.models.fields.EmailField', [], {'default': "'contact@yourstore.com'", 'max_length': '75'}),
            'contact_phone': ('django.db.models.fields.CharField', [], {'default': "''", 'max_length': '128'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '92'}),
            'slug': ('django.db.models.fields.SlugField', [], {'unique': 'True', 'max_length': '92', 'db_index': 'True'}),
            'template_prefix': ('django.db.models.fields.SlugField', [], {'unique': 'True', 'max_length': '92', 'db_index': 'True'}),
            'title': ('django.db.models.fields.CharField', [], {'max_length': '92'})
        },
        'shops.shop': {
            'Meta': {'object_name': 'Shop'},
            'admin': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['auth.User']"}),
            'bids': ('django.db.models.fields.IntegerField', [], {'default': '0'}),
            'date_time': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'last_date_to_change_layout': ('django.db.models.fields.DateTimeField', [], {'null': 'True', 'blank': 'True'}),
            'last_date_to_post': ('django.db.models.fields.DateTimeField', [], {'null': 'True', 'blank': 'True'}),
            'location': ('django.db.models.fields.CharField', [], {'default': "'39.29038,-76.61219'", 'max_length': '255'}),
            'marketplace': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['market.MarketPlace']"}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '60'}),
            'views': ('django.db.models.fields.IntegerField', [], {'default': '0'})
        },
        'subscriptions.feature': {
            'Meta': {'object_name': 'Feature'},
            'add_new_pages': ('django.db.models.fields.BooleanField', [], {'default': 'False', 'blank': 'True'}),
            'auctions': ('django.db.models.fields.BooleanField', [], {'default': 'False', 'blank': 'True'}),
            'credit_card': ('django.db.models.fields.BooleanField', [], {'default': 'False', 'blank': 'True'}),
            'custom_dns': ('django.db.models.fields.BooleanField', [], {'default': 'False', 'blank': 'True'}),
            'google_analytics': ('django.db.models.fields.BooleanField', [], {'default': 'False', 'blank': 'True'}),
            'google_checkout': ('django.db.models.fields.BooleanField', [], {'default': 'False', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'mailinglist': ('django.db.models.fields.BooleanField', [], {'default': 'False', 'blank': 'True'}),
            'manual_payment': ('django.db.models.fields.BooleanField', [], {'default': 'False', 'blank': 'True'}),
            'paypal': ('django.db.models.fields.BooleanField', [], {'default': 'False', 'blank': 'True'}),
            'shop': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['shops.Shop']"}),
            'show_attendance': ('django.db.models.fields.BooleanField', [], {'default': 'False', 'blank': 'True'}),
            'theme_change': ('django.db.models.fields.BooleanField', [], {'default': 'False', 'blank': 'True'}),
            'wishlist': ('django.db.models.fields.BooleanField', [], {'default': 'False', 'blank': 'True'})
        },
        'subscriptions.featurepayment': {
            'Meta': {'object_name': 'FeaturePayment'},
            'feature': ('django.db.models.fields.CharField', [], {'max_length': '50'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'price': ('django.db.models.fields.DecimalField', [], {'default': '0.0', 'max_digits': '11', 'decimal_places': '2'}),
            'shop': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['shops.Shop']"}),
            'timestamp': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'transaction_id': ('django.db.models.fields.CharField', [], {'max_length': '10'})
        },
        'subscriptions.subscription': {
            'Meta': {'object_name': 'Subscription'},
            'date_time': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'owner': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['users.Profile']"}),
            'plan': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['subscriptions.SubscriptionPlan']"}),
            'status': ('django.db.models.fields.CharField', [], {'default': "'A'", 'max_length': '1'}),
            'subscription_id': ('django.db.models.fields.CharField', [], {'max_length': '6'})
        },
        'subscriptions.subscriptioncancelation': {
            'Meta': {'object_name': 'SubscriptionCancelation'},
            'date_time': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'shop': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['shops.Shop']"}),
            'subscription': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['subscriptions.Subscription']"})
        },
        'subscriptions.subscriptionpayment': {
            'Meta': {'object_name': 'SubscriptionPayment'},
            'amount': ('django.db.models.fields.FloatField', [], {}),
            'datetime': ('django.db.models.fields.DateTimeField', [], {}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'subscription': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['subscriptions.Subscription']"})
        },
        'subscriptions.subscriptionplan': {
            'Meta': {'object_name': 'SubscriptionPlan'},
            'active': ('django.db.models.fields.BooleanField', [], {'default': 'True', 'blank': 'True'}),
            'add_new_pages': ('django.db.models.fields.DecimalField', [], {'default': '0.0', 'max_digits': '11', 'decimal_places': '2'}),
            'additional_payment_price': ('django.db.models.fields.DecimalField', [], {'default': '0.0', 'max_digits': '11', 'decimal_places': '2'}),
            'additional_shipping_price': ('django.db.models.fields.DecimalField', [], {'default': '0.0', 'max_digits': '11', 'decimal_places': '2'}),
            'admin_accounts': ('django.db.models.fields.PositiveSmallIntegerField', [], {}),
            'auto_tax_integration': ('django.db.models.fields.BooleanField', [], {'default': 'False', 'blank': 'True'}),
            'billing_period': ('django.db.models.fields.PositiveSmallIntegerField', [], {'default': '1', 'blank': 'True'}),
            'collect_emails': ('django.db.models.fields.DecimalField', [], {'default': '0.0', 'max_digits': '11', 'decimal_places': '2'}),
            'community_support_in_forums': ('django.db.models.fields.BooleanField', [], {'default': 'True', 'blank': 'True'}),
            'community_wish_list': ('django.db.models.fields.DecimalField', [], {'default': '0.0', 'max_digits': '11', 'decimal_places': '2'}),
            'concurrent_auction_items': ('django.db.models.fields.PositiveIntegerField', [], {}),
            'concurrent_store_items': ('django.db.models.fields.PositiveIntegerField', [], {}),
            'create_auctions': ('django.db.models.fields.DecimalField', [], {'default': '0.0', 'max_digits': '11', 'decimal_places': '2'}),
            'custom_domain_name_fee': ('django.db.models.fields.DecimalField', [], {'default': '0.0', 'max_digits': '11', 'decimal_places': '2'}),
            'custom_migration': ('django.db.models.fields.BooleanField', [], {'default': 'False', 'blank': 'True'}),
            'customizable_shipping_rates': ('django.db.models.fields.PositiveSmallIntegerField', [], {'default': '1'}),
            'description': ('django.db.models.fields.TextField', [], {}),
            'email_support_price': ('django.db.models.fields.DecimalField', [], {'default': '0.0', 'max_digits': '11', 'decimal_places': '2'}),
            'google_analytics_support': ('django.db.models.fields.BooleanField', [], {'default': 'False', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'listings_per_month': ('django.db.models.fields.PositiveIntegerField', [], {}),
            'marketplace': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['market.MarketPlace']"}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '255'}),
            'online_help_center': ('django.db.models.fields.BooleanField', [], {'default': 'True', 'blank': 'True'}),
            'payment_methods': ('django.db.models.fields.PositiveSmallIntegerField', [], {}),
            'pictures_per_item': ('django.db.models.fields.PositiveSmallIntegerField', [], {'default': '1'}),
            'pictures_per_lot': ('django.db.models.fields.PositiveSmallIntegerField', [], {'default': '1'}),
            'plan_id': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'price': ('django.db.models.fields.DecimalField', [], {'default': '0.0', 'max_digits': '11', 'decimal_places': '2'}),
            'secret_code': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True', 'blank': 'True'}),
            'shopping_cart': ('django.db.models.fields.BooleanField', [], {'default': 'True', 'blank': 'True'}),
            'show_attendance': ('django.db.models.fields.DecimalField', [], {'default': '0.0', 'max_digits': '11', 'decimal_places': '2'}),
            'theme_change': ('django.db.models.fields.DecimalField', [], {'default': '0.0', 'max_digits': '11', 'decimal_places': '2'}),
            'total_data_transfer': ('django.db.models.fields.IntegerField', [], {'default': '50'}),
            'total_mbs_storage': ('django.db.models.fields.IntegerField', [], {'default': '50'}),
            'total_store_revenue': ('django.db.models.fields.DecimalField', [], {'max_digits': '11', 'decimal_places': '2'}),
            'trial_period': ('django.db.models.fields.PositiveSmallIntegerField', [], {}),
            'visible': ('django.db.models.fields.BooleanField', [], {'default': 'True', 'blank': 'True'}),
            'voice_support_price': ('django.db.models.fields.DecimalField', [], {'default': '0.0', 'max_digits': '11', 'decimal_places': '2'})
        },
        'users.profile': {
            'Meta': {'object_name': 'Profile'},
            'birth': ('django.db.models.fields.DateField', [], {'null': 'True', 'blank': 'True'}),
            'city': ('django.db.models.fields.CharField', [], {'max_length': '80', 'null': 'True', 'blank': 'True'}),
            'country': ('django.db.models.fields.CharField', [], {'max_length': '50', 'null': 'True', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'phone': ('django.db.models.fields.CharField', [], {'max_length': '50', 'null': 'True', 'blank': 'True'}),
            'photo': ('core.thumbs.ImageWithThumbsField', [], {'max_length': '100'}),
            'state': ('django.db.models.fields.CharField', [], {'max_length': '80', 'null': 'True', 'blank': 'True'}),
            'street_address': ('django.db.models.fields.CharField', [], {'max_length': '80', 'null': 'True', 'blank': 'True'}),
            'user': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['auth.User']", 'unique': 'True'}),
            'zip': ('django.db.models.fields.CharField', [], {'max_length': '30', 'null': 'True', 'blank': 'True'})
        }
    }

    complete_apps = ['subscriptions']

########NEW FILE########
__FILENAME__ = models
import logging

from django.db import models 
from django.utils.translation import ugettext_lazy as _

from users.models import Profile
from market.models import MarketPlace
from shops.models import Shop

SUBSCRIPTION_STATUS = [
    ('A', _('Active')),    
    ('I', _('Inactive')),
    ('C', _('Canceled')),
]

    
#This class is a singleton & must be created only for the admin
class SubscriptionPlan(models.Model):
    #This properties should have the same values than the braintree plans
    marketplace = models.ForeignKey(MarketPlace) 
    plan_id = models.CharField(max_length=100) #Is the Plan ID field filled by plan creator
    name = models.CharField(max_length=255)
    description = models.TextField()
    trial_period = models.PositiveSmallIntegerField()
    price = models.DecimalField(max_digits=11, decimal_places=2, default=0.0)
    billing_period = models.PositiveSmallIntegerField(blank=True, default=1)
    
    #Plan Features
    total_store_revenue = models.DecimalField(max_digits=11, decimal_places=2, default=1000)
    concurrent_store_items = models.PositiveIntegerField(default=100) 
    concurrent_auction_items = models.PositiveIntegerField(default=100)
    listings_per_month = models.PositiveIntegerField(default=30)
    payment_methods = models.PositiveSmallIntegerField(default=4)
    additional_payment_price = models.DecimalField(max_digits=11, decimal_places=2, default=0.0)
    pictures_per_lot = models.PositiveSmallIntegerField(default=1)
    pictures_per_item = models.PositiveSmallIntegerField(default=1)
    #Storage features
    total_mbs_storage = models.IntegerField(default=50)        
    total_data_transfer = models.IntegerField(default=50)
    #General Features
    admin_accounts = models.PositiveSmallIntegerField(default=1)
    auto_tax_integration = models.BooleanField(default=False)
    custom_migration = models.BooleanField(default=False)
    custom_domain_name_fee = models.DecimalField(max_digits=11, decimal_places=2, default=0.0) #Fee
    active = models.BooleanField(default=True)
    visible = models.BooleanField(default=True)
    secret_code = models.CharField(max_length=255, blank=True, null=True)
    theme_change = models.DecimalField(max_digits=11, decimal_places=2, default=0.0) #One Time
    add_new_pages = models.DecimalField(max_digits=11, decimal_places=2, default=0.0) #One Time
    #Support features
    community_support_in_forums = models.BooleanField(default=True) #Yes
    voice_support_price = models.DecimalField(max_digits=11, decimal_places=2, default=0.0) #Per Incident
    email_support_price = models.DecimalField(max_digits=11, decimal_places=2, default=0.0) #Per incident
    online_help_center = models.BooleanField(default=True) #Yes 
    #Marketing features
    google_analytics_support = models.BooleanField(default=False)
    community_wish_list = models.DecimalField(max_digits=11, decimal_places=2, default=0.0) #One Time Fee
    collect_emails = models.DecimalField(max_digits=11, decimal_places=2, default=0.0) #One Time Fee
    shopping_cart = models.BooleanField(default=True) #Yes
    create_auctions = models.DecimalField(max_digits=11, decimal_places=2, default=0.0) #One Time Fee
    show_attendance = models.DecimalField(max_digits=11, decimal_places=2, default=0.0) #Per Show
    #Shipping features
    customizable_shipping_rates = models.PositiveSmallIntegerField(default=1) #Amount of methods
    additional_shipping_price = models.DecimalField(max_digits=11, decimal_places=2, default=0.0) #Per Shipping Rate
    #Admin logins grandfather, date for effect (future), sandbox testing, ability to model revenue based on current subscriber base.??
     
    def delete(self):
        self.active = False
        self.save()
        for subscription in self.subscription_set.all():
            subscription.status = 'I'
            subscription.save()
        
    
    def __unicode__(self):
        return "%s > %s <%s> (%s)" % (self.marketplace, self.name, self.plan_id, "ACTIVE" if self.active else "INACTIVE")
    
    def has_trial_period(self):
        return self.trial_period != 0
    
    def get_limit(self, key):
        """ Return the plan limit for an specific attribute """
        try:
            value = getattr(self, key)
            return value
        except AttributeError:
            logging.critical("SubscriptionPlan instance have not %s attribute" % key)
        
class Subscription(models.Model):
    owner = models.ForeignKey(Profile)
    subscription_id = models.CharField(max_length=6) #This ID is the id returned by braintree when executes create_subcription. It suppose to return a 4-character alphanumeric ID
    plan = models.ForeignKey(SubscriptionPlan)
    status = models.CharField(max_length=1,choices=SUBSCRIPTION_STATUS, default='A')
    date_time = models.DateTimeField(auto_now_add=True)
    
    def save(self, *args, **kwargs):
        """ This is done to get updated the shop.active property """
        super(Subscription, self).save(*args, **kwargs)
        shop = Shop.objects.all().filter(admin=self.owner.user).get()
        shop.save()
        
    def __str__(self):
        return "%s (Status=%s, Plan=%s)" % (self.owner.user, self.status, self.plan.name)
         
    def delete(self):
        """ Set ths Subscription Status as inactive! Shop Site will not be accesible """
        self.status = 'I'
        self.save()
    
    def get_status(self):
        for (a,b) in SUBSCRIPTION_STATUS:
            if self.status == a: return b
        return "unknown"
     
    def first_bill_date(self):
        pass
    
    def next_bill_date(self):
        pass
    
    def is_active(self):
        return self.status == "A"
        
    def extra_data(self):
        """ 
        This function uses the gateway to get additional information stored in braintree servers 
        
        Subscription object
        ---------------------
        add_ons
        balance
        billing_day_of_month
        billing_period_end_date   
        billing_period_start_date price
        cancel
        create            
        create_signature
        days_past_due
        discounts trial_duration
        failure_count
        find        
        first_billing_date
        gateway
        id
        merchant_account_id      
        number_of_billing_cycles
        next_billing_date
        paid_through_date
        payment_method_token
        plan_id
        price
        status
        retryCharge
        transactions
        trial_duration_unit
        trial_period
        trial_duration        
        update_signature
        verify_keys
        
        @return: [billing_period_start_date, billing_period_end_date, next_billing_date, price, transactions]
        """
        from django.conf import settings
        from payments.gateways.braintreegw import BraintreeGateway 
        gw = BraintreeGateway(settings.MERCHANT_ID, settings.PUBLIC_KEY, settings.PRIVATE_KEY)
        subscription = gw.get_subscription_details(self.subscription_id)
        return [
            subscription.billing_period_start_date, #0 
            subscription.billing_period_end_date,   #1
            subscription.next_billing_date,         #2
            subscription.price,                     #3
            subscription.transactions,              #4
            subscription.status,                    #5
            subscription.balance,                   #6
            subscription.payment_method_token,      #7     
            subscription.transactions,              #8
        ]

                
class SubscriptionPayment(models.Model):
    subscription = models.ForeignKey(Subscription)
    datetime = models.DateTimeField()
    amount = models.FloatField()
    
class SubscriptionCancelation(models.Model):
    shop = models.ForeignKey(Shop)
    subscription = models.ForeignKey(Subscription)
    date_time = models.DateTimeField(auto_now_add=True)
    
class Feature(models.Model):
    shop = models.ForeignKey(Shop)
    auctions = models.BooleanField()
    wishlist = models.BooleanField()
    mailinglist = models.BooleanField()
    google_analytics = models.BooleanField()
    show_attendance = models.BooleanField()
    custom_dns = models.BooleanField()
    paypal = models.BooleanField(default=False)
    google_checkout = models.BooleanField(default=False)
    credit_card = models.BooleanField(default=False)
    manual_payment = models.BooleanField(default=False)
    theme_change = models.BooleanField(default=False)
    add_new_pages = models.BooleanField(default=False)
    
    def __str__(self):
        return "%s features" % self.shop
    
class FeaturePayment(models.Model):
    shop = models.ForeignKey(Shop)
    transaction_id = models.CharField(max_length=10)
    price = models.DecimalField(max_digits=11, decimal_places=2, default=0.0)
    feature = models.CharField(max_length=50)
    timestamp = models.DateTimeField(auto_now_add=True)
    
    def __str__(self):
        return "%s > %s" % (self.shop, self.feature)
    
class FeaturesManager():
    
    @classmethod
    def get_feature_description(cls, feature):
        
        if feature == "auctions":
            return ("Auctions", "Auctions give your customers the capability to purchase products via lots ...")
        elif feature == "wishlist":
            return ("Wish List", "Wish List feature lets you to contact with user's special wish.")
        elif feature == "mailinglist":
            return ("Collect Mailing List", "This feature lets you collect email from your customers for creating newsletter (per ex.).")
        elif feature == "google_analytics":
            return ("Google Analytics", "This feature lets you to track your site")
        elif feature == "show_attendance":
            return ("Show Listing", "This feature allows your customers to know where you will be.")
        elif feature == "custom_dns":
            return ("Custom DNS", "Lets you customize your domain.")
        elif feature == "credit_card":
            return ("Credit Cards","This feature lets your customers to pay with their credits card.")
        elif feature == "paypal":
            return ("PayPal","This feature enables the paypal gateway and lets your customers to pay with one of the most famous online payment gateway.")
        elif feature == "google_checkout":
            return ("Google Checkout","This feature allows your customer to pay with the online payment processing service provided by Google aimed at simplifying the process of paying for online purchases.")
        elif feature == "manual_payment":
            return ("Manual Payments","This feature allow your customers to pay you manually.")
        elif feature == "theme_change":
            return ("Theme Change","This feature allows you to change the theme of your shop whenever you want.")
        elif feature == "voice_support":
            return ("Voice Support","...")
        elif feature == "email_support":
            return ("Email Support","...")
        elif feature == "add_pages":
            return ("Add New Pages","This feature allows you to add new pages to your site and customize as you want")
        return ("Unknown Feature", "")
        
    @classmethod
    def get_feature_price(cls, shop, feature):
        
        if feature == "auctions":
            return shop.auctions_feature_price()
        elif feature == "wishlist":
            return shop.wishlist_feature_price()
        elif feature == "mailinglist":
            return shop.mailinglist_feature_price()
        elif feature == "google_analytics":
            return shop.analytics_feature_price()
        elif feature == "show_attendance":
            return shop.shows_feature_price()
        elif feature == "custom_dns":
            return shop.dns_feature_price()    
        elif feature == "theme_change":
            return shop.theme_change_feature_price()
        elif feature == "voice_support":
            return shop.voice_support_price()
        elif feature == "email_support":
            return shop.email_support_price()
        elif feature == "add_pages":
            return shop.add_pages_feature_price()
        elif feature in ["credit_card", "paypal","google_checkout", "manual_payment"]:
            return shop.additional_payment_feature_price()
        
        return "0.0"
    
    @classmethod
    def set_feature_enabled(cls, shop, feature):
        shop_features = shop.get_features()
        
        if feature == "auctions":
            shop_features.auctions = True
        elif feature == "wishlist":
            shop_features.wishlist = True
        elif feature == "mailinglist":
            shop_features.mailinglist = True
        elif feature == "google_analytics":
            shop_features.google_analytics = True
        elif feature == "show_attendance":
            shop_features.show_attendance = True        
        elif feature == "custom_dns":
            shop_features.custom_dns = True
        elif feature == "paypal":
            shop_features.paypal = True
        elif feature == "google_checkout":
            shop_features.google_checkout = True
        elif feature == "credit_card":
            shop_features.credit_card = True    
        elif feature == "manual_payment":
            shop_features.manual_payment = True
        elif feature == "theme_change":
            shop_features.theme_change = True
        elif feature == "add_pages":
            shop_features.add_new_pages = True
        shop_features.save()
        
########NEW FILE########
__FILENAME__ = urls
from django.conf.urls.defaults import *

urlpatterns = patterns('',
        url(r'^plans/$', 'subscriptions.views.shop_subscription_plans', name='subscription_plans'),
        url(r'^overview/$', 'subscriptions.views.shop_subscription_overview', name='subscription_overview'),
        url(r'^billing/$', 'subscriptions.views.shop_billing', name='billing_overview'),
        url(r'^billing/update/$', 'subscriptions.views.shop_billing_update_credit_card', name='billing_update_credit_card'),
        url(r'^purchases/$', 'subscriptions.views.shop_purchases', name='purchases_overview'),
)
########NEW FILE########
__FILENAME__ = views
import logging


from django.http import HttpResponse, HttpResponseRedirect
from django.core.urlresolvers import reverse
from subscriptions.models import SubscriptionPlan
from django.shortcuts import render_to_response
from django.template.context import RequestContext

from core.decorators import shop_admin_required


def subscription_plans(request):
    plans = SubscriptionPlan.objects.filter(active=True).filter(visible=True)   
    return render_to_response("shops/pricing.html", {'plans' : plans}, RequestContext(request))

@shop_admin_required 
def shop_subscription_overview(request):
    from subscriptions.models import Subscription
    
    shop = request.shop
    profile = shop.admin.get_profile()
    try:
        subscription = Subscription.objects.filter(owner=profile).get()
    except Subscription.DoesNotExist:
        subscription = None
    
    return render_to_response('store_admin/account/subscription_overview.html', {'subscription' : subscription}, 
                              RequestContext(request))


@shop_admin_required 
def shop_subscription_plans(request):
    from subscriptions.models import SubscriptionPlan
    plans = SubscriptionPlan.objects.filter(active=True).filter(visible=True)
    
    return render_to_response('store_admin/account/subscription_plans.html', {'plans': plans}, 
                              RequestContext(request))

@shop_admin_required 
def shop_billing(request):
    shop = request.shop
    credit_card = shop.billing_info().credit_card()
    return render_to_response('store_admin/account/billing_overview.html', {'credit_card' : credit_card}, 
                              RequestContext(request))

@shop_admin_required
def shop_billing_update_credit_card(request):
    from django.conf import settings
    from store_admin.forms import CreditCardForm
    from payments.gateways.braintreegw import BraintreeGateway
    
    shop = request.shop
    form = CreditCardForm(request.POST or None)
    error_message = None
    if request.method == "POST":
        if form.is_valid():
            gw = BraintreeGateway(settings.MERCHANT_ID, settings.PUBLIC_KEY, settings.PRIVATE_KEY)
            
            customer_id = shop.billing_info().customer_id
            cc_cardholder = form.cleaned_data['card_holder_name']
            cc_number = form.cleaned_data['card_number']
            cc_expiration_date = form.cleaned_data['expiration_date']
            cc_security_number = form.cleaned_data['security_number']
            result = gw.new_customer_credit_card(customer_id, cc_cardholder, cc_number, cc_expiration_date, cc_security_number)
            
            if result.is_success:
                request.flash['message'] = "Your credit card information was successfully updated!"
                request.flash['severity'] = "success"
                return HttpResponseRedirect(reverse("billing_overview"))  
            else:
                error_message = result.message or "No error message available"
                
    params = {'form': form, 'error_message': error_message}
    return render_to_response('store_admin/account/billing_update_credit_card.html', params, RequestContext(request))

@shop_admin_required
def shop_purchases(request):
    from subscriptions.models import FeaturePayment
    
    shop = request.shop
    
    purchases = FeaturePayment.objects.filter(shop=shop).order_by("-timestamp")
    
    return render_to_response('store_admin/account/purchases_overview.html', {'purchases':purchases}, RequestContext(request))
########NEW FILE########
__FILENAME__ = admin
from models import *
from django.contrib import admin
from reversion.admin import VersionAdmin

admin.site.register(Theme)
#admin.site.register(Template)
admin.site.register(Asset)
admin.site.register(AssetRendering)


class TemplateAdmin(VersionAdmin):
    pass

admin.site.register(Template, TemplateAdmin)
########NEW FILE########
__FILENAME__ = forms
import re

from django.forms import ModelForm
from django import forms

from models import Template, Asset, UPLOAD_DIR
from render import render_asset

IMPORT_DIR = 'import'

class TemplateForm(ModelForm):
    class Meta:
        model = Template
        fields= ['text']

class AssetForm(ModelForm):
    class Meta:
        model = Asset
        fields= ['file']
    
    def save(self, commit=True):
        asset = super(AssetForm, self).save(commit=False)
        name = self.instance.file.name
        asset.name = re.sub(UPLOAD_DIR+'/','',name)
        if commit:
            asset.save()
        return asset
        
        
class AssetEditForm(forms.Form):
    text = forms.CharField(widget=forms.Textarea)
    
    def __init__(self, shop=None, request=None, *args, **kwargs):
        self.shop = shop
        super(AssetEditForm, self).__init__(*args, **kwargs)
        
    
    def clean_text(self):
        text = self.cleaned_data['text']
        try:
            render_asset(text, self.shop)
        except (Exception), e:
            raise forms.ValidationError(e)
        return text


class ThemeImportForm(forms.Form):
    file = forms.FileField()


########NEW FILE########
__FILENAME__ = 0001_initial
# encoding: utf-8
import datetime
from south.db import db
from south.v2 import SchemaMigration
from django.db import models

class Migration(SchemaMigration):

    def forwards(self, orm):
        
        # Adding model 'Theme'
        db.create_table('themes_theme', (
            ('id', self.gf('django.db.models.fields.AutoField')(primary_key=True)),
            ('shop', self.gf('django.db.models.fields.related.OneToOneField')(to=orm['shops.Shop'], unique=True)),
        ))
        db.send_create_signal('themes', ['Theme'])

        # Adding model 'Template'
        db.create_table('themes_template', (
            ('id', self.gf('django.db.models.fields.AutoField')(primary_key=True)),
            ('theme', self.gf('django.db.models.fields.related.ForeignKey')(to=orm['themes.Theme'])),
            ('name', self.gf('django.db.models.fields.CharField')(max_length=60)),
            ('last_updated', self.gf('django.db.models.fields.DateTimeField')(auto_now=True, blank=True)),
            ('text', self.gf('django.db.models.fields.TextField')()),
        ))
        db.send_create_signal('themes', ['Template'])

        # Adding model 'Asset'
        db.create_table('themes_asset', (
            ('id', self.gf('django.db.models.fields.AutoField')(primary_key=True)),
            ('theme', self.gf('django.db.models.fields.related.ForeignKey')(to=orm['themes.Theme'])),
            ('file', self.gf('django.db.models.fields.files.FileField')(max_length=100)),
            ('last_updated', self.gf('django.db.models.fields.DateTimeField')(auto_now=True, blank=True)),
            ('name', self.gf('django.db.models.fields.CharField')(max_length=60)),
        ))
        db.send_create_signal('themes', ['Asset'])

        # Adding model 'AssetRendering'
        db.create_table('themes_assetrendering', (
            ('id', self.gf('django.db.models.fields.AutoField')(primary_key=True)),
            ('asset', self.gf('django.db.models.fields.related.OneToOneField')(to=orm['themes.Asset'], unique=True)),
            ('file', self.gf('django.db.models.fields.files.FileField')(max_length=100)),
        ))
        db.send_create_signal('themes', ['AssetRendering'])


    def backwards(self, orm):
        
        # Deleting model 'Theme'
        db.delete_table('themes_theme')

        # Deleting model 'Template'
        db.delete_table('themes_template')

        # Deleting model 'Asset'
        db.delete_table('themes_asset')

        # Deleting model 'AssetRendering'
        db.delete_table('themes_assetrendering')


    models = {
        'auth.group': {
            'Meta': {'object_name': 'Group'},
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '80'}),
            'permissions': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['auth.Permission']", 'symmetrical': 'False', 'blank': 'True'})
        },
        'auth.permission': {
            'Meta': {'unique_together': "(('content_type', 'codename'),)", 'object_name': 'Permission'},
            'codename': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'content_type': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['contenttypes.ContentType']"}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '50'})
        },
        'auth.user': {
            'Meta': {'object_name': 'User'},
            'date_joined': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
            'email': ('django.db.models.fields.EmailField', [], {'max_length': '75'}),
            'first_name': ('django.db.models.fields.CharField', [], {'max_length': '30', 'blank': 'True'}),
            'groups': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['auth.Group']", 'symmetrical': 'False', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'is_active': ('django.db.models.fields.BooleanField', [], {'default': 'True', 'blank': 'True'}),
            'is_staff': ('django.db.models.fields.BooleanField', [], {'default': 'False', 'blank': 'True'}),
            'is_superuser': ('django.db.models.fields.BooleanField', [], {'default': 'False', 'blank': 'True'}),
            'last_login': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
            'last_name': ('django.db.models.fields.CharField', [], {'max_length': '30', 'blank': 'True'}),
            'password': ('django.db.models.fields.CharField', [], {'max_length': '128'}),
            'user_permissions': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['auth.Permission']", 'symmetrical': 'False', 'blank': 'True'}),
            'username': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '32'})
        },
        'contenttypes.contenttype': {
            'Meta': {'unique_together': "(('app_label', 'model'),)", 'object_name': 'ContentType', 'db_table': "'django_content_type'"},
            'app_label': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'model': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '100'})
        },
        'market.marketplace': {
            'Meta': {'object_name': 'MarketPlace'},
            'base_domain': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '128'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '92'}),
            'slug': ('django.db.models.fields.SlugField', [], {'unique': 'True', 'max_length': '92', 'db_index': 'True'}),
            'template_prefix': ('django.db.models.fields.SlugField', [], {'unique': 'True', 'max_length': '92', 'db_index': 'True'}),
            'title': ('django.db.models.fields.CharField', [], {'max_length': '92'})
        },
        'shops.shop': {
            'Meta': {'object_name': 'Shop'},
            'admin': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['auth.User']"}),
            'bids': ('django.db.models.fields.IntegerField', [], {'default': '0'}),
            'date_time': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'location': ('django.db.models.fields.CharField', [], {'default': "'39.29038,-76.61219'", 'max_length': '255'}),
            'marketplace': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['market.MarketPlace']"}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '60'}),
            'views': ('django.db.models.fields.IntegerField', [], {'default': '0'})
        },
        'themes.asset': {
            'Meta': {'object_name': 'Asset'},
            'file': ('django.db.models.fields.files.FileField', [], {'max_length': '100'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'last_updated': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'blank': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '60'}),
            'theme': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['themes.Theme']"})
        },
        'themes.assetrendering': {
            'Meta': {'object_name': 'AssetRendering'},
            'asset': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['themes.Asset']", 'unique': 'True'}),
            'file': ('django.db.models.fields.files.FileField', [], {'max_length': '100'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'})
        },
        'themes.template': {
            'Meta': {'object_name': 'Template'},
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'last_updated': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'blank': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '60'}),
            'text': ('django.db.models.fields.TextField', [], {}),
            'theme': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['themes.Theme']"})
        },
        'themes.theme': {
            'Meta': {'object_name': 'Theme'},
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'shop': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['shops.Shop']", 'unique': 'True'})
        }
    }

    complete_apps = ['themes']

########NEW FILE########
__FILENAME__ = 0002_auto__chg_field_asset_name
# encoding: utf-8
import datetime
from south.db import db
from south.v2 import SchemaMigration
from django.db import models

class Migration(SchemaMigration):

    def forwards(self, orm):
        
        # Changing field 'Asset.name'
        db.alter_column('themes_asset', 'name', self.gf('django.db.models.fields.CharField')(max_length=128))


    def backwards(self, orm):
        
        # Changing field 'Asset.name'
        db.alter_column('themes_asset', 'name', self.gf('django.db.models.fields.CharField')(max_length=60))


    models = {
        'auth.group': {
            'Meta': {'object_name': 'Group'},
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '80'}),
            'permissions': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['auth.Permission']", 'symmetrical': 'False', 'blank': 'True'})
        },
        'auth.permission': {
            'Meta': {'unique_together': "(('content_type', 'codename'),)", 'object_name': 'Permission'},
            'codename': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'content_type': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['contenttypes.ContentType']"}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '50'})
        },
        'auth.user': {
            'Meta': {'object_name': 'User'},
            'date_joined': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
            'email': ('django.db.models.fields.EmailField', [], {'max_length': '75'}),
            'first_name': ('django.db.models.fields.CharField', [], {'max_length': '30', 'blank': 'True'}),
            'groups': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['auth.Group']", 'symmetrical': 'False', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'is_active': ('django.db.models.fields.BooleanField', [], {'default': 'True', 'blank': 'True'}),
            'is_staff': ('django.db.models.fields.BooleanField', [], {'default': 'False', 'blank': 'True'}),
            'is_superuser': ('django.db.models.fields.BooleanField', [], {'default': 'False', 'blank': 'True'}),
            'last_login': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
            'last_name': ('django.db.models.fields.CharField', [], {'max_length': '30', 'blank': 'True'}),
            'password': ('django.db.models.fields.CharField', [], {'max_length': '128'}),
            'user_permissions': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['auth.Permission']", 'symmetrical': 'False', 'blank': 'True'}),
            'username': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '32'})
        },
        'contenttypes.contenttype': {
            'Meta': {'unique_together': "(('app_label', 'model'),)", 'object_name': 'ContentType', 'db_table': "'django_content_type'"},
            'app_label': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'model': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '100'})
        },
        'market.marketplace': {
            'Meta': {'object_name': 'MarketPlace'},
            'base_domain': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '128'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '92'}),
            'slug': ('django.db.models.fields.SlugField', [], {'unique': 'True', 'max_length': '92', 'db_index': 'True'}),
            'template_prefix': ('django.db.models.fields.SlugField', [], {'unique': 'True', 'max_length': '92', 'db_index': 'True'}),
            'title': ('django.db.models.fields.CharField', [], {'max_length': '92'})
        },
        'shops.shop': {
            'Meta': {'object_name': 'Shop'},
            'admin': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['auth.User']"}),
            'bids': ('django.db.models.fields.IntegerField', [], {'default': '0'}),
            'date_time': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'location': ('django.db.models.fields.CharField', [], {'default': "'39.29038,-76.61219'", 'max_length': '255'}),
            'marketplace': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['market.MarketPlace']"}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '60'}),
            'views': ('django.db.models.fields.IntegerField', [], {'default': '0'})
        },
        'themes.asset': {
            'Meta': {'object_name': 'Asset'},
            'file': ('django.db.models.fields.files.FileField', [], {'max_length': '100'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'last_updated': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'blank': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '128'}),
            'theme': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['themes.Theme']"})
        },
        'themes.assetrendering': {
            'Meta': {'object_name': 'AssetRendering'},
            'asset': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['themes.Asset']", 'unique': 'True'}),
            'file': ('django.db.models.fields.files.FileField', [], {'max_length': '100'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'})
        },
        'themes.template': {
            'Meta': {'object_name': 'Template'},
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'last_updated': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'blank': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '60'}),
            'text': ('django.db.models.fields.TextField', [], {}),
            'theme': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['themes.Theme']"})
        },
        'themes.theme': {
            'Meta': {'object_name': 'Theme'},
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'shop': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['shops.Shop']", 'unique': 'True'})
        }
    }

    complete_apps = ['themes']

########NEW FILE########
__FILENAME__ = 0003_auto__add_assetrenderingsecure
# encoding: utf-8
import datetime
from south.db import db
from south.v2 import SchemaMigration
from django.db import models

class Migration(SchemaMigration):

    def forwards(self, orm):
        
        # Adding model 'AssetRenderingSecure'
        db.create_table('themes_assetrenderingsecure', (
            ('id', self.gf('django.db.models.fields.AutoField')(primary_key=True)),
            ('asset', self.gf('django.db.models.fields.related.OneToOneField')(to=orm['themes.Asset'], unique=True)),
            ('file', self.gf('django.db.models.fields.files.FileField')(max_length=100)),
        ))
        db.send_create_signal('themes', ['AssetRenderingSecure'])


    def backwards(self, orm):
        
        # Deleting model 'AssetRenderingSecure'
        db.delete_table('themes_assetrenderingsecure')


    models = {
        'auth.group': {
            'Meta': {'object_name': 'Group'},
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '80'}),
            'permissions': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['auth.Permission']", 'symmetrical': 'False', 'blank': 'True'})
        },
        'auth.permission': {
            'Meta': {'unique_together': "(('content_type', 'codename'),)", 'object_name': 'Permission'},
            'codename': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'content_type': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['contenttypes.ContentType']"}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '50'})
        },
        'auth.user': {
            'Meta': {'object_name': 'User'},
            'date_joined': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
            'email': ('django.db.models.fields.EmailField', [], {'max_length': '75'}),
            'first_name': ('django.db.models.fields.CharField', [], {'max_length': '30', 'blank': 'True'}),
            'groups': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['auth.Group']", 'symmetrical': 'False', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'is_active': ('django.db.models.fields.BooleanField', [], {'default': 'True', 'blank': 'True'}),
            'is_staff': ('django.db.models.fields.BooleanField', [], {'default': 'False', 'blank': 'True'}),
            'is_superuser': ('django.db.models.fields.BooleanField', [], {'default': 'False', 'blank': 'True'}),
            'last_login': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
            'last_name': ('django.db.models.fields.CharField', [], {'max_length': '30', 'blank': 'True'}),
            'password': ('django.db.models.fields.CharField', [], {'max_length': '128'}),
            'user_permissions': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['auth.Permission']", 'symmetrical': 'False', 'blank': 'True'}),
            'username': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '32'})
        },
        'contenttypes.contenttype': {
            'Meta': {'unique_together': "(('app_label', 'model'),)", 'object_name': 'ContentType', 'db_table': "'django_content_type'"},
            'app_label': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'model': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '100'})
        },
        'market.marketplace': {
            'Meta': {'object_name': 'MarketPlace'},
            'base_domain': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '128'}),
            'charge_on_card_as': ('django.db.models.fields.CharField', [], {'default': "''", 'unique': 'True', 'max_length': '255'}),
            'contact_email': ('django.db.models.fields.EmailField', [], {'default': "'contact@yourstore.com'", 'max_length': '75'}),
            'contact_phone': ('django.db.models.fields.CharField', [], {'default': "''", 'max_length': '128'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '92'}),
            'slug': ('django.db.models.fields.SlugField', [], {'unique': 'True', 'max_length': '92', 'db_index': 'True'}),
            'template_prefix': ('django.db.models.fields.SlugField', [], {'unique': 'True', 'max_length': '92', 'db_index': 'True'}),
            'title': ('django.db.models.fields.CharField', [], {'max_length': '92'})
        },
        'shops.shop': {
            'Meta': {'object_name': 'Shop'},
            'admin': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['auth.User']"}),
            'bids': ('django.db.models.fields.IntegerField', [], {'default': '0'}),
            'date_time': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'location': ('django.db.models.fields.CharField', [], {'default': "'39.29038,-76.61219'", 'max_length': '255'}),
            'marketplace': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['market.MarketPlace']"}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '60'}),
            'views': ('django.db.models.fields.IntegerField', [], {'default': '0'})
        },
        'themes.asset': {
            'Meta': {'object_name': 'Asset'},
            'file': ('django.db.models.fields.files.FileField', [], {'max_length': '100'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'last_updated': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'blank': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '128'}),
            'theme': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['themes.Theme']"})
        },
        'themes.assetrendering': {
            'Meta': {'object_name': 'AssetRendering'},
            'asset': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['themes.Asset']", 'unique': 'True'}),
            'file': ('django.db.models.fields.files.FileField', [], {'max_length': '100'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'})
        },
        'themes.assetrenderingsecure': {
            'Meta': {'object_name': 'AssetRenderingSecure'},
            'asset': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['themes.Asset']", 'unique': 'True'}),
            'file': ('django.db.models.fields.files.FileField', [], {'max_length': '100'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'})
        },
        'themes.template': {
            'Meta': {'object_name': 'Template'},
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'last_updated': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'blank': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '60'}),
            'text': ('django.db.models.fields.TextField', [], {}),
            'theme': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['themes.Theme']"})
        },
        'themes.theme': {
            'Meta': {'object_name': 'Theme'},
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'shop': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['shops.Shop']", 'unique': 'True'})
        }
    }

    complete_apps = ['themes']

########NEW FILE########
__FILENAME__ = models
"""
    Shop Theme handling application models
"""
import logging
import mimetypes
import zipfile
import re
import reversion
import os

from django.db import models
from django.db.models.fields.related import OneToOneField
from django.conf import settings
from django.core.files.base import ContentFile
from django.core.files.storage import default_storage

from reversion import revision

from shops.models import Shop 


TEMPLATES = [
             'layout',
             'home',
             'blog',
             'about_us',
             'search',
             'page',
             'for_sale',
             'view_item',
             'auctions',
             'view_lot',
             'view_history_lot',
             'view_post',
             'login',
             'register',
             'welcome',
             'my_shopping',
             'my_orders',
             'confirm',
             'manual_payment',
             'shipping',
             '404',
             'payment_success',
             'payment_cancel',
             'payment_paypal_confirm',
             'refund',
             'privacy_policies',
             'terms_of_service',
             ]

PAGES = [
         #'about_us',
         'auctions',
         'blog',         
         'for_sale',         
         'page',
         'search',
         'view_item',         
         'view_history_lot',
         'view_lot',         
         'view_post',
         'refund',
         'privacy_policies',
         'terms_of_service',
         ]

OTHER_PAGES = [
               'login',
               'register',
               'welcome',
               'my_shopping',
               'my_orders',
               'confirm',
               'manual_payment',
               'shipping',
               '404',
               'payment_success',
               'payment_cancel',
               'payment_paypal_confirm',
              ]


UPLOAD_DIR = 'asset'

EDITABLE_TYPES = ['text/css', 'application/x-javascript']


class Theme(models.Model):
    shop = models.OneToOneField(Shop)
    
    def __unicode__(self):
        return self.shop.name

    def home_id(self):
        return Template.objects.filter(name='home', theme=self).get().id

    def about_us_id(self):
        return Template.objects.filter(name='about_us', theme=self).get().id
    
    def layout_id(self):
        return Template.objects.filter(name='layout', theme=self).get().id

    def get_templates(self):
        dic = {'pages':[], 'other_pages':[]}
        for template in self.template_set.all():
            if template.name in PAGES:
                dic['pages'].append(template)
            if template.name in OTHER_PAGES:
                dic['other_pages'].append(template)
        return dic
    
    @classmethod
    def create_default(cls, shop):
        try:
            theme = Theme.objects.filter(shop = shop).get()
        except Theme.DoesNotExist:
            theme = Theme(shop=shop)
            theme.save()
        #Template.create_default(theme)
        theme.theme_import('%s%s' % (settings.THEMES_ROOT, settings.DEFAULT_THEME))

    def get_template(self, name):
        template = Template.objects.filter(theme=self, name=name)[0]
        return template.text
        
    def theme_export(self):
        # create zip
        if not os.path.isdir(settings.TMP_DIR):
            os.mkdir(dir)
        zip_name = "%s%s_%s" % (settings.TMP_DIR, self.shop.name, 'export.zip')
        zip = zipfile.ZipFile(zip_name, 'w')

        # for in templates and insert templates in zip
        for template in self.template_set.all():
            filename = '%s%s_%s.html' % (settings.TMP_DIR, self.shop.name, template.name)
            temp = open(filename, 'a+b')
            try:
                temp.write(template.text)
            finally:
                temp.close()
                zip.write(str(filename), str('templates/%s.html' % template.name), zipfile.ZIP_DEFLATED)
                os.remove(filename)
            
        # for in assets and insert in zip file
        for asset in self.asset_set.all():
            data = asset.file.read()
            info = zipfile.ZipInfo()
            info.filename = str('assets/%s' % asset.name)
            info.external_attr = 0777 << 16L
            info.compress_type = zipfile.ZIP_DEFLATED             
            zip.writestr(info, data)
        
        zip.close()
        return zip.filename
    
    @revision.create_on_success
    def theme_import(self, filename):
        # load zip file
        zip = zipfile.ZipFile(filename, 'r')

        # check the structure file
        asset_ok = False
        template_ok = False
        for i in zip.namelist():
            if asset_ok and template_ok:
                break
            match = re.search(r"^assets/(?P<name>.*)", i)
            if match:
                asset_ok = True
            match = re.search(r"^templates/(?P<name>.*)", i)
            if match:
                template_ok = True
        if not (asset_ok and template_ok):
            raise Exception("The theme does not have the expected structure. The root of the zip file should only have the assets/ and templates/ folders.")
            
        # load templates of theme from files
        for template_name in TEMPLATES:
            try:
                template = Template.objects.get(theme=self, name=template_name)
            except Template.DoesNotExist: 
                template = Template(theme=self, name=template_name)
            text = zip.read(str('templates/%s.html' % template_name))
            if template.text != text:
                template.text = text 
                template.save()
        
        # delete actual_assets
        for asset in Asset.objects.filter(theme=self):
            asset.delete()    
        
        # load new assets
        filelist = zip.filelist   
        for info in filelist:
            match = re.search(r"^assets/(?P<name>.+)", info.filename)
            if match:
                name = match.group('name')
                asset = Asset()
                asset.theme = self
                asset.name = name
                asset.file.save("%s_%s"%(self.shop.name, name), ContentFile(zip.read(info.filename)))
                asset.save()
        
        # render editables assets
        for asset in Asset.objects.filter(theme=self):
            if asset.is_editable():
                asset.render()


class Template(models.Model):
    theme = models.ForeignKey(Theme)
    name = models.CharField(max_length=60)
    last_updated =  models.DateTimeField(auto_now=True)
    text = models.TextField()
    
    def __unicode__(self):
        return u"%s for %s" % (self.name, self.theme)
    
#    @classmethod
#    def create_default(self, theme):
#        for template_name in TEMPLATES:
#            try:
#                Template.objects.get(theme=theme, name=template_name)
#            except Template.DoesNotExist: 
#                template = Template(theme=theme, name=template_name)
#                name_file = '%s/bidding/default/%s.html' % (settings.STORE_TEMPLATES, template_name)
#                try:
#                    file = open(name_file, 'r')
#                    template.text = file.read()
#                    template.save()
#                except IOError:
#                    logging.exception("Error making default template")
#                    raise
#                else:
#                    file.close()

reversion.register(Template)


asset_storage = default_storage
try:
    from storages.backends.s3boto import S3BotoStorage
    asset_storage = S3BotoStorage(bucket=settings.AWS_STORAGE_BUCKET_NAME, 
                            access_key=settings.AWS_ACCESS_KEY_ID, 
                            secret_key=settings.AWS_SECRET_ACCESS_KEY, 
                            acl='public-read', headers=settings.AWS_HEADERS, 
                            querystring_auth=False, custom_domain=False, secure_urls=False)
except (AttributeError, ImportError):
    pass

class Asset(models.Model):
    theme = models.ForeignKey(Theme)
    file = models.FileField(upload_to=UPLOAD_DIR, storage=asset_storage)
    last_updated =  models.DateTimeField(auto_now=True)
    name = models.CharField(max_length=128)

    def __unicode__(self):
        return self.file.name
    
    def file_type(self):
        return mimetypes.guess_type(self.file.name)[0]

    def is_editable(self):
        return self.file_type() in EDITABLE_TYPES

    def render(self):
        from render import render_asset
        if self.is_editable(): 
    
            text = self.file.read()
            
            render = render_asset(text, self.theme.shop)
            try:
                file = self.assetrendering.file
                if file.storage.exists(file.name):
                    file.storage.delete(file.name)
                file.save(file.name, ContentFile(str(render)))
            except AssetRendering.DoesNotExist:
                asset_rendering = AssetRendering(asset=self)
                asset_rendering.file.save("%s_render_%s" % (self.theme.shop.name, self.name),ContentFile(str(render)))
                asset_rendering.save()


            render_secure = render_asset(text, self.theme.shop, is_secure=True)
            try:
                file = self.assetrenderingsecure.file
                if file.storage.exists(file.name):
                    file.storage.delete(file.name)
                file.save(file.name, ContentFile(str(render_secure)))
            except AssetRenderingSecure.DoesNotExist:
                asset_rendering_secure = AssetRenderingSecure(asset=self)
                asset_rendering_secure.file.save("%s_render_secure_%s" % (self.theme.shop.name, self.name),ContentFile(str(render_secure)))
                asset_rendering_secure.save()


    
class AssetRendering(models.Model):
    asset = OneToOneField(Asset)
    file = models.FileField(upload_to=UPLOAD_DIR, storage=asset_storage)


class AssetRenderingSecure(models.Model):
    asset = OneToOneField(Asset)
    file = models.FileField(upload_to=UPLOAD_DIR, storage=asset_storage)

########NEW FILE########
__FILENAME__ = render
import logging
from django.conf import settings
from jinja2 import Environment
from jinja2.loaders import BaseLoader

from models import Asset 

class AssetLoader(BaseLoader):

#    def __init__(self, shop):
#        self.shop = shop

    def __init__(self, shop, is_secure=False):
        self.shop = shop
        self.is_secure = is_secure 


    def get_source(self, environment, text):
        source = text
        path = "%s/%s" % (self.shop.name, 'asset')
        return source, path, lambda: False
    
#    def asset_url(self, name_file):
#        try:
#            asset = Asset.objects.filter(theme__shop=self.shop, name=name_file)[0]
#            return asset.file.url
#        except IndexError:
#            raise Exception("The file %s does not exist." % name_file)

    def asset_url(self, name_file):
        try:
            asset = Asset.objects.filter(theme__shop=self.shop, name=name_file)[0]
            if asset.is_editable():
                if self.is_secure:
                    return settings.SECURE_ASSET_URL + asset.assetrendering.file.name
                else:
                    return asset.assetrendering.file.url
            else:
                if self.is_secure:
                    return settings.SECURE_ASSET_URL + asset.file.name
                else:
                    return asset.file.url
        except:
            logging.error("Asset(%s) object not found" % name_file)
            return ''
        
        
def render_asset(text, shop, is_secure=False):
    env = Environment(loader=AssetLoader(shop, is_secure))
    env.filters['asset_url'] = env.loader.asset_url

#        template = env.get_template(str(self.id))
    template = env.get_template(text)
    result = template.render()

    return result
########NEW FILE########
__FILENAME__ = urls
from django.conf.urls.defaults import *

urlpatterns = patterns('',
    url(r'^$', 'themes.views.theme', name='themes'),
    url(r'^template_edit/([\d]+)/$', 'themes.views.template_edit', name='template_edit'),
    url(r'^template_get_version/([\d]+)/$', 'themes.views.template_get_version', name='template_get_version'),
    url(r'^asset_add/$', 'themes.views.asset_add', name='asset_add'),
    url(r'^asset_delete/([\d]+)/$', 'themes.views.asset_delete', name='asset_delete'),
    url(r'^asset_edit/([\d]+)/$', 'themes.views.asset_edit', name='asset_edit'),
    
    url(r'^theme_export/$', 'themes.views.theme_export', name='theme_export'),
    url(r'^theme_import/$', 'themes.views.theme_import', name='theme_import'),
)
########NEW FILE########
__FILENAME__ = views
import logging
import copy
import reversion
import os
import datetime
from django.core.files.base import ContentFile
from django.core.servers.basehttp import FileWrapper
from django.core.urlresolvers import reverse
from django.conf import settings
from django.http import HttpResponseRedirect, Http404, HttpResponse
from django.shortcuts import render_to_response, get_object_or_404
from django.template import RequestContext
from django.utils.translation import ugettext as _
 
from core.decorators import shop_required
from core.decorators import shop_admin_required
from reversion.models import Version

from forms import TemplateForm, AssetForm, AssetEditForm, ThemeImportForm
from models import Theme, Template, Asset


@shop_required
#@shop_admin_required
def theme(request, id=None):
    shop = request.shop
    theme = shop.theme
    edit = request.GET.get('edit', None)
    if id is None:
        template = Template.objects.filter(theme=theme, name='layout').get()
        edit = 'template'
    else:
        if edit == 'template':  
            template = get_object_or_404(Template, pk=id)
            if template.theme.shop != shop:
                raise Http404
        elif edit == 'asset':
            asset = get_object_or_404(Asset, pk=id)
            if asset.theme.shop != shop and asset.is_editable():
                raise Http404
            
    param = {}
    if edit == 'template':
        text = copy.copy(template.text)
        form_template = TemplateForm(request.POST or None, instance=template)
        if form_template.is_valid():
            if text != form_template.cleaned_data['text']:
                shop.last_date_to_change_layout = datetime.datetime.now()
                shop.save()
                form_template.save()
#            request.flash['message'] = unicode(_("Template successfully saved."))
#            request.flash['severity'] = "success"
            return HttpResponse('Template successfully saved.')
            #return HttpResponseRedirect(reverse('web_store_theme', args=[template.id])+"?edit=template")
        version_list = Version.objects.get_for_object(template).order_by('-pk')[:10]
        param = {'form_template': form_template,
                 'version_list': version_list,
                 'template': template}

    else: # edit == 'asset'
    
        try: 
            if request.method == 'POST':
                form_asset = AssetEditForm(shop=shop, data=request.POST)
                if form_asset.is_valid():
                    text = form_asset.cleaned_data['text']
                    if asset.file.storage.exists(asset.file.name):
                        asset.file.storage.delete(asset.file.name)
                    asset.file.save(asset.file.name, ContentFile(str(text)))
                    
                    try:
                        shop.last_date_to_change_layout = datetime.datetime.now()
                        shop.save()
                        asset.save()
                        asset.render()
                    except Exception,e:
                        return HttpResponse(e)
    
                    return HttpResponse('File successfully saved.')
                else:
                    errors = "\n".join(["%s" % (v.as_text()) for k,v in form_asset.errors.iteritems()])
                    return HttpResponse(errors)
            else:
                text = asset.file.read()
                form_asset = AssetEditForm(shop=shop, initial={'text':text})        
        
                param = {'form_asset': form_asset,
                         'asset': asset}
        except:
            logging.exception("MUERE!!!!!!!!!!!!!!!!!")
        
    
    add_asset_form = AssetForm()
    
    param.update({'theme':theme,
                  'add_asset_form': add_asset_form,
                  'assets': shop.theme.asset_set.all(),
                  'templates': theme.get_templates(),
                 })
        
    return render_to_response('store_admin/web_store/theme.html', param, RequestContext(request))


@shop_required
@shop_admin_required
def theme_export(request):
    shop = request.shop
    theme = Theme.objects.filter(shop=shop).get()
    zip_file = open(theme.theme_export(), 'r')
    response = HttpResponse(FileWrapper(zip_file), content_type='application/zip')
    response['Content-Disposition'] = 'attachment; filename=theme.zip'
    return response


@shop_required

def theme_import(request):
    
    def handle_uploaded_file(f, filename):
        destination = open(filename, 'wb+')
        for chunk in f.chunks():
            destination.write(chunk)
        destination.close()
    
    shop = request.shop
    theme = Theme.objects.filter(shop=shop).get()    
    if request.method == 'POST':
        form = ThemeImportForm(request.POST, request.FILES)
        if form.is_valid():
            
            file = request.FILES['file']
            filename = '%s%s_%s' % (settings.TMP_DIR, shop.name, file.name)
            handle_uploaded_file(file, filename)
        
            try:
                theme.theme_import(filename)
                shop.last_date_to_change_layout = datetime.datetime.now()
                shop.save()                 
                request.flash['message'] = unicode(_("Theme successfully applied."))
                request.flash['severity'] = "success"
            except (Exception), e:
                request.flash['message'] = "Error when importing theme. %s" % e
                request.flash['severity'] = "error"
            finally:
                os.remove(filename)

            return HttpResponseRedirect(reverse('theme_import'))
    else:
        form = form = ThemeImportForm()
    return render_to_response('store_admin/web_store/theme_import.html',
                              {
                               'form': form,
                               'theme':theme,
                               'assets': shop.theme.asset_set.all(),
                               'templates': theme.get_templates(),                                 
                               },
                              RequestContext(request))


@shop_required
@shop_admin_required
@reversion.revision.create_on_success
def template_edit(request, id):
    shop = request.shop
    template = get_object_or_404(Template, pk=id)
    if template.theme.shop != shop:
        raise Http404
    text = copy.copy(template.text)
    form = TemplateForm(request.POST or None, instance=template)
    if form.is_valid():
        if text != form.cleaned_data['text']:
            shop.shop.last_date_to_change_layout = datetime.datetime.now()
            shop.save()
            form.save()
        request.flash['message'] = unicode(_("Template successfully edited."))
        request.flash['severity'] = "success"
        return HttpResponseRedirect(reverse('template_edit', args=[id]))
    version_list = Version.objects.get_for_object(template).order_by('-pk')[:10]
    return render_to_response('themes/template_edit.html',
                              {
                               'form': form,
                               'template': template,
                               'templates': shop.theme.template_set.all(),
                               'version_list': version_list,
                               },
                              RequestContext(request))

@shop_required
@shop_admin_required
def template_get_version(request, id):
    version = Version.objects.get(pk=id)
    template = version.get_object_version().object
    return HttpResponse(template.text)


@shop_required
@shop_admin_required
def asset_add(request):
    shop = request.shop
    theme = shop.theme
    if request.method == 'POST':
        form = AssetForm(request.POST, request.FILES)
        if form.is_valid():
            asset = form.save(commit=False)
            asset.theme = shop.theme 
            asset.file.name = "%s_%s" % (shop.name, asset.file.name)
            asset.save()
            try:
                asset.render()
                shop.last_date_to_change_layout = datetime.datetime.now()
                shop.save()
                request.flash['message'] = unicode(_("File successfully added."))
                request.flash['severity'] = "success"
            except Exception, e:
                request.flash['message'] = "Error in asset. %s" % e
                request.flash['severity'] = "error"
                asset.delete()
            
    return HttpResponseRedirect(reverse('web_store_theme'))


@shop_required
@shop_admin_required
def asset_delete(request, id):
    shop = request.shop
    asset = get_object_or_404(Asset, pk=id)
    if asset.theme.shop != shop:
        raise Http404
    asset.delete()
    request.flash['message'] = unicode(_("File successfully deleted."))
    request.flash['severity'] = "success"
    return HttpResponseRedirect(reverse('themes'))


@shop_required
@shop_admin_required
def asset_edit(request, id):
    shop = request.shop
    asset = get_object_or_404(Asset, pk=id)
    if asset.theme.shop != shop and asset.is_editable():
        raise Http404
    if request.method == 'POST':
        form = AssetEditForm(shop=shop, data=request.POST)
        if form.is_valid():
            text = form.cleaned_data['text']
            asset.file.save(asset.file.name, ContentFile(str(text)))
            
            asset.save()
            asset.render()
            
            request.flash['message'] = unicode(_("File successfully edited."))
            request.flash['severity'] = "success"
            return HttpResponseRedirect(reverse('asset_edit', args=[id]))
    else:
        text = asset.file.read()
        form = AssetEditForm(shop=shop, initial={'text':text})
    return render_to_response('themes/asset_edit.html',
                              {
                               'form': form,
                               'asset': asset,
                               'templates': shop.theme.template_set.all(),
                               },
                              RequestContext(request))    
    

########NEW FILE########
__FILENAME__ = helpers
"""
    Utilities for helping developers use python for adding various attributes,
    elements, and UI elements to forms generated via the uni_form template tag.

"""
from django.core.urlresolvers import reverse, NoReverseMatch
from django.forms.forms import BoundField
from django.template.loader import render_to_string
from django.utils.safestring import mark_safe


from uni_form.util import BaseInput, Toggle


class FormHelpersException(Exception):
    """ This is raised when building a form via helpers throws an error.
        We want to catch form helper errors as soon as possible because
        debugging templatetags is never fun.
    """
    pass


class Submit(BaseInput):
    """
        Used to create a Submit button descriptor for the uni_form template tag.
    """
    
    input_type = 'submit'
    field_classes = 'submit submitButton'


class Button(BaseInput):
    """
        Used to create a Submit input descriptor for the uni_form template tag.
    """
    
    input_type = 'button'
    field_classes = 'button'

class Hidden(BaseInput):
    """
        Used to create a Hidden input descriptor for the uni_form template tag.
    """
    
    input_type = 'hidden'
    field_classes = 'hidden'

class Reset(BaseInput):
    """
        Used to create a Hidden input descriptor for the uni_form template tag.
    """
    
    input_type = 'reset'
    field_classes = 'reset resetButton'    

def render_field(field, form):
    if isinstance(field, str):
        return render_form_field(form, field)
    else:
        return field.render(form)

def render_form_field(form, field):
    try:
        field_instance = form.fields[field]
    except KeyError:
        raise Exception("Could not resolve form field '%s'." % field)
    bound_field = BoundField(form, field_instance, field)
    html = render_to_string("uni_form/field.html", {'field': bound_field})
    if not hasattr(form, 'rendered_fields'):
        form.rendered_fields = []
    if not field in form.rendered_fields:
        form.rendered_fields.append(field)
    else:
        raise Exception("A field should only be rendered once: %s" % field)
    return html

class Layout(object):
    '''
    Form Layout, add fieldsets, rows, fields and html
    
    example:
    
    layout = Layout(Fieldset('', 'is_company'),
                    Fieldset(_('Contact details'),
                              'email',
                              Row('password1','password2'),
                              'first_name',
                              'last_name',
                              HTML('<img src="/media/somepicture.jpg"/>'),
                              'company',)
    helper.add_layout(layout)
    '''
    def __init__(self, *fields):
        self.fields = fields
    
    def render(self, form):
        html = ""
        for field in self.fields:
            html += render_field(field, form)
        for field in form.fields.keys():
            if not field in form.rendered_fields:
                html += render_field(field, form)
        return html

class Fieldset(object):
    
    ''' Fieldset container. Renders to a <fieldset>. '''
    
    def __init__(self, legend, *fields, **args):
        if 'css_class' in args.keys():
            self.css = args['css_class']
        else:
            self.css = None
        self.legend_html = legend and ('<legend>%s</legend>' % unicode(legend)) or ''
        self.fields = fields
    
    
    def render(self, form):
        if self.css:
            html = u'<fieldset class="%s">' % self.css
        else:
            html = u'<fieldset>'
        html += self.legend_html
        for field in self.fields:
            html += render_field(field, form)
        html += u'</fieldset>'
        return html



class Row(object):
    ''' row container. Renders to a set of <div>'''
    def __init__(self, *fields, **kwargs):
        self.fields = fields
        if 'css_class' in kwargs.keys():
            self.css = kwargs['css_class']
        else:
            self.css = "formRow"
    
    def render(self, form):
        output = u'<div class="%s">' % self.css
        for field in self.fields:
            output += render_field(field, form)
        output += u'</div>'
        return u''.join(output)

class Column(object):
    ''' column container. Renders to a set of <div>'''
    def __init__(self, *fields, **kwargs):
        self.fields = fields
        if 'css_class' in kwargs.keys():
            self.css = kwargs['css_class']
        else:
            self.css = "formColumn"
    
    def render(self, form):
        output = u'<div class="%s">' % self.css
        for field in self.fields:
            output += render_field(field, form)
        output += u'</div>'
        return u''.join(output)

class HTML(object):
    
    ''' HTML container '''
    
    def __init__(self, html):
        self.html = unicode(html)
    
    def render(self, form):
        return self.html




class FormHelper(object):
    """
        By setting attributes to me you can easily create the text that goes
        into the uni_form template tag. One use case is to add to your form
        class.
        
        First we create a MyForm class and instantiate it
        
        >>> from django import forms
        >>> from uni_form.helpers import FormHelper, Submit, Reset
        >>> from django.utils.translation import ugettext_lazy as _
        >>> class MyForm(forms.Form):
        ...     title = forms.CharField(label=_("Title"), max_length=30, widget=forms.TextInput())
        ...     # this displays how to attach a formHelper to your forms class.
        ...     helper = FormHelper()
        ...     helper.form_id = 'this-form-rocks'
        ...     helper.form_class = 'search'
        ...     submit = Submit('search','search this site')
        ...     helper.add_input(submit)
        ...     reset = Reset('reset','reset button')
        ...     helper.add_input(reset)
        
        After this in the template:
            
            {% load uni_form_tags %}
            {% uni_form form form.helper %}
        
    
    """
    
    def __init__(self):
        self._form_method = 'POST'
        self._form_action = ''
        self.form_id = ''
        self.form_class = ''
        self.inputs = []
        self.toggle = Toggle()
        self.layout = None
    
    def get_form_method(self):
        return self._form_method
    
    def set_form_method(self, method):
        if method.lower() not in ('get','post'):
            raise FormHelpersException('Only GET and POST are valid in the \
                    form_method helper attribute')
        
        self._form_method = method.upper()
    
    # we set properties the old way because we want to support pre-2.6 python
    form_method = property(get_form_method, set_form_method)
    
    def get_form_action(self):
        return self._form_action
    
    def set_form_action(self, action):
        try:
            self._form_action = reverse(action)
        except NoReverseMatch:
            self._form_action = action
            #msg = 'Your form action needs to be a named url defined in a urlconf file\n'
            #msg += 'Your broken action is: %s\n' % action
            #msg += 'NoReverseMatch: %s' % e
            #raise FormHelpersException(msg)
    
    # we set properties the old way because we want to support pre-2.6 python
    form_action = property(get_form_action, set_form_action)
    
    def add_input(self, input_object):
        self.inputs.append(input_object)
    
    def add_layout(self, layout):
        self.layout = layout
    
    def render_layout(self, form):
        return mark_safe(self.layout.render(form))
    
    def get_attr(self):
        items = {}
        items['form_method'] = self.form_method.strip()
        
        if self.form_action:
            items['form_action'] = self.form_action.strip()
        if self.form_id:
            items['id'] = self.form_id.strip()
        if self.form_class:
            items['class'] = self.form_class.strip()
        if self.inputs:
            items['inputs'] = self.inputs
        if self.toggle.fields:
            items['toggle_fields'] = self.toggle.fields
        return items
        

########NEW FILE########
__FILENAME__ = models

########NEW FILE########
__FILENAME__ = uni_form_field
from django import template

register = template.Library()

class_converter = {
    "textinput":"textinput textInput",
    "fileinput":"fileinput fileUpload"
}

@register.filter
def is_checkbox(field):
    return field.field.widget.__class__.__name__.lower() == "checkboxinput"

@register.filter
def with_class(field):
    class_name = field.field.widget.__class__.__name__.lower()
    class_name = class_converter.get(class_name, class_name)
    if "class" in field.field.widget.attrs:
        field.field.widget.attrs['class'] += " %s" % class_name
    else:
        field.field.widget.attrs['class'] = class_name
    return unicode(field)



########NEW FILE########
__FILENAME__ = uni_form_tags
from django.conf import settings
from django.template import Context, Template
from django.template.loader import get_template
from django import template

from django.template.defaultfilters import slugify

register = template.Library()


###################################################
# Core as_uni_form filter.
# You will likely use this simple filter
# most of the time.
# This is easy to get working and very simple in
# concept and execution.
###################################################
@register.filter
def as_uni_form(form):
    template = get_template('uni_form/uni_form.html')
    c = Context({'form':form})
    return template.render(c)

@register.filter
def as_uni_errors(form):
    template = get_template('uni_form/errors.html')
    c = Context({'form':form})
    return template.render(c)

@register.filter
def as_uni_field(field):
    template = get_template('uni_form/field.html')
    c = Context({'field':field})
    return template.render(c)
    
@register.inclusion_tag("uni_form/includes.html", takes_context=True)
def uni_form_setup(context):
    """
Creates the <style> and <script> tags needed to initialize the uni-form.
 
Create a local uni-form/includes.html template if you want to customize how
these files are loaded. 
"""
    if 'MEDIA_URL' not in context:
        context['MEDIA_URL'] = settings.MEDIA_URL        
    return (context)

############################################################################
#
# Everything from now on gets more fancy
# It can be argued that having django-uni-form construct your forms is overkill
# and that I am playing architecture astronaut games with form building.
#
# However, all the bits that follow are designed to be section 508 compliant,
# so all the fancy JS bits are garanteed to degrade gracefully.
#
############################################################################

def namify(text):
    """ Some of our values need to be rendered safe as python variable names.
        So we just replaces hyphens with underscores.
    """
    return slugify(text).replace('-','_')
    

class BasicNode(template.Node):
    """ Basic Node object that we can rely on for Node objects in normal
        template tags. I created this because most of the tags we'll be using
        will need both the form object and the helper string. This handles
        both the form object and parses out the helper string into attributes
        that templates can easily handle. """
    
    def __init__(self, form, helper):
        self.form = template.Variable(form)
        self.helper = template.Variable(helper)
    
    def get_render(self, context):
        actual_form = self.form.resolve(context)
        helper = self.helper.resolve(context)
        attrs = None
        if helper:
            attrs = helper.get_attr()
        form_class = ''
        form_id = ''
        inputs = []
        toggle_fields = set(())
        if attrs:
            form_method = attrs.get("form_method", 'POST')
            form_action = attrs.get("form_action", '')
            form_class = attrs.get("class", '')
            form_id = attrs.get("id", "")
            inputs = attrs.get('inputs', [])
            toggle_fields = attrs.get('toggle_fields', set(()))
        final_toggle_fields = []
        if toggle_fields:
            final_toggle_fields = []
            for field in actual_form:
                if field.auto_id in toggle_fields:
                    final_toggle_fields.append(field)
        
        if helper and helper.layout:
            form_html = helper.render_layout(actual_form)
        else:
            form_html = ""
        response_dict = {
                        'form':actual_form,
                        'form_html':form_html,
                        'form_action':form_action,
                        'form_method':form_method,
                        'attrs':attrs,
                        'form_class' : form_class,
                        'form_id' : form_id,
                        'inputs' : inputs,
                        'toggle_fields': final_toggle_fields
                        }
        c = Context(response_dict)
        return c
        

##################################################################
#
# Actual tags start here
#
##################################################################


@register.tag(name="uni_form")
def do_uni_form(parser, token):
    
    """
    You need to pass in at least the form object, and can also pass in the
    optional attrs string. Writing the attrs string is rather challenging so
    use of the objects found in uni_form.helpers is encouraged.
    
    form: The forms object to be rendered by the tag
    
    attrs (optional): A string of semi-colon seperated attributes that can be
    applied to theform in string format. They are used as follows.
    
    form_action: applied to the form action attribute. Can be a named url in 
    your urlconf that can be executed via the *url* default template tag or can
    simply point to another URL. 
    Defaults to empty::
        
        form_action=<my-form-action>
    
    form_method: applied to the form action attribute. Defaults to POST and the only available thing you can enter is GET.::
        
        form_method=<my-form-method>
    
    id: applied to the form as a whole. Defaults to empty::
        
        id=<my-form-id>
    
    class: add space seperated classes to the class list. Always starts with uniform::
        
        class=<my-first-custom-form-class> <my-custom-form-class>
    
    button: for adding of generic buttons. The name also becomes the slugified id::
        
        button=<my-custom-button-name>|<my-custom-button-value>
    
    submit: For adding of submt buttons. The name also becomes the slugified id::
        
        submit=<my-custom-submit-name>|<my-custom-submit-value>
    
    hidden: For adding of hidden buttons::
        
        hidden=<my-custom-hidden-name>|<my-custom-hidden-value>
    
    reset: For adding of reset buttons::
        
        reset=<my-custom-reset-name>|<my-custom-reset-value>

    
    Example::
        
        {% uni_form my-form my_helper %}
    
    """
    
    token = token.split_contents()
    
    form = token.pop(1)
    try:
        helper = token.pop(1)
    except IndexError:
        helper = None

    
    return UniFormNode(form, helper)
    

class UniFormNode(BasicNode):
    
    def render(self, context):
        
        c = self.get_render(context)
        
        template = get_template('uni_form/whole_uni_form.html')
        return template.render(c)
        

#################################
# uni_form scripts
#################################

@register.tag(name="uni_form_jquery")
def uni_form_jquery(parser, token):
    """
    toggle_field: For making fields designed to be toggled for editing add them
    by spaces. You must specify by field id (field.auto_id)::
        
        toggle_fields=<first_field>,<second_field>
    
    """
    
    token = token.split_contents()
    
    form = token.pop(1)
    try:
        attrs = token.pop(1)
    except IndexError:
        attrs = None

    
    return UniFormJqueryNode(form,attrs)

class UniFormJqueryNode(BasicNode):
    
    def render(self,context):
        
        c = self.get_render(context)
        
        template = get_template('uni_form/uni_form_jquery.html')
        return template.render(c)   

########NEW FILE########
__FILENAME__ = tests
from django import forms
from django.template import Context, Template
from django.template.loader import get_template_from_string
from django.test import TestCase

from uni_form.helpers import FormHelper, Submit, Reset, Hidden, Button

class TestForm(forms.Form):
    
    is_company = forms.CharField(label="company", required=False, widget=forms.CheckboxInput())
    email = forms.CharField(label="email", max_length=30, required=True, widget=forms.TextInput())
    password1 = forms.CharField(label="password", max_length=30, required=True, widget=forms.PasswordInput())
    password2 = forms.CharField(label="re-enter password", max_length=30, required=True, widget=forms.PasswordInput())
    first_name = forms.CharField(label="first name", max_length=30, required=True, widget=forms.TextInput())
    last_name = forms.CharField(label="last name", max_length=30, required=True, widget=forms.TextInput())


class TestBasicFunctionalityTags(TestCase):
    
    def setUp(self):
        pass
    
    def tearDown(self):
        pass
    
    def test_as_uni_form(self):
        
        # build the context
        c = Context({'form':TestForm()})
        
        # Simple form templare
        template = get_template_from_string("""
{% load uni_form_tags %}
{{ form|as_uni_form }}
        """)
        
        # render the form template
        html = template.render(c)
        
        self.assertTrue("<td>" not in html)
        self.assertTrue("id_is_company" in html)
    
    def test_uni_form_setup(self):
        
        c = Context()
        template = get_template_from_string("""
{% load uni_form_tags %}
{% uni_form_setup %}
        """)
        html = template.render(c)
        
        # Just look for file names because locations and names can change.
        self.assertTrue('uni-form-generic.css' in html)
        self.assertTrue('uni-form.css' in html)
        self.assertTrue('uni-form.jquery.js' in html)
        
class TestFormHelpers(TestCase):
    
    def setUp(self):
        pass
    
    def tearDown(self):
        pass    
    
    def test_uni_form_helper_inputs(self):
        
        form_helper = FormHelper()
        submit  = Submit('my-submit', 'Submit')
        reset   = Reset('my-reset', 'Reset')
        hidden  = Hidden('my-hidden', 'Hidden')
        button  = Button('my-button', 'Button')
        form_helper.add_input(submit)
        form_helper.add_input(reset)
        form_helper.add_input(hidden)
        form_helper.add_input(button)
        
        c = Context({'form':TestForm(),'form_helper':form_helper})        
        
        template = get_template_from_string("""
{% load uni_form_tags %}
{% uni_form form form_helper %}
        """)
        html = template.render(c)
        
        self.assertTrue('class="submit submitButton"' in html)
        self.assertTrue('id="submit-id-my-submit"' in html)        

        self.assertTrue('class="reset resetButton"' in html)
        self.assertTrue('id="reset-id-my-reset"' in html)        

        self.assertTrue('name="my-hidden"' in html)        

        self.assertTrue('class="button"' in html)
        self.assertTrue('id="button-id-my-button"' in html)        

    def test_uni_form_helper_generic_attributes(self):
        
        form_helper = FormHelper()    
        form_helper.form_id = 'this-form-rocks'
        form_helper.form_class = 'forms-that-rock'
        form_helper.form_method = 'GET'
    
        c = Context({'form':TestForm(),'form_helper':form_helper})            
        template = get_template_from_string("""
{% load uni_form_tags %}
{% uni_form form form_helper %}
        """)
        html = template.render(c)        

        good_response = """<form action="" class="uniForm forms-that-rock" method="POST" id="this-form-rocks" >"""
        
        self.assertTrue('<form action="" class="uniForm forms-that-rock" method="GET" id="this-form-rocks" >' in html)
########NEW FILE########
__FILENAME__ = manage
#!/usr/bin/env python

import sys


from django.core.management import execute_manager
from django.core.management import setup_environ, execute_from_command_line

try:
    import settings # Assumed to be in the same directory.
except ImportError:
    sys.stderr.write("Error: Can't find the file 'settings.py' in the directory containing %r. It appears you've customized things.\nYou'll have to run django-admin.py, passing it your settings module.\n(If the file settings.py does indeed exist, it's causing an ImportError somehow.)\n" % __file__)
    sys.exit(1)
    
sys.path.insert(0, settings.PROJECT_ROOT)    


setup_environ(settings)

if __name__ == "__main__":
    execute_from_command_line()

########NEW FILE########
__FILENAME__ = settings
# Django settings for test_project project.

import os.path

from os.path import join, abspath, dirname
PROJECT_ROOT = abspath(dirname(__file__))
PROJECT_ROOT = PROJECT_ROOT.replace('uni_form/tests/test_project','')


DEBUG = True
TEMPLATE_DEBUG = DEBUG

ADMINS = (
    # ('Your Name', 'your_email@domain.com'),
)

MANAGERS = ADMINS

DATABASE_ENGINE = ''           # 'postgresql_psycopg2', 'postgresql', 'mysql', 'sqlite3' or 'oracle'.
DATABASE_NAME = ''             # Or path to database file if using sqlite3.
DATABASE_USER = ''             # Not used with sqlite3.
DATABASE_PASSWORD = ''         # Not used with sqlite3.
DATABASE_HOST = ''             # Set to empty string for localhost. Not used with sqlite3.
DATABASE_PORT = ''             # Set to empty string for default. Not used with sqlite3.

# Local time zone for this installation. Choices can be found here:
# http://en.wikipedia.org/wiki/List_of_tz_zones_by_name
# although not all choices may be available on all operating systems.
# If running in a Windows environment this must be set to the same as your
# system time zone.
TIME_ZONE = 'America/Chicago'

# Language code for this installation. All choices can be found here:
# http://www.i18nguy.com/unicode/language-identifiers.html
LANGUAGE_CODE = 'en-us'

SITE_ID = 1

# If you set this to False, Django will make some optimizations so as not
# to load the internationalization machinery.
USE_I18N = True

# Absolute path to the directory that holds media.
# Example: "/home/media/media.lawrence.com/"
MEDIA_ROOT = ""

# URL that handles the media served from MEDIA_ROOT. Make sure to use a
# trailing slash if there is a path component (optional in other cases).
# Examples: "http://media.lawrence.com", "http://example.com/media/"
MEDIA_URL = ''

# URL prefix for admin media -- CSS, JavaScript and images. Make sure to use a
# trailing slash.
# Examples: "http://foo.com/media/", "/media/".
ADMIN_MEDIA_PREFIX = '/media/'

# Make this unique, and don't share it with anybody.
SECRET_KEY = 'towk(yx^x3ydpj&ifv&f07lil+g9wld5x48o=i(fo_9sf@1=%6'

# List of callables that know how to import templates from various sources.
TEMPLATE_LOADERS = (
    'django.template.loaders.filesystem.load_template_source',
    'django.template.loaders.app_directories.load_template_source',
#     'django.template.loaders.eggs.load_template_source',
)

MIDDLEWARE_CLASSES = (
    'django.middleware.common.CommonMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
)

ROOT_URLCONF = 'test_project.urls'

TEMPLATE_DIRS = (
    # Put strings here, like "/home/html/django_templates" or "C:/www/django/templates".
    # Always use forward slashes, even on Windows.
    # Don't forget to use absolute paths, not relative paths.
    os.path.join(PROJECT_ROOT, "uni_form", "media", "uni_form"),    
)

INSTALLED_APPS = (
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.sites',
    'test_app',
    'uni_form'
)

########NEW FILE########
__FILENAME__ = forms
from django import forms
from django.template.loader import render_to_string

from uni_form.helpers import FormHelper, Submit, Reset

from uni_form.helpers import Layout, Fieldset, Column, Row, HTML


class TestForm(forms.Form):
    
    character_field = forms.CharField(label="Character Field", help_text="I am help text", max_length=30, required=True, widget=forms.TextInput())
    url_field = forms.URLField(label='URL field', verify_exists=False, max_length=100, required=True, widget=forms.TextInput())
    textarea_field = forms.CharField(label='Textareafield', required=True, widget=forms.Textarea())
    hidden_field = forms.CharField(label='textarea_field', required=True, widget=forms.HiddenInput())


class HelperTestForm(TestForm):
    
    # Attach a formHelper to your forms class.
    helper = FormHelper()
    
    # Add in a class and id
    helper.form_id = 'this-form-rocks'
    helper.form_class = 'search'
    
    # add in a submit and reset button
    submit = Submit('enter','enter some data')
    helper.add_input(submit)
    reset = Reset('reset','reset button')
    helper.add_input(reset)



class LayoutTestForm(forms.Form):

    is_company = forms.CharField(label="company", required=False, widget=forms.CheckboxInput())    
    email = forms.CharField(label="email", max_length=30, required=True, widget=forms.TextInput())        
    password1 = forms.CharField(label="password", max_length=30, required=True, widget=forms.PasswordInput())
    password2 = forms.CharField(label="re-enter password", max_length=30, required=True, widget=forms.PasswordInput())    
    first_name = forms.CharField(label="first name", max_length=30, required=True, widget=forms.TextInput())        
    last_name = forms.CharField(label="last name", max_length=30, required=True, widget=forms.TextInput())            
    
    # Attach a formHelper to your forms class.
    helper = FormHelper()

    # create some HTML that you want in the page
    style = """
    <style>
        .formRow {
            color: red;
        }
    </style>
    
    """
    # create the layout object
    layout = Layout(
                    # first fieldset shows the company
                    Fieldset('', 'is_company'),
                    
                    # second fieldset shows the contact info
                    Fieldset('Contact details',
                            HTML(style),
                            'email',
                            Row('password1','password2'),
                            'first_name',
                            'last_name',
                             )
                    )

    helper.add_layout(layout)
                      
    submit = Submit('add','Add this contact')
    helper.add_input(submit)
                    

    
class ComplexLayoutTest(forms.Form):
    """
    TODO: get digi604 to make this work

    help_text = render_to_string("example/help_text.html")
    layout = Layout(Fieldset(_('Basic Settings'),
                             'title',
                             'type',
                             'available_date',
                                ),
                    Fieldset(_('Overview'),
                             Column(Fieldset(_('Object address'),
                                             Row('address', 'street_number'),
                                             Row('zip', 'city'),
                                             'area',
                                            ),
                                    Fieldset(_("Next public transport"),
                                             'train_station',
                                             Row('tram_station','tram_number'),
                                             Row('bus_station','bus_number'),
                                             ),
                                    ),
                             Column("is_for_rent",
                                    Fieldset(_("Rent"),
                                             'rent-price',
                                             ),
                                    Fieldset(_("Sell"),
                                             'buy_price',
                                             ),
                                    Fieldset(_("Measurements"),
                                             'floor_space',
                                             'room_height',
                                             'construction_year',
                                             ),
                             ),
                    Fieldset(_('Additional Function'),
                             HTML('<p class="tip">%s</p>' % unicode(help_text)),
                             'features',
                             ),
                    Fieldset(_("Description"),
                             "description")
                    )
    helper.add_layout(layout)
    """
########NEW FILE########
__FILENAME__ = models
from django.db import models

# Create your models here.

########NEW FILE########
__FILENAME__ = urls
from django.conf.urls.defaults import *



urlpatterns = patterns('',

    url(r'^view_helper/$', "test_app.views.view_helper", name='view_helper'),    
    url(r'^form_helper/$', "test_app.views.form_helper", name='form_helper'),        
    url(r'^layout_test/$', "test_app.views.layout_test", name='layout_test'),            
    url(r'^view_helper_set_action/$', "test_app.views.view_helper_set_action", name='set_action_test'),     
    
    
    )
########NEW FILE########
__FILENAME__ = views
# Create your views here.
from django.shortcuts import render_to_response
from django.template import RequestContext

from uni_form.helpers import FormHelper, Submit, Reset, Hidden

from test_app.forms import TestForm, HelperTestForm, LayoutTestForm

def basic_test(request):
    if request.method == "POST":
        form = TestForm(request.POST)
    else:
        form = TestForm()
    
    return render_to_response('test_app/test_template.html', {
        'form': form
    }, context_instance=RequestContext(request))    
    
def view_helper(request):
    # Create the form
    if request.method == "POST":
        form = TestForm(request.POST)
    else:
        form = TestForm()

    # create a formHelper
    helper = FormHelper()

    # Add in a class and id
    helper.form_id = 'this-form-rocks'
    helper.form_class = 'search'

    # add in a submit and reset button
    submit = Submit('search','search this site')
    helper.add_input(submit)
    reset = Reset('reset','reset button')
    helper.add_input(reset)
    hidden = Hidden('not-seen','hidden value stored here')
    helper.add_input(hidden)


    # create the response dictionary
    response_dictionary = {'form':form, 'helper': helper}
    
    return render_to_response('test_app/view_helper.html', 
        response_dictionary, 
        context_instance=RequestContext(request))   
        
def view_helper_set_action(request):

    # Create the form
    form = TestForm()

    # create a formHelper
    helper = FormHelper()

    # add in a submit and reset button
    submit = Submit('send-away','Send to other page')
    helper.add_input(submit)
    
    helper.form_action = 'view_helper'
    helper.form_method = 'GET'    

    # create the response dictionary
    response_dictionary = {'form':form, 'helper': helper}
    
    return render_to_response('test_app/view_helper.html', 
        response_dictionary, 
        context_instance=RequestContext(request))   


    
def form_helper(request):
    if request.method == "POST":
        form = HelperTestForm(request.POST)
    else:
        form = HelperTestForm()
    
    return render_to_response('test_app/form_helper.html', {
        'form': form
    }, context_instance=RequestContext(request))
    
def layout_test(request):
    if request.method == "POST":
        form = LayoutTestForm(request.POST)
    else:
        form = LayoutTestForm()
        
    return render_to_response('test_app/form_helper.html', {
        'form': form
    }, context_instance=RequestContext(request))
    
########NEW FILE########
__FILENAME__ = urls
from django.conf.urls.defaults import *

# Uncomment the next two lines to enable the admin:
# from django.contrib import admin
# admin.autodiscover()

urlpatterns = patterns('',
    # Example:
    url(r'^$', "test_app.views.basic_test", name='test_index'),    
    (r'^more/', include('test_app.urls')),

    

    # Uncomment the admin/doc line below and add 'django.contrib.admindocs' 
    # to INSTALLED_APPS to enable admin documentation:
    # (r'^admin/doc/', include('django.contrib.admindocs.urls')),

    # Uncomment the next line to enable the admin:
    # (r'^admin/(.*)', admin.site.root),
)

########NEW FILE########
__FILENAME__ = util
class BaseInput(object):
    """
        An base Input class to reduce the amount of code in the Input classes.
    """
    
    def __init__(self,name,value):
        self.name = name
        self.value = value
        

class Toggle(object):
    """
        A container for holder toggled items such as fields and buttons.
    """
    
    fields = []
    
    
########NEW FILE########
__FILENAME__ = admin
from models import *
from django.contrib import admin

admin.site.register(Profile)
admin.site.register(EmailVerify)




########NEW FILE########
__FILENAME__ = forms
import calendar
import datetime
import re
from django import forms
from django.utils.translation import ugettext_lazy as _

from auth.models import User
from sell.forms import ShippingDataForm
from core.thumbs import ImageWithThumbsField
from django.contrib.localflavor.us.forms import USStateField, USStateSelect

MONTH = [ (str(i+1),m) for i,m in enumerate(calendar.month_name[1:]) ]
DAY = [ (str(i),str(i)) for i in range(1,32) ]

class BidderForm(forms.Form):
#    first_name = forms.CharField(label=_("First name"), max_length=50, required=True) 
#    last_name = forms.CharField(label=_("Last name"), max_length=50, required=True)
#    street_address = forms.CharField(label=_("Street address"), max_length=80, required=True)
#    city = forms.CharField(label=_("City"), max_length=80, required=True)
#    state = forms.CharField(label=_("State / Province"), max_length=80, required=True)
#    zip = forms.CharField(label=_("ZIP / Portal code"), max_length=30, required=True)
#    country = forms.CharField(label=_("Country or region"), max_length=50, required=True)
#    phone = forms.CharField(label=_("Telephone number"), max_length=50, required=True)
    

    username = forms.RegexField(label=_("User ID"), max_length=30, regex=r'^\w+$', required=False,
        help_text = _("Required. 30 characters or fewer. Alphanumeric characters only (letters, digits and underscores)."),
        error_message = _("This value must contain only letters, numbers and underscores."))
    
    password1 = forms.CharField(label=_("Password"), widget=forms.PasswordInput)
    password2 = forms.CharField(label=_("Password confirmation"), widget=forms.PasswordInput)

    email = forms.EmailField(required=True)
#    re_email = forms.EmailField(required=True)

#    month = forms.ChoiceField(choices=MONTH, label=_("Month"))    
#    day = forms.ChoiceField(choices=DAY, label=_("Day"))    
#    year = forms.CharField(label=_("Year"))    

    def __init__(self, request=None, *args, **kwargs):
        self.request = request
        super(BidderForm, self).__init__(*args, **kwargs)
    
    def clean_username(self):
        #TODO: check
        username = self.cleaned_data["username"]
        username = username.strip()
        if username == "":
            raise forms.ValidationError(_("Username field can't be blank."))
        
        try:
            user = User.objects.get(username=username)
        except User.DoesNotExist:
            return username
        raise forms.ValidationError(_("A user with that username already exists."))

    def clean_email(self):
        #TODO: check
        email = self.cleaned_data["email"]
        try:
            user = User.objects.get(email=email)
        except User.DoesNotExist:
            return email
        raise forms.ValidationError(_("A user with that email already exists."))

    def clean_password2(self):
        password1 = self.cleaned_data.get("password1", "")
        password2 = self.cleaned_data["password2"]
        if password1 != password2:
            raise forms.ValidationError(_("The two password fields didn't match."))
        return password2

#    def clean_re_email(self):
#        email = self.cleaned_data.get("email", "")
#        re_email = self.cleaned_data["re_email"]
#        if email != re_email:
#            raise forms.ValidationError(_("The two email fields didn't match."))
#        return re_email
#
#    def clean_year(self):
#        day = self.cleaned_data.get('day','')
#        month = self.cleaned_data.get('month','')
#        year = self.cleaned_data.get('year','')
#        
#        if year == '':
#            raise forms.ValidationError(_("This field is required."))
#        try:
#            datetime.date(int(year),int(month),int(day))
#        except:
#            raise forms.ValidationError(_("Day is out of range for month."))
#        return year

class UserProfile(forms.Form):
    username = forms.RegexField(label=_("Username"), max_length=30, regex=r'^\w+$', required=False,
        error_message = _("This value must contain only letters, numbers and underscores."))
    first_name = forms.CharField(label=_("First name"), max_length=50, required=False) 
    last_name = forms.CharField(label=_("Last name"), max_length=50, required=False)
    phone = forms.CharField(label=_("Phone number"), max_length=80, required=False)
    street_address = forms.CharField(label=_("Street address"), max_length=80, required=False)
    city = forms.CharField(label=_("City"), max_length=80, required=False)
    state = USStateField(label=_("State / Province"), required=False, widget=USStateSelect)
    zip = forms.CharField(label=_("ZIP / Portal code"), max_length=30, required=False)
    country = forms.CharField(label=_("Country or region"), max_length=50, required=False)
    photo = ImageWithThumbsField(sizes=((100,100),(400,400)), crop=False)

    def __init__(self, user=None, *args, **kwargs):
        self.user = user
        super(UserProfile, self).__init__(*args, **kwargs)

    def clean_username(self):
        username = self.cleaned_data["username"]
        username = username.strip()
        if self.user.username == username:
            return username
        
        if username == "":
            raise forms.ValidationError(_("Username field can't be blank."))
        
        try:
            User.objects.get(username=username)
        except User.DoesNotExist:
            return username
        raise forms.ValidationError(_("A user with that username already exists."))

    def clean_zip(self):
        zip = self.cleaned_data.get("zip", "")
        if zip and not (re.match("[0-9]{5}(-[0-9]{4})?$", zip)):
            raise forms.ValidationError("Invalid Zip code. Valid formats are XXXXX or XXXXX-XXXX")
           
        return zip


########NEW FILE########
__FILENAME__ = 0001_initial
# encoding: utf-8
import datetime
from south.db import db
from south.v2 import SchemaMigration
from django.db import models

class Migration(SchemaMigration):

    def forwards(self, orm):
        
        # Adding model 'Profile'
        db.create_table('users_profile', (
            ('id', self.gf('django.db.models.fields.AutoField')(primary_key=True)),
            ('user', self.gf('django.db.models.fields.related.ForeignKey')(to=orm['auth.User'], unique=True)),
            ('street_address', self.gf('django.db.models.fields.CharField')(max_length=80, null=True, blank=True)),
            ('city', self.gf('django.db.models.fields.CharField')(max_length=80, null=True, blank=True)),
            ('state', self.gf('django.db.models.fields.CharField')(max_length=80, null=True, blank=True)),
            ('zip', self.gf('django.db.models.fields.CharField')(max_length=30, null=True, blank=True)),
            ('country', self.gf('django.db.models.fields.CharField')(max_length=50, null=True, blank=True)),
            ('phone', self.gf('django.db.models.fields.CharField')(max_length=50, null=True, blank=True)),
            ('birth', self.gf('django.db.models.fields.DateField')(null=True, blank=True)),
        ))
        db.send_create_signal('users', ['Profile'])

        # Adding model 'EmailVerify'
        db.create_table('users_emailverify', (
            ('id', self.gf('django.db.models.fields.AutoField')(primary_key=True)),
            ('user', self.gf('django.db.models.fields.related.OneToOneField')(to=orm['auth.User'], unique=True)),
            ('date', self.gf('django.db.models.fields.DateTimeField')(auto_now_add=True, blank=True)),
            ('code', self.gf('django.db.models.fields.CharField')(max_length=50)),
            ('mail', self.gf('django.db.models.fields.EmailField')(max_length=75)),
            ('user_activation', self.gf('django.db.models.fields.BooleanField')(default=False, blank=True)),
        ))
        db.send_create_signal('users', ['EmailVerify'])


    def backwards(self, orm):
        
        # Deleting model 'Profile'
        db.delete_table('users_profile')

        # Deleting model 'EmailVerify'
        db.delete_table('users_emailverify')


    models = {
        'auth.group': {
            'Meta': {'object_name': 'Group'},
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '80'}),
            'permissions': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['auth.Permission']", 'symmetrical': 'False', 'blank': 'True'})
        },
        'auth.permission': {
            'Meta': {'unique_together': "(('content_type', 'codename'),)", 'object_name': 'Permission'},
            'codename': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'content_type': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['contenttypes.ContentType']"}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '50'})
        },
        'auth.user': {
            'Meta': {'object_name': 'User'},
            'date_joined': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
            'email': ('django.db.models.fields.EmailField', [], {'max_length': '75'}),
            'first_name': ('django.db.models.fields.CharField', [], {'max_length': '30', 'blank': 'True'}),
            'groups': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['auth.Group']", 'symmetrical': 'False', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'is_active': ('django.db.models.fields.BooleanField', [], {'default': 'True', 'blank': 'True'}),
            'is_staff': ('django.db.models.fields.BooleanField', [], {'default': 'False', 'blank': 'True'}),
            'is_superuser': ('django.db.models.fields.BooleanField', [], {'default': 'False', 'blank': 'True'}),
            'last_login': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
            'last_name': ('django.db.models.fields.CharField', [], {'max_length': '30', 'blank': 'True'}),
            'password': ('django.db.models.fields.CharField', [], {'max_length': '128'}),
            'user_permissions': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['auth.Permission']", 'symmetrical': 'False', 'blank': 'True'}),
            'username': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '32'})
        },
        'contenttypes.contenttype': {
            'Meta': {'unique_together': "(('app_label', 'model'),)", 'object_name': 'ContentType', 'db_table': "'django_content_type'"},
            'app_label': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'model': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '100'})
        },
        'users.emailverify': {
            'Meta': {'object_name': 'EmailVerify'},
            'code': ('django.db.models.fields.CharField', [], {'max_length': '50'}),
            'date': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'mail': ('django.db.models.fields.EmailField', [], {'max_length': '75'}),
            'user': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['auth.User']", 'unique': 'True'}),
            'user_activation': ('django.db.models.fields.BooleanField', [], {'default': 'False', 'blank': 'True'})
        },
        'users.profile': {
            'Meta': {'object_name': 'Profile'},
            'birth': ('django.db.models.fields.DateField', [], {'null': 'True', 'blank': 'True'}),
            'city': ('django.db.models.fields.CharField', [], {'max_length': '80', 'null': 'True', 'blank': 'True'}),
            'country': ('django.db.models.fields.CharField', [], {'max_length': '50', 'null': 'True', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'phone': ('django.db.models.fields.CharField', [], {'max_length': '50', 'null': 'True', 'blank': 'True'}),
            'state': ('django.db.models.fields.CharField', [], {'max_length': '80', 'null': 'True', 'blank': 'True'}),
            'street_address': ('django.db.models.fields.CharField', [], {'max_length': '80', 'null': 'True', 'blank': 'True'}),
            'user': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['auth.User']", 'unique': 'True'}),
            'zip': ('django.db.models.fields.CharField', [], {'max_length': '30', 'null': 'True', 'blank': 'True'})
        }
    }

    complete_apps = ['users']

########NEW FILE########
__FILENAME__ = 0002_auto__add_field_profile_photo
# encoding: utf-8
import datetime
from south.db import db
from south.v2 import SchemaMigration
from django.db import models

class Migration(SchemaMigration):

    def forwards(self, orm):
        
        # Adding field 'Profile.photo'
        db.add_column('users_profile', 'photo', self.gf('django.db.models.fields.files.ImageField')(max_length=100, null=True, blank=True), keep_default=False)


    def backwards(self, orm):
        
        # Deleting field 'Profile.photo'
        db.delete_column('users_profile', 'photo')


    models = {
        'auth.group': {
            'Meta': {'object_name': 'Group'},
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '80'}),
            'permissions': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['auth.Permission']", 'symmetrical': 'False', 'blank': 'True'})
        },
        'auth.permission': {
            'Meta': {'unique_together': "(('content_type', 'codename'),)", 'object_name': 'Permission'},
            'codename': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'content_type': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['contenttypes.ContentType']"}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '50'})
        },
        'auth.user': {
            'Meta': {'object_name': 'User'},
            'date_joined': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
            'email': ('django.db.models.fields.EmailField', [], {'max_length': '75'}),
            'first_name': ('django.db.models.fields.CharField', [], {'max_length': '30', 'blank': 'True'}),
            'groups': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['auth.Group']", 'symmetrical': 'False', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'is_active': ('django.db.models.fields.BooleanField', [], {'default': 'True', 'blank': 'True'}),
            'is_staff': ('django.db.models.fields.BooleanField', [], {'default': 'False', 'blank': 'True'}),
            'is_superuser': ('django.db.models.fields.BooleanField', [], {'default': 'False', 'blank': 'True'}),
            'last_login': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
            'last_name': ('django.db.models.fields.CharField', [], {'max_length': '30', 'blank': 'True'}),
            'password': ('django.db.models.fields.CharField', [], {'max_length': '128'}),
            'user_permissions': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['auth.Permission']", 'symmetrical': 'False', 'blank': 'True'}),
            'username': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '32'})
        },
        'contenttypes.contenttype': {
            'Meta': {'unique_together': "(('app_label', 'model'),)", 'object_name': 'ContentType', 'db_table': "'django_content_type'"},
            'app_label': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'model': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '100'})
        },
        'users.emailverify': {
            'Meta': {'object_name': 'EmailVerify'},
            'code': ('django.db.models.fields.CharField', [], {'max_length': '50'}),
            'date': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'mail': ('django.db.models.fields.EmailField', [], {'max_length': '75'}),
            'user': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['auth.User']", 'unique': 'True'}),
            'user_activation': ('django.db.models.fields.BooleanField', [], {'default': 'False', 'blank': 'True'})
        },
        'users.profile': {
            'Meta': {'object_name': 'Profile'},
            'birth': ('django.db.models.fields.DateField', [], {'null': 'True', 'blank': 'True'}),
            'city': ('django.db.models.fields.CharField', [], {'max_length': '80', 'null': 'True', 'blank': 'True'}),
            'country': ('django.db.models.fields.CharField', [], {'max_length': '50', 'null': 'True', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'phone': ('django.db.models.fields.CharField', [], {'max_length': '50', 'null': 'True', 'blank': 'True'}),
            'photo': ('django.db.models.fields.files.ImageField', [], {'max_length': '100', 'null': 'True', 'blank': 'True'}),
            'state': ('django.db.models.fields.CharField', [], {'max_length': '80', 'null': 'True', 'blank': 'True'}),
            'street_address': ('django.db.models.fields.CharField', [], {'max_length': '80', 'null': 'True', 'blank': 'True'}),
            'user': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['auth.User']", 'unique': 'True'}),
            'zip': ('django.db.models.fields.CharField', [], {'max_length': '30', 'null': 'True', 'blank': 'True'})
        }
    }

    complete_apps = ['users']

########NEW FILE########
__FILENAME__ = 0003_auto__chg_field_profile_user__chg_field_profile_photo__add_field_email
# encoding: utf-8
import datetime
from south.db import db
from south.v2 import SchemaMigration
from django.db import models

class Migration(SchemaMigration):

    def forwards(self, orm):
        
        # Changing field 'Profile.user'
        db.alter_column('users_profile', 'user_id', self.gf('django.db.models.fields.related.OneToOneField')(to=orm['auth.User'], unique=True))

        # Changing field 'Profile.photo'
        db.alter_column('users_profile', 'photo', self.gf('core.thumbs.ImageWithThumbsField')(max_length=100))

        # Adding field 'EmailVerify.verified'
        db.add_column('users_emailverify', 'verified', self.gf('django.db.models.fields.BooleanField')(default=False, blank=True), keep_default=False)


    def backwards(self, orm):
        
        # Changing field 'Profile.user'
        db.alter_column('users_profile', 'user_id', self.gf('django.db.models.fields.related.ForeignKey')(to=orm['auth.User'], unique=True))

        # Changing field 'Profile.photo'
        db.alter_column('users_profile', 'photo', self.gf('django.db.models.fields.files.ImageField')(max_length=100, null=True, blank=True))

        # Deleting field 'EmailVerify.verified'
        db.delete_column('users_emailverify', 'verified')


    models = {
        'auth.group': {
            'Meta': {'object_name': 'Group'},
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '80'}),
            'permissions': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['auth.Permission']", 'symmetrical': 'False', 'blank': 'True'})
        },
        'auth.permission': {
            'Meta': {'unique_together': "(('content_type', 'codename'),)", 'object_name': 'Permission'},
            'codename': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'content_type': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['contenttypes.ContentType']"}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '50'})
        },
        'auth.user': {
            'Meta': {'object_name': 'User'},
            'date_joined': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
            'email': ('django.db.models.fields.EmailField', [], {'max_length': '75'}),
            'first_name': ('django.db.models.fields.CharField', [], {'max_length': '30', 'blank': 'True'}),
            'groups': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['auth.Group']", 'symmetrical': 'False', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'is_active': ('django.db.models.fields.BooleanField', [], {'default': 'True', 'blank': 'True'}),
            'is_staff': ('django.db.models.fields.BooleanField', [], {'default': 'False', 'blank': 'True'}),
            'is_superuser': ('django.db.models.fields.BooleanField', [], {'default': 'False', 'blank': 'True'}),
            'last_login': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
            'last_name': ('django.db.models.fields.CharField', [], {'max_length': '30', 'blank': 'True'}),
            'password': ('django.db.models.fields.CharField', [], {'max_length': '128'}),
            'user_permissions': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['auth.Permission']", 'symmetrical': 'False', 'blank': 'True'}),
            'username': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '32'})
        },
        'contenttypes.contenttype': {
            'Meta': {'unique_together': "(('app_label', 'model'),)", 'object_name': 'ContentType', 'db_table': "'django_content_type'"},
            'app_label': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'model': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '100'})
        },
        'users.emailverify': {
            'Meta': {'object_name': 'EmailVerify'},
            'code': ('django.db.models.fields.CharField', [], {'max_length': '50'}),
            'date': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'mail': ('django.db.models.fields.EmailField', [], {'max_length': '75'}),
            'user': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['auth.User']", 'unique': 'True'}),
            'user_activation': ('django.db.models.fields.BooleanField', [], {'default': 'False', 'blank': 'True'}),
            'verified': ('django.db.models.fields.BooleanField', [], {'default': 'False', 'blank': 'True'})
        },
        'users.profile': {
            'Meta': {'object_name': 'Profile'},
            'birth': ('django.db.models.fields.DateField', [], {'null': 'True', 'blank': 'True'}),
            'city': ('django.db.models.fields.CharField', [], {'max_length': '80', 'null': 'True', 'blank': 'True'}),
            'country': ('django.db.models.fields.CharField', [], {'max_length': '50', 'null': 'True', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'phone': ('django.db.models.fields.CharField', [], {'max_length': '50', 'null': 'True', 'blank': 'True'}),
            'photo': ('core.thumbs.ImageWithThumbsField', [], {'max_length': '100'}),
            'state': ('django.db.models.fields.CharField', [], {'max_length': '80', 'null': 'True', 'blank': 'True'}),
            'street_address': ('django.db.models.fields.CharField', [], {'max_length': '80', 'null': 'True', 'blank': 'True'}),
            'user': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['auth.User']", 'unique': 'True'}),
            'zip': ('django.db.models.fields.CharField', [], {'max_length': '30', 'null': 'True', 'blank': 'True'})
        }
    }

    complete_apps = ['users']

########NEW FILE########
__FILENAME__ = 0004_auto__chg_field_profile_photo
# encoding: utf-8
import datetime
from south.db import db
from south.v2 import SchemaMigration
from django.db import models

class Migration(SchemaMigration):

    def forwards(self, orm):
        
        # Changing field 'Profile.photo'
        db.alter_column('users_profile', 'photo', self.gf('core.thumbs.ImageWithThumbsField')(max_length=100, null=True, blank=True))


    def backwards(self, orm):
        
        # Changing field 'Profile.photo'
        db.alter_column('users_profile', 'photo', self.gf('core.thumbs.ImageWithThumbsField')(max_length=100))


    models = {
        'auth.group': {
            'Meta': {'object_name': 'Group'},
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '80'}),
            'permissions': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['auth.Permission']", 'symmetrical': 'False', 'blank': 'True'})
        },
        'auth.permission': {
            'Meta': {'unique_together': "(('content_type', 'codename'),)", 'object_name': 'Permission'},
            'codename': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'content_type': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['contenttypes.ContentType']"}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '50'})
        },
        'auth.user': {
            'Meta': {'object_name': 'User'},
            'date_joined': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
            'email': ('django.db.models.fields.EmailField', [], {'max_length': '75', 'blank': 'True'}),
            'first_name': ('django.db.models.fields.CharField', [], {'max_length': '30', 'blank': 'True'}),
            'groups': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['auth.Group']", 'symmetrical': 'False', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'is_active': ('django.db.models.fields.BooleanField', [], {'default': 'True', 'blank': 'True'}),
            'is_staff': ('django.db.models.fields.BooleanField', [], {'default': 'False', 'blank': 'True'}),
            'is_superuser': ('django.db.models.fields.BooleanField', [], {'default': 'False', 'blank': 'True'}),
            'last_login': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
            'last_name': ('django.db.models.fields.CharField', [], {'max_length': '30', 'blank': 'True'}),
            'password': ('django.db.models.fields.CharField', [], {'max_length': '128'}),
            'user_permissions': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['auth.Permission']", 'symmetrical': 'False', 'blank': 'True'}),
            'username': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '30'})
        },
        'contenttypes.contenttype': {
            'Meta': {'unique_together': "(('app_label', 'model'),)", 'object_name': 'ContentType', 'db_table': "'django_content_type'"},
            'app_label': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'model': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '100'})
        },
        'users.emailverify': {
            'Meta': {'object_name': 'EmailVerify'},
            'code': ('django.db.models.fields.CharField', [], {'max_length': '50'}),
            'date': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'mail': ('django.db.models.fields.EmailField', [], {'max_length': '75'}),
            'user': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['auth.User']", 'unique': 'True'}),
            'user_activation': ('django.db.models.fields.BooleanField', [], {'default': 'False', 'blank': 'True'}),
            'verified': ('django.db.models.fields.BooleanField', [], {'default': 'False', 'blank': 'True'})
        },
        'users.profile': {
            'Meta': {'object_name': 'Profile'},
            'birth': ('django.db.models.fields.DateField', [], {'null': 'True', 'blank': 'True'}),
            'city': ('django.db.models.fields.CharField', [], {'max_length': '80', 'null': 'True', 'blank': 'True'}),
            'country': ('django.db.models.fields.CharField', [], {'max_length': '50', 'null': 'True', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'phone': ('django.db.models.fields.CharField', [], {'max_length': '50', 'null': 'True', 'blank': 'True'}),
            'photo': ('core.thumbs.ImageWithThumbsField', [], {'max_length': '100', 'null': 'True', 'blank': 'True'}),
            'state': ('django.db.models.fields.CharField', [], {'max_length': '80', 'null': 'True', 'blank': 'True'}),
            'street_address': ('django.db.models.fields.CharField', [], {'max_length': '80', 'null': 'True', 'blank': 'True'}),
            'user': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['auth.User']", 'unique': 'True'}),
            'zip': ('django.db.models.fields.CharField', [], {'max_length': '30', 'null': 'True', 'blank': 'True'})
        }
    }

    complete_apps = ['users']

########NEW FILE########
__FILENAME__ = models
from django.db import models
from django.dispatch import receiver

from auth.models import User
from sell.models import Payment, Sell, Cart
from core.thumbs import ImageWithThumbsField

class Profile(models.Model):
    user = models.OneToOneField(User)
    street_address = models.CharField(max_length=80, blank=True, null=True)
    city = models.CharField(max_length=80, blank=True, null=True)
    state = models.CharField(max_length=80, blank=True, null=True)
    zip = models.CharField(max_length=30, blank=True, null=True)
    country = models.CharField(max_length=50, blank=True, null=True)
    phone = models.CharField(max_length=50, blank=True, null=True)
    birth = models.DateField(blank=True, null=True)
    photo = ImageWithThumbsField(upload_to='images', sizes=((100,100),((128,135)),(400,400)), blank=True, null=True)
    #photo = models.ImageField(upload_to='images', blank=True, null=True)
    
    def get_cart(self, shop):
        try:
            cart = Cart.objects.filter(shop=shop).filter(bidder=self.user).get()
        except Cart.DoesNotExist:
            raise Exception("Profile %s don't have a Cart associated yet!" % self)
        return cart

    def get_sell(self):
        try:
            payment = Payment.objects.filter(sell__bidder=self.user, state_actual__state='PE').get()
            return payment.sell
        except Payment.DoesNotExist:
            return Sell.new_sell(self.shop, self.user)

    def set_subscription_plan(self, plan_id, subscription_id):
        from subscriptions.models import Subscription, SubscriptionPlan
        
        subscription_plan = SubscriptionPlan.objects.filter(plan_id=plan_id).get()
        subscription = Subscription(owner=self, subscription_id=subscription_id, plan=subscription_plan)
        subscription.save()
    
    def update_user_info(self, shipping_form):
        self.user.first_name = shipping_form.cleaned_data['first_name']
        self.user.last_name = shipping_form.cleaned_data['last_name']
        self.user.save()
    
    def update_shipping_info(self, shipping_form):
        self.update_user_info(shipping_form)
        self.street_address = shipping_form.cleaned_data['street_address']
        self.city = shipping_form.cleaned_data['city']
        self.state = shipping_form.cleaned_data['state']
        self.zip = shipping_form.cleaned_data['zip']
        self.country = shipping_form.cleaned_data['country']
        self.save()

    
    def __unicode__(self):
        return "Profile<%s>" % (self.user.username)

class EmailVerify(models.Model):
    user = models.OneToOneField(User)
    date = models.DateTimeField(auto_now_add=True)
    code = models.CharField(max_length=50)
    mail = models.EmailField()
    user_activation = models.BooleanField(default=False)
    verified = models.BooleanField(default=False)
    
    def generate_code(self):
        """
           Generate a random code for validation 
        """
        import uuid
        
        while True:
            code = str(uuid.uuid4())
            try:
                EmailVerify.objects.filter("code =", code).get()
            except:
                self.code = code
                break
        self.save()
        return self.code
    
@receiver(models.signals.post_save, sender=User)
def check_profile(sender, **kwargs):
    try:
        Profile.objects.get(user=kwargs['instance'])
    except Profile.DoesNotExist:
        profile = Profile(user=kwargs['instance'])
        profile.save()

########NEW FILE########
__FILENAME__ = users_tags
import datetime
import logging

from django import template
from django.utils.translation import ugettext as _

from sell.models import Cart

register = template.Library()

@register.filter
def is_admin_shop(user, shop):
    if user.is_authenticated():
        return shop.admin == user
    else:
        return False


@register.filter
def is_bidder(shop, user):
    #return user.is_authenticated() and (user.is_superuser == False and user.is_staff == False)
    return user.is_authenticated() and not is_owner(shop, user)

@register.filter
def is_owner(shop, user):
    return user.is_authenticated and shop.is_admin(user)


@register.filter
def total_cart_items(user, shop):
    cart = Cart.objects.filter(shop=shop, bidder=user).get()
    return cart.total_items()
    
@register.filter
def ago(user):
    time = datetime.datetime.now() - user.last_login
    days = time.days
    s = time.seconds
    hours = s // 3600 
    s = s - (hours * 3600)
    minutes = s // 60
    #seconds = s - (minutes * 60)
    if days > 0:
        if days == 1:
            result = '%s day ' % days
        else:
            result = '%s days ' % days

        if hours == 1:
            result += '%s hour' % hours
        else:
            result += '%s hours' % hours
        #result = '%sd %sh' % (days, hours)
    elif hours > 0:
        if hours == 1:
            result = '%s hour ' % hours
        else:
            result = '%s hours ' % hours

        if minutes == 1:
            result += '%s minute' % minutes
        else:
            result += '%s minutes' % minutes
        #result = '%sh %sm' % (hours, minutes)
    else:
        if minutes == 0:
            return _("Now login")
        elif minutes == 1:
            result = '%s minute' % minutes
        else:
            result = '%s minutes' % minutes
            
    return _("Latest activity %s ago" % result)
    
    return user.is_authenticated() and (user.is_superuser == False and user.is_staff == False)
########NEW FILE########
__FILENAME__ = urls
from django.conf.urls.defaults import *

urlpatterns = patterns('',
    url(r'^confirmemail/(?P<code>[\d\w\-]+)/$', 'users.views.confirmemail', name='confirmemail'),
    url(r'^re_send_mail/(?P<user_id>[\d]+)/$', 'users.views.re_send_mail', name='re_send_mail'),
    url(r'^welcome/$', 'users.views.welcome', name='welcome'),
)
########NEW FILE########
__FILENAME__ = views
import datetime
import logging

from django.conf import settings
from django.core.mail import EmailMultiAlternatives
from django.core.urlresolvers import reverse
from django.template import RequestContext
from django.http import HttpResponseRedirect, HttpResponse
from django.shortcuts import render_to_response #, get_object_or_404
from django.template import loader
from django.utils.translation import ugettext as _

#from django.core.paginator import Paginator, InvalidPage, EmptyPage

from auth.models import User
from bidding.views import my_render
from core.decorators import shop_required
from sell.models import Cart

from forms import BidderForm
from models import Profile, EmailVerify

@shop_required
def register(request):
    #TODO: transaction
    form = BidderForm(request, request.POST or None)
    if form.is_valid():
        #Generate user
        user = User.objects.create_user(form.cleaned_data["username"],
                                        form.cleaned_data["email"], 
                                        form.cleaned_data["password1"])
#        user.first_name = form.cleaned_data["first_name"]
#        user.last_name = form.cleaned_data["last_name"]
#        user.is_active = False
        
        
        user.save()
        
#        """ Set cart """
#        cart = Cart(bidder=user)
#        cart.save()
        
        """ Set profile """
        profile = Profile(user=user)
        
#        profile.street_address = form.cleaned_data["street_address"]
#        profile.city = form.cleaned_data["city"]
#        profile.state = form.cleaned_data["state"]
#        profile.zip = form.cleaned_data["zip"]
#        profile.country = form.cleaned_data["country"]
#        profile.phone = form.cleaned_data["phone"]
#        profile.photo = form.cleaned_data["photo"]
#        profile.birth = datetime.date(
#                      int(form.cleaned_data['year']),
#                      int(form.cleaned_data['month']),
#                      int(form.cleaned_data['day']),
#                      )

        profile.save()

        """ Send mail to confirm account """
        email_verify = EmailVerify(user=user, user_activation=True)
        code = email_verify.generate_code()
        email_verify.save()
        
        #send_mail_account_confirmation(user, email_verify.code, request.shop.name_shop(), request.get_host())        

        return HttpResponseRedirect(reverse('confirmemail', args=[code]))
                    
        #return HttpResponseRedirect(reverse('welcome'))
    
    print form.errors
    
    t = loader.get_template('users/blocks/register.html')
    c = RequestContext(request, {'form': form})
    block_register = (t.render(c))
    return HttpResponse(my_render(request, {'register': block_register,
                                         'page_title': 'Register',
                                         'page_description': 'Register' 
                                         }, 'register'))
    
#    return render_to_response('users/register.html', 
#                              {'form': form},
#                              RequestContext(request))



def send_mail_account_confirmation(user, code, shop_name, site_url):
    """
        Send message to the user to confirm your account
    """
    link = "http://%s/users/confirmemail/%s/" % (site_url , code)
    
    subject = "%s Account Confirmation" % shop_name
    
    
    
    text_content = _("""
    Hi %(first_name)s %(last_name)s,
    
    You recently registered for %(shop_name)s. Please confirm your account by clicking this link:
    %(link)s
                       
    Thanks.
                       
    %(shop_name)s Team.""") % {'first_name': user.first_name, 'last_name': user.last_name, 'link': link, 'shop_name': shop_name} 
    
    msg = EmailMultiAlternatives(subject, text_content, settings.EMAIL_FROM, [user.email, settings.EMAIL_FROM])
    try:
        msg.send()
    except:
        logging.exception("failure sending mail")
        
        
def confirmemail(request, code):
    try:
        verify = EmailVerify.objects.filter(code = code).get()
        if not verify.user_activation:
            request.flash['message'] = _("Account verification failed")
            request.flash['severity'] = "error"
            return HttpResponseRedirect(reverse('welcome'))
        else:
            user = verify.user
            user.is_active = True
            user.save()
            verify.delete()
            
            from auth import load_backend, login
            if not hasattr(user, 'backend'):
                for backend in settings.AUTHENTICATION_BACKENDS:
                    if user == load_backend(backend).get_user(user.pk):
                        user.backend = backend
                        break
            if hasattr(user, 'backend'):
                login(request, user)

            request.flash['message'] = unicode(_("Welcome, you are register now."))
            request.flash['severity'] = "success"

            return HttpResponseRedirect('/')
#            return render_to_response('users/welcome.html', {},
#                                      RequestContext(request))
    except EmailVerify.DoesNotExist:
        request.flash['message'] = _("Account verification failed")
        request.flash['severity'] = "error"
        return HttpResponseRedirect(reverse('welcome'))


@shop_required
def welcome(request):
    #def welcome(request, template_name='users/welcome.html'):
#    t = loader.get_template('users/blocks/welcome.html')
#    c = RequestContext(request, {})
#    block_welcome = (t.render(c))
    return HttpResponse(my_render(request, {'name_shop': request.shop.name_shop,
                                            'page_title': 'Welcome',
                                            'page_description': 'Welcome',                                          
                                           }, 'welcome'))

    #return render_to_response(template_name,{},RequestContext(request))


@shop_required
def re_send_mail(request, user_id):
    """
        re-send the email verification email 
    """
    user = User.objects.get(pk=user_id)
    try:
        verify = EmailVerify.objects.filter(user = user).get()
        verify.delete()
    except EmailVerify.DoesNotExist:
        pass
    email_verify = EmailVerify(user=user, user_activation=True)
    email_verify.generate_code()
    email_verify.save()
    send_mail_account_confirmation(user, email_verify.code, request.shop.name_shop(), request.get_host())        
    return HttpResponseRedirect(reverse('welcome'))        

########NEW FILE########
__FILENAME__ = cron
#!/usr/bin/env python
# -*- coding: utf-8 -*-
import os

os.environ['DJANGO_SETTINGS_MODULE'] = 'settings'

from django.core.management import setup_environ

#from django.db import transaction

import datetime
import logging

def minute_update():
    try:
        from auctions.models import AuctionSession
        sessions = AuctionSession.objects.filter(end__lte=datetime.datetime.now())
        for session in sessions:
            logging.info("Session Finished: %s" % session)
            lots = session.lot_set.all()
            for lot in lots:
                logging.info("\t> Lot: %s, state=%s" %(lot, lot.state))
                if lot.state == 'A':
                    if len(lot.bidhistory_set.all()) > 0 and lot.reserve_has_been_met():
                        lot.sold()
                        logging.info("\t\tLot marked as sold")
                    else:
                        lot.didnt_sell()
                        logging.info("\t\tLot marked as didn't sell")
                    lot.save()
    
        logging.info(datetime.datetime.now())
    except Exception, e:
        logging.info(e)
#    transaction.commit_unless_managed()

if __name__ == "__main__":
    import settings
    setup_environ(settings)
    
    minute_update()
########NEW FILE########
__FILENAME__ = cron_credit_card_expired_reminder
#!/usr/bin/env python
# -*- coding: utf-8 -*-
import os
import logging
import datetime

os.environ['DJANGO_SETTINGS_MODULE'] = 'settings'

from django.core.management import setup_environ
from django.core.mail import send_mail, EmailMessage
#from django.db import transaction

import settings
setup_environ(settings)

from shops.models import Shop

"""
This cron sends an email to those users that have their credit card expired.
It should run once a day. At the midnight
"""
def send_credit_card_expired_reminder():
    
    shops = Shop.objects.all()
    today = datetime.date.today()
    for shop in shops:
        
        try:
            billing = shop.billing_info()
            if not billing:
                msg = "Missing Billing Info Data. Shop %s has not billing info attached. Please go to admin and create one. Fill the entity with the same fields saved on braintree" % shop
                raise Exception(msg)
            
            cc = billing.credit_card()
            if not cc:
                msg = "Can't get credit card info, check if customer_id for shop %s in ShopBillingInfo is correct (not undefined)." % shop
                raise Exception(msg)
            
            expiration_date= cc['expiration_date']
            cc_type = cc['card_type']
            cc_masked = cc['masked_number']
            
            expired = False
            
            month, year = expiration_date.split("/")
            date = datetime.date(int(year), int(month), 1)
            expired = date < today
            
            if expired:
                msg = "\nWe have detected that your credit card - %s (%s) -  is expired. Please go to your Shop Admin Console and update your credit card information." % (cc_type, cc_masked)
                mail = EmailMessage(subject='Credit Card Expired',
                                    body=msg,
                                    from_email=settings.EMAIL_FROM,
                                    to=[shop.owner().email],
                                    headers={'X-SMTPAPI': '{\"category\": \"Credit Card Expired\"}'})
                mail.send(fail_silently=True)
#                send_mail('Credit Card Expired', msg, settings.EMAIL_FROM, [shop.owner().email], fail_silently=True)
                
        except Exception, e:
            logging.critical(e)
            mail = EmailMessage(subject='Error when trying to send email notifying that customer have card expired!',
                                body=e,
                                from_email=settings.EMAIL_FROM,
                                to=[mail for (name, mail) in settings.STAFF],
                                headers={'X-SMTPAPI': '{\"category\": \"Error\"}'})
            mail.send(fail_silently=True)
#            send_mail('Error when trying to send email notifying that customer have card expired!', e , settings.EMAIL_FROM, [mail for (name, mail) in settings.STAFF], fail_silently=True)


if __name__ == "__main__":
    send_credit_card_expired_reminder()
########NEW FILE########
__FILENAME__ = cron_daily_transactions
#!/usr/bin/env python
# -*- coding: utf-8 -*-
import os
import logging
import datetime
import decimal

os.environ['DJANGO_SETTINGS_MODULE'] = 'settings'

from django.core.management import setup_environ
from django.core.mail import send_mail, EmailMessage
#from django.db import transaction

import settings
setup_environ(settings)

from payments.gateways.braintreegw import BraintreeGateway
from subscriptions.models import Subscription

"""
This cron sends an email with all those transactions performed today, ordered by status (declined, failed, settled....)
"""
def send_daily_transactions_notifications():
    gw = BraintreeGateway(settings.MERCHANT_ID, settings.PUBLIC_KEY, settings.PRIVATE_KEY)
    today = datetime.datetime.today()
    transactions = gw.get_transactions(today)
    try:
        msg = "This a daily transaction summary [%s]\n" % today
        msg = msg + "===================================================="
        for key in transactions.iterkeys():
            
            total = 0
            t_list = transactions[key]
            
            msg += "\n" + "[%s] transactions (with status %s) were found" % (len(t_list), key) + "\n\n"
            for transaction in t_list:
                msg += "\t transaction_id : %s\n" % transaction.id
                msg += "\t type : %s\n" % transaction.type
                msg += "\t amount : u$s %s\n" % transaction.amount
                msg += "\t subscription_id : %s\n" % transaction.subscription_id
                for key in transaction.customer.keys():
                    val = transaction.customer[key]
                    if val:
                        msg += "\t customer_%s : %s\n" % (key, transaction.customer[key])
                total += decimal.Decimal(transaction.amount)
                msg += "\t - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n"
            msg += "\nTOTAL : u$s %s\n" % total     
            msg += "===============================================================\n"
        
        mail = EmailMessage(subject='Daily Transaction Statuses',
                            body=msg,
                            from_email=settings.EMAIL_FROM,
                            to=[mail for (name, mail) in settings.STAFF],
                            headers={'X-SMTPAPI': '{\"category\": \"Daily Transaction Statuses\"}'})
        mail.send(fail_silently=True)    
#        send_mail('Daily Transaction Statuses', msg, settings.EMAIL_FROM, [mail for (name, mail) in settings.STAFF], fail_silently=True)
        
        logging.debug(msg)
    except Exception, e:
        mail = EmailMessage(subject='Error when trying to get daily transaction statuses',
                            body=e,
                            from_email=settings.EMAIL_FROM,
                            to=[mail for (name, mail) in settings.STAFF],
                            headers={'X-SMTPAPI': '{\"category\": \"Error\"}'})
        mail.send(fail_silently=True)
#        send_mail('Error when trying to get daily transaction statuses', e , settings.EMAIL_FROM, [mail for (name, mail) in settings.STAFF], fail_silently=True)


if __name__ == "__main__":
    send_daily_transactions_notifications()
########NEW FILE########
__FILENAME__ = cron_past_due
#!/usr/bin/env python
# -*- coding: utf-8 -*-
import os
import logging

os.environ['DJANGO_SETTINGS_MODULE'] = 'settings'

from django.core.management import setup_environ
from django.core.mail import send_mail, EmailMessage
#from django.db import transaction

import settings
setup_environ(settings)

from payments.gateways.braintreegw import BraintreeGateway
from subscriptions.models import Subscription

def send_past_due_notification():
    gw = BraintreeGateway(settings.MERCHANT_ID, settings.PUBLIC_KEY, settings.PRIVATE_KEY)
    past_due_days = 2
    subscriptions = gw.get_past_due_subscriptions(past_due_days)
    logging.info("%s subscriptions were found with status past due" % len(subscriptions))
    for subscription in subscriptions:
        try:
            local_subscription = Subscription.objects.filter(subscription_id=subscription.id).get()
            #Send email to Site Admin
            msg = "We have found that Subscription (id=%s, plan=%s) for shop %s is past due. An email to shop owner will be sent to inform about this situation" % (local_subscription.subscription_id, local_subscription.plan.name ,local_subscription.owner.shop) 
            logging.info(msg)
            mail = EmailMessage(subject='Past due Subscription',
                                body=msg,
                                from_email=settings.EMAIL_FROM,
                                to=[b for (a,b) in settings.STAFF],
                                headers={'X-SMTPAPI': '{\"category\": \"Past Due Subscription\"}'})
            mail.send(fail_silently=True)
#            send_mail('Past due Subscription', msg, settings.EMAIL_FROM, [b for (a,b) in settings.STAFF], fail_silently=True)

            #Send email to shop owner
            msg = "We notice you that your subscription (%s) for shop %s is %s days past due." % (local_subscription.plan.name ,local_subscription.owner.shop, past_due_days)
            mail = EmailMessage(subject='Past due Subscription',
                                body=msg,
                                from_email=settings.EMAIL_FROM,
                                to=[local_subscription.owner.user.email],
                                headers={'X-SMTPAPI': '{\"category\": \"Past Due Subscription\"}'})
            mail.send(fail_silently=True)
#            send_mail('Past due Suscription', msg, settings.EMAIL_FROM, [local_subscription.owner.user.email], fail_silently=True)
        except Subscription.DoesNotExist:
            error_msg = "Subscription<id%s> was not found. A past due subscription was found in braintree, but this subscription do not correspond with any in the system" % subscription.id
            logging.error(error_msg)
            mail = EmailMessage(subject='Subscription not found',
                                body=error_msg,
                                from_email=settings.EMAIL_FROM,
                                to=[b for (a,b) in settings.STAFF],
                                headers={'X-SMTPAPI': '{\"category\": \"Error\"}'})
            mail.send(fail_silently=True)
#            send_mail('Subscription not found', error_msg , settings.EMAIL_FROM, [b for (a,b) in settings.STAFF], fail_silently=True)
        
        except Exception, e:
            mail = EmailMessage(subject='Error when trying to check past due subscriptions',
                                body=e,
                                from_email=settings.EMAIL_FROM,
                                to=[b for (a,b) in settings.STAFF],
                                headers={'X-SMTPAPI': '{\"category\": \"Error\"}'})
            mail.send(fail_silently=True)
#            send_mail('Error when trying to check past due subscriptions', e , settings.EMAIL_FROM, [b for (a,b) in settings.STAFF], fail_silently=True)


if __name__ == "__main__":
    send_past_due_notification()
########NEW FILE########
__FILENAME__ = cron_posts_in_draft_reminder
#!/usr/bin/env python
# -*- coding: utf-8 -*-
import os
import logging
import datetime
import decimal

os.environ['DJANGO_SETTINGS_MODULE'] = 'settings'

from django.core.management import setup_environ
from django.core.mail import send_mail, EmailMessage
#from django.db import transaction

import settings
setup_environ(settings)

from django.core.urlresolvers import reverse
from blog_pages.models import Post

"""
This cron sends an email to those users that have post in drafts.
It should run once a day. At the midnight
"""
def send_posts_ind_draft_reminder():
    
    date = datetime.datetime.now() - datetime.timedelta(hours=24)
    posts = Post.objects.filter(draft=True, date_time__lt=date).order_by("shop")
    already_notified = set()
        
    try:
        for post in posts:
            shop = post.shop
            if shop not in already_notified:
                link = "http://%s%s" % (shop.default_dns, reverse("post_edit", args=[post.id]))
                msg = "\n\nWe remember you that you have posts in a draft status on your %s shop. If you want that posts appears on you site you must publish them.\n\nGo to %s and make it public!" % (shop, link)
                mail = EmailMessage(subject='Posts in draft reminder',
                                    body=msg,
                                    from_email=settings.EMAIL_FROM,
                                    to=[shop.owner().email],
                                    headers={'X-SMTPAPI': '{\"category\": \"Posts In Draft Reminder\"}'})
                mail.send(fail_silently=True)   
#                send_mail('Posts in draft reminder', msg, settings.EMAIL_FROM, [shop.owner().email], fail_silently=True)
                already_notified.add(shop)
    except Exception, e:
        mail = EmailMessage(subject='Error when trying to send email notifying that customer have "posts in draft"',
                            body=e,
                            from_email=settings.EMAIL_FROM,
                            to=[mail for (name, mail) in settings.STAFF],
                            headers={'X-SMTPAPI': '{"category": "Error"}'})
        mail.send(fail_silently=True)
#        send_mail('Error when trying to send email notifying that customer have "posts in draft"', e , settings.EMAIL_FROM, [mail for (name, mail) in settings.STAFF], fail_silently=True)


if __name__ == "__main__":
    send_posts_ind_draft_reminder()
########NEW FILE########
__FILENAME__ = cron_report_daily_activity
#!/usr/bin/env python
# -*- coding: utf-8 -*-
import os
import logging
import datetime

os.environ['DJANGO_SETTINGS_MODULE'] = 'settings'

from django.core.management import setup_environ
from django.core.mail import send_mail, EmailMessage
#from django.db import transaction

import settings
setup_environ(settings)

"""
Daily Activity (Sign Up / Cancel)
Total Customers    
Total Sign Ups This Month    
Total Sign Ups This Today    
Total Cancelations This Month    
Total Cancelations This Today
"""

def report_daily_activity():
    from django.core.mail import EmailMultiAlternatives
    from django.template import Context, loader
    from reports.views import get_daily_activity_data
    
    day = datetime.datetime.now()
    
    try:
        t_txt = loader.get_template("admin/mail/daily_activity_report.txt")
        t_html = loader.get_template("admin/mail/daily_activity_report.html")        
        
        c = get_daily_activity_data(day)
         
        subject, from_email, to = 'Daily Activity Report', "no-reply@greatcoins.com", "admin@greatcoins.com"
        text_content = t_txt.render(Context(c))
        html_content = t_html.render(Context(c))
        msg = EmailMultiAlternatives(subject, text_content, from_email, [to])
        msg.attach_alternative(html_content, "text/html")
        msg.send()
                
    except Exception, e:
        logging.info(e)
        mail = EmailMessage(subject='Error when trying to generate Daily Activity Report',
                            body=e,
                            from_email=settings.EMAIL_FROM,
                            to=[mail for (name, mail) in settings.STAFF],
                            headers={'X-SMTPAPI': '{\"category\": \"Error\"}'})
        mail.send(fail_silently=True)
#        send_mail('Error when trying to generate Daily Activity Report', e , settings.EMAIL_FROM, [mail for (name, mail) in settings.STAFF], fail_silently=True)
#        send_mail('Error when trying to generate Daily Activity Report', e , settings.EMAIL_FROM, ["martinriva@gmail.com"], fail_silently=True)
        
        
if __name__ == "__main__":
    report_daily_activity()
########NEW FILE########
__FILENAME__ = cron_send_daily_invoice
#!/usr/bin/env python
# -*- coding: utf-8 -*-

###    This procedure must be launched once a day
###    1 2 * * * python /home/usuario/projects/YYZ/poc/cron_past_due.py >> /home/usuario/projects/YYZ/poc/test2.cron

import os
import logging
import datetime
import decimal

os.environ['DJANGO_SETTINGS_MODULE'] = 'settings'

from django.core.management import setup_environ
from django.core.mail import send_mail, EmailMessage
#from django.db import transaction

import settings
setup_environ(settings)

from payments.gateways.braintreegw import BraintreeGateway
from invoices.models import Invoice
from shops.models import Shop

def send_daily_invoice_notification():
    today = datetime.datetime.today()
    #today = datetime.datetime(2010, 7, 15)
    gw = BraintreeGateway(settings.MERCHANT_ID, settings.PUBLIC_KEY, settings.PRIVATE_KEY)
    transactions = gw.get_daily_transactions(today)
    logging.info("%s transactions were found today %s" % (len(transactions), today))
    for transaction in transactions:
        if transaction.subscription_id is not None:
            invoice = Invoice()
            
            invoice.cc_mask = '*'*12 + transaction.credit_card_details.masked_number[12:]
            invoice.cc_type = transaction.credit_card_details.card_type 
            invoice.charge =  decimal.Decimal(transaction.amount)
            invoice.currency = transaction.currency_iso_code        
            invoice.transaction_status_response = transaction.processor_response_text
            invoice.transaction_type = transaction.type.lower()
            invoice.transaction_id = transaction.id
            
            invoice.customer_name = "%s %s" % (transaction.customer_details.first_name, transaction.customer_details.last_name)
            invoice.customer_email = transaction.customer_details.email
            invoice.customer_id = transaction.customer_details.id
            invoice.shop_dns =  "<Unspecified Shop>" if transaction.customer_details.website is None else transaction.customer_details.website
            try:
                shop_id = None if transaction.vault_customer.custom_fields is '' else transaction.vault_customer.custom_fields.get("shop_id", None)
                if shop_id is not None: 
                    try:
                        shop = Shop.objects.get(id=shop_id)
                        invoice.shop = shop
                        invoice.market_place = shop.marketplace.name
                    except Shop.DoesNotExist:
                        logging.error("Shop ID = %s not exist for user %s" % (shop_id, invoice.customer_name))
                        pass
                else:
                    logging.error("User %s has not setted shop_id property in braintree" % invoice.customer_name)
                
            except Exception, e:
                logging.error(e)
                pass
            
            
            invoice.subscription_id = transaction.subscription_id
            subscription = gw.get_subscription_details(invoice.subscription_id)
            
            invoice.plan_id = subscription.plan_id
            invoice.valid_from = subscription.billing_period_start_date
            invoice.valid_up_to = subscription.billing_period_end_date
            invoice.next_billing_date = subscription.next_billing_date
            
            invoice.save()
            msg = invoice.to_text()
            
            logging.info("Sending email to %s. tx=%s, charge=%s, " % (invoice.customer_name, invoice.transaction_id, invoice.charge))
            mail = EmailMessage(subject='%s | Notification Invoice' % invoice.market_place,
                                body=msg,
                                from_email=settings.EMAIL_FROM,
                                to=[invoice.customer_email]+[mail for name, mail in settings.STAFF],
                                headers={'X-SMTPAPI': '{\"category\": \"Notification Invoice\"}'})
            mail.send(fail_silently=True)
            #        send_mail('%s | Notification Invoice' % invoice.market_place, msg, settings.EMAIL_FROM, [invoice.customer_email]+[mail for name, mail in settings.STAFF], fail_silently=True)


if __name__ == "__main__":
    send_daily_invoice_notification()
########NEW FILE########
__FILENAME__ = cron_update_bt_payment_status
#!/usr/bin/env python
# -*- coding: utf-8 -*-

###    This procedure must be launched once a day
###    1 2 * * * python /home/usuario/projects/YYZ/poc/cron_past_due.py >> /home/usuario/projects/YYZ/poc/test2.cron

"""
This cron is used to update the payments status of all of these sells that were paid via BrainTree gateway. 
Once a payment transaction is setted as submitted_for_settlement, i could pass one day to change to status = settled.  
"""

import os
import logging
import datetime
import decimal

os.environ['DJANGO_SETTINGS_MODULE'] = 'settings'

from django.core.management import setup_environ
#from django.db import transaction

import settings
setup_environ(settings)

from payments.models import *
from payments.gateways.braintreegw import BraintreeGateway
from invoices.models import Invoice
from shops.models import Shop

def update_settled_braintree_payments():
    today = datetime.datetime.today()
    yesterday = datetime.datetime.today() - datetime.timedelta(1)
    #today = datetime.datetime(2010, 8, 25)
    gw = BraintreeGateway(settings.MERCHANT_ID, settings.PUBLIC_KEY, settings.PRIVATE_KEY)
    transactions = gw.get_daily_transactions(yesterday)
    logging.info("%s transactions were found yesterday %s" % (len(transactions), yesterday))
    for transaction in transactions:
        
        if gw.is_settled(transaction.id):
            logging.info("Transaction ID=%s was SETTLED! Updating the associated sell instance..." % transaction.id)
            try:
                btx = BrainTreeTransaction.objects.filter(transaction_id=transaction.id).get()
                if btx.sell.payment.state_actual.state != "PA":
                    btx.sell.payment.pay()
                    logging.info("%s was marked as paid..." % btx.sell)
                else:
                    logging.info("%s was already marked as paid, nothing to do..." % btx.sell)
            except BrainTreeTransaction.DoesNotExist:
                logging.critical("Transaction ID=%s is not associated to any Sell!!" % transaction.id)
            
        elif gw.is_submitted_for_settlement(transaction.id):
            logging.info("Transaction ID=%s is SUBMITTED_FOR_SETTLEMENT yet! Nothing to do, wait to status change to SETTLED" % transaction.id)
            logging.info("Check how long is in this situation... do something if several days have passed")
        
        elif gw.is_authorized(transaction.id):
            logging.info("Transaction ID=%s is AUTHORIZED! This should not be never happend because we programatically set the transaction to be submitted_for_settlement" % transaction.id)
            
        else:
            logging.info("Transaction ID=%s has status = %s" % (transaction.id, transaction.status))
            try:
                btx = BrainTreeTransaction.objects.filter(transaction_id=transaction.id).get()
                btx.sell.payment.pay()
            except BrainTreeTransaction.DoesNotExist:
                logging.critical("Transaction ID=%s is not associated to any Sell!!" % transaction.id)
        
if __name__ == "__main__":
    update_settled_braintree_payments()
########NEW FILE########
__FILENAME__ = cron_week_topsellers
#!/usr/bin/env python
# -*- coding: utf-8 -*-

###    This procedure must be launched once a day
###    1 2 * * * python /home/usuario/projects/YYZ/poc/cron_past_due.py >> /home/usuario/projects/YYZ/poc/test2.cron

import os
import logging
import datetime
import decimal

os.environ['DJANGO_SETTINGS_MODULE'] = 'settings'

from django.core.management import setup_environ

import settings
setup_environ(settings)

from sell.models import Sell
from shops.models import Shop
from market_buy.models import BestSeller

def get_week_top_seller():
    
    delta = 7
    date_to = datetime.datetime.now()
    date_from = date_to - datetime.timedelta(delta)
    
    shops = Shop.objects.all()
    max_revenue = -1
    winner = None
    
    logging.info("Calculating the best seller of the week. From: %s - %s" % (date_from, date_to))
    
    for shop in shops:
        
        week_revenue = 0
        sell_week_revenue = Sell.objects.filter(shop=shop)
        sell_week_revenue = sell_week_revenue.filter(date_time__range=(date_from, date_to))
        logging.info(sell_week_revenue)
        for sell in sell_week_revenue:
            week_revenue += sell.total_without_taxes()
          
        logging.info("Total Revenue from shop %s = %s" % (shop, week_revenue))
        
        if week_revenue > max_revenue: 
            winner = shop
            max_revenue = week_revenue
            
    best_seller = BestSeller()
    best_seller.shop = winner
    best_seller.from_date = date_from
    best_seller.to_date = date_to
    best_seller.revenue = max_revenue
    best_seller.save()
    logging.info("Winner: %s" % best_seller)
        
if __name__ == "__main__":
    get_week_top_seller()
########NEW FILE########
__FILENAME__ = manage
#!/usr/bin/env python
# Django settings for poc project.

import os.path
from os.path import abspath, dirname, join
import sys


ROOT_DIR = abspath(join(dirname(__file__), os.path.pardir))
PROJECT_ROOT = abspath(dirname(__file__))

ZIPS_DIR = os.path.join(ROOT_DIR, "zip-packages")


for zip in os.listdir(ZIPS_DIR):
    if (os.path.splitext(zip)[1] == '.zip'):
        sys.path.insert(2, os.path.join(ZIPS_DIR, zip))

from django.core.management import execute_manager
try:
    import settings # Assumed to be in the same directory.
except ImportError:
    import sys
    sys.stderr.write("Error: Can't find the file 'settings.py' in the directory containing %r. It appears you've customized things.\nYou'll have to run django-admin.py, passing it your settings module.\n(If the file settings.py does indeed exist, it's causing an ImportError somehow.)\n" % __file__)
    sys.exit(1)

if __name__ == "__main__":
    execute_manager(settings)

########NEW FILE########
__FILENAME__ = settings
# Django settings for poc project.

import os.path
from os.path import abspath, dirname, join
import sys


DEBUG = False
TEMPLATE_DEBUG = DEBUG

ROOT_DIR = abspath(join(dirname(__file__), os.path.pardir))
PROJECT_ROOT = os.path.abspath(os.path.dirname(__file__))


##Add apps to sys.path
sys.path.insert(1, os.path.join(PROJECT_ROOT, "apps"))
sys.path.insert(2, os.path.join(ROOT_DIR, "libs"))
sys.path.insert(3, os.path.join(ROOT_DIR, 'marketplaces', "apps"))

ADMINS = (
    ('Sebastian', 'sebastian@devsar.com'),
    ('Steve', 'stephenpatrickpower@gmail.com'),
)

STAFF = (
    ('Steve Admin', 'admin@greatcoins.com'),
    ('Steve Alias', 'steve@greatcoins.com'),
)

MANAGERS = ADMINS

DATABASE_ENGINE = 'sqlite3'           # 'postgresql_psycopg2', 'postgresql', 'mysql', 'sqlite3' or 'oracle'.
DATABASE_NAME = os.path.join(PROJECT_ROOT, 'dev_poc.db')             # Or path to database file if using sqlite3.
DATABASE_USER = ''             # Not used with sqlite3.
DATABASE_PASSWORD = ''         # Not used with sqlite3.
DATABASE_HOST = ''             # Set to empty string for localhost. Not used with sqlite3.
DATABASE_PORT = ''             # Set to empty string for default. Not used with sqlite3.

# Local time zone for this installation. Choices can be found here:
# http://en.wikipedia.org/wiki/List_of_tz_zones_by_name
# although not all choices may be available on all operating systems.
# If running in a Windows environment this must be set to the same as your
# system time zone.

#TIME_ZONE = 'US/Eastern'
TIME_ZONE = 'America/Buenos_Aires'

# Language code for this installation. All choices can be found here:
# http://www.i18nguy.com/unicode/language-identifiers.html
LANGUAGE_CODE = 'en'

SITE_ID = 1

# If you set this to False, Django will make some optimizations so as not
# to load the internationalization machinery.
USE_I18N = True

# Absolute path to the directory that holds media.
# Example: "/home/media/media.lawrence.com/"
MEDIA_ROOT = os.path.join(PROJECT_ROOT, 'media')

# URL that handles the media served from MEDIA_ROOT. Make sure to use a
# trailing slash if there is a path component (optional in other cases).
# Examples: "http://media.lawrence.com", "http://example.com/media/"
MEDIA_URL = '/media/'

MEDIA_URL_OUT_S3 = '/media_out_s3/'
MEDIA_ROOT_OUT_S3 = os.path.join(PROJECT_ROOT, 'media_out_s3')

# URL prefix for admin media -- CSS, JavaScript and images. Make sure to use a
# trailing slash.
# Examples: "http://foo.com/media/", "/media/".
ADMIN_MEDIA_PREFIX = '/media/admin/'

# Make this unique, and don't share it with anybody.
SECRET_KEY = '...'

# List of callables that know how to import templates from various sources.
TEMPLATE_LOADERS = (
    'django.template.loaders.filesystem.load_template_source',
    'django.template.loaders.app_directories.load_template_source',
#     'django.template.loaders.eggs.load_template_source',
)

MIDDLEWARE_CLASSES = (
    'django.middleware.common.CommonMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'auth.middleware.AuthenticationMiddleware',
    'djangoflash.middleware.FlashMiddleware',
    'core.middleware.SubdomainMiddleware',
    'market.middleware.MarketPlaceMiddleware',
    'shops.middleware.CartMiddleware',
    'django.middleware.transaction.TransactionMiddleware',
    'reversion.middleware.RevisionMiddleware',
)

TEMPLATE_CONTEXT_PROCESSORS = (
    'django.core.context_processors.auth',
    'django.core.context_processors.debug',
    'django.core.context_processors.i18n',
    'django.core.context_processors.media',                               
    'django.core.context_processors.request',                               
    'djangoflash.context_processors.flash',
    'core.context_processors.shop',    
    'core.context_processors.default_dns',    
    'core.context_processors.google_key',
    'core.context_processors.media_url_ous_s3',
    'bidding.context_processors.search',
)


ROOT_URLCONF = 'stores.urls'

TEMPLATE_DIRS = (
    # Put strings here, like "/home/html/django_templates" or "C:/www/django/templates".
    # Always use forward slashes, even on Windows.
    # Don't forget to use absolute paths, not relative paths.
    os.path.join(PROJECT_ROOT, "templates/"),
)

STORE_TEMPLATES = os.path.join(PROJECT_ROOT, "templates/") 

INSTALLED_APPS = (
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.sites',
    'django.contrib.admin',    

    #third
    'south',
    'uni_form',
    'haystack',
    'reversion',
    'rollyourown.seo',
    'django_cron',
    'tinymce',
    'compressor',

    #POC
    'auth',
    'auctions',
    'blog_pages',
    'bidding',
    'category',
    'core',
    'for_sale',
    'invoices',
    'inventory',
    'lots',
    'market',
    'my_shopping',
    'payments',
    'preferences',
    'search',
    'sell',
    'shops',
    'subscriptions',
    'store_admin',
    'themes',
    'users',
    'market_buy',
    'market_community',
    'inventory',
    'store_admin'
)

AUTHENTICATION_BACKENDS = (
    #'django.contrib.auth.backends.ModelBackend',
    'core.emailBackend.ModelBackend',
)

AUTH_PROFILE_MODULE = 'users.Profile'

LOGIN_REDIRECT_URL= '/redirect' 
LOGIN_URL = '/login/'

GOOGLE_CHECKOUT_SANDBOX = False
GOOGLE_KEY = ''
GOOGLE_MARKETPLACE_KEY = ''

DEFAULT_DNS = 'shop.com'


EMAIL_HOST = ''
EMAIL_PORT = 25
EMAIL_HOST_USER = ''
EMAIL_HOST_PASSWORD = ''
EMAIL_USE_TLS = True
EMAIL_FROM = ''

# django-haystack settings
HAYSTACK_SITECONF = "search.indexes"
HAYSTACK_SEARCH_ENGINE = "solr"
# url for solr core that will serve and index our project data
HAYSTACK_SOLR_URL = "http://127.0.0.1:8983/solr/poc"
HAYSTACK_SEARCH_RESULTS_PER_PAGE = 6


MERCHANT_ID=''
PUBLIC_KEY=''
PRIVATE_KEY=''

TMP_DIR = '/tmp/'

THEMES_ROOT = "%s%s" % (MEDIA_ROOT, '/themes/')
DEFAULT_THEME = 'default.zip'
SITE_RUNNING_MODE='stores'

import logging

logging.basicConfig(level=logging.INFO, format='[=%(levelname)s : %(asctime)s] %(message)s',)

#import sys
#logging.basicConfig(stream=sys.stdout)


#Testing
SOUTH_TESTS_MIGRATE = False


COVERAGE_MODULES = [
  'auctions.feeds',  'auctions.forms',  'auctions.models',  'auctions.views',  
  'auth.models', 'auth.views', 
  'bidding.context_processors',  'bidding.forms',  'bidding.models',  'bidding.views',
  'blog_pages.feeds', 'blog_pages.forms',  'blog_pages.models', 'blog_pages.views',
  'category.forms', 'category.models', 
  'core.context_processors', 'core.decorators', 'core.middleware', 'core.thumbs', 'core.views',
  'for_sale.feeds', 'for_sale.forms', 'for_sale.views',  
  'invoices.models', 'invoices.views',  
  'my_shopping.views',
  'preferences.forms', 'preferences.models', 'preferences.views',  
  'sell.forms', 'sell.models', 'sell.views',
  'store_admin.models', 'store_admin.views',
  'themes.forms', 'themes.models', 'themes.render', 'themes.views',
  'users.forms',  'users.models',  'users.views',
  'inventory.models', 'inventory.views',
  'lots.models',  'lots.views',
  'payments.forms', 'payments.models',  'payments.views',
  'payments.gateways.braintreegw',  'payments.gateways.googlecheckout',  'payments.gateways.paypal',
  'search.models',  'search.views',
  'shops.forms',  'shops.models',  'shops.middleware',  'shops.views',
  'subscriptions.forms', 'subscriptions.models', 'subscriptions.views',
]

TEST_RUNNER='stores.test_coverage.test_runner_with_coverage'

LANGUAGES = (
    ('en', 'English'),
)

TINYMCE_DEFAULT_CONFIG = {
    'spellchecker_languages' : "+English=en,"
}

TINYMCE_SPELLCHECKER = True

CRON_CLASSES = [
    "for_sale.cron.ShowItemsCronJob",
]

COMPRESS_ENABLED = False
COMPRESS_CSS_FILTERS = ['compressor.filters.cssmin.CSSMinFilter']


try:
    from local_settings import *
except ImportError:
    pass

if 'test' in sys.argv:
    try:
        from test_settings import *
    except ImportError:
        pass

########NEW FILE########
__FILENAME__ = test_coverage
import os, shutil, sys, unittest

os.environ['DJANGO_SETTINGS_MODULE'] = 'settings'
 
# Look for coverage.py in __file__/lib as well as sys.path
sys.path = [os.path.join(os.path.dirname(__file__), "lib")] + sys.path
 
import coverage
from django.test.simple import run_tests as django_test_runner
 
from django.conf import settings
 
def test_runner_with_coverage(test_labels, verbosity=1, interactive=True, extra_tests=[]):
  """Custom test runner.  Follows the django.test.simple.run_tests() interface."""
  # Start code coverage before anything else if necessary
  if hasattr(settings, 'COVERAGE_MODULES') and not test_labels:
    coverage.use_cache(0) # Do not cache any of the coverage.py stuff
    coverage.start()
 
  test_results = django_test_runner(test_labels, verbosity, interactive, extra_tests)
 
  # Stop code coverage after tests have completed
  if hasattr(settings, 'COVERAGE_MODULES') and not test_labels:
    coverage.stop()
 
    # Print code metrics header
    print ''
    print '----------------------------------------------------------------------'
    print ' Unit Test Code Coverage Results'
    print '----------------------------------------------------------------------'
 
  # Report code coverage metrics
  if hasattr(settings, 'COVERAGE_MODULES') and not test_labels:
    coverage_modules = []
    for module in settings.COVERAGE_MODULES:
      coverage_modules.append(__import__(module, globals(), locals(), ['']))
 
    coverage.report(coverage_modules, show_missing=1)
 
    # Print code metrics footer
    print '----------------------------------------------------------------------'
 
  return test_results

if __name__ == '__main__':
    test_runner_with_coverage(None)

########NEW FILE########
__FILENAME__ = test_settings
import os

PROJECT_ROOT = os.path.abspath(os.path.dirname(__file__))

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': os.path.join(PROJECT_ROOT, 'test_poc.db'),
        'USER': '',
        'PASSWORD': '',
        'OPTIONS': {}
    }
}

########NEW FILE########
__FILENAME__ = urls
# -*- coding: utf-8 -*-
from django.conf.urls.defaults import *
from django.conf import settings
from django.contrib import admin

#from shops.views import sign_up 
from shops.views import welcome_shop
from for_sale.feeds import LatestItemFeed
from auctions.feeds import LatestAuctionsFeed
from blog_pages.feeds import LatestPostFeed

admin.autodiscover()

urlpatterns = patterns('',
    url(r'^$', 'core.views.home', name='home'),
    url(r'^redirect/$', 'core.views.redirect', name='redirect'),
#    url(r'^sign_up/$', 'shops.views.sign_up', name='sign_up'),
#    url(r'^sign_up/(?P<plan>\d+)$', 'shops.views.sign_up', name='sign_up'),
    url(r'^welcome_shop/([\d]+)/$', 'shops.views.welcome_shop', name='welcome_shop'),
    url(r'^pricing/$', 'subscriptions.views.subscription_plans', name='subscription_plans'),
    url(r'^redirect_admin/$', 'store_admin.views.redirect_admin', name='redirect_admin'),
    
    (r'^admin/', include('store_admin.urls')),
    
    #delete this
    url(r'^admin_login/([\d]+)/$', 'core.views.admin_login', name='admin_login'),
    
    (r'^admin/auctions/', include('auctions.urls')),
    (r'^admin/lots/', include('lots.urls')),
    (r'^admin/preferences/', include('preferences.urls')),
    (r'^admin/blog_pages/', include('blog_pages.urls')),
    
    (r'^admin/category/', include('category.urls')),
    (r'^admin/sale/', include('sell.urls')),
    (r'^admin/for_sale/', include('for_sale.urls')),
    (r'^admin/shops/', include('shops.urls')),
    (r'^admin/themes/', include('themes.urls')),
    
    (r'^admin/subscription/', include('subscriptions.urls')),

    (r'^payments/', include('payments.urls')),
    (r'^users/', include('users.urls')),
    (r'^my_shopping/', include('my_shopping.urls')),
    
    #### Public store views ###
    
    #Auctions
    url(r'^auctions/$', 'bidding.views.bidding_auctions', name='bidding_auctions'),
    url(r'^auctions/([\d]+)/$', 'bidding.views.bidding_auctions', name='bidding_auctions_id'),
    url(r'^auctions/latest/feed/$', LatestAuctionsFeed()),
    url(r'^auctions/view_lot/([\d]+)/$', 'bidding.views.bidding_view_lot', name='bidding_view_lot'),
    url(r'^auctions/view_history_lot/([\d]+)/$', 'bidding.views.bidding_view_history_lot', name='bidding_view_history_lot'),

    #Billing
    url(r'^services/google/ipn/$', 'payments.gateways.googlecheckout.process_google_message', name='payments_googlecheckout_ipn'),

    #For Sale
    url(r'^for_sale/$', 'bidding.views.bidding_for_sale', name='bidding_for_sale'),
    url(r'^for_sale/latest/feed/$', LatestItemFeed()),
    url(r'^for_sale/buy_now/([\d]+)/$', 'bidding.views.bidding_buy_now', name='bidding_buy_now'),
    url(r'^for_sale/view_item/([\d]+)/$', 'bidding.views.bidding_view_item', name='bidding_view_item'),
    

    #Blog Pages
    url(r'^about_us/$', 'bidding.views.bidding_about_us', name='bidding_about_us'),
    url(r'^blog/$', 'bidding.views.bidding_blog', name='bidding_blog'),
    url(r'^blog/latest/feed/$', LatestPostFeed()),
    url(r'^home/$', 'bidding.views.bidding_home', name='bidding_home'),
    url(r'^sitemap\.xml$', 'bidding.views.pages_sitemap', name='bidding_sitemap'),
    url(r'^pages/([^/]+)/$', 'bidding.views.pages', name='bidding_page'),
    url(r'^robots\.txt$', 'bidding.views.pages_robots', name='bidding_robots'),
    url(r'^privacy_policy/$', 'bidding.views.privacy_policy', name='bidding_privacy_policy'),
    url(r'^blog/view_post/([\d]+)/$', 'bidding.views.bidding_view_post', name='bidding_view_post'),
    
    
    url(r'^refund/', 'bidding.views.bidding_refund', name='bidding_refund'),
    url(r'^privacy_policy/', 'bidding.views.privacy_policy', name='bidding_privacy_policy'),
    url(r'^terms_of_service/', 'bidding.views.terms_of_service', name='bidding_terms_of_service'),
    
    #Search
    url(r'^search/$', 'bidding.views.bidding_search', name='bidding_search'),
    
    #Login        
    url(r'^login/$', 'auth.views.login', {'template_name': 'bidding/blocks/login.html'}, name='login'),
    url(r'^logout/$', 'auth.views.logout', name='logout'),
    url(r'^register/$', 'users.views.register', name='user_register'),
    url(r'^login_admin/$', 'auth.views.login', {'template_name': 'core/login.html'}, name='login_admin'),
    
    #Tinymce
    (r'^tinymce/', include('tinymce.urls')),
    
    #Other
    url(r'^map/([\d]+)/$', 'bidding.views.bidding_map', name='bidding_map'),        
    
    (r'^media/(?P<path>.*)$', 'django.views.static.serve', 
        {'document_root': settings.MEDIA_ROOT, 'show_indexes': True}),
                           
    (r'^public/(?P<path>.*)$', 'django.views.static.serve', 
        {'document_root': settings.STATIC_ROOT, 'show_indexes': True}),
    
    (r'^media_out_s3/(?P<path>.*)$', 'django.views.static.serve', {'document_root': settings.MEDIA_ROOT_OUT_S3, 'show_indexes': True}),

)

if settings.DEBUG:
    urlpatterns += patterns('',
        url(r'^tests/remove-qa-user/$', 'core.views.remove_qa_user'),
    )

########NEW FILE########
