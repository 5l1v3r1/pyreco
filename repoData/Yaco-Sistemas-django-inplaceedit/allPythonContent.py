__FILENAME__ = conf
# -*- coding: utf-8 -*-
#
# django-inplaceedit documentation build configuration file, created by
# sphinx-quickstart on Fri Aug 30 09:41:12 2013.
#
# This file is execfile()d with the current directory set to its containing dir.
#
# Note that not all possible configuration values are present in this
# autogenerated file.
#
# All configuration values have a default; values that are commented out
# serve to show the default.

import sys, os

# If extensions (or modules to document with autodoc) are in another directory,
# add these directories to sys.path here. If the directory is relative to the
# documentation root, use os.path.abspath to make it absolute, like shown here.
#sys.path.insert(0, os.path.abspath('.'))

# -- General configuration -----------------------------------------------------

# If your documentation needs a minimal Sphinx version, state it here.
#needs_sphinx = '1.0'

# Add any Sphinx extension module names here, as strings. They can be extensions
# coming with Sphinx (named 'sphinx.ext.*') or your custom ones.
extensions = ['sphinx.ext.autodoc']

# Add any paths that contain templates here, relative to this directory.
templates_path = ['_templates']

# The suffix of source filenames.
source_suffix = '.rst'

# The encoding of source files.
#source_encoding = 'utf-8-sig'

# The master toctree document.
master_doc = 'index'

# General information about the project.
project = u'django-inplaceedit'
copyright = u'2013, Pablo Martín'

# The version info for the project you're documenting, acts as replacement for
# |version| and |release|, also used in various other places throughout the
# built documents.
#
# The short X.Y version.
version = '1.2.0'
# The full version, including alpha/beta/rc tags.
release = '1.2.0'

# The language for content autogenerated by Sphinx. Refer to documentation
# for a list of supported languages.
#language = None

# There are two options for replacing |today|: either, you set today to some
# non-false value, then it is used:
#today = ''
# Else, today_fmt is used as the format for a strftime call.
#today_fmt = '%B %d, %Y'

# List of patterns, relative to source directory, that match files and
# directories to ignore when looking for source files.
exclude_patterns = ['_build']

# The reST default role (used for this markup: `text`) to use for all documents.
#default_role = None

# If true, '()' will be appended to :func: etc. cross-reference text.
#add_function_parentheses = True

# If true, the current module name will be prepended to all description
# unit titles (such as .. function::).
#add_module_names = True

# If true, sectionauthor and moduleauthor directives will be shown in the
# output. They are ignored by default.
#show_authors = False

# The name of the Pygments (syntax highlighting) style to use.
pygments_style = 'sphinx'

# A list of ignored prefixes for module index sorting.
#modindex_common_prefix = []

# If true, keep warnings as "system message" paragraphs in the built documents.
#keep_warnings = False


# -- Options for HTML output ---------------------------------------------------

# The theme to use for HTML and HTML Help pages.  See the documentation for
# a list of builtin themes.
html_theme = 'default'

# Theme options are theme-specific and customize the look and feel of a theme
# further.  For a list of options available for each theme, see the
# documentation.
#html_theme_options = {}

# Add any paths that contain custom themes here, relative to this directory.
#html_theme_path = []

# The name for this set of Sphinx documents.  If None, it defaults to
# "<project> v<release> documentation".
#html_title = None

# A shorter title for the navigation bar.  Default is the same as html_title.
#html_short_title = None

# The name of an image file (relative to this directory) to place at the top
# of the sidebar.
#html_logo = None

# The name of an image file (within the static path) to use as favicon of the
# docs.  This file should be a Windows icon file (.ico) being 16x16 or 32x32
# pixels large.
#html_favicon = None

# Add any paths that contain custom static files (such as style sheets) here,
# relative to this directory. They are copied after the builtin static files,
# so a file named "default.css" will overwrite the builtin "default.css".
html_static_path = ['_static']

# If not '', a 'Last updated on:' timestamp is inserted at every page bottom,
# using the given strftime format.
#html_last_updated_fmt = '%b %d, %Y'

# If true, SmartyPants will be used to convert quotes and dashes to
# typographically correct entities.
#html_use_smartypants = True

# Custom sidebar templates, maps document names to template names.
#html_sidebars = {}

# Additional templates that should be rendered to pages, maps page names to
# template names.
#html_additional_pages = {}

# If false, no module index is generated.
#html_domain_indices = True

# If false, no index is generated.
html_use_index = False

# If true, the index is split into individual pages for each letter.
#html_split_index = False

# If true, links to the reST sources are added to the pages.
#html_show_sourcelink = True

# If true, "Created using Sphinx" is shown in the HTML footer. Default is True.
#html_show_sphinx = True

# If true, "(C) Copyright ..." is shown in the HTML footer. Default is True.
#html_show_copyright = True

# If true, an OpenSearch description file will be output, and all pages will
# contain a <link> tag referring to it.  The value of this option must be the
# base URL from which the finished HTML is served.
#html_use_opensearch = ''

# This is the file name suffix for HTML files (e.g. ".xhtml").
#html_file_suffix = None

# Output file base name for HTML help builder.
htmlhelp_basename = 'django-inplaceeditdoc'


# -- Options for LaTeX output --------------------------------------------------

latex_elements = {
# The paper size ('letterpaper' or 'a4paper').
#'papersize': 'letterpaper',

# The font size ('10pt', '11pt' or '12pt').
#'pointsize': '10pt',

# Additional stuff for the LaTeX preamble.
#'preamble': '',
}

# Grouping the document tree into LaTeX files. List of tuples
# (source start file, target name, title, author, documentclass [howto/manual]).
latex_documents = [
  ('index', 'django-inplaceedit.tex', u'django-inplaceedit Documentation',
   u'Pablo Martín', 'manual'),
]

# The name of an image file (relative to this directory) to place at the top of
# the title page.
#latex_logo = None

# For "manual" documents, if this is true, then toplevel headings are parts,
# not chapters.
#latex_use_parts = False

# If true, show page references after internal links.
#latex_show_pagerefs = False

# If true, show URL addresses after external links.
#latex_show_urls = False

# Documents to append as an appendix to all manuals.
#latex_appendices = []

# If false, no module index is generated.
#latex_domain_indices = True


# -- Options for manual page output --------------------------------------------

# One entry per manual page. List of tuples
# (source start file, name, description, authors, manual section).
man_pages = [
    ('index', 'django-inplaceedit', u'django-inplaceedit Documentation',
     [u'Pablo Martín'], 1)
]

# If true, show URL addresses after external links.
#man_show_urls = False


# -- Options for Texinfo output ------------------------------------------------

# Grouping the document tree into Texinfo files. List of tuples
# (source start file, target name, title, author,
#  dir menu entry, description, category)
texinfo_documents = [
  ('index', 'django-inplaceedit', u'django-inplaceedit Documentation',
   u'Pablo Martín', 'django-inplaceedit', 'Inplace Edit Form is a Django application that allows you to inline edition of some data from the database.',
   'Miscellaneous'),
]

# Documents to append as an appendix to all manuals.
#texinfo_appendices = []

# If false, no module index is generated.
#texinfo_domain_indices = True

# How to display URL addresses: 'footnote', 'no', or 'inline'.
#texinfo_show_urls = 'footnote'

# If true, do not generate a @detailmenu in the "Top" node's menu.
#texinfo_no_detailmenu = False

########NEW FILE########
__FILENAME__ = adaptors
# Copyright (c) 2010-2013 by Yaco Sistemas <goinnn@gmail.com> or <pmartin@yaco.es>
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU Lesser General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU Lesser General Public License for more details.
#
# You should have received a copy of the GNU Lesser General Public License
# along with this programe.  If not, see <http://www.gnu.org/licenses/>.

ADAPTOR_INPLACEEDIT = {'text': 'inplaceeditform.fields.AdaptorTextField',
                       'url': 'inplaceeditform.fields.AdaptorURLField',
                       'email': 'inplaceeditform.fields.AdaptorEmailField',
                       'textarea': 'inplaceeditform.fields.AdaptorTextAreaField',
                       'choices': 'inplaceeditform.fields.AdaptorChoicesField',
                       'boolean': 'inplaceeditform.fields.AdaptorBooleanField',
                       'nullboolean': 'inplaceeditform.fields.AdaptorNullBooleanField',
                       'date': 'inplaceeditform.fields.AdaptorDateField',
                       'datetime': 'inplaceeditform.fields.AdaptorDateTimeField',
                       'time': 'inplaceeditform.fields.AdaptorTimeField',
                       'integer': 'inplaceeditform.fields.AdaptorIntegerField',
                       'float': 'inplaceeditform.fields.AdaptorFloatField',
                       'decimal': 'inplaceeditform.fields.AdaptorDecimalField',
                       'fk': 'inplaceeditform.fields.AdaptorForeingKeyField',
                       'm2m': 'inplaceeditform.fields.AdaptorManyToManyField',
                       'm2mcomma': 'inplaceeditform.fields.AdaptorCommaSeparatedManyToManyField',
                       'file': 'inplaceeditform.fields.AdaptorFileField',
                       'image': 'inplaceeditform.fields.AdaptorImageField',
                       }

########NEW FILE########
__FILENAME__ = commons
# Copyright (c) 2010-2013 by Yaco Sistemas <goinnn@gmail.com> or <pmartin@yaco.es>
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU Lesser General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU Lesser General Public License for more details.
#
# You should have received a copy of the GNU Lesser General Public License
# along with this programe.  If not, see <http://www.gnu.org/licenses/>.

from django import template
from django.db import models
from django.db.models.fields import FieldDoesNotExist
from django.db.models.fields.related import ForeignKey, ManyToManyField
from django.conf import settings

from inplaceeditform import settings as inplace_settings
from inplaceeditform.adaptors import ADAPTOR_INPLACEEDIT as DEFAULT_ADAPTOR_INPLACEEDIT

has_transmeta = False
DEFAULT_VALUE = ''
try:
    import transmeta
    has_transmeta = True
except ImportError:
    pass


def get_dict_from_obj(obj):
    '''
    Edit to get the dict even when the object is a GenericRelatedObjectManager.
    Added the try except.
    '''
    obj_dict = obj.__dict__
    obj_dict_result = obj_dict.copy()
    for key, value in obj_dict.items():
        if key.endswith('_id'):
            key2 = key.replace('_id', '')
            try:
                field, model, direct, m2m = obj._meta.get_field_by_name(key2)
                if isinstance(field, ForeignKey):
                    obj_dict_result[key2] = obj_dict_result[key]
                    del obj_dict_result[key]
            except FieldDoesNotExist:
                pass
    manytomany_list = obj._meta.many_to_many
    for manytomany in manytomany_list:
        ids = [obj_rel.id for obj_rel in manytomany.value_from_object(obj).select_related()]
        if ids:
            obj_dict_result[manytomany.name] = ids
    return obj_dict_result


def apply_filters(value, filters, load_tags=None):
    if filters:
        filters_str = '|%s' % '|'.join(filters)
        load_tags = load_tags or []
        if load_tags:
            load_tags_str = "{%% load %s %%}" % ' '.join(load_tags)
        else:
            load_tags_str = ""
        value = template.Template("""%s{{ value%s }}""" % (load_tags_str, filters_str)).render(template.Context({'value': value}))
    return value


def import_module(name, package=None):
    try:
        from django.utils.importlib import import_module
        return import_module(name, package)
    except ImportError:
        path = [m for m in name.split('.')]
        return __import__(name, {}, {}, path[-1])


def get_adaptor_class(adaptor=None, obj=None, field_name=None):
    if not adaptor:
        try:
            field = obj._meta.get_field_by_name(field_name)[0]
        except FieldDoesNotExist:
            if has_transmeta:
                field = obj._meta.get_field_by_name(transmeta.get_real_fieldname(field_name))[0]
        if isinstance(field, models.URLField):
            adaptor = 'url'
        elif isinstance(field, models.EmailField):
            adaptor = 'email'
        elif isinstance(field, models.CharField):
            adaptor = 'text'
        elif isinstance(field, models.TextField):
            adaptor = 'textarea'
        elif isinstance(field, models.NullBooleanField):
            adaptor = 'nullboolean'
        elif isinstance(field, models.BooleanField):
            adaptor = 'boolean'
        elif isinstance(field, models.DateTimeField):
            adaptor = 'datetime'
        elif isinstance(field, models.DateField):
            adaptor = 'date'
        elif isinstance(field, models.TimeField):
            adaptor = 'time'
        elif isinstance(field, models.IntegerField):
            adaptor = 'integer'
        elif isinstance(field, models.FloatField):
            adaptor = 'float'
        elif isinstance(field, models.DecimalField):
            adaptor = 'decimal'
        elif isinstance(field, ForeignKey):
            adaptor = 'fk'
        elif isinstance(field, ManyToManyField):
            adaptor = 'm2mcomma'
        elif isinstance(field, models.ImageField):
            adaptor = 'image'
        elif isinstance(field, models.FileField):
            adaptor = 'file'

        if getattr(field, 'choices', None):
            adaptor = 'choices'
    from inplaceeditform.fields import BaseAdaptorField
    path_adaptor = adaptor and (inplace_settings.ADAPTOR_INPLACEEDIT.get(adaptor, None) or
                                DEFAULT_ADAPTOR_INPLACEEDIT.get(adaptor, None))
    if not path_adaptor and adaptor:
        return get_adaptor_class(obj=obj, field_name=field_name)
    elif not path_adaptor:
        return BaseAdaptorField
    path_module, class_adaptor = ('.'.join(path_adaptor.split('.')[:-1]), path_adaptor.split('.')[-1])
    return getattr(import_module(path_module), class_adaptor)


def get_static_url(subfix='inplaceeditform'):
    static_url = getattr(settings, 'STATIC_URL', None)
    if static_url:
        return static_url
    else:  # To old django versions
        return '%s%s/' % (getattr(settings, 'MEDIA_URL', None), subfix)


def get_admin_static_url():
    """
    Return the ADMIN_MEDIA_PREFIX if it is in the settings.py else get
    the static url from the previous function and add /admin/.
    """
    return getattr(settings, 'ADMIN_MEDIA_PREFIX', get_static_url() + "admin/")

########NEW FILE########
__FILENAME__ = fields
# Copyright (c) 2010-2013 by Yaco Sistemas <goinnn@gmail.com> or <pmartin@yaco.es>
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU Lesser General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU Lesser General Public License for more details.
#
# You should have received a copy of the GNU Lesser General Public License
# along with this programe.  If not, see <http://www.gnu.org/licenses/>.

import json
import numbers
import sys

from copy import deepcopy

from django.conf import settings
from django.core.urlresolvers import reverse
from django.contrib.admin.widgets import AdminDateWidget, AdminSplitDateTime, AdminTimeWidget
from django.forms.models import modelform_factory
from django.template.loader import render_to_string
from django.utils.formats import number_format

from inplaceeditform import settings as inplace_settings
from inplaceeditform.commons import apply_filters, import_module, has_transmeta, get_static_url, get_admin_static_url
from inplaceeditform.perms import SuperUserPermEditInline


if sys.version_info[0] == 2:
    string = basestring
else:
    string = str
    unicode = str


class BaseAdaptorField(object):

    DEFAULT_MIN_HEIGHT = 30

    def __init__(self, request, obj, field_name,
                 filters_to_show=None,
                 config=None):
        self.request = request
        self.obj = obj
        self.field_name = field_name
        self.filters_to_show = filters_to_show and filters_to_show.split('|')

        self.model = obj.__class__
        self.field_name_render = field_name  # To transmeta

        self.config = config or {}
        self.config['obj_id'] = unicode(self.obj.pk)
        self.config['field_name'] = self.field_name_render
        self.config['app_label'] = self.model._meta.app_label
        self.config['module_name'] = self.model._meta.module_name
        self.config['filters_to_show'] = filters_to_show
        self.config['can_auto_save'] = self.config.get('can_auto_save', 1)

        filters_to_edit = self.config.get('filters_to_edit', None)
        self.filters_to_edit = filters_to_edit and filters_to_edit.split('|') or []

        self.class_inplace = self.config.get('class_inplace', '')
        self.tag_name_cover = self.config.get('tag_name_cover', 'span')
        self.min_width = self.config.get('min_width', self.DEFAULT_MIN_HEIGHT)
        font_size = self.config.get('font_size', '12')
        if font_size.endswith('px'):
            self.font_size = float(font_size.replace('px', ''))
        else:
            self.font_size = 12
        loads = self.config.get('loads', None)
        self.loads = loads and loads.split(':') or []
        self.initial = {}
        self._transmeta_processing()

    @property
    def name(self):
        return ''

    @property
    def classes(self):
        return 'inplaceedit %sinplaceedit' % (self.name)

    @classmethod
    def get_config(self, request, **kwargs):
        """
        Get the arguments given to the template tag element and complete these
        with the ones from the settings.py if necessary.
        """
        config = kwargs

        config_from_settings = deepcopy(inplace_settings.DEFAULT_INPLACE_EDIT_OPTIONS)
        config_one_by_one = inplace_settings.DEFAULT_INPLACE_EDIT_OPTIONS_ONE_BY_ONE

        if not config_one_by_one:
            # Solution 1: Using default config only if none specified.
            if not config and config_from_settings:
                config = config_from_settings
        else:
            # Solution 2: Updating the configured config with the default one.
            config = dict(config_from_settings, **config)
        return config

    def get_form_class(self):
        return modelform_factory(self.model)

    def get_form(self):
        form_class = self.get_form_class()
        return form_class(instance=self.obj,
                          initial=self.initial,
                          prefix=id(form_class))

    def get_field(self):
        field = self.get_form()[self.field_name]
        field = self._adding_size(field)
        return field

    def get_value_editor(self, value):
        return self.get_field().field.clean(value)

    def render_value(self, field_name=None):
        field_name = field_name or self.field_name_render
        value = getattr(self.obj, field_name)
        if callable(value):
            value = value()
        return apply_filters(value, self.filters_to_show, self.loads)

    def render_value_edit(self):
        value = self.render_value()
        if value:
            return value
        return self.empty_value()

    def empty_value(self):
        '''
        Get the text to display when the field is empty.
        '''
        edit_empty_value = self.config.get('edit_empty_value', False)
        if edit_empty_value:
            return edit_empty_value
        else:
            return unicode(inplace_settings.INPLACEEDIT_EDIT_EMPTY_VALUE)

    def render_field(self, template_name="inplaceeditform/render_field.html", extra_context=None):
        extra_context = extra_context or {}
        context = {'form': self.get_form(),
                   'field': self.get_field(),
                   'STATIC_URL': get_static_url(),
                   'class_inplace': self.class_inplace,
                   'inplace_save_url': reverse('inplace_save')}
        context.update(extra_context)
        return render_to_string(template_name, context)

    def render_media_field(self, template_name="inplaceeditform/render_media_field.html", extra_context=None):
        extra_context = extra_context or {}
        context = {'field': self.get_field(),
                   'STATIC_URL': get_static_url(),
                   'ADMIN_MEDIA_PREFIX': get_admin_static_url()}
        context.update(extra_context)

        return render_to_string(template_name, context)

    def render_config(self, template_name="inplaceeditform/render_config.html"):
        return render_to_string(template_name,
                                {'config': self.config})

    def can_edit(self):
        can_edit_adaptor_path = inplace_settings.ADAPTOR_INPLACEEDIT_EDIT
        if can_edit_adaptor_path:
            path_module, class_adaptor = ('.'.join(can_edit_adaptor_path.split('.')[:-1]),
                                          can_edit_adaptor_path.split('.')[-1])
            cls_perm = getattr(import_module(path_module), class_adaptor)
        else:
            cls_perm = SuperUserPermEditInline
        return cls_perm.can_edit(self)

    def loads_to_post(self, request):
        return json.loads(request.POST.get('value'))

    def save(self, value):
        setattr(self.obj, self.field_name, value)
        self.obj.save()

    def get_auto_height(self):
        return self.config.get('auto_height', False)

    def get_auto_width(self):
        return self.config.get('auto_width', False)

    def get_height(self, widget_options):
        if 'height' in self.config:
            height = self.config['height']
        else:
            height = widget_options.get('height', '0')
        return float(height.replace('px', ''))

    def get_width(self, widget_options):
        if 'width' in self.config:
            return float(self.config['width'].replace('px', ''))
        else:
            return max(float(widget_options.get('width', '0').replace('px', '')), self.min_width)

    def get_font_size(self, widget_options):
        if 'font_size' in self.config:
            font_size = self.config['font_size']
        else:
            font_size = widget_options.get('font_size', '12')
        return float(font_size.replace('px', ''))

    def get_line_height(self, widget_options):
        if 'line_height' in self.config:
            return float(self.config['line_height'].replace('px', ''))
        return self.get_font_size(widget_options)

    def treatment_height(self, height, font_size, width=None):
        if isinstance(height, string) and not height.endswith('px') or not isinstance(height, string):
            height = "%spx" % height
        return height

    def treatment_width(self, width, font_size, height=None):
        if isinstance(width, string) and not width.endswith('px') or not isinstance(width, string):
            width = "%spx" % width
        return width

    def _adding_size(self, field):
        attrs = field.field.widget.attrs
        widget_options = self.config and self.config.get('widget_options', {})
        auto_height = self.get_auto_height()
        auto_width = self.get_auto_width()
        if not 'style' in attrs:
            style = ''
            height = self.get_height(widget_options)
            width = self.get_width(widget_options)
            font_size = self.get_font_size(widget_options)
            line_height = self.get_line_height(widget_options)
            if height and not auto_height:
                style += "height: %s; " % self.treatment_height(height, font_size, width)
            if width and not auto_width:
                style += "width: %s; " % self.treatment_width(width, font_size, height)
            if not auto_height or not auto_width:
                style += "font-size: %spx; " % font_size
                style += "line-height: %spx; " % line_height
            for key, value in widget_options.items():
                if key in ('height', 'width'):
                    continue
                style += "%s: %s; " % (key, value)
            if style:
                attrs['style'] = style
        field.field.widget.attrs = attrs
        return field

    def _transmeta_processing(self):
        if has_transmeta:
            import transmeta
            translatable_fields = self._get_translatable_fields(self.model)
            if self.field_name in translatable_fields:
                self.field_name = transmeta.get_real_fieldname(self.field_name)
                self.transmeta = True
                if not self.render_value(self.field_name):
                    message_translation = unicode(inplace_settings.INPLACEEDIT_EDIT_MESSAGE_TRANSLATION)
                    self.initial = {self.field_name: message_translation}
                return
        self.transmeta = False

    def _get_translatable_fields(self, cls):
        classes = cls.mro()
        translatable_fields = []
        [translatable_fields.extend(cl._meta.translatable_fields) for cl in classes
         if getattr(cl, '_meta', None) and getattr(cl._meta, 'translatable_fields', None)]
        return translatable_fields


class AdaptorTextField(BaseAdaptorField):

    INCREASE_HEIGHT = 3
    MULTIPLIER_WIDTH = 1.25

    @property
    def name(self):
        return 'text'

    def treatment_height(self, height, font_size, width=None):
        if 'height' in self.config:
            effective_height = height
        else:
            effective_height = font_size
        return "%spx" % (effective_height + self.INCREASE_HEIGHT)

    def treatment_width(self, width, font_size, height=None):
        return "%spx" % (width * self.MULTIPLIER_WIDTH)


class AdaptorURLField(AdaptorTextField):

    @property
    def name(self):
        return 'url'

    def render_value(self, field_name=None, template_name="inplaceeditform/adaptor_url/render_value.html"):
        value = super(AdaptorURLField, self).render_value(field_name)
        config = deepcopy(self.config)
        context = {'value': value,
                   'value_link': value,
                   'obj': self.obj}
        config.update(context)
        return render_to_string(template_name, config)


class AdaptorEmailField(AdaptorURLField):

    @property
    def name(self):
        return 'email'

    def render_value(self, field_name=None, template_name="inplaceeditform/adaptor_url/render_value.html"):
        value = super(AdaptorURLField, self).render_value(field_name)
        config = deepcopy(self.config)
        context = {'value': value,
                   'value_link': 'mailto:%s' % value,
                   'obj': self.obj}
        config.update(context)
        return render_to_string(template_name, config)


class AdaptorTextAreaField(BaseAdaptorField):

    @property
    def name(self):
        return 'textarea'


class AdaptorBooleanField(BaseAdaptorField):

    @property
    def name(self):
        return 'boolean'

    def __init__(self, *args, **kwargs):
        super(AdaptorBooleanField, self).__init__(*args, **kwargs)
        self.config['can_auto_save'] = 0

    def render_value(self, field_name=None, template_name="inplaceeditform/adaptor_boolean/render_value.html"):
        value = super(AdaptorBooleanField, self).render_value(field_name)
        return render_to_string(template_name, {'value': value, 'STATIC_URL': get_static_url()})

    def render_field(self, template_name="inplaceeditform/adaptor_boolean/render_field.html", extra_context=None):
        return super(AdaptorBooleanField, self).render_field(template_name, extra_context=extra_context)

    def render_media_field(self, template_name="inplaceeditform/adaptor_boolean/render_media_field.html", extra_context=None):
        return super(AdaptorBooleanField, self).render_media_field(template_name, extra_context=extra_context)


class AdaptorNullBooleanField(AdaptorBooleanField):

    DEFAULT_MIN_HEIGHT = 60

    @property
    def name(self):
        return 'nullboolean'

    def get_value_editor(self, value):
        request = self.request
        value = request.POST.get('value', None)
        if value and isinstance(value, string):
            value = json.loads(value)
        value = {'2': True,
                 True: True,
                 'True': True,
                 '3': False,
                 'False': False,
                 False: False}.get(value, None)
        return self.get_field().field.clean(value)

    def render_value(self, field_name=None, template_name="inplaceeditform/adaptor_boolean/render_value.html"):
        value = super(AdaptorBooleanField, self).render_value(field_name)
        if value is None:
            return value
        return super(AdaptorNullBooleanField, self).render_value(field_name=field_name, template_name=template_name)

    def render_media_field(self, template_name="inplaceeditform/render_media_field.html", extra_context=None):
        return super(AdaptorBooleanField, self).render_media_field(template_name, extra_context=extra_context)


class BaseDateField(BaseAdaptorField):

    def __init__(self, *args, **kwargs):
        super(BaseDateField, self).__init__(*args, **kwargs)
        self.config['can_auto_save'] = 0

    def render_media_field(self, template_name="inplaceeditform/adaptor_date/render_media_field.html", extra_context=None):
        extra_context = extra_context or {}
        context = {'javascript_catalog_url': reverse('django.views.i18n.javascript_catalog')}
        context.update(extra_context)
        return super(BaseDateField, self).render_media_field(template_name,
                                                             extra_context=context)

    def render_value(self, field_name=None):
        val = super(BaseDateField, self).render_value(field_name)
        if not isinstance(val, string):
            val = apply_filters(val, [self.filter_render_value])
        return val


class AdaptorDateField(BaseDateField):

    @property
    def name(self):
        return 'date'

    def __init__(self, *args, **kwargs):
        super(AdaptorDateField, self).__init__(*args, **kwargs)
        self.filter_render_value = "date:'%s'" % settings.DATE_FORMAT

    def render_field(self, template_name="inplaceeditform/adaptor_date/render_field.html", extra_context=None):
        return super(AdaptorDateField, self).render_field(template_name, extra_context=extra_context)

    def get_field(self):
        field = super(AdaptorDateField, self).get_field()
        field.field.widget = AdminDateWidget()
        return field


class AdaptorDateTimeField(BaseDateField):

    @property
    def name(self):
        return 'datetime'

    def __init__(self, *args, **kwargs):
        super(AdaptorDateTimeField, self).__init__(*args, **kwargs)
        self.filter_render_value = "date:'%s'" % settings.DATETIME_FORMAT

    def render_field(self, template_name="inplaceeditform/adaptor_datetime/render_field.html", extra_context=None):
        return super(AdaptorDateTimeField, self).render_field(template_name, extra_context=extra_context)

    def render_media_field(self, template_name="inplaceeditform/adaptor_datetime/render_media_field.html", extra_context=None):
        return super(AdaptorDateTimeField, self).render_media_field(template_name, extra_context=extra_context)

    def get_field(self):
        field = super(AdaptorDateTimeField, self).get_field()
        field.field.widget = AdminSplitDateTime()
        return field


class AdaptorTimeField(BaseDateField):

    @property
    def name(self):
        return 'time'

    def __init__(self, *args, **kwargs):
        super(AdaptorTimeField, self).__init__(*args, **kwargs)
        self.filter_render_value = "date:'%s'" % settings.TIME_FORMAT

    def get_field(self):
        field = super(AdaptorTimeField, self).get_field()
        field.field.widget = AdminTimeWidget()
        return field


class BaseNumberField(BaseAdaptorField):

    def render_value(self, field_name=None):
        value = super(BaseNumberField, self).render_value(field_name=field_name)
        if isinstance(value, numbers.Number):
            value = number_format(value)
        return value


class AdaptorIntegerField(BaseNumberField):

    DEFAULT_MIN_HEIGHT = 40

    @property
    def name(self):
        return 'integer'


class AdaptorFloatField(BaseNumberField):

    DEFAULT_MIN_HEIGHT = 50

    @property
    def name(self):
        return 'float'


class AdaptorDecimalField(BaseNumberField):

    DEFAULT_MIN_HEIGHT = 60

    @property
    def name(self):
        return 'decimal'


class AdaptorChoicesField(BaseAdaptorField):

    MULTIPLIER_HEIGHT = 1.75
    INCREASE_WIDTH = 40

    @property
    def name(self):
        return 'choices'

    def treatment_height(self, height, font_size, width=None):
        if 'height' in self.config:
            effective_height = height
        else:
            effective_height = font_size
        return "%spx" % (effective_height * self.MULTIPLIER_HEIGHT)

    def treatment_width(self, width, font_size, height=None):
        return "%spx" % (width + self.INCREASE_WIDTH)

    def render_value(self, field_name=None):
        field_name = field_name or self.field_name
        return super(AdaptorChoicesField, self).render_value('get_%s_display' % field_name)


class AdaptorForeingKeyField(BaseAdaptorField):

    MULTIPLIER_HEIGHT = 1.75
    INCREASE_WIDTH = 40

    @property
    def name(self):
        return 'fk'

    def treatment_height(self, height, font_size, width=None):
        if 'height' in self.config:
            effective_height = height
        else:
            effective_height = font_size
        return "%spx" % (effective_height * self.MULTIPLIER_HEIGHT)

    def treatment_width(self, width, font_size, height=None):
        return "%spx" % (width + self.INCREASE_WIDTH)

    def render_value(self, field_name=None):
        value = super(AdaptorForeingKeyField, self).render_value(field_name)
        if not isinstance(value, string):
            value = unicode(value)
        return value

    def get_value_editor(self, value):
        value = super(AdaptorForeingKeyField, self).get_value_editor(value)
        return value and value.pk

    def save(self, value):
        setattr(self.obj, "%s_id" % self.field_name, value)
        self.obj.save()


class AdaptorManyToManyField(BaseAdaptorField):

    MULTIPLIER_HEIGHT = 6
    INCREASE_WIDTH = 50

    @property
    def name(self):
        return 'm2m'

    def __init__(self, *args, **kwargs):
        super(AdaptorManyToManyField, self).__init__(*args, **kwargs)
        self._filters_to_show = self.filters_to_show
        self.filters_to_show = None

    def treatment_height(self, height, font_size, width=None):
        if 'height' in self.config:
            effective_height = height
        else:
            effective_height = font_size
        return "%spx" % (effective_height * self.MULTIPLIER_HEIGHT)

    def treatment_width(self, width, font_size, height=None):
        return "%spx" % (width + self.INCREASE_WIDTH)

    def get_value_editor(self, value):
        return [item.pk for item in super(AdaptorManyToManyField, self).get_value_editor(value)]

    def render_value(self, field_name=None):
        return super(AdaptorManyToManyField, self).render_value(field_name).all()


class AdaptorCommaSeparatedManyToManyField(AdaptorManyToManyField):

    @property
    def name(self):
        return 'm2mcomma'

    def __init__(self, *args, **kwargs):
        super(AdaptorCommaSeparatedManyToManyField, self).__init__(*args, **kwargs)
        self.config['can_auto_save'] = 0

    def render_value(self, field_name=None, template_name="inplaceeditform/adaptor_m2m/render_commaseparated_value.html"):
        queryset = super(AdaptorCommaSeparatedManyToManyField, self).render_value(field_name)
        value = render_to_string(template_name, {'queryset': queryset})
        return apply_filters(value, self._filters_to_show, self.loads)


class AdaptorFileField(BaseAdaptorField):

    MULTIPLIER_HEIGHT = 2

    def __init__(self, *args, **kwargs):
        super(AdaptorFileField, self).__init__(*args, **kwargs)
        self.config['can_auto_save'] = 0

    def loads_to_post(self, request):
        files = [f for f in request.FILES.values()]
        return files and files[0] or None

    def treatment_height(self, height, font_size, width=None):
        if 'height' in self.config:
            effective_height = height
        else:
            effective_height = font_size
        return "%spx" % (effective_height * self.MULTIPLIER_HEIGHT)

    def render_field(self, template_name="inplaceeditform/adaptor_file/render_field.html", extra_context=None):
        extra_context = extra_context or {}
        try:
            from django.core.context_processors import csrf
            context = csrf(self.request)
        except ImportError:
            context = {}
        context.update(extra_context)
        return super(AdaptorFileField, self).render_field(template_name, context)

    def render_media_field(self, template_name="inplaceeditform/adaptor_file/render_media_field.html", extra_context=None):
        return super(AdaptorFileField, self).render_media_field(template_name, extra_context=extra_context)

    def render_value(self, field_name=None, template_name='inplaceeditform/adaptor_file/render_value.html'):
        field_name = field_name or self.field_name_render
        value = getattr(self.obj, field_name)
        if not value:
            return ''
        config = deepcopy(self.config)
        context = {'value': value,
                   'obj': self.obj}
        config.update(context)
        return render_to_string(template_name, config)

    def save(self, value):
        file_name = value and value.name
        if not file_name:
            super(AdaptorFileField, self).save(value)
        else:
            getattr(self.obj, self.field_name).save(file_name, value)


class AdaptorImageField(AdaptorFileField):

    def render_field(self, template_name="inplaceeditform/adaptor_image/render_field.html", extra_context=None):
        return super(AdaptorImageField, self).render_field(template_name, extra_context=extra_context)

    def render_media_field(self, template_name="inplaceeditform/adaptor_image/render_media_field.html", extra_context=None):
        return super(AdaptorImageField, self).render_media_field(template_name, extra_context=extra_context)

    def render_value(self, field_name=None, template_name='inplaceeditform/adaptor_image/render_value.html'):
        return super(AdaptorImageField, self).render_value(field_name=field_name, template_name=template_name)

########NEW FILE########
__FILENAME__ = perms
# Copyright (c) 2010-2013 by Yaco Sistemas <goinnn@gmail.com> or <pmartin@yaco.es>
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU Lesser General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU Lesser General Public License for more details.
#
# You should have received a copy of the GNU Lesser General Public License
# along with this programe.  If not, see <http://www.gnu.org/licenses/>.


class SuperUserPermEditInline(object):

    @classmethod
    def can_edit(cls, field):
        return field.request.user.is_authenticated and field.request.user.is_superuser


class AdminDjangoPermEditInline(SuperUserPermEditInline):

    @classmethod
    def can_edit(cls, field):
        is_super_user = super(AdminDjangoPermEditInline, cls).can_edit(field)
        if not is_super_user:
            model = field.model
            model_edit = '%s.change_%s' % (model._meta.app_label,
                                           model._meta.module_name)
            return field.request.user.has_perm(model_edit)
        return is_super_user

########NEW FILE########
__FILENAME__ = settings
# Copyright (c) 2010-2013 by Yaco Sistemas <goinnn@gmail.com> or <pmartin@yaco.es>
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU Lesser General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU Lesser General Public License for more details.
#
# You should have received a copy of the GNU Lesser General Public License
# along with this programe.  If not, see <http://www.gnu.org/licenses/>.

from django.conf import settings
from django.utils.translation import ugettext_lazy as _


INPLACEEDIT_EDIT_EMPTY_VALUE = (getattr(settings, 'INPLACEEDIT_EDIT_EMPTY_VALUE', None) and
                                _(settings.INPLACEEDIT_EDIT_EMPTY_VALUE) or _('Doubleclick to edit'))
INPLACEEDIT_AUTO_SAVE = getattr(settings, 'INPLACEEDIT_AUTO_SAVE', False)
INPLACEEDIT_EVENT = getattr(settings, 'INPLACEEDIT_EVENT', 'dblclick')
INPLACEEDIT_DISABLE_CLICK = getattr(settings, 'INPLACEEDIT_DISABLE_CLICK', True)
INPLACEEDIT_EDIT_MESSAGE_TRANSLATION = (getattr(settings, 'INPLACEEDIT_EDIT_MESSAGE_TRANSLATION', None) and
                                        _(settings.INPLACEEDIT_EDIT_MESSAGE_TRANSLATION) or _('Write a translation'))
INPLACEEDIT_SUCCESS_TEXT = (getattr(settings, 'INPLACEEDIT_SUCCESS_TEXT', None) and
                            _(settings.INPLACEEDIT_SUCCESS_TEXT) or _('Successfully saved'))
INPLACEEDIT_UNSAVED_TEXT = (getattr(settings, 'INPLACEEDIT_UNSAVED_TEXT', None) and
                            _(settings.INPLACEEDIT_UNSAVED_TEXT) or _('You have unsaved changes!'))
INPLACE_ENABLE_CLASS = getattr(settings, 'INPLACE_ENABLE_CLASS', 'enable')
DEFAULT_INPLACE_EDIT_OPTIONS = getattr(settings, "DEFAULT_INPLACE_EDIT_OPTIONS", {})
DEFAULT_INPLACE_EDIT_OPTIONS_ONE_BY_ONE = getattr(settings, 'DEFAULT_INPLACE_EDIT_OPTIONS_ONE_BY_ONE', False)

ADAPTOR_INPLACEEDIT_EDIT = getattr(settings, 'ADAPTOR_INPLACEEDIT_EDIT', None)
ADAPTOR_INPLACEEDIT = getattr(settings, 'ADAPTOR_INPLACEEDIT', {})

INPLACE_GET_FIELD_URL = getattr(settings, 'INPLACE_GET_FIELD_URL', None)
INPLACE_SAVE_URL = getattr(settings, 'INPLACE_SAVE_URL', None)

INPLACE_FIELD_TYPES = getattr(settings, 'INPLACE_FIELD_TYPES', 'input, select, textarea')
INPLACE_FOCUS_WHEN_EDITING = getattr(settings, 'INPLACE_FOCUS_WHEN_EDITING', True)

########NEW FILE########
__FILENAME__ = tag_utils
# Copyright (c) 2010-2013 by Yaco Sistemas <goinnn@gmail.com> or <pmartin@yaco.es>
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU Lesser General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU Lesser General Public License for more details.
#
# You should have received a copy of the GNU Lesser General Public License
# along with this programe.  If not, see <http://www.gnu.org/licenses/>.

from django import template
from django.utils.encoding import smart_str
from django.template.loader import render_to_string


def parse_args_kwargs(parser, token):
    """
    Parse uniformly args and kwargs from a templatetag

    Usage::

      For parsing a template like this:

      {% footag my_contents,height=10,zoom=20 as myvar %}

      You simply do this:

      @register.tag
      def footag(parser, token):
          args, kwargs = parse_args_kwargs(parser, token)
    """
    bits = token.contents.split(' ')

    if len(bits) <= 1:
        raise template.TemplateSyntaxError("'%s' takes at least one argument" % bits[0])

    if token.contents[13] == '"':
        end_quote = token.contents.index('"', 14) + 1
        args = [template.Variable(token.contents[13:end_quote])]
        kwargs_start = end_quote
    else:
        try:
            next_space = token.contents.index(' ', 14)
            kwargs_start = next_space + 1
        except ValueError:
            next_space = None
            kwargs_start = None
        args = [template.Variable(token.contents[13:next_space])]

    kwargs = {}
    kwargs_list = token.contents[kwargs_start:].split(',')
    for kwargs_item in kwargs_list:
        if '=' in kwargs_item:
            k, v = kwargs_item.split('=', 1)
            k = k.strip()
            kwargs[k] = template.Variable(v)
    return args, kwargs


def get_args_and_kwargs(args, kwargs, context):
    out_args = [arg.resolve(context) for arg in args]
    out_kwargs = dict([(smart_str(k, 'ascii'), v.resolve(context)) for k, v in kwargs.items()])
    return out_args, out_kwargs


class RenderWithArgsAndKwargsNode(template.Node):
    """
    Node for templatetags which renders templates with parsed args and kwargs

    Usage::

      class FooNode(RenderWithArgsAndKwargsNode):
          def prepare_context(self, context, args, kwargs):
              context['result_list'] = kwargs['result_list']
              return context

      @register.tag
      def footag(parser, token):
          args, kwargs = parse_args_kwargs(parser, token)
          return FooNode(args, kwargs, template='footag.html')
    """

    def __init__(self, args, kwargs, template):
        self.args = args
        self.kwargs = kwargs
        self.template = template

    def prepare_context(self, args, kwargs, context):
        """
        Hook for overriding in subclasses.

        Note that "args" and "kwargs" parameters are already resolved with context
        """
        return context

    def render(self, context):
        args, kwargs = get_args_and_kwargs(self.args, self.kwargs, context)
        context = self.prepare_context(args, kwargs, context)
        return render_to_string(self.template, context)

########NEW FILE########
__FILENAME__ = inplace_edit
# Copyright (c) 2010-2013 by Yaco Sistemas <goinnn@gmail.com> or <pmartin@yaco.es>
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU Lesser General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU Lesser General Public License for more details.
#
# You should have received a copy of the GNU Lesser General Public License
# along with this programe.  If not, see <http://www.gnu.org/licenses/>.

import json

from django import template
from django.core.urlresolvers import reverse
from django.template import Library, Variable

from inplaceeditform import settings as inplace_settings
from inplaceeditform.commons import get_adaptor_class, get_static_url, get_admin_static_url
from inplaceeditform.tag_utils import RenderWithArgsAndKwargsNode, parse_args_kwargs

register = Library()


def inplace_js(context, activate_inplaceedit=True, toolbar=False):
    request = context['request']
    request.inplace_js_rendered = True
    return {
        'STATIC_URL': get_static_url(),
        'ADMIN_MEDIA_PREFIX': get_admin_static_url(),
        'activate_inplaceedit': activate_inplaceedit,
        'auto_save': json.dumps(inplace_settings.INPLACEEDIT_AUTO_SAVE),
        'event': inplace_settings.INPLACEEDIT_EVENT,
        'disable_click': json.dumps(inplace_settings.INPLACEEDIT_DISABLE_CLICK),
        'toolbar': toolbar,
        'enable_class': inplace_settings.INPLACE_ENABLE_CLASS,
        'success_text': inplace_settings.INPLACEEDIT_SUCCESS_TEXT,
        'unsaved_changes': inplace_settings.INPLACEEDIT_UNSAVED_TEXT,
        'inplace_get_field_url': inplace_settings.INPLACE_GET_FIELD_URL or reverse('inplace_get_field'),
        'inplace_save_url': inplace_settings.INPLACE_SAVE_URL or reverse('inplace_save'),
        'field_types': inplace_settings.INPLACE_FIELD_TYPES,
        'focus_when_editing': json.dumps(inplace_settings.INPLACE_FOCUS_WHEN_EDITING),
        'inplace_js_extra': getattr(request, 'inplace_js_extra', '')
    }
register.inclusion_tag("inplaceeditform/inplace_js.html", takes_context=True)(inplace_js)


def inplace_css(context, toolbar=False):
    request = context['request']
    request.inplace_css_rendered = True
    return {
        'STATIC_URL': get_static_url(),
        'ADMIN_MEDIA_PREFIX': get_admin_static_url(),
        'toolbar': toolbar,
        'inplace_js_extra': getattr(request, 'inplace_css_extra', '')
    }
register.inclusion_tag("inplaceeditform/inplace_css.html", takes_context=True)(inplace_css)


def inplace_static(context):
    return {
        'STATIC_URL': get_static_url(),
        'ADMIN_MEDIA_PREFIX': get_admin_static_url(),
        'toolbar': False,
        'request': context['request']
    }
register.inclusion_tag("inplaceeditform/inplace_static.html", takes_context=True)(inplace_static)


#to old django versions
def inplace_media(context):
    return inplace_static(context)
register.inclusion_tag("inplaceeditform/inplace_static.html", takes_context=True)(inplace_media)


def inplace_toolbar(context):
    return {
        'STATIC_URL': get_static_url(),
        'ADMIN_MEDIA_PREFIX': get_admin_static_url(),
        'toolbar': True,
        'request': context['request']
    }
register.inclusion_tag("inplaceeditform/inplace_static.html", takes_context=True)(inplace_toolbar)


class InplaceEditNode(RenderWithArgsAndKwargsNode):

    def prepare_context(self, args, kwargs, context):
        expression_to_show = args[0]
        tokens_to_show = expression_to_show.split('|')
        obj_field_name, filters_to_show = tokens_to_show[0], '|'.join(tokens_to_show[1:])
        obj_field_name_split = obj_field_name.split(".")
        obj_context = '.'.join(obj_field_name_split[:-1])
        field_name = obj_field_name_split[-1]
        obj = Variable(obj_context).resolve(context)
        adaptor = kwargs.get('adaptor', None)
        class_adaptor = get_adaptor_class(adaptor, obj, field_name)
        request = context.get('request')

        config = class_adaptor.get_config(request, **kwargs)

        adaptor_field = class_adaptor(request, obj, field_name,
                                      filters_to_show,
                                      config)

        context = {
            'adaptor_field': adaptor_field,
        }
        return context


@register.tag
def inplace_edit(parser, token):
    args, kwargs = parse_args_kwargs(parser, token)
    return InplaceEditNode(args, kwargs, 'inplaceeditform/inplace_edit.html')


@register.tag(name='eval')
def do_eval(parser, token):
    "Usage: {% eval %}1 + 1{% endeval %}"

    nodelist = parser.parse(('endeval',))

    class EvalNode(template.Node):
        def render(self, context):
            return template.Template(nodelist.render(context)).render(template.Context(context))
    parser.delete_first_token()
    return EvalNode()

########NEW FILE########
__FILENAME__ = urls
# Copyright (c) 2010-2013 by Yaco Sistemas <goinnn@gmail.com> or <pmartin@yaco.es>
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU Lesser General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU Lesser General Public License for more details.
#
# You should have received a copy of the GNU Lesser General Public License
# along with this programe.  If not, see <http://www.gnu.org/licenses/>.

try:
    from django.conf.urls import patterns, url
except ImportError:  # Django < 1.4
    from django.conf.urls.defaults import patterns, url


urlpatterns = patterns('inplaceeditform.views',
    url(r'^save/$', 'save_ajax', name='inplace_save'),
    url(r'^get_field/$', 'get_field', name='inplace_get_field')
)

########NEW FILE########
__FILENAME__ = views
# Copyright (c) 2010-2013 by Yaco Sistemas <goinnn@gmail.com> or <pmartin@yaco.es>
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU Lesser General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU Lesser General Public License for more details.
#
# You should have received a copy of the GNU Lesser General Public License
# along with this programe.  If not, see <http://www.gnu.org/licenses/>.

import json
import sys

from django.contrib.contenttypes.models import ContentType
from django.http import HttpResponse
from django.forms import ValidationError
from django.shortcuts import get_object_or_404

from inplaceeditform.commons import (get_dict_from_obj, apply_filters,
                                     get_adaptor_class)

MIMETYPE_RESPONSE = 'text'

if sys.version_info[0] >= 2:
    unicode = str


def save_ajax(request):
    if not request.method == 'POST':
        return _get_http_response({'errors': 'It is not a POST request'})
    adaptor = _get_adaptor(request, 'POST')
    if not adaptor:
        return _get_http_response({'errors': 'Params insufficient'})
    if not adaptor.can_edit():
        return _get_http_response({'errors': 'You can not edit this content'})
    value = adaptor.loads_to_post(request)
    new_data = get_dict_from_obj(adaptor.obj)
    form_class = adaptor.get_form_class()
    field_name = adaptor.field_name
    form = form_class(data=new_data, instance=adaptor.obj)
    try:
        value_edit = adaptor.get_value_editor(value)
        value_edit_with_filter = apply_filters(value_edit, adaptor.filters_to_edit)
        new_data[field_name] = value_edit_with_filter
        if form.is_valid():
            adaptor.save(value_edit_with_filter)
            return _get_http_response({'errors': False,
                                       'value': adaptor.render_value_edit()})
        messages = []  # The error is for another field that you are editing
        for field_name_error, errors_field in form.errors.items():
            for error in errors_field:
                messages.append(u"%s: %s" % (field_name_error, error))
        message_i18n = ', '.join(messages)
        return _get_http_response({'errors': message_i18n})
    except ValidationError as error:  # The error is for a field that you are editing
        message_i18n = ', '.join([u"%s" % m for m in error.messages])
        return _get_http_response({'errors': message_i18n})


def get_field(request):
    if not request.method == 'GET':
        return _get_http_response({'errors': 'It is not a GET request'})
    adaptor = _get_adaptor(request, 'GET')
    if not adaptor:
        return _get_http_response({'errors': 'Params insufficient'})
    if not adaptor.can_edit():
        return _get_http_response({'errors': 'You can not edit this content'})
    field_render = adaptor.render_field()
    field_media_render = adaptor.render_media_field()
    return _get_http_response({'field_render': field_render,
                               'field_media_render': field_media_render})


def _get_adaptor(request, method='GET'):
    request_params = getattr(request, method)
    field_name = request_params.get('field_name', None)
    obj_id = request_params.get('obj_id', None)

    app_label = request_params.get('app_label', None)
    module_name = request_params.get('module_name', None)

    if not field_name or not obj_id or not app_label and module_name:
        return None

    contenttype = ContentType.objects.get(app_label=app_label,
                                          model=module_name)

    model_class = contenttype.model_class()
    obj = get_object_or_404(model_class,
                            pk=obj_id)
    adaptor = request_params.get('adaptor', None)
    class_adaptor = get_adaptor_class(adaptor, obj, field_name)

    filters_to_show = request_params.get('filters_to_show', None)

    kwargs = _convert_params_in_config(request_params, ('field_name',
                                                        'obj_id',
                                                        'app_label',
                                                        'module_name',
                                                        'filters_to_show',
                                                        'adaptor'))
    config = class_adaptor.get_config(request, **kwargs)
    adaptor_field = class_adaptor(request, obj, field_name,
                                  filters_to_show,
                                  config)
    return adaptor_field


def _convert_params_in_config(request_params, exclude_params=None):
    exclude_params = exclude_params or []
    config = {}
    options_widget = {}
    for key, value in request_params.items():
        if key not in exclude_params:
            if key.startswith('__widget_'):
                key = key.replace('__widget_', '')
                options_widget[key] = value
            else:
                config[str(key)] = value
    config['widget_options'] = options_widget
    return config


def _get_http_response(context, mimetype=MIMETYPE_RESPONSE):
    return HttpResponse(json.dumps(context),
                        MIMETYPE_RESPONSE)

########NEW FILE########
__FILENAME__ = manage
#!/usr/bin/env python
import os
import sys

from django.conf import ENVIRONMENT_VARIABLE

if __name__ == "__main__":
    os.environ.setdefault(ENVIRONMENT_VARIABLE, "testing.settings")

    from django.core.management import execute_from_command_line

    execute_from_command_line(sys.argv)

########NEW FILE########
__FILENAME__ = run_tests
#!/usr/bin/env python

# Copyright (c) 2010-2013 by Yaco Sistemas <goinnn@gmail.com> or <pmartin@yaco.es>
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU Lesser General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU Lesser General Public License for more details.
#
# You should have received a copy of the GNU Lesser General Public License
# along with this programe.  If not, see <http://www.gnu.org/licenses/>.

import django
import os
import sys
from django.conf import ENVIRONMENT_VARIABLE
from django.core import management


if len(sys.argv) == 1:
    os.environ[ENVIRONMENT_VARIABLE] = 'testing.settings'
else:
    os.environ[ENVIRONMENT_VARIABLE] = sys.argv[1]

if django.VERSION[0] == 1 and django.VERSION[1] <= 5:
    management.call_command('test', 'unit_tests')
else:
    management.call_command('test', 'testing.unit_tests')

########NEW FILE########
__FILENAME__ = urls
# Copyright (c) 2010-2013 by Yaco Sistemas <goinnn@gmail.com> or <pmartin@yaco.es>
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU Lesser General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU Lesser General Public License for more details.
#
# You should have received a copy of the GNU Lesser General Public License
# along with this programe.  If not, see <http://www.gnu.org/licenses/>.

try:
    from django.conf.urls import include, patterns, url
except ImportError:  # Django < 1.4
    from django.conf.urls.defaults import include, patterns, url


urlpatterns = patterns('testing.example_extra_fields.views',
    url(r'^$', 'extra_index', name='extra_index'),
    url(r'^(?P<resource_id>\w+)/$', 'extra_edit', name="extra_edit"),
)

########NEW FILE########
__FILENAME__ = views
# Copyright (c) 2010-2013 by Yaco Sistemas <goinnn@gmail.com> or <pmartin@yaco.es>
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU Lesser General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU Lesser General Public License for more details.
#
# You should have received a copy of the GNU Lesser General Public License
# along with this programe.  If not, see <http://www.gnu.org/licenses/>.
import sys

from django.shortcuts import render_to_response, get_object_or_404
from django.template import RequestContext

from testing.multimediaresources.models import Resource


def extra_index(request):
    return render_to_response('extra_fields/index.html',
                              {'resources': Resource.objects.all()},
                              context_instance=RequestContext(request))


def extra_edit(request, resource_id):
    resource = get_object_or_404(Resource, pk=resource_id)
    return render_to_response('extra_fields/edit.html',
                              {'resource': resource,
                               'python_version': sys.version_info[0]},
                              context_instance=RequestContext(request))

########NEW FILE########
__FILENAME__ = admin
# Copyright (c) 2010-2013 by Yaco Sistemas <goinnn@gmail.com> or <pmartin@yaco.es>
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU Lesser General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU Lesser General Public License for more details.
#
# You should have received a copy of the GNU Lesser General Public License
# along with this programe.  If not, see <http://www.gnu.org/licenses/>.

from django.contrib import admin

from testing.inplace_transmeta.models import News


class NewsAdmin(admin.ModelAdmin):
    pass


admin.site.register(News, NewsAdmin)

########NEW FILE########
__FILENAME__ = middleware
# Copyright (c) 2010-2013 by Yaco Sistemas <goinnn@gmail.com> or <pmartin@yaco.es>
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU Lesser General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU Lesser General Public License for more details.
#
# You should have received a copy of the GNU Lesser General Public License
# along with this programe.  If not, see <http://www.gnu.org/licenses/>.

from django.utils import translation


class LocaleMiddleware(object):
    """This middleware checks if we come from a Plone site
    that set a language cookie. In that case we use that
    language"""

    def process_request(self, request):
        forced_lang = request.GET.get('set_language', None)
        request.forced_lang = forced_lang
        if forced_lang:
            translation.activate(forced_lang)
            request.LANGUAGE_CODE = translation.get_language()
            if hasattr(request, 'session'):
                request.session['django_language'] = forced_lang

########NEW FILE########
__FILENAME__ = news_py2
# Copyright (c) 2010-2013 by Yaco Sistemas <goinnn@gmail.com> or <pmartin@yaco.es>
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU Lesser General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU Lesser General Public License for more details.
#
# You should have received a copy of the GNU Lesser General Public License
# along with this programe.  If not, see <http://www.gnu.org/licenses/>.

import transmeta

from django.db import models
from django.utils.translation import ugettext_lazy as _


class News(models.Model):

    __metaclass__ = transmeta.TransMeta

    title = models.CharField(verbose_name=_(u'Title'),
                             max_length=100)
    description = models.TextField(verbose_name=_(u'Description'),
                                   blank=True, null=True)

    class Meta:
        verbose_name = _('News')
        verbose_name_plural = _('Newss')
        app_label = 'inplace_transmeta'
        db_table = 'inplace_transmeta_news'
        translate = ('description', 'title', )

    @models.permalink
    def get_absolute_url(self):
        return ('news_edit', (self.pk,))

    def __unicode__(self):
        return self.title

########NEW FILE########
__FILENAME__ = news_py3
# Copyright (c) 2010-2013 by Yaco Sistemas <goinnn@gmail.com> or <pmartin@yaco.es>
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU Lesser General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU Lesser General Public License for more details.
#
# You should have received a copy of the GNU Lesser General Public License
# along with this programe.  If not, see <http://www.gnu.org/licenses/>.

import transmeta

from django.db import models
from django.utils.translation import ugettext_lazy as _


class News(models.Model, metaclass=transmeta.TransMeta):

    title = models.CharField(verbose_name=_(u'Title'),
                             max_length=100)
    description = models.TextField(verbose_name=_(u'Description'),
                                   blank=True, null=True)

    class Meta:
        verbose_name = _('News')
        verbose_name_plural = _('Newss')
        app_label = 'inplace_transmeta'
        db_table = 'inplace_transmeta_news'
        translate = ('description', 'title', )

    @models.permalink
    def get_absolute_url(self):
        return ('news_edit', (self.pk,))

    def __str__(self):
        return self.title

########NEW FILE########
__FILENAME__ = urls
# Copyright (c) 2010-2013 by Yaco Sistemas <goinnn@gmail.com> or <pmartin@yaco.es>
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU Lesser General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU Lesser General Public License for more details.
#
# You should have received a copy of the GNU Lesser General Public License
# along with this programe.  If not, see <http://www.gnu.org/licenses/>.

try:
    from django.conf.urls import include, patterns, url
except ImportError:  # Django < 1.4
    from django.conf.urls.defaults import include, patterns, url


urlpatterns = patterns('testing.inplace_transmeta.views',
    url(r'^$', 'news_index', name='news_index'),
    url(r'^(?P<news_id>\w+)/$', 'news_edit', name="news_edit"),
)

########NEW FILE########
__FILENAME__ = views
# Copyright (c) 2010-2013 by Yaco Sistemas <goinnn@gmail.com> or <pmartin@yaco.es>
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU Lesser General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU Lesser General Public License for more details.
#
# You should have received a copy of the GNU Lesser General Public License
# along with this programe.  If not, see <http://www.gnu.org/licenses/>.

from django.shortcuts import render_to_response, get_object_or_404
from django.template import RequestContext

from testing.inplace_transmeta.models import News


def news_index(request):
    return render_to_response('news/index.html',
                              {'news': News.objects.all()},
                              context_instance=RequestContext(request))


def news_edit(request, news_id):
    news_item = get_object_or_404(News, pk=news_id)
    return render_to_response('news/edit.html',
                              {'news_item': news_item},
                              context_instance=RequestContext(request))

########NEW FILE########
__FILENAME__ = admin
# Copyright (c) 2010-2013 by Yaco Sistemas <goinnn@gmail.com> or <pmartin@yaco.es>
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU Lesser General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU Lesser General Public License for more details.
#
# You should have received a copy of the GNU Lesser General Public License
# along with this programe.  If not, see <http://www.gnu.org/licenses/>.

from django.contrib import admin

from testing.multimediaresources.models import TypeResource, Resource


class TypeResourceAdmin(admin.ModelAdmin):
    pass


class ResourceAdmin(admin.ModelAdmin):
    pass


admin.site.register(TypeResource, TypeResourceAdmin)
admin.site.register(Resource, ResourceAdmin)

########NEW FILE########
__FILENAME__ = models
# Copyright (c) 2010-2013 by Yaco Sistemas <goinnn@gmail.com> or <pmartin@yaco.es>
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU Lesser General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU Lesser General Public License for more details.
#
# You should have received a copy of the GNU Lesser General Public License
# along with this programe.  If not, see <http://www.gnu.org/licenses/>.

from django.db import models
from django.contrib.auth.models import User
from django.utils.translation import ugettext_lazy as _

STATUS = (
    ('available', _('Available')),
    ('order', _('Ordered')),
    ('borrow', _('Borrowed')),
)


class TypeResource(models.Model):
    name = models.CharField(verbose_name=_(u'name'),
                            max_length=100, null=False)

    class Meta:
        verbose_name = _(u'Type of resource')

    def __unicode__(self):
        return self.name

    def __str__(self):
        return self.name


class Resource(models.Model):
    name = models.CharField(verbose_name=_(u'Name'),
                            max_length=100, null=False, blank=False,
                            unique=True)
    created = models.DateField(verbose_name=_(u'Date of created'))
    description = models.TextField(verbose_name=_(u'Description'),
                                   blank=True, null=True)
    status = models.CharField(verbose_name=_(u'Status'),
                              max_length=20, choices=STATUS,
                              default='order', help_text='Status of the resource.',
                              editable=True, null=False, blank=False)
    resource_type = models.ForeignKey(TypeResource, verbose_name=_(u'Type'),
                                      null=False, blank=False, editable=True)
    owner = models.ManyToManyField(User, verbose_name=_(u'Owner'))
    amount = models.IntegerField(verbose_name=_(u'Amount'), null=True, blank=True)
    can_borrow = models.BooleanField(verbose_name=_(u'Can borrow?'))
    available_from = models.DateTimeField(verbose_name=_(u"Will be available from"))
    image = models.ImageField(verbose_name=_(u"Associated Image"), null=True, blank=True, upload_to="images")
    file = models.FileField(verbose_name=_(u"File Text"), null=True, blank=True, upload_to="files")

    class Meta:
        verbose_name = _(u'Resources')

    @models.permalink
    def get_absolute_url(self):
        return ('multimediaresources_edit', (self.pk,))

    def __str__(self):
        return self.name

    def __unicode__(self):
        return self.name

########NEW FILE########
__FILENAME__ = urls
# Copyright (c) 2010-2013 by Yaco Sistemas <goinnn@gmail.com> or <pmartin@yaco.es>
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU Lesser General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU Lesser General Public License for more details.
#
# You should have received a copy of the GNU Lesser General Public License
# along with this programe.  If not, see <http://www.gnu.org/licenses/>.

try:
    from django.conf.urls import include, patterns, url
except ImportError:  # Django < 1.4
    from django.conf.urls.defaults import include, patterns, url


urlpatterns = patterns('testing.multimediaresources.views',
    url(r'^$', 'multimediaresources_index', name='multimediaresources_index'),
    url(r'^(?P<resource_id>\w+)/$', 'multimediaresources_edit', name="multimediaresources_edit"),
)

########NEW FILE########
__FILENAME__ = views
# Copyright (c) 2010-2013 by Yaco Sistemas <goinnn@gmail.com> or <pmartin@yaco.es>
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU Lesser General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU Lesser General Public License for more details.
#
# You should have received a copy of the GNU Lesser General Public License
# along with this programe.  If not, see <http://www.gnu.org/licenses/>.

from django.shortcuts import render_to_response, get_object_or_404
from django.template import RequestContext

from testing.multimediaresources.models import Resource


def multimediaresources_index(request):
    return render_to_response('multimediaresources/index.html',
                              {'resources': Resource.objects.all()},
                              context_instance=RequestContext(request))


def multimediaresources_edit(request, resource_id):
    resource = get_object_or_404(Resource, pk=resource_id)
    return render_to_response('multimediaresources/edit.html',
                              {'resource': resource},
                              context_instance=RequestContext(request))

########NEW FILE########
__FILENAME__ = settings
# Copyright (c) 2010-2013 by Yaco Sistemas <goinnn@gmail.com> or <pmartin@yaco.es>
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU Lesser General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU Lesser General Public License for more details.
#
# You should have received a copy of the GNU Lesser General Public License
# along with this programe.  If not, see <http://www.gnu.org/licenses/>.


# Django settings for testing project.
import os
from os import path

DEBUG = True
TEMPLATE_DEBUG = DEBUG

ADMINS = (
    # ('Your Name', 'your_email@example.com'),
)

MANAGERS = ADMINS

BASEDIR = path.dirname(path.abspath(__file__))

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',  # Add 'postgresql_psycopg2', 'postgresql', 'mysql', 'sqlite3' or 'oracle'.
        'NAME': path.join(BASEDIR, 'testing.db'),                      # Or path to database file if using sqlite3.
        'USER': '',                       # Not used with sqlite3.
        'PASSWORD': '',                   # Not used with sqlite3.
        'HOST': '',                      # Set to empty string for localhost. Not used with sqlite3.
        'PORT': '',                      # Set to empty string for default. Not used with sqlite3.
    }
}

# Local time zone for this installation. Choices can be found here:
# http://en.wikipedia.org/wiki/List_of_tz_zones_by_name
# although not all choices may be available on all operating systems.
# On Unix systems, a value of None will cause Django to use the same
# timezone as the operating system.
# If running in a Windows environment this must be set to the same as your
# system time zone.
TIME_ZONE = 'America/Chicago'

# Language code for this installation. All choices can be found here:
# http://www.i18nguy.com/unicode/language-identifiers.html
LANGUAGE_CODE = 'en-us'

LANGUAGES = (
      ('es', 'Spanish'),
      ('en', 'English'),
)

SITE_ID = 1

# If you set this to False, Django will make some optimizations so as not
# to load the internationalization machinery.
USE_I18N = True

# If you set this to False, Django will not format dates, numbers and
# calendars according to the current locale
USE_L10N = True

# Absolute filesystem path to the directory that will hold user-uploaded files.
# Example: "/home/media/media.lawrence.com/media/"
MEDIA_ROOT = path.join(BASEDIR, 'media')

# URL that handles the media served from MEDIA_ROOT. Make sure to use a
# trailing slash.
# Examples: "http://media.lawrence.com/media/", "http://example.com/media/"
MEDIA_URL = '/my_media/'

# Make this unique, and don't share it with anybody.
SECRET_KEY = '98qi@6+%3nt__m_o6@o(n8%+!)yjxrl*fcs%l@2g=e-*4fu4h%'

# List of callables that know how to import templates from various sources.
TEMPLATE_LOADERS = (
    'django.template.loaders.filesystem.Loader',
    'django.template.loaders.app_directories.Loader',
#     'django.template.loaders.eggs.Loader',
)

ALLOWED_HOSTS = [
    'localhost',
]

MIDDLEWARE_CLASSES = (
    'django.middleware.common.CommonMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
)

ROOT_URLCONF = 'testing.urls'

TEMPLATE_DIRS = (
    path.join(BASEDIR, 'templates'),
)

INSTALLED_APPS = (
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.sites',
    'inplaceeditform',
    'django.contrib.admin',
    'testing.multimediaresources',
    'testing.unusual_fields',
    'testing.unit_tests',
)


# A sample logging configuration. The only tangible logging
# performed by this configuration is to send an email to
# the site admins on every HTTP 500 error.
# See http://docs.djangoproject.com/en/dev/topics/logging for
# more details on how to customize your logging configuration.
LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'handlers': {
        'mail_admins': {
            'level': 'ERROR',
            'class': 'django.utils.log.AdminEmailHandler'
        }
    },
    'loggers': {
        'django.request': {
            'handlers': ['mail_admins'],
            'level': 'ERROR',
            'propagate': True,
        },
    }
}

TEMPLATE_CONTEXT_PROCESSORS = (
    'django.contrib.auth.context_processors.auth',
    'django.core.context_processors.debug',
    'django.core.context_processors.i18n',
    'django.core.context_processors.media',
    'django.core.context_processors.request',
)

# django-inplaceedit customization

#INPLACEEDIT_EDIT_EMPTY_VALUE = 'Double click to edit...'
#INPLACEEDIT_AUTO_SAVE = True
#INPLACEEDIT_EVENT = "click"
#INPLACEEDIT_DISABLE_CLICK = False
#INPLACEEDIT_EDIT_MESSAGE_TRANSLATION = 'Write a translation...'
#INPLACEEDIT_SUCCESS_TEXT = 'Successfully saved...'
#INPLACEEDIT_UNSAVED_TEXT = 'You have unsaved changes!!!!'
#INPLACE_ENABLE_CLASS = 'enable'
#DEFAULT_INPLACE_EDIT_OPTIONS = {}
#DEFAULT_INPLACE_EDIT_OPTIONS_ONE_BY_ONE = False
#ADAPTOR_INPLACEEDIT_EDIT = 'inplaceeditform.perms.AdminDjangoPermEditInline'
#ADAPTOR_INPLACEEDIT = {}
#INPLACE_GET_FIELD_URL = None
#INPLACE_SAVE_URL = None
#INPLACE_FIELD_TYPES = 'input, select, textarea'
#INPLACE_FOCUS_WHEN_EDITING = True


# If transmeta is installed
from django.conf import ENVIRONMENT_VARIABLE
# I check it if transmeta is installed of this way because if I execute
# python manage.py runserver --settings=settings_no_debug
# I get an error
if os.environ[ENVIRONMENT_VARIABLE] == 'testing.settings':
    try:
        import transmeta
        TRANSMETA_DEFAULT_LANGUAGE = 'en'
        INSTALLED_APPS += ('transmeta',
                           'testing.inplace_transmeta')
        MIDDLEWARE_CLASSES += (
            'django.middleware.locale.LocaleMiddleware',
            'testing.inplace_transmeta.middleware.LocaleMiddleware')
    except ImportError:
        pass

# If inplaceeditform_extra_fields is installed

try:
    import inplaceeditform_extra_fields
    INSTALLED_APPS += ('inplaceeditform_extra_fields',
                       'testing.example_extra_fields')
    ADAPTOR_INPLACEEDIT = {'auto_fk': 'inplaceeditform_extra_fields.fields.AdaptorAutoCompleteForeingKeyField',
                           'auto_m2m': 'inplaceeditform_extra_fields.fields.AdaptorAutoCompleteManyToManyField',
                           'image_thumb': 'inplaceeditform_extra_fields.fields.AdaptorImageThumbnailField',
                           'tiny': 'inplaceeditform_extra_fields.fields.AdaptorTinyMCEField',
                           'tiny_simple': 'inplaceeditform_extra_fields.fields.AdaptorSimpleTinyMCEField',
                           }
    try:
        import ajax_select
        INSTALLED_APPS += ('ajax_select',)
        AJAX_LOOKUP_CHANNELS = {
            'typeresource': {'model': 'multimediaresources.typeresource',
                             'search_field': 'name'},
            'user': {'model': 'auth.user',
                     'search_field': 'username'},
        }
    except ImportError:
        pass
    try:
        import sorl
        INSTALLED_APPS += ('sorl.thumbnail',)
        THUMBNAIL_DEBUG = DEBUG
    except ImportError:
        pass
except ImportError:
    pass


# Custom settings to the different django versions

import django

if django.VERSION[0] >= 1 and django.VERSION[1] >= 4:
    TEMPLATE_CONTEXT_PROCESSORS += ('django.core.context_processors.tz',)

if django.VERSION[0] >= 1 and django.VERSION[1] >= 3:
    INSTALLED_APPS += ('django.contrib.staticfiles',)
    # Absolute path to the directory static files should be collected to.
    # Don't put anything in this directory yourself; store your static files
    # in apps' "static/" subdirectories and in STATICFILES_DIRS.
    # Example: "/home/media/media.lawrence.com/static/"
    STATIC_ROOT = path.join(BASEDIR, 'static')

    # URL prefix for static files.
    # Example: "http://media.lawrence.com/static/"
    STATIC_URL = '/static/'

    # URL prefix for admin static files -- CSS, JavaScript and images.
    # Make sure to use a trailing slash.
    # Examples: "http://foo.com/static/admin/", "/static/admin/".
    ADMIN_MEDIA_PREFIX = '/static/admin/'

    # Additional locations of static files
    STATICFILES_DIRS = (
        # Put strings here, like "/home/html/static" or "C:/www/django/static".
        # Always use forward slashes, even on Windows.
        # Don't forget to use absolute paths, not relative paths.
    )

    # List of finder classes that know how to find static files in
    # various locations.
    STATICFILES_FINDERS = (
        'django.contrib.staticfiles.finders.FileSystemFinder',
        'django.contrib.staticfiles.finders.AppDirectoriesFinder',
    #    'django.contrib.staticfiles.finders.DefaultStorageFinder',
    )
    TEMPLATE_CONTEXT_PROCESSORS += ('django.core.context_processors.static',)

if django.VERSION[0] >= 1 and django.VERSION[1] >= 2:
    INSTALLED_APPS += ('django.contrib.messages',)
    MIDDLEWARE_CLASSES += ('django.middleware.csrf.CsrfViewMiddleware',
                           'django.contrib.messages.middleware.MessageMiddleware')
    TEMPLATE_CONTEXT_PROCESSORS += ('django.contrib.messages.context_processors.messages',)

########NEW FILE########
__FILENAME__ = settings_no_debug
from testing.settings import *

DEBUG = False
TEMPLATE_DEBUG = DEBUG

try:
    import transmeta
    TRANSMETA_DEFAULT_LANGUAGE = 'en'
    INSTALLED_APPS += ('transmeta',
                        'testing.inplace_transmeta')
    MIDDLEWARE_CLASSES += (
        'django.middleware.locale.LocaleMiddleware',
        'testing.inplace_transmeta.middleware.LocaleMiddleware')
except ImportError:
    pass

########NEW FILE########
__FILENAME__ = models

########NEW FILE########
__FILENAME__ = tests
# Copyright (c) 2010-2013 by Yaco Sistemas <goinnn@gmail.com> or <pmartin@yaco.es>
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU Lesser General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU Lesser General Public License for more details.
#
# You should have received a copy of the GNU Lesser General Public License
# along with this programe.  If not, see <http://www.gnu.org/licenses/>.
import os
import datetime
import decimal
import json
import transmeta
import sys

from django.conf import settings
from django.contrib.contenttypes.models import ContentType
from django.contrib.auth.models import Permission, User
from django.core.urlresolvers import reverse
from django.db import models
from django.test import TestCase
from django.test.client import Client

from inplaceeditform import settings as inplace_settings
from inplaceeditform.commons import get_adaptor_class

from testing.inplace_transmeta.models import News
from testing.multimediaresources.models import Resource
from testing.unusual_fields.models import UnusualModel

if sys.version_info[0] >= 2:
    string = str
else:
    string = basestring


class InplaceTestCase(TestCase):

    def setUp(self):
        self.client = Client(enforce_csrf_checks=False)

    def __client_login(self, username=None, password=None):
        client = self.client
        username = username or 'test'
        password = password or 'testtest'
        is_login = client.login(username=username, password=password)
        self.assertEqual(is_login, True)
        self.user = User.objects.get(username=username)
        return client

    def _test_get_fields(self, model, obj=None, field_names=None, client=None, has_error=False):
        client = client or self.__client_login()
        obj = obj or model.objects.all()[0]
        self.assertEqual(model, obj.__class__)
        module_name = model._meta.module_name
        app_label = model._meta.app_label
        field_names = field_names or model._meta.get_all_field_names()
        for field in field_names:
            if field == 'id' or field.endswith('_id'):  # id or id fk
                continue
            url = ('%s?app_label=%s&module_name=%s&field_name=%s&obj_id=%s&__widget_font_size=12.5px'
                   '&__widget_line_height=12.5&__widget_height=19.5px&__widget_width=137.5px' %
                   (reverse('inplace_get_field'),
                    app_label,
                    module_name,
                    field,
                    obj.pk))
            response = client.get(url)
            self.assertEqual(response.status_code, 200)
            self.assertEqual(bool(json.loads(response.content.decode('utf-8')).get('errors', None)),
                             has_error)

    def _test_save_fields(self, model, obj=None, field_names=None, client=None, has_error=False):
        client = client or self.__client_login()
        obj = obj or model.objects.all()[0]
        self.assertEqual(model, obj.__class__)
        module_name = model._meta.module_name
        app_label = model._meta.app_label
        field_names = field_names or model._meta.get_all_field_names()
        for field_name in field_names:
            extra_data = {}
            if field_name in transmeta.get_all_translatable_fields(model):
                field = model._meta.get_field_by_name(transmeta.get_fallback_fieldname(field_name))[0]
            else:
                field = model._meta.get_field_by_name(field_name)[0]
            if field_name == 'id' or field_name.endswith('_id'):  # id or id fk
                continue
            url = reverse('inplace_save')
            value = getattr(obj, field_name)
            if isinstance(field, models.FileField):
                value = '"example1.jpg"'
                file_path = os.path.join(settings.MEDIA_ROOT, 'images',
                                         'example1.jpg')
                extra_data['attachment'] = open(file_path, 'rb')
            elif isinstance(value, datetime.datetime):
                value = '"1982-11-14 03:13:12"'
            elif isinstance(value, datetime.date):
                value = '"1982-11-14"'
            elif isinstance(value, datetime.time):
                value = '"03:13:12"'
            else:
                if hasattr(value, 'all'):
                    value = [str(obj_rel.pk) for obj_rel in value.model.objects.all()]
                elif isinstance(value, decimal.Decimal):
                    value = float(value) + 10
                elif (isinstance(value, string) and
                      isinstance(field, models.CharField) and
                      not isinstance(field, models.CommaSeparatedIntegerField) and
                      not isinstance(field, models.EmailField)):
                    if field.choices:
                        value = field.choices[0][0]
                    else:
                        value += '_save'
                elif isinstance(field, models.CommaSeparatedIntegerField):
                    value += ',44'
                elif isinstance(field, models.EmailField):
                    value = 'xxx@es.com'
                elif isinstance(field, models.ForeignKey):
                    value = field.rel.to.objects.all()[0].pk
                elif isinstance(field, bool):
                    value = not value
                value = json.dumps(value)
            adaptor = get_adaptor_class(obj=obj, field_name=field_name)(None, obj, field_name).name
            data = {'app_label': app_label,
                    'module_name': module_name,
                    'field_name': field_name,
                    'value': value,
                    'obj_id': obj.pk,
                    'adaptor': adaptor}
            data.update(extra_data)
            response = client.post(url, data)
            self.assertEqual(response.status_code, 200)
            self.assertEqual(bool(json.loads(response.content.decode('utf-8')).get('errors', None)),
                             has_error)

    def _check_render_templatetag_inplace_edit(self, model, url_name, client=None):
        client = client or self.__client_login()
        objs = model.objects.all()
        self.assertEqual(objs.exists(), True)
        url = reverse(url_name, args=(objs[0].pk,))
        response = client.get(url)
        self.assertEqual(response.status_code, 200)

    def test_get_fields_resource(self):
        self._test_get_fields(Resource)

    def test_save_fields_resource(self):
        self._test_save_fields(Resource)

    def test_get_fields_unusualmodel(self):
        self._test_get_fields(UnusualModel)

    def test_save_fields_unusualmodel(self):
        self._test_save_fields(UnusualModel)

    def test_get_fields_news(self):
        obj = News.objects.filter(**{transmeta.get_fallback_fieldname('description'): ''})[0]
        self._test_get_fields(News, obj=obj, field_names=['title', 'description'])

    def test_save_fields_news(self):
        obj = News.objects.filter(**{transmeta.get_fallback_fieldname('description'): ''})[0]
        self._test_save_fields(News, obj=obj, field_names=['title', 'description'])

    def test_check_render_templatetag_inplace_edit(self):
        client = self.__client_login()
        for x in range(2):
            self._check_render_templatetag_inplace_edit(Resource, 'multimediaresources_edit', client)
            self._check_render_templatetag_inplace_edit(UnusualModel, 'unusual_edit', client)
            self._check_render_templatetag_inplace_edit(News, 'news_edit', client)
            client.logout()

    def test_admin_django_perm(self):
        adaptor_inplaceedit_edit_default_value = inplace_settings.ADAPTOR_INPLACEEDIT_EDIT
        inplace_settings.ADAPTOR_INPLACEEDIT_EDIT = 'inplaceeditform.perms.AdminDjangoPermEditInline'
        client = self.__client_login(username='lgs', password='lgslgs')
        model_class = Resource
        ct = ContentType.objects.get_for_model(model_class)
        self._test_get_fields(model_class, client=client, has_error=True)
        self._test_save_fields(model_class, client=client, has_error=True)
        permissions = Permission.objects.filter(content_type=ct)
        self.user.user_permissions = permissions
        self._test_get_fields(model_class, client=client, has_error=False)
        self._test_save_fields(model_class, client=client, has_error=False)
        inplace_settings.ADAPTOR_INPLACEEDIT_EDIT = adaptor_inplaceedit_edit_default_value

    def test_bad_requests(self):
        has_error = True
        client = self.__client_login()
        url_get_field = reverse('inplace_get_field')

        response = client.get(url_get_field)
        self.assertEqual(response.status_code, 200)
        self.assertEqual(bool(json.loads(response.content.decode('utf-8')).get('errors', None)),
                         has_error)
        response = client.post(url_get_field)
        self.assertEqual(response.status_code, 200)
        self.assertEqual(bool(json.loads(response.content.decode('utf-8')).get('errors', None)),
                         has_error)

        url_save = reverse('inplace_save')
        response = client.post(url_save)
        self.assertEqual(response.status_code, 200)
        self.assertEqual(bool(json.loads(response.content.decode('utf-8')).get('errors', None)),
                         has_error)
        response = client.get(url_save)
        self.assertEqual(response.status_code, 200)
        self.assertEqual(bool(json.loads(response.content.decode('utf-8')).get('errors', None)),
                         has_error)

        obj = Resource.objects.all()[0]

        data = {'app_label': obj.__class__._meta.app_label,
                'module_name': obj.__class__._meta.module_name,
                'field_name': 'name',
                'value': '""',
                'obj_id': obj.pk,
                'adaptor': 'text'}
        response = client.post(url_save, data)
        self.assertEqual(response.status_code, 200)
        self.assertEqual(bool(json.loads(response.content.decode('utf-8')).get('errors', None)),
                         has_error)
        data['value'] = '"New value"'
        response = client.post(url_save, data)
        self.assertEqual(response.status_code, 200)
        self.assertEqual(bool(json.loads(response.content.decode('utf-8')).get('errors', None)),
                         not has_error)

        obj.name = ''
        obj.save()
        data['field_name'] = 'description'
        data['value'] = '"Description...."'
        response = client.post(url_save, data)
        self.assertEqual(response.status_code, 200)
        self.assertEqual(bool(json.loads(response.content.decode('utf-8')).get('errors', None)),
                         has_error)
        obj.name = 'New value'
        obj.save()
        response = client.post(url_save, data)
        self.assertEqual(response.status_code, 200)
        self.assertEqual(bool(json.loads(response.content.decode('utf-8')).get('errors', None)),
                         not has_error)

########NEW FILE########
__FILENAME__ = admin
# Copyright (c) 2010-2013 by Yaco Sistemas <goinnn@gmail.com> or <pmartin@yaco.es>
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU Lesser General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU Lesser General Public License for more details.
#
# You should have received a copy of the GNU Lesser General Public License
# along with this programe.  If not, see <http://www.gnu.org/licenses/>.

from django.contrib import admin

from testing.unusual_fields.models import UnusualModel


class UnusualModelAdmin(admin.ModelAdmin):
    pass


class ResourceAdmin(admin.ModelAdmin):
    pass


admin.site.register(UnusualModel, UnusualModelAdmin)

########NEW FILE########
__FILENAME__ = models
import os

from django.conf import settings
# Copyright (c) 2010-2013 by Yaco Sistemas <goinnn@gmail.com> or <pmartin@yaco.es>
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU Lesser General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU Lesser General Public License for more details.
#
# You should have received a copy of the GNU Lesser General Public License
# along with this programe.  If not, see <http://www.gnu.org/licenses/>.

import django

from django.db import models
from django.contrib.auth.models import User
from django.utils.translation import ugettext_lazy as _


class UnusualModel(models.Model):

    comma_field = models.CommaSeparatedIntegerField(max_length=250)
    decimal_field = models.DecimalField(decimal_places=10, max_digits=20)
    filepath_field = models.FilePathField(path=os.path.join(settings.MEDIA_ROOT, 'images'),
                                          null=True, blank=True)
    float_field = models.FloatField(null=True, blank=True)
    if django.VERSION[0] >= 1 and django.VERSION[0] >= 4:
        generic_ip_field = models.GenericIPAddressField()
    else:
        generic_ip_field = models.CharField(max_length=200)
    nullboolean_field = models.NullBooleanField()
    if django.VERSION[0] >= 1 and django.VERSION[0] >= 2:
        big_integer_field = models.BigIntegerField()
    else:
        big_integer_field = models.IntegerField()
    positive_integer_field = models.PositiveIntegerField()
    positive_small_integer_field = models.PositiveSmallIntegerField()
    slug_field = models.SlugField()
    smallinteger_field = models.SmallIntegerField()
    time_field = models.TimeField()
    url_field = models.URLField()
    email_field = models.EmailField()
    one_to_one_field = models.OneToOneField(User)

    class Meta:
        verbose_name = _('UnusualModel')
        verbose_name_plural = _('UnusualModels')

    @models.permalink
    def get_absolute_url(self):
        return ('unusual_edit', (self.pk,))

    def __str__(self):
        return self.slug_field

    def __unicode__(self):
        return self.slug_field

########NEW FILE########
__FILENAME__ = urls
# Copyright (c) 2010-2013 by Yaco Sistemas <goinnn@gmail.com> or <pmartin@yaco.es>
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU Lesser General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU Lesser General Public License for more details.
#
# You should have received a copy of the GNU Lesser General Public License
# along with this programe.  If not, see <http://www.gnu.org/licenses/>.

try:
    from django.conf.urls import include, patterns, url
except ImportError:  # Django < 1.4
    from django.conf.urls.defaults import include, patterns, url


urlpatterns = patterns('testing.unusual_fields.views',
    url(r'^$', 'unusual_index', name='unusual_index'),
    url(r'^(?P<unusual_id>\w+)/$', 'unusual_edit', name="unusual_edit"),
)

########NEW FILE########
__FILENAME__ = views
# Copyright (c) 2010-2013 by Yaco Sistemas <goinnn@gmail.com> or <pmartin@yaco.es>
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU Lesser General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU Lesser General Public License for more details.
#
# You should have received a copy of the GNU Lesser General Public License
# along with this programe.  If not, see <http://www.gnu.org/licenses/>.

from django.shortcuts import render_to_response, get_object_or_404
from django.template import RequestContext

from testing.unusual_fields.models import UnusualModel


def unusual_index(request):
    return render_to_response('unusual_fields/index.html',
                              {'unusual_objs': UnusualModel.objects.all()},
                              context_instance=RequestContext(request))


def unusual_edit(request, unusual_id):
    unusual_obj = get_object_or_404(UnusualModel, pk=unusual_id)
    return render_to_response('unusual_fields/edit.html',
                              {'unusual_obj': unusual_obj},
                              context_instance=RequestContext(request))

########NEW FILE########
__FILENAME__ = urls
# Copyright (c) 2010-2013 by Yaco Sistemas <goinnn@gmail.com> or <pmartin@yaco.es>
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU Lesser General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU Lesser General Public License for more details.
#
# You should have received a copy of the GNU Lesser General Public License
# along with this programe.  If not, see <http://www.gnu.org/licenses/>.

from django.conf import settings
try:
    from django.conf.urls import include, patterns, url
except ImportError:  # Django < 1.4
    from django.conf.urls.defaults import include, patterns, url

from django.contrib import admin
from django.core.urlresolvers import reverse
from django.shortcuts import render_to_response
from django.template import RequestContext

admin.autodiscover()

js_info_dict = {
    'packages': ('django.conf',),
}

urlpatterns = patterns('',
    url(r'^inplaceeditform/', include('inplaceeditform.urls')),
    url(r'^jsi18n/$', 'django.views.i18n.javascript_catalog', js_info_dict),
    url(r'^admin/', include(admin.site.urls)),
    url(r'^multimediaresources/', include('testing.multimediaresources.urls')),
    url(r'^unusualfields/', include('testing.unusual_fields.urls')),
)


def index(request):
    context = {}
    context['multimediaresources_url'] = reverse('multimediaresources_index')
    context['unusual_url'] = reverse('unusual_index')
    if 'testing.inplace_transmeta' in settings.INSTALLED_APPS:
        context['news_url'] = reverse('news_index')
    if 'testing.example_extra_fields' in settings.INSTALLED_APPS:
        context['extra_url'] = reverse('extra_index')
    return render_to_response('index.html',
                              context,
                              context_instance=RequestContext(request))

urlpatterns += patterns('',
    url(r'^$', index))

if 'testing.inplace_transmeta' in settings.INSTALLED_APPS:
    urlpatterns += patterns('',
        url(r'^news/', include('testing.inplace_transmeta.urls')),
    )

if 'testing.example_extra_fields' in settings.INSTALLED_APPS:
    urlpatterns += patterns('',
        url(r'^extra_fields/', include('testing.example_extra_fields.urls'))
    )
    if 'ajax_select' in settings.INSTALLED_APPS:
        from ajax_select import urls as ajax_select_urls
        urlpatterns += patterns('',
            url(r'^ajax_select/', include(ajax_select_urls))
        )

urlpatterns += patterns('',
    (r'^%s(?P<path>.*)$' % settings.MEDIA_URL[1:],
     'django.views.static.serve',
     {'document_root': settings.MEDIA_ROOT,
      'show_indexes': True}),
)

########NEW FILE########
