__FILENAME__ = package_name

########NEW FILE########
__FILENAME__ = version
__version__ = "0.1.0"

########NEW FILE########
__FILENAME__ = conf
# -*- coding: utf-8 -*-
#
# MoviePy documentation build configuration file, created by
# sphinx-quickstart on Sat Jul 13 14:47:48 2013.
#
# This file is execfile()d with the current directory set to its containing dir.
#
# Note that not all possible configuration values are present in this
# autogenerated file.
#
# All configuration values have a default; values that are commented out
# serve to show the default.

import sys, os

# If extensions (or modules to document with autodoc) are in another directory,
# add these directories to sys.path here. If the directory is relative to the
# documentation root, use os.path.abspath to make it absolute, like shown here.
#sys.path.insert(0, os.path.abspath('.'))

# -- General configuration -----------------------------------------------------

# If your documentation needs a minimal Sphinx version, state it here.
#needs_sphinx = '1.0'

# Add any Sphinx extension module names here, as strings. They can be extensions
# coming with Sphinx (named 'sphinx.ext.*') or your custom ones.
extensions = ['sphinx.ext.autodoc', 'sphinx.ext.todo', 'sphinx.ext.viewcode']

# Add any paths that contain templates here, relative to this directory.
templates_path = ['_templates']

# The suffix of source filenames.
source_suffix = '.rst'

# The encoding of source files.
#source_encoding = 'utf-8-sig'

# The master toctree document.
master_doc = 'index'

# General information about the project.
project = u'$PACKAGE_NAME'
copyright = u'$YEAR, $AUTHOR'

# The version info for the project you're documenting, acts as replacement for
# |version| and |release|, also used in various other places throughout the
# built documents.
#
# The short X.Y version.
version = '0.1.0'
# The full version, including alpha/beta/rc tags.
release = '0.1.0'

# The language for content autogenerated by Sphinx. Refer to documentation
# for a list of supported languages.
#language = None

# There are two options for replacing |today|: either, you set today to some
# non-false value, then it is used:
#today = ''
# Else, today_fmt is used as the format for a strftime call.
#today_fmt = '%B %d, %Y'

# List of patterns, relative to source directory, that match files and
# directories to ignore when looking for source files.
exclude_patterns = ['_build']

# The reST default role (used for this markup: `text`) to use for all documents.
#default_role = None

# If true, '()' will be appended to :func: etc. cross-reference text.
#add_function_parentheses = True

# If true, the current module name will be prepended to all description
# unit titles (such as .. function::).
#add_module_names = True

# If true, sectionauthor and moduleauthor directives will be shown in the
# output. They are ignored by default.
#show_authors = False

# The name of the Pygments (syntax highlighting) style to use.
pygments_style = 'sphinx'

# A list of ignored prefixes for module index sorting.
#modindex_common_prefix = []

# If true, keep warnings as "system message" paragraphs in the built documents.
#keep_warnings = False


# -- Options for HTML output ---------------------------------------------------

# The theme to use for HTML and HTML Help pages.  See the documentation for
# a list of builtin themes.

sys.path.append(os.path.abspath('_themes'))
html_theme_path = ['_themes']
#html_theme = 'flask'

# Theme options are theme-specific and customize the look and feel of a theme
# further.  For a list of options available for each theme, see the
# documentation.
#html_theme_options = {}

# Add any paths that contain custom themes here, relative to this directory.
#html_theme_path = []

# The name for this set of Sphinx documents.  If None, it defaults to
# "<project> v<release> documentation".
#html_title = None

# A shorter title for the navigation bar.  Default is the same as html_title.
#html_short_title = None

# The name of an image file (relative to this directory) to place at the top
# of the sidebar.
#html_logo = None

# The name of an image file (within the static path) to use as favicon of the
# docs.  This file should be a Windows icon file (.ico) being 16x16 or 32x32
# pixels large.
#html_favicon = None

# Add any paths that contain custom static files (such as style sheets) here,
# relative to this directory. They are copied after the builtin static files,
# so a file named "default.css" will overwrite the builtin "default.css".
html_static_path = ['_static']

# If not '', a 'Last updated on:' timestamp is inserted at every page bottom,
# using the given strftime format.
#html_last_updated_fmt = '%b %d, %Y'

# If true, SmartyPants will be used to convert quotes and dashes to
# typographically correct entities.
#html_use_smartypants = True

# Custom sidebar templates, maps document names to template names.
#html_sidebars = {}

# Additional templates that should be rendered to pages, maps page names to
# template names.
#html_additional_pages = {}

# If false, no module index is generated.
#html_domain_indices = True

# If false, no index is generated.
#html_use_index = True

# If true, the index is split into individual pages for each letter.
#html_split_index = False

# If true, links to the reST sources are added to the pages.
#html_show_sourcelink = True

# If true, "Created using Sphinx" is shown in the HTML footer. Default is True.
#html_show_sphinx = True

# If true, "(C) Copyright ..." is shown in the HTML footer. Default is True.
#html_show_copyright = True

# If true, an OpenSearch description file will be output, and all pages will
# contain a <link> tag referring to it.  The value of this option must be the
# base URL from which the finished HTML is served.
#html_use_opensearch = ''

# This is the file name suffix for HTML files (e.g. ".xhtml").
#html_file_suffix = None

# Output file base name for HTML help builder.
htmlhelp_basename = '$PACKAGE_NAMEdoc'


# -- Options for LaTeX output --------------------------------------------------

latex_elements = {
# The paper size ('letterpaper' or 'a4paper').
#'papersize': 'letterpaper',

# The font size ('10pt', '11pt' or '12pt').
#'pointsize': '10pt',

# Additional stuff for the LaTeX preamble.
#'preamble': '',
}

# Grouping the document tree into LaTeX files. List of tuples
# (source start file, target name, title, author, documentclass [howto/manual]).
latex_documents = [
  ('index', '$PACKAGE_NAME.tex', u'$PACKAGE_NAME Documentation',
   u'$AUTHOR', 'manual'),
]

# The name of an image file (relative to this directory) to place at the top of
# the title page.
#latex_logo = None

# For "manual" documents, if this is true, then toplevel headings are parts,
# not chapters.
#latex_use_parts = False

# If true, show page references after internal links.
#latex_show_pagerefs = False

# If true, show URL addresses after external links.
#latex_show_urls = False

# Documents to append as an appendix to all manuals.
#latex_appendices = []

# If false, no module index is generated.
#latex_domain_indices = True


# -- Options for manual page output --------------------------------------------

# One entry per manual page. List of tuples
# (source start file, name, description, authors, manual section).
man_pages = [
    ('index', '$package_name', u'PACKAGE_NAME Documentation',
     [u'$AUTHOR'], 1)
]

# If true, show URL addresses after external links.
#man_show_urls = False


# -- Options for Texinfo output ------------------------------------------------

# Grouping the document tree into Texinfo files. List of tuples
# (source start file, target name, title, author,
#  dir menu entry, description, category)
texinfo_documents = [
  ('index', '$PACKAGE_NAME', u'$PACKAGE_NAME Documentation',
   u'$AUTHOR', '$PACKAGE_NAME', 'One line description of project.',
   'Miscellaneous'),
]

# Documents to append as an appendix to all manuals.
#texinfo_appendices = []

# If false, no module index is generated.
#texinfo_domain_indices = True

# How to display URL addresses: 'footnote', 'no', or 'inline'.
#texinfo_show_urls = 'footnote'

# If true, do not generate a @detailmenu in the "Top" node's menu.
#texinfo_no_detailmenu = False


# -- Options for Epub output ---------------------------------------------------

# Bibliographic Dublin Core info.
epub_title = u'$PACKAGE_NAME'
epub_author = u'$AUTHOR'
epub_publisher = u'$AUTHOR'
epub_copyright = u'$YEAR, $AUTHOR'

# The language of the text. It defaults to the language option
# or en if the language is not set.
#epub_language = ''

# The scheme of the identifier. Typical schemes are ISBN or URL.
#epub_scheme = ''

# The unique identifier of the text. This can be a ISBN number
# or the project homepage.
#epub_identifier = ''

# A unique identification for the text.
#epub_uid = ''

# A tuple containing the cover image and cover page html template filenames.
#epub_cover = ()

# A sequence of (type, uri, title) tuples for the guide element of content.opf.
#epub_guide = ()

# HTML files that should be inserted before the pages created by sphinx.
# The format is a list of tuples containing the path and title.
#epub_pre_files = []

# HTML files shat should be inserted after the pages created by sphinx.
# The format is a list of tuples containing the path and title.
#epub_post_files = []

# A list of files that should not be packed into the epub file.
#epub_exclude_files = []

# The depth of the table of contents in toc.ncx.
#epub_tocdepth = 3

# Allow duplicate toc entries.
#epub_tocdup = True

# Fix unsupported image types using the PIL.
#epub_fix_images = False

# Scale large images.
#epub_max_image_width = 0

# If 'no', URL addresses will not be shown.
#epub_show_urls = 'inline'

# If false, no index is generated.
#epub_use_index = True

#autodoc_member_order = 'bysource'

########NEW FILE########
__FILENAME__ = picnic
#! /usr/bin/env python

"""
Picnic.py, easy Package creation with python.

Usage:
  picnic.py [new <name>] [options]
  
Options:
  --author=<name>        Your name.
  --licence =<name>      MIT, LGPL
  --dev                  Runs: sudo python setup.py develop
  --sphinx               Initializes the sphinx documentation
  --gitinit              Runs: git init; git add . ; git commit -m "1st"
  --remote=<repo_url>    Runs:  git remote add origin <repo_url>
  --ghpages              Configures github-pages
  --help -h              Show this screen.
  
"""

import shutil
import os
import time
import subprocess as sp


module_path = os.path.dirname(os.path.realpath(__file__))
files_path = os.path.join(module_path, 'files')

def execute(*commands):
    for comm in commands:
        print ("picnic - Running : %s"%comm)
        p = sp.Popen(comm, shell=True, stderr = sp.PIPE)
        p.wait()
        print (p.stderr.read())
        

def copy_file(name,dst = None, replace=None):
    """
    Copy a file in the files/ subfolder at the given destination
    (see usage below) and change some stuff in the file
    
    name: file or path to file. The file copied will be files/name
    dst: name of the destination file (relative to working dir)
    changes: a dict of what to replace in the file, e.g.
        { '$PACKAGE_NAME':'MyCoolPackage', '$AUTHOR':'John Wayne'} 
    """
    if isinstance(name,list):
        name = os.path.join(*name)
    if isinstance(dst,list):
        dst = os.path.join(*dst)
    if dst is None:
        dst = name
    shutil.copyfile(os.path.join(files_path,name),dst)
    if replace:
        # replace what has to be replaced in the file template
        with open(dst, 'r') as f:
            s = f.read()
        for k,v in replace.items():
            s = s.replace(k,v)
        with open(dst, 'w') as f:
            s = f.write(s)


if __name__ == "__main__":    
    
    from docopt import docopt
    
    argv = docopt(__doc__)
    #print argv # for debugging
    
    
    name = os.path.basename(os.getcwd())
    infos = { "$YEAR": str(time.localtime().tm_year),
              "$PACKAGE_NAME":name,
              "$package_name":name.lower()}
    
    
    
    if argv['--author']:
        
        infos['$AUTHOR'] = argv['--author']
    
    # COMMANDS
    
    
    
    if argv["new"]:
        """ Create a basic layout for a new Python package """
        
        name = argv['<name>']
        name_l = name.lower()
        infos.update({"$PACKAGE_NAME":name,
                      "$package_name":name_l })
        
        # basic layout
        
        # make folder Name_project/Name/ and move there
        project_dir = name+'_project' 
        os.mkdir(project_dir)
        os.chdir(project_dir)
        os.mkdir(name)
        os.chdir(name)
        

        # root repository (setup.py etc.)

        for f in [ "README.rst",
                   "MANIFEST.in" ,
                   "LICENCE.txt",
                   "setup.py",
                   "ez_setup.py"]:
            copy_file(f, replace=infos)

        # make the code folder (named like the package, in lower case)
        os.mkdir(name_l)
        copy_file(['code','package_name.py'],
                  [name_l,name_l +'.py'], replace = infos)
        copy_file(['code','__init__.py'],
                  [name_l,"__init__.py"], replace = infos)
        copy_file(['code','version.py'],
                  [name_l,"version.py"], replace = infos)
    
    
    
    ### OPTIONS
    
    # keep the absolute path of the setup directory in memory
    setup_dir = os.getcwd()
    
    
    if argv["--licence"]:
        """ Copy the corresponding licence in a LICENCE.txt file """
        
        infos['$LICENCE'] = argv["--licence"]
        
        try:
            filename = argv["--licence"]+'.txt'
            copy_file(['licences',filename], 'LICENCE.txt')
        except IOError:
            print ("Sorry, licence file not found.")
    
    
    
    if argv['--sphinx']:
        """ Initialize a sphinx documentation in folder \docs, with
        output in folder ../built_docs """
        
        if not argv['--author']:
            
            print ("sphinx requires --author=<name>")
        
        else:
            
            os.mkdir('docs')
            os.chdir('docs')
            os.mkdir('_static')
            os.mkdir('_template')
            for f in [ "conf.py",
                       "index.rst" ,
                       "make.bat",
                       "Makefile",
                       "makehtml.sh"]:
                copy_file(['sphinx',f],f, replace=infos)
            execute('make html')
            os.chdir(setup_dir)
    
    
    
    if argv['--gitinit']:
        """ copy a .gitignore, initialize a git repository,
            make a first commit """
            
        copy_file('.gitignore')
        execute('git init',
                'git add .',
                'git commit -m "Initial commit"')
    
    
    if argv['--remote']:
        """ Link the local repo to some remote repo on Github """
        execute('git remote add origin %s'%argv['--remote'])
    
    
    if argv["--ghpages"]:
        """
        Lookup the url of the github repo in the local git repo, then
        clone this project and branch it in the directory
        ../built_docs/html, which is the output folder of the Sphinx
        documentation. Build the documentation, commit everything,
        push on Github.
        """
        
        # get the Github repo's url from the local git repository.
        # horrible hack ahead, please look away now !
        f = sp.Popen([ 'git', "remote", "-v"], stdout = sp.PIPE)
        github_url = f.stdout.read().split('\t')[1].split(' ')[0]
        
        
        # Look at the folder ../built_docs/html, it it exists destroy
        # it and rebuild it
        built_docs_dir = os.path.join('..','built_docs')
        if not os.path.exists(built_docs_dir):
            os.mkdir(built_docs_dir)
        
        built_docs_html_dir = os.path.join(built_docs_dir,'html')
        if os.path.exists(built_docs_html_dir):
            shutil.rmtree(built_docs_html_dir)
        os.mkdir(built_docs_html_dir)
        os.chdir(built_docs_html_dir)
        built_docs_html_dir = os.getcwd()
        
        # Create an orphan branch of the project in ../built_docs/html
        execute('git clone %s %s'%(github_url, '.'),
                "git checkout --orphan gh-pages",
                "git rm -rf .")
        
        # Add a README (for the Github repo page)
        copy_file(['gh-pages','README.rst'], 'README.rst', infos)
        # Add a .nojekill file so that Github won't throw away the css
        copy_file(['gh-pages','.nojekyll'], '.nojekyll')
        
        try:
            # try to (re-)build the docs
            os.chdir(os.path.join(setup_dir,'docs'))
            execute('make html')
            os.chdir(built_docs_html_dir)
        except:
            print ("Picnic.py: Error - couldn't  build the docs.")
            os.chdir(built_docs_html_dir)
        
        # Make a first commit with everything
        execute("git add .",
                'git commit -a -m "First documentation commit"')
        
        os.chdir(setup_dir) # back to 'main' folder
    
    
    if argv['--dev'] :
        
        execute("sudo python setup.py develop")

########NEW FILE########
