# [html2text](http://www.aaronsw.com/2002/html2text/)

html2text is a Python script that converts a page of HTML into clean, easy-to-read plain ASCII text. Better yet, that ASCII also happens to be valid Markdown (a text-to-HTML format).

Usage: `html2text.py [(filename|url) [encoding]]`

    Options:
      --version             show program's version number and exit
      -h, --help            show this help message and exit
      --ignore-links        don't include any formatting for links
      --ignore-images       don't include any formatting for images
      -g, --google-doc      convert an html-exported Google Document
      -d, --dash-unordered-list
                            use a dash rather than a star for unordered list items
      -b BODY_WIDTH, --body-width=BODY_WIDTH
                            number of characters per output line, 0 for no wrap
      -i LIST_INDENT, --google-list-indent=LIST_INDENT
                            number of pixels Google indents nested lists
      -s, --hide-strikethrough
                            hide strike-through text. only relevent when -g is
                            specified as well

Or you can use it from within Python:

    import html2text
    print html2text.html2text("<p>Hello, world.</p>")

Or with some configuration options:

    import html2text
    h = html2text.HTML2Text()
    h.ignore_links = True
    print h.handle("<p>Hello, <a href='http://earth.google.com/'>world</a>!")

_Originally written by Aaron Swartz. This code is distributed under the GPLv3._


## How to do a release

1. Update the version in `html2text.py`
2. Update the version in `setup.py`
3. Run `python setup.py sdist upload`

## How to run unit tests

    cd test/
    python run_tests.py

[![Build Status](https://secure.travis-ci.org/aaronsw/html2text.png)](http://travis-ci.org/aaronsw/html2text)

# CSS @import statement without semicolon handling test

Lorem ipsum dolor sit amet, consectetur adipisicing elit, sed do eiusmod
tempor incididunt ut labore et dolore magna aliqua.


Bacon ipsum dolor sit amet pork chop id pork belly ham hock, sed meatloaf eu
exercitation flank quis veniam officia. Chuck dolor esse, occaecat est elit
drumstick ground round tri-tip nisi. Eu fugiat drumstick leberkas magna.
Turducken frankfurter nisi aute shank--

--irure ex esse id, ham commodo meatloaf pig pariatur ut cow. Officia salami
in fatback voluptate boudin ullamco beef ribs shank. Duis spare ribs pork
chop, ad leberkas reprehenderit id voluptate salami ham ut in ut cillum
turducken. Nisi ribeye tail capicola dolore andouille. Short ribs id beef
ribs, et nulla ground round do sunt dolore. Dolore nisi ullamco veniam sunt.
Duis brisket drumstick, dolor fatback filet mignon meatloaf laboris tri-tip
speck chuck ball tip voluptate ullamco laborum.

\--


#  test doc  
  
first issue  
  
  - bit
  - _**bold italic**_ 
    - orange
    - apple
  - final  
  
text to separate lists  
  
  1. now with numbers
  2. the prisoner
    1. not an  _italic number_ 
    2. a  **bold human**   being
  3. end  
  
**bold**   
_italic_   
  
` def func(x):`  
`   if x < 1:`  
`     return 'a'`  
`   return 'b'`  
  
Some  ` fixed width text`  here  
_` italic fixed width text`_ 

#  test doc  
  
first issue  
  
  - bit
  - _**bold italic**_ 
    - orange
    - apple
  - final  
  
text to separate lists  
  
  1. now with numbers
  2. the prisoner
    1. not an  _italic number_ 
    2. a  **bold human**   being
  3. end  
  
**bold**   
_italic_   
  
` def func(x):`  
`   if x < 1:`  
`     return 'a'`  
`   return 'b'`  
  
Some  ` fixed width text`  here  
_` italic fixed width text`_ 

# NBSP handling test #1

In this test all NBSPs will be replaced with ordinary spaces (unicode_snob =
False).

Lorem ipsum dolor sit amet, consectetur adipisicing elit, sed do eiusmod
tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam,
quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo
consequat.

Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore
eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt
in culpa qui officia deserunt mollit anim id est laborum.


# NBSP handling test #2

In this test all NBSPs will be replaced with unicode non-breaking spaces
(unicode_snob = True).

Lorem ipsum dolor sit amet, consectetur adipisicing elit, sed do eiusmod
tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam,
quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo
consequat.

Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore
eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt
in culpa qui officia deserunt mollit anim id est laborum.


#  test doc

first issue

  * bit
  * _**bold italic**_
    * orange
    * apple
  * final

text to separate lists

  1. now with numbers
  2. the prisoner
    1. not an _italic number_
    2. a **bold human** being
  3. end

**bold**  
_italic_  

    
    
    def func(x):
      if x < 1:
        return 'a'
      return 'b'
          

Some `fixed width text` here  
_`italic fixed width text`_

2012\. Now that was a good year. So was 2011. That's all.

3.14159 is an approximation of pi.

\+ not + a list item

+foo

\- foo - bar

-foo 

not a header  
\--

not a hr  
  
\---  
\- - -

c:\tmp, \\\server\path, \\_/, foo\bar, #\\#, \\\\#


#  test doc

first issue

  * bit
  * _**bold italic**_
    * orange
    * apple
  * final

text to separate lists

  1. now with numbers
  2. the prisoner
    1. not an _italic number_
    2. a **bold human** being
  3. end

**bold**  
_italic_  
text with \_underscore but not \_italicized  

    
    
    def func(x):
      if x < 1:
        return 'a'
      return 'b'
          

Some `fixed width text` here  
_`italic fixed width text`_

2012\. Now that was a good year. So was 2011. That's all.

3.14159 is an approximation of pi.

\+ not + a list item

+foo

\- foo - bar

-foo 

not a header  
\--

not a hr  
  
\---  
\- - -

c:\tmp, \\\server\path, \\\_/, foo\bar, \#\\\#, \\\\\#



    a
    b
    c

Ensure that HTML that starts with a crowded `<pre>` is converted to reasonable
Markdown.


  * Run this command: 
    
        ls -l *.html

  * ?
  * Profit!


# Markdown-sensible characters processing

This test checks special characters processing inside URLs: parenthesis and
brackets should be escaped to keep markdown image and anchor syntax safe and
sound.

  * [Some MSDN link using parenthesis](http://msdn.microsoft.com/en-us/library/system.drawing.drawing2d\(v=vs.110\))
  * [Google search result URL with unescaped brackets](https://www.google.ru/search?q=\[brackets are cool\])
  * [Yet another test for [brackets], {curly braces} and (parenthesis) processing inside the anchor](https://www.google.ru/search?q='\[\({}\)\]')
  * Use automatic links like <http://example.com/> when the URL is the label
  * Exempt [non-absolute_URIs](non-absolute_URIs) from automatic link detection

And here are images with tricky attribute values:

![\(banana\)](http://placehold.it/350x150#\(banana\))  
![\[banana\]](http://placehold.it/350x150#\[banana\])  
![{banana}](http://placehold.it/350x150#{banana})  
![\(\[{}\]\)](http://placehold.it/350x150#\(\[{}\]\))


