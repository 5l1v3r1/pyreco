__FILENAME__ = conf
# -*- coding: utf-8 -*-
#
# django-sesame documentation build configuration file, created by
# sphinx-quickstart on Fri Jun 21 10:13:01 2013.
#
# This file is execfile()d with the current directory set to its containing dir.
#
# Note that not all possible configuration values are present in this
# autogenerated file.
#
# All configuration values have a default; values that are commented out
# serve to show the default.

import sys, os

# If extensions (or modules to document with autodoc) are in another directory,
# add these directories to sys.path here. If the directory is relative to the
# documentation root, use os.path.abspath to make it absolute, like shown here.
#sys.path.insert(0, os.path.abspath('.'))

# -- General configuration -----------------------------------------------------

# If your documentation needs a minimal Sphinx version, state it here.
#needs_sphinx = '1.0'

# Add any Sphinx extension module names here, as strings. They can be extensions
# coming with Sphinx (named 'sphinx.ext.*') or your custom ones.
extensions = []

# Add any paths that contain templates here, relative to this directory.
templates_path = ['_templates']

# The suffix of source filenames.
source_suffix = '.rst'

# The encoding of source files.
#source_encoding = 'utf-8-sig'

# The master toctree document.
master_doc = 'index'

# General information about the project.
project = u'django-sesame'
copyright = u'2013, Aymeric Augustin'

# The version info for the project you're documenting, acts as replacement for
# |version| and |release|, also used in various other places throughout the
# built documents.
#
# The short X.Y version.
version = '1.0'
# The full version, including alpha/beta/rc tags.
release = '1.0'

# The language for content autogenerated by Sphinx. Refer to documentation
# for a list of supported languages.
#language = None

# There are two options for replacing |today|: either, you set today to some
# non-false value, then it is used:
#today = ''
# Else, today_fmt is used as the format for a strftime call.
#today_fmt = '%B %d, %Y'

# List of patterns, relative to source directory, that match files and
# directories to ignore when looking for source files.
exclude_patterns = ['_build']

# The reST default role (used for this markup: `text`) to use for all documents.
#default_role = None

# If true, '()' will be appended to :func: etc. cross-reference text.
#add_function_parentheses = True

# If true, the current module name will be prepended to all description
# unit titles (such as .. function::).
#add_module_names = True

# If true, sectionauthor and moduleauthor directives will be shown in the
# output. They are ignored by default.
#show_authors = False

# The name of the Pygments (syntax highlighting) style to use.
pygments_style = 'sphinx'

# A list of ignored prefixes for module index sorting.
#modindex_common_prefix = []


# -- Options for HTML output ---------------------------------------------------

# The theme to use for HTML and HTML Help pages.  See the documentation for
# a list of builtin themes.
html_theme = 'default'

# Theme options are theme-specific and customize the look and feel of a theme
# further.  For a list of options available for each theme, see the
# documentation.
#html_theme_options = {}

# Add any paths that contain custom themes here, relative to this directory.
#html_theme_path = []

# The name for this set of Sphinx documents.  If None, it defaults to
# "<project> v<release> documentation".
#html_title = None

# A shorter title for the navigation bar.  Default is the same as html_title.
#html_short_title = None

# The name of an image file (relative to this directory) to place at the top
# of the sidebar.
#html_logo = None

# The name of an image file (within the static path) to use as favicon of the
# docs.  This file should be a Windows icon file (.ico) being 16x16 or 32x32
# pixels large.
#html_favicon = None

# Add any paths that contain custom static files (such as style sheets) here,
# relative to this directory. They are copied after the builtin static files,
# so a file named "default.css" will overwrite the builtin "default.css".
html_static_path = ['_static']

# If not '', a 'Last updated on:' timestamp is inserted at every page bottom,
# using the given strftime format.
#html_last_updated_fmt = '%b %d, %Y'

# If true, SmartyPants will be used to convert quotes and dashes to
# typographically correct entities.
#html_use_smartypants = True

# Custom sidebar templates, maps document names to template names.
#html_sidebars = {}

# Additional templates that should be rendered to pages, maps page names to
# template names.
#html_additional_pages = {}

# If false, no module index is generated.
#html_domain_indices = True

# If false, no index is generated.
#html_use_index = True

# If true, the index is split into individual pages for each letter.
#html_split_index = False

# If true, links to the reST sources are added to the pages.
#html_show_sourcelink = True

# If true, "Created using Sphinx" is shown in the HTML footer. Default is True.
#html_show_sphinx = True

# If true, "(C) Copyright ..." is shown in the HTML footer. Default is True.
#html_show_copyright = True

# If true, an OpenSearch description file will be output, and all pages will
# contain a <link> tag referring to it.  The value of this option must be the
# base URL from which the finished HTML is served.
#html_use_opensearch = ''

# This is the file name suffix for HTML files (e.g. ".xhtml").
#html_file_suffix = None

# Output file base name for HTML help builder.
htmlhelp_basename = 'django-sesamedoc'


# -- Options for LaTeX output --------------------------------------------------

latex_elements = {
# The paper size ('letterpaper' or 'a4paper').
#'papersize': 'letterpaper',

# The font size ('10pt', '11pt' or '12pt').
#'pointsize': '10pt',

# Additional stuff for the LaTeX preamble.
#'preamble': '',
}

# Grouping the document tree into LaTeX files. List of tuples
# (source start file, target name, title, author, documentclass [howto/manual]).
latex_documents = [
  ('index', 'django-sesame.tex', u'django-sesame Documentation',
   u'Aymeric Augustin', 'manual'),
]

# The name of an image file (relative to this directory) to place at the top of
# the title page.
#latex_logo = None

# For "manual" documents, if this is true, then toplevel headings are parts,
# not chapters.
#latex_use_parts = False

# If true, show page references after internal links.
#latex_show_pagerefs = False

# If true, show URL addresses after external links.
#latex_show_urls = False

# Documents to append as an appendix to all manuals.
#latex_appendices = []

# If false, no module index is generated.
#latex_domain_indices = True


# -- Options for manual page output --------------------------------------------

# One entry per manual page. List of tuples
# (source start file, name, description, authors, manual section).
man_pages = [
    ('index', 'django-sesame', u'django-sesame Documentation',
     [u'Aymeric Augustin'], 1)
]

# If true, show URL addresses after external links.
#man_show_urls = False


# -- Options for Texinfo output ------------------------------------------------

# Grouping the document tree into Texinfo files. List of tuples
# (source start file, target name, title, author,
#  dir menu entry, description, category)
texinfo_documents = [
  ('index', 'django-sesame', u'django-sesame Documentation',
   u'Aymeric Augustin', 'django-sesame', 'One line description of project.',
   'Miscellaneous'),
]

# Documents to append as an appendix to all manuals.
#texinfo_appendices = []

# If false, no module index is generated.
#texinfo_domain_indices = True

# How to display URL addresses: 'footnote', 'no', or 'inline'.
#texinfo_show_urls = 'footnote'

########NEW FILE########
__FILENAME__ = backends
from __future__ import unicode_literals

import hashlib
import logging
import struct

from django.contrib.auth import backends as auth_backends
from django.core import signing
from django.utils import crypto


logger = logging.getLogger('sesame')


class UrlAuthBackendMixin(object):
    """Tools to authenticate against a token containing a signed user id.

    Mix this class in an authentication backend providing `get_user(user_id)`,
    and call `parse_token(token)` from its `authenticate(**credentials)`.
    """

    signer = signing.Signer(salt='sesame')

    def sign(self, data):
        """Create an URL-safe, signed token from `data`."""
        return self.signer.sign(signing.b64_encode(data).decode())

    def unsign(self, token):
        """Extract the data from a signed `token`."""
        return signing.b64_decode(self.signer.unsign(token).encode())

    def create_token(self, user):
        """Create a signed token from an `auth.User`."""
        # Include a hash derived from the password so changing the password
        # revokes the token. Usually, user.password will be a secure hash
        # already, but we hash it again in case it isn't. We use MD5
        # to minimize the length of the token. (Remember, if an attacker
        # obtains the URL, he can already log in. This isn't high security.)
        h = crypto.pbkdf2(user.password, 'sesame', 10000, digest=hashlib.md5)
        return self.sign(struct.pack(str('!i'), user.pk) + h)

    def parse_token(self, token):
        """Obtain an `auth.User` from a signed token."""
        try:
            data = self.unsign(token)
        except signing.BadSignature:
            logger.debug("Invalid token: %s", token)
            return
        user = self.get_user(*struct.unpack(str('!i'), data[:4]))
        if user is None:
            logger.debug("Unknown token: %s", token)
            return
        h = crypto.pbkdf2(user.password, 'sesame', 10000, digest=hashlib.md5)
        if not crypto.constant_time_compare(data[4:], h):
            logger.debug("Expired token: %s", token)
            return
        logger.debug("Valid token for user %s: %s", user, token)
        return user


class ModelBackend(UrlAuthBackendMixin, auth_backends.ModelBackend):
    """Authenticates against a token containing a signed user id."""

    def authenticate(self, url_auth_token=None):
        """Check the token and return an `auth.User`."""
        try:
            return self.parse_token(url_auth_token)
        except TypeError:
            backend = "%s.%s" % (self.__module__, self.__class__.__name__)
            logger.exception("TypeError in %s, here's the traceback before "
                             "Django swallows it:", backend)
            raise

########NEW FILE########
__FILENAME__ = middleware
from __future__ import unicode_literals

from django.contrib.auth import authenticate, login
from django.contrib.auth.models import AnonymousUser


TOKEN_FIELD_NAME = 'url_auth_token'


class AuthenticationMiddleware(object):

    def process_request(self, request):
        """Log user in if if `request` contains a valid login token."""
        token = request.GET.get(TOKEN_FIELD_NAME)
        if token is None:
            return
        user = authenticate(url_auth_token=token)
        if user is None:
            return

        # If the sessions framework is enabled and the token is valid,
        # persist the login in session.
        if hasattr(request, 'session') and user is not None:
            login(request, user)

        # If the authentication middleware isn't enabled, set request.user.
        # (This attribute is overwritten by the authentication middleware
        # if it runs after this one.)
        if not hasattr(request, 'user'):
            request.user = user if user is not None else AnonymousUser()

########NEW FILE########
__FILENAME__ = models
# This file is only required for test discovery in Django < 1.6.

########NEW FILE########
__FILENAME__ = tests
from __future__ import unicode_literals

import django

if django.VERSION[:2] < (1, 6):     # unittest-style discovery isn't available
    from .test_backends import TestModelBackend
    from .test_middleware import TestAfterAuthMiddleware
    from .test_middleware import TestBeforeAuthMiddleware
    from .test_middleware import TestWithoutAuthMiddleware
    from .test_middleware import TestWithoutSessionMiddleware
    from .test_utils import TestUtils

########NEW FILE########
__FILENAME__ = test_backends
from __future__ import unicode_literals

import io
import logging

from django.contrib.auth.models import User
from django.test import TestCase

from .backends import ModelBackend


class TestModelBackend(TestCase):

    def setUp(self):
        self.backend = ModelBackend()
        self.user = User.objects.create_user(username='john', password='doe')

        self.log = io.StringIO()
        self.handler = logging.StreamHandler(self.log)
        self.logger = logging.getLogger('sesame')
        self.logger.addHandler(self.handler)
        self.logger.setLevel(logging.DEBUG)

    def get_log(self):
        self.handler.flush()
        return self.log.getvalue()

    def tearDown(self):
        self.logger.removeHandler(self.handler)

    def test_authenticate(self):
        token = self.backend.create_token(self.user)
        user = self.backend.authenticate(url_auth_token=token)
        self.assertEqual(user, self.user)

    def test_token(self):
        token = self.backend.create_token(self.user)
        user = self.backend.parse_token(token)
        self.assertEqual(user, self.user)
        self.assertIn("Valid token for user john", self.get_log())

    def test_invalid_token(self):
        token = self.backend.create_token(self.user)
        user = self.backend.parse_token(token.lower())
        self.assertEqual(user, None)
        self.assertIn("Invalid token", self.get_log())

    def test_unknown_token(self):
        token = self.backend.create_token(self.user)
        self.user.delete()
        user = self.backend.parse_token(token)
        self.assertEqual(user, None)
        self.assertIn("Unknown token", self.get_log())

    def test_expired_token(self):
        token = self.backend.create_token(self.user)
        self.user.set_password('hunter2')
        self.user.save()
        user = self.backend.parse_token(token)
        self.assertEqual(user, None)
        self.assertIn("Expired token", self.get_log())

    def test_type_error_is_logged(self):
        def raise_type_error(*args):
            raise TypeError
        self.backend.parse_token = raise_type_error
        with self.assertRaises(TypeError):
            self.backend.authenticate(None)
        self.assertIn("TypeError", self.get_log())

########NEW FILE########
__FILENAME__ = test_middleware
from __future__ import unicode_literals

import io
import logging

from django.contrib.auth.models import User
from django.test import TestCase
from django.test.utils import override_settings

from .backends import ModelBackend


@override_settings(
    AUTHENTICATION_BACKENDS=(
        'django.contrib.auth.backends.ModelBackend',
        'sesame.backends.ModelBackend',
    ),
    TEMPLATE_CONTEXT_PROCESSORS=(
        'django.contrib.auth.context_processors.auth',
    ),
    MIDDLEWARE_CLASSES=(
        'django.contrib.sessions.middleware.SessionMiddleware',
        'django.contrib.auth.middleware.AuthenticationMiddleware',
        'sesame.middleware.AuthenticationMiddleware',
    ),
)
class TestAfterAuthMiddleware(TestCase):

    def setUp(self):
        self.user = User.objects.create_user(username='john', password='doe')
        self.token = ModelBackend().create_token(self.user)
        self.bad_token = self.token.lower()

        self.log = io.StringIO()
        self.handler = logging.StreamHandler(self.log)
        self.logger = logging.getLogger('sesame')
        self.logger.addHandler(self.handler)

    def tearDown(self):
        self.logger.removeHandler(self.handler)

    def test_token(self):
        response = self.client.get('/', {'url_auth_token': self.token})
        self.assertEqual(response.content, b'john')

    def test_bad_token(self):
        response = self.client.get('/', {'url_auth_token': self.bad_token})
        self.assertEqual(response.content, b'anonymous')

    def test_no_token(self):
        response = self.client.get('/')
        self.assertEqual(response.content, b'anonymous')


@override_settings(
    MIDDLEWARE_CLASSES=(
        'django.contrib.sessions.middleware.SessionMiddleware',
        'sesame.middleware.AuthenticationMiddleware',
        'django.contrib.auth.middleware.AuthenticationMiddleware',
    ),
)
class TestBeforeAuthMiddleware(TestAfterAuthMiddleware):
    pass


@override_settings(
    MIDDLEWARE_CLASSES=(
        'django.contrib.sessions.middleware.SessionMiddleware',
        'sesame.middleware.AuthenticationMiddleware',
    ),
)
class TestWithoutAuthMiddleware(TestAfterAuthMiddleware):
    pass


@override_settings(
    MIDDLEWARE_CLASSES=(
        'sesame.middleware.AuthenticationMiddleware',
    ),
)
class TestWithoutSessionMiddleware(TestAfterAuthMiddleware):
    pass

########NEW FILE########
__FILENAME__ = test_settings
from __future__ import unicode_literals

CACHES = {
    'default': {'BACKEND': 'django.core.cache.backends.locmem.LocMemCache'},
}

DATABASES = {
    'default': {'ENGINE': 'django.db.backends.sqlite3'},
}

INSTALLED_APPS = (
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'sesame',
)

LOGGING_CONFIG = None

ROOT_URLCONF = 'sesame.test_urls'

SECRET_KEY = 'Anyone who finds an URL will be able to log in. Seriously.'

SESSION_ENGINE = 'django.contrib.sessions.backends.cache'

########NEW FILE########
__FILENAME__ = test_urls
from __future__ import unicode_literals

from django.conf.urls import patterns
from django.http import HttpResponse
from django.template import RequestContext, Template


template = Template(
    '{% if user.is_authenticated %}{{ user }}'
    '{% elif user.is_anonymous %}anonymous'
    '{% else %}no user'
    '{% endif %}'
)


def show_user(request):
    context = RequestContext(request)
    return HttpResponse(template.render(context), content_type='text/plain')


urlpatterns = patterns('', (r'^', show_user))

########NEW FILE########
__FILENAME__ = test_utils
from __future__ import unicode_literals

from django.contrib.auth.models import User
from django.test import TestCase

from .utils import get_parameters, get_query_string


class TestUtils(TestCase):

    def setUp(self):
        self.user = User.objects.create_user(username='john', password='doe')

    def test_get_parameters(self):
        self.assertEqual(list(get_parameters(self.user)), ['url_auth_token'])

    def test_get_query_string(self):
        self.assertIn('?url_auth_token=', get_query_string(self.user))

########NEW FILE########
__FILENAME__ = utils
from __future__ import unicode_literals

try:
    from urllib.parse import urlencode
except ImportError:
    from urllib import urlencode

from .backends import UrlAuthBackendMixin
from .middleware import TOKEN_FIELD_NAME


def get_parameters(user):
    """Return GET parameters to log in `user`."""
    return {TOKEN_FIELD_NAME: UrlAuthBackendMixin().create_token(user)}


def get_query_string(user):
    """Return a complete query string to log in `user`."""
    return '?' + urlencode(get_parameters(user))

########NEW FILE########
