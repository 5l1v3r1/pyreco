__FILENAME__ = conf
# -*- coding: utf-8 -*-
#
# dutils documentation build configuration file, created by
# sphinx-quickstart on Thu Oct 29 16:08:28 2009.
#
# This file is execfile()d with the current directory set to its containing dir.
#
# Note that not all possible configuration values are present in this
# autogenerated file.
#
# All configuration values have a default; values that are commented out
# serve to show the default.

import sys, os

# If extensions (or modules to document with autodoc) are in another directory,
# add these directories to sys.path here. If the directory is relative to the
# documentation root, use os.path.abspath to make it absolute, like shown here.
#sys.path.append(os.path.abspath('.'))

# -- General configuration -----------------------------------------------------

# Add any Sphinx extension module names here, as strings. They can be extensions
# coming with Sphinx (named 'sphinx.ext.*') or your custom ones.
extensions = ['sphinx.ext.autodoc', 'sphinx.ext.coverage']

# Add any paths that contain templates here, relative to this directory.
templates_path = ['_templates']

# The suffix of source filenames.
source_suffix = '.rst'

# The encoding of source files.
#source_encoding = 'utf-8'

# The master toctree document.
master_doc = 'index'

# General information about the project.
project = u'importd'
copyright = u'2012, Amit Upadhyay'

# The version info for the project you're documenting, acts as replacement for
# |version| and |release|, also used in various other places throughout the
# built documents.
#
# The short X.Y version.
version = '0.2.9'
# The full version, including alpha/beta/rc tags.
release = version

# The language for content autogenerated by Sphinx. Refer to documentation
# for a list of supported languages.
#language = None

# There are two options for replacing |today|: either, you set today to some
# non-false value, then it is used:
#today = ''
# Else, today_fmt is used as the format for a strftime call.
#today_fmt = '%B %d, %Y'

# List of documents that shouldn't be included in the build.
#unused_docs = []

# List of directories, relative to source directory, that shouldn't be searched
# for source files.
exclude_trees = ['_build']

# The reST default role (used for this markup: `text`) to use for all documents.
#default_role = None

# If true, '()' will be appended to :func: etc. cross-reference text.
#add_function_parentheses = True

# If true, the current module name will be prepended to all description
# unit titles (such as .. function::).
#add_module_names = True

# If true, sectionauthor and moduleauthor directives will be shown in the
# output. They are ignored by default.
#show_authors = False

# The name of the Pygments (syntax highlighting) style to use.
pygments_style = 'sphinx'

# A list of ignored prefixes for module index sorting.
#modindex_common_prefix = []


# -- Options for HTML output ---------------------------------------------------

# The theme to use for HTML and HTML Help pages.  Major themes that come with
# Sphinx are currently 'default' and 'sphinxdoc'.
html_theme = 'default'

# Theme options are theme-specific and customize the look and feel of a theme
# further.  For a list of options available for each theme, see the
# documentation.
#html_theme_options = {}

# Add any paths that contain custom themes here, relative to this directory.
#html_theme_path = []

# The name for this set of Sphinx documents.  If None, it defaults to
# "<project> v<release> documentation".
#html_title = None

# A shorter title for the navigation bar.  Default is the same as html_title.
#html_short_title = None

# The name of an image file (relative to this directory) to place at the top
# of the sidebar.
#html_logo = None

# The name of an image file (within the static path) to use as favicon of the
# docs.  This file should be a Windows icon file (.ico) being 16x16 or 32x32
# pixels large.
#html_favicon = None

# Add any paths that contain custom static files (such as style sheets) here,
# relative to this directory. They are copied after the builtin static files,
# so a file named "default.css" will overwrite the builtin "default.css".
html_static_path = ['_static']

# If not '', a 'Last updated on:' timestamp is inserted at every page bottom,
# using the given strftime format.
#html_last_updated_fmt = '%b %d, %Y'

# If true, SmartyPants will be used to convert quotes and dashes to
# typographically correct entities.
#html_use_smartypants = True

# Custom sidebar templates, maps document names to template names.
#html_sidebars = {}

# Additional templates that should be rendered to pages, maps page names to
# template names.
#html_additional_pages = {}

# If false, no module index is generated.
#html_use_modindex = True

# If false, no index is generated.
#html_use_index = True

# If true, the index is split into individual pages for each letter.
#html_split_index = False

# If true, links to the reST sources are added to the pages.
#html_show_sourcelink = True

# If true, an OpenSearch description file will be output, and all pages will
# contain a <link> tag referring to it.  The value of this option must be the
# base URL from which the finished HTML is served.
#html_use_opensearch = ''

# If nonempty, this is the file name suffix for HTML files (e.g. ".xhtml").
#html_file_suffix = ''

# Output file base name for HTML help builder.
htmlhelp_basename = 'importddocs'


# -- Options for LaTeX output --------------------------------------------------

# The paper size ('letter' or 'a4').
#latex_paper_size = 'letter'

# The font size ('10pt', '11pt' or '12pt').
#latex_font_size = '10pt'

# Grouping the document tree into LaTeX files. List of tuples
# (source start file, target name, title, author, documentclass [howto/manual]).
latex_documents = [
  ('index', 'importd.tex', u'importd Documentation',
   u'Amit Upadhyay', 'manual'),
]

# The name of an image file (relative to this directory) to place at the top of
# the title page.
#latex_logo = None

# For "manual" documents, if this is true, then toplevel headings are parts,
# not chapters.
#latex_use_parts = False

# Additional stuff for the LaTeX preamble.
#latex_preamble = ''

# Documents to append as an appendix to all manuals.
#latex_appendices = []

# If false, no module index is generated.
#latex_use_modindex = True

########NEW FILE########
__FILENAME__ = foo
from importd import d

d(
	DEBUG=True,
	SMART_RETURN=True,
)  # configure django

def real_index2(request):
    return d.HttpResponse("real_index2")

d(# configure other urlpatterns
    d.patterns("",
        ("^$", real_index2),
    )
)

@d  # /index/
def index(request):
    import time
    return "index.html", {"msg": time.time(),
						  "objs": d.models.TestModel.objects.all()}

@d("^edit/$", name="edit")  # named urls
def real_index(request):
    return "home.html"

@d  # served at /json/, converts object to json string
def json(request):
    return {"sum": int(request.GET.get("x", 0)) + int(request.GET.get("y", 0))}

@d("^fhurl/$")
class MyForm(d.RequestForm):
    x = d.forms.IntegerField()
    y = d.forms.IntegerField()

    def save(self):
		x, y = self.cleaned_data['x'], self.cleaned_data['y']
		d.models.TestModel.objects.create(x=x, y=y)
		return x + y


class TestModel(d.models.Model):
    x = d.models.CharField(max_length=20)
    y = d.models.CharField(max_length=20)


if __name__ == "__main__":
    d.main()

########NEW FILE########
__FILENAME__ = hello
from importd import d

@d("/")
def hello(request):
    return d.HttpResponse("hello world")

########NEW FILE########
__FILENAME__ = fabfile
from fabric.api import local, cd

def docs():
    local("./bin/docs")
    local("./bin/python setup.py upload_sphinx --upload-dir=docs/html")

def release():
    # update version id in setup.py, changelog and docs/source/conf.py
    local("python setup.py sdist --formats=gztar,zip upload")

########NEW FILE########
__FILENAME__ = urlconf
try:
    from django.conf.urls import patterns
except ImportError:
    from django.conf.urls.defaults import patterns
urlpatterns = patterns("")

########NEW FILE########
__FILENAME__ = forms
from django.conf import settings

settings.FORMS_IMPORTED=True
########NEW FILE########
__FILENAME__ = models

########NEW FILE########
__FILENAME__ = signals
from django.conf import settings

settings.SIGNALS_IMPORTED=True
########NEW FILE########
__FILENAME__ = tests
from django.conf import settings
from django.test.client import Client
from django.core.urlresolvers import resolve
from django.contrib.auth.models import User
from django.test import TestCase

import os

from importd import d

class BasicTest(TestCase):
    def setUp(self):
        try:
            self.root = User.objects.get(username="root")
        except User.DoesNotExist:
            self.root = User.objects.create_user(
                "root", "root@example.com", "root"
            )
            self.root.is_superuser = True
            self.root.save()

    def test_appdir(self):
        self.assertTrue(__file__.startswith(settings.APP_DIR + "/app/tests.py"))

    def test_debug(self):
        # django test sets up DEBUG to True, so this cant be tested like this.
        # self.assertTrue(settings.DEBUG)
        pass

    def test_insalled_apps(self):
        self.assertEqual(
            settings.INSTALLED_APPS, [
                'app', 'app2', 'django.contrib.auth',
                'django.contrib.contenttypes', 'django.contrib.messages',
                 'django.contrib.sessions', 'django.contrib.admin',
                 'django.contrib.humanize', 'django.contrib.staticfiles'
            ]
        )

    def test_views_imported(self):
        self.assertTrue(settings.VIEWS_IMPORTED)

    def test_signals_imported(self):
        self.assertTrue(settings.SIGNALS_IMPORTED)

    def test_forms_imported(self):
        self.assertTrue(settings.FORMS_IMPORTED)

    def test_view_with_d_decorator(self):
        c = Client()
        response = c.get("/test1/")
        self.assertEqual(response.status_code, 200)
        self.assertEqual(response.context["the_answer"], 42)
        self.assertTemplateUsed(response, "test1.html")
        self.assertEqual(response.content, b"<h1>test1: 42</h1>\n")
        response = c.get("/testnotfound/")
        self.assertEqual(response.status_code, 404)

    def test_mounts(self):
        c = Client()
        response = c.get("/index/")
        self.assertEqual(response.status_code, 404)
        response = c.get("/app2/index2/")
        self.assertEqual(response.status_code, 200)
        self.assertEqual(response.content, b"app2/index")

    def test_static_mapped(self):
        c = Client()

        self.assertEqual(
            resolve("/static/").url_name,
            "django.contrib.staticfiles.views.serve"
        )
        settings.DEBUG=True
        response = c.get("/static/404.css")
        self.assertEqual(response.status_code, 404)
        response = c.get("/static/style.css")
        self.assertEqual(response.status_code, 200)
        settings.DEBUG=False

    def test_admin(self):
        c = Client()
        response = c.get("/admin/")
        self.assertEqual(response.status_code, 200)
        self.assertEqual(
            [t.name for t in response.templates], 
            ['admin/login.html', u'admin/base_site.html', u'admin/base.html']
        )
        self.assertTrue(response.context["user"].is_anonymous())
        self.assertTrue(c.login(username="root", password="root"))
        response = c.get("/admin/")
        self.assertEqual(response.status_code, 200)
        self.assertEqual(
            [t.name for t in response.templates],
            ['admin/login.html', u'admin/base_site.html', u'admin/base.html']
            # FIXME: this is wrong!
        )
        self.assertTrue(response.context["user"].is_authenticated())



########NEW FILE########
__FILENAME__ = views
from importd import d
from django.conf import settings

settings.VIEWS_IMPORTED=True

@d
def test1(request):
    return "test1.html", {"the_answer": 42}

########NEW FILE########
__FILENAME__ = models

########NEW FILE########
__FILENAME__ = views
from importd import d

@d
def index2(request):
    return d.HttpResponse("app2/index")

########NEW FILE########
__FILENAME__ = main
# make sure to use importd from the repository
import os, sys
sys.path.insert(0, os.path.join(os.path.dirname(__file__), '..', '..'))
from importd import d

d(
    DEBUG=True, INSTALLED_APPS=["app", "app2"], mounts={ "app2": "/app2/" }
)

if __name__ == "__main__":
    d.main()

########NEW FILE########
__FILENAME__ = forms
from django.conf import settings

settings.FORMS_IMPORTED=True
########NEW FILE########
__FILENAME__ = models

########NEW FILE########
__FILENAME__ = signals
from django.conf import settings

settings.SIGNALS_IMPORTED=True
########NEW FILE########
__FILENAME__ = tests
from django.test import TestCase, Client
from django.contrib.auth.models import User
from importd import d

from test_app import TestModel

class ModelTest(TestCase):
    TEST_VALUE = "asdf"

    def setUp(self):
        self.c = Client()
        try:
            self.root = User.objects.get(username="root")
        except User.DoesNotExist:
            self.root = User.objects.create_user(
                "root", "root@example.com", "root"
            )
            self.root.is_superuser = True
            self.root.save()

    def test_addition(self):
        response = self.c.get("/add/{0}".format(self.TEST_VALUE))

        self.assertContains(response, "Success!")
        obj = TestModel.objects.get(value=self.TEST_VALUE)
        self.assertIsNotNone(obj)
        self.assertEqual(self.TEST_VALUE, obj.value)

    def test_model_getting(self):
        TestModel.objects.create(value=self.TEST_VALUE)
        response = self.c.get("/")

        self.assertContains(response, self.TEST_VALUE)

    def test_admin(self):
        c = Client()
        response = c.get("/admin/")
        self.assertEqual(response.status_code, 200)
        self.assertEqual(
            [t.name for t in response.templates], 
            ['admin/login.html', u'admin/base_site.html', u'admin/base.html']
        )
        self.assertTrue(response.context["user"].is_anonymous())
        self.assertTrue(c.login(username="root", password="root"))
        response = c.get("/admin/?a")
        self.assertEqual(response.status_code, 200)
        self.assertEqual(
            [t.name for t in response.templates], 
            ['admin/login.html', u'admin/base_site.html', u'admin/base.html']
            # FIXME: this is wrong
        )
        self.assertTrue(response.context["user"].is_authenticated())
        response = c.get("/admin/test_app_app/")
        self.assertEqual(response.status_code, 200)

########NEW FILE########
__FILENAME__ = views
from django.conf import settings

settings.VIEWS_IMPORTED=True
########NEW FILE########
__FILENAME__ = test_app
# make sure to use importd from the repository
import os, sys
sys.path.insert(0, os.path.join(os.path.dirname(__file__), '..', '..'))
from importd import d

d(INSTALLED_APPS=["app"])

@d("/")
def main(request):
    objects = TestModel.objects.all()
    return d.HttpResponse("\n".join(map(lambda obj: obj.value, objects)))


@d("add/(?P<value>.*)")
def add(request, value):
    TestModel.objects.create(value=value)
    return d.HttpResponse("Success!")

#@register_admin?
class TestModel(d.models.Model):
    value = d.models.CharField(max_length=20)

d.register_admin(TestModel)

if __name__ == "__main__":
    d.main()

########NEW FILE########
