
Recipes for ZooKeeper monitoring using Cacti
--------------------------------------------

Cacti install guide: https://help.ubuntu.com/community/Cacti

Cacti Manual: http://www.cacti.net/downloads/docs/html/
PDF version: http://www.cacti.net/downloads/docs/pdf/manual.pdf 

Check Chapter 16: Simplest Method of Going from Script to Graph
    http://www.cacti.net/downloads/docs/html/how_to.html#SCRIPT_TO_GRAPH

WARNING: I have wrote these instructions while installing and configuring the plugin on my desktop computer running Ubuntu 9.10. I've installed Cacti using apt-get.

WARNING: I'm going to make the assumption that you know how to work with Cacti and how to setup Data Input Methods for custom scripts. I'm also going to assume that you have already installed Cacti and everything works as expected.

You can extend the Cacti's data gathering functionality through external scripts. Cacti comes with a number of scripts out of the box wich are localted in the scripts/ directory. 


The check_zookeeper.py script can be used a  custom data input method for Cacti.

Single value (check cluster status by sending queries to the leader):
---------------------------------------------------------------------

python <path_cacti>scripts/check_zookeeper.py -s "localhost:2181,localhost:2182,localhost:2183,localhost:2184,localhost:2185" -k <key> -o cacti --leader

When you will call the script this way it will about a single value representing the value attached to this <key>.


Multiple values (one for each cluster node):
--------------------------------------------

python <path_cacti>scripts/check_zookeeper.py -s "localhost:2181,localhost:2182,localhost:2183,localhost:2184,localhost:2185" -k <key> -o cacti

Output:
localhost_2182:0  localhost_2183:0  localhost_2181:0  localhost_2184:0  localhost_2185:0


TBD: Step by step guide




Recipes for ZooKeeper monitoring using Ganglia
----------------------------------------------

Ganglia Install guide: http://sourceforge.net/apps/trac/ganglia/wiki/Ganglia%203.1.x%20Installation%20and%20Configuration 

Gmond configuration: http://sourceforge.net/apps/trac/ganglia/wiki/Gmond%203.1.x%20General%20Configuration 

WARNING: I have wrote these instructions while installing and configuring the plugin on my desktop computer running Ubuntu 9.10. I've installed Ganglia using apt-get.

WARNING: I'm going to make the assumption that you know how to work with Ganglia. I'm also going to assume that you have already installed Gangli and everything works as expected.

You can monitoring ZooKeeper using Ganglia in two ways:

1. Using a python module:

    WARNING! The python module only works with Ganglia 3.1.x 

    a. enable python modules: you can find instructions in modpython.confg
    b. copy zookeeper.pyconf in /etc/ganglia/conf.d/
    c. copy zookeeper_ganglia.py in /usr/lib/ganglia/python_plugins
    d. restart the ganglia-monitor

    This is the recommended way!

2. OR Using check_zookeeper.py and gmetric:

    Monitoring ZooKeeper using Ganglia is a simple as calling:

    ./check_zookeeper.py -o ganglia -s localhost:2181 

    on each of the ZooKeeper cluster nodes. I'm making the assumption that you have already configured gmond and installed gmetric on each node.



Configuration Recipe for monitoring ZooKeeper using Nagios
----------------------------------------------------------

I will start by making the assumption that you already have an working Nagios install.

WARNING: I have wrote these instructions while installing and configuring the plugin on my desktop computer running Ubuntu 9.10. I've installed Nagios using apt-get.

WARNING: You should customize the config files as suggested in order to match your Nagios and Zookeeper install. 

WARNING: This README assumes you know how to configure Nagios and how it works. 

WARNING: You should customize the warning and critical levels on service checks to meet your own needs. 

1. Install the plugin

$ cp check_zookeeper.py /usr/lib/nagios/plugins/

2. Install the new commands

$ cp zookeeper.cfg /etc/nagios-plugins/config

3. Update the list of servers in zookeeper.cfg for the command 'check_zookeeper' and update the port for the command 'check_zk_node' (default: 2181)

4. Create a virtual host in Nagios used for monitoring the cluster as a whole -OR-  Create a hostgroup named 'zookeeper-servers' and add all the zookeeper cluster nodes. 

5. Define service checks like I have ilustrated bellow or just use the provided definitions.

define service {
    use         generic-service
    host_name   zookeeper-cluster
    service_description ...
    check_command check_zookeeper!<exported-var>!<warning-level>!<critical-level>
}

define service {
    hostgroup_name  zookeeper-servers                    
    use generic-service                                  
    service_description ZK_Open_File_Descriptors_Count   
    check_command check_zk_node!<exported-var>!<warning-level>!<critical-level>
}

Ex: 

a. check the number of open file descriptors

define service{
        use         generic-service
        host_name   zookeeper-cluster
        service_description ZK_Open_File_Descriptor_Count
        check_command check_zookeeper!zk_open_file_descriptor_count!500!800
}

b. check the number of ephemerals nodes

define service {
        use generic-service
        host_name localhost
        service_description ZK_Ephemerals_Count
        check_command check_zookeeper!zk_ephemerals_count!10000!100000
}

c. check the number of open file descriptors for each host in the group

define service {
    hostgroup_name  zookeeper-servers                    
    use generic-service                                  
    service_description ZK_Open_File_Descriptors_Count   
    check_command check_zk_node!zk_open_file_descriptor_count!500!800
}


Tools and Recipes for ZooKeeper Monitoring
------------------------------------------

UPDATE: This repository have been committed [1] to the ZooKeeper trunk as a contrib. You can find it under src/contrib/monitoring. Please use the ZooKeeper JIRA [2] to submit issues and feature requests. It's going to be a part of the upcoming 3.4.0 release. Thanks. 

[1] https://issues.apache.org/jira/browse/ZOOKEEPER-799
[2] https://issues.apache.org/jira/browse/ZOOKEEPER

How To Monitor
--------------

A ZooKeeper cluster can be monitored in two ways:
 1. by using the 'mntr' 4letterword command
 2. by using JMX to query the MBeans 

This repo contains tools and recipes for monitoring ZooKeeper using the first method. 

Check the file JMX-RESOURCE for some links to resources that could help you monitor a ZooKeeper cluster using the JMX interface. 

Requirements
------------

ZooKeeper 3.4.0 or later or you can apply ZOOKEEPER-744 patch over the latest 3.3.x release.
The server should understand the 'mntr' 4letterword command. 

$ echo 'mntr' | nc localhost 2181
zk_version  3.4.0--1, built on 06/19/2010 15:07 GMT
zk_avg_latency  141
zk_max_latency  1788
zk_min_latency  0
zk_packets_received 385466
zk_packets_sent 435364
zk_outstanding_requests 0
zk_server_state follower
zk_znode_count  5
zk_watch_count  0
zk_ephemerals_count 0
zk_approximate_data_size    41
zk_open_file_descriptor_count   20
zk_max_file_descriptor_count    1024

Python 2.6 (maybe it works on previous version but it's not tested yet).

In a nutshell
-------------

All you need is check_zookeeper.py It has no external dependencies. 


*** On Nagios call the script like this:

./check_zookeeper.py -o nagios -s "<server-or-list-of-servers>" -k <key> -w <warning> -c <critical>


*** On Cacti define a custom data input method using the script like this:

./check_zookeeper.py -o cacti -s "<list-of-servers>" -k <key> --leader

-- outputs a single value for the given key fetched from the cluster leader

OR 

./check_zookeeper.py -o cacti -s "<list-of-servers>" -k <key> 

-- outputs multiple values on for each cluster node
ex: localhost_2182:0  localhost_2183:0  localhost_2181:0  localhost_2184:0  localhost_2185:0

*** On Ganglia:

install the plugin found in the ganglia/ subfolder OR

./check_zookeeper.py -o ganglia -s "<current-zookeeper-node>"

it will use gmetric to send zookeeper node status data.


Check the subfolders for configuration details and samples for each platform.

ZooKeeper 4letterwords Commands
-------------------------------

http://hadoop.apache.org/zookeeper/docs/current/zookeeperAdmin.html#sc_zkCommands


