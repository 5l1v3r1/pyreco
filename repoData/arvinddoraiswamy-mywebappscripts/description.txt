1. Get host from request header
2. Extract directory from a given URL
3. Get Referer from request header
4. Get SetCookie from response header
5. Get Response Code from response header
6. Get Location from response header
7. Get Server from response header

1. Spider the application and generate a site map in Burp.
2. Select the sites/directories that you want using CTRL+Click; right click in Burp and select 'Copy all URLs'.
3. Create a new file called https_urls in the same directory as this script.
4. Paste the copied URLs into this file and save this file.
5. Run the script force_http_req_threaded.py as follows - python force_http_req_threaded.py.
6. Create a directory called URLs. The file 'https_urls' is copied into URLs and split into multiple files; each having 200 lines at most.
7. Each file is processed and every single https URL now requested over HTTP.
8. The result of this process is written into a file called 'report'. This file is in the same directory as the script.

AUTHENTICATION:

1) Replace 'arv' and 'ind' with parts of a username valid for a particular application.
     Replace 'arvind' with a complete username valid for a particular application.

2) Replace 'pass' and 'word' with parts of a password valid for a particular application.
     Replace 'password' with a complete password valid for a particular application.

3) If you want to check field by field the burp sniper fuzzer works. Use lists one by one. To test each username with all passwords, use the burp clusterbomb fuzzer so you can try all possible combinations. [Close to 90,000 requests]

4) Once you have finished one round with just this list you can use the encoding rules that Burp has to try and send URL encoded/other combinations of the lists.

5) Once you've gone through this list and found nothing, I usually go through the inbuilt 'SQL Injection' list that Burp Pro intruder has, and lastly run Burp Scanner/Sqlmap.

6) If I find nothing to run with in all of that, I mark the test case [SQL Injection - Login page] a 'Success' and move on.

----------------------------------------------------------------------------------------------------------------------------------

This ReadMe is just a list of the Burp extensions and other scripts I have here. For details look at the file extensions_brief_summary or download the code itself :)

1. Search and fuzz all valid directories on a website
2. Detect CSRF tokens in requests
3. Detecting invalid Referers in case a Referer is used for protecting against CSRF
4. Download all JS files on a site
5. Record all cookies and their attributes
6. Record third party referers
7. Identify candidates for URL redirection, LFI and RFI
8. Detect version information leakage in headers or response bodies
9. Remove session cookie and reissue request to check Direct requests
10. Test PUT and DELETE on every single directory that you browse
11. Scan all SSL hosts in Proxy history

Other scripts/tools/fuzz lists/misc :)

1. Request every single HTTPS request over HTTP
2. Custom fuzzing lists for specific situations
3. Code for all extensions has been modularized. List of functions in modules is present in modules/modules_functions_readme

