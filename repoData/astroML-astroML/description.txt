Appendix
--------
There are several appendices, covering topics from the efficient use of
Python code to the practical use of Fourier transforms.

Chapter 1: Introduction
-----------------------
This chapter consists of introductory figures, including several of the
datasets available in astroML, and some strategies for data visualization.

Chapter 10: Time Series Analysis
--------------------------------
This chapter covers the analysis of both periodic and non-periodic time series,
for both regularly and irregularly spaced data.

Chapter 2: Fast Computation and Massive Datasets
------------------------------------------------
This chapter discusses computational strategies for large datasets.

Chapter 3: Probability and Statistical Distributions
----------------------------------------------------
This chapter discusses basic foundational principles, including probability
and basic descriptive statistics. It also introduces several important
probability distribution functions.

Chapter 4: Classical Statistical Inference
------------------------------------------
This chapter develops the classical or "frequentist" approach to  statistics.

Chapter 5: Bayesian Statistical Inference
-----------------------------------------
This chapter develops the fundamentals of Bayesian statistical inference,
and finishes with some examples of computing statistics in this manner.

Chapter 6: Searching for Structure in Point Data
------------------------------------------------
This chapter covers high-dimensional point statistics, including density
estimation, clustering, and correlation functions.

Chapter 7: Dimensionality and its Reduction
-------------------------------------------
This chapter covers dimensionality reduction, from linear methods such as
PCA, NMF, and ICA, to nonlinear methods such as LLE and Isomap.

Chapter 8: Regression and Model Fitting
---------------------------------------
This chapter covers linear and nonlinear regression and model fitting,
including strategies which are robust to data error and the presence of
outliers.

Chapter 9: Classification
-------------------------
This chapter covers supervised classification of data, using a number of
generative and discriminative classifiers.

This is the directory which holds code to generate figures.  The layout is as
follows:

The chapter directories should be called 
 chapter1/
 chapter2/
 chapter3/
etc.

Inside each chapter directory are plotting scripts, which must be of the form

 fig_*.py

The `*` should be a concise & unique descriptor of the file (it will be used
as the image file name).  Each chapter should also have a file called
`contents.txt` in which each line is the name of a file in the directory.
Comments are marked with a #.  This will control the order that the figures
are created on the page.

Additionally, each directory can have a header file `header.rst` which gives
information about the chapter.  If this does not exist, then a basic header
will be created.

Summary:
to add a new figure:
 create a script called chapter*/fig_*.py, where the *'s are suitably replaced
 in the contents.txt file of the directory, add `fig_*py` to the list in the
 appropriate place.
Textbook Figures
----------------

This section makes available the source code used to generate every figure
in the book `Statistics, Data Mining, and Machine Learning in Astronomy`.
Many of the figures are fairly self-explanatory, though some will be less
so without the book as a reference.  The table of contents of the book
can be seen :download:`here(pdf) <../documents/DMbookTOC.pdf>`.

Figure Contents
~~~~~~~~~~~~~~~
Each chapter links to a page with thumbnails of the figures from the chapter.

=====================================
numpydoc -- Numpy's Sphinx extensions
=====================================

Numpy's documentation uses several custom extensions to Sphinx.  These
are shipped in this ``numpydoc`` package, in case you want to make use
of them in third-party projects.

The following extensions are available:

  - ``numpydoc``: support for the Numpy docstring format in Sphinx, and add
    the code description directives ``np-function``, ``np-cfunction``, etc.
    that support the Numpy docstring syntax.

  - ``numpydoc.traitsdoc``: For gathering documentation about Traits attributes.

  - ``numpydoc.plot_directives``: Adaptation of Matplotlib's ``plot::``
    directive. Note that this implementation may still undergo severe
    changes or eventually be deprecated.

  - ``numpydoc.only_directives``: (DEPRECATED)

  - ``numpydoc.autosummary``: (DEPRECATED) An ``autosummary::`` directive.
    Available in Sphinx 0.6.2 and (to-be) 1.0 as ``sphinx.ext.autosummary``,
    and it the Sphinx 1.0 version is recommended over that included in
    Numpydoc.


numpydoc
========

Numpydoc inserts a hook into Sphinx's autodoc that converts docstrings
following the Numpy/Scipy format to a form palatable to Sphinx.

Options
-------

The following options can be set in conf.py:

- numpydoc_use_plots: bool

  Whether to produce ``plot::`` directives for Examples sections that
  contain ``import matplotlib``.

- numpydoc_show_class_members: bool

  Whether to show all members of a class in the Methods and Attributes
  sections automatically.

- numpydoc_edit_link: bool  (DEPRECATED -- edit your HTML template instead)

  Whether to insert an edit link after docstrings.

Data Processing Algorithms
--------------------------
These figures and examples show some of the data processing and algorithmic
tools enabled by astroML and other Python packages. For more examples,
see the :ref:`figures <book_fig_root>` from the textbook.

Data set Examples
-----------------
These plots show some of the data set loaders available in astroML, and some
of the ways that astronomical data can be visualized and processed using
open source python tools.  The dataset loaders are in the submodule
:mod:`astroML.datasets`, and start with the word ``fetch_``.

The first time a dataset loader is called, it will attempt to download the
dataset from the web and store it locally on disk.  The default location
is ``~/astroML_data``, but this location can be changed by specifying an
alternative directory in the ``ASTROML_DATA`` environment variable.  On
subsequent calls, the cached version of the data is used.

For more examples, see the :ref:`figures <book_fig_root>` from the textbook.

Machine Learning and Data Modeling
----------------------------------
These scripts show some of the machine learning and data modeling tools
available in astroML.  For more examples, see the
:ref:`figures <book_fig_root>` from the textbook.

General astroML Examples
------------------------

This section contains several example plots which do not appear in the
textbook.  Currently there are only a few examples here: for more, please
see the :ref:`text book figures <book_fig_root>`.

CIDU 2012: Introduction to astroML
----------------------------------
These figures are from the introduction to the astroML package presented at
the Conference for Intelligent Data Understanding (CIDU) 2012.

Paper Figures
-------------

In the spirit of `reprodicible research <http://reproducibleresearch.net>`_,
this page lists the source code for figures from published papers which
use datasets and routines available in astroML.

.. -*- mode: rst -*-

============================================
AstroML: Machine Learning code for Astronomy
============================================

AstroML is a Python module for machine learning and data mining
built on numpy, scipy, scikit-learn, and matplotlib,
and distributed under the 3-Clause BSD license.
It contains a growing library of statistical and machine learning
routines for analyzing astronomical data in python, loaders for several open
astronomical datasets, and a large suite of examples of analyzing and
visualizing astronomical datasets.

This project was started in 2012 by Jake VanderPlas to accompany the book
*Statistics, Data Mining, and Machine Learning in Astronomy* by
Zeljko Ivezic, Andrew Connolly, Jacob VanderPlas, and Alex Gray.

Core and Addons
===============
The project is split into two components.  The core ``astroML`` library is
written in python only, and is designed to be very easy to install for
any users, even those who don't have a working C or fortran compiler.
A companion library, ``astroML_addons``, can be optionally installed for
increased performance on certain algorithms.  Every algorithm
in ``astroML_addons`` has a pure python counterpart in the
core ``astroML`` implementation, but the ``astroML_addons`` library
contains faster and more efficient implementations in compiled code.
Furthermore, if ``astroML_addons`` is installed on your system, the core
``astroML`` library will import and use the faster routines by default.

The reason for this split is the ease of use for newcomers to Python.  If the
prerequisites are already installed on your system, the core ``astroML``
library can be installed and used on any system with little trouble.  The
``astroML_addons`` library requires a C compiler, but is also designed to be
easy to install for more advanced users.  See further discussion in
"Development", below.


Important Links
===============
- HTML documentation: http://www.astroML.org
- Core source-code repository: http://github.com/astroML/astroML
- Addons source-code repository: http://github.com/astroML/astroML_addons
- Issue Tracker: http://github.com/astroML/astroML/issues
- Mailing List: https://groups.google.com/forum/#!forum/astroml-general


Installation
============

This package uses distutils, which is the default way of installing python
modules.  **Before installation, make sure your system meets the prerequisites
listed in Dependencies, listed below.**

Core
----
To install the core ``astroML`` package in your home directory, use::

  pip install astroML

The core package is pure python, so installation should be straightforward
on most systems.  To install from source, use::

  python setup.py install

You can specify an arbitrary directory for installation using::

  python setup.py install --prefix='/some/path'

To install system-wide on Linux/Unix systems::

  python setup.py build
  sudo python setup.py install

Addons
------
The ``astroML_addons`` package requires a working C/C++ compiler for
installation.  It can be installed using::

  pip install astroML_addons

To install from source, refer to http://github.com/astroML/astroML_addons


Dependencies
============
There are three levels of dependencies in astroML.  *Core* dependencies are
required for the core ``astroML`` package.  *Add-on* dependencies are required
for the performance ``astroML_addons``.  *Optional* dependencies are required
to run some (but not all) of the example scripts.  Individual example scripts
will list their optional dependencies at the top of the file.

Core Dependencies
-----------------
The core ``astroML`` package requires the following:

- Python_ version 2.6.x - 2.7.x
  (astroML does not yet support python 3.x)
- Numpy_ >= 1.4
- Scipy_ >= 0.7
- Scikit-learn_ >= 0.10
- Matplotlib_ >= 0.99
- AstroPy_ > 0.2.5
  AstroPy is required to read Flexible Image Transport
  System (FITS) files, which are used by several datasets.
  
This configuration matches the Ubuntu 10.04 LTS release from April 2010,
with the addition of scikit-learn.

To run unit tests, you will also need nose >= 0.10

Add-on Dependencies
-------------------
The fast code in ``astroML_addons`` requires a working C/C++ compiler.

Optional Dependencies
---------------------
Several of the example scripts require specialized or upgraded packages.
These requirements are listed at the top of the particular scripts

- Scipy_ version 0.11 added a sparse graph submodule.
  The minimum spanning tree example requires scipy >= 0.11

- PyMC_ provides a nice interface for Markov-Chain Monte Carlo. Several astroML
  examples use pyMC for exploration of high-dimensional spaces. The examples
  were written with pymc version 2.2

- HEALPy_ provides an interface to
  the HEALPix pixelization scheme, as well as fast spherical harmonic
  transforms.

Development
===========
This package is designed to be a repository for well-written astronomy code,
and submissions of new routines are encouraged.  After installing the
version-control system Git_, you can check out
the latest sources from GitHub_ using::

  git clone git://github.com/astroML/astroML.git

or if you have write privileges::

  git clone git@github.com:astroML/astroML.git

Contribution
------------
We strongly encourage contributions of useful astronomy-related code:
for `astroML` to be a relevant tool for the python/astronomy community,
it will need to grow with the field of research.  There are a few
guidelines for contribution:

General
~~~~~~~
Any contribution should be done through the github pull request system (for
more information, see the
`help page <https://help.github.com/articles/using-pull-requests>`_
Code submitted to ``astroML`` should conform to a BSD-style license,
and follow the `PEP8 style guide <http://www.python.org/dev/peps/pep-0008/>`_.

Documentation and Examples
~~~~~~~~~~~~~~~~~~~~~~~~~~
All submitted code should be documented following the
`Numpy Documentation Guide`_.  This is a unified documentation style used
by many packages in the scipy universe.

In addition, it is highly recommended to create example scripts that show the
usefulness of the method on an astronomical dataset (preferably making use
of the loaders in ``astroML.datasets``).  These example scripts are in the
``examples`` subdirectory of the main source repository.

Add-on code
~~~~~~~~~~~
We made the decision early-on to separate the core routines from
high-performance compiled routines.
This is to make sure that installation of the core
package is as straightforward as possible (i.e. not requiring a C compiler).

Contributions of efficient compiled code to ``astroML_addons`` is encouraged:
the availability of efficient implementations of common algorithms in python
is one of the strongest features of the python universe.  The preferred
method of wrapping compiled libraries is to use
`cython <http://www.cython.org>`_; other options (weave, SWIG, etc.) are
harder to build and maintain.

Currently, the policy is that any efficient algorithm included in
``astroML_addons`` should have a duplicate python-only implementation in
``astroML``, with code that selects the faster routine if it's available.
(For an example of how this works, see the definition of the ``lomb_scargle``
function in ``astroML/periodogram.py``).
This policy exists for two reasons:

 1. it allows novice users to have all the functionality of ``astroML`` without
    requiring the headache of complicated installation steps.
 2. it serves a didactic purpose: python-only implementations are often easier
    to read and understand than equivalent implementations in C or cython.
 3. it enforces the good coding practice of avoiding premature optimization.
    First make sure the code works (i.e. write it in simple python).  Then
    create an optimized version in the addons.

If this policy proves especially burdensome in the future, it may be revisited.

.. _Numpy Documentation Guide: https://github.com/numpy/numpy/blob/master/doc/HOWTO_DOCUMENT.rst.txt

Authors
=======

Package Author
--------------
* Jake Vanderplas <vanderplas@astro.washington.edu> http://jakevdp.github.com

Code Contribution
-----------------
* Morgan Fouesneau https://github.com/mfouesneau
* Julian Taylor http://github.com/juliantaylor


.. _Python: http://www.python.org
.. _Numpy: http://www.numpy.org
.. _Scipy: http://www.scipy.org
.. _Scikit-learn: http://scikit-learn.org
.. _Matplotlib: http://matplotlib.org
.. _AstroPy: http://www.astropy.org/
.. _PyMC: http://pymc-devs.github.com/pymc/
.. _HEALPy: https://github.com/healpy/healpy>
.. _Git: http://git-scm.com/
.. _GitHub: http://www.github.com

