__FILENAME__ = conf
# -*- coding: utf-8 -*-
#
# django-dash documentation build configuration file, created by
# sphinx-quickstart on Wed Oct 30 01:14:35 2013.
#
# This file is execfile()d with the current directory set to its
# containing dir.
#
# Note that not all possible configuration values are present in this
# autogenerated file.
#
# All configuration values have a default; values that are commented out
# serve to show the default.

import sys
import os

# If extensions (or modules to document with autodoc) are in another directory,
# add these directories to sys.path here. If the directory is relative to the
# documentation root, use os.path.abspath to make it absolute, like shown here.
#sys.path.insert(0, os.path.abspath('.'))
sys.path.insert(0, os.path.abspath('../src'))
try:
    import dash
    version = dash.__version__
except Exception as e:
    version = '0.1'

# -- Django configuration ------------------------------------------------------
from django.conf import settings
if not settings.configured:
    settings.configure()

# -- General configuration ------------------------------------------------

# If your documentation needs a minimal Sphinx version, state it here.
#needs_sphinx = '1.0'

# Add any Sphinx extension module names here, as strings. They can be
# extensions coming with Sphinx (named 'sphinx.ext.*') or your custom
# ones.
extensions = [
    'sphinx.ext.autodoc',
    'sphinx.ext.viewcode',
]

# Add any paths that contain templates here, relative to this directory.
templates_path = ['_templates']

# The suffix of source filenames.
source_suffix = '.rst'

# The encoding of source files.
#source_encoding = 'utf-8-sig'

# The master toctree document.
master_doc = 'index'

# General information about the project.
project = u'django-dash'
copyright = u'2013, Artur Barseghyan <artur.barseghyan@gmail.com>'

# The version info for the project you're documenting, acts as replacement for
# |version| and |release|, also used in various other places throughout the
# built documents.
#
# The short X.Y version.
#version = '0.4.3'
# The full version, including alpha/beta/rc tags.
#release = '0.4.3'
release = version

# The language for content autogenerated by Sphinx. Refer to documentation
# for a list of supported languages.
#language = None

# There are two options for replacing |today|: either, you set today to some
# non-false value, then it is used:
#today = ''
# Else, today_fmt is used as the format for a strftime call.
#today_fmt = '%B %d, %Y'

# List of patterns, relative to source directory, that match files and
# directories to ignore when looking for source files.
exclude_patterns = ['_build']

# The reST default role (used for this markup: `text`) to use for all
# documents.
#default_role = None

# If true, '()' will be appended to :func: etc. cross-reference text.
#add_function_parentheses = True

# If true, the current module name will be prepended to all description
# unit titles (such as .. function::).
#add_module_names = True

# If true, sectionauthor and moduleauthor directives will be shown in the
# output. They are ignored by default.
#show_authors = False

# The name of the Pygments (syntax highlighting) style to use.
pygments_style = 'sphinx'

# A list of ignored prefixes for module index sorting.
#modindex_common_prefix = []

# If true, keep warnings as "system message" paragraphs in the built documents.
#keep_warnings = False


# -- Options for HTML output ----------------------------------------------

# The theme to use for HTML and HTML Help pages.  See the documentation for
# a list of builtin themes.
html_theme = 'default'

# Theme options are theme-specific and customize the look and feel of a theme
# further.  For a list of options available for each theme, see the
# documentation.
#html_theme_options = {}

# Add any paths that contain custom themes here, relative to this directory.
#html_theme_path = []

# The name for this set of Sphinx documents.  If None, it defaults to
# "<project> v<release> documentation".
#html_title = None

# A shorter title for the navigation bar.  Default is the same as html_title.
#html_short_title = None

# The name of an image file (relative to this directory) to place at the top
# of the sidebar.
#html_logo = None

# The name of an image file (within the static path) to use as favicon of the
# docs.  This file should be a Windows icon file (.ico) being 16x16 or 32x32
# pixels large.
#html_favicon = None

# Add any paths that contain custom static files (such as style sheets) here,
# relative to this directory. They are copied after the builtin static files,
# so a file named "default.css" will overwrite the builtin "default.css".
html_static_path = ['_static']

# Add any extra paths that contain custom files (such as robots.txt or
# .htaccess) here, relative to this directory. These files are copied
# directly to the root of the documentation.
#html_extra_path = []

# If not '', a 'Last updated on:' timestamp is inserted at every page bottom,
# using the given strftime format.
#html_last_updated_fmt = '%b %d, %Y'

# If true, SmartyPants will be used to convert quotes and dashes to
# typographically correct entities.
#html_use_smartypants = True

# Custom sidebar templates, maps document names to template names.
#html_sidebars = {}

# Additional templates that should be rendered to pages, maps page names to
# template names.
#html_additional_pages = {}

# If false, no module index is generated.
#html_domain_indices = True

# If false, no index is generated.
#html_use_index = True

# If true, the index is split into individual pages for each letter.
#html_split_index = False

# If true, links to the reST sources are added to the pages.
#html_show_sourcelink = True

# If true, "Created using Sphinx" is shown in the HTML footer. Default is True.
#html_show_sphinx = True

# If true, "(C) Copyright ..." is shown in the HTML footer. Default is True.
#html_show_copyright = True

# If true, an OpenSearch description file will be output, and all pages will
# contain a <link> tag referring to it.  The value of this option must be the
# base URL from which the finished HTML is served.
#html_use_opensearch = ''

# This is the file name suffix for HTML files (e.g. ".xhtml").
#html_file_suffix = None

# Output file base name for HTML help builder.
htmlhelp_basename = 'django-dashdoc'


# -- Options for LaTeX output ---------------------------------------------

latex_elements = {
# The paper size ('letterpaper' or 'a4paper').
#'papersize': 'letterpaper',

# The font size ('10pt', '11pt' or '12pt').
#'pointsize': '10pt',

# Additional stuff for the LaTeX preamble.
#'preamble': '',
}

# Grouping the document tree into LaTeX files. List of tuples
# (source start file, target name, title,
#  author, documentclass [howto, manual, or own class]).
latex_documents = [
  ('index', 'django-dash.tex', u'django-dash Documentation',
   u'Artur Barseghyan \\textless{}artur.barseghyan@gmail.com\\textgreater{}', 'manual'),
]

# The name of an image file (relative to this directory) to place at the top of
# the title page.
#latex_logo = None

# For "manual" documents, if this is true, then toplevel headings are parts,
# not chapters.
#latex_use_parts = False

# If true, show page references after internal links.
#latex_show_pagerefs = False

# If true, show URL addresses after external links.
#latex_show_urls = False

# Documents to append as an appendix to all manuals.
#latex_appendices = []

# If false, no module index is generated.
#latex_domain_indices = True


# -- Options for manual page output ---------------------------------------

# One entry per manual page. List of tuples
# (source start file, name, description, authors, manual section).
man_pages = [
    ('index', 'django-dash', u'django-dash Documentation',
     [u'Artur Barseghyan <artur.barseghyan@gmail.com>'], 1)
]

# If true, show URL addresses after external links.
#man_show_urls = False


# -- Options for Texinfo output -------------------------------------------

# Grouping the document tree into Texinfo files. List of tuples
# (source start file, target name, title, author,
#  dir menu entry, description, category)
texinfo_documents = [
  ('index', 'django-dash', u'django-dash Documentation',
   u'Artur Barseghyan <artur.barseghyan@gmail.com>', 'django-dash', 'One line description of project.',
   'Miscellaneous'),
]

# Documents to append as an appendix to all manuals.
#texinfo_appendices = []

# If false, no module index is generated.
#texinfo_domain_indices = True

# How to display URL addresses: 'footnote', 'no', or 'inline'.
#texinfo_show_urls = 'footnote'

# If true, do not generate a @detailmenu in the "Top" node's menu.
#texinfo_no_detailmenu = False


# -- Options for Epub output ----------------------------------------------

# Bibliographic Dublin Core info.
epub_title = u'django-dash'
epub_author = u'Artur Barseghyan <artur.barseghyan@gmail.com>'
epub_publisher = u'Artur Barseghyan <artur.barseghyan@gmail.com>'
epub_copyright = u'2013, Artur Barseghyan <artur.barseghyan@gmail.com>'

# The basename for the epub file. It defaults to the project name.
#epub_basename = u'django-dash'

# The HTML theme for the epub output. Since the default themes are not optimized
# for small screen space, using the same theme for HTML and epub output is
# usually not wise. This defaults to 'epub', a theme designed to save visual
# space.
#epub_theme = 'epub'

# The language of the text. It defaults to the language option
# or en if the language is not set.
#epub_language = ''

# The scheme of the identifier. Typical schemes are ISBN or URL.
#epub_scheme = ''

# The unique identifier of the text. This can be a ISBN number
# or the project homepage.
#epub_identifier = ''

# A unique identification for the text.
#epub_uid = ''

# A tuple containing the cover image and cover page html template filenames.
#epub_cover = ()

# A sequence of (type, uri, title) tuples for the guide element of content.opf.
#epub_guide = ()

# HTML files that should be inserted before the pages created by sphinx.
# The format is a list of tuples containing the path and title.
#epub_pre_files = []

# HTML files shat should be inserted after the pages created by sphinx.
# The format is a list of tuples containing the path and title.
#epub_post_files = []

# A list of files that should not be packed into the epub file.
#epub_exclude_files = []

# The depth of the table of contents in toc.ncx.
#epub_tocdepth = 3

# Allow duplicate toc entries.
#epub_tocdup = True

# Choose between 'default' and 'includehidden'.
#epub_tocscope = 'default'

# Fix unsupported image types using the PIL.
#epub_fix_images = False

# Scale large images.
#epub_max_image_width = 0

# How to display URL addresses: 'footnote', 'no', or 'inline'.
#epub_show_urls = 'inline'

# If false, no index is generated.
#epub_use_index = True

########NEW FILE########
__FILENAME__ = conf
# Django-CMS apps
foo_apps = [
    'foo.models.*',
]

# News apps list
news_apps = [
    'dash.contrib.plugins.news.models.*',
]

bookmark_apps = [
    'dash.contrib.plugins.url.models.*',
]

# Dash apps
dash_apps = [
    'dash.models.*',
]

# Registration apps
registration_apps = [
    'registration.models.*',
]

apps_to_exclude = ['django.contrib.*',]
apps_to_exclude += foo_apps + news_apps + bookmark_apps + dash_apps + registration_apps

########NEW FILE########
__FILENAME__ = clear_dashboard_preferences
from django.core.management import BaseCommand

from admin_tools.dashboard.models import DashboardPreferences

class Command(BaseCommand):
    help = """
       Clears dashboard preferences.
    """
    def handle(self, *args, **options):
        DashboardPreferences._default_manager.all().delete()

########NEW FILE########
__FILENAME__ = menu
"""
This file was generated with the custommenu management command, it contains
the classes for the admin menu, you can customize this class as you want.

To activate your custom menu add the following to your settings.py::
    ADMIN_TOOLS_MENU = 'admin_tools_dashboard.menu.CustomMenu'
"""

from django.core.urlresolvers import reverse
from django.utils.translation import ugettext_lazy as _

from admin_tools.menu import items, Menu

from admin_tools_dashboard import conf

class CustomMenu(Menu):
    """
    Custom Menu.
    """
    def __init__(self, **kwargs):
        Menu.__init__(self, **kwargs)
        self.children += [
            items.MenuItem(_('Dashboard'), reverse('admin:index')),
        ]

        # Foo
        self.children.append(items.ModelList(_('Foo'),
            models=conf.foo_apps
        ))

        # News
        self.children.append(items.ModelList(_('News'),
            models=conf.news_apps
        ))

        # Bookmark
        self.children.append(items.ModelList(_('Bookmark'),
            models=conf.bookmark_apps
        ))

        # Dash
        self.children.append(items.ModelList(_('Dash'),
            models=conf.dash_apps
        ))

         # Registration
        self.children.append(items.ModelList(_('Registration'),
            models=conf.registration_apps
        ))

        # append an app list module for "Administration"
        self.children.append(items.AppList(
            _('Administration'),
            models=['django.contrib.*',]
        ))

    def init_with_context(self, context):
        """
            Use this method if you need to access the request context.
        """
        return super(CustomMenu, self).init_with_context(context)

########NEW FILE########
__FILENAME__ = dash_plugins
__author__ = 'Artur Barseghyan <artur.barseghyan@gmail.com>'
__copyright__ = 'Copyright (c) 2013 Artur Barseghyan'
__license__ = 'GPL 2.0/LGPL 2.1'

from django.utils.translation import ugettext_lazy as _

from dash.base import BaseDashboardPlugin
from dash.factory import plugin_factory, plugin_widget_factory

from bar.dash_widgets import BaseChartWidget
from bar.forms import ChartForm

# ********************************************************************************
# *************************** Extended plugins ***********************************
# ********************************************************************************

class BaseChartPlugin(BaseDashboardPlugin):
    """
    Base chart plugin.
    """
    name = _("Chart")
    group = _("Charts")
    form = ChartForm
    html_classes = ['chartonic']

# ********************************************************************************
# ********** Generating and registering the plugins using factory ****************
# ********************************************************************************
sizes = (
    (1, 1),
    (1, 2),
    (2, 1),
    (2, 2),
    (2, 3),
    (3, 2),
    (3, 3),
    (3, 4),
    (4, 3),
    (4, 4),
    (4, 5),
    (5, 4),
    (5, 5)
)

plugin_factory(BaseChartPlugin, 'chart', sizes)

# ********************************************************************************
# ********************************* Registering widgets **************************
# ********************************************************************************

# Registering chart plugin widgets
plugin_widget_factory(BaseChartWidget, 'android', 'main', 'chart', sizes)
plugin_widget_factory(BaseChartWidget, 'windows8', 'main', 'chart', sizes)
plugin_widget_factory(BaseChartWidget, 'bootstrap2_fluid', 'main', 'chart', sizes)

########NEW FILE########
__FILENAME__ = dash_widgets
__author__ = 'Artur Barseghyan <artur.barseghyan@gmail.com>'
__copyright__ = 'Copyright (c) 2013 Artur Barseghyan'
__license__ = 'GPL 2.0/LGPL 2.1'

from django.template.loader import render_to_string

from dash.base import BaseDashboardPluginWidget

# *************************************************************
# ***************** Base chart widget *************************
# *************************************************************

class BaseChartWidget(BaseDashboardPluginWidget):
    """
    Base chart widget.
    """
    media_js = (
        'js/polychart2.standalone.js',
    )

    def render(self, request=None):
        context = {
            'plugin': self.plugin,
            'data_date': str(self.plugin.data.data_date),
            'data_open': str(self.plugin.data.data_open),
            'width': self.get_width(),
            'height': self.get_height(),
        }
        return render_to_string('bar/plugins/render.html', context)


########NEW FILE########
__FILENAME__ = defaults
DEFAULT_DATE_VALUE = "['12/4/2012', '12/5/2012', '12/6/2012', '12/7/2012', '12/8/2012', '12/9/2012', '12/10/2012', '12/11/2012', '12/12/2012']"

DEFAULT_OPEN_VALUE = "['12966.45', '12948.96', '13026.19', '14172.37', '13310.11', '14262.06', '12931.22', '12289.30']"

########NEW FILE########
__FILENAME__ = forms
__author__ = 'Artur Barseghyan <artur.barseghyan@gmail.com>'
__copyright__ = 'Copyright (c) 2013 Artur Barseghyan'
__license__ = 'GPL 2.0/LGPL 2.1'

from django import forms
from django.utils.translation import ugettext_lazy as _

from dash.base import DashboardPluginFormBase

from bar.defaults import DEFAULT_DATE_VALUE, DEFAULT_OPEN_VALUE

class ChartForm(forms.Form, DashboardPluginFormBase):
    """
    Chart form for `ChartBasePlugin` plugin.
    """

    plugin_data_fields = [
        ("title", ""),
        ("data_date", DEFAULT_DATE_VALUE),
        ("data_open", DEFAULT_OPEN_VALUE)
    ]

    title = forms.CharField(label=_("Title"), required=True)
    data_date = forms.CharField(label=_("Date"), required=True, initial=DEFAULT_DATE_VALUE,
                                widget=forms.widgets.Textarea)
    data_open = forms.CharField(label=_("Open"), required=True, initial=DEFAULT_OPEN_VALUE,
                                widget=forms.widgets.Textarea)

########NEW FILE########
__FILENAME__ = models

########NEW FILE########
__FILENAME__ = dash_layouts
__author__ = 'Artur Barseghyan <artur.barseghyan@gmail.com>'
__copyright__ = 'Copyright (c) 2013 Artur Barseghyan'
__license__ = 'GPL 2.0/LGPL 2.1'
__all__ = ('ExampleLayout',)

from dash.base import BaseDashboardLayout, BaseDashboardPlaceholder, layout_registry


class ExampleMainPlaceholder(BaseDashboardPlaceholder):
    """
    Main placeholder of the Example layout.
    """
    uid = 'main'
    cols = 5
    rows = 4
    cell_width = 110
    cell_height = 95


class ExampleLeftShortcutsPlaceholder(BaseDashboardPlaceholder):
    """
    Left shortcuts placeholder of the Example layout.
    """
    uid = 'left_shortcuts'
    cols = 3
    rows = 8
    cell_width = 55
    cell_height = 55


class ExampleRightShortcutsPlaceholder(ExampleLeftShortcutsPlaceholder):
    """
    Right shortcuts placeholder of the Example layout.
    """
    uid = 'right_shortcuts'


class ExampleTopShortcutsPlaceholder(ExampleLeftShortcutsPlaceholder):
    """
    Top shortcuts placeholder of the Example layout.
    """
    uid = 'top_shortcuts'
    cols = 8
    rows = 1
    cell_width = 55
    cell_height = 55

class ExampleBottomShortcutsPlaceholder(ExampleTopShortcutsPlaceholder):
    """
    Bottom shortcuts placeholder of the Example layout.
    """
    uid = 'bottom_shortcuts'


class ExampleLayout(BaseDashboardLayout):
    """
    Example layout.
    """
    uid = 'example'
    name = 'Example'
    view_template_name = 'foo/layouts/view_layout.html'
    edit_template_name = 'foo/layouts/edit_layout.html'
    placeholders = [
        ExampleTopShortcutsPlaceholder, ExampleLeftShortcutsPlaceholder, ExampleRightShortcutsPlaceholder,
        ExampleMainPlaceholder, ExampleBottomShortcutsPlaceholder
        ]
    cell_units = 'px'
    media_css = (
        'css/dash_dashed_borders.css',
        'css/dash_layout_example.css',
    )
    #media_js = ('js/dash_layout_android.js',)


layout_registry.register(ExampleLayout)

########NEW FILE########
__FILENAME__ = dash_plugins
__author__ = 'Artur Barseghyan <artur.barseghyan@gmail.com>'
__copyright__ = 'Copyright (c) 2013 Artur Barseghyan'
__license__ = 'GPL 2.0/LGPL 2.1'

from dash.base import plugin_registry, plugin_widget_registry
from dash.contrib.plugins.image.dash_plugins import BaseImagePlugin

from foo.dash_widgets import (
    # Dummy
    Dummy1x1ExampleMainWidget, Dummy2x2ExampleMainWidget,
    Dummy1x1ExampleTopShortcutsWidget,
    Dummy1x1ExampleRightShortcutsWidget, Dummy2x2ExampleRightShortcutsWidget,
    Dummy1x1ExampleBottomShortcutsWidget,
    Dummy1x1ExampleLeftShortcutsWidget, Dummy2x2ExampleLeftShortcutsWidget,

    # Image
    Image1x1ExampleMainWidget, Image2x2ExampleMainWidget, Image3x2ExampleMainWidget, Image3x3ExampleMainWidget,
    Image3x8ExampleLeftShortcutsWidget, Image3x8ExampleRightShortcutsWidget,
    Image8x1ExampleTopShortcutsWidget, Image8x1ExampleBottomShortcutsWidget,

    # Memo
    Memo2x2ExampleMainWidget, Memo3x3ExampleMainWidget,

    # TinyMCE memo
    TinyMCE2x2ExampleMainWidget, TinyMCE3x3ExampleMainWidget,

    # URL
    URL1x1ExampleMainWidget, URL2x2ExampleMainWidget,
    URL2x2ExampleLeftShortcutsWidget, URL2x2ExampleRightShortcutsWidget,

    # Video
    Video2x2ExampleMainWidget, Video3x3ExampleMainWidget,
    )

# ******************************************************
# ******************Extended plugins *******************
# ******************************************************

class Image3x8Plugin(BaseImagePlugin):
    """
    Image3x8 dashboard plugin.
    """
    uid = 'image_3x8'


plugin_registry.register(Image3x8Plugin)


class Image8x1Plugin(BaseImagePlugin):
    """
    Image3x8 dashboard plugin.
    """
    uid = 'image_8x1'


plugin_registry.register(Image8x1Plugin)

# ******************************************************
# ***************** Registering widgets ****************
# ******************************************************

# Registering dummy plugin widgets
plugin_widget_registry.register(Dummy1x1ExampleMainWidget)
plugin_widget_registry.register(Dummy2x2ExampleMainWidget)

plugin_widget_registry.register(Dummy1x1ExampleTopShortcutsWidget)

plugin_widget_registry.register(Dummy1x1ExampleRightShortcutsWidget)
plugin_widget_registry.register(Dummy2x2ExampleRightShortcutsWidget)

plugin_widget_registry.register(Dummy1x1ExampleBottomShortcutsWidget)

plugin_widget_registry.register(Dummy1x1ExampleLeftShortcutsWidget)
plugin_widget_registry.register(Dummy2x2ExampleLeftShortcutsWidget)

# Registering image plugin widgets
plugin_widget_registry.register(Image1x1ExampleMainWidget)
plugin_widget_registry.register(Image2x2ExampleMainWidget)
plugin_widget_registry.register(Image3x2ExampleMainWidget)
plugin_widget_registry.register(Image3x3ExampleMainWidget)

plugin_widget_registry.register(Image3x8ExampleLeftShortcutsWidget)
plugin_widget_registry.register(Image3x8ExampleRightShortcutsWidget)
plugin_widget_registry.register(Image8x1ExampleTopShortcutsWidget)
plugin_widget_registry.register(Image8x1ExampleBottomShortcutsWidget)

# Registering memo plugin widgets
plugin_widget_registry.register(Memo2x2ExampleMainWidget)
plugin_widget_registry.register(Memo3x3ExampleMainWidget)
plugin_widget_registry.register(TinyMCE2x2ExampleMainWidget)
plugin_widget_registry.register(TinyMCE3x3ExampleMainWidget)

# Registering URL plugin widgets
plugin_widget_registry.register(URL1x1ExampleMainWidget)
plugin_widget_registry.register(URL2x2ExampleMainWidget)
plugin_widget_registry.register(URL2x2ExampleLeftShortcutsWidget)
plugin_widget_registry.register(URL2x2ExampleRightShortcutsWidget)

# Registering Video plugin widgets
plugin_widget_registry.register(Video2x2ExampleMainWidget)
plugin_widget_registry.register(Video3x3ExampleMainWidget)

########NEW FILE########
__FILENAME__ = dash_widgets
__author__ = 'Artur Barseghyan <artur.barseghyan@gmail.com>'
__copyright__ = 'Copyright (c) 2013 Artur Barseghyan'
__license__ = 'GPL 2.0/LGPL 2.1'

from dash.contrib.plugins.dummy.dash_widgets import Dummy1x1Widget, Dummy2x2Widget
from dash.contrib.plugins.image.dash_widgets import (
    BaseImageWidget, Image1x1Widget, Image2x2Widget, Image3x2Widget, Image3x3Widget
    )
from dash.contrib.plugins.memo.dash_widgets import (
    Memo2x2Widget, Memo3x3Widget, TinyMCEMemo2x2Widget, TinyMCEMemo3x3Widget
    )
from dash.contrib.plugins.url.dash_widgets import URL1x1Widget, URL2x2Widget
from dash.contrib.plugins.video.dash_widgets import Video2x2Widget, Video3x3Widget

# *************************************************************
# ***************** Dummy widgets *****************************
# *************************************************************

class Dummy1x1ExampleMainWidget(Dummy1x1Widget):
    """
    Dummy1x1 plugin widget for Example layout (placeholder `main`).
    """
    layout_uid = 'example'
    placeholder_uid = 'main'


class Dummy2x2ExampleMainWidget(Dummy2x2Widget):
    """
    Dummy2x2 plugin widget for Example layout (placeholder `main`).
    """
    layout_uid = 'example'
    placeholder_uid = 'main'

class Dummy1x1ExampleTopShortcutsWidget(Dummy1x1Widget):
    """
    Dummy1x1 plugin widget for Example layout (placeholder `top_shortcuts`).
    """
    layout_uid = 'example'
    placeholder_uid = 'top_shortcuts'


class Dummy1x1ExampleRightShortcutsWidget(Dummy1x1Widget):
    """
    Dummy1x1 plugin widget for Example layout (placeholder `right_shortcuts`).
    """
    layout_uid = 'example'
    placeholder_uid = 'right_shortcuts'


class Dummy2x2ExampleRightShortcutsWidget(Dummy2x2Widget):
    """
    Dummy2x2 plugin widget for Example layout (placeholder `right_shortcuts`).
    """
    layout_uid = 'example'
    placeholder_uid = 'right_shortcuts'


class Dummy1x1ExampleBottomShortcutsWidget(Dummy1x1Widget):
    """
    Dummy1x1 plugin widget for Example layout (placeholder `bottom_shortcuts`).
    """
    layout_uid = 'example'
    placeholder_uid = 'bottom_shortcuts'


class Dummy1x1ExampleLeftShortcutsWidget(Dummy1x1Widget):
    """
    Dummy1x1 plugin widget for Example layout (placeholder `left_shortcuts`).
    """
    layout_uid = 'example'
    placeholder_uid = 'left_shortcuts'

class Dummy2x2ExampleLeftShortcutsWidget(Dummy2x2Widget):
    """
    Dummy2x2 plugin widget for Example layout (placeholder `left_shortcuts`).
    """
    layout_uid = 'example'
    placeholder_uid = 'left_shortcuts'

# *************************************************************
# ***************** Image widgets *****************************
# *************************************************************

class Image1x1ExampleMainWidget(Image1x1Widget):
    """
    Image1x1 plugin widget for Example layout (placeholder `main`).
    """
    layout_uid = 'example'
    placeholder_uid = 'main'


class Image2x2ExampleMainWidget(Image2x2Widget):
    """
    Image2x2 plugin widget for Example layout (placeholder `main`).
    """
    layout_uid = 'example'
    placeholder_uid = 'main'


class Image3x2ExampleMainWidget(Image3x2Widget):
    """
    Image3x2 plugin widget for Example layout (placeholder `main`).
    """
    layout_uid = 'example'
    placeholder_uid = 'main'


class Image3x3ExampleMainWidget(Image3x3Widget):
    """
    Image3x3 plugin widget for Example layout (placeholder `main`).
    """
    layout_uid = 'example'
    placeholder_uid = 'main'


class Image3x8ExampleLeftShortcutsWidget(BaseImageWidget):
    """
    Image3x8 plugin widget for Example layout (placeholder `main`).
    """
    layout_uid = 'example'
    placeholder_uid = 'left_shortcuts'
    plugin_uid = 'image_3x8'
    cols = 3
    rows = 8


class Image3x8ExampleRightShortcutsWidget(Image3x8ExampleLeftShortcutsWidget):
    """
    Image3x8 plugin widget for Example layout (placeholder `main`).
    """
    placeholder_uid = 'right_shortcuts'


class Image8x1ExampleTopShortcutsWidget(BaseImageWidget):
    """
    Image8x1 plugin widget for Example layout (placeholder `main`).
    """
    layout_uid = 'example'
    placeholder_uid = 'top_shortcuts'
    plugin_uid = 'image_8x1'
    cols = 8
    rows = 1


class Image8x1ExampleBottomShortcutsWidget(Image8x1ExampleTopShortcutsWidget):
    """
    Image8x1 plugin widget for Example layout (placeholder `main`).
    """
    placeholder_uid = 'bottom_shortcuts'

# *************************************************************
# ***************** Memo widgets *****************************
# *************************************************************

class Memo2x2ExampleMainWidget(Memo2x2Widget):
    """
    Memo2x2 plugin widget for Example layout (placeholder `main`).
    """
    layout_uid = 'example'
    placeholder_uid = 'main'


class Memo3x3ExampleMainWidget(Memo3x3Widget):
    """
    Memo3x3 plugin widget for Example layout (placeholder `main`).
    """
    layout_uid = 'example'
    placeholder_uid = 'main'


class TinyMCE2x2ExampleMainWidget(TinyMCEMemo2x2Widget):
    """
    Dummy2x2 plugin widget for Example layout (placeholder `main`).
    """
    layout_uid = 'example'
    placeholder_uid = 'main'


class TinyMCE3x3ExampleMainWidget(TinyMCEMemo3x3Widget):
    """
    Dummy2x2 plugin widget for Example layout (placeholder `main`).
    """
    layout_uid = 'example'
    placeholder_uid = 'main'

# *************************************************************
# ******************* URL widgets *****************************
# *************************************************************

class URL1x1ExampleMainWidget(URL1x1Widget):
    """
    URL1x1 plugin widget for Example layout (placeholder `main`).
    """
    layout_uid = 'example'
    placeholder_uid = 'main'

    media_css = (
        'css/dash_plugin_url_example.css',
    )


class URL2x2ExampleLeftShortcutsWidget(URL2x2Widget):
    """
    URL2x2 plugin widget for Example layout (placeholder `left_shortcuts`).
    """
    layout_uid = 'example'
    placeholder_uid = 'left_shortcuts'

    media_css = (
        'css/dash_plugin_url_example.css',
    )


class URL2x2ExampleRightShortcutsWidget(URL2x2ExampleLeftShortcutsWidget):
    """
    URL2x2 plugin widget for Example layout (placeholder `right_shortcuts`).
    """
    placeholder_uid = 'right_shortcuts'


class URL2x2ExampleMainWidget(URL2x2Widget):
    """
    URL2x2 plugin widget for Example layout (placeholder `main`).
    """
    layout_uid = 'example'
    placeholder_uid = 'main'

    media_css = (
        'css/dash_plugin_url_example.css',
    )

# *************************************************************
# ******************* Video widgets ***************************
# *************************************************************

class Video2x2ExampleMainWidget(Video2x2Widget):
    """
    Video1x1 plugin widget for Example layout (placeholder `main`).
    """
    layout_uid = 'example'
    placeholder_uid = 'main'


class Video3x3ExampleMainWidget(Video3x3Widget):
    """
    Video2x2 plugin widget for Example layout (placeholder `main`).
    """
    layout_uid = 'example'
    placeholder_uid = 'main'

########NEW FILE########
__FILENAME__ = dash_create_test_data
from django.core.management.base import BaseCommand

from django.conf import settings
from django.core.management import call_command
from django.contrib.auth.models import User
from django.utils.translation import ugettext_lazy as _

from dash.models import DashboardSettings, DashboardWorkspace, DashboardEntry
from dash.base import get_registered_plugins, get_layout
from dash.tests import create_dashboard_user, DASH_TEST_USER_USERNAME, DASH_TEST_USER_PASSWORD
from dash.contrib.layouts.android.dash_layouts import (
    AndroidLayout, AndroidMainPlaceholder, AndroidShortcutsPlaceholder
    )

clean_extra_spaces = lambda s: ' '.join(s.split())

def create_dashboard_entries(user, workspace=None, mixed_order=False):
    """
    Create dashboard entries.

    :param django.contrib.auth.models.User user:
    :param dash.models.DashboardWorkspace workspace:
    :param bool mixed_order:
    """
    # *********************************
    # *********************************
    # ******** Main placeholder *******
    # *********************************
    # *********************************
    buf = []

    # URL plugin
    dashboard_entry = DashboardEntry(
        user = user,
        workspace = workspace,
        layout_uid = AndroidLayout.uid,
        placeholder_uid = AndroidMainPlaceholder.uid,
        plugin_uid = 'url_1x1',
        plugin_data = clean_extra_spaces("""{"url": "http://delusionalinsanity.com/portfolio/", "image": "icon-picture",
            "external": true, "title": "Photography"}"""),
        position = 2 if mixed_order else 1
        )
    buf.append(dashboard_entry)

    # URL plugin
    dashboard_entry = DashboardEntry(
        user = user,
        workspace = workspace,
        layout_uid = AndroidLayout.uid,
        placeholder_uid = AndroidMainPlaceholder.uid,
        plugin_uid = 'url_1x1',
        plugin_data = clean_extra_spaces("""{"url": "http://f0reverchild.livejournal.com/", "image": "icon-book",
            "external": true, "title": "Livejournal"}"""),
        position = 1 if mixed_order else 2
        )
    buf.append(dashboard_entry)

    # URL plugin
    dashboard_entry = DashboardEntry(
        user = user,
        workspace = workspace,
        layout_uid = AndroidLayout.uid,
        placeholder_uid = AndroidMainPlaceholder.uid,
        plugin_uid = 'url_1x1',
        plugin_data = clean_extra_spaces("""{"url": "http://www.modelmayhem.com/95855", "image": "icon-camera",
            "external": true, "title": "Model Mayhem"}"""),
        position = 30 if mixed_order else 3
        )
    buf.append(dashboard_entry)

    # TinyMCE plugin
    dashboard_entry = DashboardEntry(
        user = user,
        workspace = workspace,
        layout_uid = AndroidLayout.uid,
        placeholder_uid = AndroidMainPlaceholder.uid,
        plugin_uid = 'tinymce_memo_3x3',
        plugin_data = clean_extra_spaces(
            '{\"text\": \"<p>Python is my personal (and primary) programming language of choice and also happens to '
            'be the primary programming language at my beloved company, Goldmund, Wyldebeast &amp; Wunderliebe. So, '
            'when starting to work with a new technology, I prefer to use a clean and easy (Pythonic!) API.<br />'
            '<br />After studying tons of articles on the web, reading (and writing) white papers, and doing basic '
            'performance tests (sometimes hard if you\'re on a tight schedule), my company recently selected '
            'Cloudera for our Big Data platform (including using Apache HBase as our data store for Apache '
            'Hadoop), with Cloudera Manager serving a role as \\\"one console to rule them all.\\\"...'
            '<a href=\\\"http://blog.cloudera.com/blog/2013/10/hello-starbase-a-python-wrapper-for-the-hbase-rest-api/\\\" '
            'target=\\\"_blank\\\">(read more)</a></p>\", \"title\": \"Starbase: A Python Wrapper for the HBase '
            'REST API\"}'
            ),
        position = 7 if mixed_order else 4
        )
    buf.append(dashboard_entry)

    # BigVideo plugin
    dashboard_entry = DashboardEntry(
        user = user,
        workspace = workspace,
        layout_uid = AndroidLayout.uid,
        placeholder_uid = AndroidMainPlaceholder.uid,
        plugin_uid = 'video_3x3',
        plugin_data = clean_extra_spaces("""{"url": "http://www.youtube.com/watch?v=8GVIui0JK0M",
            "title": "Test 3x3 video"}"""),
        position = 4 if mixed_order else 7
        )
    buf.append(dashboard_entry)

    # Memo plugin
    dashboard_entry = DashboardEntry(
        user = user,
        workspace = workspace,
        layout_uid = AndroidLayout.uid,
        placeholder_uid = AndroidMainPlaceholder.uid,
        plugin_uid = 'memo_2x2',
        plugin_data = clean_extra_spaces("""{"text": "(1) Dragging of widgets (within the Placeholder),
            (2) Reset dashboards triggers/hoocks, (3) Pre-defined template system for workspaces (with
            plugins in), (4) Copy/paste widgets between workspaces.", "title": "django-dash TODOs"}"""),
        position = 22
        )
    buf.append(dashboard_entry)

    # URL plugin
    dashboard_entry = DashboardEntry(
        user = user,
        workspace = workspace,
        layout_uid = AndroidLayout.uid,
        placeholder_uid = AndroidMainPlaceholder.uid,
        plugin_uid = 'url_1x1',
        plugin_data = clean_extra_spaces("""{"url": "https://github.com/barseghyanartur",
            "image": "icon-github", "external": true, "title": "GitHub"}"""),
        position = 27 if mixed_order else 24
        )
    buf.append(dashboard_entry)

    # LargeDummy plugin
    dashboard_entry = DashboardEntry(
        user = user,
        workspace = workspace,
        layout_uid = AndroidLayout.uid,
        placeholder_uid = AndroidMainPlaceholder.uid,
        plugin_uid = 'dummy_2x1',
        plugin_data = clean_extra_spaces("""{"text": "\u0531\u0578\u0582\u0581\u057f\u0585\u0580.
            \u0531\u0576\u057f\u0565 \u056b\u0561\u0581\u0578\u0582\u056c\u056b\u057d. \u0555\u0564\u056b\u0585
            \u0581\u0578\u0582\u0580\u0561\u0565. \u0554\u0578\u0582\u0561\u0574
            \u057a\u0580\u056b\u0574\u056b\u057d \u0570\u0568\u0574\u0565\u0576\u0561\u0565\u0585\u057d
            \u057a\u0565\u0576\u0561\u057f\u056b\u0562\u0578\u0582\u057d \u0561\u0578\u0582\u0563\u0578\u0582\u0565
            \u0578\u0582\u0580\u0576\u0561. \u053c\u056b\u057f\u0585\u0580\u0561
            \u0562\u056b\u0562\u0565\u0576\u0564\u0578\u0582\u0574 \u0576\u0578\u0582\u056c\u056c\u0561
            \u0586\u0561\u0578\u0582\u0581\u056b\u0562\u0578\u0582\u057d. \u0544\u0561\u057d\u057d\u0561...",
            "lipsum_max_chars": 130, "lipsum_language": "hy", "show_title": false, "generate_lipsum": true}"""),
        position = 25
        )
    buf.append(dashboard_entry)

    # URL plugin
    dashboard_entry = DashboardEntry(
        user = user,
        workspace = workspace,
        layout_uid = AndroidLayout.uid,
        placeholder_uid = AndroidMainPlaceholder.uid,
        plugin_uid = 'url_1x1',
        plugin_data = clean_extra_spaces("""{"url": "https://barseghyanartur.blogspot.com/", "image": "icon-info-sign",
            "external": true, "title": "Blogspot"}"""),
        position = 24 if mixed_order else 27
        )
    buf.append(dashboard_entry)

    # URL plugin
    dashboard_entry = DashboardEntry(
        user = user,
        workspace = workspace,
        layout_uid = AndroidLayout.uid,
        placeholder_uid = AndroidMainPlaceholder.uid,
        plugin_uid = 'url_1x1',
        plugin_data = clean_extra_spaces("""{"url": "https://bitbucket.org/barseghyanartur", "image": "icon-bitbucket",
            "external": true, "title": "BitBucket"}"""),
        position = 3 if mixed_order else 30
        )
    buf.append(dashboard_entry)

    # *********************************
    # *********************************
    # ***** Shortcuts placeholder *****
    # *********************************
    # *********************************

    # URL plugin
    dashboard_entry = DashboardEntry(
        user = user,
        workspace = workspace,
        layout_uid = AndroidLayout.uid,
        placeholder_uid = AndroidShortcutsPlaceholder.uid,
        plugin_uid = 'url_1x1',
        plugin_data = clean_extra_spaces("""{"url": "http://www.goldmund-wyldebeast-wunderliebe.com/",
            "image": "icon-thumbs-up", "external": true, "title": "Goldmund, Wyldebeast & Wunderliebe"}"""),
        position = 2 if mixed_order else 1
        )
    buf.append(dashboard_entry)

    # URL plugin
    dashboard_entry = DashboardEntry(
        user = user,
        workspace = workspace,
        layout_uid = AndroidLayout.uid,
        placeholder_uid = AndroidShortcutsPlaceholder.uid,
        plugin_uid = 'url_1x1',
        plugin_data = clean_extra_spaces("""{"url": "http://foreverchild.info/", "image": "icon-star",
            "external": true, "title": "Forever Child"}"""),
        position = 1 if mixed_order else 2
        )
    buf.append(dashboard_entry)

    # URL plugin
    dashboard_entry = DashboardEntry(
        user = user,
        workspace = workspace,
        layout_uid = AndroidLayout.uid,
        placeholder_uid = AndroidShortcutsPlaceholder.uid,
        plugin_uid = 'url_1x1',
        plugin_data = clean_extra_spaces("""
            {"url": "http://www.youtube.com/watch?v=gDyujx0BZSg&list=PLsn9xS2-yuBvKTsko_TPM16ebCiA1pHfZ",
            "image": "icon-youtube", "external": true, "title": "Cocteau Twins - Treasure"}"""),
        position = 3
        )
    buf.append(dashboard_entry)

    # Dummy plugin
    dashboard_entry = DashboardEntry(
        user = user,
        workspace = workspace,
        layout_uid = AndroidLayout.uid,
        placeholder_uid = AndroidShortcutsPlaceholder.uid,
        plugin_uid = 'dummy_1x1',
        plugin_data = clean_extra_spaces("""{"text": "", "lipsum_language": "en", "show_title": false,
            "generate_lipsum": false}"""),
        position = 4
        )
    buf.append(dashboard_entry)

    # URL plugin
    dashboard_entry = DashboardEntry(
        user = user,
        workspace = workspace,
        layout_uid = AndroidLayout.uid,
        placeholder_uid = AndroidShortcutsPlaceholder.uid,
        plugin_uid = 'url_1x1',
        plugin_data = clean_extra_spaces("""{"url": "http://www.youtube.com/watch?v=tiYr-464-Nc",
            "image": "icon-youtube", "external": true, "title": "Portishead - Third"}"""),
        position = 5
        )
    buf.append(dashboard_entry)

    # Dummy plugin
    dashboard_entry = DashboardEntry(
        user = user,
        workspace = workspace,
        layout_uid = AndroidLayout.uid,
        placeholder_uid = AndroidShortcutsPlaceholder.uid,
        plugin_uid = 'dummy_1x1',
        plugin_data = clean_extra_spaces("""{"text": "", "lipsum_language": "en", "show_title": false,
            "generate_lipsum": false}"""),
        position = 6
        )
    buf.append(dashboard_entry)

    # URL plugin
    dashboard_entry = DashboardEntry(
        user = user,
        workspace = workspace,
        layout_uid = AndroidLayout.uid,
        placeholder_uid = AndroidShortcutsPlaceholder.uid,
        plugin_uid = 'url_1x1',
        plugin_data = clean_extra_spaces("""{"url": "http://www.youtube.com/watch?v=7SFf2sQb4H4",
            "image": "icon-youtube", "external": true, "title": "Lais - Kanneke (tiens bien)"}"""),
        position = 7
        )
    buf.append(dashboard_entry)

    # LargeDummy portrait plugin
    dashboard_entry = DashboardEntry(
        user = user,
        workspace = workspace,
        layout_uid = AndroidLayout.uid,
        placeholder_uid = AndroidShortcutsPlaceholder.uid,
        plugin_uid = 'dummy_1x2',
        plugin_data = clean_extra_spaces("""{"text": "", "lipsum_language": "en", "show_title": false,
            "generate_lipsum": false}"""),
        position = 8
        )
    buf.append(dashboard_entry)

    # URL plugin
    dashboard_entry = DashboardEntry(
        user = user,
        workspace = workspace,
        layout_uid = AndroidLayout.uid,
        placeholder_uid = AndroidShortcutsPlaceholder.uid,
        plugin_uid = 'url_1x1',
        plugin_data = clean_extra_spaces("""	{"url": "http://www.youtube.com/watch?v=67JH3e7d1r4",
            "image": "icon-youtube", "external": true, "title": "Paradise Lost - Draconian Times"}"""),
        position = 10
        )
    buf.append(dashboard_entry)

    # Bulk insert
    DashboardEntry._default_manager.bulk_create(buf)


def create_news_and_rss_dashboard_entries(user, workspace):
    """
    Dashboard entries for news page.

    :param django.contrib.auth.models.User user:
    :param dash.models.DashboardWorkspace workspace:
    """
    buf = []

    # *********************************
    # *********************************
    # ***** Shortcuts placeholder *****
    # *********************************
    # *********************************

    # URL plugin
    dashboard_entry = DashboardEntry(
        user = user,
        workspace = workspace,
        layout_uid = AndroidLayout.uid,
        placeholder_uid = AndroidShortcutsPlaceholder.uid,
        plugin_uid = 'url_1x1',
        plugin_data = clean_extra_spaces("""{"url": "http://delusionalinsanity.com/portfolio/",
            "image": "icon-picture", "external": true, "title": "Delusional Insanity"}"""),
        position = 1
        )
    buf.append(dashboard_entry)

    # LargeDummy portrait plugin
    dashboard_entry = DashboardEntry(
        user = user,
        workspace = workspace,
        layout_uid = AndroidLayout.uid,
        placeholder_uid = AndroidShortcutsPlaceholder.uid,
        plugin_uid = 'dummy_1x2',
        plugin_data = clean_extra_spaces("""{"text": "", "lipsum_language": "en", "show_title": false,
            "generate_lipsum": false}"""),
        position = 2
        )
    buf.append(dashboard_entry)

    # LargeDummy portrait plugin
    dashboard_entry = DashboardEntry(
        user = user,
        workspace = workspace,
        layout_uid = AndroidLayout.uid,
        placeholder_uid = AndroidShortcutsPlaceholder.uid,
        plugin_uid = 'dummy_1x2',
        plugin_data = clean_extra_spaces("""{"text": "", "lipsum_language": "en", "show_title": false,
            "generate_lipsum": false}"""),
        position = 4
        )
    buf.append(dashboard_entry)

    # LargeDummy portrait plugin
    dashboard_entry = DashboardEntry(
        user = user,
        workspace = workspace,
        layout_uid = AndroidLayout.uid,
        placeholder_uid = AndroidShortcutsPlaceholder.uid,
        plugin_uid = 'dummy_1x2',
        plugin_data = clean_extra_spaces("""{"text": "", "lipsum_language": "en", "show_title": false,
            "generate_lipsum": false}"""),
        position = 6
        )
    buf.append(dashboard_entry)

    # LargeDummy portait plugin
    dashboard_entry = DashboardEntry(
        user = user,
        workspace = workspace,
        layout_uid = AndroidLayout.uid,
        placeholder_uid = AndroidShortcutsPlaceholder.uid,
        plugin_uid = 'dummy_1x2',
        plugin_data = clean_extra_spaces("""{"text": "", "lipsum_language": "en", "show_title": false,
            "generate_lipsum": false}"""),
        position = 8
        )
    buf.append(dashboard_entry)

    # *********************************
    # *********************************
    # ******** Main placeholder *******
    # *********************************
    # *********************************

    # News plugin
    dashboard_entry = DashboardEntry(
        user = user,
        workspace = workspace,
        layout_uid = AndroidLayout.uid,
        placeholder_uid = AndroidMainPlaceholder.uid,
        plugin_uid = 'news_4x5',
        plugin_data = clean_extra_spaces("""{"truncate_after": 35, "max_items": 5, "show_title": true,
            "cache_for": 3600}"""),
        position = 1
        )
    buf.append(dashboard_entry)

    # RSS feed plugin
    dashboard_entry = DashboardEntry(
        user = user,
        workspace = workspace,
        layout_uid = AndroidLayout.uid,
        placeholder_uid = AndroidMainPlaceholder.uid,
        plugin_uid = 'read_rss_feed_2x3',
        plugin_data = clean_extra_spaces("""{"custom_feed_title": "News feed", "truncate_after": 35,
            "feed_url": "http://foreverchild.info/rss/", "cache_for": 3600, "show_feed_title": true,
            "max_items": 6}"""),
        position = 5
        )
    buf.append(dashboard_entry)

    # LargeDummy plugin
    dashboard_entry = DashboardEntry(
        user = user,
        workspace = workspace,
        layout_uid = AndroidLayout.uid,
        placeholder_uid = AndroidMainPlaceholder.uid,
        plugin_uid = 'dummy_2x1',
        plugin_data = clean_extra_spaces("""{"text": "\u03a3\u03bfc\u03b9\u03b9\u03c3 \u03b5\u03b3\u03b5\u03c4
            \u03c4\u03b9\u03bdc\u03b9\u03b4\u03b8\u03bd\u03c4 \u03b1c,
            \u03c6\u03c1\u03b9\u03bd\u03b3\u03b9\u03bb\u03bb\u03b1 \u03b1c. V\u03b5 \u03b1\u03b8c\u03c4\u03bf\u03c1
            \u03b8\u03c4 \u03c0\u03c1\u03b1\u03b5\u03c3\u03b5\u03bd\u03c4 v\u03b1\u03c1\u03b9\u03b8\u03c3,
            \u03bf\u03c1\u03bd\u03b1\u03c1\u03b5 \u03bd\u03b5c, \u03b1\u03b8c\u03c4\u03bf\u03c1, \u03b1\u03b4,
            \u03bb\u03bf\u03c1\u03b5\u03bc c\u03bf\u03bd\u03b4\u03b9\u03bc\u03b5\u03bd\u03c4\u03b8\u03bc.
            \u03a0\u03bf\u03c4\u03b5\u03bd\u03c4\u03b9. \u0391\u03bb\u03b9q\u03b8\u03b1\u03bc.
            \u03a3\u03bf\u03bb\u03bb\u03b9c\u03b9\u03c4\u03b8\u03b4\u03b9\u03bd
            \u03b4\u03b9c\u03c4\u03b8\u03bc \u03b8\u03c4 \u03bd\u03bf\u03c3\u03c4\u03c1\u03b1 \u03b4\u03b9\u03c3.
            \u0391\u03bd\u03c4\u03b5 c\u03bf\u03bd\u03b8\u03b2\u03b9\u03b1 \u03c1\u03b8\u03c4\u03c1\u03b8\u03bc,
            \u03c0\u03b7\u03b1\u03c3\u03b5\u03bb\u03bb\u03b8\u03c3 ...", "lipsum_max_chars": 200,
            "lipsum_language": "el", "show_title": false, "generate_lipsum": true}"""),
        position = 23
        )
    buf.append(dashboard_entry)

    # LargeDummy plugin
    dashboard_entry = DashboardEntry(
        user = user,
        workspace = workspace,
        layout_uid = AndroidLayout.uid,
        placeholder_uid = AndroidMainPlaceholder.uid,
        plugin_uid = 'dummy_2x1',
        plugin_data = clean_extra_spaces("""{"text": "Quis inceptos. Urna libero tortor nonummy pretium. Lectus.
            Platea eu, ligula lacinia dis, parturient consequat. Nunc tempor pretium natoque cubilia nunc. Ligula
            at, nulla. Congue at. Mauris. Luctus...", "lipsum_max_chars": 200, "lipsum_language": "en",
            "show_title": false, "generate_lipsum": true}"""),
        position = 29
        )
    buf.append(dashboard_entry)

    # Bulk insert
    DashboardEntry._default_manager.bulk_create(buf)


class Command(BaseCommand):
    def handle(self, *args, **options):
        """
        Creates test data to fill the dashboard with.
        """
        try:
            create_dashboard_user()
        except Exception as e:
            pass

        user = User._default_manager.get(username=DASH_TEST_USER_USERNAME)

        # *********************************
        # Sync plugins.
        # *********************************
        call_command('dash_sync_plugins', verbosity=3, interactive=False)

        # *********************************
        # Create dashboard settings.
        # *********************************
        dashboard_settings = DashboardSettings(
            user = user,
            title = _("Test dashboard"),
            is_public = True
            )
        dashboard_settings.save()

        # ***********************************************
        # Create dashboard entries for default workspace
        # ***********************************************
        create_dashboard_entries(user=user)

        # **************************************************
        # Create dashboard workspace with regrouped entries
        # **************************************************
        dashboard_workspace = DashboardWorkspace(
            user = user,
            layout_uid = AndroidLayout.uid,
            name = _("Default workspace reordered"),
            slug = 'reordered-default-workspace',
            is_public = False
            )
        dashboard_workspace.save()

        # ********************************************************
        # Create dashboard entries for "Test workspace" workspace
        # ********************************************************
        create_dashboard_entries(user=user, workspace=dashboard_workspace, mixed_order=True)

        # *********************************************************
        # Create dashboard workspace for news and rss feed entries
        # *********************************************************
        dashboard_workspace = DashboardWorkspace(
            user = user,
            layout_uid = AndroidLayout.uid,
            name = _("News and RSS feed"),
            slug = 'news-and-rss-feed',
            is_public = False
            )
        dashboard_workspace.save()

        # ********************************************************
        # Create dashboard entries for "Test workspace" workspace
        # ********************************************************
        create_news_and_rss_dashboard_entries(user=user, workspace=dashboard_workspace)

########NEW FILE########
__FILENAME__ = models

########NEW FILE########
__FILENAME__ = manage
#!/usr/bin/env python
import os
import sys

if __name__ == "__main__":
    os.environ.setdefault("DJANGO_SETTINGS_MODULE", "settings")

    from django.core.management import execute_from_command_line

    execute_from_command_line(sys.argv)

########NEW FILE########
__FILENAME__ = settings
# Django settings for example project.
import os
PROJECT_DIR = lambda base : os.path.abspath(os.path.join(os.path.dirname(__file__), base).replace('\\','/'))
gettext = lambda s: s

DEBUG = False
DEBUG_TOOLBAR = False
TEMPLATE_DEBUG = DEBUG

ADMINS = (
    # ('Your Name', 'your_email@example.com'),
)

MANAGERS = ADMINS

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3', # Add 'postgresql_psycopg2', 'mysql', 'sqlite3' or 'oracle'.
        'NAME': PROJECT_DIR('../db/example.db'),                      # Or path to database file if using sqlite3.
        # The following settings are not used with sqlite3:
        'USER': '',
        'PASSWORD': '',
        'HOST': '',                      # Empty for localhost through domain sockets or '127.0.0.1' for localhost through TCP.
        'PORT': '',                      # Set to empty string for default.
    }
}

# Hosts/domain names that are valid for this site; required if DEBUG is False
# See https://docs.djangoproject.com/en/1.5/ref/settings/#allowed-hosts
ALLOWED_HOSTS = []

# Local time zone for this installation. Choices can be found here:
# http://en.wikipedia.org/wiki/List_of_tz_zones_by_name
# although not all choices may be available on all operating systems.
# In a Windows environment this must be set to your system time zone.
TIME_ZONE = 'America/Chicago'

# Language code for this installation. All choices can be found here:
# http://www.i18nguy.com/unicode/language-identifiers.html
#LANGUAGE_CODE = 'en-us'

LANGUAGES = (
    ('en', gettext("English")), # Main language!
    ('hy', gettext("Armenian")),
    ('nl', gettext("Dutch")),
    ('ru', gettext("Russian")),
)

SITE_ID = 1

# If you set this to False, Django will make some optimizations so as not
# to load the internationalization machinery.
USE_I18N = True

# If you set this to False, Django will not format dates, numbers and
# calendars according to the current locale.
USE_L10N = True

# If you set this to False, Django will not use timezone-aware datetimes.
USE_TZ = True

# Absolute filesystem path to the directory that will hold user-uploaded files.
# Example: "/var/www/example.com/media/"
MEDIA_ROOT = PROJECT_DIR(os.path.join('..', 'media'))

# URL that handles the media served from MEDIA_ROOT. Make sure to use a
# trailing slash.
# Examples: "http://example.com/media/", "http://media.example.com/"
MEDIA_URL = '/media/'

# Absolute path to the directory static files should be collected to.
# Don't put anything in this directory yourself; store your static files
# in apps' "static/" subdirectories and in STATICFILES_DIRS.
# Example: "/var/www/example.com/static/"
STATIC_ROOT = PROJECT_DIR(os.path.join('..', 'static'))

# URL prefix for static files.
# Example: "http://example.com/static/", "http://static.example.com/"
STATIC_URL = '/static/'

# Additional locations of static files
STATICFILES_DIRS = (
    # Put strings here, like "/home/html/static" or "C:/www/django/static".
    # Always use forward slashes, even on Windows.
    # Don't forget to use absolute paths, not relative paths.
    PROJECT_DIR(os.path.join('..', 'media', 'static')),
)

# List of finder classes that know how to find static files in
# various locations.
STATICFILES_FINDERS = (
    'django.contrib.staticfiles.finders.FileSystemFinder',
    'django.contrib.staticfiles.finders.AppDirectoriesFinder',
#    'django.contrib.staticfiles.finders.DefaultStorageFinder',
)

# Make this unique, and don't share it with anybody.
SECRET_KEY = '6sf18c*w971i8a-m^1coasrmur2k6+q5_kyn*)s@(*_dk5q3&r'

# List of callables that know how to import templates from various sources.
TEMPLATE_LOADERS = (
    'django.template.loaders.filesystem.Loader',
    'django.template.loaders.app_directories.Loader',
    'django.template.loaders.eggs.Loader',
)

MIDDLEWARE_CLASSES = (
    'django.contrib.sessions.middleware.SessionMiddleware',
    'localeurl.middleware.LocaleURLMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    # Uncomment the next line for simple clickjacking protection:
    # 'django.middleware.clickjacking.XFrameOptionsMiddleware',
)

ROOT_URLCONF = 'urls'

# Python dotted path to the WSGI application used by Django's runserver.
WSGI_APPLICATION = 'wsgi.application'

TEMPLATE_CONTEXT_PROCESSORS = (
    "django.contrib.auth.context_processors.auth",
    "django.core.context_processors.debug",
    "django.core.context_processors.i18n",
    "django.core.context_processors.media",
    "django.core.context_processors.static",
    "django.core.context_processors.tz",
    "django.contrib.messages.context_processors.messages",
    "django.core.context_processors.request"
)

TEMPLATE_DIRS = (
    # Put strings here, like "/home/html/django_templates" or "C:/www/django/templates".
    # Always use forward slashes, even on Windows.
    # Don't forget to use absolute paths, not relative paths.
    PROJECT_DIR('templates')
)

#FIXTURE_DIRS = (
#   PROJECT_DIR(os.path.join('..', 'fixtures'))
#)

INSTALLED_APPS = (
    # Admin dashboard
    'admin_tools',
    'admin_tools.menu',

    # Django core and contrib apps
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.sites',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'django.contrib.admin',
    'django.contrib.sitemaps',

    # Third party apps used in the project
    'south', # Database migration app
    'tinymce', # TinyMCE
    'registration', # Auth views and registration app
    'easy_thumbnails', # Thumbnailer
    'localeurl', # Locale URL
    'slim', # Multi-lingual models app

    # Dash core, contrib layouts and apps
    'dash', # Dash core
    'dash.contrib.layouts.android', # Android layout for Dash
    'dash.contrib.layouts.bootstrap2', # Bootstrap 2 layouts for Dash
    'dash.contrib.layouts.windows8', # Windows 8 layout for Dash
    'dash.contrib.plugins.dummy', # Dummy (testing) plugin for Dash
    'dash.contrib.plugins.memo', # Memo plugin for Dash
    'dash.contrib.plugins.image', # Image plugin for Dash
    'dash.contrib.plugins.news', # Sample news plugin for Dash
    'dash.contrib.plugins.rss_feed', # RSS feed plugin for Dash
    'dash.contrib.plugins.url', # URL plugin for Dash
    'dash.contrib.plugins.video', # Video plugin for Dash
    'dash.contrib.plugins.weather', # Weather plugin for Dash
    'dash.contrib.apps.public_dashboard', # Public dashboard app for Dash

    # Other project specific apps
    #'admin_tools_dashboard', # Admin dashboard
    'foo', # Test app
    'bar', # Another test app
)

LOGIN_REDIRECT_URL = '/dashboard/'
LOGIN_URL = '/accounts/login/'
LOGIN_ERROR_URL = '/accounts/login/'
LOGOUT_URL = '/accounts/logout/'

# localeurl locale independent paths (language code won't be appended)
LOCALE_INDEPENDENT_PATHS = (
    r'^/sitemap.*\.xml$', # Global regex for all XML sitemaps
    #r'^/administration/',
    #r'^/dashboard/',
)

# Tell localeurl to use sessions for language store.
LOCALEURL_USE_SESSION = True

# Tell slim to use localised language names
SLIM_USE_LOCAL_LANGUAGE_NAMES = True

# django-admin-tools custom dashboard
ADMIN_TOOLS_MENU = 'admin_tools_dashboard.menu.CustomMenu'

ACCOUNT_ACTIVATION_DAYS = 2
#REGISTRATION_TEMPLATE_DIR = PROJECT_DIR('templates/registration')

# A sample logging configuration. The only tangible logging
# performed by this configuration is to send an email to
# the site admins on every HTTP 500 error when DEBUG=False.
# See http://docs.djangoproject.com/en/dev/topics/logging for
# more details on how to customize your logging configuration.
LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'filters': {
        'require_debug_false': {
            '()': 'django.utils.log.RequireDebugFalse'
        }
    },
    'formatters': {
        'verbose': {
            'format': '%(levelname)s %(asctime)s [%(pathname)s:%(lineno)s] %(message)s'
        },
        'simple': {
            'format': '%(levelname)s %(message)s'
        },
    },
    'handlers': {
        'mail_admins': {
            'level': 'ERROR',
            'filters': ['require_debug_false'],
            'class': 'django.utils.log.AdminEmailHandler'
        },
        'console': {
            'level': 'DEBUG',
            'class': 'logging.StreamHandler',
            'formatter': 'verbose'
        },
        'django_log': {
            'level':'DEBUG',
            'class':'logging.handlers.RotatingFileHandler',
            'filename': PROJECT_DIR("../logs/django.log"),
            'maxBytes': 1048576,
            'backupCount': 99,
            'formatter': 'verbose',
        },
        'dash_log': {
            'level':'DEBUG',
            'class':'logging.handlers.RotatingFileHandler',
            'filename': PROJECT_DIR("../logs/dash.log"),
            'maxBytes': 1048576,
            'backupCount': 99,
            'formatter': 'verbose',
        },
    },
    'loggers': {
        'django': {
            'handlers': ['django_log'],
            'level': 'ERROR',
            'propagate': True,
        },
        'dash': {
            'handlers': ['console', 'dash_log'],
            'level': 'DEBUG',
            'propagate': True,
        },
    },
}

# Do not put any settings below this line
try:
    from local_settings import *
except:
    pass

if DEBUG and DEBUG_TOOLBAR:
    # debug_toolbar
    MIDDLEWARE_CLASSES += (
        'debug_toolbar.middleware.DebugToolbarMiddleware',
	)

    INSTALLED_APPS += (
        'debug_toolbar',
    )

    DEBUG_TOOLBAR_CONFIG = {
        'INTERCEPT_REDIRECTS': False,
    }

########NEW FILE########
__FILENAME__ = urls
from django.conf.urls import patterns, include, url

from django.conf import settings
from django.contrib import admin
from django.contrib.staticfiles.urls import staticfiles_urlpatterns
from django.conf.urls.static import static
from django.views.generic import TemplateView

admin.autodiscover()

urlpatterns = patterns('',
    # django-dash URLs:
    url(r'^dashboard/', include('dash.urls')),

    # django-dash RSS contrib plugin URLs:
    url(r'^dash/contrib/plugins/rss-feed/', include('dash.contrib.plugins.rss_feed.urls')),

    # django-dash News contrib plugin URLs:
    url(r'^dash/contrib/plugins/news/', include('dash.contrib.plugins.news.urls')),

    # Uncomment the admin/doc line below to enable admin documentation:
    # url(r'^admin/doc/', include('django.contrib.admindocs.urls')),

    # Uncomment the next line to enable the admin:
    url(r'^administration/', include(admin.site.urls)),

    # django-registration URLs:
    (r'^accounts/', include('registration.backends.default.urls')),

    url(r'^$', TemplateView.as_view(template_name='home.html')),

    # django-dash public dashboards contrib app:
    url(r'^', include('dash.contrib.apps.public_dashboard.urls')),
)

if settings.DEBUG:
    urlpatterns += staticfiles_urlpatterns()
    urlpatterns += static(settings.MEDIA_URL, document_root=settings.MEDIA_ROOT)

########NEW FILE########
__FILENAME__ = wsgi
"""
WSGI config for example project.

This module contains the WSGI application used by Django's development server
and any production WSGI deployments. It should expose a module-level variable
named ``application``. Django's ``runserver`` and ``runfcgi`` commands discover
this application via the ``WSGI_APPLICATION`` setting.

Usually you will have the standard Django WSGI application here, but it also
might make sense to replace the whole Django WSGI application with a custom one
that later delegates to the Django one. For example, you could introduce WSGI
middleware here, or combine a Django application with an application of another
framework.

"""
import os

# We defer to a DJANGO_SETTINGS_MODULE already in the environment. This breaks
# if running multiple sites in the same mod_wsgi process. To fix this, use
# mod_wsgi daemon mode with each site in its own daemon process, or use
# os.environ["DJANGO_SETTINGS_MODULE"] = "example.settings"
os.environ.setdefault("DJANGO_SETTINGS_MODULE", "example.settings")

# This application object is used by any WSGI server configured to use this
# file. This includes Django's development server, if the WSGI_APPLICATION
# setting points here.
from django.core.wsgi import get_wsgi_application
application = get_wsgi_application()

# Apply WSGI middleware here.
# from helloworld.wsgi import HelloWorldApplication
# application = HelloWorldApplication(application)

########NEW FILE########
__FILENAME__ = admin
__author__ = 'Artur Barseghyan <artur.barseghyan@gmail.com>'
__copyright__ = 'Copyright (c) 2013 Artur Barseghyan'
__license__ = 'GPL 2.0/LGPL 2.1'

from django.contrib import admin
from django.contrib.admin import helpers
from django.utils.translation import ugettext_lazy as _
from django.contrib.admin.views.decorators import staff_member_required
from django.utils.decorators import method_decorator
from django.conf.urls import patterns, url
from django.shortcuts import render_to_response, redirect
from django.template import RequestContext
from django.contrib import messages

from dash.models import DashboardWorkspace, DashboardEntry, DashboardPlugin, DashboardSettings
from dash.forms import BulkChangeDashboardPluginsForm
from dash.constants import ACTION_CHOICE_REPLACE

staff_member_required_m = method_decorator(staff_member_required)

# *********************************************************
# ************************ Admin helpers ******************
# *********************************************************

def bulk_change_dashboard_plugins(modeladmin, request, queryset):
    """
    Bulk change of dashboard plugins action additional view. Data is changed in
    ``DashboardPluginAdmin.bulk_change_dashboard_plugins`` method.
    """
    opts = modeladmin.model._meta
    app_label = opts.app_label

    selected = request.POST.getlist(admin.ACTION_CHECKBOX_NAME)
    post = dict(request.POST)
    if selected:
        post['selected_dashboard_plugins'] = ','.join(selected)
    if 'POST' == request.method:
        form = BulkChangeDashboardPluginsForm(
            data = post,
            files = request.FILES,
            initial={'selected_dashboard_plugins': ','.join(selected)}
            )
    else:
        form = BulkChangeDashboardPluginsForm(initial={'selected_dashboard_plugins': ','.join(selected)})

    context = {
        'form': form,
        'app_label': app_label,
        'opts': opts,
        'action_checkbox_name': helpers.ACTION_CHECKBOX_NAME,
    }
    return render_to_response(
        'dash/admin/bulk_change_dashboard_plugins.html', context, context_instance=RequestContext(request)
        )

# *********************************************************
# *********************************************************

class DashboardWorkspaceAdmin(admin.ModelAdmin):
    """
    Dashboard workspace admin.
    """
    list_display = ('name', 'slug', 'layout_uid', 'position', 'user', 'is_public')
    list_editable = ('position',)
    list_filter = ('layout_uid', 'is_public')
    readonly_fields = ('slug',)
    fieldsets = (
        (None, {
            'fields': ('name', 'position', 'is_public')
        }),
        (_("User"), {
            'fields': ('user',)
        }),
        (_('Additional'), {
            'classes': ('collapse',),
            'fields': ('slug',)
        }),
    )

    class Meta:
        app_label = _('Dashboard workspace')


admin.site.register(DashboardWorkspace, DashboardWorkspaceAdmin)

# *********************************************************

class DashboardEntryAdmin(admin.ModelAdmin):
    """
    Dashboard entry admin.
    """
    list_display = ('plugin_uid', 'plugin_uid_code', 'plugin_data', 'layout_uid', 'placeholder_uid', 'position',
                    'workspace', 'user')
    list_filter = ('user', 'workspace', 'layout_uid', 'placeholder_uid', 'plugin_uid')
    list_editable = ('position',)
    readonly_fields = ('plugin_uid_code',)
    fieldsets = (
        (None, {
            'fields': ('plugin_uid', 'plugin_data', 'layout_uid', 'placeholder_uid', 'position', 'workspace')
        }),
        (_("User"), {
            'fields': ('user',)
        }),
    )

    class Meta:
        app_label = _('Dashboard entry')

    def queryset(self, request):
        queryset = super(DashboardEntryAdmin, self).queryset(request)
        queryset = queryset.select_related('workspace', 'user')
        return queryset


admin.site.register(DashboardEntry, DashboardEntryAdmin)

# *********************************************************

class DashboardPluginAdmin(admin.ModelAdmin):
    """
    Dashboard plugin admin.
    """
    list_display = ('plugin_uid_admin', 'users_list', 'groups_list')
    readonly_fields = ('plugin_uid', 'plugin_uid_admin')
    fieldsets = (
        (None, {
            'fields': ('plugin_uid', 'users', 'groups')
        }),
    )
    filter_horizontal = ('users', 'groups',)
    actions = [bulk_change_dashboard_plugins]

    class Meta:
        app_label = _('Dashboard plugin')

    def queryset(self, request):
        queryset = super(DashboardPluginAdmin, self).queryset(request)
        queryset = queryset.prefetch_related('users', 'groups')
        return queryset

    @staff_member_required_m
    def bulk_change_dashboard_plugins(self, request):
        """
        This is where the data is actually processed.
        """
        if 'POST' == request.method:
            form_cls = BulkChangeDashboardPluginsForm
            form = form_cls(
                data = request.POST,
                files = request.FILES
                )
            if form.is_valid():
                ids = form.cleaned_data.pop('selected_dashboard_plugins').split(',')
                users = form.cleaned_data.pop('users')
                groups = form.cleaned_data.pop('groups')
                users_action = form.cleaned_data.pop('users_action')
                groups_action = form.cleaned_data.pop('groups_action')
                cleaned_data = dict((key, val) for (key, val) in form.cleaned_data.iteritems() if val is not None)

                # Queryset to work with
                queryset = DashboardPlugin._default_manager.filter(pk__in=ids)

                # Update simple fields
                updated = queryset.update(**cleaned_data)

                # Update groups
                for dashboard_plugin in queryset:
                    # If groups action chose is ``replace``, clearing the groups first.
                    if groups_action == ACTION_CHOICE_REPLACE:
                        dashboard_plugin.groups.clear()

                    # If users action chose is ``replace``, clearing the users first.
                    if users_action == ACTION_CHOICE_REPLACE:
                        dashboard_plugin.users.clear()

                    dashboard_plugin.groups.add(*groups) # Adding groups
                    dashboard_plugin.users.add(*users) # Adding users

                messages.info(request, _('{0} Dashboard plugins were changed successfully.').format(len(ids)))
                return redirect('admin:dash_dashboardplugin_changelist')
        else:
            messages.warning(request, _('POST required when changing in bulk!'))
            return redirect('admin:dash_dashboardplugin_changelist')

    def get_urls(self):
        my_urls = patterns('',
            # Bulk change dashboard plugins
            url(r'^bulk-change-dashboard-plugins/$', self.bulk_change_dashboard_plugins,
                name='bulk_change_dashboard_plugins'),
        )
        return my_urls + super(DashboardPluginAdmin, self).get_urls()


admin.site.register(DashboardPlugin, DashboardPluginAdmin)

# *********************************************************

class DashboardSettingsAdmin(admin.ModelAdmin):
    """
    Dashboard plugin admin.
    """
    list_display = ('title', 'user', 'layout_uid', 'is_public')
    #readonly_fields = ('plugin_uid',)
    fieldsets = (
        (None, {
            'fields': ('title', 'user', 'layout_uid', 'is_public')
        }),
    )

    class Meta:
        app_label = _('Dashboard settings')

    def queryset(self, request):
        queryset = super(DashboardSettingsAdmin, self).queryset(request)
        queryset = queryset.select_related('user')
        return queryset


admin.site.register(DashboardSettings, DashboardSettingsAdmin)

########NEW FILE########
__FILENAME__ = base
"""
All `uids` are supposed to be pythonic function names (see
PEP http://www.python.org/dev/peps/pep-0008/#function-names).
"""
__title__ = 'dash.base'
__author__ = 'Artur Barseghyan <artur.barseghyan@gmail.com>'
__copyright__ = 'Copyright (c) 2013 Artur Barseghyan'
__license__ = 'GPL 2.0/LGPL 2.1'
__all__ = (
    'BaseDashboardLayout', 'BaseDashboardPlaceholder', 'BaseDashboardPlugin',
    'BaseDashboardPluginWidget', 'layout_registry', 'plugin_widget_registry',
    'get_registered_plugins', 'get_registered_plugin_uids', 'validate_plugin_uid',
    'get_registered_layouts', 'get_registered_layout_uids', 'get_layout',
    'validate_placeholder_uid', 'plugin_registry', 'ensure_autodiscover',
    'DashboardPluginFormBase', 'collect_widget_media'
    )

import copy
import uuid
import json

from six import text_type, PY3

from django.forms import ModelForm
from django.forms.util import ErrorList
from django.http import Http404
from django.template.loader import render_to_string
from django.utils.encoding import force_text

from dash.discover import autodiscover
from dash.exceptions import LayoutDoesNotExist
from dash.settings import (
    ACTIVE_LAYOUT, LAYOUT_CELL_UNITS, DEBUG, DEFAULT_PLACEHOLDER_VIEW_TEMPLATE_NAME,
    DEFAULT_PLACEHOLDER_EDIT_TEMPLATE_NAME
    )
from dash.exceptions import InvalidRegistryItemType
from dash.helpers import iterable_to_dict, uniquify_sequence

import logging
logger = logging.getLogger(__name__)

_ = lambda s: s

class DashboardPluginFormBase(object):
    """
    Not a form actually. Defined for magic only.

    :property iterable plugin_data_fields: Fields to get when calling the ``get_plugin_data`` method. These
        field will be JSON serialized. All other fields, even if they are part of the form, won't be.
        Make sure all fields are serializable. If some of them aren't, override the ``save_plugin_data``
        method and make them serializable there. See `dash.contrib.plugins.image.forms` as a good example.

    :example:

        >>> plugin_data_fields = (
        >>>    ('name', ''),
        >>>    ('active': False)
        >>> )
    """
    plugin_data_fields = None

    def _get_plugin_data(self, fields, request=None):
        """
        Gets plugin data.

        :param iterable fields: List of tuples to iterate.
        :param django.http.HttpRequest request:
        :return string: JSON dumpled string.
        """
        data = {}

        for field, default_value in fields:
            data.update({field: self.cleaned_data.get(field)})
        return json.dumps(data)

    def get_plugin_data(self, request=None):
        """
        Data that would be saved in the ``plugin_data`` field of the ``dash.models.DashboardEntry``
        subclassed model.

        :param django.http.HttpRequest request:
        """
        if self.plugin_data_fields:
            return self._get_plugin_data(self.plugin_data_fields, request=request)

    def save_plugin_data(self, request=None):
        """
        Dummy, but necessary.
        """


class BaseDashboardLayout(object):
    """
    Base layout.

    Layouts consist of placeholders.

    :Properties:
        - `uid` (string): Layout unique identifier (globally).
        - `name` (string): Layout name.
        - `description` (string): Layout description.
        - `placeholders` (iterable): Iterable (list, tuple or set) of `dash.base.BaseDashboardPlaceholder`
           subclasses.
        - `view_template_name` (string): Temlate used to render the layout (view).
        - `edit_template_name` (string): Template used to render the layout (edit).
        - `form_snippet_template_name` (string): Template used to render the forms.
        - `html_classes` (string): Extra HTML class that layout should get.
        - `cell_units` (string):
        - `media_css` (list): List all specific stylesheets.
        - `media_js` (list): List all specific javascripts.
    """
    uid = None
    name = None
    description = None
    placeholders = []
    view_template_name = None
    view_template_name_ajax = None
    edit_template_name = None
    edit_template_name_ajax = None
    form_snippet_template_name = 'dash/snippets/generic_form_snippet.html'
    html_classes = []
    cell_units = None # Most likely, it makes sense to define this on a layout level. Think of it.
    media_css = []
    media_js = []

    def __init__(self, user=None):
        """
        :param django.contrib.auth.models.User user:
        """
        assert self.uid
        assert self.name
        assert self.view_template_name
        assert self.edit_template_name
        assert self.placeholders
        assert self.cell_units and self.cell_units in LAYOUT_CELL_UNITS
        assert isinstance(self.media_js, (list, tuple))
        assert isinstance(self.media_css, (list, tuple))

        if isinstance(self.media_js, tuple):
            self.media_js = list(self.media_js)

        if isinstance(self.media_css, tuple):
            self.media_css = list(self.media_css)

        self.placeholders_dict = {}
        self.placeholder_uids = []
        for placeholder in self.placeholders:
            self.placeholders_dict.update({placeholder.uid: placeholder})
            self.placeholder_uids.append(placeholder.uid)

        self.user = user
        self.widget_media_js = []
        self.widget_media_css = []

    def get_view_template_name(self, request=None, origin=None):
        """
        Gets the view template name.

        :param django.http.HttpRequest request:
        :param string origin: Origin of the request. Hook to provide custom templates for apps.
            Example value: 'public_dashboard'. Take the `public_dashboard` app as example.
        """
        if not self.view_template_name_ajax:
            return self.view_template_name
        elif request and request.is_ajax():
            return self.view_template_name_ajax
        else:
            return self.view_template_name

    def get_edit_template_name(self, request=None):
        if not self.edit_template_name_ajax:
            return self.edit_template_name
        elif request and request.is_ajax():
            return self.edit_template_name_ajax
        else:
            return self.edit_template_name

    def get_placeholder(self, uid, default=None):
        return self.placeholders_dict.get(uid, default)

    def get_placeholders(self, request=None):
        """
        Gets the list of placeholders registered for the layout.

        :param django.http.HttpRequest request:
        :return itetable: List of placeholder classes. Override in your layout if you need a custom behaviour.
        """
        return self.placeholders

    def get_placeholder_uids(self, request=None):
        """
        Gets the list of placeholder uids.

        :param django.http.HttpRequest request:
        :return list:
        """
        uids = []
        for placeholder in self.placeholders:
            uids.append(placeholder.uid)
        return uids

    def collect_widget_media(self, dashboard_entries):
        """
        Collects the widget media files.

        :param iterable dashboard_entries: Iterable of ``dash.models.DashboardEntry`` instances.
        :return list:
        """
        widget_media = collect_widget_media(dashboard_entries)

        if widget_media:
            self.widget_media_js, self.widget_media_css = widget_media['js'], widget_media['css']

    def get_media_css(self):
        """
        Gets all CSS media files (for the layout + plugins).

        :return list:
        """
        media_css = self.media_css[:]
        if self.widget_media_css:
            media_css += self.widget_media_css

        media_css = uniquify_sequence(media_css)

        return media_css

    def get_media_js(self):
        """
        Gets all JavaScript media files (for the layout + plugins).

        :return list:
        """
        media_js = self.media_js[:]
        if self.widget_media_js:
            media_js += self.widget_media_js

        media_js = uniquify_sequence(media_js)

        return media_js

    def get_grouped_dashboard_entries(self, dashboard_entries):
        """
        Gets dashboard entries grouped by placeholder.

        :param iterable dashboard_entries: Iterable of `dash.models.DashboardEntry` objects.
        :return list:
        """
        entries = {}

        if not dashboard_entries:
            return entries

        for dashboard_entry in dashboard_entries:
            if not dashboard_entry.placeholder_uid in entries:
                entries[dashboard_entry.placeholder_uid] = []
            entries[dashboard_entry.placeholder_uid].append(dashboard_entry)

        return entries

    def get_placeholder_instances(self, dashboard_entries=None, workspace=None, request=None):
        """
        Gets placeholder instances.

        :param iterable dashboard_entries: Iterable of `dash.models.DashboardEntry` objects.
        :param django.http.HttpRequest request:
        :return list: List of `dash.base.BaseDashboardPlaceholder` subclassed instances.
        """
        entries = self.get_grouped_dashboard_entries(dashboard_entries)

        placeholder_instances = []

        for placeholder_cls in self.get_placeholders(request):

            placeholder = placeholder_cls(self)
            placeholder.request = request
            placeholder.workspace = workspace
            if entries:
                placeholder.dashboard_entries = entries.get(placeholder_cls.uid, None)

            placeholder_instances.append(placeholder)

        return placeholder_instances

    @property
    def primary_html_class(self):
        return 'layout-{0}'.format(self.uid)

    @property
    def html_class(self):
        """
        Class used in the HTML.

        :return string:
        """
        return '{0} {1}'.format(self.primary_html_class, ' '.join(self.html_classes))

    def get_css(self, placeholders):
        """
        Gets placeholder specific css.

        :param iterable placeholders: Iterable of `dash.base.BaseDashboardPlaceholder` subclassed instances.
        :return string:
        """
        css = []
        for placeholder in placeholders:
            css.append(placeholder.css)
        return '\n'.join(css)

    def render_for_view(self, dashboard_entries=None, workspace=None, request=None):
        """
        Renders the layout.

        NOTE: This is not used at the moment. You most likely want the `dash.views.dashboard` view.

        :param iterable dashboard_entries:
        :param string workspace: Current workspace.
        :param django.http.HttpRequest request:
        :return string:
        """
        placeholders = self.get_placeholder_instances(dashboard_entries, workspace, request)
        context = {
            'placeholders': placeholders,
            'placeholders_dict': iterable_to_dict(placeholders, key_attr_name='uid'),
            'request': request,
            'css': self.get_css(placeholders)
        }
        return render_to_string(self.get_view_template_name(request), context)

    def render_for_edit(self, dashboard_entries=None, workspace=None, request=None):
        """
        Renders the layout.

        NOTE: This is not used at the moment. You most likely want the `dash.views.edit_dashboard` view.

        :param iterable dashboard_entries:
        :param string workspace: Current workspace.
        :param django.http.HttpRequest request:
        :return string:
        """
        placeholders = self.get_placeholder_instances(dashboard_entries, workspace, request)
        context = {
            'placeholders': placeholders,
            'placeholders_dict': iterable_to_dict(placeholders, key_attr_name='uid'),
            'request': request,
            'css':  self.get_css(placeholders)
        }
        return render_to_string(self.get_edit_template_name(request), context)


class BaseDashboardPlaceholder(object):
    """
    Base placeholder.

    :Properties:
        - `uid` (string): Unique identifier (shouldn't repeat within a single layout).
        - `cols` (int): Number of cols in the placeholder.
        - `rows` (int): Number of rows in the placeholder.
        - `cell_width` (int): Single cell (1x1) width.
        - `cell_height` (int): Single cell (1x1) height.
        - `cell_margin_top` (int): Top margin of a single cell.
        - `cell_margin_right` (int): Right margin of a single cell.
        - `cell_margin_bottom` (int): Bottom margin of a single cell.
        - `cell_margin_left` (int): Left margin of a single cell.
        - `view_template_name` (string): Template to be used for rendering the placeholder in view mode.
        - `edit_template_name` (string): Template to be used for rendering the placeholder in edit mode.
        - `html_classes` (string): Extra HTML class that layout should get.
    """
    uid = None
    cols = None #1
    rows = None #8
    cell_width = None #100
    cell_height = None #100
    cell_margin_top = 0
    cell_margin_right = 0
    cell_margin_bottom = 0
    cell_margin_left = 0
    view_template_name = ''
    edit_template_name = ''
    html_classes = []

    def __init__(self, layout):
        assert self.uid
        assert self.rows
        assert self.cols
        assert self.cell_width
        assert self.cell_height

        self.layout = layout
        self.dashboard_entries = None
        self.request = None

    @property
    def cell_units(self):
        return self.layout.cell_units

    @property
    def html_id(self):
        """
        ID used in the HTML. Unique.

        :return string:
        """
        return 'id_{0}'.format(self.uid)

    @property
    def primary_html_class(self):
        return 'placeholder-{0}'.format(self.uid)

    @property
    def html_class(self):
        """
        Class used in the HTML.

        :return string:
        """
        return '{0} {1}'.format(self.primary_html_class, ' '.join(self.html_classes))

    def get_view_template_name(self):
        return self.view_template_name if self.view_template_name else DEFAULT_PLACEHOLDER_VIEW_TEMPLATE_NAME

    def get_edit_template_name(self):
        return self.edit_template_name if self.edit_template_name else DEFAULT_PLACEHOLDER_EDIT_TEMPLATE_NAME

    def load_dashboard_entries(self, dashboard_entries=None):
        """
        Feed the dashboard entries to the layout for rendering later.

        :param iterable dashboard_entries: Iterable of `dash.models.DashboardEntry` objects.
        """
        self.dashboard_entries = dashboard_entries

    def render_for_view(self):
        """
        Renders the placeholder for view mode.

        :return string:
        """
        context = {
            'placeholder': self,
            'dashboard_entries': self.dashboard_entries,
            'request': self.request,
            'workspace': self.workspace
        }
        return render_to_string(self.get_view_template_name(), context)

    def _generate_widget_cells(self):
        """
        Generates widget cells. Returns a list of tuples, where the first element represents the cell class
        and the second element represents the cell position.

        :param string workspace: Current workspace slug.
        :param django.http.HttpRequest request:
        :return list:
        """
        empty_cells = []
        position = 1
        for row in range(1, self.rows + 1):
            for col in range(1, self.cols + 1):
                empty_cells.append(('col-{0} row-{1}'.format(col, row), position))
                position += 1
        return empty_cells

    def render_for_edit(self):
        """
        Renders the placeholder for edit mode.

        :param string workspace: Current workspace slug.
        :param django.http.HttpRequest request:
        :return string:
        """
        context = {
            'placeholder': self,
            'dashboard_entries': self.dashboard_entries,
            'request': self.request,
            'workspace': self.workspace,
            'widget_cells': self._generate_widget_cells()
        }
        return render_to_string(self.get_edit_template_name(), context)

    def get_cell_width(self):
        """
        Gets a single cell width, with respect to margins.

        :return int:
        """
        return self.cell_margin_left + self.cell_margin_right + self.cell_width

    def get_cell_height(self):
        """
        Gets a single cell height, with respect to margins.

        :return int:
        """
        return self.cell_margin_top + self.cell_margin_bottom + self.cell_height

    def widget_inner_width(self, cols):
        """
        The inner width of the widget to be rendered.
        """
        return (self.get_cell_width() * cols) - self.cell_margin_left - self.cell_margin_right

    def widget_inner_height(self, rows):
        """
        The inner height of the widget to be rendered.

        :return int:
        """
        return (self.get_cell_height() * rows) - self.cell_margin_top - self.cell_margin_bottom

    @property
    def css(self):
        """
        CSS styles for the placeholders and plugins. The placeholder dimensions as well as columns sizes,
        should be handled here. Since we are in a placeholder and a placeholder has a defined number of
        rows and columns and each reneder has just a fixed amount of rows and columns defined, we can
        render the top left corners generic css classes.

        Cells do NOT have margins or paddings. This is essential (since all the plugins are positioned
        absolutely). If you want to have padding in your plugin widget, specify the `plugin-content-wrapper`
        class style in your specific layout/theme.

        :example:

            .placeholder .plugin .plugin-content-wrapper {
                padding: 5px;
            }

        :return string:
        """
        def placeholder_width():
            """
            Placeholder width.

            :return string:
            """
            return '{0}{1}'.format(self.cols * self.get_cell_width(), self.cell_units)

        def placeholder_height():
            """
            Placeholder height.

            :return string:
            """
            return '{0}{1}'.format(self.rows * self.get_cell_height(), self.cell_units)

        def plugin_width():
            """
            Default width of a plugin widget (1 cell).

            :return string:
            """
            return '{0}{1}'.format(self.cell_width, self.cell_units)

        def plugin_height():
            """
            Default height of a plugin widget (1 cell).

            :return string:
            """
            return '{0}{1}'.format(self.cell_height, self.cell_units)

        def plugin_positions():
            """
            Plugin positions depending on the row and cell occupied. All plugins are positioned absolutely.
            Based on the row, we use `margin-top` and `margin-left` to position a plugin.

            ..:Used CSS classes:
                - `row-1`, `row-2`, etc.
                - `col-1`, `col-2`, etc.

            :return string:
            """
            positions = []
            for row_num in range(0, self.rows):
                s = """
                    .placeholder.{placeholder_class} .empty-widget-cell.row-{row_num},
                    .placeholder.{placeholder_class} .plugin.row-{row_num} {{
                        margin-top: {top};
                    }}
                    """.format(
                    placeholder_class = self.primary_html_class,
                    row_num = (row_num + 1),
                    top = '{0}{1}'.format(self.get_cell_height() * row_num, self.cell_units)
                )
                positions.append(s)

            for col_num in range(0, self.cols):
                s = """
                    .placeholder.{placeholder_class} .empty-widget-cell.col-{col_num},
                    .placeholder.{placeholder_class} .plugin.col-{col_num} {{
                        margin-left: {left};
                    }}
                    """.format(
                    placeholder_class = self.primary_html_class,
                    col_num = (col_num + 1),
                    left = '{0}{1}'.format(self.get_cell_width() * col_num, self.cell_units)
                )
                positions.append(s)

            return '\n'.join(positions)

        def plugin_sizes():
            """
            Plugin size based on its' `rows` and `cols` properties.
                
            ..:Used CSS classes:
                - `width-1`, `width-2`, etc.
                - `height-1`, `height-2`, etc.

            :return string:
            """
            sizes = []
            for row_num in range(0, self.rows):
                s = """
                    .placeholder.{placeholder_class} .plugin.height-{row_num} {{
                        height: {height};
                    }}
                    """.format(
                    placeholder_class = self.primary_html_class,
                    row_num = (row_num + 1),
                    height = '{0}{1}'.format(
                        #(self.get_cell_height() * (row_num + 1)) - self.cell_margin_top - self.cell_margin_bottom,
                        self.widget_inner_height(row_num + 1),
                        self.cell_units
                        )
                )
                sizes.append(s)

            for col_num in range(0, self.cols):
                s = """
                    .placeholder.{placeholder_class} .plugin.width-{col_num} {{
                        width: {width};
                    }}
                    """.format(
                        placeholder_class = self.primary_html_class,
                        col_num = (col_num + 1),
                        width = '{0}{1}'.format(
                            #(self.get_cell_width() * (col_num + 1)) - self.cell_margin_left - self.cell_margin_right,
                            self.widget_inner_width(col_num + 1),
                            self.cell_units
                            )
                    )
                sizes.append(s)

            return '\n'.join(sizes)

        def empty_cell_size():
            """
            CSS for empty cell size.
            """
            s = """
            .placeholder.{placeholder_class} .empty-widget-cell {{
                width: {width};
                height: {height};
                line-height: {height};
            }}
            """.format(
                placeholder_class = self.primary_html_class,
                width = '{0}{1}'.format(self.cell_width, self.cell_units),
                height = '{0}{1}'.format(self.cell_height, self.cell_units)
            )
            return s

        css = """
        .placeholder.{placeholder_class} {{
            width: {placeholder_width};
            height: {placeholder_height};
        }}

        .placeholder.{placeholder_class} .plugin {{
            width: {plugin_width};
            height: {plugin_height};
        }}

        {plugin_positions}

        {plugin_sizes}

        {empty_cell_sizes}
        """.format(
            placeholder_class = self.primary_html_class,
            placeholder_width = placeholder_width(),
            placeholder_height = placeholder_height(),
            plugin_width = plugin_width(),
            plugin_height = plugin_height(),
            plugin_positions = plugin_positions(),
            plugin_sizes = plugin_sizes(),
            empty_cell_sizes = empty_cell_size()
        )

        return css


class DashboardPluginDataStorage(object):
    """
    Storage for plugin data.
    """


class BaseDashboardPlugin(object):
    """
    Base dashboard plugin from which every plugin should inherit.

    :Properties:
        - `uid` (string): Plugin uid (obligatory). Example value: 'dummy', 'wysiwyg', 'news'.
        - `name` (string): Plugin name (obligatory). Example value: 'Dummy plugin',
          'WYSIWYG', 'Latest news'.
        - `description` (string): Plugin decription (optional). Example value: 'Dummy plugin used just for testing'.
        - `help_text` (string): Plugin help text (optional). This text would be shown in
            ``dash.views.add_dashboard_entry`` and ``dash.views.edit_dashboard_entry`` views.
        - `form`: Plugin form (optional). A subclass of ``django.forms.Form``. Should be given
          in case plugin is configurable.
        - `add_form_template` (str) (optional): Add form template (optional). If given, overrides the
          `dash.views.add_dashboard_entry` default template.
        - `edit_form_template` (string): Edit form template (optional). If given, overrides the
          `dash.views.edit_dashboard_entry` default template.
        - `html_classes` (list): List of extra HTML classes for the plugin.
        - `group` (string): Plugin are grouped under the specified group. Override in your plugin if necessary.
    """
    uid = None
    name = None
    description = None
    help_text = None
    form = None
    add_form_template = None
    edit_form_template = None
    html_classes = []
    group = _("General")

    def __init__(self, layout_uid, placeholder_uid, workspace=None, user=None, position=None):
        """
        :param string placeholder_uid: Unique identifier of plugin placeholder (layout.placeholder).
        :param dash.models.DashboardWorkspace workspace: Plugin workspace.
        :param django.contrib.auth.models.User user: Plugin owner.
        """
        # Making sure all necessary properties are defined.
        try:
            assert self.uid
            assert self.name
        except Exception as e:
            raise NotImplementedError(
                "You should define `uid` and `name` properties in your `{0}.{1}` class.".format(
                    self.__class__.__module__, self.__class__.__name__
                    )
                )

        layout_cls = layout_registry.get(layout_uid, None)
        self.layout = layout_cls() if layout_cls else None

        placeholder_cls = self.layout.get_placeholder(placeholder_uid)
        self.placeholder = placeholder_cls(self.layout) if placeholder_cls else None

        if not (self.layout and self.placeholder):
            raise Exception(
                "Invalid placeholder value {0} in your `{1}.{2}` class.".format(
                    placeholder_uid, self.__class__.__module__, self.__class__.__name__
                    )
                )

        self.layout_uid = layout_uid
        self.placeholder_uid = placeholder_uid
        self.workspace = workspace
        self.user = user
        self.position = position

        # Some initial values
        self.request = None

        self.data = DashboardPluginDataStorage()

        self._html_id = 'p{0}'.format(uuid.uuid4())

    @property
    def html_id(self):
        return self._html_id

    def get_position(self):
        """
        Gets the exact position of the plugin widget in the placeholder (row number, col number).

        :return tuple: Tuple of row and col numbers.
        """
        col = self.position % self.placeholder.cols
        row = int(self.position / self.placeholder.cols) + (1 if col > 0 else 0)
        if col == 0:
            col = self.placeholder.cols

        return (row, col)

    @property # Comment the @property if something goes wrong.
    def html_class(self):
        """
        A massive work on positioning the plugin and having it to be displayed in a given width is
        done here. We should be getting the plugin widget for the plugin given and based on its'
        properties (static!) as well as on plugin position (which we have from model), we can show
        the plugin with the exact class.
        """
        try:
            widget = self.get_widget()

            html_class = ['plugin-{0} {1} {2}'.format(self.uid, widget.html_class, ' '.join(self.html_classes))]

            html_class.append('width-{0}'.format(widget.cols))
            html_class.append('height-{0}'.format(widget.rows))

            row, col = self.get_position()
            html_class.append('row-{0}'.format(row))
            html_class.append('col-{0}'.format(col))

            return ' '.join(html_class)
        except Exception as e:
            logger.debug(str(e))

    def process(self, plugin_data=None, fetch_related_data=False):
        """
        Init plugin with data.
        """
        try:
            # Calling pre-processor.
            self.pre_processor()

            if plugin_data:
                try:
                    # Trying to load the plugin data to JSON.
                    plugin_data = json.loads(plugin_data)

                    # If a valid JSON object, feed it to our plugin and process the data. The
                    # ``process_data`` method should be defined in your subclassed plugin class.
                    if plugin_data:
                        self.load_plugin_data(plugin_data)

                        self.process_plugin_data(fetch_related_data=fetch_related_data)
                except Exception as e:
                    if DEBUG:
                        logger.debug(str(e))

            # Calling the post processor.
            self.post_processor()

            return self
        except Exception as e:
            if DEBUG:
                logger.debug(str(e))

    def load_plugin_data(self, plugin_data):
        """
        Loads the plugin data saved in ``dash.models.DashboardEntry``. Plugin data is saved in JSON
        string.

        :param string plugin_data: JSON string with plugin data.
        """
        self.plugin_data = plugin_data

    def _process_plugin_data(self, fields, fetch_related_data=False):
        """
        Process the plugin data. Override if need customisations.

        Beware, this is not always called.
        """
        for field, default_value in fields:
            try:
                setattr(self.data, field, self.plugin_data.get(field, default_value))
            except Exception as e:
                setattr(self.data, field, default_value)

    def process_plugin_data(self, fetch_related_data=False):
        """
        Processes the plugin data.
        """
        form = self.get_form()

        return self._process_plugin_data(form.plugin_data_fields, fetch_related_data=fetch_related_data)

    def _get_plugin_form_data(self, fields):
        """
        Gets plugin data.

        :param iterable fields: List of tuples to iterate.
        :return dict:
        """
        form_data = {}
        for field, default_value in fields:
            try:
                form_data.update({field: self.plugin_data.get(field, default_value)})
            except Exception as e:
                if DEBUG:
                    logger.debug(e)
        return form_data

    def get_plugin_form_data(self):
        """
        Fed as ``initial`` argument to the plugin form when initialising the instance for adding or
        editing the plugin. Override in your plugin class if you need customisations.
        """
        form = self.get_form()

        return self._get_plugin_form_data(form.plugin_data_fields)

    def get_instance(self):
        return None

    def get_form(self):
        """
        Get the plugin form class. Override this method in your subclassed ``dash.base.DashboardPlugin``
        class when you need your plugin setup to vary depending on the placeholder, workspace, user or
        request given. By default returns the value of the ``form`` attribute defined in your plugin.

        :return django.forms.Form|django.forms.ModelForm: Subclass of ``django.forms.Form`` or
            ``django.forms.ModelForm``.
        """
        return self.form

    def get_initialised_create_form(self, data=None, files=None):
        """
        Used ``dash.views.add_dashboard_entry`` view to gets initialised form for object to be created.
        """
        plugin_form = self.get_form()
        if plugin_form:
            try:
                plugin_form = self.get_form()
                if plugin_form:
                    return plugin_form(data=data, files=files)
            except Exception as e:
                if DEBUG:
                    logger.debug(e)
                raise Http404(e)

    def get_initialised_create_form_or_404(self, data=None, files=None):
        """
        Same as ``get_initialised_create_form`` but raises ``django.http.Http404`` on errors.
        """
        plugin_form = self.get_form()
        if plugin_form:
            try:
                return self.get_initialised_create_form(data=data, files=files)
            except Exception as e:
                if DEBUG:
                    logger.debug(e)
                raise Http404(e)

    def get_initialised_edit_form(self, data=None, files=None, auto_id='id_%s', prefix=None, \
                                  initial=None, error_class=ErrorList, label_suffix=':', \
                                  empty_permitted=False, instance=None):
        """
        Used in ``dash.views.edit_dashboard_entry`` view.
        """
        plugin_form = self.get_form()
        if plugin_form:
            kwargs = {
                'data': data,
                'files': files,
                'auto_id': auto_id,
                'prefix': prefix,
                'initial': initial,
                'error_class': error_class,
                'label_suffix': label_suffix,
                'empty_permitted': empty_permitted
            }
            if issubclass(plugin_form, ModelForm):
                kwargs.update({'instance': instance})
            return plugin_form(**kwargs)

    def get_initialised_edit_form_or_404(self, data=None, files=None, auto_id='id_%s', prefix=None, \
                                         error_class=ErrorList, label_suffix=':', empty_permitted=False):
        """
        Same as ``get_initialised_edit_form`` but raises ``django.http.Http404`` on errors.
        """
        plugin_form = self.get_form()
        if plugin_form:
            try:
                return self.get_initialised_edit_form(
                    data=data, files=files, auto_id=auto_id, prefix=prefix,
                    initial=self.get_plugin_form_data(), error_class=error_class,
                    label_suffix=label_suffix, empty_permitted=empty_permitted,
                    instance=self.get_instance()
                    )
            except Exception as e:
                if DEBUG:
                    logger.debug(e)
                raise Http404(e)

    def get_widget(self, request=None, as_instance=False):
        """
        Gets the plugin widget.

        :param django.http.HttpRequest request:
        :param bool as_instance:
        :return mixed: Subclass of `dash.base.BaseDashboardPluginWidget` or instance of subclassed
            `dash.base.BaseDashboardPluginWidget` object.
        """
        widget_cls = plugin_widget_registry.get(
            PluginWidgetRegistry.namify(self.layout.uid, self.placeholder.uid, self.uid)
            )

        if not as_instance:
            return widget_cls
        elif widget_cls:
            widget = widget_cls(self)
            return widget

    def render(self, request=None):
        """
        Renders the plugin HTML (for dashboard workspace).

        :param django.http.HttpRequest request:
        :return string:
        """
        widget_cls = self.get_widget()

        if widget_cls:
            widget = widget_cls(self)

            render = widget.render(request=request)
            return render or ''
        elif DEBUG:
            logger.debug("No widget defined for {0}.{1}.{2}".format(self.layout.uid, self.placeholder.uid, self.uid))

    def _update_plugin_data(self, dashboard_entry):
        """
        For private use. Do not override this method. Override `update_plugin_data` instead.
        """
        try:
            updated_plugin_data = self.update_plugin_data(dashboard_entry)
            plugin_data = self.get_updated_plugin_data(update=updated_plugin_data)
            return self.save_plugin_data(dashboard_entry, plugin_data=plugin_data)
        except Exception as e:
            logging.debug(str(e))

    def update_plugin_data(self, dashboard_entry):
        """
        Used in ``dash.management.commands.dash_update_plugin_data``.

        Some plugins would contain data fetched from various sources (models, remote data). Since dashboard 
        entries are by definition loaded extremely much, you are advised to store as much data as possible in
        ``plugin_data`` field of ``dash.models.DashboardEntry``. Some externally fetched data becomes invalid
        after some time and needs updating. For that purpose, in case if your plugin needs that, redefine this
        method in your plugin. If you need your data to be periodically updated, add a cron-job which would 
        run ``dash_update_plugin_data`` management command (see
        ``dash.management.commands.dash_update_plugin_data`` module).

        :param dash.models.DashboardEntry: Instance of ``dash.models.DashboardEntry``.
        :return dict: Should return a dictionary containing data of fields to be updated.
        """

    def _delete_plugin_data(self):
        """
        For private use. Do not override this method. Override `delete_plugin_data` instead.
        """
        try:
            self.delete_plugin_data()
        except Exception as e:
            logging.debug(str(e))

    def delete_plugin_data(self):
        """
        Used in ``dash.views.delete_dashboard_entry``. Fired automatically, when ``dash.models.DashboardEntry``
        object is about to be deleted. Make use of it if your plugin creates database records or files that are
        not monitored externally but by dash only.
        """

    def _clone_plugin_data(self, dashboard_entry):
        """
        For private use. Do not override this method. Override `clone_plugin_data` instead.
        """
        try:
            return self.clone_plugin_data(dashboard_entry)
        except Exception as e:
            logging.debug(str(e))

    def clone_plugin_data(self, dashboard_entry):
        """
        Used when copying entries. If any objects or files are created by plugin, they should be
        cloned.

        :param dash.models.DashboardEntry: Instance of ``dash.models.DashboardEntry``.
        :return string: JSON dumped string of the cloned plugin data. The returned value
            would be inserted as is into the `dash.models.DashboardEntry.plugin_data`
            field.
        """

    def get_cloned_plugin_data(self, update={}):
        """
        Get the cloned plugin data and returns it in a JSON dumped format.

        :param dict update:
        :return string: JSON dumped string of the cloned plugin data.

        :example:

        In the ``get_cloned_plugin_data`` method of your plugin, do as follows:

        >>> def clone_plugin_data(self, dashboard_entry):
        >>>     cloned_image = clone_file(self.data.image, relative_path=True)
        >>>     return self.get_cloned_plugin_data(update={'image': cloned_image})
        """
        form = self.get_form()

        cloned_data = copy.copy(self.data)
        data = {}

        for field, default_value in form.plugin_data_fields:
            data.update({field: getattr(cloned_data, field, '')})

        for prop, value in update.items():
            data.update({prop: value})

        return json.dumps(data)

    def get_updated_plugin_data(self, update={}):
        """
        Get the plugin data and returns it in a JSON dumped format.

        :param dict update:
        :return string: JSON dumped string of the cloned plugin data.
        """
        form = self.get_form()
        data = {}

        for field, default_value in form.plugin_data_fields:
            data.update({field: getattr(self.data, field, '')})

        for prop, value in update.items():
            data.update({prop: value})

        return json.dumps(data)

    def pre_processor(self):
        """
        Redefine in your subclassed plugin when necessary.

        Pre process plugin data (before rendering). This method is being called before the data has been
        loaded into the plugin.
        
        Note, that request (django.http.HttpRequest) is available (self.request).
        """

    def post_processor(self):
        """
        Redefine in your subclassed plugin when necessary.

        Post process plugin data here (before rendering). This methid is being called after the data has been
        loaded into the plugin.
        
        Note, that request (django.http.HttpRequest) is available (self.request).
        """

    def save_plugin_data(self, dashboard_entry, plugin_data):
        """
        Save plugin data. Used in bulk update plugin data.

        :param dash.models.DashboardEntry dashboard_entry:
        :param dict plugin_data:
        :return bool: True if all went well.
        """
        try:
            if plugin_data:
                dashboard_entry.plugin_data = plugin_data
                dashboard_entry.save()
                return True
        except Exception as e:
            logger.debug(str(e))


class MetaBaseDashboardPluginWidget(type):
    """
    Meta class for ``dash.base.BaseDashboardPluginWidget``.
    """
    @property
    def html_class(cls):
        """
        HTML class of the ``dash.base.BaseDashboardPluginWidget``.

        :return string:
        """
        return ' '.join(cls.html_classes)


class ClassProperty(property):
    def __get__(self, cls, owner):
        return classmethod(self.fget).__get__(None, owner)()
classproperty = ClassProperty


class BaseDashboardPluginWidget(object):
    """
    Base plugin widget.

    So, if we would want to register a plugin widget (renderer) for some layout, we would first define the
    plugin widget and then just write:

        >>> plugin_widget_registry.register(DummyPluginWidget)

    Plugin widget is always being registered for a placeholder. Placeholder in its' turn has number of
    rows and columns. Since we register each widget for a (layout, placeholder, plugin) combination
    separately, it fits the needs and requirements perfectly. In that way we are able to tell, wheither
    plugin has a widget available and actually valid (qua dimensions) for the placeholder. Plugin is
    just data. Nothing more. Widget operates with that data. Thus, widget has number of rows and
    columns it occupies in the placeholder registered. By default, number of rows and columns is set to
    1, which means that a plugin occupies just 1 cell. But, certainly, there can be plugins that occupy
    more space in a placeholder.
    """
    layout_uid = None
    placeholder_uid = None
    plugin_uid = None
    cols = 1
    rows = 1
    html_classes = []
    media_js = []
    media_css = []

    def __init__(self, plugin):
        assert self.layout_uid and self.layout_uid == plugin.layout.uid
        assert self.placeholder_uid and self.placeholder_uid in plugin.layout.placeholder_uids
        assert self.plugin_uid and self.plugin_uid in get_registered_plugin_uids()
        assert hasattr(self, 'render') and callable(self.render)
        assert self.cols
        assert self.rows
        assert isinstance(self.media_js, (list, tuple))
        assert isinstance(self.media_css, (list, tuple))

        if isinstance(self.media_js, tuple):
            self.media_js = list(self.media_js)

        if isinstance(self.media_css, tuple):
            self.media_css = list(self.media_css)

        self.plugin = plugin

    def render(self, request=None):
        return ''

    @classproperty
    def html_class(cls):
        """
        HTML class of the ``dash.base.BaseDashboardPluginWidget``.

        :return string:
        """
        return ' '.join(cls.html_classes)

    def get_width(self):
        """
        Gets widget width.

        :return int:
        """
        return self.plugin.placeholder.widget_inner_width(self.cols)

    def get_height(self):
        """
        Gets widget height.

        :return int:
        """
        return self.plugin.placeholder.widget_inner_height(self.rows)

    def get_size(self, delta_width=0, delta_height=0):
        """
        Gets widget size.
        
        :param int delta_width:
        :param int delta_height:
        :return tuple:
        """
        return (
            (self.cols * self.plugin.placeholder.get_cell_width()) + delta_width,
            (self.rows * self.plugin.placeholder.get_cell_height()) + delta_height
        )


class BaseRegistry(object):
    """
    Registry of dash plugins. It's essential, that class registered has the ``uid`` property.
    """
    type = None

    def __init__(self):
        assert self.type
        self._registry = {}
        self._forced = []

    def register(self, cls, force=False):
        """
        Registers the plugin in the registry.

        :param mixed.
        """
        if not issubclass(cls, self.type):
            raise InvalidRegistryItemType("Invalid item type `{0}` for registry `{1}`".format(cls, self.__class__))

        # If item has not been forced yet, add/replace its' value in the registry
        if force:

            if not cls.uid in self._forced:
                self._registry[cls.uid] = cls
                self._forced.append(cls.uid)
                return True
            else:
                return False

        else:

            if cls.uid in self._registry:
                return False
            else:
                self._registry[cls.uid] = cls
                return True

    def unregister(self, cls):
        if not issubclass(cls, self.type):
            raise InvalidRegistryItemType("Invalid item type `{0}` for registry `{1}`".format(cls, self.__class__))

        # Only non-forced items are allowed to be unregistered.
        if cls.uid in self._registry and not cls.uid in self._forced:
            self._registry.pop(cls.uid)
            return True
        else:
            return False

    def get(self, uid, default=None):
        """
        Gets the given entry from the registry.

        :param string uid:
        :return mixed.
        """
        item = self._registry.get(uid, default)
        if not item:
            logger.debug("Can't find plugin with uid `{0}` in `{1}` registry".format(uid, self.__class__))
        return item


class PluginRegistry(BaseRegistry):
    """
    Plugin registry.
    """
    type = BaseDashboardPlugin


class LayoutRegistry(BaseRegistry):
    """
    Layout registry.
    """
    type = BaseDashboardLayout


class PluginWidgetRegistry(object):
    """
    Registry of dash plugins widgets (renderers).
    """
    type = BaseDashboardPluginWidget

    def __init__(self):
        assert self.type
        self._registry = {}
        self._forced = []

    @staticmethod
    def namify(layout, placeholder, plugin_uid):
        return '{0}.{1}.{2}'.format(layout, placeholder, plugin_uid)

    def register(self, cls, force=False):
        """
        Registers the plugin renderer in the registry.

        :param dash.base.BasePluginRenderer cls: Subclass of `dash.base.BasePluginRenderer`.
        """
        if not issubclass(cls, self.type):
            raise InvalidRegistryItemType("Invalid item type `{0}` for registry `{1}`".format(cls, self.__class__))

        uid = PluginWidgetRegistry.namify(cls.layout_uid, cls.placeholder_uid, cls.plugin_uid)

        # If item has not been forced yet, add/replace its' value in the registry
        if force:

            if not uid in self._forced:
                self._registry[uid] = cls
                self._forced.append(uid)
                return True
            else:
                return False

        else:

            if uid in self._registry:
                return False
            else:
                self._registry[uid] = cls
                return True

    def unregister(self, cls):
        if not issubclass(cls, self.type):
            raise InvalidRegistryItemType("Invalid item type `{0}` for registry `{1}`".format(cls, self.__class__))

        uid = PluginWidgetRegistry.namify(cls.layout_uid, cls.placeholder_uid, cls.plugin_uid)

        # Only non-forced items are allowed to be unregistered.
        if uid in self._registry and not uid in self._forced:
            self._registry.pop(uid)
            return True
        else:
            return False

    def get(self, uid, default=None):
        """
        Gets the given entry from the registry.

        :param string uid:
        :return mixed.
        """
        item = self._registry.get(uid, default)
        if not item:
            logger.debug("Can't find plugin with uid `{0}` in `{1}` registry".format(uid, self.__class__))
        return item


# Register plugins by calling plugin_registry.register()
plugin_registry = PluginRegistry()

# Register layouts by calling layout_registry.register()
layout_registry = LayoutRegistry()

# Register of plugin widgets.
plugin_widget_registry = PluginWidgetRegistry()

def ensure_autodiscover():
    """
    Ensures that plugins are autodiscovered.
    """
    if not (plugin_registry._registry and layout_registry._registry and plugin_widget_registry._registry):
        autodiscover()

def get_registered_plugins():
    """
    Gets a list of registered plugins in a form if tuple (plugin name, plugin description). If not yet
    autodiscovered, autodiscovers them.

    :return list:
    """
    ensure_autodiscover()

    registered_plugins = []

    for uid, plugin in plugin_registry._registry.items():
        if PY3:
            plugin_name = force_text(plugin.name, encoding='utf-8')
        else:
            plugin_name = force_text(plugin.name, encoding='utf-8').encode('utf-8')
        registered_plugins.append((uid, plugin_name))

    return registered_plugins

def get_registered_plugin_uids():
    """
    Gets a list of registered plugin uids as a list . If not yet autodiscovered, autodiscovers them.

    :return list:
    """
    ensure_autodiscover()

    registered_plugins = []

    for uid, plugin in plugin_registry._registry.items():
        registered_plugins.append(uid)
    return registered_plugins

def validate_placeholder_uid(layout, placeholder_uid):
    """
    Validates the placeholder.

    :param string layout_uid:
    :param string placeholder_uid:
    :return bool:
    """
    return placeholder_uid in layout.placeholder_uids

def validate_plugin_uid(plugin_uid):
    """
    Validates the plugin uid.

    :param string plugin_uid:
    :return bool:
    """
    return plugin_uid in get_registered_plugin_uids()

def get_registered_layouts():
    """
    Gets registered layouts.
    """
    ensure_autodiscover()

    registered_layouts = []

    for uid, layout in layout_registry._registry.items():
        if PY3:
            layout_name = force_text(layout.name, encoding='utf-8')
        else:
            layout_name = force_text(layout.name, encoding='utf-8').encode('utf-8')
        registered_layouts.append((uid, layout_name))

    return registered_layouts

def get_registered_layout_uids():
    """
    Gets uids of registered layouts.
    """
    return layout_registry._registry.keys()

def get_layout(layout_uid=None, as_instance=False):
    """
    Gets the layout by ``layout_uid`` given. If left empty, takes the default one chosen in settings.

    Raises a ``dash.exceptions.NoActiveLayoutChosen`` when no default layout could be found.

    :return dash.base.BaseDashboardLayout: Sublcass of `dash.base.BaseDashboardLayout`.
    """
    ensure_autodiscover()

    if not layout_uid:
        layout_uid = ACTIVE_LAYOUT

    layout_cls = layout_registry.get(layout_uid, None)
    if not layout_cls:
        raise LayoutDoesNotExist(_("Layout `{0}` does not exist!").format(layout_uid))

    if as_instance:
        return layout_cls()

    return layout_cls

def collect_widget_media(dashboard_entries):
    """
    Collects the widget media for dashboard entries given.

    :param iterable dashboard_entries: Iterable of ``dash.models.DashboardEntry`` instances.
    :return dict: Returns a dict containing the 'js' and 'css' keys. Correspondent values of those keys are
        lists containing paths to the CSS and JS media files.
    """
    media_js = []
    media_css = []
    for dashboard_entry in dashboard_entries:
        widget_cls = plugin_widget_registry.get(
            PluginWidgetRegistry.namify(
                dashboard_entry.layout_uid, dashboard_entry.placeholder_uid, dashboard_entry.plugin_uid
                )
        )
        if widget_cls:
            media_js += widget_cls.media_js
            media_css += widget_cls.media_css
        else:
            logger.debug("widget_cls empty for dashboard entry {0}".format(dashboard_entry.__dict__))
    return {'js': media_js, 'css': media_css}

########NEW FILE########
__FILENAME__ = conf
__author__ = 'Artur Barseghyan <artur.barseghyan@gmail.com>'
__copyright__ = 'Copyright (c) 2013 Artur Barseghyan'
__license__ = 'GPL 2.0/LGPL 2.1'
__all__ = ('get_setting',)

from django.conf import settings

from dash import defaults

def get_setting(setting, override=None):
    """
    Get a setting from `dash` conf module, falling back to the default.

    If override is not None, it will be used instead of the setting.

    :param setting: String with setting name
    :param override: Value to use when no setting is available. Defaults to None.
    :return: Setting value.
    """
    if override is not None:
        return override
    if hasattr(settings, 'DASH_{0}'.format(setting)):
        return getattr(settings, 'DASH_{0}'.format(setting))
    else:
        return getattr(defaults, setting)

########NEW FILE########
__FILENAME__ = constants
__title__ = 'dash.constants'
__author__ = 'Artur Barseghyan <artur.barseghyan@gmail.com>'
__copyright__ = 'Copyright (c) 2013 Artur Barseghyan'
__license__ = 'GPL 2.0/LGPL 2.1'
__all__ = ('ACTION_CHOICE_REPLACE', 'ACTION_CHOICE_APPEND', 'ACTION_CHOICES')

from django.utils.translation import ugettext_lazy as _

ACTION_CHOICE_REPLACE = '1'
ACTION_CHOICE_APPEND = '2'
ACTION_CHOICES = (
    (ACTION_CHOICE_APPEND, _("Append")),
    (ACTION_CHOICE_REPLACE, _("Replace")),
)
########NEW FILE########
__FILENAME__ = urls
from django.conf.urls import patterns, url

urlpatterns = patterns('dash.contrib.apps.public_dashboard.views',
    # View public dashboard workspace.
    url(r'^(?P<username>[\w_\-]+)/(?P<workspace>[\w_\-]+)/$', view='public_dashboard', name='dash.public_dashboard'),

    # View public dashboard (no workspace selected == default workspace used).
    url(r'^(?P<username>[\w_\-]+)/$', view='public_dashboard', name='dash.public_dashboard'),
)

########NEW FILE########
__FILENAME__ = views
__author__ = 'Artur Barseghyan <artur.barseghyan@gmail.com>'
__copyright__ = 'Copyright (c) 2013 Artur Barseghyan'
__license__ = 'GPL 2.0/LGPL 2.1'
__all__ = ('public_dashboard',)

import logging
logger = logging.getLogger(__name__)

from django.http import Http404
from django.template import RequestContext
from django.shortcuts import render_to_response, redirect
from django.db.models import Q
from django.utils.translation import ugettext_lazy as _
from django.contrib import messages

from dash.base import get_layout
from dash.models import DashboardEntry
from dash.utils import get_user_plugins, get_workspaces, get_dashboard_settings
from dash.helpers import iterable_to_dict

def public_dashboard(request, username, workspace=None, template_name='public_dashboard/public_dashboard.html'):
    """
    Public dashboard.

    :param django.http.HttpRequest:
    :param string username:
    :param string workspace: Workspace slug.
    :param string template_name:
    :return django.http.HttpResponse:
    """
    # Getting dashboard settings for the user. Then get users' layout.
    dashboard_settings = get_dashboard_settings(username)
    if dashboard_settings:
        layout = get_layout(layout_uid=dashboard_settings.layout_uid, as_instance=True)
        user = dashboard_settings.user
    else:
        raise Http404

    # Getting the list of plugins that user is allowed to use.
    registered_plugins = get_user_plugins(user)
    user_plugin_uids = [uid for uid, repr in registered_plugins]

    logger.debug(user_plugin_uids)

    # A complex query required. All entries shall be taken from default dashboard (no workspace) and
    # joined with all entries of workspaces set to be public. Getting the (frozen) queryset.
    if workspace:
        entries_q = Q(
            user = user,
            layout_uid = layout.uid,
            workspace__slug = workspace,
            workspace__is_public = True,
            plugin_uid__in = user_plugin_uids
            )
    else:
        entries_q = Q(user=user, layout_uid=layout.uid, workspace=None)

    dashboard_entries = DashboardEntry._default_manager \
                                      .filter(entries_q) \
                                      .select_related('workspace', 'user') \
                                      .order_by('placeholder_uid', 'position')[:]

    #logger.debug(dashboard_entries)

    placeholders = layout.get_placeholder_instances(dashboard_entries, request=request)

    layout.collect_widget_media(dashboard_entries)

    context = {
        'placeholders': placeholders,
        'placeholders_dict': iterable_to_dict(placeholders, key_attr_name='uid'),
        'css': layout.get_css(placeholders),
        'layout': layout,
        'user': user,
        'master_template': layout.get_view_template_name(request, origin='dash.public_dashboard'),
        'dashboard_settings': dashboard_settings
    }

    workspaces = get_workspaces(user, layout.uid, workspace, public=True)

    # If workspace with slug given is not found in the list of workspaces
    # redirect to the default dashboard.
    if workspaces['current_workspace_not_found']:
        messages.info(
            request,
            _('The workspace with slug "{0}" does not exist.').format(workspace)
            )
        return redirect('dash.public_dashboard', username=username)

    context.update(workspaces)

    return render_to_response(template_name, context, context_instance=RequestContext(request))

########NEW FILE########
__FILENAME__ = dash_layouts
__author__ = 'Artur Barseghyan <artur.barseghyan@gmail.com>'
__copyright__ = 'Copyright (c) 2013 Artur Barseghyan'
__license__ = 'GPL 2.0/LGPL 2.1'
__all__ = ('AndroidLayout',)

from dash.base import BaseDashboardLayout, BaseDashboardPlaceholder, layout_registry


class AndroidMainPlaceholder(BaseDashboardPlaceholder):
    """
    Main placeholder.
    """
    uid = 'main'
    cols = 6
    rows = 5
    cell_width = 150
    cell_height = 110


class AndroidShortcutsPlaceholder(BaseDashboardPlaceholder):
    """
    Shortcuts placeholder.
    """
    uid = 'shortcuts'
    cols = 1
    rows = 10
    cell_width = 60
    cell_height = 55


class AndroidLayout(BaseDashboardLayout):
    """
    Android layout.
    """
    uid = 'android'
    name = 'Android'
    view_template_name = 'android/view_layout.html'
    edit_template_name = 'android/edit_layout.html'
    placeholders = [AndroidMainPlaceholder, AndroidShortcutsPlaceholder]
    cell_units = 'px'
    media_css = (
        'css/dash_dotted_borders.css',
        'css/dash_layout_android.css',
    )
    #media_js = ('js/dash_layout_android.js',)


layout_registry.register(AndroidLayout)

########NEW FILE########
__FILENAME__ = dash_plugins
from dash.base import plugin_widget_registry
from dash.factory import plugin_widget_factory
from dash.contrib.plugins.dummy.dash_widgets import BaseDummyWidget
from dash.contrib.plugins.image.dash_widgets import BaseImageWidget
from dash.contrib.plugins.memo.dash_widgets import BaseMemoWidget, BaseTinyMCEMemoWidget
from dash.contrib.plugins.news.dash_widgets import BaseNewsWidget
from dash.contrib.plugins.rss_feed.dash_widgets import BaseReadRSSFeedWidget
from dash.contrib.plugins.video.dash_widgets import BaseVideoWidget
from dash.contrib.plugins.weather.dash_widgets import BaseWeatherWidget

from dash.contrib.layouts.android.dash_widgets import (
    URL1x1AndroidMainWidget, URL1x1AndroidShortcutWidget, BaseBookmarkAndroidWidget
    )

# **************************************************************************
# **************************************************************************
# ************************** Registering the widgets ***********************
# **************************************************************************
# **************************************************************************

# **************************************************************************
# ******************* Registering widgets for Dummy plugin *****************
# **************************************************************************

main_sizes = (
    (1, 1),
    (1, 2),
    (2, 1),
    (3, 3),
)
shortcut_sizes = (
    (1, 1),
    (1, 2),
)
plugin_widget_factory(BaseDummyWidget, 'android', 'main', 'dummy', main_sizes)
plugin_widget_factory(BaseDummyWidget, 'android', 'shortcut', 'dummy', shortcut_sizes)

# **************************************************************************
# ******************* Registering widgets for Image plugin *****************
# **************************************************************************

main_sizes = (
    (1, 1),
    (2, 2),
    (2, 3),
    (3, 2),
    (3, 3),
)
plugin_widget_factory(BaseImageWidget, 'android', 'main', 'image', main_sizes)

# **************************************************************************
# ******************* Registering widgets for Memo plugin ******************
# **************************************************************************

main_sizes = (
    (2, 2),
    (3, 3),
    (4, 5),
)
shortcut_sizes = (
    (1, 1),
)
plugin_widget_factory(BaseMemoWidget, 'android', 'main', 'memo', main_sizes)
plugin_widget_factory(BaseMemoWidget, 'android', 'shortcut', 'memo', shortcut_sizes)

# **************************************************************************
# ************** Registering widgets for TinyMCEMemo plugin ****************
# **************************************************************************

main_sizes = (
    (2, 2),
    (3, 3),
)
plugin_widget_factory(BaseTinyMCEMemoWidget, 'android', 'main', 'tinymce_memo', main_sizes)

# **************************************************************************
# ****************** Registering widgets for News plugin *******************
# **************************************************************************

main_sizes = (
    (2, 5),
    (4, 5),
)
plugin_widget_factory(BaseNewsWidget, 'android', 'main', 'news', main_sizes)

# **************************************************************************
# ******************* Registering widgets for RSS plugin *******************
# **************************************************************************

main_sizes = (
    (2, 3),
    (3, 3),
)
plugin_widget_factory(BaseReadRSSFeedWidget, 'android', 'main', 'read_rss_feed', main_sizes)

# **************************************************************************
# ******************* Registering the widgets for URL plugin ***************
# **************************************************************************
plugin_widget_registry.register(URL1x1AndroidMainWidget)
plugin_widget_registry.register(URL1x1AndroidShortcutWidget)

# **************************************************************************
# ***************** Registering the widgets for Video plugin ***************
# **************************************************************************

main_sizes = (
    (2, 2),
    (3, 3),
    (4, 4),
    (5, 5),
)
plugin_widget_factory(BaseVideoWidget, 'android', 'main', 'video', main_sizes)

# **************************************************************************
# *************** Registering the widgets for Weather plugin ***************
# **************************************************************************

main_sizes = (
    (2, 2),
    (3, 3),
)
plugin_widget_factory(BaseWeatherWidget, 'android', 'main', 'weather', main_sizes)

# **************************************************************************
# *************** Registering the widgets for Bookmark plugin ***************
# **************************************************************************

main_sizes = (
    (1, 1),
    #(2, 2),
)
shortcut_sizes = (
    (1, 1),
    #(2, 2),
)
plugin_widget_factory(BaseBookmarkAndroidWidget, 'android', 'main', 'bookmark', main_sizes)
plugin_widget_factory(BaseBookmarkAndroidWidget, 'android', 'shortcut', 'bookmark', shortcut_sizes)

########NEW FILE########
__FILENAME__ = dash_widgets
__author__ = 'Artur Barseghyan <artur.barseghyan@gmail.com>'
__copyright__ = 'Copyright (c) 2013 Artur Barseghyan'
__license__ = 'GPL 2.0/LGPL 2.1'
__all__ = ('URL1x1AndroidMainWidget', 'URL1x1AndroidShortcutWidget', 'BaseBookmarkAndroidWidget')

from dash.contrib.plugins.url.dash_widgets import URL1x1Widget, BaseBookmarkWidget

# *********************************************************
# *********************************************************
# *********************** URL widgets *********************
# *********************************************************
# *********************************************************

class URL1x1AndroidMainWidget(URL1x1Widget):
    """
    URL plugin widget for Android layout (placeholder `main`).
    """
    layout_uid = 'android'
    placeholder_uid = 'main'

    media_css = (
        'css/dash_plugin_url_android.css',
    )


class URL1x1AndroidShortcutWidget(URL1x1AndroidMainWidget):
    """
    URL plugin widget for Android layout (placeholder `shortcuts`).
    """
    placeholder_uid = 'shortcuts'


# *********************************************************
# *********************************************************
# *********************** Bookmark widgets ****************
# *********************************************************
# *********************************************************

class BaseBookmarkAndroidWidget(BaseBookmarkWidget):
    """
    Base Bookmark plugin widget for Android layout.
    """
    media_css = (
        'css/dash_plugin_bookmark_android.css',
    )

########NEW FILE########
__FILENAME__ = conf
__all__ = ('get_setting',)

from django.conf import settings

from dash.contrib.layouts.bootstrap2 import defaults

def get_setting(setting, override=None):
    """
    Get a setting from ``dash.contrib.layouts.bootstrap2`` conf module, falling back to the default.

    If override is not None, it will be used instead of the setting.

    :param setting: String with setting name
    :param override: Value to use when no setting is available. Defaults to None.
    :return: Setting value.
    """
    if override is not None:
        return override
    if hasattr(settings, 'DASH_LAYOUT_BOOTSTRAP2_{0}'.format(setting)):
        return getattr(settings, 'DASH_LAYOUT_BOOTSTRAP2_{0}'.format(setting))
    else:
        return getattr(defaults, setting)

########NEW FILE########
__FILENAME__ = dash_layouts
__author__ = 'Artur Barseghyan <artur.barseghyan@gmail.com>'
__copyright__ = 'Copyright (c) 2013 Artur Barseghyan'
__license__ = 'GPL 2.0/LGPL 2.1'
__all__ = ('Bootstrap2FluidLayout',)

from dash.base import BaseDashboardLayout, BaseDashboardPlaceholder, layout_registry

# *******************************************************************
# ******************** Bootstrap 2 Fluid layout *********************
# *******************************************************************

class Bootstrap2FluidMainPlaceholder(BaseDashboardPlaceholder):
    """
    Main placeholder.
    """
    uid = 'main'
    cols = 11
    rows = 9
    cell_width = 70
    cell_height = 40
    cell_margin_top = 8
    cell_margin_right = 8
    cell_margin_bottom = 8
    cell_margin_left = 8
    edit_template_name = 'bootstrap2/fluid_base_placeholder_edit.html'


class Bootstrap2FluidLayout(BaseDashboardLayout):
    """
    Bootstrap 2 Fluid layout.
    """
    uid = 'bootstrap2_fluid'
    name = 'Bootstrap 2 Fluid'
    view_template_name = 'bootstrap2/fluid_view_layout.html'
    edit_template_name = 'bootstrap2/fluid_edit_layout.html'
    form_snippet_template_name = 'bootstrap2/snippets/generic_form_snippet.html'
    placeholders = [Bootstrap2FluidMainPlaceholder,]
    cell_units = 'px'
    media_css = (
        'css/bootstrap.css',
        'css/dash_layout_bootstap2_fluid.css',
        #'css/dash_solid_borders.css',
    )
    media_js = (
        'js/bootstrap.js',
        'js/dash_layout_bootstap2_fluid.js',
    )

    def get_view_template_name(self, request=None, origin=None):
        """
        Override the master view template for public dashboard app.
        """
        if 'dash.public_dashboard' == origin:
            return 'bootstrap2/fuild_public_dashboard_view_layout.html'
        else:
            return super(Bootstrap2FluidLayout, self).get_view_template_name(request=request, origin=origin)


layout_registry.register(Bootstrap2FluidLayout)

########NEW FILE########
__FILENAME__ = dash_plugins
__author__ = 'Artur Barseghyan <artur.barseghyan@gmail.com>'
__copyright__ = 'Copyright (c) 2013 Artur Barseghyan'
__license__ = 'GPL 2.0/LGPL 2.1'

from dash.base import plugin_registry, plugin_widget_registry
from dash.factory import plugin_widget_factory

from dash.factory import plugin_widget_factory
from dash.contrib.plugins.dummy.dash_widgets import BaseDummyWidget
from dash.contrib.plugins.image.dash_widgets import BaseImageWidget
from dash.contrib.plugins.memo.dash_widgets import BaseMemoWidget, BaseTinyMCEMemoWidget
#from dash.contrib.plugins.news.dash_widgets import BaseNewsWidget
#from dash.contrib.plugins.rss_feed.dash_widgets import BaseReadRSSFeedWidget
from dash.contrib.plugins.video.dash_widgets import BaseVideoWidget
#from dash.contrib.plugins.weather.dash_widgets import BaseWeatherWidget
from dash.contrib.plugins.url.dash_plugins import BaseURLPlugin
from dash.contrib.layouts.bootstrap2.dash_widgets import (
    URLBootstrapTwo1x1Bootstrap2FluidMainWidget, URLBootstrapTwo2x2Bootstrap2FluidMainWidget,
    BaseBookmarkBootstrapTwoWidget
    )
from dash.contrib.layouts.bootstrap2.forms import URLBootstrapTwoForm

# **************************************************************************
# ****************************** Custom plugins ****************************
# **************************************************************************

class URLBootstrapTwo1x1Plugin(BaseURLPlugin):
    """
    URL dashboard plugin. The original `URLPlugin`, as well as the main dash.css, relies on presence of
    wonderful "Font awesome". Although a lot of icon names are common between Bootstrap 2 and Font awesome,
    there are some specific icons, that are not present in both. Thus, the original `URLPlugin` is
    extended to address those differences.
    """
    uid = 'url_bootstrap_two_1x1'
    form = URLBootstrapTwoForm


plugin_registry.register(URLBootstrapTwo1x1Plugin)


class URLBootstrapTwo2x2Plugin(URLBootstrapTwo1x1Plugin):
    """
    URL dashboard plugin.
    """
    uid = 'url_bootstrap_two_2x2'


plugin_registry.register(URLBootstrapTwo2x2Plugin)

# **************************************************************************
# **************************************************************************
# ************************** Registering the widgets ***********************
# **************************************************************************
# **************************************************************************

# **************************************************************************
# ******************* Registering widgets for Dummy plugin *****************
# **************************************************************************

main_sizes = (
    (1, 1),
    (2, 2),
)
plugin_widget_factory(BaseDummyWidget, 'bootstrap2_fluid', 'main', 'dummy', main_sizes)

# **************************************************************************
# ******************* Registering widgets for Image plugin *****************
# **************************************************************************

main_sizes = (
    (1, 1),
    (2, 2),
    (2, 3),
    (3, 2),
    (3, 3),
    (3, 4),
    (4, 4),
    (4, 5),
    (5, 4),
    (5, 5),
)
plugin_widget_factory(BaseImageWidget, 'bootstrap2_fluid', 'main', 'image', main_sizes)

# **************************************************************************
# ******************* Registering widgets for Memo plugin ******************
# **************************************************************************

main_sizes = (
    (2, 2),
    (3, 3),
    (4, 5),
    (5, 5),
)
plugin_widget_factory(BaseMemoWidget, 'bootstrap2_fluid', 'main', 'memo', main_sizes)

# **************************************************************************
# ************** Registering widgets for TinyMCEMemo plugin ****************
# **************************************************************************

main_sizes = (
    (2, 2),
    (3, 3),
    (4, 5),
    (5, 5),
)
plugin_widget_factory(BaseTinyMCEMemoWidget, 'bootstrap2_fluid', 'main', 'tinymce_memo', main_sizes)

# **************************************************************************
# ******************* Registering the widgets for URL plugin ***************
# **************************************************************************

# Registering URL plugin widgets
plugin_widget_registry.register(URLBootstrapTwo1x1Bootstrap2FluidMainWidget)
#plugin_widget_registry.register(URLBootstrapTwo2x2Bootstrap2FluidMainWidget)

# **************************************************************************
# ***************** Registering the widgets for Video plugin ***************
# **************************************************************************

main_sizes = (
    (2, 2),
    (3, 3),
    (4, 4),
    (5, 5),
)
plugin_widget_factory(BaseVideoWidget, 'bootstrap2_fluid', 'main', 'video', main_sizes)

# **************************************************************************
# *************** Registering the widgets for Bookmark plugin ***************
# **************************************************************************

main_sizes = (
    (1, 1),
    #(2, 2),
)
plugin_widget_factory(BaseBookmarkBootstrapTwoWidget, 'bootstrap2_fluid', 'main', 'bookmark', main_sizes)

########NEW FILE########
__FILENAME__ = dash_widgets
__author__ = 'Artur Barseghyan <artur.barseghyan@gmail.com>'
__copyright__ = 'Copyright (c) 2013 Artur Barseghyan'
__license__ = 'GPL 2.0/LGPL 2.1'
__all__ = (
    'URLBootstrapTwo1x1Bootstrap2FluidMainWidget', 'URLBootstrapTwo2x2Bootstrap2FluidMainWidget',
    'BaseBookmarkBootstrapTwoWidget'
)

from dash.contrib.plugins.url.dash_widgets import BaseURLWidget, BaseBookmarkWidget

# *************************************************************
# ******************* URL widgets *****************************
# *************************************************************

class URLBootstrapTwo1x1Bootstrap2FluidMainWidget(BaseURLWidget):
    """
    URL plugin 1x1 widget for Bootstrap 2 Fluid layout (placeholder `main`).
    """
    layout_uid = 'bootstrap2_fluid'
    placeholder_uid = 'main'
    plugin_uid = 'url_bootstrap_two_1x1'
    media_css = (
        'css/dash_plugin_url_bootstrap2.css',
    )


class URLBootstrapTwo2x2Bootstrap2FluidMainWidget(URLBootstrapTwo1x1Bootstrap2FluidMainWidget):
    """
    URL2x2 plugin widget for Bootstrap 2 Fluid layout (placeholder `main`).
    """
    plugin_uid = 'url_bootstrap_two_2x2'
    cols = 2
    rows = 2

# *********************************************************
# *********************************************************
# *********************** Bookmark widgets ****************
# *********************************************************
# *********************************************************

class BaseBookmarkBootstrapTwoWidget(BaseBookmarkWidget):
    """
    Base Bookmark plugin widget for Bootstrap 2 Fluid layout.
    """
    media_css = (
        'css/dash_plugin_bookmark_bootstrap2.css',
    )

########NEW FILE########
__FILENAME__ = defaults
__author__ = 'Artur Barseghyan <artur.barseghyan@gmail.com>'
__copyright__ = 'Copyright (c) 2013 Artur Barseghyan'
__license__ = 'GPL 2.0/LGPL 2.1'
__all__ = ('IMAGE_CHOICES', 'IMAGE_CHOICES_WITH_EMPTY_OPTION')

from django.utils.translation import ugettext_lazy as _

IMAGE_CHOICES = (
    # Icons that are also present in `URLPlugin`.
    ('icon-film', _("Film")),
    #('icon-coffee', _("Coffee")),
    ('icon-calendar', _("Calendar")),
    ('icon-book', _("Book")),
    ('icon-music', _("Music")),
    ('icon-picture', _("Picture")),
    #('icon-rss-sign', _("RSS")),
    ('icon-star', _("Star")),
    ('icon-thumbs-up', _("Thumbs-up")),
    #('icon-smile', _("Smile")),
    #('icon-gamepad', _("Gamepad")),
    ('icon-plane', _("Plane")),
    ('icon-road', _("Road")),
    ('icon-camera', _("Camera")),
    ('icon-download', _("Download")),
    #('icon-food', _("Food")),
    ('icon-info-sign', _("Info")),
    ('icon-shopping-cart', _("Shopping cart")),
    #('icon-truck', _("Truck")),
    ('icon-wrench', _("Wrench")),
    #('icon-facebook', _("Facebook")),
    #('icon-github', _("Github")),
    #('icon-google-plus', _("Google plus")),
    #('icon-linkedin', _("LinkedIn")),
    #('icon-pinterest', _("Pinterest")),
    #('icon-twitter', _("Twitter")),
    #('icon-youtube', _("Youtube")),
    #('icon-bitbucket', _("Bitbucket")),
    #('icon-android', _("Android")),
    #('icon-apple', _("Apple")),
    #('icon-windows', _("Windows")),
    #('icon-tumblr-sign', _("Tumblr")),
    #('icon-instagram', _("Instagram")),
    #('icon-dropbox', _("Dropbox")),
    #('icon-trophy', _("Trophy")),
    #('icon-legal', _("Legal")),
    ('icon-lock', _("Lock")),
    ('icon-heart', _("Heart")),
    ('icon-question-sign', _("Question")),
    ('icon-headphones', _("Headphones")),
    ('icon-gift', _("Gift")),
    #('icon-key', _("Key")),
    #('icon-female', _("Female")),
    #('icon-male', _("Male")),
    ('icon-comment', _("Comment")),
    #('icon-bug', _("Bug")),
    ('icon-bell', _("Bell")),
    ('icon-search', _("Search")),
    ('icon-map-marker', _("Map marker")),
    ('icon-globe', _("Globe")),
    ('icon-pencil', _("Pensil")),
    ('icon-tasks', _("Tasks")),
)

IMAGE_CHOICES_WITH_EMPTY_OPTION = [('', '---------')] + list(IMAGE_CHOICES)

########NEW FILE########
__FILENAME__ = forms
__author__ = 'Artur Barseghyan <artur.barseghyan@gmail.com>'
__copyright__ = 'Copyright (c) 2013 Artur Barseghyan'
__license__ = 'GPL 2.0/LGPL 2.1'

from dash.contrib.plugins.url.forms import URLForm
from dash.contrib.layouts.bootstrap2.settings import IMAGE_CHOICES_WITH_EMPTY_OPTION

class URLBootstrapTwoForm(URLForm):
    """
    Almost like the original, but has less options.
    """
    def __init__(self, *args, **kwargs):
        super(URLBootstrapTwoForm, self).__init__(*args, **kwargs)
        self.fields['image'].choices = IMAGE_CHOICES_WITH_EMPTY_OPTION


########NEW FILE########
__FILENAME__ = settings
__author__ = 'Artur Barseghyan <artur.barseghyan@gmail.com>'
__copyright__ = 'Copyright (c) 2013 Artur Barseghyan'
__license__ = 'GPL 2.0/LGPL 2.1'
__all__ = ('IMAGE_CHOICES', 'IMAGE_CHOICES_WITH_EMPTY_OPTION')

from dash.contrib.layouts.bootstrap2.conf import get_setting

IMAGE_CHOICES = get_setting('IMAGE_CHOICES')
IMAGE_CHOICES_WITH_EMPTY_OPTION = get_setting('IMAGE_CHOICES_WITH_EMPTY_OPTION')

########NEW FILE########
__FILENAME__ = dash_layouts
__author__ = 'Artur Barseghyan <artur.barseghyan@gmail.com>'
__copyright__ = 'Copyright (c) 2013 Artur Barseghyan'
__license__ = 'GPL 2.0/LGPL 2.1'
__all__ = ('Windows8Layout',)

from dash.base import BaseDashboardLayout, BaseDashboardPlaceholder, layout_registry


class Windows8MainPlaceholder(BaseDashboardPlaceholder):
    """
    Main placeholder.
    """
    uid = 'main'
    cols = 6
    rows = 4
    cell_width = 140
    cell_height = 135


class WindowsSidebarPlaceholder(BaseDashboardPlaceholder):
    """
    Sidebar placeholder.
    """
    uid = 'sidebar'
    cols = 2
    rows = 4
    cell_width = 140
    cell_height = 135


class Windows8Layout(BaseDashboardLayout):
    """
    Windows8 layout.
    """
    uid = 'windows8'
    name = 'Windows 8'
    view_template_name = 'windows8/view_layout.html'
    edit_template_name = 'windows8/edit_layout.html'
    placeholders = [Windows8MainPlaceholder, WindowsSidebarPlaceholder]
    cell_units = 'px'
    media_css = (
        'css/dash_solid_borders.css',
        'css/dash_layout_windows8.css',
    )
    #media_js = ('js/dash_layout_windows8.js',)


layout_registry.register(Windows8Layout)

########NEW FILE########
__FILENAME__ = dash_plugins
from dash.base import plugin_widget_registry
from dash.base import plugin_widget_registry
from dash.factory import plugin_widget_factory
from dash.contrib.plugins.dummy.dash_widgets import BaseDummyWidget
from dash.contrib.plugins.image.dash_widgets import BaseImageWidget
from dash.contrib.plugins.memo.dash_widgets import BaseMemoWidget, BaseTinyMCEMemoWidget
#from dash.contrib.plugins.news.dash_widgets import BaseNewsWidget
from dash.contrib.plugins.rss_feed.dash_widgets import BaseReadRSSFeedWidget
from dash.contrib.plugins.video.dash_widgets import BaseVideoWidget
#from dash.contrib.plugins.weather.dash_widgets import BaseWeatherWidget
from dash.contrib.layouts.windows8.dash_widgets import (
    URL1x1Windows8MainWidget, URL1x1Windows8SidebarWidget, BaseBookmarkWindows8Widget
    )

# **************************************************************************
# **************************************************************************
# **************************************************************************
# ************************* Registering the widgets ************************
# **************************************************************************
# **************************************************************************
# **************************************************************************

# **************************************************************************
# ******************* Registering widgets for Dummy plugin *****************
# **************************************************************************

main_sizes = (
    (1, 1),
)
sidebar_sizes = (
    (1, 1),
)
plugin_widget_factory(BaseDummyWidget, 'windows8', 'main', 'dummy', main_sizes)
plugin_widget_factory(BaseDummyWidget, 'windows8', 'sidebar', 'dummy', sidebar_sizes)

# **************************************************************************
# ******************* Registering widgets for Image plugin *****************
# **************************************************************************

main_sizes = (
    (1, 1),
    (2, 2),
    (3, 3),
    (4, 4),
)
sidebar_sizes = (
    (1, 1),
    (2, 2),
)
plugin_widget_factory(BaseImageWidget, 'windows8', 'main', 'image', main_sizes)
plugin_widget_factory(BaseImageWidget, 'windows8', 'sidebar', 'image', sidebar_sizes)

# **************************************************************************
# ******************* Registering widgets for Memo plugin ******************
# **************************************************************************

main_sizes = (
    (2, 2),
    (3, 3),
)
sidebar_sizes = (
    (2, 2),
)
plugin_widget_factory(BaseMemoWidget, 'windows8', 'main', 'memo', main_sizes)
plugin_widget_factory(BaseMemoWidget, 'windows8', 'sidebar', 'memo', sidebar_sizes)

# **************************************************************************
# ******************* Registering widgets for RSS plugin *******************
# **************************************************************************

main_sizes = (
    (2, 3),
)
sidebar_sizes = (
    (2, 3),
)
plugin_widget_factory(BaseReadRSSFeedWidget, 'windows8', 'main', 'read_rss_feed', main_sizes)
plugin_widget_factory(BaseReadRSSFeedWidget, 'windows8', 'sidebar', 'read_rss_feed', sidebar_sizes)

# **************************************************************************
# ******************* Registering the widgets for URL plugin ***************
# **************************************************************************

plugin_widget_registry.register(URL1x1Windows8MainWidget)
plugin_widget_registry.register(URL1x1Windows8SidebarWidget)

# **************************************************************************
# ***************** Registering the widgets for Video plugin ***************
# **************************************************************************

main_sizes = (
    (2, 2),
)
sidebar_sizes = (
    (2, 3),
)
plugin_widget_factory(BaseVideoWidget, 'windows8', 'main', 'video', main_sizes)
plugin_widget_factory(BaseVideoWidget, 'windows8', 'sidebar', 'video', sidebar_sizes)

# **************************************************************************
# *************** Registering the widgets for Bookmark plugin ***************
# **************************************************************************

main_sizes = (
    (1, 1),
    #(2, 2),
)
shortcut_sizes = (
    (1, 1),
    #(2, 2),
)
plugin_widget_factory(BaseBookmarkWindows8Widget, 'windows8', 'main', 'bookmark', main_sizes)
plugin_widget_factory(BaseBookmarkWindows8Widget, 'windows8', 'sidebar', 'bookmark', shortcut_sizes)

########NEW FILE########
__FILENAME__ = dash_widgets
__author__ = 'Artur Barseghyan <artur.barseghyan@gmail.com>'
__copyright__ = 'Copyright (c) 2013 Artur Barseghyan'
__license__ = 'GPL 2.0/LGPL 2.1'
__all__ = ('URL1x1Windows8MainWidget', 'URL1x1Windows8SidebarWidget', 'BaseBookmarkWindows8Widget')

from dash.contrib.plugins.url.dash_widgets import URL1x1Widget, BaseBookmarkWidget

# *********************************************************
# *********************************************************
# *********************** URL widgets *********************
# *********************************************************
# *********************************************************

class URL1x1Windows8MainWidget(URL1x1Widget):
    """
    URL plugin widget for Windows 8 layout (placeholder `main`).
    """
    layout_uid = 'windows8'
    placeholder_uid = 'main'

    media_css = (
        'css/dash_plugin_url_windows8.css',
    )


class URL1x1Windows8SidebarWidget(URL1x1Windows8MainWidget):
    """
    URL plugin widget for Windows 8 layout (placeholder `sidebar`).
    """
    placeholder_uid = 'sidebar'

# *********************************************************
# *********************************************************
# *********************** Bookmark widgets ****************
# *********************************************************
# *********************************************************

class BaseBookmarkWindows8Widget(BaseBookmarkWidget):
    """
    Base Bookmark plugin widget for Windows8 layout.
    """
    media_css = (
        'css/dash_plugin_bookmark_windows8.css',
    )

########NEW FILE########
__FILENAME__ = dash_plugins
__author__ = 'Artur Barseghyan <artur.barseghyan@gmail.com>'
__copyright__ = 'Copyright (c) 2013 Artur Barseghyan'
__license__ = 'GPL 2.0/LGPL 2.1'
__all__ = ('BaseDummyPlugin',)

from django.utils.translation import ugettext_lazy as _

from dash.base import BaseDashboardPlugin
from dash.factory import plugin_factory
from dash.contrib.plugins.dummy.forms import DummyForm, DummyShortcutsForm

# ********************************************************************************
# ***************************** Base  Dummy plugin *******************************
# ********************************************************************************
class BaseDummyPlugin(BaseDashboardPlugin):
    """
    Base dummy plugin.
    """
    name = _("Dummy")
    form = DummyForm
    group = _("Dummy")

    def get_form(self):
        if 'sidebar' == self.placeholder:
            return DummyShortcutsForm
        else:
            return DummyForm

    def post_processor(self):
        """
        If no text available, use dummy.
        """
        if not self.data.text:
            self.data.text = 'Dummy content'

# ********************************************************************************
# ********** Generating and registering the plugins using factory ****************
# ********************************************************************************
sizes = (
    (1, 1),
    (1, 2),
    (2, 1),
    (2, 2),
    (3, 3),
    (4, 4),
    (5, 5)
)

plugin_factory(BaseDummyPlugin, 'dummy', sizes)

########NEW FILE########
__FILENAME__ = dash_widgets
__author__ = 'Artur Barseghyan <artur.barseghyan@gmail.com>'
__copyright__ = 'Copyright (c) 2013 Artur Barseghyan'
__license__ = 'GPL 2.0/LGPL 2.1'
__all__ = (
    'BaseDummyWidget', 'Dummy1x1Widget', 'Dummy1x2Widget', 'Dummy2x1Widget',
    'Dummy2x2Widget', 'Dummy3x3Widget'
)

from django.template.loader import render_to_string

from dash.base import BaseDashboardPluginWidget

# ************************************************************************
# ************************* Base widget for Dummy plugin *****************
# ************************************************************************

class BaseDummyWidget(BaseDashboardPluginWidget):
    """
    Base dummy plugin widget.
    """
    media_js = [
        #'js/dash_plugin_dummy.js',
    ]
    media_css = [
        #'css/dash_plugin_dummy.css',
    ]

    def render(self, request=None):
        context = {'plugin': self.plugin}
        return render_to_string('dummy/render.html', context)

# ************************************************************************
# ************************* Specific widgets for Dummy plugin ************
# ************************************************************************

class Dummy1x1Widget(BaseDummyWidget):
    """
    1x1 dummy plugin widget.
    """
    plugin_uid = 'dummy_1x1'


class Dummy1x2Widget(BaseDummyWidget):
    """
    1x2 dummy plugin widget.
    """
    plugin_uid = 'dummy_1x2'
    cols = 1
    rows = 2


class Dummy2x1Widget(BaseDummyWidget):
    """
    2x1 dummy plugin widget.
    """
    plugin_uid = 'dummy_2x1'
    cols = 2
    rows = 1


class Dummy2x2Widget(BaseDummyWidget):
    """
    2x2 dummy plugin widget.
    """
    plugin_uid = 'dummy_2x2'
    cols = 2
    rows = 2


class Dummy3x3Widget(BaseDummyWidget):
    """
    3x3 dummy plugin widget.
    """
    plugin_uid = 'dummy_3x3'
    cols = 3
    rows = 3

########NEW FILE########
__FILENAME__ = defaults
__author__ = 'Artur Barseghyan <artur.barseghyan@gmail.com>'
__copyright__ = 'Copyright (c) 2013 Artur Barseghyan'
__license__ = 'GPL 2.0/LGPL 2.1'

LANGUAGE_CHOICES = (
    ('en', 'English'),
    ('hy', 'Armenian'),
    ('ka', 'Georgian'),
    ('el', 'Greek'),
    ('ru', 'Russian')
)

LANGUAGE_CHOICES_KEYS = [l[0] for l in LANGUAGE_CHOICES]

DEFAULT_MAX_CHARS = 40

########NEW FILE########
__FILENAME__ = forms
__author__ = 'Artur Barseghyan <artur.barseghyan@gmail.com>'
__copyright__ = 'Copyright (c) 2013 Artur Barseghyan'
__license__ = 'GPL 2.0/LGPL 2.1'
__all__ = ('DummyForm', 'DummyShortcutsForm')

import logging
logger = logging.getLogger(__name__)

from six import PY2

if PY2:
    from lipsum import Generator
else:
    from transliterate.contrib.apps.translipsum.utils import Generator

from transliterate.contrib.apps.translipsum import TranslipsumGenerator

from django import forms
from django.utils.translation import ugettext_lazy as _
from django.utils.text import Truncator

from dash.base import DashboardPluginFormBase
from dash.contrib.plugins.dummy.defaults import LANGUAGE_CHOICES, LANGUAGE_CHOICES_KEYS, DEFAULT_MAX_CHARS
from dash.widgets import BooleanRadioSelect

class DummyForm(forms.Form, DashboardPluginFormBase):
    """
    Dummy form (for main `placeholder`).
    """
    plugin_data_fields = [
        ("show_title", False),
        ("generate_lipsum", False),
        ("lipsum_language", ""),
        ("lipsum_max_chars", DEFAULT_MAX_CHARS),
        ("text", "")
    ]
    show_title = forms.BooleanField(label=_("Show title?"), required=False, initial=False,
                                         widget=BooleanRadioSelect)
    generate_lipsum = forms.BooleanField(label=_("Generate lorem ipsum?"), required=False, initial=False,
                                         widget=BooleanRadioSelect)
    lipsum_language = forms.ChoiceField(label=_("Language"), required=False, choices=LANGUAGE_CHOICES)
    lipsum_max_chars = forms.IntegerField(label=_("Max number of chars for generated text"), required=True,
                                          initial=DEFAULT_MAX_CHARS)
    text = forms.CharField(label=_("Generated lorem ipsum text"), required=False, widget=forms.widgets.HiddenInput)

    def save_plugin_data(self, request=None):
        """
        We want to save the generated lorem ipsum text for later use. Thus, although we don't show it to the
        user, in case when ``generate_lipsum`` field is set to True, we silently generate the text and save
        it into the plugin data.
        """
        if self.cleaned_data.get('generate_lipsum', None):
            lipsum_language = self.cleaned_data.get('lipsum_language', None)
            try:
                if lipsum_language in LANGUAGE_CHOICES_KEYS:
                    if 'en' == lipsum_language:
                        g = Generator()
                    else:
                        g = TranslipsumGenerator(language_code=lipsum_language)
                    text = g.generate_paragraph()
                    truncator = Truncator(text)
                    self.cleaned_data['text'] = truncator.chars(
                        self.cleaned_data.get('lipsum_max_chars', DEFAULT_MAX_CHARS)
                        )
            except Exception as e:
                if DEBUG:
                    logger.debug(e)

class DummyShortcutsForm(DummyForm):
    """
    Dummy form for `shortucts` placeholder.
    """

########NEW FILE########
__FILENAME__ = conf
__author__ = 'Artur Barseghyan <artur.barseghyan@gmail.com>'
__copyright__ = 'Copyright (c) 2013 Artur Barseghyan'
__license__ = 'GPL 2.0/LGPL 2.1'
__all__ = ('get_setting',)

from django.conf import settings

from dash.contrib.plugins.image import defaults

def get_setting(setting, override=None):
    """
    Get a setting from ``dash.contrib.plugins.image`` conf module, falling back to the default.

    If override is not None, it will be used instead of the setting.

    :param setting: String with setting name
    :param override: Value to use when no setting is available. Defaults to None.
    :return: Setting value.
    """
    if override is not None:
        return override
    if hasattr(settings, 'DASH_PLUGIN_IMAGE_{0}'.format(setting)):
        return getattr(settings, 'DASH_PLUGIN_IMAGE_{0}'.format(setting))
    else:
        return getattr(defaults, setting)

########NEW FILE########
__FILENAME__ = dash_plugins
__author__ = 'Artur Barseghyan <artur.barseghyan@gmail.com>'
__copyright__ = 'Copyright (c) 2013 Artur Barseghyan'
__license__ = 'GPL 2.0/LGPL 2.1'
__all__ = ('BaseImagePlugin',)

from django.utils.translation import ugettext_lazy as _

from dash.base import BaseDashboardPlugin
from dash.factory import plugin_factory
from dash.contrib.plugins.image.forms import ImageForm
from dash.contrib.plugins.image.helpers import delete_file, clone_file

# *************************************************************************
# ***************************** Base Image plugin *************************
# *************************************************************************
class BaseImagePlugin(BaseDashboardPlugin):
    """
    Base image plugin.
    """
    name = _("Image")
    group = _("Image")
    form = ImageForm
    html_classes = ['pictonic']

    def delete_plugin_data(self):
        """
        Deletes uploaded file.
        """
        delete_file(self.data.image)

    def clone_plugin_data(self, dashboard_entry):
        """
        Clone plugin data, which means we make a copy of the original image.

        TODO: Perhaps rely more on data of `dashboard_entry`?
        """
        cloned_image = clone_file(self.data.image, relative_path=True)
        return self.get_cloned_plugin_data(update={'image': cloned_image})


# ********************************************************************************
# ********** Generating and registering the plugins using factory ****************
# ********************************************************************************
sizes = (
    (1, 1),
    (1, 2),
    (2, 1),
    (2, 2),
    (2, 3),
    (3, 2),
    (3, 3),
    (3, 4),
    (4, 3),
    (4, 4),
    (4, 5),
    (5, 4),
    (5, 5)
)

plugin_factory(BaseImagePlugin, 'image', sizes)

########NEW FILE########
__FILENAME__ = dash_widgets
__author__ = 'Artur Barseghyan <artur.barseghyan@gmail.com>'
__copyright__ = 'Copyright (c) 2013 Artur Barseghyan'
__license__ = 'GPL 2.0/LGPL 2.1'
__all__ = (
    'BaseImageWidget', 'Image1x1Widget', 'Image1x2Widget', 'Image2x1Widget',
    'Image2x2Widget', 'Image2x3Widget', 'Image3x2Widget', 'Image3x3Widget',
    'Image3x4Widget', 'Image4x3Widget', 'Image4x4Widget', 'Image4x5Widget',
    'Image5x4Widget', 'Image5x5Widget',
)

from django.template.loader import render_to_string
from django.conf import settings

from dash.base import BaseDashboardPluginWidget
from dash.contrib.plugins.image.helpers import get_crop_filter
from dash.contrib.plugins.image.settings import FIT_METHOD_FIT_WIDTH, FIT_METHOD_FIT_HEIGHT

# **********************************************************************
# ************************ Base Image widget plugin ********************
# **********************************************************************

class BaseImageWidget(BaseDashboardPluginWidget):
    """
    Base image plugin widget.
    """
    media_js = (
        'js/dash_plugin_image.js',
    )
    media_css = (
        'css/dash_plugin_image.css',
    )

    def render(self, request=None):
        crop = get_crop_filter(self.plugin.data.fit_method)
        # Widget size with 8px bited from all width and height.
        if FIT_METHOD_FIT_WIDTH == self.plugin.data.fit_method:
            thumb_size = (self.get_width() - 8, 0)
        elif FIT_METHOD_FIT_HEIGHT == self.plugin.data.fit_method:
            thumb_size = (0, self.get_height() - 8)
        else:
            thumb_size = self.get_size(-8, -8)

        context = {
            'plugin': self.plugin,
            'MEDIA_URL': settings.MEDIA_URL,
            'crop': crop,
            'thumb_size': thumb_size
        }
        return render_to_string('image/render.html', context)

# **********************************************************************
# ************************** Specific widgets **************************
# **********************************************************************

class Image1x1Widget(BaseImageWidget):
    """
    Image1x1 plugin widget.
    """
    plugin_uid = 'image_1x1'


class Image1x2Widget(BaseImageWidget):
    """
    Image1x2 plugin widget.
    """
    cols = 1
    rows = 2
    plugin_uid = 'image_1x2'


class Image2x1Widget(BaseImageWidget):
    """
    Image2x1 plugin widget.
    """
    cols = 2
    rows = 1
    plugin_uid = 'image_2x1'


class Image2x2Widget(BaseImageWidget):
    """
    Image2x2 plugin widget.
    """
    cols = 2
    rows = 2
    plugin_uid = 'image_2x2'


class Image2x3Widget(BaseImageWidget):
    """
    Image2x3 plugin widget.
    """
    cols = 2
    rows = 3
    plugin_uid = 'image_2x3'


class Image3x2Widget(BaseImageWidget):
    """
    Image3x2 plugin widget.
    """
    cols = 3
    rows = 2
    plugin_uid = 'image_3x2'


class Image3x3Widget(BaseImageWidget):
    """
    Image3x3 plugin widget.
    """
    cols = 3
    rows = 3
    plugin_uid = 'image_3x3'


class Image3x4Widget(BaseImageWidget):
    """
    Image3x4 plugin widget.
    """
    cols = 3
    rows = 4
    plugin_uid = 'image_3x4'


class Image4x4Widget(BaseImageWidget):
    """
    Image4x4 plugin widget.
    """
    cols = 4
    rows = 4
    plugin_uid = 'image_4x4'


class Image4x5Widget(BaseImageWidget):
    """
    Image4x5 plugin widget.
    """
    cols = 4
    rows = 5
    plugin_uid = 'image_4x5'


class Image5x4Widget(BaseImageWidget):
    """
    Image5x4 plugin widget.
    """
    cols = 5
    rows = 4
    plugin_uid = 'image_5x4'


class Image5x5Widget(BaseImageWidget):
    """
    Image5x5 plugin widget.
    """
    cols = 5
    rows = 5
    plugin_uid = 'image_5x5'

########NEW FILE########
__FILENAME__ = defaults
__author__ = 'Artur Barseghyan <artur.barseghyan@gmail.com>'
__copyright__ = 'Copyright (c) 2013 Artur Barseghyan'
__license__ = 'GPL 2.0/LGPL 2.1'
__all__ = ('FIT_METHOD_CROP_SMART', 'FIT_METHOD_CROP_CENTER', 'FIT_METHOD_CROP_SCALE',
           'FIT_METHOD_FIT_WIDTH', 'FIT_METHOD_FIT_HEIGHT', 'DEFAULT_FIT_METHOD', 'FIT_METHODS_CHOICES',
           'FIT_METHODS_CHOICES_WITH_EMPTY_OPTION', 'IMAGES_UPLOAD_DIR')

from django.utils.translation import ugettext_lazy as _

FIT_METHOD_CROP_SMART = 'smart'
FIT_METHOD_CROP_CENTER = 'center'
FIT_METHOD_CROP_SCALE = 'scale'
FIT_METHOD_FIT_WIDTH = 'fit_width'
FIT_METHOD_FIT_HEIGHT = 'fit_height'

DEFAULT_FIT_METHOD = FIT_METHOD_CROP_CENTER

FIT_METHODS_CHOICES = (
    (FIT_METHOD_CROP_SMART, _("Smart crop")),
    (FIT_METHOD_CROP_CENTER, _("Crop center")),
    (FIT_METHOD_CROP_SCALE, _("Crop scale")),
    (FIT_METHOD_FIT_WIDTH, _("Fit width")),
    (FIT_METHOD_FIT_HEIGHT, _("Fit height")),
)

FIT_METHODS_CHOICES_WITH_EMPTY_OPTION = [('', '---------')] + list(FIT_METHODS_CHOICES)

IMAGES_UPLOAD_DIR = 'dash-image-plugin-images'

########NEW FILE########
__FILENAME__ = forms
__author__ = 'Artur Barseghyan <artur.barseghyan@gmail.com>'
__copyright__ = 'Copyright (c) 2013 Artur Barseghyan'
__license__ = 'GPL 2.0/LGPL 2.1'
__all__ = ('ImageForm',)

from django import forms
from django.utils.translation import ugettext_lazy as _

from dash.base import DashboardPluginFormBase
from dash.widgets import BooleanRadioSelect
from dash.contrib.plugins.image.settings import FIT_METHODS_CHOICES, DEFAULT_FIT_METHOD
from dash.contrib.plugins.image.helpers import handle_uploaded_file

class ImageForm(forms.Form, DashboardPluginFormBase):
    """
    Image form for `ImagePlugin` plugin.
    """

    plugin_data_fields = [
        ("title", ""),
        ("image", ""),
        ("fit_method", DEFAULT_FIT_METHOD),
        ("show_link", True)
    ]

    title = forms.CharField(label=_("Title"), required=True)
    image = forms.ImageField(label=_("Image"), required=True)
    fit_method = forms.ChoiceField(label=_("Fit method"), required=False, initial=DEFAULT_FIT_METHOD, \
                                   choices=FIT_METHODS_CHOICES)
    show_link = forms.BooleanField(label=_("Show link?"), required=False, initial=True, widget=BooleanRadioSelect)

    def save_plugin_data(self, request=None):
        """
        Saving the plugin data and moving the file.
        """
        image = self.cleaned_data.get('image', None)
        if image:
            saved_image = handle_uploaded_file(image)
            self.cleaned_data['image'] = saved_image

########NEW FILE########
__FILENAME__ = helpers
__author__ = 'Artur Barseghyan <artur.barseghyan@gmail.com>'
__copyright__ = 'Copyright (c) 2013 Artur Barseghyan'
__license__ = 'GPL 2.0/LGPL 2.1'
__all__ = ('handle_uploaded_file', 'get_crop_filter', 'delete_file', 'ensure_unique_filename', 'clone_file')

import os
import glob
import logging
import uuid
import shutil

from django.conf import settings
from django.core.files.base import File

from dash.contrib.plugins.image.settings import (
    IMAGES_UPLOAD_DIR, FIT_METHOD_CROP_SMART, FIT_METHOD_CROP_CENTER, FIT_METHOD_CROP_SCALE
    )

logger = logging.getLogger(__file__)

IMAGES_UPLOAD_DIR_ABSOLUTE_PATH = os.path.join(settings.MEDIA_ROOT, IMAGES_UPLOAD_DIR)

def ensure_unique_filename(destination):
    """
    Makes sure filenames are never overwritten.

    :param string destination:
    :return string:
    """
    if os.path.exists(destination):
        filename, extension = os.path.splitext(destination)
        return "{0}_{1}{2}".format(filename, uuid.uuid4(), extension)
    else:
        return destination

def handle_uploaded_file(image_file):
    """
    :param django.core.files.uploadedfile.InMemoryUploadedFile image_file:
    :return string: Path to the image (relative).
    """
    if isinstance(image_file, File):
        destination_path = ensure_unique_filename(os.path.join(IMAGES_UPLOAD_DIR_ABSOLUTE_PATH, image_file.name))
        image_filename = image_file.name
        with open(destination_path, 'wb+') as destination:
            image_filename = os.path.basename(destination.name)
            for chunk in image_file.chunks():
                destination.write(chunk)
        return os.path.join(IMAGES_UPLOAD_DIR, image_filename)
    return image_file

def get_crop_filter(fit_method):
    if fit_method in (FIT_METHOD_CROP_SMART, FIT_METHOD_CROP_CENTER, FIT_METHOD_CROP_SCALE):
        return fit_method

def delete_file(image_file):
    """
    Delete file from disc.
    """
    try:
        # Delete the main file.
        file_path = os.path.join(settings.MEDIA_ROOT, image_file)
        os.remove(file_path)

        # Delete the sized version of it.
        files = glob.glob("{0}*".format(file_path))
        for f in files:
            try:
                os.remove(f)
            except Exception as e:
                logger.debug(str(e))

        # If all goes well...
        return True
    except Exception as e:
        logger.debug(str(e))
        return False

def clone_file(source_filename, relative_path=True):
    """
    Clones the file.

    :param string source_filename: Source filename.
    :return string: Filename of the cloned file.
    """
    if source_filename.startswith(IMAGES_UPLOAD_DIR):
        source_filename = os.path.join(settings.MEDIA_ROOT, source_filename)

    destination_filename = ensure_unique_filename(source_filename)
    try:
        shutil.copyfile(source_filename, destination_filename)
        if relative_path:
            destination_filename = destination_filename.replace(settings.MEDIA_ROOT, '')
            if destination_filename.startswith('/'):
                destination_filename = destination_filename[1:]
        return destination_filename
    except Exception as e:
        logger.debug(str(e))

########NEW FILE########
__FILENAME__ = settings
"""
- ``FIT_METHOD_CROP_SMART`` (string)
- ``FIT_METHOD_CROP_CENTER`` (string)
- ``FIT_METHOD_CROP_SCALE`` (string)
- ``FIT_METHOD_FIT_WIDTH`` (string)
- ``FIT_METHOD_FIT_HEIGHT`` (string)
- ``DEFAULT_FIT_METHOD`` (string)
- ``FIT_METHODS_CHOICES`` (tuple)
- ``FIT_METHODS_CHOICES_WITH_EMPTY_OPTION`` (list)
- ``IMAGES_UPLOAD_DIR`` (string)
"""

__author__ = 'Artur Barseghyan <artur.barseghyan@gmail.com>'
__copyright__ = 'Copyright (c) 2013 Artur Barseghyan'
__license__ = 'GPL 2.0/LGPL 2.1'
__all__ = ('FIT_METHOD_CROP_SMART', 'FIT_METHOD_CROP_CENTER', 'FIT_METHOD_CROP_SCALE', 
           'FIT_METHOD_FIT_WIDTH', 'FIT_METHOD_FIT_HEIGHT', 'DEFAULT_FIT_METHOD', 'FIT_METHODS_CHOICES',
           'FIT_METHODS_CHOICES_WITH_EMPTY_OPTION', 'IMAGES_UPLOAD_DIR')

from dash.contrib.plugins.image.conf import get_setting

FIT_METHOD_CROP_SMART = get_setting('FIT_METHOD_CROP_SMART')
FIT_METHOD_CROP_CENTER = get_setting('FIT_METHOD_CROP_CENTER')
FIT_METHOD_CROP_SCALE = get_setting('FIT_METHOD_CROP_SCALE')
FIT_METHOD_FIT_WIDTH = get_setting('FIT_METHOD_FIT_WIDTH')
FIT_METHOD_FIT_HEIGHT = get_setting('FIT_METHOD_FIT_HEIGHT')
DEFAULT_FIT_METHOD = get_setting('DEFAULT_FIT_METHOD')
FIT_METHODS_CHOICES = get_setting('FIT_METHODS_CHOICES')
FIT_METHODS_CHOICES_WITH_EMPTY_OPTION = get_setting('FIT_METHODS_CHOICES_WITH_EMPTY_OPTION')
IMAGES_UPLOAD_DIR = get_setting('IMAGES_UPLOAD_DIR')

########NEW FILE########
__FILENAME__ = dash_plugins
__author__ = 'Artur Barseghyan <artur.barseghyan@gmail.com>'
__copyright__ = 'Copyright (c) 2013 Artur Barseghyan'
__license__ = 'GPL 2.0/LGPL 2.1'
__all__ = ('BaseMemoPlugin', 'BaseTinyMCEMemoPlugin',)

from django.utils.translation import ugettext_lazy as _

from dash.base import BaseDashboardPlugin
from dash.factory import plugin_factory
from dash.contrib.plugins.memo.forms import MemoForm, TinyMCEMemoForm

# ********************************************************************************
# ******************************* Base memo plugin *******************************
# ********************************************************************************

class BaseMemoPlugin(BaseDashboardPlugin):
    """
    Base memo plugin.
    """
    name = _("Memo")
    group = _("Memo")
    form = MemoForm


# ********************************************************************************
# ********** Generating and registering the plugins using factory ****************
# ********************************************************************************

sizes = (
    (1, 1),
    (2, 2),
    (3, 3),
    (4, 4),
    (5, 5),
    (6, 6)
)

plugin_factory(BaseMemoPlugin, 'memo', sizes)

# ********************************************************************************
# ******************************* Base TinyMCE memo plugin ***********************
# ********************************************************************************

class BaseTinyMCEMemoPlugin(BaseDashboardPlugin):
    """
    Memo dashboard plugin.
    """
    name = _("TinyMCE memo")
    group = _("Memo")
    form = TinyMCEMemoForm
    help_text = _("""TinyMCE tags are available here.""")


# ********************************************************************************
# ********** Generating and registering the plugins using factory ****************
# ********************************************************************************

sizes = (
    (2, 2),
    (3, 3),
    (4, 4),
    (5, 5),
    (6, 6)
)

plugin_factory(BaseTinyMCEMemoPlugin, 'tinymce_memo', sizes)

########NEW FILE########
__FILENAME__ = dash_widgets
__author__ = 'Artur Barseghyan <artur.barseghyan@gmail.com>'
__copyright__ = 'Copyright (c) 2013 Artur Barseghyan'
__license__ = 'GPL 2.0/LGPL 2.1'
__all__ = (
    'BaseMemoWidget', 'Memo1x1Widget', 'Memo2x2Widget', 'Memo3x3Widget',
    'Memo4x5Widget', 'Memo5x5Widget', 'Memo6x6Widget', 'TinyMCEMemo2x2Widget',
    'TinyMCEMemo3x3Widget', 'TinyMCEMemo4x4Widget', 'TinyMCEMemo5x5Widget'
)

from django.template.loader import render_to_string

from dash.base import BaseDashboardPluginWidget

# ***********************************************************************
# ********************** Base widget for Memo plugin ********************
# ***********************************************************************

class BaseMemoWidget(BaseDashboardPluginWidget):
    """
    Base memo plugin widget.
    """
    def render(self, request=None):
        context = {'plugin': self.plugin}
        return render_to_string('memo/render.html', context)

# ***********************************************************************
# ********************** Specific widgets for Memo plugin ***************
# ***********************************************************************

class Memo1x1Widget(BaseMemoWidget):
    """
    Memo 1x1 plugin widget.
    """
    plugin_uid = 'memo_1x1'
    cols = 1
    rows = 1


class Memo2x2Widget(BaseMemoWidget):
    """
    Memo 2x2 plugin widget.
    """
    plugin_uid = 'memo_2x2'
    cols = 2
    rows = 2


class Memo3x3Widget(BaseMemoWidget):
    """
    Memo 3x3 plugin widget.
    """
    plugin_uid = 'memo_3x3'
    cols = 3
    rows = 3


class Memo4x5Widget(BaseMemoWidget):
    """
    Memo 4x5 plugin widget.
    """
    plugin_uid = 'memo_4x5'
    cols = 4
    rows = 5


class Memo5x5Widget(BaseMemoWidget):
    """
    Memo 5x5 plugin widget.
    """
    plugin_uid = 'memo_5x5'
    cols = 5
    rows = 5


class Memo6x6Widget(BaseMemoWidget):
    """
    Memo 6x6 plugin widget.
    """
    plugin_uid = 'memo_6x6'
    cols = 6
    rows = 6

# ***********************************************************************
# ********************** Base widget for Memo plugin ********************
# ***********************************************************************

class BaseTinyMCEMemoWidget(BaseDashboardPluginWidget):
    """
    Base TinyMCE memo plugin widget.
    """
    def render(self, request=None):
        context = {'plugin': self.plugin}
        return render_to_string('tinymce/render.html', context)

# ***********************************************************************
# ****************** Specific widgets for TinyMCEMemo plugin ************
# ***********************************************************************

class TinyMCEMemo2x2Widget(BaseTinyMCEMemoWidget):
    """
    TinyMCE memo 2x2 plugin widget.
    """
    plugin_uid = 'tinymce_memo_2x2'
    cols = 2
    rows = 2


class TinyMCEMemo3x3Widget(BaseTinyMCEMemoWidget):
    """
    TinyMCE memo 3x3 plugin widget.
    """
    plugin_uid = 'tinymce_memo_3x3'
    cols = 3
    rows = 3


class TinyMCEMemo4x4Widget(BaseTinyMCEMemoWidget):
    """
    TinyMCE memo 4x4 plugin widget.
    """
    plugin_uid = 'tinymce_memo_4x4'
    cols = 4
    rows = 4


class TinyMCEMemo5x5Widget(BaseTinyMCEMemoWidget):
    """
    TinyMCE memo 5x5 plugin widget.
    """
    plugin_uid = 'tinymce_memo_5x5'
    cols = 5
    rows = 5

########NEW FILE########
__FILENAME__ = forms
__author__ = 'Artur Barseghyan <artur.barseghyan@gmail.com>'
__copyright__ = 'Copyright (c) 2013 Artur Barseghyan'
__license__ = 'GPL 2.0/LGPL 2.1'
__all__ = ('MemoForm', 'TinyMCEMemoForm')

from django import forms
from django.utils.translation import ugettext_lazy as _

from tinymce.widgets import TinyMCE

from dash.base import DashboardPluginFormBase

class MemoForm(forms.Form, DashboardPluginFormBase):
    """
    Memo form (for ``Memo`` plugin).
    """
    plugin_data_fields = [
        ("title", ""),
        ("text", "")
    ]

    title = forms.CharField(label=_("Title"), required=False)
    text = forms.CharField(label=_("Text"), required=True, widget=forms.widgets.Textarea)

# Basic TinyMCE config
mce_attrs = {
    'plugins': 'visualchars,paste',
    'theme': 'advanced',
    'theme_advanced_buttons1': 'formatselect,|,bold,italic,underline,|,bullist,numlist',
    'theme_advanced_buttons2': 'link,unlink,|,code',
    'width': '300',
    'delta_height': '150',
    'relative_urls': 0
}

class TinyMCEMemoForm(forms.Form, DashboardPluginFormBase):
    """
    TinyMCE memo form (for ``TinyMCEMemo`` plugin).
    """
    plugin_data_fields = [
        ("title", ""),
        ("text", "")
    ]

    title = forms.CharField(label=_("Title"), required=False)
    text = forms.CharField(label=_("HTML"), required=True, widget=TinyMCE(mce_attrs=mce_attrs))

########NEW FILE########
__FILENAME__ = admin
__author__ = 'Artur Barseghyan <artur.barseghyan@gmail.com>'
__copyright__ = 'Copyright (c) 2013 Artur Barseghyan'
__license__ = 'GPL 2.0/LGPL 2.1'

from django.contrib import admin
from django.utils.translation import ugettext_lazy as _

from slim.admin import SlimAdmin

from dash.contrib.plugins.news.models import NewsItem

class NewsItemAdmin(SlimAdmin):
    """
    Foo item admin.
    """
    # If you don't inherit the SlimAdmin, append 'language' and 'available_translations_admin' to ``list_display``.
    list_display = ('title', 'admin_image_preview', 'date_published')

    # If you don't inherit the SlimAdmin, append 'available_translations_exclude_current_admin' to ``readonly_fields``.
    readonly_fields = ('date_created', 'date_updated', )

    ordering = ('-date_published',)

    prepopulated_fields = {'slug': ('title',)}

    collapse_slim_fieldset = False

    fieldsets = (
        (None, {
            'fields': ('title', 'slug', 'body', 'image')
        }),
        (_("Publication date"), {
            'classes': ('',),
            'fields': ('date_published',)
        }),
        (_("Additional"), {
            'classes': ('collapse',),
            'fields': ('date_created', 'date_updated')
        })
    )

    class Meta:
        app_label = _('News item')


admin.site.register(NewsItem, NewsItemAdmin)

########NEW FILE########
__FILENAME__ = constants
# Gets params for date filtering
DATE_LOWER_GET_PARAM = 'date_lower'
DATE_UPPER_GET_PARAM  = 'date_upper'
PAGE_URL_PARAM = 'page'
NUM_POSTS_URL_PARAM = 'num_posts'

# Max number of posts when browsing
MAX_NUM_POSTS_LISTING = 25

########NEW FILE########
__FILENAME__ = dash_plugins
__author__ = 'Artur Barseghyan <artur.barseghyan@gmail.com>'
__copyright__ = 'Copyright (c) 2013 Artur Barseghyan'
__license__ = 'GPL 2.0/LGPL 2.1'
__all__ = ('BaseNewsPlugin',)

from django.utils.translation import ugettext_lazy as _

from slim.helpers import get_language_from_request

from dash.base import BaseDashboardPlugin
from dash.factory import plugin_factory
from dash.contrib.plugins.news.models import NewsItem
from dash.contrib.plugins.news.forms import NewsForm

# ********************************************************************************
# ****************************** Base News plugin ********************************
# ********************************************************************************

class BaseNewsPlugin(BaseDashboardPlugin):
    """
    Base news plugin.
    """
    name = _("News")
    form = NewsForm
    group = _("News")

    def post_processor(self):
        """
        Getting news items for the current active language.
        """
        results_kwargs = {}

        language = get_language_from_request(self.request)
        if language is not None:
            results_kwargs.update({'language': language})

        self.data.news_items = NewsItem._default_manager.filter(**results_kwargs) \
                                       .order_by('-date_published')[:self.data.max_items]

# ********************************************************************************
# ********** Generating and registering the plugins using factory ****************
# ********************************************************************************

sizes = (
    (2, 5),
    (4, 5)
)

plugin_factory(BaseNewsPlugin, 'news', sizes)

########NEW FILE########
__FILENAME__ = dash_widgets
__author__ = 'Artur Barseghyan <artur.barseghyan@gmail.com>'
__copyright__ = 'Copyright (c) 2013 Artur Barseghyan'
__license__ = 'GPL 2.0/LGPL 2.1'
__all__ = ('BaseNewsWidget', 'News2x5Widget', 'News4x5Widget')

from django.template.loader import render_to_string

from dash.base import BaseDashboardPluginWidget
from dash.contrib.plugins.news.constants import PAGE_URL_PARAM, NUM_POSTS_URL_PARAM

# ***********************************************************************
# ********************** Base widget for Memo plugin ********************
# ***********************************************************************

class BaseNewsWidget(BaseDashboardPluginWidget):
    """
    Base news widget.
    """
    media_css = [
        'css/dash_plugin_news.css',
    ]

    def render(self, request=None):
        context = {'plugin': self.plugin,}
        return render_to_string('news/render.html', context)

# ***********************************************************************
# ********************** Specific widgets for Memo plugin ***************
# ***********************************************************************

class News2x5Widget(BaseNewsWidget):
    """
    News plugin 2x5 widget.
    """
    plugin_uid = 'news_2x5'
    cols = 2
    rows = 5

    media_js = [
        'js/dash_plugin_2x5_news.js',
    ]


class News4x5Widget(BaseNewsWidget):
    """
    News plugin 4x5 widget.
    """
    plugin_uid = 'news_4x5'
    cols = 4
    rows = 5

    media_js = [
        'js/dash_plugin_4x5_news.js',
    ]

    def render(self, request=None):
        context = {
            'plugin': self.plugin,
            'PAGE_URL_PARAM': PAGE_URL_PARAM,
            'NUM_POSTS_URL_PARAM': NUM_POSTS_URL_PARAM
            }
        return render_to_string('news/render_4x5_main.html', context)

########NEW FILE########
__FILENAME__ = defaults
DEFAULT_MAX_NEWS_ITEMS = 6
DEFAULT_TRUNCATE_AFTER = 35
DEFAULT_CACHE_FOR = 3600
DEFAULT_SHOW_TITLE = True

########NEW FILE########
__FILENAME__ = forms
__author__ = 'Artur Barseghyan <artur.barseghyan@gmail.com>'
__copyright__ = 'Copyright (c) 2013 Artur Barseghyan'
__license__ = 'GPL 2.0/LGPL 2.1'
__all__ = ('NewsForm',)

from django import forms
from django.utils.translation import ugettext_lazy as _

from dash.base import DashboardPluginFormBase
from dash.widgets import BooleanRadioSelect
from dash.contrib.plugins.news.defaults import DEFAULT_MAX_NEWS_ITEMS, DEFAULT_TRUNCATE_AFTER, DEFAULT_CACHE_FOR
from dash.contrib.plugins.rss_feed.defaults import DEFAULT_SHOW_TITLE

class NewsForm(forms.Form, DashboardPluginFormBase):
    """
    Form for main ``NewsPlugin``.
    """
    plugin_data_fields = [
        ("show_title", DEFAULT_SHOW_TITLE),
        ("max_items", DEFAULT_MAX_NEWS_ITEMS),
        ("truncate_after", DEFAULT_TRUNCATE_AFTER),
        ("cache_for", DEFAULT_CACHE_FOR)
    ]
    show_title = forms.BooleanField(label=_("Show title?"), required=False, initial=DEFAULT_SHOW_TITLE, \
                                    widget=BooleanRadioSelect)
    max_items = forms.IntegerField(label=_("Max feed items to show"), required=True, initial=DEFAULT_MAX_NEWS_ITEMS)
    truncate_after = forms.IntegerField(label=_("Truncate after"), required=False, initial=DEFAULT_TRUNCATE_AFTER)
    cache_for = forms.IntegerField(label=_("Cache for"), required=True, initial=DEFAULT_CACHE_FOR)

########NEW FILE########
__FILENAME__ = news_create_test_data
import subprocess
import random
import os
import uuid
import logging
import zipfile
import shutil

from six import text_type, PY3
from six.moves.urllib import request

if PY3:
    from string import punctuation
else:
    from string import translate, maketrans, punctuation

import radar

from django.core.management.base import BaseCommand
from django.utils.text import slugify
from django.conf import settings

from dash.contrib.plugins.news.models import NewsItem, NEWS_IMAGES_STORAGE_PATH

logger = logging.getLogger(__file__)

FACTORY = """
    Sed dictum in tellus non iaculis. Aenean ac interdum ipsum. Etiam tempor quis ante vel rhoncus. Nulla
    facilisi. Curabitur iaculis consequat odio ut imperdiet? Integer accumsan; nisl vitae fermentum malesuada,
    sapien nulla sodales orci, et elementum lacus purus vel purus! Nullam orci neque, tristique in porta id,
    pretium ac sem. Fusce non est risus. Fusce convallis tellus augue, quis volutpat tellus dapibus sagittis.
    Integer lacinia commodo risus vel cursus. Etiam vitae dui in dolor porta luctus sed id elit. Nulla et est
    nec magna facilisis sagittis. Praesent tincidunt dictum lectus, sed aliquam eros. Donec placerat tortor ut
    lorem facilisis congue. Quisque ac risus nibh. Etiam ultrices nibh justo; sed mollis ipsum dapibus vitae.Ut
    vitae molestie erat. Mauris ac justo quis ante posuere vehicula. Vivamus accumsan mi volutpat diam lacinia,
    vitae semper lectus pharetra. Cras ultrices arcu nec viverra consectetur. Cras placerat ante quis dui
    consequat cursus. Nulla at enim dictum, consectetur ligula eget, vehicula nisi. Suspendisse eu ligula vitae
    est tristique accumsan nec adipiscing risus.Donec tempus dui eget mollis fringilla. Fusce eleifend lacus lectus,
    vel ornare felis lacinia ut. Morbi vel adipiscing augue. Vestibulum ante ipsum primis in faucibus orci luctus et
    ultrices posuere cubilia Curae; Cras mattis pulvinar lacus, vitae pulvinar magna egestas non. Aliquam in urna
    quis leo feugiat faucibus. Aliquam erat volutpat. Maecenas non mauris libero. Suspendisse nisi lorem, cursus a
    tristique a, porttitor in nisl. Mauris pellentesque gravida mi non mattis. Cras mauris ligula, interdum semper
    tincidunt sed, ornare a ipsum. Nulla ultrices tempus tortor vitae vehicula.Etiam at augue suscipit, vehicula
    sapien sit amet; eleifend orci. Etiam venenatis leo nec cursus mattis. Nulla suscipit nec lorem et lobortis.
    Donec interdum vehicula massa sed aliquam. Praesent eleifend mi sed mi pretium pellentesque. In in nisi tincidunt,
    commodo lorem quis; tincidunt nisl. In suscipit quam a vehicula tincidunt! Fusce vitae varius nunc. Proin at
    ipsum ac tellus hendrerit ultricies. Phasellus auctor hendrerit sapien viverra facilisis. Suspendisse lacus erat,
    cursus at dolor in, vulputate convallis sapien. Etiam augue nunc, lobortis vel viverra sit amet, pretium et
    lacus.Pellentesque elementum lectus eget massa tempus elementum? Nulla nec auctor dolor. Aliquam congue purus
    quis libero fermentum cursus. Etiam quis massa ac nisl accumsan convallis vitae ac augue. Mauris neque est,
    posuere quis dolor non, volutpat gravida tortor. Cum sociis natoque penatibus et magnis dis parturient montes,
    nascetur ridiculus mus. Vivamus ullamcorper, urna at ultrices aliquam, orci libero gravida ligula, non pulvinar
    sem magna sed tortor. Sed elementum leo viverra ipsum aliquet convallis. Suspendisse scelerisque auctor sapien.
    Mauris enim nisl, sollicitudin at rhoncus vitae, convallis nec mauris. Phasellus sollicitudin dui ut luctus
    consectetur. Vivamus placerat, neque id sagittis porttitor, nunc quam varius dolor, sit amet egestas nulla
    risus eu odio. Mauris gravida eleifend laoreet. Aenean a nulla nisl. Integer pharetra magna adipiscing, imperdiet
    augue ac, blandit felis. Cras id aliquam neque, vel consequat sapien.Duis eget vulputate ligula. Aliquam ornare
    dui non nunc laoreet, non viverra dolor semper. Aenean ullamcorper velit sit amet dignissim fermentum! Aenean urna
    leo, rutrum volutpat mauris nec, facilisis molestie tortor. In convallis pellentesque lorem, a lobortis erat
    molestie et! Ut sed sem a odio aliquam elementum. Morbi pretium velit libero, adipiscing consequat leo dignissim
    eu. Mauris vestibulum feugiat risus; quis pharetra purus tincidunt quis. Morbi semper tincidunt lorem id iaculis.
    Quisque non pulvinar magna. Morbi consequat eleifend neque et iaculis. Fusce non laoreet urna. Donec ut nunc
    ultrices, fringilla nunc ut, tempor elit. Phasellus semper sapien augue, in gravida neque egestas at.
    Integer dapibus lacus vitae luctus sagittis! Suspendisse imperdiet tortor eget mattis consectetur. Aliquam viverra
    purus a quam lacinia euismod. Nunc non consequat mi; ac vehicula lacus. Pellentesque accumsan ac diam in fermentum!
    Maecenas quis nibh sed dolor adipiscing facilisis. Aenean vel arcu eu est fermentum egestas vulputate eget purus.
    Sed fermentum rhoncus dapibus. Quisque molestie magna eu accumsan lobortis. Vestibulum cursus euismod posuere.
    Aliquam eu dapibus urna. Nulla id accumsan justo. Vivamus vitae ullamcorper tellus. Class aptent taciti sociosqu
    ad litora torquent per conubia nostra, per inceptos himenaeos.Donec pulvinar tempus lectus vitae ultricies.
    Vestibulum sagittis orci quis risus ultricies feugiat. Nunc feugiat velit est, at aliquam massa tristique eu.
    Aenean quis enim vel leo vestibulum volutpat in non elit. Quisque molestie tincidunt purus; ac lacinia mauris
    rhoncus in. Nullam id arcu at mauris varius viverra ut vitae massa. In ac nunc ipsum. Proin consectetur urna sit
    amet mattis vulputate. Nullam lacinia pretium tempus. Aenean quis ornare metus, tempus volutpat neque. Mauris
    volutpat scelerisque augue; at lobortis nulla rhoncus vitae. Mauris at lobortis turpis. Vivamus et ultrices lacus.
    Donec fermentum neque in eros cursus, ac tincidunt sapien consequat. Curabitur varius commodo rutrum. Nulla
    facilisi. Ut feugiat dui nec turpis sodales aliquam. Quisque auctor vestibulum condimentum. Quisque nec eros
    lorem. Curabitur et felis nec diam dictum ultrices vestibulum ac eros! Quisque eu pretium lacus. Morbi bibendum
    sagittis rutrum. Nam eget tellus quam. Nullam pharetra vestibulum justo. Donec molestie urna et scelerisque
    laoreet? Sed consectetur pretium hendrerit. Quisque erat nulla, elementum sit amet nibh vel, posuere pulvinar
    nulla. Donec elementum adipiscing dictum! Nam euismod semper nisi, eu lacinia felis placerat vel! Praesent eget
    dapibus turpis, et fringilla elit. Maecenas quis nunc cursus felis fringilla consequat! Cum sociis natoque
    penatibus et magnis dis parturient montes, nascetur ridiculus mus. Sed ullamcorper libero quis nisl sollicitudin,
    ut pulvinar arcu consectetur. Donec nisi nibh, condimentum et lectus non, accumsan imperdiet ipsum. Maecenas vitae
    massa eget lorem ornare dignissim. Nullam condimentum mauris id quam tincidunt venenatis. Aenean mattis viverra
    sem, vitae luctus velit rhoncus non. Vestibulum leo justo, rhoncus at aliquam et, iaculis sed dolor. Integer
    bibendum vitae urna in ornare! Cras accumsan nulla eu libero tempus, in dignissim augue imperdiet. Vivamus a
    lacinia odio. Curabitur id egestas eros. Integer non rutrum est. In nibh sem, tempus ac dignissim vel, ornare ac
    mi. Nulla congue scelerisque est nec commodo. Phasellus turpis lorem, sodales quis sem id, facilisis commodo
    massa. Vestibulum ultrices dolor eget purus semper euismod? Fusce id congue leo. Quisque dui magna, ullamcorper
    et leo eget, commodo facilisis ipsum. Curabitur congue vitae risus nec posuere. Phasellus tempor ligula in nisl
    pellentesque mattis. Sed nunc turpis, pharetra vel leo ac, lacinia cursus risus. Quisque congue aliquet volutpat.
    Integer dictum est quis semper tristique. Donec feugiat vestibulum tortor, id fringilla nisi lobortis eu. Nam
    hendrerit egestas sem, non mollis tortor iaculis quis. Phasellus id aliquet erat. Nunc facilisis nisi dolor,
    quis semper dui euismod vel. Cras convallis bibendum tortor malesuada tincidunt. Sed urna quam, pellentesque
    eget eleifend ac, consequat bibendum urna. Sed fringilla elit hendrerit leo blandit laoreet eget quis quam!
    Morbi eu leo a dolor aliquet dictum. Suspendisse condimentum mauris non ipsum rhoncus, sit amet hendrerit augue
    gravida. Quisque facilisis pharetra felis faucibus gravida. In arcu neque, gravida ut fermentum ut, placerat eu
    quam. Nullam aliquet lectus mauris, quis dignissim est mollis sed. Ut vestibulum laoreet eros quis cursus. Proin
    commodo eros in mollis mollis. Mauris bibendum cursus nibh, sit amet eleifend mauris luctus vitae. Sed aliquet
    pretium tristique. Morbi ultricies augue a lacinia porta. Nullam mollis erat non imperdiet imperdiet. Etiam
    tincidunt fringilla ligula, in adipiscing libero viverra eu. Nunc gravida hendrerit massa, in pellentesque nunc
    dictum id.
    """

if PY3:
    split_words = lambda f: list(set(f.lower().translate(str.maketrans("", "", punctuation)).split()))
else:
    split_words = lambda f: list(set(translate(f.lower(), maketrans(punctuation, ' ' * len(punctuation))).split()))

split_sentences = lambda f: f.split('?')
change_date = lambda: bool(random.randint(0, 1))

WORDS = split_words(FACTORY)
SENTENCES = split_sentences(FACTORY)
NUM_ITEMS = 50

def fix_image(image):
    """
    Fixes the image path.

    :param string image: Image path.
    :return string: Fixed image path.
    """
    image = os.path.join(NEWS_IMAGES_STORAGE_PATH, image.replace(settings.MEDIA_ROOT, ''))
    if image.startswith('/'):
        image = image[1:]
    return image

def _build_image_factory():
    """
    Clones the https://bitbucket.org/barseghyanartur/delusionalinsanity.images repository locally to
    grab the images. Then makes a list of all the images.

    :return list: List of relative paths to images.
    """
    try:
        subprocess.call(['rm', os.path.join(settings.MEDIA_ROOT, 'delusionalinsanity.images'), '-rf'])
    except Exception as e:
        logger.debug(e)

    try:
        subprocess.call(['hg', 'clone',
            'https://barseghyanartur@bitbucket.org/barseghyanartur/delusionalinsanity.images',
            os.path.join(settings.MEDIA_ROOT, 'delusionalinsanity.images')
            ])
        source_dir = os.path.join(settings.MEDIA_ROOT, 'delusionalinsanity.images', 'images')
        images_dir = os.path.join(settings.MEDIA_ROOT, NEWS_IMAGES_STORAGE_PATH)
        subprocess.call(['mv', source_dir, images_dir])
        images = [os.path.join(images_dir, f) for f in os.listdir(images_dir)]
        return [fix_image(i) for i in images]
    except Exception as e:
        logger.debug(e)
        return []

def build_image_factory():
    """
    Downloads the https://github.com/barseghyanartur/delusionalinsanity.images/archive/latest.zip locally,
    unpacks it to grab the images. Then makes a list of all the images.

    :return list: List of relative paths to images.
    """
    try:
        shutil.rmtree(os.path.join(settings.MEDIA_ROOT, 'delusionalinsanity.images-latest'))
    except Exception as e:
        logger.debug(e)

    try:
        download_local = os.path.join(settings.MEDIA_ROOT, 'delusionalinsanity_images_latest.zip')
        request.urlretrieve(
            'https://github.com/barseghyanartur/delusionalinsanity.images/archive/latest.zip',
            download_local
            )

        zfile = zipfile.ZipFile(download_local)
        names = zfile.namelist()

        for name in names:
            try:
                dirname, filename = os.path.split(name)

                if not filename:
                    continue

                dirname = os.path.join(settings.MEDIA_ROOT, dirname)
                if not os.path.exists(dirname):
                    os.mkdir(dirname)

                fd = open(os.path.join(settings.MEDIA_ROOT, name), "w")
                fd.write(zfile.read(name))
                fd.close()
            except Exception as e:
                logger.debug(e)

        source_dir = os.path.join(settings.MEDIA_ROOT, 'delusionalinsanity.images-latest', 'images')
        images_dir = os.path.join(settings.MEDIA_ROOT, NEWS_IMAGES_STORAGE_PATH)
        shutil.move(source_dir, images_dir)
        images = [os.path.join(images_dir, f) for f in os.listdir(images_dir)]
        return [fix_image(i) for i in images]
    except Exception as e:
        logger.debug(e)
        return []

class Command(BaseCommand):
    """
    Populating dummy news items.
    """
    def handle(self, *args, **options):
        words = WORDS[:]
        images = build_image_factory()

        if not len(images):
            images = [None for i in range(NUM_ITEMS)]

        while len(images):
            i = NewsItem()
            random_name = words[random.randint(0, len(words) - 1)]
            i.title = text_type(random_name).capitalize()
            i.slug = "{0}-{1}".format(slugify(i.title), uuid.uuid4())
            i.image = images.pop()
            i.body = text_type(SENTENCES[random.randint(0, len(SENTENCES) - 1)])
            i.date_published = radar.random_datetime()

            try:
                i.save()
                words.remove(random_name)

            except Exception as e:
                images.append(i.image)
                logger.debug(e)

########NEW FILE########
__FILENAME__ = models
__author__ = 'Artur Barseghyan <artur.barseghyan@gmail.com>'
__copyright__ = 'Copyright (c) 2013 Artur Barseghyan'
__license__ = 'GPL 2.0/LGPL 2.1'

import datetime

from django.db import models
from django.utils.translation import ugettext_lazy as _
from django.template.loader import render_to_string
from django.core.urlresolvers import reverse

from tinymce.models import HTMLField

from slim import Slim, LanguageField
from slim.models.decorators import auto_prepend_language

NEWS_IMAGES_STORAGE_PATH = 'news-images'

def _news_images(instance, filename):
    """
    Store the images in their own folder. This allows us to keep thumbnailed versions of all images.
    """
    if instance.pk:
        return '{0}/{1}-{2}'.format(NEWS_IMAGES_STORAGE_PATH, str(instance.pk), filename.replace(' ', '-'))
    return '{0}/{1}'.format(NEWS_IMAGES_STORAGE_PATH, filename.replace(' ', '-'))

class NewsItem(models.Model, Slim):
    """
    News item.

    - `title`: Title of the news item.
    - `body`: Teaser of the news item. WYSIWYG.
    - `image`: Headline image of the news item.
    - `date_published`: Date item is published. On creating defaults to ``datetime.datetime.now``.
    - `language`: Language.
    """
    title = models.CharField(_("Title"), max_length=100)
    body = HTMLField(_("Body"))
    image = models.ImageField(_("Headline image"), blank=True, null=True, upload_to=_news_images)
    date_published = models.DateTimeField(_("Date published"), blank=True, null=True, default=datetime.datetime.now())
    slug = models.SlugField(unique=True, verbose_name=_("Slug"))

    language = LanguageField()

    date_created = models.DateTimeField(_("Date created"), blank=True, null=True, auto_now_add=True, editable=False)
    date_updated = models.DateTimeField(_("Date updated"), blank=True, null=True, auto_now=True, editable=False)

    class Meta:
        verbose_name = _("News item")
        verbose_name_plural = _("News items")

    def __unicode__(self):
        return self.title

    @auto_prepend_language
    def get_absolute_url(self):
        """
        Absolute URL, which goes to the foo item detail page.

        :return string:
        """
        kwargs = {'slug': self.slug}
        return reverse('news.detail', kwargs=kwargs)

    def admin_image_preview(self):
        """
        Preview of the ``image``. For admin use mainly.

        :return string:
        """
        if self.image:
            return render_to_string('news/_image_preview.html', {'alt': self.title, 'image_file': self.image})
        else:
            return u''
    admin_image_preview.allow_tags = True
    admin_image_preview.short_description = _('Image')

########NEW FILE########
__FILENAME__ = urls
from django.conf.urls import patterns, url

urlpatterns = patterns('dash.contrib.plugins.news.views',
    # Listing URL
    url(r'^$', view='browse', name='news.browse'),

    # Detail URL
    url(r'^(?P<slug>(?!overview\-)[\w\-\_\.\,]+)/$', view='detail', name='news.detail'),
)
########NEW FILE########
__FILENAME__ = views
__author__ = 'Artur Barseghyan <artur.barseghyan@gmail.com>'
__copyright__ = 'Copyright (c) 2013 Artur Barseghyan'
__license__ = 'GPL 2.0/LGPL 2.1'
__all__ = ('browse', 'detail')

from django.http import Http404
from django.shortcuts import render_to_response
from django.template import RequestContext
from django.utils import translation
from django.contrib.auth.decorators import login_required
from django.core.paginator import Paginator, InvalidPage
from django.views.decorators.csrf import csrf_exempt
from django.utils.translation import ugettext_lazy as _

from slim.helpers import get_language_from_request

from dash.base import get_layout
from dash.utils import get_or_create_dashboard_settings
from dash.contrib.plugins.news.models import NewsItem
from dash.contrib.plugins.news.constants import MAX_NUM_POSTS_LISTING, PAGE_URL_PARAM, NUM_POSTS_URL_PARAM
from dash.contrib.plugins.news.defaults import DEFAULT_MAX_NEWS_ITEMS

@csrf_exempt
@login_required
def browse(request, template_name='news/browse.html', template_name_ajax='news/browse_ajax.html'):
    """
    In the template, we show all available NewsItems for current language.

    :param django.http.HttpRequest request:
    :param string template_name:
    :return django.http.HttpResponse:
    """
    # Getting dashboard settings for the user. Then get users' layout.
    dashboard_settings = get_or_create_dashboard_settings(request.user)
    layout = get_layout(layout_uid=dashboard_settings.layout_uid, as_instance=True)

    language = get_language_from_request(request)

    results_kwargs = {}

    if language is not None:
        translation.activate(language)
        results_kwargs.update({'language': language})

    queryset = NewsItem._default_manager.filter(**results_kwargs).order_by('-date_published')

    page = request.GET.get(PAGE_URL_PARAM, 1)
    #import ipdb; ipdb.set_trace()
    num_posts = request.GET.get(NUM_POSTS_URL_PARAM, DEFAULT_MAX_NEWS_ITEMS)

    try:
        num_posts = int(num_posts)
    except Exception as e:
        num_posts = DEFAULT_MAX_NEWS_ITEMS

    if num_posts < 1 or num_posts > MAX_NUM_POSTS_LISTING:
        num_posts = DEFAULT_MAX_NEWS_ITEMS

    paginator = Paginator(queryset, num_posts, allow_empty_first_page=False)

    try:
        page_number = int(page)
    except ValueError as e:
        if 'last' == page:
            page_number = paginator.num_pages
        else:
            raise Http404(_("Invalid page!"))

    try:
        page_obj = paginator.page(page_number)
    except InvalidPage as e:
        raise Http404(_("Invalid page!"))

    context = {
        'layout': layout,

        'PAGE_URL_PARAM': PAGE_URL_PARAM,
        'NUM_POSTS_URL_PARAM': NUM_POSTS_URL_PARAM,

        # Pagination specific
        'paginator': paginator,
        'page_obj': page_obj,
        'results_per_page': paginator.per_page,
        'has_next': page_obj.has_next(),
        'has_previous': page_obj.has_previous(),
        'page': page_obj.number,
        'next': page_obj.next_page_number() if page_obj.has_next() and page_obj.next_page_number() is not None else '',
        'previous': page_obj.previous_page_number() if page_obj.has_previous() and page_obj.previous_page_number() is not None else '',
        'first_on_page': page_obj.start_index(),
        'last_on_page': page_obj.end_index(),
        'pages': paginator.num_pages,
        'hits': paginator.count,
        'page_range': paginator.page_range,
        'items': page_obj.object_list,
        'request_path': request.path
    }

    if request.is_ajax():
        template_name = template_name_ajax

    return render_to_response(template_name, context, context_instance=RequestContext(request))


def detail(request, slug, template_name='news/detail.html', template_name_ajax='news/detail_ajax.html'):
    """
    News item detail. In the template, we show the title and the body of the News item and links to all its' all
    available translations.

    :param django.http.HttpRequest request:
    :param string slug: Foo item slug.
    :param string template_name:
    :return django.http.HttpResponse:
    """
    layout = get_layout(as_instance=True)

    language = get_language_from_request(request)

    if language is not None:
        translation.activate(language)

    results_kwargs = {'slug': slug}

    try:
        queryset = NewsItem._default_manager.filter(**results_kwargs)

        item = queryset.get(**results_kwargs)
    except Exception as e:
        raise Http404

    context = {
        'layout': layout,
        'item': item
        }

    if request.is_ajax():
        template_name = template_name_ajax

    return render_to_response(template_name, context, context_instance=RequestContext(request))

########NEW FILE########
__FILENAME__ = dash_plugins
__author__ = 'Artur Barseghyan <artur.barseghyan@gmail.com>'
__copyright__ = 'Copyright (c) 2013 Artur Barseghyan'
__license__ = 'GPL 2.0/LGPL 2.1'
__all__ = ('BaseReadRSSFeedPlugin',)

from django.utils.translation import ugettext_lazy as _

from dash.base import BaseDashboardPlugin
from dash.factory import plugin_factory
from dash.contrib.plugins.rss_feed.forms import ReadRSSFeedForm

# ********************************************************************************
# ********************************* Base Read RSS feed plugin ********************
# ********************************************************************************

class BaseReadRSSFeedPlugin(BaseDashboardPlugin):
    """
    Base Read RSS feed into HTML plugin.
    """
    name = _("Read RSS feed")
    form = ReadRSSFeedForm
    group = _("Internet")

# ********************************************************************************
# ********** Generating and registering the plugins using factory ****************
# ********************************************************************************
sizes = (
    (2, 3),
    (3, 3),
)

plugin_factory(BaseReadRSSFeedPlugin, 'read_rss_feed', sizes)

########NEW FILE########
__FILENAME__ = dash_widgets
__author__ = 'Artur Barseghyan <artur.barseghyan@gmail.com>'
__copyright__ = 'Copyright (c) 2013 Artur Barseghyan'
__license__ = 'GPL 2.0/LGPL 2.1'
__all__ = ('BaseReadRSSFeedWidget', 'ReadRSSFeed2x3Widget', 'ReadRSSFeed3x3Widget')

from django.core.context_processors import csrf
from django.template.loader import render_to_string

from dash.base import BaseDashboardPluginWidget

# ************************************************************************
# ****************** Android widgets for Read RSS feed plugin ************
# ************************************************************************

class BaseReadRSSFeedWidget(BaseDashboardPluginWidget):
    """
    Base read RSS feed plugin widget.
    """
    media_js = [
        'js/dash_plugin_read_rss_feed.js',
    ]
    media_css = [
        'css/dash_plugin_read_rss_feed.css',
    ]

    def render(self, request=None):
        context = {'plugin': self.plugin, 'csrfmiddlewaretoken': csrf(request)}
        return render_to_string('rss_feed/render.html', context)

# ***********************************************************************
# ********************** Specific widgets for Memo plugin ***************
# ***********************************************************************

class ReadRSSFeed2x3Widget(BaseReadRSSFeedWidget):
    """
    Read RSS feed 2x3 plugin widget.
    """
    plugin_uid = 'read_rss_feed_2x3'
    cols = 2
    rows = 3


class ReadRSSFeed3x3Widget(BaseReadRSSFeedWidget):
    """
    Big read RSS 3x3 feed plugin widget.
    """
    plugin_uid = 'read_rss_feed_3x3'
    cols = 3
    rows = 3

########NEW FILE########
__FILENAME__ = defaults
DEFAULT_MAX_FEED_ITEMS = 6
DEFAULT_TRUNCATE_AFTER = 35
DEFAULT_CACHE_FOR = 3600
DEFAULT_SHOW_TITLE = True

########NEW FILE########
__FILENAME__ = forms
__author__ = 'Artur Barseghyan <artur.barseghyan@gmail.com>'
__copyright__ = 'Copyright (c) 2013 Artur Barseghyan'
__license__ = 'GPL 2.0/LGPL 2.1'
__all__ = ('ReadRSSFeedForm',)

from django import forms
from django.utils.translation import ugettext_lazy as _

from dash.base import DashboardPluginFormBase
from dash.widgets import BooleanRadioSelect
from dash.contrib.plugins.rss_feed.defaults import DEFAULT_MAX_FEED_ITEMS, DEFAULT_TRUNCATE_AFTER, DEFAULT_CACHE_FOR
from dash.contrib.plugins.rss_feed.defaults import DEFAULT_SHOW_TITLE

class ReadRSSFeedForm(forms.Form, DashboardPluginFormBase):
    """
    Form for main ``ReadRSSFeedPlugin``.
    """
    plugin_data_fields = [
        ("feed_url", ""),
        ("custom_feed_title", ""),
        ("show_feed_title", DEFAULT_SHOW_TITLE),
        ("max_items", DEFAULT_MAX_FEED_ITEMS),
        ("truncate_after", DEFAULT_TRUNCATE_AFTER),
        ("cache_for", DEFAULT_CACHE_FOR)
    ]
    feed_url = forms.URLField(label=_("Feed URL"), required=True)
    custom_feed_title = forms.CharField(label=_("Custom feed title"), required=False)
    show_feed_title = forms.BooleanField(label=_("Show feed title?"), required=False, initial=DEFAULT_SHOW_TITLE, \
                                         widget=BooleanRadioSelect)
    max_items = forms.IntegerField(label=_("Max feed items to show"), required=True, initial=DEFAULT_MAX_FEED_ITEMS)
    truncate_after = forms.IntegerField(label=_("Truncate after"), required=False, initial=DEFAULT_TRUNCATE_AFTER)
    cache_for = forms.IntegerField(label=_("Cache for"), required=True, initial=DEFAULT_CACHE_FOR)

########NEW FILE########
__FILENAME__ = helpers
__author__ = 'Artur Barseghyan <artur.barseghyan@gmail.com>'
__copyright__ = 'Copyright (c) 2013 Artur Barseghyan'
__license__ = 'GPL 2.0/LGPL 2.1'
__all__ = ('max_num_template',)

# Nax num of items in a template
max_num_template = lambda max_items, default: ':{0}'.format(max_items if max_items else default)

########NEW FILE########
__FILENAME__ = rss_feed_tags
import datetime

from django import template

register = template.Library()

@register.filter
def convert_to_datetime(value):
    converted = datetime.datetime(
        year = value.tm_year,
        month = value.tm_mon,
        day = value.tm_mday,
        hour = value.tm_hour,
        minute = value.tm_min,
        second = value.tm_sec
    )
    return converted

########NEW FILE########
__FILENAME__ = urls
from django.conf.urls import patterns, url

urlpatterns = patterns('dash.contrib.plugins.rss_feed.views',
    url(r'^get_feed/(?P<layout_uid>[\w_]+)/(?P<placeholder_uid>[\w_]+)/(?P<plugin_uid>[\w_\-]+)/$', \
        view='get_feed', name='dash.contrib.plugins.rss_feed.get_feed'),
)

########NEW FILE########
__FILENAME__ = views
__author__ = 'Artur Barseghyan <artur.barseghyan@gmail.com>'
__copyright__ = 'Copyright (c) 2013 Artur Barseghyan'
__license__ = 'GPL 2.0/LGPL 2.1'
__all__ = ('get_feed',)

import feedparser

from django.core.cache import cache
from django.core.validators import URLValidator
from django.core.exceptions import ValidationError
from django.shortcuts import render_to_response
from django.contrib.auth.decorators import login_required
from django.template import RequestContext
from django.views.decorators.http import require_POST
from django.views.decorators.csrf import csrf_exempt

from dash.contrib.plugins.rss_feed.defaults import DEFAULT_SHOW_TITLE, DEFAULT_TRUNCATE_AFTER, DEFAULT_MAX_FEED_ITEMS
from dash.contrib.plugins.rss_feed.forms import ReadRSSFeedForm
from dash.contrib.plugins.rss_feed.helpers import max_num_template

import logging
logger = logging.getLogger(__name__)

@csrf_exempt
@require_POST
@login_required
def get_feed(request, layout_uid, placeholder_uid, plugin_uid, template_name='rss_feed/get_feed.html', \
             template_name_ajax='rss_feed/get_feed_ajax.html'):
    """
    :param django.http.HttpRequest request:
    :return django.http.HttpResponse:
    """
    form = ReadRSSFeedForm(request.POST)

    context = {}

    if form.is_valid():

        feed_url = form.cleaned_data.get('feed_url')
        custom_feed_title = form.cleaned_data.get('custom_feed_title', None)
        show_feed_title = form.cleaned_data.get('show_feed_title', DEFAULT_SHOW_TITLE)
        max_items = form.cleaned_data.get('max_items')
        truncate_after = form.cleaned_data.get('truncate_after', DEFAULT_TRUNCATE_AFTER)
        cache_for = form.cleaned_data.get('cache_for')

        key = '{0}-{1}-{2}-{3}'.format(layout_uid, placeholder_uid, plugin_uid, feed_url)
        feed = cache.get(key)

        if not feed:

            try:
                validate = URLValidator()
                valid_url = False
                try:
                    validate(feed_url)
                    valid_url = True
                except ValidationError as e:
                    valid_url = False
                    if DEBUG:
                        logger.debug(e)

                # Reading the feed and sending results to the template
                if valid_url:
                    # Saving raw data in case someone wants to show things differently.
                    feed = feedparser.parse(feed_url)
                    cache.set(key, feed, int(cache_for))

            except Exception as e:
                if DEBUG:
                    logger.debug(e)

        context = {
            'feed': feed,
            'custom_feed_title': custom_feed_title,
            'show_feed_title': show_feed_title,
            'truncate_after': truncate_after,
            'max_feed_items': max_num_template(max_items, DEFAULT_MAX_FEED_ITEMS)
        }

    if request.is_ajax():
        template_name = template_name_ajax

    return render_to_response(template_name, context, context_instance=RequestContext(request))

########NEW FILE########
__FILENAME__ = admin
__author__ = 'Artur Barseghyan <artur.barseghyan@gmail.com>'
__copyright__ = 'Copyright (c) 2013 Artur Barseghyan'
__license__ = 'GPL 2.0/LGPL 2.1'
__all__ = ('BookmarkAdmin',)

import logging

from django.contrib import admin
from django.utils.translation import ugettext_lazy as _

from dash.models import DashboardEntry
from dash.contrib.plugins.url.models import Bookmark
from dash.utils import update_plugin_data_for_entries

logger = logging.getLogger(__name__)

class BookmarkAdmin(admin.ModelAdmin):
    """
    Bookmark admin.
    """
    list_display = ('title', 'url', 'external', 'image')

    fieldsets = (
        (None, {
            'fields': ('title', 'url', 'external', 'image')
        }),
    )

    class Meta:
        app_label = _('Bookmark')


    def save_model(self, request, obj, form, change):
        """
        Updating the bookmark plugin entries on bookmarks update.
        """
        super(BookmarkAdmin, self).save_model(request, obj, form, change)

        dashboard_entries = DashboardEntry._default_manager.filter(plugin_uid__startswith='bookmark_')
        try:
            update_plugin_data_for_entries(dashboard_entries=dashboard_entries, request=request)
        except Exception as e:
            logger.debug(str(e))


admin.site.register(Bookmark, BookmarkAdmin)

########NEW FILE########
__FILENAME__ = conf
__author__ = 'Artur Barseghyan <artur.barseghyan@gmail.com>'
__copyright__ = 'Copyright (c) 2013 Artur Barseghyan'
__license__ = 'GPL 2.0/LGPL 2.1'
__all__ = ('get_setting',)

from django.conf import settings

from dash.contrib.plugins.url import defaults

def get_setting(setting, override=None):
    """
    Get a setting from ``dash.contrib.plugins.url`` conf module, falling back to the default.

    If override is not None, it will be used instead of the setting.

    :param setting: String with setting name
    :param override: Value to use when no setting is available. Defaults to None.
    :return: Setting value.
    """
    if override is not None:
        return override
    if hasattr(settings, 'DASH_PLUGIN_URL_{0}'.format(setting)):
        return getattr(settings, 'DASH_PLUGIN_URL_{0}'.format(setting))
    else:
        return getattr(defaults, setting)

########NEW FILE########
__FILENAME__ = dash_plugins
__author__ = 'Artur Barseghyan <artur.barseghyan@gmail.com>'
__copyright__ = 'Copyright (c) 2013 Artur Barseghyan'
__license__ = 'GPL 2.0/LGPL 2.1'
__all__ = ('BaseURLPlugin',)

from django.core.exceptions import ObjectDoesNotExist
from django.utils.translation import ugettext_lazy as _

from dash.base import BaseDashboardPlugin
from dash.factory import plugin_factory
from dash.contrib.plugins.url.forms import URLForm, BookmarkForm
from dash.contrib.plugins.url.models import Bookmark

# ********************************************************************************
# ********************************* URL plugin ***********************************
# ********************************************************************************

class BaseURLPlugin(BaseDashboardPlugin):
    """
    Base URL plugin.
    """
    name = _("URL")
    group = _("URLs")
    form = URLForm

    @property
    def html_class(self):
        """
        If plugin has an image, we add a class `iconic` to it.
        """
        html_class = super(BaseURLPlugin, self).html_class
        if self.data.image:
            html_class += ' iconic-url'
        return html_class

# ********************************************************************************
# ********** Generating and registering the URL plugins using factory ************
# ********************************************************************************

sizes = (
    (1, 1),
    (2, 2)
)

plugin_factory(BaseURLPlugin, 'url', sizes)


# ********************************************************************************
# ********************************* Bookmark plugin ******************************
# ********************************************************************************

class BaseBookmarkPlugin(BaseDashboardPlugin):
    """
    Base URL plugin.
    """
    name = _("Bookmark")
    group = _("URLs")
    form = BookmarkForm

    @property
    def html_class(self):
        """
        If plugin has an image, we add a class `iconic` to it.
        """
        html_class = super(BaseBookmarkPlugin, self).html_class
        if self.data.image:
            html_class += ' iconic-url'
        return html_class

    def update_plugin_data(self, dashboard_entry):
        """
        Should return a dictionary with the plugin data which is supposed to be updated.
        """
        try:
            bookmark = Bookmark._default_manager.get(pk=self.data.bookmark)
        except ObjectDoesNotExist as e:
            return

        if bookmark:
            data = {
                'bookmark': bookmark.pk,
                'title': bookmark.title,
                'url': bookmark.url,
                'external': bookmark.external,
                'image': bookmark.image
            }
            return data

# ********************************************************************************
# ******* Generating and registering the Bookmark plugins using factory **********
# ********************************************************************************

sizes = (
    (1, 1),
    #(2, 2)
)

plugin_factory(BaseBookmarkPlugin, 'bookmark', sizes)

########NEW FILE########
__FILENAME__ = dash_widgets
__author__ = 'Artur Barseghyan <artur.barseghyan@gmail.com>'
__copyright__ = 'Copyright (c) 2013 Artur Barseghyan'
__license__ = 'GPL 2.0/LGPL 2.1'
__all__ = ('BaseURLWidget', 'BaseBookmarkWidget', 'URL1x1Widget', 'URL2x2Widget')

from django.template.loader import render_to_string

from dash.base import BaseDashboardPluginWidget

# **********************************************************************
# ************************* Base URL widget plugin *********************
# **********************************************************************

class BaseURLWidget(BaseDashboardPluginWidget):
    """
    URL plugin widget.
    """
    def render(self, request=None):
        context = {'plugin': self.plugin}
        return render_to_string('url/render.html', context)

# **********************************************************************
# ************************* Base Bookmark widget plugin ****************
# **********************************************************************

class BaseBookmarkWidget(BaseDashboardPluginWidget):
    """
    Bookmark plugin widget.
    """
    def render(self, request=None):
        context = {'plugin': self.plugin}
        return render_to_string('url/render.html', context)

# **********************************************************************
# ************************** Specific widgets **************************
# **********************************************************************

class URL1x1Widget(BaseURLWidget):
    """
    URL plugin 1x1 widget.
    """
    plugin_uid = 'url_1x1'


class URL2x2Widget(BaseURLWidget):
    """
    URL plugin 2x2 widget.
    """
    plugin_uid = 'url_2x2'
    cols = 2
    rows = 2

########NEW FILE########
__FILENAME__ = defaults
__author__ = 'Artur Barseghyan <artur.barseghyan@gmail.com>'
__copyright__ = 'Copyright (c) 2013 Artur Barseghyan'
__license__ = 'GPL 2.0/LGPL 2.1'
__all__ = (
    'IMAGE_CHOICES', 'IMAGE_CHOICES_WITH_EMPTY_OPTION', 'BOOKMARK_IMAGE_CHOICES',
    'BOOKMARK_IMAGE_CHOICES_WITH_EMPTY_OPTION'
)

from django.utils.translation import ugettext_lazy as _

IMAGE_CHOICES = (
    ('icon-film', _("Film")),
    ('icon-coffee', _("Coffee")),
    ('icon-calendar', _("Calendar")),
    ('icon-book', _("Book")),
    ('icon-music', _("Music")),
    ('icon-picture', _("Picture")),
    ('icon-rss-sign', _("RSS")),
    ('icon-star', _("Star")),
    ('icon-thumbs-up', _("Thumbs-up")),
    ('icon-smile', _("Smile")),
    ('icon-gamepad', _("Gamepad")),
    ('icon-plane', _("Plane")),
    ('icon-road', _("Road")),
    ('icon-camera', _("Camera")),
    ('icon-download', _("Download")),
    ('icon-food', _("Food")),
    ('icon-info-sign', _("Info")),
    ('icon-shopping-cart', _("Shopping cart")),
    ('icon-truck', _("Truck")),
    ('icon-wrench', _("Wrench")),
    ('icon-facebook', _("Facebook")),
    ('icon-github', _("Github")),
    ('icon-google-plus', _("Google plus")),
    ('icon-linkedin', _("LinkedIn")),
    ('icon-pinterest', _("Pinterest")),
    ('icon-twitter', _("Twitter")),
    ('icon-youtube', _("Youtube")),
    ('icon-bitbucket', _("Bitbucket")),
    ('icon-android', _("Android")),
    ('icon-apple', _("Apple")),
    ('icon-windows', _("Windows")),
    ('icon-tumblr-sign', _("Tumblr")),
    ('icon-instagram', _("Instagram")),
    ('icon-dropbox', _("Dropbox")),
    ('icon-trophy', _("Trophy")),
    ('icon-legal', _("Legal")),
    ('icon-lock', _("Lock")),
    ('icon-heart', _("Heart")),
    ('icon-question', _("Question")),
    ('icon-headphones', _("Headphones")),
    ('icon-gift', _("Gift")),
    ('icon-key', _("Key")),
    ('icon-female', _("Female")),
    ('icon-male', _("Male")),
    ('icon-comment', _("Comment")),
    ('icon-bug', _("Bug")),
    ('icon-bell', _("Bell")),
    ('icon-search', _("Search")),
    ('icon-map-marker', _("Map marker")),
    ('icon-globe', _("Globe")),
    ('icon-pencil', _("Pensil")),
    ('icon-tasks', _("Tasks")),
)

IMAGE_CHOICES_WITH_EMPTY_OPTION = [('', '---------')] + list(IMAGE_CHOICES)

BOOKMARK_IMAGE_CHOICES = (
    # Icons that are also present in `URLPlugin`.
    ('icon-film', _("Film")),
    #('icon-coffee', _("Coffee")),
    ('icon-calendar', _("Calendar")),
    ('icon-book', _("Book")),
    ('icon-music', _("Music")),
    ('icon-picture', _("Picture")),
    #('icon-rss-sign', _("RSS")),
    ('icon-star', _("Star")),
    ('icon-thumbs-up', _("Thumbs-up")),
    #('icon-smile', _("Smile")),
    #('icon-gamepad', _("Gamepad")),
    ('icon-plane', _("Plane")),
    ('icon-road', _("Road")),
    ('icon-camera', _("Camera")),
    ('icon-download', _("Download")),
    #('icon-food', _("Food")),
    ('icon-info-sign', _("Info")),
    ('icon-shopping-cart', _("Shopping cart")),
    #('icon-truck', _("Truck")),
    ('icon-wrench', _("Wrench")),
    #('icon-facebook', _("Facebook")),
    #('icon-github', _("Github")),
    #('icon-google-plus', _("Google plus")),
    #('icon-linkedin', _("LinkedIn")),
    #('icon-pinterest', _("Pinterest")),
    #('icon-twitter', _("Twitter")),
    #('icon-youtube', _("Youtube")),
    #('icon-bitbucket', _("Bitbucket")),
    #('icon-android', _("Android")),
    #('icon-apple', _("Apple")),
    #('icon-windows', _("Windows")),
    #('icon-tumblr-sign', _("Tumblr")),
    #('icon-instagram', _("Instagram")),
    #('icon-dropbox', _("Dropbox")),
    #('icon-trophy', _("Trophy")),
    #('icon-legal', _("Legal")),
    ('icon-lock', _("Lock")),
    ('icon-heart', _("Heart")),
    ('icon-question-sign', _("Question")),
    ('icon-headphones', _("Headphones")),
    ('icon-gift', _("Gift")),
    #('icon-key', _("Key")),
    #('icon-female', _("Female")),
    #('icon-male', _("Male")),
    ('icon-comment', _("Comment")),
    #('icon-bug', _("Bug")),
    ('icon-bell', _("Bell")),
    ('icon-search', _("Search")),
    ('icon-map-marker', _("Map marker")),
    ('icon-globe', _("Globe")),
    ('icon-pencil', _("Pensil")),
    ('icon-tasks', _("Tasks")),
)

BOOKMARK_IMAGE_CHOICES_WITH_EMPTY_OPTION = [('', '---------')] + list(BOOKMARK_IMAGE_CHOICES)

########NEW FILE########
__FILENAME__ = forms
__author__ = 'Artur Barseghyan <artur.barseghyan@gmail.com>'
__copyright__ = 'Copyright (c) 2013 Artur Barseghyan'
__license__ = 'GPL 2.0/LGPL 2.1'
__all__ = ('URLForm', 'BookmarkForm')

from django import forms
from django.utils.translation import ugettext_lazy as _

from dash.base import DashboardPluginFormBase
from dash.widgets import BooleanRadioSelect
from dash.contrib.plugins.url.settings import IMAGE_CHOICES_WITH_EMPTY_OPTION
from dash.contrib.plugins.url.models import Bookmark

class URLForm(forms.Form, DashboardPluginFormBase):
    """
    URL form for `BaseURLPlugin` plugin.
    """
    class Media:
        css = {
            'all': ('css/dash_plugin_url_form.css',)
        }
        js = ('js/dash_plugin_url_form.js',)

    plugin_data_fields = [
        ("title", ""),
        ("url", ""),
        ("external", False),
        ("image", "")
    ]

    title = forms.CharField(label=_("Title"), required=True)
    url = forms.URLField(label=_("URL"), required=True)
    external = forms.BooleanField(label=_("External?"), required=False, initial=False, widget=BooleanRadioSelect)
    image = forms.ChoiceField(label=_("Image"), required=False, choices=IMAGE_CHOICES_WITH_EMPTY_OPTION)

    def __init__(self, *args, **kwargs):
        super(URLForm, self).__init__(*args, **kwargs)

        if 'class' in self.fields['image'].widget.attrs:
            self.fields['image'].widget.attrs['class'] += ' image-picker'
        else:
            self.fields['image'].widget.attrs['class'] = 'image-picker'

class BookmarkForm(forms.Form, DashboardPluginFormBase):
    """
    Bookmark form for `BaseBookmarkPlugin` plugin.
    """
    class Media:
        css = {
            'all': ('css/dash_plugin_url_form.css',)
        }
        js = ('js/dash_plugin_url_form.js',)

    plugin_data_fields = [
        ("bookmark", ""),

        # Handled in `save_plugin_data`.
        ("title", ""),
        ("url", ""),
        ("external", False),
        ("image", "")
    ]

    bookmark = forms.ModelChoiceField(label=_("Bookmark"), queryset=Bookmark._default_manager.all(), \
                                      empty_label=_('---------'), required=True)

    def save_plugin_data(self, request=None):
        """
        Saving the plugin data and moving the file.
        """
        bookmark = self.cleaned_data.get('bookmark', None)
        if bookmark:
            # Since it's a `ModelChoiceField`, we can safely given an ID.
            self.cleaned_data['bookmark'] = bookmark.pk

            # Saving the rest of the fields.
            self.cleaned_data['title'] = bookmark.title
            self.cleaned_data['url'] = bookmark.url
            self.cleaned_data['external'] = bookmark.external
            self.cleaned_data['image'] = bookmark.image

########NEW FILE########
__FILENAME__ = models
__author__ = 'Artur Barseghyan <artur.barseghyan@gmail.com>'
__copyright__ = 'Copyright (c) 2013 Artur Barseghyan'
__license__ = 'GPL 2.0/LGPL 2.1'
__all__ = ('Bookmark',)

from django.db import models
from django.utils.translation import ugettext_lazy as _

from dash.contrib.plugins.url.settings import BOOKMARK_IMAGE_CHOICES_WITH_EMPTY_OPTION

class Bookmark(models.Model):
    """
    Bookmark.

    - `title` (string): Bookmark title.
    - `url` (string): Bookmark URL.
    - `external` (bool): External/internal link.
    - `image` (string): Bookmark image icon.
    """
    title = models.CharField(_("Title"), max_length=100)
    url = models.URLField(_("URL"), max_length=255)
    external = models.BooleanField(_("External"), default=False)
    image = models.CharField(_("Image"), max_length=255, blank=True, null=True, \
                             choices=BOOKMARK_IMAGE_CHOICES_WITH_EMPTY_OPTION)

    class Meta:
        verbose_name = _("Bookmark")
        verbose_name_plural = _("Bookmarks")

    def __unicode__(self):
        return self.title

########NEW FILE########
__FILENAME__ = settings
__author__ = 'Artur Barseghyan <artur.barseghyan@gmail.com>'
__copyright__ = 'Copyright (c) 2013 Artur Barseghyan'
__license__ = 'GPL 2.0/LGPL 2.1'
__all__ = (
    'IMAGE_CHOICES', 'IMAGE_CHOICES_WITH_EMPTY_OPTION', 'BOOKMARK_IMAGE_CHOICES',
    'BOOKMARK_IMAGE_CHOICES_WITH_EMPTY_OPTION'
)

from dash.contrib.plugins.url.conf import get_setting

IMAGE_CHOICES = get_setting('IMAGE_CHOICES')
IMAGE_CHOICES_WITH_EMPTY_OPTION = get_setting('IMAGE_CHOICES_WITH_EMPTY_OPTION')
BOOKMARK_IMAGE_CHOICES = get_setting('BOOKMARK_IMAGE_CHOICES')
BOOKMARK_IMAGE_CHOICES_WITH_EMPTY_OPTION = get_setting('BOOKMARK_IMAGE_CHOICES_WITH_EMPTY_OPTION')

########NEW FILE########
__FILENAME__ = dash_plugins
__author__ = 'Artur Barseghyan <artur.barseghyan@gmail.com>'
__copyright__ = 'Copyright (c) 2013 Artur Barseghyan'
__license__ = 'GPL 2.0/LGPL 2.1'
__all__ = ('BaseVideoPlugin',)

from django.utils.translation import ugettext_lazy as _

from vishap import render_video

from dash.base import BaseDashboardPlugin
from dash.factory import plugin_factory
from dash.contrib.plugins.video.forms import VideoForm

# ********************************************************************************
# ******************************* Base Video plugin ******************************
# ********************************************************************************

class BaseVideoPlugin(BaseDashboardPlugin):
    """
    Base Video plugin.
    """
    name = _("Video")
    group = _("Internet")
    form = VideoForm
    html_classes = ['video']

    def post_processor(self):
        self.data.embed_code = render_video(self.data.url)

# ********************************************************************************
# ********** Generating and registering the plugins using factory ****************
# ********************************************************************************

sizes = (
    (1, 1),
    (2, 2),
    (3, 3),
    (4, 4),
    (5, 5),
    (6, 6)
)

plugin_factory(BaseVideoPlugin, 'video', sizes)

########NEW FILE########
__FILENAME__ = dash_widgets
__author__ = 'Artur Barseghyan <artur.barseghyan@gmail.com>'
__copyright__ = 'Copyright (c) 2013 Artur Barseghyan'
__license__ = 'GPL 2.0/LGPL 2.1'
__all__ = (
    'BaseVideoWidget', 'Video1x1Widget', 'Video2x2Widget', 'Video3x3Widget',
    'Video4x4Widget', 'Video5x5Widget'
)

from django.template.loader import render_to_string

from dash.base import BaseDashboardPluginWidget

# **********************************************************************
# *********************** Base Video widget plugin *********************
# **********************************************************************

class BaseVideoWidget(BaseDashboardPluginWidget):
    """
    Base video plugin widget.
    """
    media_css = (
        'css/dash_plugin_video.css',
    )

    def render(self, request=None):
        context = {'plugin': self.plugin}
        return render_to_string('video/render.html', context)

# **********************************************************************
# ************************** Specific widgets **************************
# **********************************************************************

class Video1x1Widget(BaseVideoWidget):
    """
    Video plugin 1x1 widget.
    """
    plugin_uid = 'video_1x1'


class Video2x2Widget(BaseVideoWidget):
    """
    Video plugin 2x2 widget.
    """
    plugin_uid = 'video_2x2'
    cols = 2
    rows = 2


class Video3x3Widget(BaseVideoWidget):
    """
    Video plugin 3x3 widget.
    """
    plugin_uid = 'video_3x3'
    cols = 3
    rows = 3


class Video4x4Widget(BaseVideoWidget):
    """
    Video plugin 4x4 widget.
    """
    plugin_uid = 'video_4x4'
    cols = 4
    rows = 4


class Video5x5Widget(BaseVideoWidget):
    """
    Video plugin 5x5 widget.
    """
    plugin_uid = 'video_5x5'
    cols = 5
    rows = 5

########NEW FILE########
__FILENAME__ = forms
__author__ = 'Artur Barseghyan <artur.barseghyan@gmail.com>'
__copyright__ = 'Copyright (c) 2013 Artur Barseghyan'
__license__ = 'GPL 2.0/LGPL 2.1'
__all__ = ('VideoForm',)

from django import forms
from django.utils.translation import ugettext_lazy as _

from dash.base import DashboardPluginFormBase
from dash.widgets import BooleanRadioSelect

class VideoForm(forms.Form, DashboardPluginFormBase):
    """
    Video form for ``VideoPlugin`` plugin.
    """
    plugin_data_fields = [
        ("title", ""),
        ("url", ""),
    ]

    title = forms.CharField(label=_("Title"), required=True)
    url = forms.URLField(label=_("URL"), required=True)


########NEW FILE########
__FILENAME__ = conf
__author__ = 'Artur Barseghyan <artur.barseghyan@gmail.com>'
__copyright__ = 'Copyright (c) 2013 Artur Barseghyan'
__license__ = 'GPL 2.0/LGPL 2.1'
__all__ = ('get_setting',)

from django.conf import settings

from dash.contrib.plugins.weather import defaults

def get_setting(setting, override=None):
    """
    Get a setting from ``dash.contrib.plugins.weather`` conf module, falling back to the default.

    If override is not None, it will be used instead of the setting.

    :param setting: String with setting name
    :param override: Value to use when no setting is available. Defaults to None.
    :return: Setting value.
    """
    if override is not None:
        return override
    if hasattr(settings, 'DASH_PLUGIN_WEATHER_{0}'.format(setting)):
        return getattr(settings, 'DASH_PLUGIN_WEATHER_{0}'.format(setting))
    else:
        return getattr(defaults, setting)

########NEW FILE########
__FILENAME__ = dash_plugins
__author__ = 'Artur Barseghyan <artur.barseghyan@gmail.com>'
__copyright__ = 'Copyright (c) 2013 Artur Barseghyan'
__license__ = 'GPL 2.0/LGPL 2.1'
__all__ = ('BaseWeatherPlugin',)

from six.moves.urllib.request import urlopen
import json

from django.utils.translation import ugettext_lazy as _
from django.core.cache import cache

from dash.base import BaseDashboardPlugin
from dash.factory import plugin_factory
from dash.contrib.plugins.weather.forms import WeatherForm
from dash.contrib.plugins.weather.settings import API_KEY, API_ENDPOINT_URL
from dash.settings import DEBUG

import logging
logger = logging.getLogger(__name__)

# ***************************************************************************
# ************************** Base Weather plugin ****************************
# ***************************************************************************

class BaseWeatherPlugin(BaseDashboardPlugin):
    """
    Base Weather plugin.
    """
    name = _("Weather")
    form = WeatherForm
    group = _("Weather")

    def post_processor(self):
        """
        If no text available, use dummy.
        """
        key = '{0}-{1}-{2}'.format(self.layout_uid, self.placeholder_uid, self.uid)
        self.data.weather_data_json = cache.get(key)

        if not self.data.weather_data_json:

            if self.data.public_ip:
                api_endpoint_url = API_ENDPOINT_URL.format(API_KEY, 'json', self.data.public_ip)

                try:
                    data = str(urlopen(api_endpoint_url).read())

                    self.data.weather_data_json = json.loads(data)

                    cache.set(key, self.data.weather_data_json, int(self.data.cache_for))
                except Exception as e:
                    if DEBUG:
                        logger.debug(e)

        if self.data.weather_data_json:
            data = self.data.weather_data_json['data']

            try:
                current_condition = data['current_condition'][0]
            except:
                current_condition = None

            if current_condition:
                self.data.current_cloudcover = current_condition['cloudcover']
                self.data.current_humidity = current_condition['humidity']
                self.data.current_pressure = current_condition['pressure']
                self.data.current_visibility = current_condition['visibility']
                self.data.current_temp_c = current_condition['temp_C']

                try:
                    self.data.current_weather_desc = current_condition['weatherDesc'][0]['value']
                except Exception as e:
                    pass

                try:
                    self.data.current_weather_icon_url = current_condition['weatherIconUrl'][0]['value']
                except Exception as e:
                    pass

            try:
                weather = data['weather'][0]
            except:
                weather = None

            if weather:
                self.data.temp_max_c = weather['tempMaxC']
                self.data.temp_min_c = weather['tempMinC']
                self.data.windspeed_kmph = weather['windspeedKmph']
                self.data.wind_dir_16_point = weather['winddir16Point']

                try:
                    self.data.weather_desc = weather['weatherDesc'][0]['value']
                except Exception as e:
                    pass

                try:
                    self.data.weather_icon_url = weather['weatherIconUrl'][0]['value']
                except Exception as e:
                    pass


# ********************************************************************************
# ********** Generating and registering the plugins using factory ****************
# ********************************************************************************

sizes = (
    (2, 2),
    (3, 3),
)

plugin_factory(BaseWeatherPlugin, 'weather', sizes)

########NEW FILE########
__FILENAME__ = dash_widgets
__author__ = 'Artur Barseghyan <artur.barseghyan@gmail.com>'
__copyright__ = 'Copyright (c) 2013 Artur Barseghyan'
__license__ = 'GPL 2.0/LGPL 2.1'
__all__ = ('BaseWeatherWidget', 'Weather2x2Widget', 'Weather3x3Widget')

from django.template.loader import render_to_string

from dash.base import BaseDashboardPluginWidget

# **********************************************************************
# *********************** Base weather widget plugin *******************
# **********************************************************************

class BaseWeatherWidget(BaseDashboardPluginWidget):
    """
    Base weather plugin widget.
    """
    #media_js = [
    #    'js/dash_plugin_weather.js',
    #]
    media_css = [
        'css/dash_plugin_weather.css',
    ]

    def render(self, request=None):
        context = {'plugin': self.plugin}
        return render_to_string('weather/render.html', context)

# **********************************************************************
# ************************** Specific widgets **************************
# **********************************************************************

class Weather2x2Widget(BaseWeatherWidget):
    """
    Weather plugin 2x2 widget.
    """
    plugin_uid = 'weather_2x2'
    cols = 2
    rows = 2


class Weather3x3Widget(BaseWeatherWidget):
    """
    Weather plugin 3x3 widget.
    """
    plugin_uid = 'weather_3x3'
    cols = 3
    rows = 3

########NEW FILE########
__FILENAME__ = defaults
__author__ = 'Artur Barseghyan <artur.barseghyan@gmail.com>'
__copyright__ = 'Copyright (c) 2013 Artur Barseghyan'
__license__ = 'GPL 2.0/LGPL 2.1'
__all__ = ('API_KEY', 'API_ENDPOINT_URL', 'DEFAULT_SHOW_TITLE', 'DEFAULT_CACHE_FOR')

# http://developer.worldweatheronline.com API key.
API_KEY = ''

# Endpoing URL for the weather API. Should get (key, format, q) arguments.
API_ENDPOINT_URL = 'http://api.worldweatheronline.com/free/v1/weather.ashx?key={0}&format={1}&q={2}'

DEFAULT_SHOW_TITLE = True

DEFAULT_CACHE_FOR = 3600

########NEW FILE########
__FILENAME__ = forms
__author__ = 'Artur Barseghyan <artur.barseghyan@gmail.com>'
__copyright__ = 'Copyright (c) 2013 Artur Barseghyan'
__license__ = 'GPL 2.0/LGPL 2.1'
__all__ = ('WeatherForm',)

from django import forms
from django.utils.translation import ugettext_lazy as _

from pif import get_public_ip

from dash.base import DashboardPluginFormBase
from dash.widgets import BooleanRadioSelect
from dash.contrib.plugins.rss_feed.defaults import DEFAULT_SHOW_TITLE, DEFAULT_CACHE_FOR

import logging
logger = logging.getLogger(__name__)

class WeatherForm(forms.Form, DashboardPluginFormBase):
    """
    Form for main ``WeatherPlugin``.
    """
    plugin_data_fields = [
        ("custom_title", ""),
        ("show_title", DEFAULT_SHOW_TITLE),
        ("cache_for", DEFAULT_CACHE_FOR),
        ("public_ip", ""),
        ("weather_data_json", "")

    ]
    custom_title = forms.CharField(label=_("Custom title"), required=False)
    show_feed_title = forms.BooleanField(label=_("Show title?"), required=False, initial=DEFAULT_SHOW_TITLE, \
                                         widget=BooleanRadioSelect)
    cache_for = forms.IntegerField(label=_("Cache for"), required=True, initial=DEFAULT_CACHE_FOR)
    public_ip = forms.CharField(label=_("Public IP"), required=False, widget=forms.widgets.HiddenInput)
    weather_data_json = forms.CharField(label=_("Weather data JSON"), required=False, widget=forms.widgets.HiddenInput)

    def __init__(self, *args, **kwargs):
        super(WeatherForm, self).__init__(*args, **kwargs)

    def save_plugin_data(self, request=None):
        """
        For showing the weather, we need an IP address. Although we don't make it possible for the user to
        specify it manually, we silently obtain it and save into the plugin data.
        """
        if not self.cleaned_data.get('public_ip', None):
            try:
                self.cleaned_data['public_ip'] = get_public_ip()
            except Exception as e:
                if DEBUG:
                    logger.debug(e)

########NEW FILE########
__FILENAME__ = settings
__author__ = 'Artur Barseghyan <artur.barseghyan@gmail.com>'
__copyright__ = 'Copyright (c) 2013 Artur Barseghyan'
__license__ = 'GPL 2.0/LGPL 2.1'
__all__ = ('API_KEY', 'API_ENDPOINT_URL', 'DEFAULT_SHOW_TITLE', 'DEFAULT_CACHE_FOR')

from dash.contrib.plugins.weather.conf import get_setting

API_KEY = get_setting('API_KEY')
API_ENDPOINT_URL = get_setting('API_ENDPOINT_URL')
DEFAULT_SHOW_TITLE = get_setting('DEFAULT_SHOW_TITLE')
DEFAULT_CACHE_FOR = get_setting('DEFAULT_CACHE_FOR')

########NEW FILE########
__FILENAME__ = decorators
__title__ = 'dash.decorators'
__author__ = 'Artur Barseghyan <artur.barseghyan@gmail.com>'
__copyright__ = 'Copyright (c) 2013 Artur Barseghyan'
__license__ = 'GPL 2.0/LGPL 2.1'
__all__ = ('SATISFY_ANY', 'SATISFY_ALL', 'DEFAULT_SATISFY', 'permissions_required', 'all_permissions_required', \
           'any_permission_required', 'edit_dashboard_permission_required')

SATISFY_ANY = 'any'
SATISFY_ALL = 'all'
DEFAULT_SATISFY = SATISFY_ALL

from django.core.exceptions import PermissionDenied
from django.contrib.auth.decorators import user_passes_test

def permissions_required(perms, satisfy=DEFAULT_SATISFY, login_url=None, raise_exception=False):
    """
    Checks for the permissions given based on the strategy chosen.

    :param iterable perms:
    :param string satisfy: Allowed values are "all" and "any".
    :param string login_url:
    :param bool raise_exception: If set to True, the ``PermissionDenied`` exception is raised on failures.
    :return bool:

    :example:
    >>> @login_required
    >>> @permissions_required(satisfy='any', perms=[
    >>>     'dash.add_dashboardentry', 'dash.change_dashboardentry', 'dash.delete_dashboardentry',
    >>>     'dash.add_dashboardworkspace', 'dash.change_dashboardworkspace', 'dash.delete_dashboardworkspace',
    >>>     'dash.add_dashboardsettings', 'dash.change_dashboardsettings', 'dash.delete_dashboardsettings',
    >>> ])
    >>> def edit_dashboard(request):
    >>>     # your code
    """
    assert satisfy in (SATISFY_ANY, SATISFY_ALL)

    if SATISFY_ALL == satisfy:
        # ``SATISFY_ALL`` case
        def check_perms(user):
            # First check if the user has the permission (even anon users)
            if user.has_perms(perms):
                return True
            # In case the 403 handler should be called raise the exception
            if raise_exception:
                raise PermissionDenied
            # As the last resort, show the login form
            return False
    else:
        # ``SATISFY_ANY`` case
        def check_perms(user):
            # First check if the user has the permission (even anon users)
            for perm in perms:
                if user.has_perm(perm):
                    return True

            # In case the 403 handler should be called raise the exception
            if raise_exception:
                raise PermissionDenied
            # As the last resort, show the login form
            return False

    return user_passes_test(check_perms, login_url=login_url)

def all_permissions_required(perms, login_url=None, raise_exception=False):
    """
    :example:
    >>> @login_required
    >>> @all_permissions_required([
    >>>     'dash.add_dashboardentry', 'dash.change_dashboardentry', 'dash.delete_dashboardentry',
    >>>     'dash.add_dashboardworkspace', 'dash.change_dashboardworkspace', 'dash.delete_dashboardworkspace',
    >>>     'dash.add_dashboardsettings', 'dash.change_dashboardsettings', 'dash.delete_dashboardsettings',
    >>> ])
    >>> def edit_dashboard(request):
    >>>     # your code
    """
    return permissions_required(perms, satisfy=SATISFY_ALL, login_url=login_url, raise_exception=raise_exception)

def any_permission_required(perms, login_url=None, raise_exception=False):
    """
    :example:
    >>> @login_required
    >>> @any_permission_required([
    >>>     'dash.add_dashboardentry', 'dash.change_dashboardentry', 'dash.delete_dashboardentry',
    >>>     'dash.add_dashboardworkspace', 'dash.change_dashboardworkspace', 'dash.delete_dashboardworkspace',
    >>>     'dash.add_dashboardsettings', 'dash.change_dashboardsettings', 'dash.delete_dashboardsettings',
    >>> ])
    >>> def edit_dashboard(request):
    >>>     # your code
    """
    return permissions_required(perms, satisfy=SATISFY_ANY, login_url=login_url, raise_exception=raise_exception)

def edit_dashboard_permission_required(login_url=None, raise_exception=False):
    """
    Checks if user has permissions to edit dashboard. Simply, check is successfull if any of the following
    permission checks are satisfied:
    
        - Can add dashboard entry
        - Can change dashboard entry
        - Can delete dashboard entry
        - Can add dashboard workspace
        - Can change dashboard workspace
        - Can delete dashboard workspace
        - Can add dashboard settings
        - Can change dashboard settings
        - Can delete dashboard settings

    :example:
    >>> @login_required
    >>> @edit_dashboard_permission_required() # Do not forget the brackets!
    >>> def edit_dashboard(request):
    >>>     # your code
    """
    return permissions_required(
        perms = [
            'dash.add_dashboardentry', 'dash.change_dashboardentry', 'dash.delete_dashboardentry',
            'dash.add_dashboardworkspace', 'dash.change_dashboardworkspace', 'dash.delete_dashboardworkspace',
            'dash.add_dashboardsettings', 'dash.change_dashboardsettings', 'dash.delete_dashboardsettings',
        ],
        satisfy = SATISFY_ANY,
        login_url = login_url,
        raise_exception = raise_exception
        )

########NEW FILE########
__FILENAME__ = defaults
__title__ = 'dash.defaults'
__author__ = 'Artur Barseghyan <artur.barseghyan@gmail.com>'
__copyright__ = 'Copyright (c) 2013 Artur Barseghyan'
__license__ = 'GPL 2.0/LGPL 2.1'
__all__ = (
    'RESTRICT_PLUGIN_ACCESS', 'PLUGINS_MODULE_NAME', 'LAYOUTS_MODULE_NAME', 'ACTIVE_LAYOUT', \
    'LAYOUT_CELL_UNITS', 'DEFAULT_WORKSPACE_NAME', 'DEFAULT_PLACEHOLDER_VIEW_TEMPLATE_NAME', \
    'DEFAULT_PLACEHOLDER_EDIT_TEMPLATE_NAME', 'DISPLAY_AUTH_LINK', 'WAIT_BETWEEN_TEST_STEPS', \
    'WAIT_AT_TEST_END', 'DEBUG'
)

from django.utils.translation import ugettext

gettext = lambda s: s

# If set to True, plugins would be only accessible by the white-listed user(s) or group(s). If set to False, all
# users have the same access rights to all plugins.
RESTRICT_PLUGIN_ACCESS = True

# Name of the module in which the dash plugins are registered.
PLUGINS_MODULE_NAME = 'dash_plugins'

# Name of the module in which the dash layouts are registered.
LAYOUTS_MODULE_NAME = 'dash_layouts'

# UID of the active layout.
ACTIVE_LAYOUT = 'android'

# Allowed layout cell units.
LAYOUT_CELL_UNITS = ('em', 'px', 'pt', '%', 'rem', 'in', 'cm', 'mm', 'ex', 'pc')

# Name of the default dashboard workspace (no workspace).
DEFAULT_WORKSPACE_NAME = 'Default'

DEFAULT_PLACEHOLDER_VIEW_TEMPLATE_NAME = 'dash/layouts/base_placeholder_view.html'
DEFAULT_PLACEHOLDER_EDIT_TEMPLATE_NAME = 'dash/layouts/base_placeholder_edit.html'

# If set to True, the logout link is shown in the menu.
DISPLAY_AUTH_LINK = True

WAIT_BETWEEN_TEST_STEPS = 2
WAIT_AT_TEST_END = 4

DEBUG = False

########NEW FILE########
__FILENAME__ = discover
__title__ = 'dash.discover'
__author__ = 'Artur Barseghyan <artur.barseghyan@gmail.com>'
__copyright__ = 'Copyright (c) 2013 Artur Barseghyan'
__license__ = 'GPL 2.0/LGPL 2.1'
__all__ = ('autodiscover',)

import imp

def autodiscover():
    """
    Autodiscovers files that should be found by dash.
    """
    from django.conf import settings
    from dash.settings import PLUGINS_MODULE_NAME, LAYOUTS_MODULE_NAME

    def do_discover(module_name):
        for app in settings.INSTALLED_APPS:
            try:
                app_path = __import__(app, {}, {}, [app.split('.')[-1]]).__path__
            except AttributeError:
                continue

            try:
                imp.find_module(module_name, app_path)
            except ImportError:
                continue
            __import__('{0}.{1}'.format(app, module_name))

    # Discover layouts
    do_discover(LAYOUTS_MODULE_NAME)

    # Discover plugins
    do_discover(PLUGINS_MODULE_NAME)

########NEW FILE########
__FILENAME__ = exceptions
__title__ = 'dash.exceptions'
__author__ = 'Artur Barseghyan <artur.barseghyan@gmail.com>'
__copyright__ = 'Copyright (c) 2013 Artur Barseghyan'
__license__ = 'GPL 2.0/LGPL 2.1'
__all__ = (
    'InvalidRegistryItemType', 'LayoutDoesNotExist', 'NoActiveLayout',
    'PluginWidgetOutOfPlaceholderBoundaries'
)

class InvalidRegistryItemType(ValueError):
    """
    Raised when an attempt is made to register an item in the registry which does not have a proper type.
    """


class LayoutDoesNotExist(Exception):
    """
    Raised when layout does not exist.
    """


class NoActiveLayoutChosen(Exception):
    """
    Raised when no active layout is chosen.
    """


class PluginWidgetOutOfPlaceholderBoundaries(Exception):
    """
    Raised when plugin widget is out of placeholder boundaries.
    """

########NEW FILE########
__FILENAME__ = factory
__title__ = 'dash.factory'
__author__ = 'Artur Barseghyan <artur.barseghyan@gmail.com>'
__copyright__ = 'Copyright (c) 2013 Artur Barseghyan'
__license__ = 'GPL 2.0/LGPL 2.1'
__all__ = ('plugin_factory', 'plugin_widget_factory')

import logging
logger = logging.getLogger(__name__)

from six import with_metaclass

from dash.base import plugin_registry, plugin_widget_registry

def plugin_factory(base_class, plugin_uid_prefix, sizes=[]):
    """
    Plugin factory.

    :param dash.base.BaseDashboardWidget base_class: Subclass of.
    :param string layout_uid:
    :param string placeholder_uid:
    :param string plugin_uid_prefix:
    :param iterable sizes: Iterable of tuples.

    :example:
    >>> from dash.contrib.plugins.image.dash_plugins import BaseImagePlugin
    >>> plugin_factory(BaseImagePlugin, 'image', zip(range(6, 10), range(6, 10)))

    The example above will update the plugin registry with the following dictionary:
    >>> {
    >>>     'image_6x6': dash.factory.Plugin,
    >>>     'image_7x7': dash.factory.Plugin,
    >>>     'image_8x8': dash.factory.Plugin,
    >>>     'image_9x9': dash.factory.Plugin,
    >>> }

    The generated class (one of them), would look as follows:

    >>> class Plugin(BaseImagePlugin):
    >>>     uid = 'image_6x6'

    The ``uid`` property is generated automatically.
    """
    for cols, rows in sizes:

        plugin_uid = "{plugin_uid_prefix}_{cols}x{rows}".format(
            plugin_uid_prefix = plugin_uid_prefix,
            cols = cols,
            rows = rows
            )

        class PluginMeta(type):
            """
            Dynamically created plugin plugin meta class.
            """
            def __new__(cls, name, bases, props):
                props['uid'] = plugin_uid
                return type.__new__(cls, name, bases, props)

        class Plugin(with_metaclass(PluginMeta, base_class)):
            """
            Dynamically created plugin class.
            """

        plugin_registry.register(Plugin)

def plugin_widget_factory(base_class, layout_uid, placeholder_uid, plugin_uid_prefix, sizes=[]):
    """
    Plugin widget factory.

    :param dash.base.BaseDashboardWidget base_class: Subclass of.
    :param string layout_uid: Layout UID, for which widgets are generated.
    :param string placeholder_uid: Placeholder UID, for which widets are generated.
    :param string plugin_uid_prefix: Prefix of the plugin UID.
    :param iterable sizes: Iterable of tuples.

    :example:
    >>> from dash.contrib.plugins.image.dash_widgets import BaseImageWidget
    >>> plugin_widget_factory(BaseImageWidget, 'android', 'main', 'image', zip(range(6, 10), range(6, 10)))

    The example above will update the plugin widget registry with the following dictionary:

    >>> {
    >>>     'android.main.image_6x6': dash.factory.Widget,
    >>>     'android.main.image_7x7': dash.factory.Widget,
    >>>     'android.main.image_8x8': dash.factory.Widget,
    >>>     'android.main.image_9x9': dash.factory.Widget,
    >>> }

    The generated class (one of them), would look as follows:

    >>> class Widget(BaseImageWidget):
    >>>     layout_uid = 'android'
    >>>     placeholder_uid = 'main'
    >>>     plugin_uid = 'image_6x6'
    >>>     cols = 6
    >>>     rows = 6

    The ``layout_uid``, ``placeholder_uid``, ``plugin_uid``, ``cols`` and ``rows`` properties are 
    generated automatically.
    """
    for cols, rows in sizes:
        plugin_uid = "{plugin_uid_prefix}_{cols}x{rows}".format(
            plugin_uid_prefix = plugin_uid_prefix,
            cols = cols,
            rows = rows
            )

        #class_name = "{plugin_uid_prefix}{cols}x{rows}{layout_uid}{placeholder_uid}Widget".format(
        #    plugin_uid_prefix = plugin_uid_prefix.title(),
        #    cols = cols,
        #    rows = rows,
        #    layout_uid = layout_uid.title(),
        #    placeholder_uid = placeholder_uid.title()
        #    )

        class WidgetMeta(type):
            """
            Dynamically created plugin widget meta class.
            """
            def __new__(cls, name, bases, props):
                props['layout_uid'] = layout_uid
                props['placeholder_uid'] = placeholder_uid
                props['plugin_uid'] = plugin_uid
                props['cols'] = cols
                props['rows'] = rows
                return type.__new__(cls, name, bases, props)

        class Widget(with_metaclass(WidgetMeta, base_class)):
            """
            Dynamically created widget class.
            """

        plugin_widget_registry.register(Widget)

########NEW FILE########
__FILENAME__ = fields
from django.db import models

class OrderField(models.IntegerField):
    """
    @author http://djangosnippets.org/users/zenx/
    @source http://djangosnippets.org/snippets/1861/

    OrderField for models from http://ianonpython.blogspot.com/2008/08/orderfield-for-django-models.html and
    updated to use a django aggregation function. This field sets a default value as an auto-increment of the
    maximum value of the field +1.

    Ignores the incoming value and instead gets the maximum plus one of the field.

    This works really well in combination with "sortable_list.js". There are several things you should know:
        * order field shall be null=True, blank=True
        * order field shall not be unique
    If above mentioned is True, you can use jQuery drag-n-drop widget in your Django-admin.
    See the following example:
        class Media: # This belongs to your Admin class (admin.ModelAdmin)
            js = [
                '/media/js/jquery-1.6.2.min.js',
                '/media/js/jquery-ui-1.8.16.custom.min.js',
                '/media/js/sortable_list.js'
            ]
    """
    def pre_save(self, model_instance, value):
        # if the model is new and not an update
        if model_instance.pk is None:
            records = model_instance.__class__.objects.aggregate(models.Max(self.name))
            if records:
                # get the maximum attribute from the first record and add 1 to it
                try:
                    value = records['{0}__max'.format(self.name)]  + 1
                except TypeError as e:
                    value = 1
            else:
                value = 1
        # otherwise the model is updating, pass the attribute value through
        else:
            value = getattr(model_instance, self.attname)
        return value

    # prevent the field from being displayed in the admin interface
    def formfield_(self, **kwargs):
        return None

# For south
try:
    from south.modelsinspector import add_introspection_rules
    rules = [
        (
            (OrderField,),
            [],
            {}, # takes widget only, which is standard
        ),
    ]

    add_introspection_rules(rules, ["^dash\.fields",])
except:
    pass

########NEW FILE########
__FILENAME__ = forms
__title__ = 'dash.forms'
__author__ = 'Artur Barseghyan <artur.barseghyan@gmail.com>'
__copyright__ = 'Copyright (c) 2013 Artur Barseghyan'
__license__ = 'GPL 2.0/LGPL 2.1'
__all__ = ('DashboardWorkspaceForm',)

from django import forms
from django.utils.translation import ugettext_lazy as _

from dash.models import DashboardWorkspace, DashboardSettings, DashboardPlugin
from dash.constants import ACTION_CHOICES

class DashboardWorkspaceForm(forms.ModelForm):
    """
    Dashboard workspace form.
    """
    class Meta:
        model = DashboardWorkspace
        fields = ('user', 'name', 'is_public', 'is_clonable')

    def __init__(self, *args, **kwargs):
        super(DashboardWorkspaceForm, self).__init__(*args, **kwargs)
        self.fields['user'].widget = forms.widgets.HiddenInput()
        #self.fields['layout_uid'].widget = forms.widgets.HiddenInput()


class DashboardSettingsForm(forms.ModelForm):
    """
    Dashboard settings form.
    """
    class Meta:
        model = DashboardSettings

    def __init__(self, *args, **kwargs):
        super(DashboardSettingsForm, self).__init__(*args, **kwargs)
        self.fields['user'].widget = forms.widgets.HiddenInput()


class BulkChangeDashboardPluginsForm(forms.ModelForm):
    """
    Bulk change dashboard plugins form.

    - `selected_dashboard_plugins` (str): List of comma separated values to be changed.
    - `users_action` (int): For indicating wheither the users shall be appended to the dashbard plugins or replaced.
    - `groups_action` (int): For indicating wheither the groups shall be appended to the dashboard plugins or replaced.
    """
    selected_dashboard_plugins = forms.CharField(
        required=True, label=_("Selected dashboard plugins"), widget=forms.widgets.HiddenInput
        )
    users_action = forms.ChoiceField(
        required = False,
        label = _("Users action"),
        choices = ACTION_CHOICES,
        help_text = _("If set to ``replace``, the groups are replaced; otherwise - appended.")
        )
    groups_action = forms.ChoiceField(
        required = False,
        label = _("Groups action"),
        choices = ACTION_CHOICES,
        help_text = _("If set to ``replace``, the groups are replaced; otherwise - appended.")
        )

    class Meta:
        model = DashboardPlugin
        fields = ['groups', 'groups_action', 'users', 'users_action',]

    class Media:
        css = {
            'all': ('css/admin_custom.css',)
        }

    def __init__(self, *args, **kwargs):
        super(BulkChangeDashboardPluginsForm, self).__init__(*args, **kwargs)
        self.fields['users'].required = False
        self.fields['groups'].required = False

########NEW FILE########
__FILENAME__ = helpers
__title__ = 'dash.helpers'
__author__ = 'Artur Barseghyan <artur.barseghyan@gmail.com>'
__copyright__ = 'Copyright (c) 2013 Artur Barseghyan'
__license__ = 'GPL 2.0/LGPL 2.1'
__all__ = (
    'slugify_workspace', 'lists_overlap', 'iterable_to_dict', 'uniquify_sequence',
    'clean_plugin_data', 'clone_plugin_data', 'update_plugin_data'
    )

from autoslug.settings import slugify

slugify_workspace = lambda s: slugify(s.lower()).lower()

def lists_overlap(sub, main):
    for i in sub:
        if i in main:
            return True
    return False

def iterable_to_dict(items, key_attr_name):
    """
    Converts iterable of certain objects to dict.

    :param iterable items:
    :param string key_attr_name: Attribute to use as a dictionary key.
    :return dict:
    """
    items_dict = {}
    for item in items:
        items_dict.update({getattr(item, key_attr_name): item})
    return items_dict

def uniquify_sequence(sequence):
    """
    Makes sure items in the given sequence are unique, having the original order preserved.

    :param iterable sequence:
    :return list:
    """
    seen = set()
    seen_add = seen.add
    return [x for x in sequence if x not in seen and not seen_add(x)]

def clean_plugin_data(dashboard_entries, request=None):
    """
    Cleans up the plugin data (database, files) for the dashboard_entries given.

    :param iterable dashboard_entries:
    :param django.http.HttpRequest request:
    :return bool: Boolean True if no errors occured and False otherwise.
    """
    errors = False
    for dashboard_entry in dashboard_entries:
        plugin = dashboard_entry.get_plugin(request=request)

        if plugin:
            plugin._delete_plugin_data()

    return not errors

def clone_plugin_data(dashboard_entry, request=None):
    """
    Clone plugin data of a dashboard entry.
    """
    if dashboard_entry:
        plugin = dashboard_entry.get_plugin(request=request)

        if plugin:
            plugin_data = plugin._clone_plugin_data(dashboard_entry)

            if plugin_data is None:
                plugin_data = dashboard_entry.plugin_data

            return plugin_data

def update_plugin_data(dashboard_entry, request=None):
    """
    Update plugin data of a dashboard entry.
    """
    if dashboard_entry:
        plugin = dashboard_entry.get_plugin(request=request)

        if plugin:
            return plugin._update_plugin_data(dashboard_entry)

########NEW FILE########
__FILENAME__ = dash_find_broken_dashboard_entries
from six import print_

from django.core.management.base import BaseCommand

from dash.models import DashboardEntry
from dash.base import get_registered_layout_uids, get_registered_plugin_uids

class Command(BaseCommand):
    def handle(self, *args, **options):
        """
        Adds the missing plugins to database (``dash.models.DashboardPlugin``). This command shall be ran every
        time a developer adds a new plugin.
        """
        dashboard_entries = DashboardEntry._default_manager.all().only('id', 'plugin_uid', 'layout_uid') \
                                         .values_list('id', 'plugin_uid', 'layout_uid')
        broken_plugin_entries = []
        broken_layout_entries = []

        registered_plugin_uids = get_registered_plugin_uids()
        registered_layout_uids = get_registered_layout_uids()

        for entry_id, plugin_uid, layout_uid in dashboard_entries:
            if not plugin_uid in registered_plugin_uids:
                broken_plugin_entries.append((entry_id, plugin_uid))

            if not layout_uid in registered_layout_uids:
                broken_layout_entries.append((entry_id, layout_uid))

        if broken_plugin_entries:
            print_("Broken plugin entries found!", broken_plugin_entries)

        if broken_layout_entries:
            print_("Broken layout entries found!", broken_layout_entries)

########NEW FILE########
__FILENAME__ = dash_sync_plugins
from django.core.management.base import BaseCommand

from dash.utils import sync_plugins

class Command(BaseCommand):
    def handle(self, *args, **options):
        """
        Adds the missing plugins to database (``dash.models.DashboardPlugin``). This command shall be ran every
        time a developer adds a new plugin.
        """
        sync_plugins()

########NEW FILE########
__FILENAME__ = dash_update_plugin_data
from django.core.management.base import BaseCommand

from dash.utils import update_plugin_data_for_entries

class Command(BaseCommand):
    def handle(self, *args, **options):
        """
        Updates the plugin data for all dashboard entries of all users. Rules for update are specified in the
        plugin itself.

        This command shall be ran if significant changes have been made to the system for which the data
        shall be updated.
        """
        update_plugin_data_for_entries()

########NEW FILE########
__FILENAME__ = 0001_initial
# -*- coding: utf-8 -*-
import datetime
from south.db import db
from south.v2 import SchemaMigration
from django.db import models


class Migration(SchemaMigration):

    def forwards(self, orm):
        # Adding model 'DashboardSettings'
        db.create_table(u'dash_dashboardsettings', (
            (u'id', self.gf('django.db.models.fields.AutoField')(primary_key=True)),
            ('user', self.gf('django.db.models.fields.related.ForeignKey')(to=orm['auth.User'], unique=True)),
            ('layout_uid', self.gf('django.db.models.fields.CharField')(max_length=25)),
            ('title', self.gf('django.db.models.fields.CharField')(max_length=255)),
            ('is_public', self.gf('django.db.models.fields.BooleanField')(default=False)),
        ))
        db.send_create_signal(u'dash', ['DashboardSettings'])

        # Adding model 'DashboardWorkspace'
        db.create_table(u'dash_dashboardworkspace', (
            (u'id', self.gf('django.db.models.fields.AutoField')(primary_key=True)),
            ('user', self.gf('django.db.models.fields.related.ForeignKey')(to=orm['auth.User'])),
            ('layout_uid', self.gf('django.db.models.fields.CharField')(max_length=25)),
            ('name', self.gf('django.db.models.fields.CharField')(max_length=255)),
            ('slug', self.gf('autoslug.fields.AutoSlugField')(unique=True, max_length=50, populate_from='name', unique_with=())),
            ('position', self.gf('dash.fields.OrderField')(null=True, blank=True)),
            ('is_public', self.gf('django.db.models.fields.BooleanField')(default=False)),
        ))
        db.send_create_signal(u'dash', ['DashboardWorkspace'])

        # Adding unique constraint on 'DashboardWorkspace', fields ['user', 'slug']
        db.create_unique(u'dash_dashboardworkspace', ['user_id', 'slug'])

        # Adding unique constraint on 'DashboardWorkspace', fields ['user', 'name']
        db.create_unique(u'dash_dashboardworkspace', ['user_id', 'name'])

        # Adding model 'DashboardEntry'
        db.create_table(u'dash_dashboardentry', (
            (u'id', self.gf('django.db.models.fields.AutoField')(primary_key=True)),
            ('user', self.gf('django.db.models.fields.related.ForeignKey')(to=orm['auth.User'])),
            ('workspace', self.gf('django.db.models.fields.related.ForeignKey')(to=orm['dash.DashboardWorkspace'], null=True, blank=True)),
            ('layout_uid', self.gf('django.db.models.fields.CharField')(max_length=25)),
            ('placeholder_uid', self.gf('django.db.models.fields.CharField')(max_length=255)),
            ('plugin_uid', self.gf('django.db.models.fields.CharField')(max_length=255)),
            ('plugin_data', self.gf('django.db.models.fields.TextField')(null=True, blank=True)),
            ('position', self.gf('django.db.models.fields.PositiveIntegerField')(null=True, blank=True)),
        ))
        db.send_create_signal(u'dash', ['DashboardEntry'])

        # Adding model 'DashboardPlugin'
        db.create_table(u'dash_dashboardplugin', (
            (u'id', self.gf('django.db.models.fields.AutoField')(primary_key=True)),
            ('plugin_uid', self.gf('django.db.models.fields.CharField')(unique=True, max_length=255)),
        ))
        db.send_create_signal(u'dash', ['DashboardPlugin'])

        # Adding M2M table for field users on 'DashboardPlugin'
        m2m_table_name = db.shorten_name(u'dash_dashboardplugin_users')
        db.create_table(m2m_table_name, (
            ('id', models.AutoField(verbose_name='ID', primary_key=True, auto_created=True)),
            ('dashboardplugin', models.ForeignKey(orm[u'dash.dashboardplugin'], null=False)),
            ('user', models.ForeignKey(orm[u'auth.user'], null=False))
        ))
        db.create_unique(m2m_table_name, ['dashboardplugin_id', 'user_id'])

        # Adding M2M table for field groups on 'DashboardPlugin'
        m2m_table_name = db.shorten_name(u'dash_dashboardplugin_groups')
        db.create_table(m2m_table_name, (
            ('id', models.AutoField(verbose_name='ID', primary_key=True, auto_created=True)),
            ('dashboardplugin', models.ForeignKey(orm[u'dash.dashboardplugin'], null=False)),
            ('group', models.ForeignKey(orm[u'auth.group'], null=False))
        ))
        db.create_unique(m2m_table_name, ['dashboardplugin_id', 'group_id'])


    def backwards(self, orm):
        # Removing unique constraint on 'DashboardWorkspace', fields ['user', 'name']
        db.delete_unique(u'dash_dashboardworkspace', ['user_id', 'name'])

        # Removing unique constraint on 'DashboardWorkspace', fields ['user', 'slug']
        db.delete_unique(u'dash_dashboardworkspace', ['user_id', 'slug'])

        # Deleting model 'DashboardSettings'
        db.delete_table(u'dash_dashboardsettings')

        # Deleting model 'DashboardWorkspace'
        db.delete_table(u'dash_dashboardworkspace')

        # Deleting model 'DashboardEntry'
        db.delete_table(u'dash_dashboardentry')

        # Deleting model 'DashboardPlugin'
        db.delete_table(u'dash_dashboardplugin')

        # Removing M2M table for field users on 'DashboardPlugin'
        db.delete_table(db.shorten_name(u'dash_dashboardplugin_users'))

        # Removing M2M table for field groups on 'DashboardPlugin'
        db.delete_table(db.shorten_name(u'dash_dashboardplugin_groups'))


    models = {
        u'auth.group': {
            'Meta': {'object_name': 'Group'},
            u'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '80'}),
            'permissions': ('django.db.models.fields.related.ManyToManyField', [], {'to': u"orm['auth.Permission']", 'symmetrical': 'False', 'blank': 'True'})
        },
        u'auth.permission': {
            'Meta': {'ordering': "(u'content_type__app_label', u'content_type__model', u'codename')", 'unique_together': "((u'content_type', u'codename'),)", 'object_name': 'Permission'},
            'codename': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'content_type': ('django.db.models.fields.related.ForeignKey', [], {'to': u"orm['contenttypes.ContentType']"}),
            u'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '50'})
        },
        u'auth.user': {
            'Meta': {'object_name': 'User'},
            'date_joined': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
            'email': ('django.db.models.fields.EmailField', [], {'max_length': '75', 'blank': 'True'}),
            'first_name': ('django.db.models.fields.CharField', [], {'max_length': '30', 'blank': 'True'}),
            'groups': ('django.db.models.fields.related.ManyToManyField', [], {'to': u"orm['auth.Group']", 'symmetrical': 'False', 'blank': 'True'}),
            u'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'is_active': ('django.db.models.fields.BooleanField', [], {'default': 'True'}),
            'is_staff': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'is_superuser': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'last_login': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
            'last_name': ('django.db.models.fields.CharField', [], {'max_length': '30', 'blank': 'True'}),
            'password': ('django.db.models.fields.CharField', [], {'max_length': '128'}),
            'user_permissions': ('django.db.models.fields.related.ManyToManyField', [], {'to': u"orm['auth.Permission']", 'symmetrical': 'False', 'blank': 'True'}),
            'username': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '30'})
        },
        u'contenttypes.contenttype': {
            'Meta': {'ordering': "('name',)", 'unique_together': "(('app_label', 'model'),)", 'object_name': 'ContentType', 'db_table': "'django_content_type'"},
            'app_label': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            u'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'model': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '100'})
        },
        u'dash.dashboardentry': {
            'Meta': {'object_name': 'DashboardEntry'},
            u'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'layout_uid': ('django.db.models.fields.CharField', [], {'max_length': '25'}),
            'placeholder_uid': ('django.db.models.fields.CharField', [], {'max_length': '255'}),
            'plugin_data': ('django.db.models.fields.TextField', [], {'null': 'True', 'blank': 'True'}),
            'plugin_uid': ('django.db.models.fields.CharField', [], {'max_length': '255'}),
            'position': ('django.db.models.fields.PositiveIntegerField', [], {'null': 'True', 'blank': 'True'}),
            'user': ('django.db.models.fields.related.ForeignKey', [], {'to': u"orm['auth.User']"}),
            'workspace': ('django.db.models.fields.related.ForeignKey', [], {'to': u"orm['dash.DashboardWorkspace']", 'null': 'True', 'blank': 'True'})
        },
        u'dash.dashboardplugin': {
            'Meta': {'object_name': 'DashboardPlugin'},
            'groups': ('django.db.models.fields.related.ManyToManyField', [], {'symmetrical': 'False', 'to': u"orm['auth.Group']", 'null': 'True', 'blank': 'True'}),
            u'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'plugin_uid': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '255'}),
            'users': ('django.db.models.fields.related.ManyToManyField', [], {'symmetrical': 'False', 'to': u"orm['auth.User']", 'null': 'True', 'blank': 'True'})
        },
        u'dash.dashboardsettings': {
            'Meta': {'object_name': 'DashboardSettings'},
            u'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'is_public': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'layout_uid': ('django.db.models.fields.CharField', [], {'max_length': '25'}),
            'title': ('django.db.models.fields.CharField', [], {'max_length': '255'}),
            'user': ('django.db.models.fields.related.ForeignKey', [], {'to': u"orm['auth.User']", 'unique': 'True'})
        },
        u'dash.dashboardworkspace': {
            'Meta': {'unique_together': "(('user', 'slug'), ('user', 'name'))", 'object_name': 'DashboardWorkspace'},
            u'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'is_public': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'layout_uid': ('django.db.models.fields.CharField', [], {'max_length': '25'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '255'}),
            'position': ('dash.fields.OrderField', [], {'null': 'True', 'blank': 'True'}),
            'slug': ('autoslug.fields.AutoSlugField', [], {'unique': 'True', 'max_length': '50', 'populate_from': "'name'", 'unique_with': '()'}),
            'user': ('django.db.models.fields.related.ForeignKey', [], {'to': u"orm['auth.User']"})
        }
    }

    complete_apps = ['dash']
########NEW FILE########
__FILENAME__ = 0002_auto__add_field_dashboardworkspace_is_clonable
# -*- coding: utf-8 -*-
import datetime
from south.db import db
from south.v2 import SchemaMigration
from django.db import models


class Migration(SchemaMigration):

    def forwards(self, orm):
        # Adding field 'DashboardWorkspace.is_clonable'
        db.add_column(u'dash_dashboardworkspace', 'is_clonable',
                      self.gf('django.db.models.fields.BooleanField')(default=False),
                      keep_default=False)


    def backwards(self, orm):
        # Deleting field 'DashboardWorkspace.is_clonable'
        db.delete_column(u'dash_dashboardworkspace', 'is_clonable')


    models = {
        u'auth.group': {
            'Meta': {'object_name': 'Group'},
            u'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '80'}),
            'permissions': ('django.db.models.fields.related.ManyToManyField', [], {'to': u"orm['auth.Permission']", 'symmetrical': 'False', 'blank': 'True'})
        },
        u'auth.permission': {
            'Meta': {'ordering': "(u'content_type__app_label', u'content_type__model', u'codename')", 'unique_together': "((u'content_type', u'codename'),)", 'object_name': 'Permission'},
            'codename': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'content_type': ('django.db.models.fields.related.ForeignKey', [], {'to': u"orm['contenttypes.ContentType']"}),
            u'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '50'})
        },
        u'auth.user': {
            'Meta': {'object_name': 'User'},
            'date_joined': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
            'email': ('django.db.models.fields.EmailField', [], {'max_length': '75', 'blank': 'True'}),
            'first_name': ('django.db.models.fields.CharField', [], {'max_length': '30', 'blank': 'True'}),
            'groups': ('django.db.models.fields.related.ManyToManyField', [], {'to': u"orm['auth.Group']", 'symmetrical': 'False', 'blank': 'True'}),
            u'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'is_active': ('django.db.models.fields.BooleanField', [], {'default': 'True'}),
            'is_staff': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'is_superuser': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'last_login': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
            'last_name': ('django.db.models.fields.CharField', [], {'max_length': '30', 'blank': 'True'}),
            'password': ('django.db.models.fields.CharField', [], {'max_length': '128'}),
            'user_permissions': ('django.db.models.fields.related.ManyToManyField', [], {'to': u"orm['auth.Permission']", 'symmetrical': 'False', 'blank': 'True'}),
            'username': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '30'})
        },
        u'contenttypes.contenttype': {
            'Meta': {'ordering': "('name',)", 'unique_together': "(('app_label', 'model'),)", 'object_name': 'ContentType', 'db_table': "'django_content_type'"},
            'app_label': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            u'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'model': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '100'})
        },
        u'dash.dashboardentry': {
            'Meta': {'object_name': 'DashboardEntry'},
            u'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'layout_uid': ('django.db.models.fields.CharField', [], {'max_length': '25'}),
            'placeholder_uid': ('django.db.models.fields.CharField', [], {'max_length': '255'}),
            'plugin_data': ('django.db.models.fields.TextField', [], {'null': 'True', 'blank': 'True'}),
            'plugin_uid': ('django.db.models.fields.CharField', [], {'max_length': '255'}),
            'position': ('django.db.models.fields.PositiveIntegerField', [], {'null': 'True', 'blank': 'True'}),
            'user': ('django.db.models.fields.related.ForeignKey', [], {'to': u"orm['auth.User']"}),
            'workspace': ('django.db.models.fields.related.ForeignKey', [], {'to': u"orm['dash.DashboardWorkspace']", 'null': 'True', 'blank': 'True'})
        },
        u'dash.dashboardplugin': {
            'Meta': {'object_name': 'DashboardPlugin'},
            'groups': ('django.db.models.fields.related.ManyToManyField', [], {'symmetrical': 'False', 'to': u"orm['auth.Group']", 'null': 'True', 'blank': 'True'}),
            u'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'plugin_uid': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '255'}),
            'users': ('django.db.models.fields.related.ManyToManyField', [], {'symmetrical': 'False', 'to': u"orm['auth.User']", 'null': 'True', 'blank': 'True'})
        },
        u'dash.dashboardsettings': {
            'Meta': {'object_name': 'DashboardSettings'},
            u'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'is_public': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'layout_uid': ('django.db.models.fields.CharField', [], {'max_length': '25'}),
            'title': ('django.db.models.fields.CharField', [], {'max_length': '255'}),
            'user': ('django.db.models.fields.related.ForeignKey', [], {'to': u"orm['auth.User']", 'unique': 'True'})
        },
        u'dash.dashboardworkspace': {
            'Meta': {'unique_together': "(('user', 'slug'), ('user', 'name'))", 'object_name': 'DashboardWorkspace'},
            u'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'is_clonable': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'is_public': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'layout_uid': ('django.db.models.fields.CharField', [], {'max_length': '25'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '255'}),
            'position': ('dash.fields.OrderField', [], {'null': 'True', 'blank': 'True'}),
            'slug': ('autoslug.fields.AutoSlugField', [], {'unique': 'True', 'max_length': '50', 'populate_from': "'name'", 'unique_with': '()'}),
            'user': ('django.db.models.fields.related.ForeignKey', [], {'to': u"orm['auth.User']"})
        }
    }

    complete_apps = ['dash']
########NEW FILE########
__FILENAME__ = models
__title__ = 'dash.models'
__author__ = 'Artur Barseghyan <artur.barseghyan@gmail.com>'
__copyright__ = 'Copyright (c) 2013 Artur Barseghyan'
__license__ = 'GPL 2.0/LGPL 2.1'
__all__ = ('DashboardSettings', 'DashboardWorkspace', 'DashboardEntry', 'DashboardPlugin')

import logging
logger = logging.getLogger(__name__)

from django.core.urlresolvers import reverse
from django.db import models
from django.utils.translation import ugettext_lazy as _
from django.contrib.auth.models import User, Group

from autoslug import AutoSlugField

from dash.base import plugin_registry, get_registered_plugins, get_registered_layouts
from dash.helpers import slugify_workspace
from dash.fields import OrderField

class DashboardSettings(models.Model):
    """
    Dashboard settings.

    :Properties:
        - `user` (django.contrib.auth.models.User: User owning the plugin.
        - `layout_uid` (str): Users' preferred layout.
        - `title` (str): Dashboard title.
        - `is_public` (bool): If set to True, available as public (read-only mode).
    """
    user = models.ForeignKey(User, verbose_name=_("User"), unique=True)
    layout_uid = models.CharField(_("Layout"), max_length=25, choices=get_registered_layouts())
    title = models.CharField(_("Title"), max_length=255)
    is_public = models.BooleanField(_("Is public?"), default=False, \
                                    help_text=_("Makes your dashboard to be visible to the public. Visibility "
                                                "of workspaces could be adjust separately for each workspace, "
                                                "however setting your dashboard to be visible to public, makes "
                                                "your default workspace visible to public too."))

    class Meta:
        verbose_name = _("Dashboard settings")
        verbose_name_plural = _("Dashboard settings")

    def __unicode__(self):
        return self.title


class DashboardWorkspace(models.Model):
    """
    Dashboard workspace.

    :Properties:

        - `user` (django.contrib.auth.models.User: User owning the plugin.
        - `layout_uid` (str): Layout to which the entry belongs to.
        - `name` (str): Dashboard name.
        - `slug` (str): Dashboard slug.
        - `position` (int): Dashboard position.
        - `is_public` (int): If set to True, is visible to public.
        - `is_clonable` (bool): If set to True, is clonable.
        - `shared_with` (django.db.models.ManyToManyField): Users the workspace shared with. If workspace
          is shared with specific user, then the user it's shared with can also clone the workspace.
    """
    user = models.ForeignKey(User, verbose_name=_("User"))
    layout_uid = models.CharField(_("Layout"), max_length=25, choices=get_registered_layouts())
    name = models.CharField(_("Name"), max_length=255)
    slug = AutoSlugField(populate_from='name', verbose_name=_("Slug"), unique=True, slugify=slugify_workspace)
    position = OrderField(_("Position"), null=True, blank=True)
    is_public = models.BooleanField(_("Is public?"), default=False, \
                                    help_text=_("Makes your workspace to be visible to the public."))
    is_clonable = models.BooleanField(_("Is cloneable?"), default=False, \
                                    help_text=_("Makes your workspace to be cloneable by other users."))

    class Meta:
        verbose_name = _("Dashboard workspace")
        verbose_name_plural = _("Dashboard workspaces")
        unique_together = (('user', 'slug'), ('user', 'name'),)

    def __unicode__(self):
        return self.name

    def get_entries(self, user):
        """
        Gets all dashboard entries for user given.

        :param django.contrib.auth.models.User user:
        :return iterable:
        """
        return DashboardEntry._default_manager.get_for_workspace(
            user = self.user,
            layout_uid = self.layout_uid,
            workspace = self.slug
            )

    def get_absolute_url(self):
        """
        Absolute URL, which goes to the dashboard workspace page.

        :return string:
        """
        return reverse('dash.dashboard', kwargs={'workspace': self.slug})


class DashboardEntryManager(models.Manager):
    """
    Manager for ``dash.models.DashboardEntry``.
    """
    def get_for_user(self, user, layout_uid, workspace=None):
        """
        Gets all dashboard entries for user given.

        :param django.contrib.auth.models.User user:
        :param string layout_uid:
        :param string workspace: Workspace slug (``dash.models.DashboardWorkspace``).
        :return iterable:
        """
        return self.filter(user=user, layout_uid=layout_uid, workspace__slug=workspace)


class DashboardEntry(models.Model):
    """
    Dashboard entry (widget).

    Since workspace can be nullable (default), we duplicate the `layout_uid`.

    :Properties:

        - `user` (django.contrib.auth.models.User: User owning the plugin.
        - `workspace` (dash.models.DashboardWorkspace): Workspace to which the plugin belongs to.
          If left blank, entry belongs to default workspace.
        - `layout_uid` (str): Layout to which the entry belongs to.
        - `placeholder_uid` (str): Placeholder to which the entry belongs to.
        - `plugin_uid` (str): Plugin name.
        - `plugin_data` (str): JSON formatted string with plugin data.
        - `position` (int): Entry position.
    """
    user = models.ForeignKey(User, verbose_name=_("User"))
    workspace = models.ForeignKey(DashboardWorkspace, verbose_name=_("Workspace"), null=True, blank=True)
    layout_uid = models.CharField(_("Layout"), max_length=25, choices=get_registered_layouts())
    placeholder_uid = models.CharField(_("Placeholder"), max_length=255)
    plugin_uid = models.CharField(_("Plugin name"), max_length=255, choices=get_registered_plugins())
    plugin_data = models.TextField(verbose_name=_("Plugin data"), null=True, blank=True)
    position = models.PositiveIntegerField(_("Position"), null=True, blank=True)

    objects = DashboardEntryManager()

    class Meta:
        verbose_name = _("Dashboard entry")
        verbose_name_plural = _("Dashboard entries")

    def __unicode__(self):
        return "{0} plugin for user {1}".format(self.plugin_uid, self.user)

    def get_plugin(self, fetch_related_data=False, request=None):
        """
        Gets the plugin class (by ``plugin_uid`` property), makes an instance of it, serves the
        data stored in ``plugin_data`` field (if available). Once all is done, plugin is ready to
        be rendered.

        :param bool fetch_related_data: When set to True, plugin is told to re-fetch all related
            data (stored in models or other sources).
        :return dash.base.DashboardPlugin: Subclass of ``dash.base.DashboardPlugin``.
        """
        # Getting plugin from registry.
        cls = plugin_registry.get(self.plugin_uid)

        if not cls:
            # No need to log here, since already logged in registry.
            return None

        # Creating plugin instance.
        plugin = cls(
            self.layout_uid,
            self.placeholder_uid,
            workspace = self.workspace,
            user = self.user,
            position = self.position
            )

        # So that plugin has the request object
        plugin.request = request

        return plugin.process(self.plugin_data, fetch_related_data=fetch_related_data)

    def plugin_uid_code(self):
        """
        Mainly used in admin.
        """
        return self.plugin_uid
    plugin_uid_code.allow_tags = True
    plugin_uid_code.short_description = _('UID')


class DashboardPluginManager(models.Manager):
    """
    Manager for ``dash.models.DashboardPlugin``.
    """


class DashboardPlugin(models.Model):
    """
    Dashboard plugin. Used when ``dash.settings.RESTRICT_PLUGIN_ACCESS`` is set to True.

    :Properties:

        - `plugin_uid` (str): Plugin UID.
        - `users` (django.contrib.auth.models.User): White list of the users allowed to use the dashboard plugin.
        - `groups` (django.contrib.auth.models.Group): White list of the user groups allowed to use the dashboard
          plugin.
    """
    plugin_uid = models.CharField(_("Plugin UID"), max_length=255, choices=get_registered_plugins(), \
                                  unique=True, editable=False)
    users = models.ManyToManyField(User, verbose_name=_("User"), null=True, blank=True)
    groups = models.ManyToManyField(Group, verbose_name=_("Group"), null=True, blank=True)

    objects = DashboardPluginManager()

    class Meta:
        verbose_name = _("Dashboard plugin")
        verbose_name_plural = _("Dashboard plugins")

    def __unicode__(self):
        return "{0} ({1})".format(dict(get_registered_plugins()).get(self.plugin_uid, ''), self.plugin_uid)

    def plugin_uid_code(self):
        """
        Mainly used in admin.
        """
        return self.plugin_uid
    plugin_uid_code.allow_tags = True
    plugin_uid_code.short_description = _('UID')

    def plugin_uid_admin(self):
        """
        Mainly used in admin.
        """
        return self.__unicode__()
    plugin_uid_admin.allow_tags = True
    plugin_uid_admin.short_description = _('Plugin')

    def groups_list(self):
        """
        Flat list (comma separated string) of groups allowed to use the dashboard plugin. Used in Django admin.

        :return string:
        """
        return ', '.join([g.name for g in self.groups.all()])
    groups_list.allow_tags = True
    groups_list.short_description = _('Groups')

    def users_list(self):
        """
        Flat list (comma separated string) of users allowed to use the dashboard plugin. Used in Django admin.

        :return string:
        """
        return ', '.join([u.username for u in self.users.all()])
    users_list.allow_tags = True
    users_list.short_description = _('Users')

########NEW FILE########
__FILENAME__ = settings
"""
- `RESTRICT_PLUGIN_ACCESS` (bool): If set to True, (Django) permission system for dash plugins is enabled.
- `PLUGINS_MODULE_NAME` (str): Name of the module to placed in the (external) apps in which the dash plugin
  code should be implemented and registered.
- `ACTIVE_LAYOUT` (str): Active layout UID.
- `LAYOUTS_MODULE_NAME` (str): Name of the python module to be placed in (external) apps in which the dash
  layouts should be implemented and registered.
- `DEFAULT_WORKSPACE_NAME` (str): Name of the default workspace.
- `DEFAULT_PLACEHOLDER_VIEW_TEMPLATE_NAME` (str): Default template name for the placeholder view.
- `DEFAULT_PLACEHOLDER_EDIT_TEMPLATE_NAME` (str): Default template name for the placeholder edit.
- `LAYOUT_CELL_UNITS` (str): Layout cell units. Allowed values are `em`, `px`, `pt`, `%`.
- `DISPLAY_AUTH_LINK` (bool): If set to True, the log in or log out link is shown in the Dash drop-down
  menu.
- `DEBUG` (bool)
"""
__title__ = 'dash.settings'
__author__ = 'Artur Barseghyan <artur.barseghyan@gmail.com>'
__copyright__ = 'Copyright (c) 2013 Artur Barseghyan'
__license__ = 'GPL 2.0/LGPL 2.1'
__all__ = (
    'RESTRICT_PLUGIN_ACCESS', 'PLUGINS_MODULE_NAME', 'ACTIVE_LAYOUT', 'LAYOUTS_MODULE_NAME',
    'DEFAULT_WORKSPACE_NAME', 'DEFAULT_PLACEHOLDER_VIEW_TEMPLATE_NAME',
    'DEFAULT_PLACEHOLDER_EDIT_TEMPLATE_NAME', 'LAYOUT_CELL_UNITS', 'DISPLAY_AUTH_LINK',
    'DISPLAY_LOGOUT_LINK', 'WAIT_BETWEEN_TEST_STEPS', 'WAIT_AT_TEST_END',
    'DEBUG'
)

from dash.conf import get_setting

RESTRICT_PLUGIN_ACCESS = get_setting('RESTRICT_PLUGIN_ACCESS')

PLUGINS_MODULE_NAME = get_setting('PLUGINS_MODULE_NAME')

ACTIVE_LAYOUT = get_setting('ACTIVE_LAYOUT')

LAYOUTS_MODULE_NAME = get_setting('LAYOUTS_MODULE_NAME')

DEFAULT_WORKSPACE_NAME = get_setting('DEFAULT_WORKSPACE_NAME')

DEFAULT_PLACEHOLDER_VIEW_TEMPLATE_NAME = get_setting('DEFAULT_PLACEHOLDER_VIEW_TEMPLATE_NAME')

DEFAULT_PLACEHOLDER_EDIT_TEMPLATE_NAME = get_setting('DEFAULT_PLACEHOLDER_EDIT_TEMPLATE_NAME')

LAYOUT_CELL_UNITS = get_setting('LAYOUT_CELL_UNITS')

DISPLAY_AUTH_LINK = get_setting('DISPLAY_AUTH_LINK')
DISPLAY_LOGOUT_LINK = DISPLAY_AUTH_LINK

WAIT_BETWEEN_TEST_STEPS = get_setting('WAIT_BETWEEN_TEST_STEPS')
WAIT_AT_TEST_END = get_setting('WAIT_AT_TEST_END')

DEBUG = get_setting('DEBUG')

########NEW FILE########
__FILENAME__ = dash_tags
__author__ = 'Artur Barseghyan <artur.barseghyan@gmail.com>'
__copyright__ = 'Copyright (c) 2013 Artur Barseghyan'
__license__ = 'GPL 2.0/LGPL 2.1'
__all__ = ('get_dash_plugin',)

from django.template import Library, TemplateSyntaxError, Node
from django.conf import settings
from django.utils.translation import ugettext_lazy as _

from dash.settings import ACTIVE_LAYOUT, DISPLAY_AUTH_LINK
from dash.utils import get_workspaces

register = Library()

# ***************************************************************************************
# ***************************************************************************************
# ***************************************************************************************
# **************************** General Dash tags ****************************************
# ***************************************************************************************
# ***************************************************************************************
# ***************************************************************************************

class GetDashPluginNode(Node):
    """
    Node for ``get_dash_plugin`` tag.
    """
    def __init__(self, dashboard_entry, as_var=None):
        self.dashboard_entry = dashboard_entry
        self.as_var = as_var

    def render(self, context):
        request = context['request']
        dashboard_entry = self.dashboard_entry.resolve(context, True)

        plugin = dashboard_entry.get_plugin(request=request)
        context[self.as_var] = plugin
        return ''


@register.tag
def get_dash_plugin(parser, token):
    """
    Gets the plugin. Note, that ``dashboard_entry`` shall be a instance of ``dash.models.DashboardEntry``.
    
    :syntax:

        {% get_dash_plugin dashboard_entry as [context_var_name] %}

    :example:

        {% get_dash_plugin dashboard_entry as plugin %}

        {% get_dash_plugin dashboard_entry as plugin %}
        {{ plugin.render }}
    """
    bits = token.contents.split()

    if 4 == len(bits):
        if 'as' != bits[-2]:
            raise TemplateSyntaxError(
                "Invalid syntax for {0}. Incorrect number of arguments.".format(bits[0])
                )
        as_var = bits[-1]
    else:
        raise TemplateSyntaxError(
            "Invalid syntax for {0}. See docs for valid syntax.".format(bits[0])
            )

    dashboard_entry = parser.compile_filter(bits[1])

    return GetDashPluginNode(dashboard_entry=dashboard_entry, as_var=as_var)


class GetDashWorkspacesNode(Node):
    """
    Node for ``get_dash_workspaces`` tag.
    """
    def __init__(self, layout_uid=None, edit_mode=False):
        self.layout_uid = layout_uid
        self.edit_mode = edit_mode

    def render(self, context):
        try:
            request = context['request']
            user = request.user
        except Exception as e:
            return ''
        
        if self.layout_uid:
            layout_uid = self.layout_uid.resolve(context, True)

        else:
            try:
                layout_uid = context['layout'].uid
            except Exception as e:
                layout_uid = ACTIVE_LAYOUT

        workspaces = get_workspaces(user=user, layout_uid=layout_uid)

        context['workspaces'] = workspaces['workspaces']
        context['next_workspace'] = workspaces['next_workspace']
        context['previous_workspace'] = workspaces['previous_workspace']
        context['current_workspace'] = workspaces['current_workspace']
        return ''


@register.tag
def get_dash_workspaces(parser, token):
    """
    Gets the workspaces queryset

    :syntax:

        {% get_dash_workspaces [layout_uid] mode [edit_mode] %}

    :example:

        {% get_dash_workspaces layout.uid %}

        {% get_dash_workspaces layout.uid 1 %}
    """
    bits = token.contents.split()

    if len(bits) not in (1, 2, 3, 4):
        raise TemplateSyntaxError(
                "Invalid syntax for {0}. Incorrect number of arguments.".format(bits[0])
                )

    if 4 == len(bits):
        layout_uid = parser.compile_filter(bits[1])
        edit_mode = bits[-1]

    elif 3 == len(bits):
        layout_uid = None
        edit_mode = bits[-1]

    elif 2 == len(bits):
        layout_uid = parser.compile_filter(bits[1])
        edit_mode = False

    return GetDashWorkspacesNode(layout_uid=layout_uid, edit_mode=edit_mode)


# ***************************************************************************************
# ***************************************************************************************
# ***************************************************************************************
# **************************** Additional Dash tags *************************************
# ***************************************************************************************
# ***************************************************************************************
# ***************************************************************************************

def render_auth_link(context):
    """
    Render logout link.
    """
    if not DISPLAY_AUTH_LINK:
        return {}

    request = context.get('request', None)
    if request and request.user.is_authenticated():
        try:
            auth_url = settings.LOGOUT_URL
            auth_icon_class = 'icon-signout'
            auth_link_text = _('Log out')
        except Exception as e:
            auth_url = ''
            auth_icon_class = ''
            auth_link_text = ''
    else:
        try:
            auth_url = settings.LOGIN_URL
            auth_icon_class = 'icon-signin'
            auth_link_text = _('Log in')
        except Exception as e:
            auth_url = ''
            auth_icon_class = ''
            auth_link_text = ''

    return {
        'auth_link': auth_url,
        'auth_icon_class': auth_icon_class,
        'auth_link_text': auth_link_text
    }

# For backwards compatibilty. TODO: Raise deprecation warning.
def render_logout_link(context):
    return render_auth_link(context)

register.inclusion_tag('dash/snippets/render_auth_link.html', takes_context=True)(render_auth_link)
register.inclusion_tag('dash/snippets/render_auth_link.html', takes_context=True)(render_logout_link)

# ***************************************************************************************
# ***************************************************************************************
# ***************************************************************************************
# **************************** Permission tags ******************************************
# ***************************************************************************************
# ***************************************************************************************
# ***************************************************************************************

class HasEditDashboardPermissionsNode(Node):
    """
    Node for ``has_edit_dashboard_permissions`` tag.
    """
    def __init__(self, as_var=None):
        self.as_var = as_var

    def render(self, context):
        try:
            perms = context['perms']
        except Exception as e:
            if self.as_var:
                context[self.as_var] = False
                return ''
            else:
                return False

        perms_required = [
            'dash.add_dashboardentry', 'dash.change_dashboardentry', 'dash.delete_dashboardentry',
            'dash.add_dashboardworkspace', 'dash.change_dashboardworkspace', 'dash.delete_dashboardworkspace',
            'dash.add_dashboardsettings', 'dash.change_dashboardsettings', 'dash.delete_dashboardsettings',
        ]

        for perm in perms_required:
            if perm in perms:
                if self.as_var:
                    context[self.as_var] = True
                    return ''
                else:
                    return True

        if self.as_var:
            context[self.as_var] = False
            return ''
        else:
            return False


@register.tag
def has_edit_dashboard_permissions(parser, token):
    """
    Gets the workspaces queryset

    :syntax:

        {% has_edit_dashboard_permissions as [var_name] %}

    :example:

        {% has_edit_dashboard_permissions %}

        or

        {% has_edit_dashboard_permissions as has_permissions %}
    """
    bits = token.contents.split()

    if len(bits) not in (1, 3):
        raise TemplateSyntaxError(
                "Invalid syntax for {0}. Incorrect number of arguments.".format(bits[0])
                )

    if 3 == len(bits):
        as_var = bits[-1]

    else:
        as_var = None

    return HasEditDashboardPermissionsNode(as_var=as_var)

########NEW FILE########
__FILENAME__ = tests
__title__ = 'dash.tests'
__author__ = 'Artur Barseghyan <artur.barseghyan@gmail.com>'
__copyright__ = 'Copyright (c) 2013 Artur Barseghyan'
__license__ = 'GPL 2.0/LGPL 2.1'

import unittest

from optparse import OptionParser
from time import sleep

from six import print_

from django.test import TestCase
from django.contrib.auth.models import User
from django.test import RequestFactory
from django.core.management import call_command
from django.test import LiveServerTestCase
from django.test import Client
from django.contrib.staticfiles.management.commands import collectstatic
from django.conf import settings

from selenium.webdriver.firefox.webdriver import WebDriver
from selenium.webdriver.remote.webdriver import WebDriver as RemoveWebDriver
from selenium.webdriver.support.wait import WebDriverWait

from dash.discover import autodiscover
from dash.base import plugin_registry, layout_registry
from dash.base import get_registered_plugins, get_registered_layouts, get_layout
from dash.utils import get_occupied_cells, get_user_plugins
from dash.models import DashboardEntry
from dash.management.commands import dash_sync_plugins
from dash.settings import WAIT_BETWEEN_TEST_STEPS, WAIT_AT_TEST_END

DASH_TEST_USER_USERNAME = 'test_admin'
DASH_TEST_USER_PASSWORD = 'test'
PRINT_INFO = True
TRACK_TIME = False

def print_info(func):
    """
    Prints some useful info.
    """
    if not PRINT_INFO:
        return func

    def inner(self, *args, **kwargs):
        if TRACK_TIME:
            import simple_timer
            timer = simple_timer.Timer() # Start timer

        result = func(self, *args, **kwargs)

        if TRACK_TIME:
            timer.stop() # Stop timer

        print_('\n{0}'.format(func.__name__))
        print_('============================')
        if func.__doc__:
            print_('""" {0} """'.format(func.__doc__.strip()))
        print_('----------------------------')
        if result is not None:
            print_(result)
        if TRACK_TIME:
            print_('done in {0} seconds'.format(timer.duration))
        print_('\n')

        return result
    return inner


def create_dashboard_user():
    """
    Create a user for testing the dashboard.

    TODO: At the moment an admin account is being tested. Automated tests with diverse accounts are
    to be implemented.
    """
    u = User()
    u.username = DASH_TEST_USER_USERNAME
    u.email = 'admin@dev.django-dash.com'
    u.is_superuser = True
    u.is_staff = True
    u.set_password(DASH_TEST_USER_PASSWORD)

    try:
        u.save()
    except Exception as e:
        pass


DASH_SET_UP = False

def setup_dash():
    """
    Set up dash.
    """
    #global DASH_SET_UP
    #if DASH_SET_UP is True:
    #    return

    call_command('collectstatic', verbosity=3, interactive=False)
    call_command('dash_sync_plugins', verbosity=3, interactive=False)
    #call_command('loaddata', 'dash', verbosity=3, interactive=False)

    #DASH_SET_UP = True


class DashCoreTest(TestCase):
    """
    Tests of django-dash core functionality.
    """
    def setUp(self):
        setup_dash()

    @print_info
    def test_01_registered_layouts(self):
        """
        Test registered layouts (`get_registered_layouts`).
        """
        res = get_registered_layouts()
        self.assertTrue(len(res) > 0)
        return res

    @print_info
    def test_02_active_layout(self):
        """
        Test active layout (`get_layout`).
        """
        layout_cls = get_layout()
        self.assertTrue(layout_cls is not None)
        return layout_cls

    @print_info
    def test_03_get_layout_placeholders(self):
        """
        Test active layout placeholders (`get_placeholder_instances`).
        """
        layout_cls = get_layout()
        layout = layout_cls()
        res = layout.get_placeholder_instances()
        self.assertTrue(len(res) > 0)
        return res

    @print_info
    def test_04_active_layout_render_for_view(self):
        """
        Test active layout render (`render_for_view`).
        """
        try:
            # Create dashboard user
            create_dashboard_user()
        except:
            pass

        # Getting the admin (user with plugin data)
        user = User.objects.get(username=DASH_TEST_USER_USERNAME)

        # Faking the Django request
        request_factory = RequestFactory()
        request = request_factory.get('/dashboard/', data={'user': user})
        request.user = user
        workspace = None

        # Getting the list of plugins that user is allowed to use.
        registered_plugins = get_user_plugins(request.user)
        user_plugin_uids = [uid for uid, repr in registered_plugins]

        layout = get_layout(as_instance=True)

        # Fetching all dashboard entries for user and freezeing the queryset
        dashboard_entries = DashboardEntry._default_manager \
                                          .get_for_user(user=request.user, layout_uid=layout.uid, workspace=workspace) \
                                          .select_related('workspace', 'user') \
                                          .filter(plugin_uid__in=user_plugin_uids) \
                                          .order_by('placeholder_uid', 'position')[:]

        res = layout.render_for_view(dashboard_entries=dashboard_entries, request=request)
        return res

    @print_info
    def test_05_get_occupied_cells(self):
        """
        Test ``dash.utils.get_occupied_cells``.
        """
        # Fake dashboard entry
        class Entry(object):
            pass

        layout = get_layout(as_instance=True)
        placeholder = layout.get_placeholder('main')

        res = []

        if 'android' == layout.uid:
            # *********** First test
            # 2 x 2 widget
            r = get_occupied_cells(layout, placeholder, 'memo_2x2', 3)

            self.assertEqual(r, [3, 4, 9, 10])

            res.append(r)

            # *********** Second test

            # 3 x 3 widget
            r = get_occupied_cells(layout, placeholder, 'memo_3x3', 16)

            self.assertEqual(r, [16, 17,18, 22, 23, 24, 28, 29, 30])

            res.append(r)

            # *********** Third test (the nasty one)

            # 3 x 3 widget
            #r = get_occupied_cells(layout, placeholder, 'memo_3x3', 17)

            #self.assertEqual(r, [16, 17,18, 22, 23, 24, 28, 29, 30])

            #res.append(r)

        return res


class DashBrowserTest(LiveServerTestCase):
    """
    django-dash browser tests.

    TODO: At the moment is done for admin only. Normal users shall be tested as well
    for plugin security workflow (permissions system used).
    """
    try:
        LIVE_SERVER_URL = settings.LIVE_SERVER_URL
    except Exception as e:
        LIVE_SERVER_URL = None

    @classmethod
    def setUpClass(cls):
        try:
            username = os.environ["SAUCE_USERNAME"]
            access_key = os.environ["SAUCE_ACCESS_KEY"]
            capabilities["tunnel-identifier"] = os.environ["TRAVIS_JOB_NUMBER"]
            hub_url = "%s:%s@localhost:4445" % (username, access_key)
            cls.selenium = RemoveWebDriver(
                desired_capabilities=capabilities, command_executor="http://%s/wd/hub" % hub_url
                )
        except:
            cls.selenium = WebDriver()
        super(DashBrowserTest, cls).setUpClass()

        setup_dash()

    @classmethod
    def tearDownClass(cls):
        try:
            cls.selenium.quit()
        except Exception as e:
            print(e)

        super(DashBrowserTest, cls).tearDownClass()

    def __add_plugin_widget_test(self, position, plugin_widget_name, plugin_widget_name_with_dimensions, \
                                 plugin_widget_css_class, added_plugin_widget_css_classes, form_data={}, \
                                 form_hook_func=None):
        """
        Test add any single plugin.

        :param string position: Example value "col-1 row-1"
        :param string plugin_widget_name: Example value "Dummy".
        :param string plugin_widget_name_with_dimensions: Example value "Dummy (1x1)".
        :param string plugin_widget_css_class: Example value "plugin-dummy1x1".
        :param list added_plugin_widget_css_classes: Example value ['width-1', 'height-1'].
        :param dict form_data: Example value {'title': "Lorem", 'text': "Lorem ipsum dolor sit amet"}.
        :param callable form_hook_func: Function to when add form is opened (to populate the data).

        :example:

        Test 1x1 URL plugin widget::

            def choose_url_image():
                # Hook function to select an image for test 1x1 URL plugin widget.
                image_input = self.selenium.find_element_by_xpath(
                    '//select[@name="image"]/option[@value="icon-coffee"]'
                    )
                self.assertTrue(image_input is not None)
                image_input.click()

            self.__add_plugin_widget_test(
                position = "col-1 row-1",
                plugin_widget_name = "URL",
                plugin_widget_name_with_dimensions = "URL (1x1)",
                plugin_widget_css_class = "plugin-url_1x1",
                added_plugin_widget_css_classes = ('width-1', 'height-1'),
                form_data = {'title': "Test 1x1 URL", 'url': "http://delusionalinsanity.com/portfolio/"},
                form_hook_func = choose_url_image
                )

        Test 2x1 Dummy plugin widget::

            self.__add_plugin_widget_test(
                position = "col-2 row-1",
                plugin_widget_name = "Dummy",
                plugin_widget_name_with_dimensions = "Dummy (2x1)",
                plugin_widget_css_class = "plugin-dummy2x1",
                added_plugin_widget_css_classes = ('width-2', 'height-1')
                )

        Test 3x3 Memo plugin widget::

            self.__add_plugin_widget_test(
                position = "col-4 row-1",
                plugin_widget_name = "Memo",
                plugin_widget_name_with_dimensions = "Memo (3x3)",
                plugin_widget_css_class = "plugin-memo_3x3",
                added_plugin_widget_css_classes = ('width-3', 'height-3'),
                form_data = {'title': "Lorem", 'text': "Lorem ipsum dolor sit amet"}
                )

        Test 3x3 Video plugin widget::

            self.__add_plugin_widget_test(
                position = "col-1 row-2",
                plugin_widget_name = "Video",
                plugin_widget_name_with_dimensions = "Video (3x3)",
                plugin_widget_css_class = "plugin-video_3x3",
                added_plugin_widget_css_classes = ('width-3', 'height-3'),
                form_data = {'title': "Test 3x3 video", 'url': "http://www.youtube.com/watch?v=8GVIui0JK0M"}
                )
        """
        # +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
        # +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
        # +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
        # +++++++++++++ Step 1: Dashboard user logs in ++++++++++++++++++
        # +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
        # +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
        # +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
        live_server_url = self.LIVE_SERVER_URL if self.LIVE_SERVER_URL else self.live_server_url
        self.selenium.get('{0}{1}'.format(live_server_url, settings.LOGIN_URL))
        self.selenium.maximize_window()
        username_input = self.selenium.find_element_by_name("username")
        username_input.send_keys(DASH_TEST_USER_USERNAME)
        password_input = self.selenium.find_element_by_name("password")
        password_input.send_keys(DASH_TEST_USER_PASSWORD)
        self.selenium.find_element_by_xpath('//button[@type="submit"]').click()

        # Wait until the list view opens
        WebDriverWait(self.selenium, timeout=4).until(
            #lambda driver: driver.find_element_by_id('id_main')
            lambda driver: driver.find_element_by_xpath('//body[contains(@class, "layout")]')
            )

        # Click the button to go to dashboard edit
        self.selenium.find_element_by_xpath('//a[contains(@class, "menu-dashboard-edit")]').click()

        # Wait until the dashboard edit view opens
        WebDriverWait(self.selenium, timeout=4).until(
            #lambda driver: driver.find_element_by_id('id_main')
            lambda driver: driver.find_element_by_xpath('//body[contains(@class, "layout")]')
            )

        # Click the add widget button to add a new widget to the dashboard
        #self.selenium.find_element_by_xpath('//a[contains(@class, "add-plugin")]').click()
        add_plugin_widget_div = self.selenium.find_element_by_xpath('//div[contains(@class, "{0}")]'.format(position))
        add_plugin_widget_div.find_element_by_class_name('add-plugin').click()

        # Wait until the add widget view opens
        WebDriverWait(self.selenium, timeout=4).until(
            #lambda driver: driver.find_element_by_xpath('//a[contains(@class, "widget-dummy")]')
            lambda driver: driver.find_element_by_xpath('//a[text()="{0}"]'.format(plugin_widget_name_with_dimensions))
            )

        # Wait until the accordion is really loaded
        WebDriverWait(self.selenium, timeout=4).until(
            lambda driver: driver.find_element_by_id('accordion')
            )

        # Add a dummy (1x1) widget
        add_dummy_plugin_widget = self.selenium.find_element_by_xpath(
            '//a[text()="{0}"]'.format(plugin_widget_name_with_dimensions)
            )

        self.selenium.get('{0}'.format(add_dummy_plugin_widget.get_attribute('href')))

        # Wait until the add dummy widget form opens
        WebDriverWait(self.selenium, timeout=4).until(
            lambda driver: driver.find_element_by_xpath('//body[contains(@class, "standalone")]')
            )

        # Filling with test data
        if form_data:
            for field_name, field_value in form_data.items():
                field_input = self.selenium.find_element_by_name(field_name)
                field_input.send_keys(field_value)

        # If form_hook_func (callable) is specified, call it.
        if form_hook_func:
            form_hook_func()

        # Click add widget button
        self.selenium.find_element_by_xpath('//button[@type="submit"]').click()

        # Wait until the edit dashboard page opens
        WebDriverWait(self.selenium, timeout=4).until(
            lambda driver: driver.find_element_by_xpath(
                '//div[contains(@class, "{0}")]'.format(plugin_widget_css_class)
                )
            )

        # Make sure the success message is there
        self.selenium.find_element_by_xpath(
            """//li[text()='The dashboard widget "{0}" was added successfully.']""".format(plugin_widget_name)
            )

        dummy_plugin_widget = self.selenium.find_element_by_xpath(
            '//div[contains(@class, "{0}")]'.format(plugin_widget_css_class)
            )
        dummy_plugin_widget_classes = dummy_plugin_widget.get_attribute('class')
        dummy_plugin_widget_classes = dummy_plugin_widget_classes.split(' ')
        for added_plugin_widget_css_class in added_plugin_widget_css_classes:
            self.assertTrue(added_plugin_widget_css_class in dummy_plugin_widget_classes)

    def __add_dashboard_entry_test(self, wait=0):
        """
        Add dashboard entry test.

        :param int wait: Number of seconds to sleep at the end of the test.
        """
        flow = []

        try:
            # Create dashboard user
            create_dashboard_user()
        except:
            pass

        # +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
        # +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
        # +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
        # +++++++++++++ Step 1: Dashboard user logs in ++++++++++++++++++
        # +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
        # +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
        # +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

        def choose_url_image():
            """
            Hook function to select an image for test 1x1 URL plugin widget.
            """
            image_input = self.selenium.find_element_by_xpath(
                '//select[@name="image"]/option[@value="icon-coffee"]'
                )
            self.assertTrue(image_input is not None)
            image_input.click()

        # Test 1x1 URL plugin widget
        self.__add_plugin_widget_test(
            position = "col-1 row-1",
            plugin_widget_name = "URL",
            plugin_widget_name_with_dimensions = "URL (1x1)",
            plugin_widget_css_class = "plugin-url_1x1",
            added_plugin_widget_css_classes = ('width-1', 'height-1'),
            form_data = {'title': "Test 1x1 URL", 'url': "http://delusionalinsanity.com/portfolio/"},
            form_hook_func = choose_url_image
            )

        # Test 2x1 Dummy plugin widget
        self.__add_plugin_widget_test(
            position = "col-2 row-1",
            plugin_widget_name = "Dummy",
            plugin_widget_name_with_dimensions = "Dummy (2x1)",
            plugin_widget_css_class = "plugin-dummy_2x1",
            added_plugin_widget_css_classes = ('width-2', 'height-1')
            )

        # Test 3x3 Memo plugin widget
        self.__add_plugin_widget_test(
            position = "col-4 row-1",
            plugin_widget_name = "Memo",
            plugin_widget_name_with_dimensions = "Memo (3x3)",
            plugin_widget_css_class = "plugin-memo_3x3",
            added_plugin_widget_css_classes = ('width-3', 'height-3'),
            form_data = {'title': "Test 3x3 memo", 'text': "Lorem ipsum dolor sit amet."}
            )

        # Test 3x3 Video plugin widget
        self.__add_plugin_widget_test(
            position = "col-1 row-2",
            plugin_widget_name = "Video",
            plugin_widget_name_with_dimensions = "Video (3x3)",
            plugin_widget_css_class = "plugin-video_3x3",
            added_plugin_widget_css_classes = ('width-3', 'height-3'),
            form_data = {'title': "Test 3x3 video", 'url': "http://www.youtube.com/watch?v=8GVIui0JK0M"}
            )

        if wait:
            sleep(wait)

        return flow

    def __edit_plugin_widget_test(self, plugin_widget_name, plugin_widget_css_class, form_data={}, \
                                  form_hook_func=None):
        """
        Test edit any single plugin.

        :param string plugin_widget_name: Example value "Dummy".
        :param string plugin_widget_css_class: Example value "plugin-dummy1x1".
        :param dict form_data: Example value {'title': "Lorem", 'text': "Lorem ipsum dolor sit amet"}.
        :param callable form_hook_func: Function to when edit form is opened (to populate the data).

        :example:

        Test 1x1 URL plugin widget::

            def choose_url_image():
                # Hook function to select an image for test 1x1 URL plugin widget.
                image_input = self.selenium.find_element_by_xpath(
                    '//select[@name="image"]/option[@value="icon-coffee"]'
                    )
                self.assertTrue(image_input is not None)
                image_input.click()

            self.__edit_plugin_widget_test(
                plugin_widget_name = "URL",
                plugin_widget_css_class = "plugin-url_1x1",
                form_data = {'title': "Test 1x1 URL", 'url': "http://delusionalinsanity.com/portfolio/"},
                form_hook_func = choose_url_image
                )

        Test 2x1 Dummy plugin widget::

            self.__edit_plugin_widget_test(
                plugin_widget_name = "Dummy",
                plugin_widget_css_class = "plugin-dummy_2x1"
                )

        Test 3x3 Memo plugin widget::

            self.__edit_plugin_widget_test(
                plugin_widget_name = "Memo",
                plugin_widget_css_class = "plugin-memo_3x3",
                form_data = {'title': "Lorem", 'text': "Lorem ipsum dolor sit amet"}
                )

        Test 3x3 Video plugin widget::

            self.__edit_plugin_widget_test(
                plugin_widget_name = "Video",
                plugin_widget_css_class = "plugin-video_3x3",
                form_data = {'title': "Test 3x3 video", 'url': "http://www.youtube.com/watch?v=8GVIui0JK0M"}
                )
        """
        # +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
        # +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
        # +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
        # +++++++++++++ Step 2: User edits the plugin widgets +++++++++++
        # +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
        # +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
        # +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

        # Click the add widget button to edit the widget on the dashboard
        edit_plugin_widget_div = self.selenium.find_element_by_xpath(
            '//div[contains(@class, "{0}")]'.format(plugin_widget_css_class)
            )
        edit_plugin_widget_div.find_element_by_class_name('edit-plugin').click()

        # Wait until the edit widget form opens
        WebDriverWait(self.selenium, timeout=4).until(
            lambda driver: driver.find_element_by_xpath('//body[contains(@class, "standalone")]')
            )

        # Filling with test data
        if form_data:
            for field_name, field_value in form_data.items():
                field_input = self.selenium.find_element_by_name(field_name)
                field_input.clear()
                field_input.send_keys(field_value)

        # If form_hook_func (callable) is specified, call it.
        if form_hook_func:
            form_hook_func()

        # Click add widget button
        self.selenium.find_element_by_xpath('//button[@type="submit"]').click()

        # Wait until the edit dashboard page opens
        WebDriverWait(self.selenium, timeout=4).until(
            lambda driver: driver.find_element_by_xpath(
                '//div[contains(@class, "{0}")]'.format(plugin_widget_css_class)
                )
            )

        # Make sure the success message is there
        self.selenium.find_element_by_xpath(
            """//li[text()='The dashboard widget "{0}" was edited successfully.']""".format(plugin_widget_name)
            )

        dummy_plugin_widget = self.selenium.find_element_by_xpath(
            '//div[contains(@class, "{0}")]'.format(plugin_widget_css_class)
            )

    def __edit_dashboard_entry_test(self, wait=0):
        """
        Edit dashboard entry test.

        :param int wait: Number of seconds to sleep at the end of the test.
        """
        flow = []

        # Test 1x1 URL plugin widget::

        def choose_url_image():
            # Hook function to select an image for test 1x1 URL plugin widget.
            image_input = self.selenium.find_element_by_xpath(
                '//select[@name="image"]/option[@value="icon-camera"]'
                )
            self.assertTrue(image_input is not None)
            image_input.click()

        self.__edit_plugin_widget_test(
            plugin_widget_name = "URL",
            plugin_widget_css_class = "plugin-url_1x1",
            form_data = {'title': "Edited test 1x1 URL", 'url': "http://foreverchild.info/"},
            form_hook_func = choose_url_image
            )

        # Test 2x1 Dummy plugin widget::

        self.__edit_plugin_widget_test(
            plugin_widget_name = "Dummy",
            plugin_widget_css_class = "plugin-dummy_2x1"
            )

        # Test 3x3 Memo plugin widget::

        self.__edit_plugin_widget_test(
            plugin_widget_name = "Memo",
            plugin_widget_css_class = "plugin-memo_3x3",
            form_data = {'title': "Edited lorem", 'text': "Edited lorem ipsum dolor sit amet"}
            )

        # Test 3x3 Video plugin widget::

        self.__edit_plugin_widget_test(
            plugin_widget_name = "Video",
            plugin_widget_css_class = "plugin-video_3x3",
            form_data = {'title': "Edited test 3x3 video", 'url': "http://www.youtube.com/watch?v=veOhHqVWwP4"}
            )

        if wait:
            sleep(wait)

        return flow


    def __delete_plugin_widget_test(self, plugin_widget_css_class):
        """
        Test delete any single plugin.

        :param string plugin_widget_css_class: Example value "plugin-dummy1x1".

        :example:

        Test 1x1 URL plugin widget::

            self.__delete_plugin_widget_test(
                plugin_widget_css_class = "plugin-url_1x1"
                )

        Test 2x1 Dummy plugin widget::

            self.__delete_plugin_widget_test(
                plugin_widget_css_class = "plugin-dummy_2x1"
                )

        Test 3x3 Memo plugin widget::

            self.__delete_plugin_widget_test(
                plugin_widget_css_class = "plugin-memo_3x3"
                )

        Test 3x3 Video plugin widget::

            self.__delete_plugin_widget_test(
                plugin_widget_css_class = "plugin-video_3x3"
                )
        """
        # +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
        # +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
        # +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
        # +++++++++++++ Step 2: User deletes the plugin widgets +++++++++
        # +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
        # +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
        # +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

        # Click the add widget button to edit the widget on the dashboard
        edit_plugin_widget_div = self.selenium.find_element_by_xpath(
            '//div[contains(@class, "{0}")]'.format(plugin_widget_css_class)
            )
        edit_plugin_widget_div.find_element_by_class_name('remove-plugin').click()

        # Wait until the edit dashboard page opens
        WebDriverWait(self.selenium, timeout=4).until(
            lambda driver: driver.find_element_by_xpath(
                '//body[contains(@class, "layout")]'
                )
            )

        found = False
        try:
            dummy_plugin_widget = self.selenium.find_element_by_xpath(
                '//div[contains(@class, "{0}")]'.format(plugin_widget_css_class)
                )
            found = True
        except:
            pass

        self.assertTrue(not found)

    def __delete_dashboard_entry_test(self, wait=0):
        """
        Delete dashboard entry test.

        :param int wait: Number of seconds to sleep at the end of the test.
        """
        flow = []

        # Test 1x1 URL plugin widget::

        self.__delete_plugin_widget_test(
            plugin_widget_css_class = "plugin-url_1x1"
            )

        # Test 2x1 Dummy plugin widget::

        self.__delete_plugin_widget_test(
            plugin_widget_css_class = "plugin-dummy_2x1"
            )

        # Test 3x3 Memo plugin widget::

        self.__delete_plugin_widget_test(
            plugin_widget_css_class = "plugin-memo_3x3"
            )

        # Test 3x3 Video plugin widget::

        self.__delete_plugin_widget_test(
            plugin_widget_css_class = "plugin-video_3x3"
            )

        if wait:
            sleep(wait)

        return flow

    @print_info
    def test_01_add_dashboard_entry(self):
        """
        Add dashboard entry test.
        """
        return self.__add_dashboard_entry_test(wait=WAIT_AT_TEST_END)

    @print_info
    def test_02_edit_dashboard_entry(self):
        """
        Edit dashboard entry test.
        """
        self.__add_dashboard_entry_test(wait=WAIT_BETWEEN_TEST_STEPS)
        return self.__edit_dashboard_entry_test(wait=WAIT_AT_TEST_END)

    @print_info
    def test_03_delete_dashboard_entry(self):
        """
        Delete dashboard entry test.
        """
        self.__add_dashboard_entry_test(wait=WAIT_BETWEEN_TEST_STEPS)
        return self.__delete_dashboard_entry_test(wait=WAIT_AT_TEST_END)


if __name__ == '__main__':
    unittest.main()

########NEW FILE########
__FILENAME__ = urls
from django.conf.urls import patterns, url

urlpatterns = patterns('dash.views',
    # Add dashboard entry.
    url(r'^entry/add/(?P<placeholder_uid>[\w_]+)/(?P<plugin_uid>[\w_\-]+)/ws/(?P<workspace>[\w_\-]+)/pos/(?P<position>\d+)/$', \
        view='add_dashboard_entry', name='dash.add_dashboard_entry'),
    url(r'^entry/add/(?P<placeholder_uid>[\w_]+)/(?P<plugin_uid>[\w_\-]+)/ws/(?P<workspace>[\w_\-]+)/$', \
        view='add_dashboard_entry', name='dash.add_dashboard_entry'),
    url(r'^entry/add/(?P<placeholder_uid>[\w_]+)/(?P<plugin_uid>[\w_\-]+)/pos/(?P<position>\d+)/$', \
        view='add_dashboard_entry', name='dash.add_dashboard_entry'),
    url(r'^entry/add/(?P<placeholder_uid>[\w_]+)/(?P<plugin_uid>[\w_\-]+)/$', view='add_dashboard_entry', \
        name='dash.add_dashboard_entry'),

    # Edit dashboard entry.
    url(r'^entry/edit/(?P<entry_id>\d+)/$', view='edit_dashboard_entry', name='dash.edit_dashboard_entry'),

    # Delete dashboard entry.
    url(r'^entry/delete/(?P<entry_id>\d+)/$', view='delete_dashboard_entry', name='dash.delete_dashboard_entry'),

    # ********************** Edit dashboard
    # Edit dashboard.
    url(r'^edit/(?P<workspace>[\w_\-]+)/$', view='edit_dashboard', name='dash.edit_dashboard'),
    url(r'^edit/$', view='edit_dashboard', name='dash.edit_dashboard'),

    # ********************** Widgets for dashboard entries
    url(r'^plugin-widgets/(?P<placeholder_uid>[\w_]+)/(?P<workspace>[\w_\-]+)/pos/(?P<position>\d+)/$', \
        view='plugin_widgets', name='dash.plugin_widgets'),
    # Workspace should not be named `pos`. Add check. TODO.
    url(r'^plugin-widgets/(?P<placeholder_uid>[\w_]+)/pos/(?P<position>\d+)/$', view='plugin_widgets', \
        name='dash.plugin_widgets'),
    url(r'^plugin-widgets/(?P<placeholder_uid>[\w_]+)/(?P<workspace>[\w_\-]+)/$', view='plugin_widgets', \
        name='dash.plugin_widgets'),
    url(r'^plugin-widgets/(?P<placeholder_uid>[\w_]+)/$', view='plugin_widgets', name='dash.widgets'),

    # ********************** Dashboard workspace
    # List workspaces.
    url(r'^workspaces/(?P<workspace>[\w_\-]+)/$', view='dashboard_workspaces', name='dash.dashboard_workspaces'),
    url(r'^workspaces/$', view='dashboard_workspaces', name='dash.dashboard_workspaces'),

    # Create dashboard workspace.
    url(r'^workspace/create/$', view='create_dashboard_workspace', name='dash.create_dashboard_workspace'),

    # Edit dashboard workspace.
    url(r'^workspace/edit/(?P<workspace_id>\d+)/$', view='edit_dashboard_workspace',
        name='dash.edit_dashboard_workspace'),

    # Delete dashboard workspace.
    url(r'^workspace/delete/(?P<workspace_id>\d+)/$', view='delete_dashboard_workspace',
        name='dash.delete_dashboard_workspace'),

    # Clone dashboard workspace.
    url(r'^workspace/clone/(?P<workspace_id>\d+)/$', view='clone_dashboard_workspace',
        name='dash.clone_dashboard_workspace'),

    # View dashboard workspace.
    url(r'^workspace/(?P<workspace>[\w_\-]+)/$', view='dashboard', name='dash.dashboard'),

    # Edit dashboard settings.
    url(r'^settings/edit/$', view='edit_dashboard_settings', name='dash.edit_dashboard_settings'),

    # View default dashboard (no workspace selected == default workspace used).
    url(r'^$', view='dashboard', name='dash.dashboard'),
)

########NEW FILE########
__FILENAME__ = utils
__title__ = 'dash.utils'
__author__ = 'Artur Barseghyan <artur.barseghyan@gmail.com>'
__copyright__ = 'Copyright (c) 2013 Artur Barseghyan'
__license__ = 'GPL 2.0/LGPL 2.1'
__all__ = (
    'get_allowed_plugin_uids', 'get_user_plugins', 'get_user_plugin_uids', 'get_widgets',
    'update_plugin_data_for_entries', 'sync_plugins', 'get_workspaces', 'build_cells_matrix',
    'get_or_create_dashboard_settings', 'get_dashboard_settings', 'get_public_dashboard_url'
)

import copy
import datetime

from six import PY3

from django.core.urlresolvers import reverse
from django.core.exceptions import ObjectDoesNotExist
from django.utils.encoding import force_text

from dash.base import (
    plugin_registry, get_registered_plugin_uids, ensure_autodiscover, get_registered_plugins,
    plugin_widget_registry, PluginWidgetRegistry, get_layout,
    BaseDashboardLayout, BaseDashboardPlaceholder
    )
from dash.models import DashboardEntry, DashboardPlugin, DashboardWorkspace, DashboardSettings
from dash.helpers import slugify_workspace, lists_overlap, clone_plugin_data, update_plugin_data
from dash.exceptions import PluginWidgetOutOfPlaceholderBoundaries
from dash.settings import RESTRICT_PLUGIN_ACCESS, DEBUG

import logging
logger = logging.getLogger(__name__)

_ = lambda s: s

def get_allowed_plugin_uids(user):
    """
    Gets allowed plugins uids for user given.

    :param django.contrib.auth.models import User:
    :return list:
    """
    try:
        queryset_groups = DashboardPlugin._default_manager.filter(groups__in=user.groups.all()).distinct()
        queryset_users = DashboardPlugin._default_manager.filter(users=user).distinct()
        queryset = queryset_groups | queryset_users
        queryset = queryset.only('plugin_uid')
        return [p.plugin_uid for p in queryset]
    except Exception as e:
        if DEBUG:
            logger.debug(e)
        return []

def get_user_plugins(user):
    """
    Gets a list of user plugins in a form if tuple (plugin name, plugin description). If not yet autodiscovered,
    autodiscovers them.

    :return list:
    """
    ensure_autodiscover()

    if not RESTRICT_PLUGIN_ACCESS or getattr(user, 'is_superuser', False):
        return get_registered_plugins()

    registered_plugins = []

    allowed_plugin_uids = get_allowed_plugin_uids(user)

    for uid, plugin in plugin_registry._registry.items():
        if uid in allowed_plugin_uids:
            registered_plugins.append((uid, force_text(plugin.name)))

    return registered_plugins

def get_user_plugin_uids(user):
    """
    Gets a list of user plugin uids as a list . If not yet autodiscovered, autodiscovers them.

    :return list:
    """
    ensure_autodiscover()

    if not RESTRICT_PLUGIN_ACCESS or getattr(user, 'is_superuser', False):
        return get_registered_plugin_uids()

    registered_plugins = []

    allowed_plugin_uids = get_allowed_plugin_uids(user)

    for uid in plugin_registry._registry.items():
        if uid in allowed_plugin_uids:
            registered_plugins.append(uid)

    return registered_plugins

def get_widgets(layout, placeholder, user=None, workspace=None, position=None, occupied_cells=[]):
    """
    Gets widgets. In case if in restricted mode (``RESTRICT_PLUGIN_ACCESS`` is set to True),
    user argument should be provided. Based on it, the list of plugins is returned.  Restrictions are
    bypassed in case if ``RESTRICT_PLUGIN_ACCESS`` is set to False or user given is a superuser.

    Placeholders are validated already. We don't need to have validation here.

    :param dash.base.BaseDashLayout layout: Layout object.
    :param string placeholder_uid: Placeholder uid.
    :param django.contrib.auth.models.User user:
    :param string workspace: Workspace slug.
    :param int position: Plugin position.
    :param list occupied_cells: List of already occupied cells.
    :return list:
    """
    # We should get the layout, see loop through its' plugins and see which of those do have rendererrs. Then
    # we get all the plugins (based on whether they are restricted or not - get the list) and then filter
    # out those that do not have renderers.

    ensure_autodiscover()

    registered_widgets = {}

    plugin_widget_uids = plugin_widget_registry._registry.keys()

    if not RESTRICT_PLUGIN_ACCESS or getattr(user, 'is_superuser', False):
        for uid, plugin in plugin_registry._registry.items():
            # We should make sure that there are widgets available for the placeholder.
            plugin_widget_uid = PluginWidgetRegistry.namify(layout.uid, placeholder.uid, uid)

            # Get cells occupied by plugin widget.
            widget_occupied_cells = get_occupied_cells(layout, placeholder, uid, position, check_boundaries=True)

            if plugin_widget_uid in plugin_widget_uids and widget_occupied_cells is not False and \
               not lists_overlap(widget_occupied_cells, occupied_cells):
                plugin_widget = plugin_widget_registry.get(plugin_widget_uid)
                kwargs = {'placeholder_uid': placeholder.uid, 'plugin_uid': uid}
                if workspace:
                    kwargs.update({'workspace': workspace})
                if position:
                    kwargs.update({'position': position})

                plugin_group = force_text(plugin.group)
                if not plugin_group in registered_widgets:
                    registered_widgets[plugin_group] = []

                if PY3:
                    widget_name = force_text(plugin.name, encoding='utf-8')
                else:
                    widget_name = force_text(plugin.name, encoding='utf-8').encode('utf-8')

                registered_widgets[plugin_group].append((
                    uid,
                    '{0} ({1}x{2})'.format(widget_name, plugin_widget.cols, plugin_widget.rows),
                    reverse('dash.add_dashboard_entry', kwargs=kwargs)
                    ))
    else:
        allowed_plugin_uids = get_allowed_plugin_uids(user)

        for uid, plugin in plugin_registry._registry.items():
            # We should make sure that there are widgets available for the placeholder and user has access to the
            # widget desired.
            plugin_widget_uid = PluginWidgetRegistry.namify(layout.uid, placeholder.uid, uid)

            # Get cells occupied by plugin widget.
            widget_occupied_cells = get_occupied_cells(layout, placeholder, uid, position, check_boundaries=True)

            if uid in allowed_plugin_uids and plugin_widget_uid in plugin_widget_uids and \
               widget_occupied_cells is not False and not lists_overlap(widget_occupied_cells, occupied_cells):
                plugin_widget = plugin_widget_registry.get(plugin_widget_uid)
                kwargs = {'placeholder_uid': placeholder.uid, 'plugin_uid': uid}
                if workspace:
                    kwargs.update({'workspace': workspace})
                if position:
                    kwargs.update({'position': position})

                plugin_group = force_text(plugin.group)
                if not plugin_group in registered_widgets:
                    registered_widgets[plugin_group] = []

                registered_widgets[plugin_group].append(
                    (
                        uid,
                        '{0} ({1}x{2})'.format(force_text(plugin.name), plugin_widget.cols, plugin_widget.rows),
                        reverse('dash.add_dashboard_entry', kwargs=kwargs)
                    )
                    )

    return registered_widgets

def update_plugin_data_for_entries(dashboard_entries=None, request=None):
    """
    Updates the plugin data for all dashboard entries of all users. Rules for update are specified in the
    plugin itself.

    :param iterable dashboard_entries: If given, is used to iterate through and update the plugin data.
        If left empty, all dashboard entries will be updated.
    """
    if dashboard_entries is None:
        dashboard_entries = DashboardEntry._default_manager.all()

    for dashboard_entry in dashboard_entries:
        update_plugin_data(dashboard_entry, request=request)

def sync_plugins():
    """
    Syncs the registered plugin list with data in ``dash.models.DashboardPlugin``.
    """
    # If not in restricted mode, the quit.

    if not RESTRICT_PLUGIN_ACCESS:
        return

    registered_plugins = set(get_registered_plugin_uids())

    synced_plugins = set([p.plugin_uid for p in DashboardPlugin._default_manager.only('plugin_uid')])

    non_synced_plugins = registered_plugins - synced_plugins

    if not non_synced_plugins:
        return

    buf = []

    for plugin_uid in non_synced_plugins:
        buf.append(DashboardPlugin(plugin_uid=plugin_uid))

    DashboardPlugin._default_manager.bulk_create(buf)

def get_workspaces(user, layout_uid=None, workspace=None, public=False):
    """
    Gets previous, current, next and and a queryset of all workspaces.

    :param string workspace:
    :param django.contrib.auth.models.User:
    :return dict:
    """
    # We need to show workspaces
    q_kwargs = {'user': user, 'layout_uid': layout_uid}
    if public:
        q_kwargs.update({'is_public': public})

    workspaces = list(DashboardWorkspace._default_manager.filter(**q_kwargs).only('id', 'name', 'slug') \
                                        .order_by('position')[:])

    next = None
    previous = None
    current = None
    current_not_found = False

    if workspace:

        # Slugifying the workspace
        workspace_slug = slugify_workspace(workspace)
        num_workspaces = len(workspaces)

        for index, ws in enumerate(workspaces):
            if workspace_slug == ws.slug:
                current = ws

                if 0 == index:
                    # No previous workspace (previous is default).
                    try:
                        next = workspaces[1]
                    except IndexError:
                        pass

                elif num_workspaces == index:
                    # No next workspace (next is default).
                    try:
                        previous = workspaces[index - 1]
                    except IndexError:
                        pass

                else:
                    # Getting previous and next workspaces.
                    try:
                        previous = workspaces[index - 1]
                    except IndexError:
                        pass

                    try:
                        next = workspaces[index + 1]
                    except IndexError:
                        pass

        if current is None:
            current_not_found = True

    else:
        try:
            previous = workspaces[-1]
        except IndexError as e:
            pass

        try:
            next = workspaces[0]
        except IndexError as e:
            pass

    return {
        'workspaces': workspaces,
        'next_workspace': next,
        'previous_workspace': previous,
        'current_workspace': current,
        'current_workspace_not_found': current_not_found
    }

def get_occupied_cells(layout, placeholder, plugin_uid, position, check_boundaries=False, fail_silently=True):
    """
    Get cells occupied by the given dashboard entry.

    :param dash.base.BaseDashboardLayout dashboard_entry: Instance of subclassed
        ``dash.base.BaseDashboardLayout`` object.
    :param dash.base.BaseDashboardPlaceholder placeholder: Instance of subclassed
        ``dash.base.BaseDashboardPlaceholder`` object.
    :param string plugin_uid: UID of the plugin to check against.
    :param int position: Position of the plugin to check against.
    :param bool check_boundaries: If set to True, boundaries of the placeholders are also considered.
    :param bool fail_silently: If set to True, no exceptions are raised.
    :return mixed: Returns a list (could be an empty list as well) if all goes well and returns boolean False
        if out of the placeholder boundaries.
    """
    assert isinstance(layout, BaseDashboardLayout)
    #assert issubclass(placeholder, BaseDashboardPlaceholder)

    widget_cls = plugin_widget_registry.get(
        PluginWidgetRegistry.namify(layout.uid, placeholder.uid, plugin_uid)
        )
    occupied_cells = []
    placeholder_max_cell_num = placeholder.cols * placeholder.rows

    try:
        position = int(position)
    except Exception as e:
        if fail_silently:
            return False
        else:
            raise e

    if widget_cls:

        # First check the basic things.
        if check_boundaries:
            # Checking if widget isn't touching the boundaries. Checking the widget width.
            relative_col_num = position % placeholder.cols
            if 0 == relative_col_num:
                relative_col_num = placeholder.cols

            if (relative_col_num + widget_cls.cols - 1) > placeholder.cols:
                if fail_silently:
                    return False
                else:
                    raise PluginWidgetOutOfPlaceholderBoundaries("Widget is out of placeholder boundaries.")

            # Checking if widget isn't touching the boundaries. Checking the widget height.
            #relative_row_num = position % placeholder.rows
            #if 0 == relative_row_num:
            #    relative_row_num = placeholder.rows
            #if (relative_row_num + widget_cls.rows - 1) > placeholder.rows:
            #    if fail_silently:
            #        return False
            #    else:
            #        raise PluginWidgetOutOfPlaceholderBoundaries("Widget is out of placeholder boundaries.")

        # Now check the collision with other plugin widgets.
        for row in range(0, widget_cls.rows):
            for col in range(0, widget_cls.cols):
                cell_num = position + col + (row * placeholder.cols)

                if check_boundaries and cell_num > placeholder_max_cell_num:
                    if fail_silently:
                        return False
                    else:
                        raise PluginWidgetOutOfPlaceholderBoundaries("Widget is out of placeholder boundaries.")
                occupied_cells.append(cell_num)

    return occupied_cells

def build_cells_matrix(user, layout, placeholder, workspace=None):
    """
    Builds the cells matrix.

    :param django.contrib.auth.models.User user:
    :param string placeholder_uid:
    :param string workspace: Workspace slug.
    :return list: List of cells occupied.
    """
    assert isinstance(layout, BaseDashboardLayout)
    assert issubclass(placeholder, BaseDashboardPlaceholder)

    # Getting the list of plugins that user is allowed to use.
    registered_plugins = get_user_plugins(user)
    user_plugin_uids = [uid for uid, repr in registered_plugins]

    # Getting the queryset for user and freezing it.
    dashboard_entries = DashboardEntry._default_manager \
                                      .get_for_user(user=user, layout_uid=layout.uid, workspace=workspace) \
                                      .select_related('workspace', 'user') \
                                      .filter(plugin_uid__in=user_plugin_uids) \
                                      .filter(placeholder_uid=placeholder.uid) \
                                      .order_by('placeholder_uid', 'position')[:]

    matrix = []
    for dashboard_entry in dashboard_entries:
        occupied_cells = get_occupied_cells(layout, placeholder, dashboard_entry.plugin_uid, dashboard_entry.position)
        if occupied_cells:
            matrix += occupied_cells
        # Now we should calculate how much space each widget occupies.

    return matrix

def get_or_create_dashboard_settings(user):
    """
    Gets dashboard settings for the user given. If no settings found, creates default settings.

    :param django.contrib.auth.models.User:
    :return dash.models.DashboardSettings: Returns ``dash.models.DashboardSettings`` instance.
    """
    # Check if user trying to edit the dashboard workspace actually owns it.
    try:
        dashboard_settings = DashboardSettings._default_manager.select_related('user').get(user=user)
    except ObjectDoesNotExist as e:
        layout = get_layout(as_instance=True)
        dashboard_settings = DashboardSettings()
        dashboard_settings.layout_uid = layout.uid
        dashboard_settings.user = user
        dashboard_settings.save()

    return dashboard_settings

def get_dashboard_settings(username):
    """
    Gets dashboard settings for the user given. If no settings found, creates default settings.

    :param string username:
    :return dash.models.DashboardSettings: Returns ``dash.models.DashboardSettings`` instance.
    """
    # Check if user trying to edit the dashboard workspace actually owns it.
    try:
        return DashboardSettings._default_manager.select_related('user').get(user__username=username)
    except ObjectDoesNotExist as e:
        pass

def get_public_dashboard_url(dashboard_settings):
    """
    Gets resolved public dashboard URL (if public dashboard app is installed == present in the global
    urls module of the project).

    :param dash.models.DashboardSettings: Instance of `dash.models.DashboardSettings`.
    :return string:
    """
    if dashboard_settings.is_public:
        try:
            # Resolve URL
            return reverse('dash.public_dashboard', kwargs={'username': dashboard_settings.user.username})
        except:
            # Most likely, the public dashboard is not present
            pass
    return ''

def clone_workspace(workspace, for_user, request=None):
    """
    Clones entire workspace.

    :param dash.models.DashboardWorkspace:
    :param django.contrib.auth.models.User:
    :return dash.models.DashboardWorkspace: Cloned workspace instance.
    """
    # Cloning workspace object.
    cloned_workspace = copy.copy(workspace)
    cloned_workspace.pk = None
    cloned_workspace.user = for_user
    cloned_workspace.is_public = False
    cloned_workspace.is_clonable = False
    cloned_workspace.name = "{0} cloned on {1}".format(cloned_workspace.name, datetime.datetime.now())

    cloned_workspace.save()

    # Cloning workspace entries.
    dashboard_entries = DashboardEntry._default_manager.filter(workspace=workspace)

    buf = []

    for dashboard_entry in dashboard_entries:
        cloned_plugin_data = clone_plugin_data(dashboard_entry, request=request)
        cloned_dashboard_entry = DashboardEntry(
            user = for_user,
            workspace = cloned_workspace,
            layout_uid = dashboard_entry.layout_uid,
            placeholder_uid = dashboard_entry.placeholder_uid,
            plugin_uid = dashboard_entry.plugin_uid,
            plugin_data = cloned_plugin_data,
            position = dashboard_entry.position,
        )

        buf.append(cloned_dashboard_entry)

    DashboardEntry._default_manager.bulk_create(buf)

    return cloned_workspace

########NEW FILE########
__FILENAME__ = views
__title__ = 'dash.views'
__author__ = 'Artur Barseghyan <artur.barseghyan@gmail.com>'
__copyright__ = 'Copyright (c) 2013 Artur Barseghyan'
__license__ = 'GPL 2.0/LGPL 2.1'

import json

from django.http import Http404, HttpResponse
from django.template import RequestContext
from django.core.exceptions import ObjectDoesNotExist
from django.shortcuts import render_to_response, redirect
from django.utils.translation import ugettext_lazy as _
from django.contrib import messages
from django.contrib.auth.decorators import login_required, permission_required

from dash.base import validate_plugin_uid, get_layout, plugin_registry, validate_placeholder_uid
from dash.models import DashboardEntry, DashboardWorkspace
from dash.decorators import edit_dashboard_permission_required, permissions_required, SATISFY_ALL
from dash.helpers import slugify_workspace, iterable_to_dict, clean_plugin_data
from dash.utils import (
    get_widgets, get_user_plugins, get_workspaces, build_cells_matrix,
    get_or_create_dashboard_settings, get_public_dashboard_url, clone_workspace
    )
from dash.forms import DashboardWorkspaceForm, DashboardSettingsForm

@login_required
def dashboard(request, workspace=None):
    """
    Dashboard.

    :param django.http.HttpRequest request:
    :param string workspace: Workspace slug. If given, the workspace loaded. Otherwise we deal with no workspace.
    :return django.http.HttpResponse:
    """
    # Getting the list of plugins that user is allowed to use.
    registered_plugins = get_user_plugins(request.user)
    user_plugin_uids = [uid for uid, repr in registered_plugins]

    # Getting dashboard settings for the user. Then get users' layout.
    dashboard_settings = get_or_create_dashboard_settings(request.user)
    layout = get_layout(layout_uid=dashboard_settings.layout_uid, as_instance=True)

    # Getting the (frozen) queryset.
    dashboard_entries = DashboardEntry._default_manager \
                                      .get_for_user(user=request.user, layout_uid=layout.uid, workspace=workspace) \
                                      .select_related('workspace', 'user') \
                                      .filter(plugin_uid__in=user_plugin_uids) \
                                      .order_by('placeholder_uid', 'position')[:]

    placeholders = layout.get_placeholder_instances(dashboard_entries, request=request)

    layout.collect_widget_media(dashboard_entries)

    context = {
        'placeholders': placeholders,
        'placeholders_dict': iterable_to_dict(placeholders, key_attr_name='uid'),
        'css': layout.get_css(placeholders),
        'layout': layout,
        'dashboard_settings': dashboard_settings
    }

    workspaces = get_workspaces(request.user, layout.uid, workspace)

    # If workspace with slug given is not found in the list of workspaces
    # redirect to the default dashboard.
    if workspaces['current_workspace_not_found']:
        messages.info(
            request,
            _('The workspace with slug "{0}" does not belong to layout "{1}".').format(workspace, layout.name)
            )
        return redirect('dash.edit_dashboard')

    context.update(workspaces)

    context.update({'public_dashboard_url': get_public_dashboard_url(dashboard_settings)})

    template_name = layout.get_view_template_name(request)

    return render_to_response(template_name, context, context_instance=RequestContext(request))

@login_required
@edit_dashboard_permission_required()
def edit_dashboard(request, workspace=None):
    """
    Edit dashboard.

    :param django.http.HttpRequest request:
    :param string workspace: Workspace slug. If given, the workspace loaded. Otherwise we deal with no workspace.
    :return django.http.HttpResponse:
    """
    # Getting the list of plugins that user is allowed to use.
    registered_plugins = get_user_plugins(request.user)
    user_plugin_uids = [uid for uid, repr in registered_plugins]

    # Getting dashboard settings for the user. Then get users' layout.
    dashboard_settings = get_or_create_dashboard_settings(request.user)
    layout = get_layout(layout_uid=dashboard_settings.layout_uid, as_instance=True)

    # Getting the (frozen) queryset.
    dashboard_entries = DashboardEntry._default_manager \
                                      .get_for_user(user=request.user, layout_uid=layout.uid, workspace=workspace) \
                                      .select_related('workspace', 'user') \
                                      .filter(plugin_uid__in=user_plugin_uids) \
                                      .order_by('placeholder_uid', 'position')[:]

    placeholders = layout.get_placeholder_instances(dashboard_entries, workspace=workspace, request=request)

    layout.collect_widget_media(dashboard_entries)

    context = {
        'placeholders': placeholders,
        'placeholders_dict': iterable_to_dict(placeholders, key_attr_name='uid'),
        'css': layout.get_css(placeholders),
        'layout': layout,
        'edit_mode': True,
        'dashboard_settings': dashboard_settings
    }

    workspaces = get_workspaces(request.user, layout.uid, workspace)

    # If workspace with slug given is not found in the list of workspaces
    # redirect to the default dashboard.
    if workspaces['current_workspace_not_found']:
        messages.info(
            request,
            _('The workspace with slug "{0}" does not belong to layout "{1}".').format(workspace, layout.name)
            )
        return redirect('dash.edit_dashboard')

    context.update(workspaces)

    context.update({'public_dashboard_url': get_public_dashboard_url(dashboard_settings)})

    template_name = layout.get_edit_template_name(request)

    return render_to_response(template_name, context, context_instance=RequestContext(request))

@login_required
@permission_required('dash.add_dashboardentry')
def add_dashboard_entry(request, placeholder_uid, plugin_uid, workspace=None, position=None, \
                        template_name='dash/add_dashboard_entry.html', \
                        template_name_ajax='dash/add_dashboard_entry_ajax.html'):
    """
    Add dashboard entry.

    :param django.http.HttpRequest request:
    :param string placeholder_uid: Placeholder UID.
    :param string plugin_uid: Plugin UID.
    :param string workspace: Workspace slug.
    :param int position: If given, provided as position for the plugin (conflict resolution should take place).
    :param string template_name:
    :param string template_name_ajax: Template used for AJAX requests.
    :return django.http.HttpResponse:
    """
    # Getting dashboard settings for the user. Then get users' layout.
    dashboard_settings = get_or_create_dashboard_settings(request.user)
    layout = get_layout(layout_uid=dashboard_settings.layout_uid, as_instance=True)

    if not validate_placeholder_uid(layout, placeholder_uid):
        raise Http404(_("Invalid placeholder: {0}").format(placeholder))

    if not validate_plugin_uid(plugin_uid):
        raise Http404(_("Invalid plugin name: {0}").format(plugin_uid))

    plugin = plugin_registry.get(plugin_uid)(layout.uid, placeholder_uid)
    plugin.request = request

    if plugin.add_form_template:
        template_name = plugin.add_form_template

    # Template context
    context = {
        'layout': layout,
        'dashboard_settings': dashboard_settings
    }

    obj = DashboardEntry()
    obj.layout_uid = layout.uid
    obj.placeholder_uid = placeholder_uid
    obj.plugin_uid = plugin_uid
    obj.user = request.user

    # If plugin has form, it is configurable which means we have to load the plugin form and validate user input.
    plugin_form = plugin.get_form()
    if plugin_form:
        # If POST request and form data is valid, save the data and redirect to the dashboard edit.
        if 'POST' == request.method:
            form = plugin.get_initialised_create_form_or_404(data=request.POST, files=request.FILES)
            if form.is_valid():
                # Saving the plugin form data.
                form.save_plugin_data(request=request)

                # Getting the plugin data.
                obj.plugin_data = form.get_plugin_data(request=request)

                # Handling the workspace.
                obj.workspace = None
                if workspace:
                    workspace_slug = slugify_workspace(workspace)
                    try:
                        obj.workspace = DashboardWorkspace._default_manager.get(
                            slug=workspace_slug, user=request.user, layout_uid = layout.uid
                            )
                    except ObjectDoesNotExist as e:
                        messages.info(
                            request,
                            _('The workspace with slug "{0}" does not belong to '
                              'layout "{1}".').format(workspace_slug, layout.name)
                            )
                        return redirect('dash.edit_dashboard')

                # If position given, use it.
                try:
                    position = int(position)
                except Exception as e:
                    position = None

                if position:
                    obj.position = position

                # Save the object.
                obj.save()

                messages.info(
                    request,
                    _('The dashboard widget "{0}" was added successfully.').format(plugin.name)
                    )

                # Redirect to the dashboard view.
                if obj.workspace:
                    return redirect('dash.edit_dashboard', workspace=obj.workspace.slug)
                else:
                    return redirect('dash.edit_dashboard')

        # If POST but data invalid, show the form with errors.
        else:
            form = plugin.get_initialised_create_form_or_404()

        context.update({'form': form, 'plugin_uid': plugin_uid, 'plugin': plugin})

    # If plugin is not configurable, it's just saved as is.
    else:
        obj.save()
        return redirect('dash.edit_dashboard')

    if request.is_ajax():
        template_name = template_name_ajax

    return render_to_response(template_name, context, context_instance=RequestContext(request))

@login_required
@permission_required('dash.change_dashboardentry')
def edit_dashboard_entry(request, entry_id, template_name='dash/edit_dashboard_entry.html', \
                         template_name_ajax='dash/edit_dashboard_entry_ajax.html'):
    """
    Edit dashboard entry.

    :param django.http.HttpRequest request:
    :param int entry_id: ID of the dashboard entry to edit.
    :param string template_name:
    :param string template_name_ajax: Tempalte used for AJAX requests.
    :return django.http.HttpResponse:
    """
    # Getting dashboard settings for the user. Then get users' layout.
    dashboard_settings = get_or_create_dashboard_settings(request.user)
    layout = get_layout(layout_uid=dashboard_settings.layout_uid, as_instance=True)

    try:
        obj = DashboardEntry._default_manager.select_related('workspace').get(pk=entry_id, user=request.user)
    except ObjectDoesNotExist as e:
        raise Http404(e)

    plugin = obj.get_plugin(fetch_related_data=True)
    plugin.request = request

    if plugin.edit_form_template:
        template_name = plugin.edit_form_template

    # Template context
    context = {
        'layout': layout,
        'dashboard_settings': dashboard_settings
    }

    # If plugin has form, it is configurable which means we have to load the plugin form and validate user input.
    plugin_form = plugin.get_form()
    if plugin_form:
        # If POST request and form data is valid, save the data and redirect to the dashboard edit.
        if 'POST' == request.method:
            form = plugin.get_initialised_edit_form_or_404(data=request.POST, files=request.FILES)
            if form.is_valid():
                # Saving the plugin form data.
                form.save_plugin_data(request=request)

                # Getting the plugin data.
                obj.plugin_data = form.get_plugin_data(request=request)

                # Save the object.
                obj.save()

                messages.info(
                    request,
                    _('The dashboard widget "{0}" was edited successfully.').format(plugin.name)
                    )

                # Redirect to edit dashboard view
                if obj.workspace:
                    return redirect('dash.edit_dashboard', workspace=obj.workspace.slug)
                else:
                    return redirect('dash.edit_dashboard')

        else:
            form = plugin.get_initialised_edit_form_or_404()

        context.update({'form': form, 'plugin': plugin})

    if request.is_ajax():
        template_name = template_name_ajax

    return render_to_response(template_name, context, context_instance=RequestContext(request))

@login_required
@permission_required('dash.delete_dashboardentry')
def delete_dashboard_entry(request, entry_id):
    """
    Remove dashboard entry.

    :param django.http.HttpRequest request:
    :param int entry_id: ID of the dashboard entry to delete.
    :return django.http.HttpResponse:
    """
    try:
        obj = DashboardEntry._default_manager.select_related('workspace').get(pk=entry_id, user=request.user)
        plugin = obj.get_plugin()
        plugin.request = request
        plugin._delete_plugin_data()
        workspace = getattr(obj.workspace, 'slug', None)
        obj.delete()

        if not request.is_ajax():
            messages.info(request, _('The dashboard widget "{0}" was deleted successfully.').format(plugin.name))

        if request.is_ajax():
            return HttpResponse(json.dumps({'success': 1}))
        else:
            # Redirect to dashboard view.
            if workspace:
                return redirect('dash.edit_dashboard', workspace=workspace)
            else:
                return redirect('dash.edit_dashboard')
    except ObjectDoesNotExist as e:
        if request.is_ajax():
            return HttpResponse(json.dumps({'success': 1}))
        raise Http404(e)

@login_required
@permission_required('dash.add_dashboardentry')
def plugin_widgets(request, placeholder_uid, workspace=None, position=None, \
                   template_name='dash/plugin_widgets.html', template_name_ajax='dash/plugin_widgets_ajax.html'):
    """
    Plugin widgets view. Lists all the widgets for the placeholder and workspace given.

    :param django.http.HttpRequest request:
    :param string placeholder_uid: Placeholder UID.
    :param int position: Position on the dashboard to which the widget is to be added.
    :param string template_name:
    :param string template_name_ajax: Tempalte used for AJAX requests.
    :return django.http.HttpResponse:
    """
    # Getting dashboard settings for the user. Then get users' layout.
    dashboard_settings = get_or_create_dashboard_settings(request.user)
    layout = get_layout(layout_uid=dashboard_settings.layout_uid, as_instance=True)

    placeholder = layout.get_placeholder(placeholder_uid)

    if not validate_placeholder_uid(layout, placeholder_uid):
        raise Http404(_("Invalid placeholder: {0}").format(placeholder_uid))

    occupied_cells = build_cells_matrix(request.user, layout, placeholder, workspace=workspace)

    context = {
        'layout': layout,
        'grouped_widgets': get_widgets(
            layout,
            placeholder,
            request.user,
            workspace=workspace,
            position=position,
            occupied_cells=occupied_cells
            ),
        'dashboard_settings': dashboard_settings
    }

    if request.is_ajax():
        template_name = template_name_ajax
    return render_to_response(template_name, context, context_instance=RequestContext(request))

@login_required
@permission_required('dash.add_dashboardworkspace')
def create_dashboard_workspace(request, template_name='dash/create_dashboard_workspace.html', \
                               template_name_ajax='dash/create_dashboard_workspace_ajax.html'):
    """
    Create dashboard workspace.

    :param django.http.HttpRequest request:
    :param string template_name:
    :param string template_name_ajax: Template used for AJAX calls.
    :return django.http.HttpResponse:
    """
    # Getting dashboard settings for the user. Then get users' layout.
    dashboard_settings = get_or_create_dashboard_settings(request.user)
    layout = get_layout(layout_uid=dashboard_settings.layout_uid, as_instance=True)


    if 'POST' == request.method:
        form = DashboardWorkspaceForm(data=request.POST, files=request.FILES)
        if form.is_valid():
            obj = form.save(commit=False)
            obj.user = request.user
            obj.layout_uid = layout.uid
            obj.save()
            messages.info(request, _('The dashboard workspace "{0}" was created successfully.').format(obj.name))
            return redirect('dash.edit_dashboard', workspace=obj.slug)

    else:
        form = DashboardWorkspaceForm(initial={'user': request.user})

    if request.is_ajax():
        template_name = template_name_ajax

    context = {
        'layout': layout,
        'form': form,
        'dashboard_settings': dashboard_settings
    }

    return render_to_response(template_name, context, context_instance=RequestContext(request))

@login_required
@permission_required('dash.change_dashboardworkspace')
def edit_dashboard_workspace(request, workspace_id, template_name='dash/edit_dashboard_workspace.html', \
                             template_name_ajax='dash/edit_dashboard_workspace_ajax.html'):
    """
    Edit dashboard workspace.

    :param django.http.HttpRequest request:
    :param int workspace_id: DashboardWorkspace ID.
    :param string template_name:
    :param string template_name_ajax: Template used for AJAX calls.
    :return django.http.HttpResponse:
    """
    # Getting dashboard settings for the user. Then get users' layout.
    dashboard_settings = get_or_create_dashboard_settings(request.user)
    layout = get_layout(layout_uid=dashboard_settings.layout_uid, as_instance=True)

    # Check if user trying to edit the dashboard workspace actually owns it.
    try:
        obj = DashboardWorkspace._default_manager.get(pk=workspace_id, user=request.user)
    except ObjectDoesNotExist as e:
        raise Http404(e)

    if 'POST' == request.method:
        form = DashboardWorkspaceForm(data=request.POST, files=request.FILES, instance=obj)
        if form.is_valid():
            form.save(commit=False)
            obj.user = request.user
            obj.layout_uid = layout.uid
            obj.save()
            messages.info(request, _('The dashboard workspace "{0}" was edited successfully.').format(obj.name))
            return redirect('dash.edit_dashboard', workspace=obj.slug)

    else:
        form = DashboardWorkspaceForm(instance=obj)

    if request.is_ajax():
        template_name = template_name_ajax

    context = {
        'layout': layout,
        'form': form,
        'workspace_id': workspace_id,
        'dashboard_settings': dashboard_settings
    }

    return render_to_response(template_name, context, context_instance=RequestContext(request))

@login_required
@permission_required('dash.delete_dashboardworkspace')
def delete_dashboard_workspace(request, workspace_id, template_name='dash/delete_dashboard_workspace.html', \
                               template_name_ajax='dash/delete_dashboard_workspace_ajax.html'):
    """
    Delete dashboard workspace.

    :param django.http.HttpRequest request:
    :param int workspace_id: DashboardWorkspace id.
    :param string template_name:
    :param string template_name_ajax: Template used for AJAX calls.
    :return django.http.HttpResponse:
    """
    # Getting dashboard settings for the user. Then get users' layout.
    dashboard_settings = get_or_create_dashboard_settings(request.user)
    layout = get_layout(layout_uid=dashboard_settings.layout_uid, as_instance=True)

    # Check if user trying to edit the dashboard workspace actually owns it and then delete the workspace.
    if 'POST' == request.method and 'delete' in request.POST is None and request.POST.get('next', None):
        return redirect(request.POST.get('next'))

    try:
        obj = DashboardWorkspace._default_manager.get(pk=workspace_id, user=request.user)

    except ObjectDoesNotExist as e:
        raise Http404(e)

    if 'POST' == request.method:
        if 'delete' in request.POST:
            workspace_name = obj.name

            # Getting the (frozen) queryset.
            dashboard_entries = DashboardEntry._default_manager \
                                    .filter(user=request.user, layout_uid=layout.uid, workspace__id=workspace_id) \
                                    .select_related('workspace', 'user') \
                                    .order_by('placeholder_uid', 'position')[:]

            # Cleaning the plugin data for the deleted entries.
            clean_plugin_data(dashboard_entries, request=request)

            # Delete the workspace.
            obj.delete()

            messages.info(request, _('The dashboard workspace "{0}" was deleted successfully.').format(workspace_name))
            return redirect('dash.edit_dashboard')

        if request.POST.get('next', None):
            return redirect(request.POST.get('next'))

    if request.is_ajax():
        template_name = template_name_ajax

    context = {
        'layout': layout,
        'workspace': obj,
        'dashboard_settings': dashboard_settings
    }

    return render_to_response(template_name, context, context_instance=RequestContext(request))

@login_required
def dashboard_workspaces(request, workspace=None, template_name='dash/dashboard_workspaces.html', \
                         template_name_ajax='dash/dashboard_workspaces_ajax.html'):
    """
    Workspaces list.

    :param django.http.HttpRequest request:
    :param string workspace: Workspace slug.
    :param string template_name:
    :param string template_name_ajax: Tempalte used for AJAX requests.
    :return django.http.HttpResponse:
    """
    # Getting dashboard settings for the user. Then get users' layout.
    dashboard_settings = get_or_create_dashboard_settings(request.user)
    layout = get_layout(layout_uid=dashboard_settings.layout_uid, as_instance=True)

    context = {
        'layout': layout,
        'dashboard_settings': dashboard_settings
    }
    context.update(get_workspaces(request.user, layout.uid, workspace))

    if request.is_ajax():
        template_name = template_name_ajax
    return render_to_response(template_name, context, context_instance=RequestContext(request))

@login_required
@permission_required('dash.change_dashboardsettings')
def edit_dashboard_settings(request, template_name='dash/edit_dashboard_settings.html', \
                            template_name_ajax='dash/edit_dashboard_settings_ajax.html'):
    """
    Edit dashboard settings.

    :param django.http.HttpRequest request:
    :param string template_name:
    :param string template_name_ajax: Template used for AJAX calls.
    :return django.http.HttpResponse:
    """
    # Getting dashboard settings for the user. Then get users' layout.
    dashboard_settings = get_or_create_dashboard_settings(request.user)
    layout = get_layout(layout_uid=dashboard_settings.layout_uid, as_instance=True)

    if 'POST' == request.method:
        form = DashboardSettingsForm(data=request.POST, files=request.FILES, instance=dashboard_settings)
        if form.is_valid():
            form.save(commit=False)
            dashboard_settings.user = request.user
            dashboard_settings.save()
            messages.info(request, _('Dashboard settings were edited successfully.'))
            return redirect('dash.edit_dashboard')

    else:
        form = DashboardSettingsForm(instance=dashboard_settings)

    if request.is_ajax():
        template_name = template_name_ajax

    context = {
        'layout': layout,
        'form': form,
        'dashboard_settings': dashboard_settings
    }

    return render_to_response(template_name, context, context_instance=RequestContext(request))

@login_required
@permissions_required(satisfy=SATISFY_ALL, perms=['dash.add_dashboardentry', 'dash.add_dashboardworkspace'])
def clone_dashboard_workspace(request, workspace_id):
    """
    Clones dashboard workspace.
    """
    redirect_to = request.GET.get('next', None)

    try:
        workspace = DashboardWorkspace._default_manager.get(pk=workspace_id)
    except:
        messages.info(request, _("Invalid dashboard workspace."))
        if redirect_to:
            return redirect(redirect_to)
        else:
            return redirect('dash.edit_dashboard')

    if not (workspace.is_clonable or request.user.pk == workspace.user.pk):
        messages.info(request, _("You are not allowed to clone the given workspace."))
        if redirect_to:
            return redirect(redirect_to)
        else:
            return redirect('dash.edit_dashboard')

    cloned_workspace = clone_workspace(workspace, request.user)

    # Getting dashboard settings for the user. Then get users' layout.
    dashboard_settings = get_or_create_dashboard_settings(request.user)
    cloned_workspace_layout = get_layout(layout_uid=workspace.layout_uid, as_instance=True)
    layout = get_layout(layout_uid=dashboard_settings.layout_uid, as_instance=True)

    if workspace.layout_uid == layout.uid:

        messages.info(
            request,
            _("Dashboard workspace `{0}` was successfully cloned into "
              "`{1}`.".format(workspace.name, cloned_workspace.name))
            )
        return redirect('dash.edit_dashboard', workspace=cloned_workspace.slug)

    else:

        messages.info(
            request,
            _("Dashboard workspace `{0}` was successfully cloned into `{1}` (layout `{2}`), however your "
              "active layout is `{3}`. You should switch to layout `{4}` (in your dashboard settings) in "
              "order to see the cloned "
              "workspace.".format(
                workspace.name,
                cloned_workspace.name,
                cloned_workspace_layout.name,
                layout.name,
                cloned_workspace_layout.name
                ))
            )
        return redirect('dash.edit_dashboard')

########NEW FILE########
__FILENAME__ = widgets
__title__ = 'dash.widgets'
__author__ = 'Artur Barseghyan <artur.barseghyan@gmail.com>'
__copyright__ = 'Copyright (c) 2013 Artur Barseghyan'
__license__ = 'GPL 2.0/LGPL 2.1'
__all__ = ('BooleanRadioSelect',)

from django.forms.widgets import RadioSelect
from django.utils.translation import ugettext_lazy as _

BOOLEAN_CHOICES = (
    (True, _("Yes")),
    (False, _("No"))
)

class BooleanRadioSelect(RadioSelect):
    """
    Boolean radio select for Django.

    :example:
    
    >>> class DummyForm(forms.Form):
    >>>     agree = forms.BooleanField(label=_("Agree?"), required=False, widget=BooleanRadioSelect)
    """
    def __init__(self, *args, **kwargs):
        # Override the default renderer if we were passed one.
        renderer = kwargs.pop('renderer', None)
        if renderer:
            self.renderer = renderer

        if not 'choices' in kwargs:
            kwargs['choices'] = BOOLEAN_CHOICES

        super(BooleanRadioSelect, self).__init__(*args, **kwargs)

########NEW FILE########
