__FILENAME__ = conf
# -*- coding: utf-8 -*-
#
# Django WP Admin documentation build configuration file, created by
# sphinx-quickstart on Tue Mar 11 05:10:59 2014.
#
# This file is execfile()d with the current directory set to its containing dir.
#
# Note that not all possible configuration values are present in this
# autogenerated file.
#
# All configuration values have a default; values that are commented out
# serve to show the default.

import sys
from os.path import abspath, dirname

# Make sure we get the version of this copy of Django WP Admin
sys.path.insert(1, dirname(dirname(abspath(__file__))))

# If extensions (or modules to document with autodoc) are in another directory,
# add these directories to sys.path here. If the directory is relative to the
# documentation root, use os.path.abspath to make it absolute, like shown here.
#sys.path.insert(0, os.path.abspath('.'))

# -- General configuration -----------------------------------------------------

# If your documentation needs a minimal Sphinx version, state it here.
#needs_sphinx = '1.0'

# Add any Sphinx extension module names here, as strings. They can be extensions
# coming with Sphinx (named 'sphinx.ext.*') or your custom ones.
extensions = []

# Add any paths that contain templates here, relative to this directory.
templates_path = ['_templates']

# The suffix of source filenames.
source_suffix = '.rst'

# The encoding of source files.
#source_encoding = 'utf-8-sig'

# The master toctree document.
master_doc = 'index'

# General information about the project.
project = 'Django WP Admin'
copyright = '2014, Maciej \'barszcz\' Marczewski'

# The version info for the project you're documenting, acts as replacement for
# |version| and |release|, also used in various other places throughout the
# built documents.
#
# The short X.Y version.
from wpadmin import VERSION
version = '.'.join(str(x) for x in VERSION[:2])
# The full version, including alpha/beta/rc tags.
release = '.'.join(str(x) for x in VERSION)

# The language for content autogenerated by Sphinx. Refer to documentation
# for a list of supported languages.
#language = None

# There are two options for replacing |today|: either, you set today to some
# non-false value, then it is used:
#today = ''
# Else, today_fmt is used as the format for a strftime call.
#today_fmt = '%B %d, %Y'

# List of patterns, relative to source directory, that match files and
# directories to ignore when looking for source files.
exclude_patterns = ['_build']

# The reST default role (used for this markup: `text`) to use for all documents.
#default_role = None

# If true, '()' will be appended to :func: etc. cross-reference text.
#add_function_parentheses = True

# If true, the current module name will be prepended to all description
# unit titles (such as .. function::).
#add_module_names = True

# If true, sectionauthor and moduleauthor directives will be shown in the
# output. They are ignored by default.
#show_authors = False

# The name of the Pygments (syntax highlighting) style to use.
pygments_style = 'sphinx'

# A list of ignored prefixes for module index sorting.
#modindex_common_prefix = []


# -- Options for HTML output ---------------------------------------------------

# The theme to use for HTML and HTML Help pages.  See the documentation for
# a list of builtin themes.
html_theme = 'default'

# Theme options are theme-specific and customize the look and feel of a theme
# further.  For a list of options available for each theme, see the
# documentation.
#html_theme_options = {}

# Add any paths that contain custom themes here, relative to this directory.
#html_theme_path = []

# The name for this set of Sphinx documents.  If None, it defaults to
# "<project> v<release> documentation".
#html_title = None

# A shorter title for the navigation bar.  Default is the same as html_title.
#html_short_title = None

# The name of an image file (relative to this directory) to place at the top
# of the sidebar.
#html_logo = None

# The name of an image file (within the static path) to use as favicon of the
# docs.  This file should be a Windows icon file (.ico) being 16x16 or 32x32
# pixels large.
#html_favicon = None

# Add any paths that contain custom static files (such as style sheets) here,
# relative to this directory. They are copied after the builtin static files,
# so a file named "default.css" will overwrite the builtin "default.css".
html_static_path = ['_static']

# If not '', a 'Last updated on:' timestamp is inserted at every page bottom,
# using the given strftime format.
#html_last_updated_fmt = '%b %d, %Y'

# If true, SmartyPants will be used to convert quotes and dashes to
# typographically correct entities.
#html_use_smartypants = True

# Custom sidebar templates, maps document names to template names.
#html_sidebars = {}

# Additional templates that should be rendered to pages, maps page names to
# template names.
#html_additional_pages = {}

# If false, no module index is generated.
#html_domain_indices = True

# If false, no index is generated.
#html_use_index = True

# If true, the index is split into individual pages for each letter.
#html_split_index = False

# If true, links to the reST sources are added to the pages.
#html_show_sourcelink = True

# If true, "Created using Sphinx" is shown in the HTML footer. Default is True.
#html_show_sphinx = True

# If true, "(C) Copyright ..." is shown in the HTML footer. Default is True.
#html_show_copyright = True

# If true, an OpenSearch description file will be output, and all pages will
# contain a <link> tag referring to it.  The value of this option must be the
# base URL from which the finished HTML is served.
#html_use_opensearch = ''

# This is the file name suffix for HTML files (e.g. ".xhtml").
#html_file_suffix = None

# Output file base name for HTML help builder.
htmlhelp_basename = 'DjangoWPAdmindoc'


# -- Options for LaTeX output --------------------------------------------------

latex_elements = {
# The paper size ('letterpaper' or 'a4paper').
#'papersize': 'letterpaper',

# The font size ('10pt', '11pt' or '12pt').
#'pointsize': '10pt',

# Additional stuff for the LaTeX preamble.
#'preamble': '',
}

# Grouping the document tree into LaTeX files. List of tuples
# (source start file, target name, title, author, documentclass [howto/manual]).
latex_documents = [
  ('index', 'DjangoWPAdmin.tex', 'Django WP Admin Documentation',
   'Maciej \'barszcz\' Marczewski', 'manual'),
]

# The name of an image file (relative to this directory) to place at the top of
# the title page.
#latex_logo = None

# For "manual" documents, if this is true, then toplevel headings are parts,
# not chapters.
#latex_use_parts = False

# If true, show page references after internal links.
#latex_show_pagerefs = False

# If true, show URL addresses after external links.
#latex_show_urls = False

# Documents to append as an appendix to all manuals.
#latex_appendices = []

# If false, no module index is generated.
#latex_domain_indices = True


# -- Options for manual page output --------------------------------------------

# One entry per manual page. List of tuples
# (source start file, name, description, authors, manual section).
man_pages = [
    ('index', 'djangowpadmin', 'Django WP Admin Documentation',
     ['Maciej \'barszcz\' Marczewski'], 1)
]

# If true, show URL addresses after external links.
#man_show_urls = False


# -- Options for Texinfo output ------------------------------------------------

# Grouping the document tree into Texinfo files. List of tuples
# (source start file, target name, title, author,
#  dir menu entry, description, category)
texinfo_documents = [
  ('index', 'DjangoWPAdmin', 'Django WP Admin Documentation',
   'Maciej \'barszcz\' Marczewski', 'DjangoWPAdmin', 'One line description of project.',
   'Miscellaneous'),
]

# Documents to append as an appendix to all manuals.
#texinfo_appendices = []

# If false, no module index is generated.
#texinfo_domain_indices = True

# How to display URL addresses: 'footnote', 'no', or 'inline'.
#texinfo_show_urls = 'footnote'

########NEW FILE########
__FILENAME__ = admin
from django.contrib import admin


class AuthorAdmin(admin.ModelAdmin):
    pass

########NEW FILE########
__FILENAME__ = models
from django.db import models
from django.utils.translation import ugettext_lazy as _
from django.utils.encoding import python_2_unicode_compatible


@python_2_unicode_compatible
class Author(models.Model):

    first_name = models.CharField(_('first name'), max_length=30)
    last_name = models.CharField(_('last name'), max_length=30)
    biography = models.TextField(_('biography'), blank=True)

    def __str__(self):
        return '%s %s' % (self.first_name, self.last_name)


########NEW FILE########
__FILENAME__ = admin
from django.contrib import admin
from django.utils.translation import ugettext_lazy as _
from django.utils.text import capfirst


class BookCategoryAdmin(admin.ModelAdmin):
    pass


class BookAdmin(admin.ModelAdmin):
    date_hierarchy = 'publication_date'
    list_display = ('title', 'author', 'publication_date')
    list_filter = ('author', 'category')
    search_fields = ('title',)
    list_per_page = 3
    fieldsets = (
        ('', {
            'fields': ('title', 'category', ('author', 'publication_date')),
        }),
        (capfirst(_('description')), {
            'fields': ('description',),
            'classes': ('collapse collapse-opened',),
        }),
        (capfirst(_('owner')), {
            'fields': ('owner',),
            'classes': ('collapse',),
        }),
    )


class UserBookAdmin(admin.ModelAdmin):

    def queryset(self, request):
        """
        Show only current user's objects.
        """
        qs = super(UserBookAdmin, self).queryset(request)
        return qs.filter(owner=request.user)
########NEW FILE########
__FILENAME__ = models
from django.db import models
from django.utils.translation import ugettext_lazy as _
from django.utils.encoding import python_2_unicode_compatible
from django.contrib.auth.models import User

from authors.models import Author


@python_2_unicode_compatible
class BookCategory(models.Model):

    name = models.CharField(_('name'), max_length=255)
    description = models.TextField(_('description'), blank=True)

    def __str__(self):
        return self.name

    class Meta:
        verbose_name = _('Category of Books')
        verbose_name_plural = _('Categories of Books')


@python_2_unicode_compatible
class Book(models.Model):

    title = models.CharField(_('title'), max_length=255)
    description = models.TextField(_('description'), blank=True)
    category = models.ForeignKey(BookCategory, verbose_name=_('category'))
    author = models.ForeignKey(Author, verbose_name=_('author'))
    owner = models.ForeignKey(User, verbose_name=_('owner'))
    publication_date = models.DateField(_('publication date'))

    def __str__(self):
        return self.title

    class Meta:
        verbose_name = _('Book')
        verbose_name_plural = _('Books')


########NEW FILE########
__FILENAME__ = admin
from django.contrib import admin


class CdCategoryAdmin(admin.ModelAdmin):
    pass


class CdAdmin(admin.ModelAdmin):
    pass


class UserCdAdmin(admin.ModelAdmin):

    def queryset(self, request):
        """
        Show only current user's objects.
        """
        qs = super(UserCdAdmin, self).queryset(request)
        return qs.filter(owner=request.user)


########NEW FILE########
__FILENAME__ = models
from django.db import models
from django.utils.translation import ugettext_lazy as _
from django.utils.encoding import python_2_unicode_compatible
from django.contrib.auth.models import User

from authors.models import Author


@python_2_unicode_compatible
class CdCategory(models.Model):

    name = models.CharField(_('name'), max_length=255)
    description = models.TextField(_('description'), blank=True)

    def __str__(self):
        return self.name

    class Meta:
        verbose_name = _('Category of CDs')
        verbose_name_plural = _('Categories of CDs')


@python_2_unicode_compatible
class Cd(models.Model):

    title = models.CharField(_('title'), max_length=255)
    description = models.TextField(_('description'), blank=True)
    category = models.ForeignKey(CdCategory, verbose_name=_('category'))
    author = models.ForeignKey(Author, verbose_name=_('author'))
    owner = models.ForeignKey(User, verbose_name=_('owner'))

    def __str__(self):
        return self.title

    class Meta:
        verbose_name = _('CD')
        verbose_name_plural = _('CDs')


########NEW FILE########
__FILENAME__ = admin
from django.contrib import admin


class DvdCategoryAdmin(admin.ModelAdmin):
    pass


class DvdAdmin(admin.ModelAdmin):
    pass


class UserDvdAdmin(admin.ModelAdmin):

    def queryset(self, request):
        """
        Show only current user's objects.
        """
        qs = super(UserDvdAdmin, self).queryset(request)
        return qs.filter(owner=request.user)


########NEW FILE########
__FILENAME__ = models
from django.db import models
from django.utils.translation import ugettext_lazy as _
from django.utils.encoding import python_2_unicode_compatible
from django.contrib.auth.models import User

from authors.models import Author


@python_2_unicode_compatible
class DvdCategory(models.Model):

    name = models.CharField(_('name'), max_length=255)
    description = models.TextField(_('description'), blank=True)

    def __str__(self):
        return self.name

    class Meta:
        verbose_name = _('Category of DVDs')
        verbose_name_plural = _('Categories of DVDs')


@python_2_unicode_compatible
class Dvd(models.Model):

    title = models.CharField(_('title'), max_length=255)
    description = models.TextField(_('description'), blank=True)
    category = models.ForeignKey(DvdCategory, verbose_name=_('category'))
    author = models.ForeignKey(Author, verbose_name=_('author'))
    owner = models.ForeignKey(User, verbose_name=_('owner'))

    def __str__(self):
        return self.title

    class Meta:
        verbose_name = _('DVD')
        verbose_name_plural = _('DVDs')

########NEW FILE########
__FILENAME__ = admin
from django.contrib import admin


class TestModelAdmin(admin.ModelAdmin):
    pass
    #raw_id_fields = ('foreign_key',)


class MoreComplicatedTestModelAdmin(admin.ModelAdmin):
    fieldsets = (
        ('', {
            'fields': ('big_integer',
                       ('boolean', 'char', 'comma_separated_integer')),
        }),
        ('Wide fieldset', {
            'fields': (('date', 'date_time', 'time')),
            'classes': ('wide',),
        }),
        ('Collapsed fieldset', {
            'fields': ('decimal', 'email', 'file_path', 'float'),
            'classes': ('collapse',),
        }),
        ('Fieldset with description', {
            'fields': ('integer', 'ip_address', 'generic_ip_address',
                       'null_boolean'),
            'classes': ('collapse',),
            'description': 'A string of optional extra text to be displayed '
                           'at the top of each fieldset, under the heading of '
                           'the fieldset.<br /><br />'
                           'Note that this value is not HTML-escaped when '
                           'it\'s displayed in the admin interface. This lets '
                           'you include HTML if you so desire.'
        }),
        ('Collapsible but opened by default fieldset', {
            'fields': ('positive_integer', 'positive_small_integer', 'slug',
                       ('small_integer', 'text', 'url')),
            'classes': ('collapse collapse-opened',),
            'description': 'A string of optional extra text to be displayed '
                           'at the top of each fieldset, under the heading of '
                           'the fieldset.<br /><br />'
                           'Note that this value is not HTML-escaped when '
                           'it\'s displayed in the admin interface. This lets '
                           'you include HTML if you so desire.'
        }),
        ('Foreign and many to many', {
            'fields': ('foreign_key', 'many_to_many', 'one_to_one'),
        }),
    )
    radio_fields = {'foreign_key': admin.VERTICAL,
                    'one_to_one': admin.HORIZONTAL}
    #raw_id_fields = ('foreign_key',)
    #filter_horizontal = ('many_to_many',)
    #filter_vertical = ('many_to_many',)


########NEW FILE########
__FILENAME__ = models
import os

from django.db import models
from django.conf import settings


class TestModel(models.Model):
    """
    This is test model with all possible Django fields.
    """

    big_integer = models.BigIntegerField()
    binary = models.BinaryField()
    boolean = models.BooleanField()
    char = models.CharField(max_length=255)
    comma_separated_integer = models.CommaSeparatedIntegerField(max_length=255)
    date = models.DateField()
    date_time = models.DateTimeField()
    decimal = models.DecimalField(max_digits=10, decimal_places=2)
    email = models.EmailField()
    #file = models.FileField(upload_to='uploaded')
    file_path = models.FilePathField(
        path=os.path.join(settings.BASE_DIR, '../docs'), recursive=True)
    float = models.FloatField()
    #image = models.ImageField(upload_to='uploaded')
    integer = models.IntegerField()
    ip_address = models.IPAddressField()
    generic_ip_address = models.GenericIPAddressField()
    null_boolean = models.NullBooleanField()
    positive_integer = models.PositiveIntegerField()
    positive_small_integer = models.PositiveSmallIntegerField()
    slug = models.SlugField()
    small_integer = models.SmallIntegerField()
    text = models.TextField()
    time = models.TimeField()
    url = models.URLField()
    foreign_key = models.ForeignKey('books.Book')
    many_to_many = models.ManyToManyField('authors.Author')
    one_to_one = models.OneToOneField('auth.User')
    #html = models.TextField()


########NEW FILE########
__FILENAME__ = manage
#!/usr/bin/env python
import os
import sys

if __name__ == "__main__":
    os.environ.setdefault("DJANGO_SETTINGS_MODULE", "test_project.settings")

    from django.core.management import execute_from_command_line

    execute_from_command_line(sys.argv)

########NEW FILE########
__FILENAME__ = admin
from django.contrib.admin.sites import AdminSite

from django.contrib.auth.models import User, Group
from django.contrib.auth.admin import UserAdmin, GroupAdmin

from django.contrib.sites.models import Site
from django.contrib.sites.admin import SiteAdmin

from authors.models import Author
from authors.admin import AuthorAdmin

from books.models import BookCategory, Book
from books.admin import BookCategoryAdmin, BookAdmin, UserBookAdmin

from cds.models import CdCategory, Cd
from cds.admin import CdCategoryAdmin, CdAdmin, UserCdAdmin

from dvds.models import DvdCategory, Dvd
from dvds.admin import DvdCategoryAdmin, DvdAdmin, UserDvdAdmin

from test_app.models import TestModel
from test_app.admin import TestModelAdmin, MoreComplicatedTestModelAdmin

from .forms import SuperAdminAuthenticationForm, UserAuthenticationForm


class SuperAdminSite(AdminSite):

    login_form = SuperAdminAuthenticationForm

    def has_permission(self, request):
        """
        Allow only superusers.
        """
        return request.user.is_active and request.user.is_superuser


class UserSite(AdminSite):

    login_form = UserAuthenticationForm

    def has_permission(self, request):
        """
        Allow all users which are in 'users' group.
        """
        return request.user.is_active \
            and request.user.groups.filter(name='users').count()


admin = SuperAdminSite(name='adminpanel')
staff = AdminSite(name='staffpanel')
user = UserSite(name='userpanel')


# admin
admin.register(Site, SiteAdmin)
admin.register(User, UserAdmin)
admin.register(Group, GroupAdmin)

admin.register(Author, AuthorAdmin)
admin.register(BookCategory, BookCategoryAdmin)
admin.register(Book, BookAdmin)
admin.register(CdCategory, CdCategoryAdmin)
admin.register(Cd, CdAdmin)
admin.register(DvdCategory, DvdCategoryAdmin)
admin.register(Dvd, DvdAdmin)
admin.register(TestModel, TestModelAdmin)

# staff
staff.register(Author, AuthorAdmin)
staff.register(BookCategory, BookCategoryAdmin)
staff.register(CdCategory, CdCategoryAdmin)
staff.register(DvdCategory, DvdCategoryAdmin)
staff.register(TestModel, MoreComplicatedTestModelAdmin)

# user
user.register(Book, UserBookAdmin)
user.register(Cd, UserCdAdmin)
user.register(Dvd, UserDvdAdmin)
########NEW FILE########
__FILENAME__ = forms
from django import forms
from django.contrib.auth import authenticate
from django.contrib.admin.forms import AdminAuthenticationForm
from django.utils.translation import ugettext_lazy


class SuperAdminAuthenticationForm(AdminAuthenticationForm):
    """
    A custom authentication form used in the super admin admin app.
    """

    def clean(self):
        username = self.cleaned_data.get('username')
        password = self.cleaned_data.get('password')
        message = ugettext_lazy(
            "Please enter the correct username and password "
            "for admin account. Note that both fields may be case-sensitive.")

        if username and password:
            self.user_cache = authenticate(username=username, password=password)
            if self.user_cache is None or not self.user_cache.is_superuser:
                raise forms.ValidationError(message, code='invalid_login')
            elif not self.user_cache.is_active:
                raise forms.ValidationError(
                    self.error_messages['inactive'],
                    code='inactive',
                )
        return self.cleaned_data


class UserAuthenticationForm(AdminAuthenticationForm):
    """
    A custom authentication form used in the user admin app.
    """

    def clean(self):
        username = self.cleaned_data.get('username')
        password = self.cleaned_data.get('password')
        message = ugettext_lazy(
            "Please enter the correct username and password "
            "for user account. Note that both fields may be case-sensitive.")

        if username and password:
            self.user_cache = authenticate(username=username, password=password)
            if self.user_cache is None \
                    or not self.user_cache.groups.filter(name='users').count():
                raise forms.ValidationError(message, code='invalid_login')
            elif not self.user_cache.is_active:
                raise forms.ValidationError(
                    self.error_messages['inactive'],
                    code='inactive',
                )

        return self.cleaned_data

########NEW FILE########
__FILENAME__ = settings
"""
Django settings for test_project project.

For more information on this file, see
https://docs.djangoproject.com/en/1.6/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/1.6/ref/settings/
"""

# Build paths inside the project like this: os.path.join(BASE_DIR, ...)
import os
import sys

from django.conf import global_settings

BASE_DIR = os.path.dirname(os.path.dirname(__file__))

# add apps to path
sys.path.insert(0, os.path.join(BASE_DIR, 'apps'))
# add wpadmin to path
sys.path.insert(0, os.path.join(BASE_DIR, '..'))


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/1.6/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = '&478os2g_tt5g!e+wqgs5h8#-u8ydqhkohnc6u&*yxg9cu@rm5'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

TEMPLATE_DEBUG = True

ALLOWED_HOSTS = []


# Application definition

INSTALLED_APPS = (
    # Django WP Admin must be before django.contrib.admin
    'wpadmin',

    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',

    'authors',
    'books',
    'cds',
    'dvds',
    'test_app',
)

MIDDLEWARE_CLASSES = (
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
)

ROOT_URLCONF = 'test_project.urls'

WSGI_APPLICATION = 'test_project.wsgi.application'


# Database
# https://docs.djangoproject.com/en/1.6/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': os.path.join(BASE_DIR, 'db.sqlite3'),
    }
}

# Internationalization
# https://docs.djangoproject.com/en/1.6/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_L10N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/1.6/howto/static-files/

STATIC_URL = '/static/'

STATIC_ROOT = os.path.join(BASE_DIR, 'files/static-collected/')

TEMPLATE_DIRS = (
    os.path.join(BASE_DIR, 'templates'),
)

TEMPLATE_CONTEXT_PROCESSORS = global_settings.TEMPLATE_CONTEXT_PROCESSORS + (
    'django.core.context_processors.request',
)

SESSION_ENGINE = 'django.contrib.sessions.backends.signed_cookies'

EMAIL_BACKEND = 'django.core.mail.backends.console.EmailBackend'

WPADMIN = {
    'adminpanel': {
        'admin_site': 'test_project.admin.admin',
        'title': 'Django admin panel',
        'menu': {
            'top': 'wpadmin.menu.menus.BasicTopMenu',
            'left': 'wpadmin.menu.menus.BasicLeftMenu',
        },
        'dashboard': {
            'breadcrumbs': True,
        },
        'custom_style': STATIC_URL + 'wpadmin/css/themes/sunrise.css',
    },
    'userpanel': {
        'admin_site': 'test_project.admin.user',
        'title': 'Django user panel',
        'menu': {
            'top': 'test_project.wp.UserTopMenu',
            'left': 'test_project.wp.UserLeftMenu',
        },
        'dashboard': {
            'breadcrumbs': False,
        },
        'custom_style': STATIC_URL + 'wpadmin/css/themes/ocean.css',
    },
}


########NEW FILE########
__FILENAME__ = urls
from django.conf.urls import patterns, include, url
from django.views.generic.base import TemplateView

from .admin import admin, staff, user

urlpatterns = patterns('',
    url(r'^adminpanel/', include(admin.urls)),
    url(r'^staffpanel/', include(staff.urls)),
    url(r'^userpanel/', include(user.urls)),
    #url(r'^', include('django.contrib.auth.urls')),
    url(r'^$', TemplateView.as_view(template_name='index.html')),
)

########NEW FILE########
__FILENAME__ = wp
from django.utils.translation import ugettext_lazy as _
from django.core.urlresolvers import reverse
from django.conf import settings

from wpadmin.utils import get_admin_site_name
from wpadmin.menu import items
from wpadmin.menu.menus import Menu


class UserTopMenu(Menu):

    def my_user_check(self, user):
        """
        Custom helper method for hiding some menu items from not allowed users.
        """
        return user.groups.filter(name='users').exists()

    def init_with_context(self, context):

        admin_site_name = get_admin_site_name(context)

        if 'django.contrib.sites' in settings.INSTALLED_APPS:
            from django.contrib.sites.models import Site
            site_name = Site.objects.get_current().name
            site_url = 'http://' + Site.objects.get_current().domain
        else:
            site_name = _('Site')
            site_url = '/'

        self.children += [
            items.MenuItem(
                title=site_name,
                url=site_url,
                icon='fa-bullseye',
                css_styles='font-size: 1.5em;',
            ),
            items.MenuItem(
                title=_('Dashboard'),
                icon='fa-tachometer',
                url=reverse('%s:index' % admin_site_name),
                description=_('Dashboard'),
            ),
        ]

        if self.my_user_check(context.get('request').user):
            self.children += [
                items.AppList(
                    title=_('Applications'),
                    icon='fa-tasks',
                    exclude=('django.contrib.*',),
                ),
                items.AppList(
                    title=_('Administration'),
                    icon='fa-cog',
                    models=('django.contrib.*',),
                ),
                items.UserTools(
                    css_styles='float: right;',
                ),
            ]

        self.children += [
            items.MenuItem(
                title=_('Color theme'),
                icon='fa-spinner',
                description=_('Change color theme'),
                css_styles='float: right;',
                children=[
                    items.MenuItem(
                        title='Blue',
                        url='javascript:change_color_theme("blue");',
                    ),
                    items.MenuItem(
                        title='Coffee',
                        url='javascript:change_color_theme("coffee");',
                    ),
                    items.MenuItem(
                        title='Default',
                        url='javascript:change_color_theme("default");',
                    ),
                    items.MenuItem(
                        title='Ectoplasm',
                        url='javascript:change_color_theme("ectoplasm");',
                    ),
                    items.MenuItem(
                        title='Light',
                        url='javascript:change_color_theme("light");',
                    ),
                    items.MenuItem(
                        title='Midnight',
                        url='javascript:change_color_theme("midnight");',
                    ),
                    items.MenuItem(
                        title='Ocean',
                        url='javascript:change_color_theme("ocean");',
                    ),
                    items.MenuItem(
                        title='Sunrise',
                        url='javascript:change_color_theme("sunrise");',
                    ),
                ]
            ),
        ]


class UserLeftMenu(Menu):

    def is_user_allowed(self, user):
        """
        Only users that are in 'users' group are allowed to see this menu.
        """
        return user.groups.filter(name='users').count()

    def init_with_context(self, context):

        if self.is_user_allowed(context.get('request').user):

            admin_site_name = get_admin_site_name(context)

            self.children += [
                items.MenuItem(
                    title=_('Dashboard'),
                    icon='fa-tachometer',
                    url=reverse('%s:index' % admin_site_name),
                    description=_('Dashboard'),
                ),
                items.MenuItem(
                    title=_('Books'),
                    icon='fa-book',
                    url=reverse('%s:books_book_changelist' % admin_site_name),
                ),
                items.MenuItem(
                    title=_('CDs'),
                    icon='fa-music',
                    url=reverse('%s:cds_cd_changelist' % admin_site_name),
                ),
                items.MenuItem(
                    title=_('DVDs'),
                    icon='fa-film',
                    url=reverse('%s:dvds_dvd_changelist' % admin_site_name),
                ),
            ]


########NEW FILE########
__FILENAME__ = wsgi
"""
WSGI config for test_project project.

It exposes the WSGI callable as a module-level variable named ``application``.

For more information on this file, see
https://docs.djangoproject.com/en/1.6/howto/deployment/wsgi/
"""

import os
os.environ.setdefault("DJANGO_SETTINGS_MODULE", "test_project.settings")

from django.core.wsgi import get_wsgi_application
application = get_wsgi_application()

########NEW FILE########
__FILENAME__ = items
import re

from django.utils.text import capfirst
from django.utils.translation import ugettext_lazy as _

from wpadmin.menu.utils import UserTestElementMixin, AppListElementMixin


class MenuItem(UserTestElementMixin):
    """
    This is the base class for custom menu items.
    A menu item can have the following properties:

    ``title``
        String that contains the menu item title, make sure you use the
        django gettext functions if your application is multilingual.
        Default value: 'Untitled menu item'.

    ``url``
        String that contains the menu item URL.
        Default value: None (will be rendered as 'javascript:;').

    ``add_url``
        An optional string that contains second menu item URL. This url allows
        to have edit and add urls in one menu item. add_url is small plus sign
        in menu, next to normal url.
        Default value: None.

    ``icon``
        An optional string which contains classes for icons from Font Awesome
        which should be used for this menu item. Note that icons may not show
        on all levels of menu. They are only supported at top level.
        Default value: None.

    ``css_styles``
        String containing special CSS styling for this menu item.
        Default value: None.

    ``description``
        An optional string that will be used as the ``title`` attribute of
        the menu-item ``a`` tag.
        Default value: None.

    ``enabled``
        Boolean that determines whether the menu item is enabled or not.
        Disabled items are displayed but are not clickable.
        Default value: True.

    ``children``
        A list of children menu items. All children items must be instances of
        the ``MenuItem`` class.
    """

    title = 'Untitled menu item'
    url = None
    add_url = None
    icon = None
    css_styles = None
    description = None
    enabled = True
    children = None

    def __init__(self, title=None, url=None, **kwargs):

        if title is not None:
            self.title = title

        if url is not None:
            self.url = url

        for key in kwargs:
            if hasattr(self.__class__, key):
                setattr(self, key, kwargs[key])
        self.children = self.children or []

    def init_with_context(self, context):
        pass

    def is_selected(self, request):
        """
        Helper method that returns ``True`` if the menu item is active.
        A menu item is considered as active if it's url or add_url or one of its
        descendants url or add_url is equals to the current URL.
        """
        current_url = request.path

        return self.url == current_url or \
            self.add_url == current_url or \
            bool(re.match('^%s\d+/$' % self.url, current_url)) or \
            len([c for c in self.children if c.is_selected(request)]) > 0

    def is_empty(self):
        """
        Helper method that returns ``True`` if the menu item is empty.
        This method always returns ``False`` for basic items, but can return
        ``True`` if the item is an AppList.
        """
        return False


class AppList(AppListElementMixin, MenuItem):
    """
    """

    def __init__(self, title=None, models=None, exclude=None, **kwargs):
        self.models = list(models or [])
        self.exclude = list(exclude or [])
        super(AppList, self).__init__(title, **kwargs)

    def init_with_context(self, context):

        items = self._visible_models(context)
        apps = {}
        for model, perms in items:
            if not perms['change'] and not perms['add']:
                continue
            app_label = model._meta.app_label
            if app_label not in apps:
                apps[app_label] = {
                    'title': capfirst(_(app_label.title())),
                    'url': self._get_admin_app_list_url(model, context),
                    'models': []
                }
            apps[app_label]['models'].append({
                'title': capfirst(model._meta.verbose_name_plural),
                'url': perms['change'] and self._get_admin_change_url(
                    model, context),
                'add_url': perms['add'] and self._get_admin_add_url(
                    model, context),
                'description':
                # Translators: This is already translated in Django
                perms['change'] and _("Change") 
                # Translators: This is already translated in Django
                or _("No permission"),
            })

        apps_sorted = list(apps.keys())
        apps_sorted.sort()
        for app in sorted(apps.keys()):
            app_dict = apps[app]
            item = MenuItem(
                title=app_dict['title'], url=app_dict['url'],
                description=app_dict['title'])
            # sort model list alphabetically
            apps[app]['models'].sort(key=lambda x: x['title'])
            for model_dict in apps[app]['models']:
                item.children.append(MenuItem(**model_dict))
            self.children.append(item)


class ModelList(AppListElementMixin, MenuItem):
    """
    """

    def __init__(self, title=None, models=None, exclude=None, **kwargs):
        self.models = list(models or [])
        self.exclude = list(exclude or [])

        super(ModelList, self).__init__(title, **kwargs)

    def init_with_context(self, context):

        items = self._visible_models(context)
        for model, perms in items:
            if not perms['change']:
                continue
            title = capfirst(model._meta.verbose_name_plural)
            url = self._get_admin_change_url(model, context)
            add_url = self._get_admin_add_url(model, context)
            item = MenuItem(
                title=title, url=url, description=title, add_url=add_url)
            self.children.append(item)


class UserTools(MenuItem):
    """
    """
    is_user_tools = True


########NEW FILE########
__FILENAME__ = menus
from django.utils.translation import ugettext_lazy as _
from django.core.urlresolvers import reverse
from django.conf import settings

from wpadmin.utils import get_admin_site_name
from wpadmin.menu.utils import UserTestElementMixin
from wpadmin.menu import items


class Menu(UserTestElementMixin):
    """
    Base menu.
    """
    children = None

    def __init__(self, **kwargs):
        for key in kwargs:
            if hasattr(self.__class__, key):
                setattr(self, key, kwargs[key])
        self.children = kwargs.get('children', [])

    def init_with_context(self, context):
        pass


class DefaultTopMenu(Menu):
    """
    Default top menu which mimics default Django admin header.
    """

    def init_with_context(self, context):

        self.children += [
            items.MenuItem(
                # Translators: This is already translated in Django
                title=_('Django administration'),
                url=None,
                icon='fa-gears',
                css_styles='font-size: 1.5em;',
            ),
            items.UserTools(
                css_styles='float: right;',
                is_user_allowed=lambda user: user.is_active and user.is_staff,
            ),
        ]


class BasicTopMenu(Menu):
    """
    Basic default top menu.
    """

    def init_with_context(self, context):

        admin_site_name = get_admin_site_name(context)

        if 'django.contrib.sites' in settings.INSTALLED_APPS:
            from django.contrib.sites.models import Site
            site_name = Site.objects.get_current().name
            site_url = 'http://' + Site.objects.get_current().domain
        else:
            site_name = _('Site')
            site_url = '/'

        self.children += [
            items.MenuItem(
                title=site_name,
                url=site_url,
                icon='fa-bullseye',
                css_styles='font-size: 1.5em;',
            ),
            items.MenuItem(
                title=_('Dashboard'),
                icon='fa-tachometer',
                url=reverse('%s:index' % admin_site_name),
                description=_('Dashboard'),
            ),
            items.UserTools(
                css_styles='float: right;',
                is_user_allowed=lambda user: user.is_staff,
            ),
        ]


class BasicLeftMenu(Menu):
    """
    Basic default left menu.
    """

    def is_user_allowed(self, user):
        """
        Only users that are staff are allowed to see this menu.
        """
        return user.is_staff

    def init_with_context(self, context):

        if self.is_user_allowed(context.get('request').user):

            admin_site_name = get_admin_site_name(context)

            self.children += [
                items.MenuItem(
                    title=_('Dashboard'),
                    icon='fa-tachometer',
                    url=reverse('%s:index' % admin_site_name),
                    description=_('Dashboard'),
                ),
                items.AppList(
                    title=_('Applications'),
                    description=_('Applications'),
                    exclude=('django.contrib.*',),
                    icon='fa-tasks',
                ),
                items.AppList(
                    title=_('Administration'),
                    description=_('Administration'),
                    models=('django.contrib.*',),
                    icon='fa-cog',
                ),
            ]


########NEW FILE########
__FILENAME__ = utils
"""
Menu utilities.
"""
from fnmatch import fnmatch

from django.utils.importlib import import_module
from django.core.urlresolvers import reverse

from wpadmin.utils import (
    get_wpadmin_settings, get_admin_site, get_admin_site_name)


def get_menu_cls(menu, admin_site_name='admin'):
    """
    menu - menu name ('top' or 'left')
    """
    return get_wpadmin_settings(admin_site_name).get('menu', {}).get(menu, None)


def get_menu(menu, admin_site_name='admin'):
    """
    menu - menu name ('top' or 'left')
    """
    menu_cls = get_menu_cls(menu, admin_site_name)
    if menu_cls:
        mod, inst = menu_cls.rsplit('.', 1)
        mod = import_module(mod)
        return getattr(mod, inst)()
    return None


# I had to copy (and slightly modify) those utils from django-admin-tools
# to override get_admin_site
def get_avail_models(context):
    """ Returns (model, perm,) for all models user can possibly see """
    items = []
    admin_site = get_admin_site(context)

    for model, model_admin in list(admin_site._registry.items()):
        perms = model_admin.get_model_perms(context.get('request'))
        if True not in list(perms.values()):
            continue
        items.append((model, perms,))
    return items


def filter_models(context, models, exclude):
    """
    Returns (model, perm,) for all models that match models/exclude patterns
    and are visible by current user.
    """
    items = get_avail_models(context)
    included = []
    full_name = lambda m: '%s.%s' % (m.__module__, m.__name__)

    # I believe that that implemented
    # O(len(patterns)*len(matched_patterns)*len(all_models))
    # algorithm is fine for model lists because they are small and admin
    # performance is not a bottleneck. If it is not the case then the code
    # should be optimized.

    if len(models) == 0:
        included = items
    else:
        for pattern in models:
            for item in items:
                model, perms = item
                if fnmatch(full_name(model), pattern) and item not in included:
                    included.append(item)

    result = included[:]
    for pattern in exclude:
        for item in included:
            model, perms = item
            if fnmatch(full_name(model), pattern):
                try:
                    result.remove(item)
                except ValueError:  # if the item was already removed skip
                    pass
    return result


class UserTestElementMixin(object):
    """
    Mixin which adds a method for checking if current user is allowed to see
    something (menu, menu item, etc.).
    """

    def is_user_allowed(self, user):
        """
        This method can be overwritten to check if current user can see this
        element.
        """
        return True


class AppListElementMixin(object):
    """
    Mixin class for AppList and ModelList MenuItem.
    """

    def _visible_models(self, context):

        included = self.models[:]
        excluded = self.exclude[:]

        if excluded and not included:
            included = ["*"]
        return filter_models(context, included, excluded)

    def _get_admin_app_list_url(self, model, context):
        """
        Returns the admin change url.
        """
        app_label = model._meta.app_label
        return reverse('%s:app_list' % get_admin_site_name(context),
                       args=(app_label,))

    def _get_admin_change_url(self, model, context):
        """
        Returns the admin change url.
        """
        app_label = model._meta.app_label
        return reverse('%s:%s_%s_changelist' % (get_admin_site_name(context),
                                                app_label,
                                                model.__name__.lower()))

    def _get_admin_add_url(self, model, context):
        """
        Returns the admin add url.
        """
        app_label = model._meta.app_label
        return reverse('%s:%s_%s_add' % (get_admin_site_name(context),
                                         app_label,
                                         model.__name__.lower()))

    def is_empty(self):
        return len(self.children) == 0


########NEW FILE########
__FILENAME__ = wpadmin_menu_tags
import hashlib
try:
    from urllib.parse import urlencode
except ImportError:
    from urllib import urlencode

from django import template

from wpadmin.utils import get_admin_site_name
from wpadmin.menu.utils import get_menu

register = template.Library()


class IsMenuEnabledNode(template.Node):

    def __init__(self, menu_name):
        """
        menu_name - menu name ('top' or 'left')
        """
        self.menu_name = menu_name

    def render(self, context):
        menu = get_menu(self.menu_name, get_admin_site_name(context))
        if menu and menu.is_user_allowed(context.get('request').user):
            enabled = True
        else:
            enabled = False
        context['wpadmin_is_%s_menu_enabled' % self.menu_name] = enabled
        return ''


def wpadmin_is_left_menu_enabled(parser, token):
    return IsMenuEnabledNode('left')

register.tag('wpadmin_is_left_menu_enabled', wpadmin_is_left_menu_enabled)


def wpadmin_render_top_menu(context):
    menu = get_menu('top', get_admin_site_name(context))
    if not menu:
        from wpadmin.menu.menus import DefaultTopMenu
        menu = DefaultTopMenu()
    menu.init_with_context(context)
    context.update({
        'menu': menu,
        'is_user_allowed': menu.is_user_allowed(context.get('request').user),
    })
    return context

register.inclusion_tag(
    'wpadmin/menu/top_menu.html',
    takes_context=True)(wpadmin_render_top_menu)


def wpadmin_render_left_menu(context):
    menu = get_menu('left', get_admin_site_name(context))
    if menu:
        menu.init_with_context(context)
        context.update({
            'menu': menu,
            'is_user_allowed': menu.is_user_allowed(context.get('request').user),
        })
    return context

register.inclusion_tag(
    'wpadmin/menu/left_menu.html',
    takes_context=True)(wpadmin_render_left_menu)


def wpadmin_render_menu_top_item(context, item, is_first, is_last):
    item.init_with_context(context)
    if item.icon:
        icon = item.icon
    else:
        icon = 'fa-folder-o'
    context.update({
        'item': item,
        'is_first': is_first,
        'is_last': is_last,
        'icon': icon,
        'is_selected': item.is_selected(context.get('request')),
        'is_user_allowed': item.is_user_allowed(context.get('request').user),
    })
    return context

register.inclusion_tag(
    'wpadmin/menu/menu_top_item.html',
    takes_context=True)(wpadmin_render_menu_top_item)


def wpadmin_render_menu_item(context, item, is_first, is_last):
    item.init_with_context(context)
    context.update({
        'item': item,
        'is_first': is_first,
        'is_last': is_last,
        'is_selected': item.is_selected(context.get('request')),
        'is_user_allowed': item.is_user_allowed(context.get('request').user),
    })
    return context

register.inclusion_tag(
    'wpadmin/menu/menu_item.html',
    takes_context=True)(wpadmin_render_menu_item)


def wpadmin_render_user_tools(context, item, is_first, is_last):
    item.init_with_context(context)
    context.update({
        'item': item,
        'is_first': is_first,
        'is_last': is_last,
        'is_user_allowed': context.get('request').user.is_authenticated()
        and item.is_user_allowed(context.get('request').user),
    })
    return context

register.inclusion_tag(
    'wpadmin/menu/user_tools.html',
    takes_context=True)(wpadmin_render_user_tools)


def gravatar_url(user, size, https=True):
    default = 'retro'
    if https:
        url = 'https'
    else:
        url = 'http'
    url += '://www.gravatar.com/avatar.php?'
    if hasattr(user, 'email') and user.email:
        gravatar_id = hashlib.md5(user.email.lower().encode('utf-8')).hexdigest()
    else:
        gravatar_id = '00000000000000000000000000000000'
    url += urlencode({
        'gravatar_id': gravatar_id,
        'default': default,
        'size': str(size)})
    return url

register.simple_tag(gravatar_url)


########NEW FILE########
__FILENAME__ = wpadmin_tags
from django import template
from django.utils.translation import ugettext_lazy as _

from wpadmin.utils import (
    get_admin_site_name, get_wpadmin_settings, are_breadcrumbs_enabled)

register = template.Library()


def wpadmin_render_custom_style(context):
    custom_style_path = get_wpadmin_settings(get_admin_site_name(context)) \
        .get('custom_style', None)
    if custom_style_path:
        return '<link type="text/css" rel="stylesheet" href="%s" />' \
            % custom_style_path
    else:
        return ''

register.simple_tag(takes_context=True)(wpadmin_render_custom_style)


class AreBreadcrumbsEnabledNode(template.Node):

    def render(self, context):
        context['wpadmin_are_breadcrumbs_enabled'] = are_breadcrumbs_enabled(
            get_admin_site_name(context))
        return ''


def wpadmin_are_breadcrumbs_enabled(parser, token):
    return AreBreadcrumbsEnabledNode()

register.tag('wpadmin_are_breadcrumbs_enabled', wpadmin_are_breadcrumbs_enabled)


def wpadmin_render_custom_title(context):
    # Translators: This is already translated in Django
    return get_wpadmin_settings(get_admin_site_name(context)) \
        .get('title', _('Django site admin'))

register.simple_tag(takes_context=True)(wpadmin_render_custom_title)


########NEW FILE########
__FILENAME__ = utils
"""
WPadmin utilities.
"""

from django.conf import settings
from django.utils.importlib import import_module
from django.contrib import admin
from django.utils.translation import get_language_from_path


def get_wpadmin_settings(admin_site_name='admin'):
    """
    Get WPadmin settings for specified admin site.
    """
    return getattr(settings, 'WPADMIN', {}).get(admin_site_name, {})


def get_admin_site_name(context):
    """
    Get admin site name from request from context.
    Admin site name is taken from request path:
    * it is first part of path - between first and second slash if there is no
    lang prefix
    * or second part fo path - between second and third slash
    """
    path = context.get('request').path
    lang = get_language_from_path(path)
    path = path.split('/')
    if lang and path[1] == lang:
        return path[2]
    return path[1]


def get_admin_site(context):
    """
    Get admin site instance.
    """
    admin_site = get_wpadmin_settings(get_admin_site_name(context)) \
        .get('admin_site')
    if admin_site:
        mod, inst = admin_site.rsplit('.', 1)
        mod = import_module(mod)
        return getattr(mod, inst)
    else:
        return admin.site


def are_breadcrumbs_enabled(admin_site_name='admin'):
    """
    """
    return get_wpadmin_settings(admin_site_name).get('dashboard', {}) \
        .get('breadcrumbs', True)


########NEW FILE########
