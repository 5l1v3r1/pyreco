
behave features: Self-Tests
===============================================================================

This directory contains feature tests that are executed with behave.
These self-tests are used to:

  * ensure that ``behave`` reacts as expected
  * define the common expected behaviour for behave
  * support "Acceptance Test Driven-Design" (ATDD)

RELATED:
  * Cucumber Technology Compatibility Kit: https://github.com/cucumber/cucumber-tck
Feature: Scenario Description

    As a tester
    I want to explain the rationale of a test scenario or scenario outline
    Before I actually execute the steps.

    | SPECIFICATION: Scenario Description
    |   * Scenario descriptions are in optional section between
    |     Scenario line and the first step.
    |   * All description lines are added to the scenario description.
    |   * Empty lines are not part of the scenario description (are removed).
    |   * Comment lines are not part of the scenario description (are removed).
    |   * A Scenario/ScenarioOutline with a scenario description,
    |     but without steps is valid (to support preparation of scenarios).
    |
    | SPECIFICATION: A scenario description line...
    |   * must not start with step keywords, like:
    |
    |       Given, When, Then, And, But, etc.
    |       (including lower-case versions)
    |
    |   * must not start with '*' (ASTERISK) due to generic step keyword ambiguity
    |   * must not start with '@' (AT) due to tag ambiguity
    |     (supporting: scenario without steps but with step description).
    |   * may start with '|' (table-cell-separator).
    |   * does not contain only whitespace chars (empty line, filtered-out).
    |   * does not start with '#' (HASH) after whitespace chars (comment line).
    |
    | GRAMMAR STRUCTURE:
    |   Scenario-Line : 1
    |       Scenario-Description-Line : 0 .. N
    |       Step-Line : 0 .. N
    |
    |   Scenario-Line := Scenario-Keyword ':' Scenario-Name
    |   Scenario-Description-Line := Line does not start with Step-Keyword
    |   Step-Line := Step-Keyword Words+


    @setup
    Scenario: Feature Setup
      Given a new working directory
      And a file named "features/steps/steps.py" with:
        """
        from behave import step
        import sys

        @step('a step passes')
        def step_passes(context):
            pass

        @step('a step passes with "{comment}"')
        def step_passes(context, comment):
            sys.stdout.write("PASSING-STEP: %s;\n" % comment)

        @step('a step fails')
        def step_fails(context):
            assert False, "XFAIL-STEP"
        """


    Scenario: First Example for a Scenario Description
      Given a file named "features/example_description1.feature" with:
        """
        Feature:
          Scenario: E1

            This is a simple scenario description before the steps start.
            It explains why this scenario is important.

            Here another scenario description line after an empty line.

                Given a step passes with "Alice"
                When a step passes with "Bob"
                Then a step passes with "Charly"
        """
      When I run "behave -f plain -T features/example_description1.feature"
      Then it should pass with:
        """
        1 feature passed, 0 failed, 0 skipped
        1 scenario passed, 0 failed, 0 skipped
        3 steps passed, 0 failed, 0 skipped, 0 undefined
        """
      And the command output should contain:
        """
        Feature:
          Scenario: E1
            Given a step passes with "Alice" ... passed
            When a step passes with "Bob" ... passed
            Then a step passes with "Charly" ... passed
        """


    Scenario: Inspect the Scenario Description by using JSON
      Given a file named "features/example_description1.feature" exists
      When I run "behave -f json.pretty -o example1.json -f plain -T features/example_description1.feature"
      Then it should pass
      And the file "example1.json" should contain:
        """
            "description": [
              "This is a simple scenario description before the steps start.",
              "It explains why this scenario is important.",
              "Here another scenario description line after an empty line."
            ],
            "keyword": "Scenario",
            "location": "features/example_description1.feature:2",
            "name": "E1",
        """


    Scenario: Second Example with 2 scenario with scenario descriptions
      Given a file named "features/example_description2.feature" with:
        """
        @one
        Feature: F2

           Feature description line 1.
           Feature description line 2.

          @foo
          Scenario: S2.1

            Scenario description line S2.1-1.
              Scenario description line S2.1-2 (indentation is removed).

                Given a step passes with "Alice"
                Then a step passes with "Charly"

          @foo
          @bar @baz
          Scenario: S2.2

            Scenario description line S2.2-1.

                When a step passes with "Bob"
        """
      When I run "behave -f json.pretty -o example2.json -f plain -T features/example_description2.feature"
      Then it should pass with:
        """
        1 feature passed, 0 failed, 0 skipped
        2 scenarios passed, 0 failed, 0 skipped
        3 steps passed, 0 failed, 0 skipped, 0 undefined
        """
      And the command output should contain:
        """
        Feature: F2
          Scenario: S2.1
            Given a step passes with "Alice" ... passed
            Then a step passes with "Charly" ... passed

          Scenario: S2.2
            When a step passes with "Bob" ... passed
        """
      And the file "example2.json" should contain:
        """
            "description": [
              "Scenario description line S2.1-1.",
              "Scenario description line S2.1-2 (indentation is removed)."
            ],
            "keyword": "Scenario",
            "location": "features/example_description2.feature:8",
            "name": "S2.1",
        """
      And the file "example2.json" should contain:
        """
            "description": [
              "Scenario description line S2.2-1."
            ],
            "keyword": "Scenario",
            "location": "features/example_description2.feature:18",
            "name": "S2.2",
        """

issue.features:
===============================================================================

:Status:   PREPARED (fixes are being applied).
:Requires: Python >= 2.6 (due to step implementations)

This directory contains behave self-tests to ensure that behave related
issues are fixed.

PROCEDURE:

    * ONCE: Install python requirements ("requirements.txt")
    * Run the tests with behave

::

    bin/behave -f progress issue.features/

======
Behave
======

.. image:: https://travis-ci.org/behave/behave.png?branch=master
    :target: https://travis-ci.org/behave/behave
    :alt: Travis CI Build Status

.. image:: https://pypip.in/v/behave/badge.png
    :target: https://pypi.python.org/pypi/behave
    :alt: Latest Version

.. image:: https://pypip.in/d/behave/badge.png
    :target: https://pypi.python.org/pypi/behave
    :alt: Downloads

.. image:: https://pypip.in/license/behave/badge.png
    :target: https://pypi.python.org/pypi/behave/
    :alt: License

.. |logo| image:: https://raw.github.com/behave/behave/master/docs/_static/behave_logo1.png

behave is behavior-driven development, Python style.

|logo|

Behavior-driven development (or BDD) is an agile software development
technique that encourages collaboration between developers, QA and
non-technical or business participants in a software project.

*behave* uses tests written in a natural language style, backed up by Python
code.

First, `install *behave*.`_


Now make a directory called "features/".
In that directory create a file called "example.feature" containing:

.. code-block:: gherkin

    # -- FILE: features/example.feature
    Feature: Showing off behave

      Scenario: Run a simple test
        Given we have behave installed
         When we implement 5 tests
         Then behave will test them for us!

Make a new directory called "features/steps/".
In that directory create a file called "example_steps.py" containing:

.. code-block:: python

    # -- FILE: features/steps/example_steps.py
    from behave import given, when, then, step

    @given('we have behave installed')
    def step_impl(context):
        pass

    @when('we implement {number:d} tests')
    def step_impl(context, number):  # -- NOTE: number is converted into integer
        assert number > 1 or number == 0
        context.tests_count = number

    @then('behave will test them for us!')
    def step_impl(context):
        assert context.failed is False
        assert context.tests_count >= 0

Run behave:

.. code-block:: bash

    $ behave
    Feature: Showin off behave # features/example.feature:2

      Scenario: Run a simple test          # features/example.feature:4
        Given we have behave installed     # features/steps/example_steps.py:4
        When we implement 5 tests          # features/steps/example_steps.py:8
        Then behave will test them for us! # features/steps/example_steps.py:13

    1 feature passed, 0 failed, 0 skipped
    1 scenario passed, 0 failed, 0 skipped
    3 steps passed, 0 failed, 0 skipped, 0 undefined

Now, continue reading to learn how to the most of *behave*. To get started,
we recommend the `tutorial`_ and then the `feature testing language`_ and
`api`_ references.


.. _`Install *behave*.`: http://pythonhosted.org/behave/install.html
.. _`tutorial`: http://pythonhosted.org/behave/tutorial.html#features
.. _`feature testing language`: http://pythonhosted.org/behave/gherkin.html
.. _`api`: http://pythonhosted.org/behave/api.html


More Information
-------------------------------------------------------------------------------

* `behave documentation`_ (`latest changes`_)
* `behave.example`_: Behave Examples and Tutorials (docs, executable examples).

.. _behave documentation: http://pythonhosted.org/behave/
.. _latest changes: https://github.com/behave/behave/blob/master/CHANGES.rst
.. _behave.example: https://github.com/jenisys/behave.example


Testing Domains
-------------------------------------------------------------------------------

Behave and other BDD frameworks allow you to provide **step libraries**
to reuse step definitions in similar projects that address the same 
problem domain.

Support of the following testing domains is currently known:

=============== ================= =========================================================
Testing Domain   Name              Description
=============== ================= =========================================================
Command-line    `behave4cmd`_     Test command-line tools, like behave, etc. (coming soon).
Web Apps        `django-behave`_  Test Django Web apps with behave.
Web, SMS, ...   `behaving`_       Test Web Apps, Email, SMS, Personas (step library).
=============== ================= =========================================================

.. _behave4cmd: https://github.com/jenisys/behave4cmd
.. _django-behave: https://github.com/rwillmer/django-behave
.. _behaving: https://github.com/ggozad/behaving

This directory contains python package requirements for behave.
These requirement files are used by:

  * pip
  * tox

