# Inflector for Python

The Inflector is used for getting the plural and singular form of nouns. This piece of code helps on creating code that favors convention over configuration.

Only English and Spanish nouns are supported. The English version is a port of Ruby on Rails Inflector, while the Spanish Version has been developed from scratch with the help of Carles Sadurn√≠.

Apart from converting singulars and plurals, this module also handles necessary string conversion for convention based applications like:

Available methods are:

## pluralize(word)

Pluralizes nouns.

## singularize(word)

Singularizes nouns.

## conditionalPlural(numer_of_records, word)

Returns the plural form of a word if first parameter is greater than 1

## titleize(word, uppercase = '')

Converts an underscored or CamelCase word into a sentence.
The titleize function converts text like "WelcomePage",
"welcome_page" or  "welcome page" to this "Welcome Page".
If the "uppercase" parameter is set to 'first' it will only
capitalize the first character of the title.

## camelize(word):

Returns given word as CamelCased
Converts a word like "send_email" to "SendEmail". It
will remove non alphanumeric character from the word, so
"who's online" will be converted to "WhoSOnline"

## underscore(word)

Converts a word "into_it_s_underscored_version"
Convert any "CamelCased" or "ordinary Word" into an
"underscored_word".
This can be really useful for creating friendly URLs.

## humanize(word, uppercase = '')

Returns a human-readable string from word
Returns a human-readable string from word, by replacing
underscores with a space, and by upper-casing the initial
character by default.
If you need to uppercase all the words you just have to
pass 'all' as a second parameter.


## variablize(word)

Same as camelize but first char is lowercased
Converts a word like "send_email" to "sendEmail". It
will remove non alphanumeric character from the word, so
"who's online" will be converted to "whoSOnline"
return self.Inflector.variablize(word)

## tableize(class_name)

Converts a class name to its table name according to rails
naming conventions. Example. Converts "Person" to "people" 

## classify(table_name)

Converts a table name to its class name according to rails
naming conventions. Example: Converts "people" to "Person" 

## ordinalize(number)
Converts number to its ordinal form.
This method converts 13 to 13th, 2 to 2nd ...

## unaccent(text)

Transforms a string to its unaccented version. 
This might be useful for generating "friendly" URLs

## urlize(text)

Transform a string its unaccented and underscored
version ready to be inserted in friendly URLs

## foreignKey(class_name, separate_class_name_and_id_with_underscore = 1)

Returns class_name in underscored form, with "_id" tacked on at the end. 
This is for use in dealing with the database.

# twistar: Asynchronous Python ORM
[![Build Status](https://secure.travis-ci.org/bmuller/twistar.png?branch=master)](https://travis-ci.org/bmuller/twistar)

The Twistar Project provides an ActiveRecord (ORM) pattern interface to the Twisted Project's RDBMS library.  This file contains minimal documentation - see the project home page at http://findingscience.com/twistar for more information.

## Installation

```
easy_install twistar
```

## Usage
Your database must be one of: MySQL, PostgreSQL, or SQLite.  The only DBAPI modules supported by Twistar are: MySQLdb, psycopg2, and sqlite3 - at least one of these must be installed.

Here's the obligatory TL;DR example of creating a User record, assuming that there is a table named "users" with varchar columns for first_name and last_name and an int age column:

```python
#!/usr/bin/env python
from twisted.enterprise import adbapi
from twistar.registry import Registry
from twistar.dbobject import DBObject
from twisted.internet import reactor

class User(DBObject):
     pass

def done(user):
     print "A user was just created with the name %s" % user.first_name
     reactor.stop()

# Connect to the DB
Registry.DBPOOL = adbapi.ConnectionPool('MySQLdb', user="twistar", passwd="apass", db="twistar")

# make a user
u = User()
u.first_name = "John"
u.last_name = "Smith"
u.age = 25

# Or, use this shorter version:
u = User(first_name="John", last_name="Smith", age=25)

# save the user
u.save().addCallback(done)

reactor.run()
```

Then, finding this user is easy:

```python
def found(users):
    print "I found %i users!" % len(users)
    for user in users:
        print "User: %s %s" % (user.first_name, user.last_name)

u = User.findBy(first_name="John", age=25).addCallback(found)
```

This is a very simple example - see http://findingscience.com/twistar for more complicated examples and additional uses.

## Testing
You will need to install the sqlite3 python package if you want to run the default tests.  To run the tests:

```
trial twistar
```

See the README in the twistar/tests folder for more information on testing with different database types.

## Documenation
If you intent on generating API documentation, you will need pydoctor.  If you want to generate the user documentation, you will need to install Twisted Lore.

To generate documentation:

```
make docs
```

Then open the docs/index.html file in a browser.

By default, the tests are run with the database driver sqlite3.  To change this,
simply edit the utils.py file and uncomment the right "from <db type>_config"
line (commenting out all others).  You will then need to edit the 
corresponding "<db type>_config" file to make sure that the connection string 
matches your test database.

Then, just rerun the test suite.
