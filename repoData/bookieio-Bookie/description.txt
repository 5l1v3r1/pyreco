#Font Awesome
##the iconic font designed for use with Twitter Bootstrap

The full suite of pictographic icons, examples, and documentation can be found at:
http://fortawesome.github.com/Font-Awesome/

##Contact
- Email: dave@davegandy.com
- Twitter: http://twitter.com/fortaweso_me
- Work: http://lemonwi.se co-founder

##License
The Font Awesome webfont, CSS, and LESS files are licensed under CC BY 3.0:
http://creativecommons.org/licenses/by/3.0/
A mention of 'Font Awesome - http://fortawesome.github.com/Font-Awesome'
in human-readable source code is considered acceptable attribution (most common on the
web). If human readable source code is not available to the end user, a mention in an 'About' 
or 'Credits' screen is considered acceptable (most common in desktop or mobile software).

Generic single-database configuration.
Bookie
========
:Main Site: https://bmark.us
:Docs: http://docs.bmark.us
:Mailing List: https://groups.google.com/forum/?hl=en#!forum/bookie_bookmarks
:Twitter: http://twitter.com/BookieBmarks
:Build Server: http://build.bmark.us

Bookie will one day be a self-hosted bookmark web-service similar to
Delicious.

Check out the main site for documentation on features, how to get started
installing, and where we're heading from here.

You can check out the Trello board to see what stuff is in the works atm and
what the status of your favorite pet feature is:

https://trello.com/board/bookie/4f18c1ac96c79ec27105f228

Quick Start
-----------
If you're on Ubuntu, you should be able to get started with:

::

    $ git clone git://github.com/bookieio/Bookie.git
    $ cd Bookie && make sysdeps && make install && make run
    $ google-chrome (or other browser) http://127.0.0.1:6543

If you're on anything else, give our Vagrant image a try. If you don't have it already, you'll need to download and install Vagrant:

http://www.vagrantup.com/downloads.html

After that, you should be able to get started with:

::

    $ git clone git://github.com/bookieio/Bookie.git
    $ cd Bookie
    $ vagrant up
    $ vagrant ssh
    % cd /vagrant
    % make run
    $ google-chrome (or other browser) http://127.0.0.1:4567

Note: If you run into problems during the `make sysdeps && make install` process, run `make clean_all` to reset the environment prior to re-running `make sysdeps && make install`.

If you're unable to complete the install process and need additional help please feel free to contact us in the #bookie IRC channel on Freenode, or the mailing lists.

Developing
-----------
If you wish to hack on Bookie with the rest of us please check out the
`HACKING.rst` doc in this tree.

Readable Parsing
=================

The system will handle fetching the html content of pages and running that
through a readable filter. We're using the library Decruft.  Once parsed, we
store that content so you can search and pull that up later.

There are currently three ways to load that content into the system.

1. Google Chrome Extension
---------------------------
The chrome extension supports a checkbox in the options that sends the current
page's html along for the ride when you add or edit a bookmark. In this way the
content is ready for your use right away.

2. existing.py
---------------
`existing.py` is a sample script writting in python that fetches a list of
unparsed urls from your install and starts fetching/parsing them. It was the
first script made to do it and is synchronous. On large bookmark lists it
might take a while for this to run. It was averaging some 1 bookmark/s on my
test system.

3. Let's complicate it, node.js, beanstalkd, and the api
---------------------------------------------------------
In order to have a method that was more performant, there's a system you can
use to really crank through these. There's much more setup involved.

The system is built around a new pair of API calls that will return a list of
unparsed urls and that you can feed information about an attempt to load html
content. The `readable_producer.js` is a node.js script that will run through
the list of bookmarks to parse and async fetch their content. If the content is
there and ok, it'll place that into a beanstalkd queue. If not, it'll create a
list of what went wrong and stick that in the queue.

The `readable_consumer.py` is meant to be run several times to read items off
the queue and to make API calls to the bookie installation. It will send the
content to bookie to run through the parser and store in the database. Since
this is sync code, we want to run multiple versions of this. In testing, I was
able to run 4 against a sqlite database, and 8 against postgresql backed bookie
install.

This method of running could be scaled well over 5 urls parsed and put into the
bookie database per second.

