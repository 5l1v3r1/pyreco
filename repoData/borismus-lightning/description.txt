## Lightning features

- One-step to add a new post (eg. a link)
- Static output
- Use any editor
- Uses existing DSLs: Markdown (content) + YAML (metadata) + Mustache (template)
- Simple logic-less templates
- Ability to work offline
- Logical placement of assets (content-related ones near the content,
  layout ones in the template)
- Fast builds
- Content directory format is decoupled from output.

### Important design decisions:

* Build should never change the source tree (with the exception of moving
  published drafts into the main site).
* There must be no server-side component. No rewrite rules, no scripts,
  etc.


## Directory structure

* `/content/` contains files written in Markdown, with a customized header.
* `/site.yaml` is the site-wide configuration.
* `/template/` contains files written in HTML and Mustache templates.

## Building one page

At build time, a content file is transformed into an object that's used
to populate the Mustache template. Content can either be a file.txt
somewhere, or a directory with an index.txt inside. The latter lets you
include other files related to the post.

For example, content like this:

    My new post
    ===========
    type: post
    posted: 2012-03-01 9:00am
    slug: my-new-post

    Just **testing**

    1. Hello
    2. World

Gets transformed into the following data:

    {
      "title": "My new post",
      "type": "post",
      "slug": "my-new-post",
      "published": "2012-03-01 9:00am",
      "content": "Just <b>testing</b> <ol><li>Hello</li><li>World</li></ol>"
    }

Additionally, contents of the global site.yaml, which looks like:

    title: My awesome blog
    permalinks:
      post: {{year}}/{{slug}}
      page: {{slug}}

are added to the template payload:

    {
      "site_title": "My awesome blog"
      "site_permalinks": {
        "post": "{{year}}/{{slug}}",
        "page": "{{slug}}"
      }
    }

Then, once we resolve the template to use (in this case, the post
template):

    <!doctype html>
    <head>
      <title>{{title}} | {{site_title}}</title>
    </head>
    <article>
      {{content}}
    </article>
    <date>
    {{published}}
    </date>

It gets populated with the data, resulting in the following output:

    <!doctype html>
    <head>
      <title>My new post | My awesome blog</title>
    </head>
    <article>
      Just <b>testing</b> <ol><li>Hello</li><li>World</li></ol>
    </article>

Next, the engine looks at the configured permalink structure set in the
site.yaml configuration to decide where to place the output. In this
case, the `post` value of `site_permalinks` is `{{year}}/{{slug}}`, so
year will be populated from {{published}}, resulting in
`2012/my-new-post`.

To avoid rewrite rules, the engine creates a directory with the output,
and creates an index.html inside of it.

Also, if there are assets associated with the article, they are copied
into the corresponding directory. 

## Building it all

Broadly, there are two kinds of templates: single page ones, and ones
that require a list of articles. The engine uses a convention: the
"page" and "post" type are single-source, and "archive" type is
multi-source.

Single-source pages are all described above.

### Multi-source pages

Multi-source pages have an additional `list` value passed into them,
with optional additional values: `filter` and `limit`. For example:

    All links
    =========
    type: archive
    filter: link
    list

    This is a list of all links ever written.

The list value results in an extra property being passed to the
template, called list. The list property will contain a list of articles
requested:

    [
      {
        "title": "My new post",
        "type": "post",
        "slug": "my-new-post",
        "published": "2012-03-01 9:00am",
        "content": "Just <b>testing</b> <ol><li>Hello</li><li>World</li></ol>"
      }, ...
    ]

## Incremental building

Every time we run a build, need to know which files have been changed
since the last build.

Solution is to dump a cache of files, their modification times and other
details required by the list as of the last build:

    {
      "path": "index.txt",
      "modified": NNNN,
      "info": {...}
    }

This cache is stored in `/web/.last_build`. Strategy is to generate this
cache on build, and see which files differ.

1. Build each changed file.
2. Build every list file.
3. Update the cache and save it, replacing the old one.


# TODO

Before blog update:

- Put unformatted meta descriptions into the page.

Before lightning release:

- Pack it up into a convenient installation (including inotify, dropbox, etc).
- Should there be a git repo clone involved?
- submit to pypi
- BUG: What about including `{{...}}` in the markup?
- Unit test and refactor.
- Refactoring into classes.

### Done

- Make icon work on iOS
- Icon
- Pagespeed
- Post describing changes
- Better headshot
- Use directories from configuration file.
- Run through optimizer before deploy?
- Check all assets for posts, make them inline if needed.
- Analytics
- text distinctions based on post type (talk, link, article)
- graphical permalink (×‘)
- Change quote image.
- Migrate all content to new blog.
- Generate RSS feed.
  - one for all posts
  - one for all links

- Make a new type for talks
- More compact archive page
- Does it work well with inotify? How about cron?
- Integrate with dropbox.
- Fix boris.smus.com to work :)
- Make links actually link out
- Publish assets that are stored in the content directory (only if
  associated file changes).
- Try out with real content, porting existing blog.
- Respect the `<!--more-->` tag for excerpts, with a snip attribute as
  an alternative.
- Fix position of the read more thingy
- Responsive styles for different sizes
- Code snippets syntax highlight.
- Archive page (with filtering)


Lightning is a static blogging engine designed to make it painless to
author and update large blogs. Key features are:

- Standalone content directory.
- Incremental building.
- Easy-to-author configuration.
- Use your favorite editor for everything.

Here's a preview of [publishing using lightning][flow] once you're set up.

# Installation

1. Clone the repository via `git clone git@github.com:borismus/lightning.git`
2. Run `cd lightning` to get to your newly cloned repository.
2. Install all required dependencies by running `pip install -r requirements.txt`.
3. Run `./lightning` to build and `./lightning preview` to run a
   webserver.
4. Open <http://localhost:8000> in your browser.

# Usage

Build incrementally.

    > ./lightning

Forcibly rebuild everything regardless of whether or not there have been
changes made to the content. This is useful if you change your template.

    > ./lightning rebuild

Start watching for local changes to the content, rebuilding
incrementally based on that.

    > ./lightning watch

Start a really simple local web server with its document root pointing
to the output directory.

    > ./lightning preview

Deploy the site to the specified S3 bucket.

    > ./lightning deploy


# Configuration

`lightning.yaml` specifies where to look for content, template and where
to dump output. It also specifies where to deploy the site.

`site.yaml` specifies metadata about the site itself, including
permalinks, verbs, site title, date format. It belongs in the content
root.


# For production

I use a combination of Dropbox and Lightning (which uses inotify-tools)
to make for a [pleasant blogging experience][flow]. Here are the steps to get
Lightning working on your server.

0. Install Dropbox on your [server][dropbox].
1. Install Lightning on your server (see above).
2. Customize your theme.
3. Configure `lightning.yaml` to look for your content on Dropbox (eg.
   `~/Dropbox/my-blog/`)
4. Setup a watcher on your server via `lightning watch`. It's useful to
   run the watcher using `nohup`.
5. Make some changes to your content directory from any Dropbox client
   (I sometimes use [Nebulous][nebulous] on iPad).
6. You're done.

[Enjoy][flow].

[dropbox]: https://www.dropbox.com/install?os=lnx
[nebulous]: http://nebulousapps.net/
[flow]: http://www.youtube.com/watch?v=z6ZH2DyURU4


